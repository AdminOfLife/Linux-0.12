
tools/system：     文件格式 elf32-i386


Disassembly of section .text:

00000000 <pg_dir>:
       0:	b8 10 00 00 00       	mov    $0x10,%eax
       5:	8e d8                	mov    %eax,%ds
       7:	8e c0                	mov    %eax,%es
       9:	8e e0                	mov    %eax,%fs
       b:	8e e8                	mov    %eax,%gs
       d:	0f b2 25 c0 e2 02 00 	lss    0x2e2c0,%esp
      14:	e8 58 00 00 00       	call   71 <setup_idt>
      19:	e8 83 00 00 00       	call   a1 <setup_gdt>
      1e:	b8 10 00 00 00       	mov    $0x10,%eax
      23:	8e d8                	mov    %eax,%ds
      25:	8e c0                	mov    %eax,%es
      27:	8e e0                	mov    %eax,%fs
      29:	8e e8                	mov    %eax,%gs
      2b:	0f b2 25 c0 e2 02 00 	lss    0x2e2c0,%esp
      32:	31 c0                	xor    %eax,%eax
      34:	40                   	inc    %eax
      35:	a3 00 00 00 00       	mov    %eax,0x0
      3a:	39 05 00 00 10 00    	cmp    %eax,0x100000
      40:	74 f2                	je     34 <OLDSS+0x4>
      42:	0f 20 c0             	mov    %cr0,%eax
      45:	25 11 00 00 80       	and    $0x80000011,%eax
      4a:	83 c8 02             	or     $0x2,%eax
      4d:	0f 22 c0             	mov    %eax,%cr0
      50:	e8 05 00 00 00       	call   5a <check_x87>
      55:	e9 a6 53 00 00       	jmp    5400 <after_page_tables>

0000005a <check_x87>:
      5a:	db e3                	fninit 
      5c:	9b df e0             	fstsw  %ax
      5f:	3c 00                	cmp    $0x0,%al
      61:	74 0b                	je     6e <check_x87+0x14>
      63:	0f 20 c0             	mov    %cr0,%eax
      66:	83 f0 06             	xor    $0x6,%eax
      69:	0f 22 c0             	mov    %eax,%cr0
      6c:	c3                   	ret    
      6d:	90                   	nop
      6e:	db e4                	fnsetpm(287 only) 
      70:	c3                   	ret    

00000071 <setup_idt>:
      71:	8d 15 28 54 00 00    	lea    0x5428,%edx
      77:	b8 00 00 08 00       	mov    $0x80000,%eax
      7c:	66 89 d0             	mov    %dx,%ax
      7f:	66 ba 00 8e          	mov    $0x8e00,%dx
      83:	8d 3d b8 54 00 00    	lea    0x54b8,%edi
      89:	b9 00 01 00 00       	mov    $0x100,%ecx

0000008e <rp_sidt>:
      8e:	89 07                	mov    %eax,(%edi)
      90:	89 57 04             	mov    %edx,0x4(%edi)
      93:	83 c7 08             	add    $0x8,%edi
      96:	49                   	dec    %ecx
      97:	75 f5                	jne    8e <rp_sidt>
      99:	0f 01 1d aa 54 00 00 	lidtl  0x54aa
      a0:	c3                   	ret    

000000a1 <setup_gdt>:
      a1:	0f 01 15 b2 54 00 00 	lgdtl  0x54b2
      a8:	c3                   	ret    
	...

00001000 <pg0>:
	...

00002000 <pg1>:
	...

00003000 <pg2>:
	...

00004000 <pg3>:
	...

00005000 <tmp_floppy_area>:
	...

00005400 <after_page_tables>:
    5400:	6a 00                	push   $0x0
    5402:	6a 00                	push   $0x0
    5404:	6a 00                	push   $0x0
    5406:	68 12 54 00 00       	push   $0x5412
    540b:	68 00 68 00 00       	push   $0x6800
    5410:	eb 3c                	jmp    544e <setup_paging>

00005412 <L6>:
    5412:	eb fe                	jmp    5412 <L6>

00005414 <int_msg>:
    5414:	55                   	push   %ebp
    5415:	6e                   	outsb  %ds:(%esi),(%dx)
    5416:	6b 6e 6f 77          	imul   $0x77,0x6f(%esi),%ebp
    541a:	6e                   	outsb  %ds:(%esi),(%dx)
    541b:	20 69 6e             	and    %ch,0x6e(%ecx)
    541e:	74 65                	je     5485 <setup_paging+0x37>
    5420:	72 72                	jb     5494 <setup_paging+0x46>
    5422:	75 70                	jne    5494 <setup_paging+0x46>
    5424:	74 0a                	je     5430 <ignore_int+0x8>
    5426:	0d                   	.byte 0xd
	...

00005428 <ignore_int>:
    5428:	50                   	push   %eax
    5429:	51                   	push   %ecx
    542a:	52                   	push   %edx
    542b:	1e                   	push   %ds
    542c:	06                   	push   %es
    542d:	0f a0                	push   %fs
    542f:	b8 10 00 00 00       	mov    $0x10,%eax
    5434:	8e d8                	mov    %eax,%ds
    5436:	8e c0                	mov    %eax,%es
    5438:	8e e0                	mov    %eax,%fs
    543a:	68 14 54 00 00       	push   $0x5414
    543f:	e8 03 38 00 00       	call   8c47 <printk>
    5444:	58                   	pop    %eax
    5445:	0f a1                	pop    %fs
    5447:	07                   	pop    %es
    5448:	1f                   	pop    %ds
    5449:	5a                   	pop    %edx
    544a:	59                   	pop    %ecx
    544b:	58                   	pop    %eax
    544c:	cf                   	iret   
    544d:	90                   	nop

0000544e <setup_paging>:
    544e:	b9 00 14 00 00       	mov    $0x1400,%ecx
    5453:	31 c0                	xor    %eax,%eax
    5455:	31 ff                	xor    %edi,%edi
    5457:	fc                   	cld    
    5458:	f3 ab                	rep stos %eax,%es:(%edi)
    545a:	c7 05 00 00 00 00 07 	movl   $0x1007,0x0
    5461:	10 00 00 
    5464:	c7 05 04 00 00 00 07 	movl   $0x2007,0x4
    546b:	20 00 00 
    546e:	c7 05 08 00 00 00 07 	movl   $0x3007,0x8
    5475:	30 00 00 
    5478:	c7 05 0c 00 00 00 07 	movl   $0x4007,0xc
    547f:	40 00 00 
    5482:	bf fc 4f 00 00       	mov    $0x4ffc,%edi
    5487:	b8 07 f0 ff 00       	mov    $0xfff007,%eax
    548c:	fd                   	std    
    548d:	ab                   	stos   %eax,%es:(%edi)
    548e:	2d 00 10 00 00       	sub    $0x1000,%eax
    5493:	7d f8                	jge    548d <setup_paging+0x3f>
    5495:	fc                   	cld    
    5496:	31 c0                	xor    %eax,%eax
    5498:	0f 22 d8             	mov    %eax,%cr3
    549b:	0f 20 c0             	mov    %cr0,%eax
    549e:	0d 00 00 00 80       	or     $0x80000000,%eax
    54a3:	0f 22 c0             	mov    %eax,%cr0
    54a6:	c3                   	ret    
    54a7:	90                   	nop
	...

000054aa <idt_descr>:
    54aa:	ff 07                	incl   (%edi)
    54ac:	b8 54 00 00 00       	mov    $0x54,%eax
	...

000054b2 <gdt_descr>:
    54b2:	ff 07                	incl   (%edi)
    54b4:	b8                   	.byte 0xb8
    54b5:	5c                   	pop    %esp
	...

000054b8 <idt>:
	...

00005cb8 <gdt>:
	...
    5cc0:	ff 0f                	decl   (%edi)
    5cc2:	00 00                	add    %al,(%eax)
    5cc4:	00 9a c0 00 ff 0f    	add    %bl,0xfff00c0(%edx)
    5cca:	00 00                	add    %al,(%eax)
    5ccc:	00 92 c0 00 00 00    	add    %dl,0xc0(%edx)
	...

000064b8 <fork>:
// __attribute__((always_inline))表示将函数强制设置为内联函数
// int fork(void) __attribute__((always_inline));
//  int pause()系统调用：暂停进程的执行，直到收到一个信号。
// int pause(void) __attribute__((always_inline));
// fork()系统调用函数的定义
_syscall0(int, fork)
    64b8:	83 ec 10             	sub    $0x10,%esp
    64bb:	b8 02 00 00 00       	mov    $0x2,%eax
    64c0:	cd 80                	int    $0x80
    64c2:	89 44 24 0c          	mov    %eax,0xc(%esp)
    64c6:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    64cb:	78 06                	js     64d3 <fork+0x1b>
    64cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
    64d1:	eb 10                	jmp    64e3 <fork+0x2b>
    64d3:	8b 44 24 0c          	mov    0xc(%esp),%eax
    64d7:	f7 d8                	neg    %eax
    64d9:	a3 24 58 04 00       	mov    %eax,0x45824
    64de:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    64e3:	83 c4 10             	add    $0x10,%esp
    64e6:	c3                   	ret    

000064e7 <pause>:
// pause()系统调用函数的定义
_syscall0(int, pause)
    64e7:	83 ec 10             	sub    $0x10,%esp
    64ea:	b8 1d 00 00 00       	mov    $0x1d,%eax
    64ef:	cd 80                	int    $0x80
    64f1:	89 44 24 0c          	mov    %eax,0xc(%esp)
    64f5:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    64fa:	78 06                	js     6502 <pause+0x1b>
    64fc:	8b 44 24 0c          	mov    0xc(%esp),%eax
    6500:	eb 10                	jmp    6512 <pause+0x2b>
    6502:	8b 44 24 0c          	mov    0xc(%esp),%eax
    6506:	f7 d8                	neg    %eax
    6508:	a3 24 58 04 00       	mov    %eax,0x45824
    650d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    6512:	83 c4 10             	add    $0x10,%esp
    6515:	c3                   	ret    

00006516 <setup>:
// int setup(void * BIOS)系统调用,仅用于linux初始化(仅在这个程序中被调用).
_syscall1(int, setup, void *, BIOS)
    6516:	53                   	push   %ebx
    6517:	83 ec 10             	sub    $0x10,%esp
    651a:	8b 54 24 18          	mov    0x18(%esp),%edx
    651e:	b8 00 00 00 00       	mov    $0x0,%eax
    6523:	89 d3                	mov    %edx,%ebx
    6525:	cd 80                	int    $0x80
    6527:	89 44 24 0c          	mov    %eax,0xc(%esp)
    652b:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    6530:	78 06                	js     6538 <setup+0x22>
    6532:	8b 44 24 0c          	mov    0xc(%esp),%eax
    6536:	eb 10                	jmp    6548 <setup+0x32>
    6538:	8b 44 24 0c          	mov    0xc(%esp),%eax
    653c:	f7 d8                	neg    %eax
    653e:	a3 24 58 04 00       	mov    %eax,0x45824
    6543:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    6548:	83 c4 10             	add    $0x10,%esp
    654b:	5b                   	pop    %ebx
    654c:	c3                   	ret    

0000654d <sync>:
// int sync()系统调用：更新文件系统。
_syscall0(int, sync)
    654d:	83 ec 10             	sub    $0x10,%esp
    6550:	b8 24 00 00 00       	mov    $0x24,%eax
    6555:	cd 80                	int    $0x80
    6557:	89 44 24 0c          	mov    %eax,0xc(%esp)
    655b:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    6560:	78 06                	js     6568 <sync+0x1b>
    6562:	8b 44 24 0c          	mov    0xc(%esp),%eax
    6566:	eb 10                	jmp    6578 <sync+0x2b>
    6568:	8b 44 24 0c          	mov    0xc(%esp),%eax
    656c:	f7 d8                	neg    %eax
    656e:	a3 24 58 04 00       	mov    %eax,0x45824
    6573:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    6578:	83 c4 10             	add    $0x10,%esp
    657b:	c3                   	ret    

0000657c <fork_for_process0>:
extern long rd_init(long mem_start, int length);	// 虚拟盘初始化(blk_drv/ramdisk.c)
extern long kernel_mktime(struct tm * tm);			// 计算系统开机启动时间(秒)

// fork系统调用函数,该函数作为static inline表示内联函数，主要用来在进程0里面创建进程1的时候内联，使进程0在生成进程1的时候
// 不使用自己的用户堆栈
static inline long fork_for_process0() {
    657c:	83 ec 10             	sub    $0x10,%esp
	long __res;
	__asm__ volatile (
    657f:	b8 02 00 00 00       	mov    $0x2,%eax
    6584:	cd 80                	int    $0x80
    6586:	89 44 24 0c          	mov    %eax,0xc(%esp)
		"int $0x80\n\t"  														/* 调用系统中断0x80 */
		: "=a" (__res)  														/* 返回值->eax(__res) */
		: "0" (2));  															/* 输入为系统中断调用号__NR_name */
	if (__res >= 0)  															/* 如果返回值>=0,则直接返回该值 */
    658a:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    658f:	78 06                	js     6597 <fork_for_process0+0x1b>
		return __res;
    6591:	8b 44 24 0c          	mov    0xc(%esp),%eax
    6595:	eb 10                	jmp    65a7 <fork_for_process0+0x2b>
	errno = -__res;  															/* 否则置出错号,并返回-1 */
    6597:	8b 44 24 0c          	mov    0xc(%esp),%eax
    659b:	f7 d8                	neg    %eax
    659d:	a3 24 58 04 00       	mov    %eax,0x45824
	return -1;
    65a2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
    65a7:	83 c4 10             	add    $0x10,%esp
    65aa:	c3                   	ret    

000065ab <sprintf>:

// 内核专用sprintf()函数.该函数用于产生格式化信息并输出到指定缓冲区str中.参数'*fmt'指定输出将采用格式.
static int sprintf(char * str, const char *fmt, ...)
{
    65ab:	83 ec 1c             	sub    $0x1c,%esp
	va_list args;
	int i;

	va_start(args, fmt);
    65ae:	8d 44 24 24          	lea    0x24(%esp),%eax
    65b2:	83 c0 04             	add    $0x4,%eax
    65b5:	89 44 24 0c          	mov    %eax,0xc(%esp)
	i = vsprintf(str, fmt, args);
    65b9:	8b 44 24 24          	mov    0x24(%esp),%eax
    65bd:	83 ec 04             	sub    $0x4,%esp
    65c0:	ff 74 24 10          	pushl  0x10(%esp)
    65c4:	50                   	push   %eax
    65c5:	ff 74 24 2c          	pushl  0x2c(%esp)
    65c9:	e8 b7 29 00 00       	call   8f85 <vsprintf>
    65ce:	83 c4 10             	add    $0x10,%esp
    65d1:	89 44 24 08          	mov    %eax,0x8(%esp)
	va_end(args);
	return i;
    65d5:	8b 44 24 08          	mov    0x8(%esp),%eax
}
    65d9:	83 c4 1c             	add    $0x1c,%esp
    65dc:	c3                   	ret    

000065dd <time_init>:
#define BCD_TO_BIN(val) ((val) = ((val)&15) + ((val) >> 4) * 10)

// 该函数取CMOS实时钟信息作为开机时间,并保存到全局变量startup_time(秒)中.其中调用的函数kernel_mktime()用于计算从
// 1970年1月1日0时起到开机当日经过的秒数,作为开机时间.
static void time_init(void)
{
    65dd:	83 ec 3c             	sub    $0x3c,%esp
	struct tm time;								// 时间结构tm定义在include/time.h中
	// CMOS的访问速度很慢.为了减小时间误差,在读取了下面循环中所有数值后,若此时CMOS中秒值了变化,那么就重新读取所有值.这样内核
	// 就能把与CMOS时间误差控制在1秒之内.
	do {
		time.tm_sec = CMOS_READ(0);				// 当前时间秒值(均是BCD码值)
    65e0:	b8 80 00 00 00       	mov    $0x80,%eax
    65e5:	ba 70 00 00 00       	mov    $0x70,%edx
    65ea:	ee                   	out    %al,(%dx)
    65eb:	eb 00                	jmp    65ed <time_init+0x10>
    65ed:	eb 00                	jmp    65ef <time_init+0x12>
    65ef:	b8 71 00 00 00       	mov    $0x71,%eax
    65f4:	89 c2                	mov    %eax,%edx
    65f6:	ec                   	in     (%dx),%al
    65f7:	eb 00                	jmp    65f9 <time_init+0x1c>
    65f9:	eb 00                	jmp    65fb <time_init+0x1e>
    65fb:	88 44 24 2f          	mov    %al,0x2f(%esp)
    65ff:	0f b6 44 24 2f       	movzbl 0x2f(%esp),%eax
    6604:	0f b6 c0             	movzbl %al,%eax
    6607:	89 44 24 04          	mov    %eax,0x4(%esp)
		time.tm_min = CMOS_READ(2);				// 当前分钟值.
    660b:	b8 82 00 00 00       	mov    $0x82,%eax
    6610:	ba 70 00 00 00       	mov    $0x70,%edx
    6615:	ee                   	out    %al,(%dx)
    6616:	eb 00                	jmp    6618 <time_init+0x3b>
    6618:	eb 00                	jmp    661a <time_init+0x3d>
    661a:	b8 71 00 00 00       	mov    $0x71,%eax
    661f:	89 c2                	mov    %eax,%edx
    6621:	ec                   	in     (%dx),%al
    6622:	eb 00                	jmp    6624 <time_init+0x47>
    6624:	eb 00                	jmp    6626 <time_init+0x49>
    6626:	88 44 24 2e          	mov    %al,0x2e(%esp)
    662a:	0f b6 44 24 2e       	movzbl 0x2e(%esp),%eax
    662f:	0f b6 c0             	movzbl %al,%eax
    6632:	89 44 24 08          	mov    %eax,0x8(%esp)
		time.tm_hour = CMOS_READ(4);			// 当前小时值.
    6636:	b8 84 00 00 00       	mov    $0x84,%eax
    663b:	ba 70 00 00 00       	mov    $0x70,%edx
    6640:	ee                   	out    %al,(%dx)
    6641:	eb 00                	jmp    6643 <time_init+0x66>
    6643:	eb 00                	jmp    6645 <time_init+0x68>
    6645:	b8 71 00 00 00       	mov    $0x71,%eax
    664a:	89 c2                	mov    %eax,%edx
    664c:	ec                   	in     (%dx),%al
    664d:	eb 00                	jmp    664f <time_init+0x72>
    664f:	eb 00                	jmp    6651 <time_init+0x74>
    6651:	88 44 24 2d          	mov    %al,0x2d(%esp)
    6655:	0f b6 44 24 2d       	movzbl 0x2d(%esp),%eax
    665a:	0f b6 c0             	movzbl %al,%eax
    665d:	89 44 24 0c          	mov    %eax,0xc(%esp)
		time.tm_mday = CMOS_READ(7);			// 一月中的当天日期.
    6661:	b8 87 00 00 00       	mov    $0x87,%eax
    6666:	ba 70 00 00 00       	mov    $0x70,%edx
    666b:	ee                   	out    %al,(%dx)
    666c:	eb 00                	jmp    666e <time_init+0x91>
    666e:	eb 00                	jmp    6670 <time_init+0x93>
    6670:	b8 71 00 00 00       	mov    $0x71,%eax
    6675:	89 c2                	mov    %eax,%edx
    6677:	ec                   	in     (%dx),%al
    6678:	eb 00                	jmp    667a <time_init+0x9d>
    667a:	eb 00                	jmp    667c <time_init+0x9f>
    667c:	88 44 24 2c          	mov    %al,0x2c(%esp)
    6680:	0f b6 44 24 2c       	movzbl 0x2c(%esp),%eax
    6685:	0f b6 c0             	movzbl %al,%eax
    6688:	89 44 24 10          	mov    %eax,0x10(%esp)
		time.tm_mon = CMOS_READ(8);				// 当前月份(1-12)
    668c:	b8 88 00 00 00       	mov    $0x88,%eax
    6691:	ba 70 00 00 00       	mov    $0x70,%edx
    6696:	ee                   	out    %al,(%dx)
    6697:	eb 00                	jmp    6699 <time_init+0xbc>
    6699:	eb 00                	jmp    669b <time_init+0xbe>
    669b:	b8 71 00 00 00       	mov    $0x71,%eax
    66a0:	89 c2                	mov    %eax,%edx
    66a2:	ec                   	in     (%dx),%al
    66a3:	eb 00                	jmp    66a5 <time_init+0xc8>
    66a5:	eb 00                	jmp    66a7 <time_init+0xca>
    66a7:	88 44 24 2b          	mov    %al,0x2b(%esp)
    66ab:	0f b6 44 24 2b       	movzbl 0x2b(%esp),%eax
    66b0:	0f b6 c0             	movzbl %al,%eax
    66b3:	89 44 24 14          	mov    %eax,0x14(%esp)
		time.tm_year = CMOS_READ(9);			// 当前年份.
    66b7:	b8 89 00 00 00       	mov    $0x89,%eax
    66bc:	ba 70 00 00 00       	mov    $0x70,%edx
    66c1:	ee                   	out    %al,(%dx)
    66c2:	eb 00                	jmp    66c4 <time_init+0xe7>
    66c4:	eb 00                	jmp    66c6 <time_init+0xe9>
    66c6:	b8 71 00 00 00       	mov    $0x71,%eax
    66cb:	89 c2                	mov    %eax,%edx
    66cd:	ec                   	in     (%dx),%al
    66ce:	eb 00                	jmp    66d0 <time_init+0xf3>
    66d0:	eb 00                	jmp    66d2 <time_init+0xf5>
    66d2:	88 44 24 2a          	mov    %al,0x2a(%esp)
    66d6:	0f b6 44 24 2a       	movzbl 0x2a(%esp),%eax
    66db:	0f b6 c0             	movzbl %al,%eax
    66de:	89 44 24 18          	mov    %eax,0x18(%esp)
	} while (time.tm_sec != CMOS_READ(0));
    66e2:	8b 4c 24 04          	mov    0x4(%esp),%ecx
    66e6:	b8 80 00 00 00       	mov    $0x80,%eax
    66eb:	ba 70 00 00 00       	mov    $0x70,%edx
    66f0:	ee                   	out    %al,(%dx)
    66f1:	eb 00                	jmp    66f3 <time_init+0x116>
    66f3:	eb 00                	jmp    66f5 <time_init+0x118>
    66f5:	b8 71 00 00 00       	mov    $0x71,%eax
    66fa:	89 c2                	mov    %eax,%edx
    66fc:	ec                   	in     (%dx),%al
    66fd:	eb 00                	jmp    66ff <time_init+0x122>
    66ff:	eb 00                	jmp    6701 <time_init+0x124>
    6701:	88 44 24 29          	mov    %al,0x29(%esp)
    6705:	0f b6 44 24 29       	movzbl 0x29(%esp),%eax
    670a:	0f b6 c0             	movzbl %al,%eax
    670d:	39 c1                	cmp    %eax,%ecx
    670f:	0f 85 cb fe ff ff    	jne    65e0 <time_init+0x3>
	BCD_TO_BIN(time.tm_sec);					// 转换成进进制数值.
    6715:	8b 44 24 04          	mov    0x4(%esp),%eax
    6719:	83 e0 0f             	and    $0xf,%eax
    671c:	89 c1                	mov    %eax,%ecx
    671e:	8b 44 24 04          	mov    0x4(%esp),%eax
    6722:	c1 f8 04             	sar    $0x4,%eax
    6725:	89 c2                	mov    %eax,%edx
    6727:	89 d0                	mov    %edx,%eax
    6729:	c1 e0 02             	shl    $0x2,%eax
    672c:	01 d0                	add    %edx,%eax
    672e:	01 c0                	add    %eax,%eax
    6730:	01 c8                	add    %ecx,%eax
    6732:	89 44 24 04          	mov    %eax,0x4(%esp)
	BCD_TO_BIN(time.tm_min);
    6736:	8b 44 24 08          	mov    0x8(%esp),%eax
    673a:	83 e0 0f             	and    $0xf,%eax
    673d:	89 c1                	mov    %eax,%ecx
    673f:	8b 44 24 08          	mov    0x8(%esp),%eax
    6743:	c1 f8 04             	sar    $0x4,%eax
    6746:	89 c2                	mov    %eax,%edx
    6748:	89 d0                	mov    %edx,%eax
    674a:	c1 e0 02             	shl    $0x2,%eax
    674d:	01 d0                	add    %edx,%eax
    674f:	01 c0                	add    %eax,%eax
    6751:	01 c8                	add    %ecx,%eax
    6753:	89 44 24 08          	mov    %eax,0x8(%esp)
	BCD_TO_BIN(time.tm_hour);
    6757:	8b 44 24 0c          	mov    0xc(%esp),%eax
    675b:	83 e0 0f             	and    $0xf,%eax
    675e:	89 c1                	mov    %eax,%ecx
    6760:	8b 44 24 0c          	mov    0xc(%esp),%eax
    6764:	c1 f8 04             	sar    $0x4,%eax
    6767:	89 c2                	mov    %eax,%edx
    6769:	89 d0                	mov    %edx,%eax
    676b:	c1 e0 02             	shl    $0x2,%eax
    676e:	01 d0                	add    %edx,%eax
    6770:	01 c0                	add    %eax,%eax
    6772:	01 c8                	add    %ecx,%eax
    6774:	89 44 24 0c          	mov    %eax,0xc(%esp)
	BCD_TO_BIN(time.tm_mday);
    6778:	8b 44 24 10          	mov    0x10(%esp),%eax
    677c:	83 e0 0f             	and    $0xf,%eax
    677f:	89 c1                	mov    %eax,%ecx
    6781:	8b 44 24 10          	mov    0x10(%esp),%eax
    6785:	c1 f8 04             	sar    $0x4,%eax
    6788:	89 c2                	mov    %eax,%edx
    678a:	89 d0                	mov    %edx,%eax
    678c:	c1 e0 02             	shl    $0x2,%eax
    678f:	01 d0                	add    %edx,%eax
    6791:	01 c0                	add    %eax,%eax
    6793:	01 c8                	add    %ecx,%eax
    6795:	89 44 24 10          	mov    %eax,0x10(%esp)
	BCD_TO_BIN(time.tm_mon);
    6799:	8b 44 24 14          	mov    0x14(%esp),%eax
    679d:	83 e0 0f             	and    $0xf,%eax
    67a0:	89 c1                	mov    %eax,%ecx
    67a2:	8b 44 24 14          	mov    0x14(%esp),%eax
    67a6:	c1 f8 04             	sar    $0x4,%eax
    67a9:	89 c2                	mov    %eax,%edx
    67ab:	89 d0                	mov    %edx,%eax
    67ad:	c1 e0 02             	shl    $0x2,%eax
    67b0:	01 d0                	add    %edx,%eax
    67b2:	01 c0                	add    %eax,%eax
    67b4:	01 c8                	add    %ecx,%eax
    67b6:	89 44 24 14          	mov    %eax,0x14(%esp)
	BCD_TO_BIN(time.tm_year);
    67ba:	8b 44 24 18          	mov    0x18(%esp),%eax
    67be:	83 e0 0f             	and    $0xf,%eax
    67c1:	89 c1                	mov    %eax,%ecx
    67c3:	8b 44 24 18          	mov    0x18(%esp),%eax
    67c7:	c1 f8 04             	sar    $0x4,%eax
    67ca:	89 c2                	mov    %eax,%edx
    67cc:	89 d0                	mov    %edx,%eax
    67ce:	c1 e0 02             	shl    $0x2,%eax
    67d1:	01 d0                	add    %edx,%eax
    67d3:	01 c0                	add    %eax,%eax
    67d5:	01 c8                	add    %ecx,%eax
    67d7:	89 44 24 18          	mov    %eax,0x18(%esp)
	time.tm_mon--;								// tm_mon中月份范围是0~11.
    67db:	8b 44 24 14          	mov    0x14(%esp),%eax
    67df:	83 e8 01             	sub    $0x1,%eax
    67e2:	89 44 24 14          	mov    %eax,0x14(%esp)
	startup_time = kernel_mktime(&time);		// 计算开机时间.kernel/mktime.c
    67e6:	83 ec 0c             	sub    $0xc,%esp
    67e9:	8d 44 24 10          	lea    0x10(%esp),%eax
    67ed:	50                   	push   %eax
    67ee:	e8 bc 53 00 00       	call   bbaf <kernel_mktime>
    67f3:	83 c4 10             	add    $0x10,%esp
    67f6:	a3 04 eb 02 00       	mov    %eax,0x2eb04
}
    67fb:	90                   	nop
    67fc:	83 c4 3c             	add    $0x3c,%esp
    67ff:	c3                   	ret    

00006800 <main>:
struct drive_info { char dummy[32]; } drive_info;	// 用于存放硬盘参数表信息.

// 内核初始化主程序.初始化结束后将以任务0(idle任务即空闲任务)的身份运行.
// 英文注释含义是"这里确实是void,没错.在startup程序(head.s)中就是这样假设的".参见head.h程序代码.
int main(void)										/* This really IS void, no error here. */
{													/* The startup routine assumes (well, ...) this */
    6800:	8d 4c 24 04          	lea    0x4(%esp),%ecx
    6804:	83 e4 f0             	and    $0xfffffff0,%esp
    6807:	ff 71 fc             	pushl  -0x4(%ecx)
    680a:	55                   	push   %ebp
    680b:	89 e5                	mov    %esp,%ebp
    680d:	51                   	push   %ecx
    680e:	83 ec 04             	sub    $0x4,%esp
#ifdef EM
	// 开启仿真协处理器
	__asm__("movl %cr0,%eax \n\t" \
    6811:	0f 20 c0             	mov    %cr0,%eax
    6814:	83 f0 06             	xor    $0x6,%eax
    6817:	0f 22 c0             	mov    %eax,%cr0
	// 首先保存根文件系统设备和交换文件设备号,并根据setup.s程序中获取的信息设置控制台终端屏幕行,列数环境变量TERM,并用其设置初始init进程
	// 中执行etc/rc文件和shell程序使用的环境变量,以及复制内存0x90080处的硬盘表.
	// 其中ROOT_DEV已在前面包含进的include/linux/fs.h文件上被声明为extern_int
	// 而SWAP_DEV在include/linux/mm.h文件内也作了相同声明.这里mm.h文件并没有显式地列在本程序前部,因为前面包含进的include/linux/sched.h
	// 文件中已经含有它.
 	ROOT_DEV = ORIG_ROOT_DEV;										// ROOT_DEV定义在fs/super.c
    681a:	b8 fc 01 09 00       	mov    $0x901fc,%eax
    681f:	0f b7 00             	movzwl (%eax),%eax
    6822:	0f b7 c0             	movzwl %ax,%eax
    6825:	a3 cc 10 03 00       	mov    %eax,0x310cc
 	SWAP_DEV = ORIG_SWAP_DEV;										// SWAP_DEV定义在mm/swap.c
    682a:	b8 fa 01 09 00       	mov    $0x901fa,%eax
    682f:	0f b7 00             	movzwl (%eax),%eax
    6832:	0f b7 c0             	movzwl %ax,%eax
    6835:	a3 a0 01 03 00       	mov    %eax,0x301a0
   	sprintf(term, "TERM=con%dx%d", CON_COLS, CON_ROWS);
    683a:	b8 0e 00 09 00       	mov    $0x9000e,%eax
    683f:	0f b7 00             	movzwl (%eax),%eax
    6842:	0f b7 c0             	movzwl %ax,%eax
    6845:	0f b6 d0             	movzbl %al,%edx
    6848:	b8 0e 00 09 00       	mov    $0x9000e,%eax
    684d:	0f b7 00             	movzwl (%eax),%eax
    6850:	66 c1 e8 08          	shr    $0x8,%ax
    6854:	0f b7 c0             	movzwl %ax,%eax
    6857:	52                   	push   %edx
    6858:	50                   	push   %eax
    6859:	68 87 29 02 00       	push   $0x22987
    685e:	68 e0 ea 02 00       	push   $0x2eae0
    6863:	e8 43 fd ff ff       	call   65ab <sprintf>
    6868:	83 c4 10             	add    $0x10,%esp
	envp[1] = term;
    686b:	c7 05 20 d0 02 00 e0 	movl   $0x2eae0,0x2d020
    6872:	ea 02 00 
	envp_rc[1] = term;
    6875:	c7 05 0c d0 02 00 e0 	movl   $0x2eae0,0x2d00c
    687c:	ea 02 00 
    drive_info = DRIVE_INFO;										// 复制内存0x90080处的硬盘参数表.
    687f:	b8 80 00 09 00       	mov    $0x90080,%eax
    6884:	8b 10                	mov    (%eax),%edx
    6886:	89 15 20 f7 03 00    	mov    %edx,0x3f720
    688c:	8b 50 04             	mov    0x4(%eax),%edx
    688f:	89 15 24 f7 03 00    	mov    %edx,0x3f724
    6895:	8b 50 08             	mov    0x8(%eax),%edx
    6898:	89 15 28 f7 03 00    	mov    %edx,0x3f728
    689e:	8b 50 0c             	mov    0xc(%eax),%edx
    68a1:	89 15 2c f7 03 00    	mov    %edx,0x3f72c
    68a7:	8b 50 10             	mov    0x10(%eax),%edx
    68aa:	89 15 30 f7 03 00    	mov    %edx,0x3f730
    68b0:	8b 50 14             	mov    0x14(%eax),%edx
    68b3:	89 15 34 f7 03 00    	mov    %edx,0x3f734
    68b9:	8b 50 18             	mov    0x18(%eax),%edx
    68bc:	89 15 38 f7 03 00    	mov    %edx,0x3f738
    68c2:	8b 40 1c             	mov    0x1c(%eax),%eax
    68c5:	a3 3c f7 03 00       	mov    %eax,0x3f73c

	// 接着根据机器物理内存容量设置高速缓冲区和主内存的位置和范围.
	// 高速缓存末端地址->buffer_memory_end;机器内存容量->memory_end;主内存开始地址->main_memory_start.
	// 设置物理内存大小
	memory_end = (1 << 20) + (EXT_MEM_K << 10);						// 内存大小=1MB + 扩展内存(k)*1024字节.
    68ca:	b8 02 00 09 00       	mov    $0x90002,%eax
    68cf:	0f b7 00             	movzwl (%eax),%eax
    68d2:	0f b7 c0             	movzwl %ax,%eax
    68d5:	c1 e0 0a             	shl    $0xa,%eax
    68d8:	05 00 00 10 00       	add    $0x100000,%eax
    68dd:	a3 c0 ea 02 00       	mov    %eax,0x2eac0
	memory_end &= 0xfffff000;										// 忽略不到4KB(1页)的内存数.
    68e2:	a1 c0 ea 02 00       	mov    0x2eac0,%eax
    68e7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    68ec:	a3 c0 ea 02 00       	mov    %eax,0x2eac0
	if (memory_end > 16 * 1024 * 1024)								// 如果内存量超过16MB,则按16MB计.
    68f1:	a1 c0 ea 02 00       	mov    0x2eac0,%eax
    68f6:	3d 00 00 00 01       	cmp    $0x1000000,%eax
    68fb:	7e 0a                	jle    6907 <main+0x107>
		memory_end = 16 * 1024 * 1024;
    68fd:	c7 05 c0 ea 02 00 00 	movl   $0x1000000,0x2eac0
    6904:	00 00 01 
	// 根据物理内存的大小设置高速缓冲去的末端大小
	if (memory_end > 12 * 1024 * 1024) 								// 如果内存>12MB,则设置缓冲区末端=4MB
    6907:	a1 c0 ea 02 00       	mov    0x2eac0,%eax
    690c:	3d 00 00 c0 00       	cmp    $0xc00000,%eax
    6911:	7e 0c                	jle    691f <main+0x11f>
		buffer_memory_end = 4 * 1024 * 1024;
    6913:	c7 05 c4 ea 02 00 00 	movl   $0x400000,0x2eac4
    691a:	00 40 00 
    691d:	eb 22                	jmp    6941 <main+0x141>
	else if (memory_end > 6 * 1024 * 1024)							// 否则若内存>6MB,则设置缓冲区末端=2MB
    691f:	a1 c0 ea 02 00       	mov    0x2eac0,%eax
    6924:	3d 00 00 60 00       	cmp    $0x600000,%eax
    6929:	7e 0c                	jle    6937 <main+0x137>
		buffer_memory_end = 2 * 1024 * 1024;
    692b:	c7 05 c4 ea 02 00 00 	movl   $0x200000,0x2eac4
    6932:	00 20 00 
    6935:	eb 0a                	jmp    6941 <main+0x141>
	else
		buffer_memory_end = 1 * 1024 * 1024;						// 否则则设置缓冲区末端=1MB
    6937:	c7 05 c4 ea 02 00 00 	movl   $0x100000,0x2eac4
    693e:	00 10 00 
	// 根据高速缓冲区的末端大小设置主内存区的起始地址
	main_memory_start = buffer_memory_end;							// 主内存起始位置 = 缓冲区末端
    6941:	a1 c4 ea 02 00       	mov    0x2eac4,%eax
    6946:	a3 c8 ea 02 00       	mov    %eax,0x2eac8
	// 参见kernel/blk_drv/ramdisk.c.
#ifdef RAMDISK
	main_memory_start += rd_init(main_memory_start, RAMDISK * 1024);
#endif
	// 以下是内核进行所有方面的初始化工作.
	mem_init(main_memory_start, memory_end);						// 主内存区初始化.(mm/memory.c)
    694b:	8b 15 c0 ea 02 00    	mov    0x2eac0,%edx
    6951:	a1 c8 ea 02 00       	mov    0x2eac8,%eax
    6956:	83 ec 08             	sub    $0x8,%esp
    6959:	52                   	push   %edx
    695a:	50                   	push   %eax
    695b:	e8 66 5f 00 00       	call   c8c6 <mem_init>
    6960:	83 c4 10             	add    $0x10,%esp
	trap_init();                                    				// 陷阱门(硬件中断向量)初始化.(kernel/traps.c)
    6963:	e8 58 16 00 00       	call   7fc0 <trap_init>
	blk_dev_init();													// 块设备初始化.(blk_drv/ll_rw_blk.c)
    6968:	e8 f5 ff 00 00       	call   16962 <blk_dev_init>
	chr_dev_init();													// 字符设备初始化.(chr_drv/tty_io.c)
    696d:	e8 47 31 01 00       	call   19ab9 <chr_dev_init>
 	tty_init();														// tty初始化(chr_drv/tty_io.c)
    6972:	e8 44 31 01 00       	call   19abb <tty_init>
	time_init();													// 设置开机启动时间.
    6977:	e8 61 fc ff ff       	call   65dd <time_init>
 	sched_init();													// 调度程序初始化(加载任务0的tr,ldtr)(kernel/sched.c)
    697c:	e8 04 0e 00 00       	call   7785 <sched_init>
	buffer_init(buffer_memory_end);									// 缓冲管理初始化,建内存链表等.(fs/buffer.c)
    6981:	a1 c4 ea 02 00       	mov    0x2eac4,%eax
    6986:	83 ec 0c             	sub    $0xc,%esp
    6989:	50                   	push   %eax
    698a:	e8 bf 8f 00 00       	call   f94e <buffer_init>
    698f:	83 c4 10             	add    $0x10,%esp
	hd_init();														// 硬盘初始化.	(blk_drv/hd.c)
    6992:	e8 dd 1a 01 00       	call   18474 <hd_init>
	floppy_init();													// 软驱初始化.	(blk_drv/floppy.c)
    6997:	e8 87 0c 01 00       	call   17623 <floppy_init>
	sti();															// 所有初始化工作都完了,于是开启中断.
    699c:	fb                   	sti    
	// 打印内核初始化完毕
	Log(LOG_INFO_TYPE, "<<<<< Linux0.12 Kernel Init Finished, Ready Start Process0 >>>>>\n");
    699d:	83 ec 08             	sub    $0x8,%esp
    69a0:	68 98 29 02 00       	push   $0x22998
    69a5:	6a 00                	push   $0x0
    69a7:	e8 5b bf 01 00       	call   22907 <Log>
    69ac:	83 c4 10             	add    $0x10,%esp
	// 下面过程通过在堆栈中设置的参数,利用中断返回指令启动任务0执行.
	move_to_user_mode();											// 移到用户模式下执行.(include/asm/system.h)
    69af:	89 e0                	mov    %esp,%eax
    69b1:	6a 17                	push   $0x17
    69b3:	50                   	push   %eax
    69b4:	9c                   	pushf  
    69b5:	6a 0f                	push   $0xf
    69b7:	68 bd 69 00 00       	push   $0x69bd
    69bc:	cf                   	iret   
    69bd:	b8 17 00 00 00       	mov    $0x17,%eax
    69c2:	8e d8                	mov    %eax,%ds
    69c4:	8e c0                	mov    %eax,%es
    69c6:	8e e0                	mov    %eax,%fs
    69c8:	8e e8                	mov    %eax,%gs
	if (!fork_for_process0()) {										/* we count on this going ok */
    69ca:	e8 ad fb ff ff       	call   657c <fork_for_process0>
    69cf:	85 c0                	test   %eax,%eax
    69d1:	75 05                	jne    69d8 <main+0x1d8>
		init();														// 在新建的子进程(任务1即init进程)中执行.
    69d3:	e8 4f 00 00 00       	call   6a27 <init>
	 * 我们就回到这里,一直循环执行'pause()'.
	 */
	// pause()系统调用(kernel/sched.c)会把任务0转换成可中断等待状态,再执行调度函数.但是调度函数只要发现系统中没有其他任务可以运行时就会切换
	// 到任务0,是不信赖于任务0的状态.
	for(;;)
		__asm__("int $0x80"::"a" (__NR_pause):);					// 即执行系统调用pause().
    69d8:	b8 1d 00 00 00       	mov    $0x1d,%eax
    69dd:	cd 80                	int    $0x80
    69df:	eb f7                	jmp    69d8 <main+0x1d8>

000069e1 <printf>:

// 下面函数产生格式化信息并输出到标准输出设备stdout(1),这里是指屏幕上显示.参数'*fmt'指定输出将采用的格式,参见标准C语言书籍.
// 该子程序正好是vsprintf如何使用的一个简单例子.该程序使用vsprintf()将格式化的字符串放入printbuf缓冲区,然后用write()将
// 缓冲区的内容输出到标准设备(1--stdout).vsprintf()函数的实现见kernel/vsprintf.c.
int printf(const char *fmt, ...)
{
    69e1:	83 ec 1c             	sub    $0x1c,%esp
	va_list args;
	int i;

	va_start(args, fmt);
    69e4:	8d 44 24 24          	lea    0x24(%esp),%eax
    69e8:	89 44 24 0c          	mov    %eax,0xc(%esp)
	write(1, printbuf, i = vsprintf(printbuf, fmt, args));
    69ec:	8b 44 24 20          	mov    0x20(%esp),%eax
    69f0:	83 ec 04             	sub    $0x4,%esp
    69f3:	ff 74 24 10          	pushl  0x10(%esp)
    69f7:	50                   	push   %eax
    69f8:	68 c0 e6 02 00       	push   $0x2e6c0
    69fd:	e8 83 25 00 00       	call   8f85 <vsprintf>
    6a02:	83 c4 10             	add    $0x10,%esp
    6a05:	89 44 24 08          	mov    %eax,0x8(%esp)
    6a09:	83 ec 04             	sub    $0x4,%esp
    6a0c:	ff 74 24 0c          	pushl  0xc(%esp)
    6a10:	68 c0 e6 02 00       	push   $0x2e6c0
    6a15:	6a 01                	push   $0x1
    6a17:	e8 bd bd 01 00       	call   227d9 <write>
    6a1c:	83 c4 10             	add    $0x10,%esp
	va_end(args);
	return i;
    6a1f:	8b 44 24 08          	mov    0x8(%esp),%eax
}
    6a23:	83 c4 1c             	add    $0x1c,%esp
    6a26:	c3                   	ret    

00006a27 <init>:

// 在main()中已经进行子系统初始化,包括内存管理,各种硬件设备和驱动程序.init()函数在任务0第1次创建的子进程(任务1)中.它首先对第一个将要执行
// 的程序(shell)的环境进行初始化,然后以登录shell方式加载程序并执行之.
void init(void)
{
    6a27:	83 ec 1c             	sub    $0x1c,%esp
	int pid, i, fd;
	// setup()是一个系统调用.用于读取硬盘参数和分区表信息并加载虚拟盘(若存在的话)和安装根文件系统设备.该函数用25行上的宏定义,对就函数是sys_setup(),
	// 在块设备子目录kernel/blk_drv/hd.c.
	setup((void *) &drive_info);
    6a2a:	68 20 f7 03 00       	push   $0x3f720
    6a2f:	e8 e2 fa ff ff       	call   6516 <setup>
    6a34:	83 c4 04             	add    $0x4,%esp
	// 下面以读写访问方式打开设备"/dev/tty0",它对应终端控制台.由于这是第一次打开文件操作,因此产生的文件句柄号(文件描述符)肯定是0.该句柄是UNIX类操作
	// 系统默认的控制台标准输入句柄stdin.这里再把它以读和写的方式分别打开是为了复制产生标准输出(写)句柄stdout和标准出错输出句柄stderr.函数前面的"(void)"
	// 前缀用于表示强制函数无需返回值.
	(void) open("/dev/tty1", O_RDWR, 0);
    6a37:	83 ec 04             	sub    $0x4,%esp
    6a3a:	6a 00                	push   $0x0
    6a3c:	6a 02                	push   $0x2
    6a3e:	68 da 29 02 00       	push   $0x229da
    6a43:	e8 11 bd 01 00       	call   22759 <open>
    6a48:	83 c4 10             	add    $0x10,%esp
	(void) dup(0);													// 复制句柄,产生句柄1号--stdout标准输出设备.
    6a4b:	83 ec 0c             	sub    $0xc,%esp
    6a4e:	6a 00                	push   $0x0
    6a50:	e8 c1 bd 01 00       	call   22816 <dup>
    6a55:	83 c4 10             	add    $0x10,%esp
	(void) dup(0);													// 复制句柄,产生句柄2号--stderr标准出错输出设备.
    6a58:	83 ec 0c             	sub    $0xc,%esp
    6a5b:	6a 00                	push   $0x0
    6a5d:	e8 b4 bd 01 00       	call   22816 <dup>
    6a62:	83 c4 10             	add    $0x10,%esp
	// 进程1执行的用户级代码的开始
	printf("<<<<< Process 1 console fd = %d >>>>>\n", fd);
    6a65:	83 ec 08             	sub    $0x8,%esp
    6a68:	ff 74 24 14          	pushl  0x14(%esp)
    6a6c:	68 e4 29 02 00       	push   $0x229e4
    6a71:	e8 6b ff ff ff       	call   69e1 <printf>
    6a76:	83 c4 10             	add    $0x10,%esp
	// 下面打印缓冲区块数和总字节数,每块1024字节,以及主内存区空闲内存字节数.
	printf("<<<<< %d buffers = %d bytes buffer space >>>>>\n\r", NR_BUFFERS,
    6a79:	a1 c0 10 03 00       	mov    0x310c0,%eax
    6a7e:	c1 e0 0a             	shl    $0xa,%eax
    6a81:	89 c2                	mov    %eax,%edx
    6a83:	a1 c0 10 03 00       	mov    0x310c0,%eax
    6a88:	83 ec 04             	sub    $0x4,%esp
    6a8b:	52                   	push   %edx
    6a8c:	50                   	push   %eax
    6a8d:	68 0c 2a 02 00       	push   $0x22a0c
    6a92:	e8 4a ff ff ff       	call   69e1 <printf>
    6a97:	83 c4 10             	add    $0x10,%esp
			NR_BUFFERS * BLOCK_SIZE);
	printf("<<<<< Free mem: %d bytes >>>>>\n\r", memory_end - main_memory_start);
    6a9a:	8b 15 c0 ea 02 00    	mov    0x2eac0,%edx
    6aa0:	a1 c8 ea 02 00       	mov    0x2eac8,%eax
    6aa5:	29 c2                	sub    %eax,%edx
    6aa7:	89 d0                	mov    %edx,%eax
    6aa9:	83 ec 08             	sub    $0x8,%esp
    6aac:	50                   	push   %eax
    6aad:	68 40 2a 02 00       	push   $0x22a40
    6ab2:	e8 2a ff ff ff       	call   69e1 <printf>
    6ab7:	83 c4 10             	add    $0x10,%esp
	// 下面fork()用于创建一个子进程(任务2).对于被创建的子进程,fork()将返回0值,对于原进程(父进程)则返回子进程的进程号pid.所以第202--206行是子进程执行的内容.
	// 该子进程关闭了句柄0(stdin),以只读方式打开/etc/rc文件,并使用execve()函数将进程自身替换成/bin/sh程序(即shell程序),然后执行/bin/sh程序.所携带的参数
	// 和环境变量分别由argv_rc和envp_rc数组给出.关闭句柄0并立刻打开/etc/rc文件的作用是把标准输入stdin重定向到/etc/rc/文件.这样shell程序/bin/sh就可以运行
	// rc文件中设置的命令.由于这里sh的运行方式是非交互式的,因此在执行完rc文件中的命令后就会立刻退出,进程2也随之结束.并于execve()函数说明请参见fs/exec.c程序.
	// 函数_exit()退出时的出错码1 - 操作未许可;2 -- 文件或目录不存在.
	if (!(pid = fork())) {
    6aba:	e8 f9 f9 ff ff       	call   64b8 <fork>
    6abf:	89 44 24 08          	mov    %eax,0x8(%esp)
    6ac3:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    6ac8:	75 59                	jne    6b23 <init+0xfc>
		close(0);
    6aca:	83 ec 0c             	sub    $0xc,%esp
    6acd:	6a 00                	push   $0x0
    6acf:	e8 ce bc 01 00       	call   227a2 <close>
    6ad4:	83 c4 10             	add    $0x10,%esp
		if (open("/etc/rc", O_RDONLY, 0))
    6ad7:	83 ec 04             	sub    $0x4,%esp
    6ada:	6a 00                	push   $0x0
    6adc:	6a 00                	push   $0x0
    6ade:	68 61 2a 02 00       	push   $0x22a61
    6ae3:	e8 71 bc 01 00       	call   22759 <open>
    6ae8:	83 c4 10             	add    $0x10,%esp
    6aeb:	85 c0                	test   %eax,%eax
    6aed:	74 0d                	je     6afc <init+0xd5>
			_exit(1);												// 若打开文件失败,则退出(lib/_exit.c).
    6aef:	83 ec 0c             	sub    $0xc,%esp
    6af2:	6a 01                	push   $0x1
    6af4:	e8 4f bc 01 00       	call   22748 <_exit>
    6af9:	83 c4 10             	add    $0x10,%esp
		execve("/bin/sh", argv_rc, envp_rc);						// 替换成/bin/sh程序并执行.
    6afc:	83 ec 04             	sub    $0x4,%esp
    6aff:	68 08 d0 02 00       	push   $0x2d008
    6b04:	68 00 d0 02 00       	push   $0x2d000
    6b09:	68 60 29 02 00       	push   $0x22960
    6b0e:	e8 69 bd 01 00       	call   2287c <execve>
    6b13:	83 c4 10             	add    $0x10,%esp
		_exit(2);													// 若execve()执行失败则退出.
    6b16:	83 ec 0c             	sub    $0xc,%esp
    6b19:	6a 02                	push   $0x2
    6b1b:	e8 28 bc 01 00       	call   22748 <_exit>
    6b20:	83 c4 10             	add    $0x10,%esp
        }
	// 下面还是父进程（1）执行的语句。wait()等待子进程停止或终止，返回值应是子进程的进程号（pid)。这三句的作用是父进程等待子进程
	// 的结束。&i是存放返回状态信息的位置。如果wait()返回值不等于子进程号，则继续等待。
  	if (pid > 0)
    6b23:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    6b28:	7e 17                	jle    6b41 <init+0x11a>
		while (pid != wait(&i));
    6b2a:	90                   	nop
    6b2b:	83 ec 0c             	sub    $0xc,%esp
    6b2e:	8d 44 24 10          	lea    0x10(%esp),%eax
    6b32:	50                   	push   %eax
    6b33:	e8 be bd 01 00       	call   228f6 <wait>
    6b38:	83 c4 10             	add    $0x10,%esp
    6b3b:	3b 44 24 08          	cmp    0x8(%esp),%eax
    6b3f:	75 ea                	jne    6b2b <init+0x104>
	// 失败”信息并继续执行。对于所创建的子进程将关闭所有以前还遗留的句柄（stdin、stdout、stderr），新创建一个会话并设置进程组号，
	// 然后重新打开/dev/tty0作为stdin，并复制成stdout和stderr。再次执行系统解释程序/bin/sh。但这次执行所选用的参数和环境数组另
	// 选了一套。然后父进程再次运行wait()等等。如果子进程又停止了执行，则在标准输出上显示出错信息“子进程pid停止了运行，返回码是i”，
	// 然后继续重试下去...，形成“大”死循环。
	while (1) {
		if ((pid = fork()) < 0) {
    6b41:	e8 72 f9 ff ff       	call   64b8 <fork>
    6b46:	89 44 24 08          	mov    %eax,0x8(%esp)
    6b4a:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    6b4f:	79 17                	jns    6b68 <init+0x141>
			printf("Fork failed in init %c\r\n", ' ');
    6b51:	83 ec 08             	sub    $0x8,%esp
    6b54:	6a 20                	push   $0x20
    6b56:	68 69 2a 02 00       	push   $0x22a69
    6b5b:	e8 81 fe ff ff       	call   69e1 <printf>
    6b60:	83 c4 10             	add    $0x10,%esp
			continue;
    6b63:	e9 c2 00 00 00       	jmp    6c2a <init+0x203>
		}
		if (!pid) {                             					// 新的子进程。
    6b68:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    6b6d:	0f 85 80 00 00 00    	jne    6bf3 <init+0x1cc>
			close(0); close(1); close(2);
    6b73:	83 ec 0c             	sub    $0xc,%esp
    6b76:	6a 00                	push   $0x0
    6b78:	e8 25 bc 01 00       	call   227a2 <close>
    6b7d:	83 c4 10             	add    $0x10,%esp
    6b80:	83 ec 0c             	sub    $0xc,%esp
    6b83:	6a 01                	push   $0x1
    6b85:	e8 18 bc 01 00       	call   227a2 <close>
    6b8a:	83 c4 10             	add    $0x10,%esp
    6b8d:	83 ec 0c             	sub    $0xc,%esp
    6b90:	6a 02                	push   $0x2
    6b92:	e8 0b bc 01 00       	call   227a2 <close>
    6b97:	83 c4 10             	add    $0x10,%esp
			setsid();                       						// 创建一新的会话期，见后面说明。
    6b9a:	e8 ae bc 01 00       	call   2284d <setsid>
			(void) open("/dev/tty1", O_RDWR, 0);
    6b9f:	83 ec 04             	sub    $0x4,%esp
    6ba2:	6a 00                	push   $0x0
    6ba4:	6a 02                	push   $0x2
    6ba6:	68 da 29 02 00       	push   $0x229da
    6bab:	e8 a9 bb 01 00       	call   22759 <open>
    6bb0:	83 c4 10             	add    $0x10,%esp
			(void) dup(0);
    6bb3:	83 ec 0c             	sub    $0xc,%esp
    6bb6:	6a 00                	push   $0x0
    6bb8:	e8 59 bc 01 00       	call   22816 <dup>
    6bbd:	83 c4 10             	add    $0x10,%esp
			(void) dup(0);
    6bc0:	83 ec 0c             	sub    $0xc,%esp
    6bc3:	6a 00                	push   $0x0
    6bc5:	e8 4c bc 01 00       	call   22816 <dup>
    6bca:	83 c4 10             	add    $0x10,%esp
			_exit(execve("/bin/sh", argv, envp));
    6bcd:	83 ec 04             	sub    $0x4,%esp
    6bd0:	68 1c d0 02 00       	push   $0x2d01c
    6bd5:	68 14 d0 02 00       	push   $0x2d014
    6bda:	68 60 29 02 00       	push   $0x22960
    6bdf:	e8 98 bc 01 00       	call   2287c <execve>
    6be4:	83 c4 10             	add    $0x10,%esp
    6be7:	83 ec 0c             	sub    $0xc,%esp
    6bea:	50                   	push   %eax
    6beb:	e8 58 bb 01 00       	call   22748 <_exit>
    6bf0:	83 c4 10             	add    $0x10,%esp
		}
		while (1)
			if (pid == wait(&i))
    6bf3:	83 ec 0c             	sub    $0xc,%esp
    6bf6:	8d 44 24 10          	lea    0x10(%esp),%eax
    6bfa:	50                   	push   %eax
    6bfb:	e8 f6 bc 01 00       	call   228f6 <wait>
    6c00:	83 c4 10             	add    $0x10,%esp
    6c03:	3b 44 24 08          	cmp    0x8(%esp),%eax
    6c07:	74 02                	je     6c0b <init+0x1e4>
				break;
		printf("\n\rchild %d died with code %04x\n\r", pid, i);
    6c09:	eb e8                	jmp    6bf3 <init+0x1cc>
			(void) dup(0);
			_exit(execve("/bin/sh", argv, envp));
		}
		while (1)
			if (pid == wait(&i))
				break;
    6c0b:	90                   	nop
		printf("\n\rchild %d died with code %04x\n\r", pid, i);
    6c0c:	8b 44 24 04          	mov    0x4(%esp),%eax
    6c10:	83 ec 04             	sub    $0x4,%esp
    6c13:	50                   	push   %eax
    6c14:	ff 74 24 10          	pushl  0x10(%esp)
    6c18:	68 84 2a 02 00       	push   $0x22a84
    6c1d:	e8 bf fd ff ff       	call   69e1 <printf>
    6c22:	83 c4 10             	add    $0x10,%esp
		sync();
    6c25:	e8 23 f9 ff ff       	call   654d <sync>
	}
    6c2a:	e9 12 ff ff ff       	jmp    6b41 <init+0x11a>
    6c2f:	90                   	nop

00006c30 <show_task>:
// 除了SIGKILL和SIGSTOP信号以外其他信号都是可阻塞的.
#define _BLOCKABLE (~(_S(SIGKILL) | _S(SIGSTOP)))

// 内核调试函数.显示任务号nr的进程号,进程状态和内核堆栈空闲字节数(大约).
void show_task(int nr, struct task_struct * p)
{
    6c30:	53                   	push   %ebx
    6c31:	83 ec 18             	sub    $0x18,%esp
	int i, j = 4096 - sizeof(struct task_struct);
    6c34:	c7 44 24 08 7c 0b 00 	movl   $0xb7c,0x8(%esp)
    6c3b:	00 

	printk("%d: pid=%d, state=%d, father=%d, child=%d, ", nr, p->pid,
		p->state, p->p_pptr->pid, p->p_cptr ? p->p_cptr->pid : -1);
    6c3c:	8b 44 24 24          	mov    0x24(%esp),%eax
    6c40:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
// 内核调试函数.显示任务号nr的进程号,进程状态和内核堆栈空闲字节数(大约).
void show_task(int nr, struct task_struct * p)
{
	int i, j = 4096 - sizeof(struct task_struct);

	printk("%d: pid=%d, state=%d, father=%d, child=%d, ", nr, p->pid,
    6c46:	85 c0                	test   %eax,%eax
    6c48:	74 12                	je     6c5c <show_task+0x2c>
		p->state, p->p_pptr->pid, p->p_cptr ? p->p_cptr->pid : -1);
    6c4a:	8b 44 24 24          	mov    0x24(%esp),%eax
    6c4e:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
// 内核调试函数.显示任务号nr的进程号,进程状态和内核堆栈空闲字节数(大约).
void show_task(int nr, struct task_struct * p)
{
	int i, j = 4096 - sizeof(struct task_struct);

	printk("%d: pid=%d, state=%d, father=%d, child=%d, ", nr, p->pid,
    6c54:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    6c5a:	eb 05                	jmp    6c61 <show_task+0x31>
    6c5c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
		p->state, p->p_pptr->pid, p->p_cptr ? p->p_cptr->pid : -1);
    6c61:	8b 54 24 24          	mov    0x24(%esp),%edx
    6c65:	8b 92 bc 02 00 00    	mov    0x2bc(%edx),%edx
// 内核调试函数.显示任务号nr的进程号,进程状态和内核堆栈空闲字节数(大约).
void show_task(int nr, struct task_struct * p)
{
	int i, j = 4096 - sizeof(struct task_struct);

	printk("%d: pid=%d, state=%d, father=%d, child=%d, ", nr, p->pid,
    6c6b:	8b 9a 2c 02 00 00    	mov    0x22c(%edx),%ebx
    6c71:	8b 54 24 24          	mov    0x24(%esp),%edx
    6c75:	8b 0a                	mov    (%edx),%ecx
    6c77:	8b 54 24 24          	mov    0x24(%esp),%edx
    6c7b:	8b 92 2c 02 00 00    	mov    0x22c(%edx),%edx
    6c81:	83 ec 08             	sub    $0x8,%esp
    6c84:	50                   	push   %eax
    6c85:	53                   	push   %ebx
    6c86:	51                   	push   %ecx
    6c87:	52                   	push   %edx
    6c88:	ff 74 24 38          	pushl  0x38(%esp)
    6c8c:	68 a8 2a 02 00       	push   $0x22aa8
    6c91:	e8 b1 1f 00 00       	call   8c47 <printk>
    6c96:	83 c4 20             	add    $0x20,%esp
		p->state, p->p_pptr->pid, p->p_cptr ? p->p_cptr->pid : -1);
	i = 0;
    6c99:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    6ca0:	00 
	while (i < j && !((char *)(p + 1))[i])				// 检测指定任务数据结构以后等于0的字节数.
    6ca1:	eb 05                	jmp    6ca8 <show_task+0x78>
		i++;
    6ca3:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
	int i, j = 4096 - sizeof(struct task_struct);

	printk("%d: pid=%d, state=%d, father=%d, child=%d, ", nr, p->pid,
		p->state, p->p_pptr->pid, p->p_cptr ? p->p_cptr->pid : -1);
	i = 0;
	while (i < j && !((char *)(p + 1))[i])				// 检测指定任务数据结构以后等于0的字节数.
    6ca8:	8b 44 24 0c          	mov    0xc(%esp),%eax
    6cac:	3b 44 24 08          	cmp    0x8(%esp),%eax
    6cb0:	7d 17                	jge    6cc9 <show_task+0x99>
    6cb2:	8b 44 24 0c          	mov    0xc(%esp),%eax
    6cb6:	8d 90 84 04 00 00    	lea    0x484(%eax),%edx
    6cbc:	8b 44 24 24          	mov    0x24(%esp),%eax
    6cc0:	01 d0                	add    %edx,%eax
    6cc2:	0f b6 00             	movzbl (%eax),%eax
    6cc5:	84 c0                	test   %al,%al
    6cc7:	74 da                	je     6ca3 <show_task+0x73>
		i++;
	printk("%d/%d chars free in kstack\n\r", i, j);
    6cc9:	83 ec 04             	sub    $0x4,%esp
    6ccc:	ff 74 24 0c          	pushl  0xc(%esp)
    6cd0:	ff 74 24 14          	pushl  0x14(%esp)
    6cd4:	68 d4 2a 02 00       	push   $0x22ad4
    6cd9:	e8 69 1f 00 00       	call   8c47 <printk>
    6cde:	83 c4 10             	add    $0x10,%esp
	printk("   PC=%08X.", *(1019 + (unsigned long *) p));
    6ce1:	8b 44 24 24          	mov    0x24(%esp),%eax
    6ce5:	05 ec 0f 00 00       	add    $0xfec,%eax
    6cea:	8b 00                	mov    (%eax),%eax
    6cec:	83 ec 08             	sub    $0x8,%esp
    6cef:	50                   	push   %eax
    6cf0:	68 f1 2a 02 00       	push   $0x22af1
    6cf5:	e8 4d 1f 00 00       	call   8c47 <printk>
    6cfa:	83 c4 10             	add    $0x10,%esp
	if (p->p_ysptr || p->p_osptr)
    6cfd:	8b 44 24 24          	mov    0x24(%esp),%eax
    6d01:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
    6d07:	85 c0                	test   %eax,%eax
    6d09:	75 0e                	jne    6d19 <show_task+0xe9>
    6d0b:	8b 44 24 24          	mov    0x24(%esp),%eax
    6d0f:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    6d15:	85 c0                	test   %eax,%eax
    6d17:	74 5e                	je     6d77 <show_task+0x147>
		printk("   Younger sib=%d, older sib=%d\n\r",
			p->p_ysptr ? p->p_ysptr->pid : -1,
			p->p_osptr ? p->p_osptr->pid : -1);
    6d19:	8b 44 24 24          	mov    0x24(%esp),%eax
    6d1d:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
	while (i < j && !((char *)(p + 1))[i])				// 检测指定任务数据结构以后等于0的字节数.
		i++;
	printk("%d/%d chars free in kstack\n\r", i, j);
	printk("   PC=%08X.", *(1019 + (unsigned long *) p));
	if (p->p_ysptr || p->p_osptr)
		printk("   Younger sib=%d, older sib=%d\n\r",
    6d23:	85 c0                	test   %eax,%eax
    6d25:	74 12                	je     6d39 <show_task+0x109>
			p->p_ysptr ? p->p_ysptr->pid : -1,
			p->p_osptr ? p->p_osptr->pid : -1);
    6d27:	8b 44 24 24          	mov    0x24(%esp),%eax
    6d2b:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
	while (i < j && !((char *)(p + 1))[i])				// 检测指定任务数据结构以后等于0的字节数.
		i++;
	printk("%d/%d chars free in kstack\n\r", i, j);
	printk("   PC=%08X.", *(1019 + (unsigned long *) p));
	if (p->p_ysptr || p->p_osptr)
		printk("   Younger sib=%d, older sib=%d\n\r",
    6d31:	8b 90 2c 02 00 00    	mov    0x22c(%eax),%edx
    6d37:	eb 05                	jmp    6d3e <show_task+0x10e>
    6d39:	ba ff ff ff ff       	mov    $0xffffffff,%edx
			p->p_ysptr ? p->p_ysptr->pid : -1,
    6d3e:	8b 44 24 24          	mov    0x24(%esp),%eax
    6d42:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
	while (i < j && !((char *)(p + 1))[i])				// 检测指定任务数据结构以后等于0的字节数.
		i++;
	printk("%d/%d chars free in kstack\n\r", i, j);
	printk("   PC=%08X.", *(1019 + (unsigned long *) p));
	if (p->p_ysptr || p->p_osptr)
		printk("   Younger sib=%d, older sib=%d\n\r",
    6d48:	85 c0                	test   %eax,%eax
    6d4a:	74 12                	je     6d5e <show_task+0x12e>
			p->p_ysptr ? p->p_ysptr->pid : -1,
    6d4c:	8b 44 24 24          	mov    0x24(%esp),%eax
    6d50:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
	while (i < j && !((char *)(p + 1))[i])				// 检测指定任务数据结构以后等于0的字节数.
		i++;
	printk("%d/%d chars free in kstack\n\r", i, j);
	printk("   PC=%08X.", *(1019 + (unsigned long *) p));
	if (p->p_ysptr || p->p_osptr)
		printk("   Younger sib=%d, older sib=%d\n\r",
    6d56:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    6d5c:	eb 05                	jmp    6d63 <show_task+0x133>
    6d5e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    6d63:	83 ec 04             	sub    $0x4,%esp
    6d66:	52                   	push   %edx
    6d67:	50                   	push   %eax
    6d68:	68 00 2b 02 00       	push   $0x22b00
    6d6d:	e8 d5 1e 00 00       	call   8c47 <printk>
    6d72:	83 c4 10             	add    $0x10,%esp
    6d75:	eb 10                	jmp    6d87 <show_task+0x157>
			p->p_ysptr ? p->p_ysptr->pid : -1,
			p->p_osptr ? p->p_osptr->pid : -1);
	else
		printk("\n\r");
    6d77:	83 ec 0c             	sub    $0xc,%esp
    6d7a:	68 22 2b 02 00       	push   $0x22b22
    6d7f:	e8 c3 1e 00 00       	call   8c47 <printk>
    6d84:	83 c4 10             	add    $0x10,%esp
}
    6d87:	90                   	nop
    6d88:	83 c4 18             	add    $0x18,%esp
    6d8b:	5b                   	pop    %ebx
    6d8c:	c3                   	ret    

00006d8d <show_state>:

// 显示所有任务的任务号,进程号,进程状态和内核堆栈空闲字节数(大约).
// NR_TASKS是系统能容纳的最大进程(任务)数量(64个),定义在include/kernel/sched.h
void show_state(void)
{
    6d8d:	83 ec 1c             	sub    $0x1c,%esp
	int i;

	printk("\rTask-info:\n\r");
    6d90:	83 ec 0c             	sub    $0xc,%esp
    6d93:	68 25 2b 02 00       	push   $0x22b25
    6d98:	e8 aa 1e 00 00       	call   8c47 <printk>
    6d9d:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NR_TASKS; i++)
    6da0:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    6da7:	00 
    6da8:	eb 2f                	jmp    6dd9 <show_state+0x4c>
		if (task[i])
    6daa:	8b 44 24 0c          	mov    0xc(%esp),%eax
    6dae:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    6db5:	85 c0                	test   %eax,%eax
    6db7:	74 1b                	je     6dd4 <show_state+0x47>
			show_task(i, task[i]);
    6db9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    6dbd:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    6dc4:	83 ec 08             	sub    $0x8,%esp
    6dc7:	50                   	push   %eax
    6dc8:	ff 74 24 18          	pushl  0x18(%esp)
    6dcc:	e8 5f fe ff ff       	call   6c30 <show_task>
    6dd1:	83 c4 10             	add    $0x10,%esp
void show_state(void)
{
	int i;

	printk("\rTask-info:\n\r");
	for (i = 0; i < NR_TASKS; i++)
    6dd4:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    6dd9:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    6dde:	7e ca                	jle    6daa <show_state+0x1d>
		if (task[i])
			show_task(i, task[i]);
}
    6de0:	90                   	nop
    6de1:	83 c4 1c             	add    $0x1c,%esp
    6de4:	c3                   	ret    

00006de5 <math_state_restore>:
 */
// 当任务被调度交换过以后,该函数用以保存原任务的协处理器状态(上下文)并恢复新调度进来的当前任务的协处理器执行状态.
void math_state_restore()
{
	// 如果任务没变则返回(上一个任务就是当前任务).这里"上一个任务"是指刚被交换出去的任务.
	if (last_task_used_math == current)
    6de5:	8b 15 0c eb 02 00    	mov    0x2eb0c,%edx
    6deb:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    6df0:	39 c2                	cmp    %eax,%edx
    6df2:	74 4f                	je     6e43 <math_state_restore+0x5e>
		return;
	// 在发送协处理器命令之前要先必WAIT指令.如果上个任务使用了协处理器,则保存其状态.
	__asm__("fwait");
    6df4:	9b                   	fwait
	if (last_task_used_math) {
    6df5:	a1 0c eb 02 00       	mov    0x2eb0c,%eax
    6dfa:	85 c0                	test   %eax,%eax
    6dfc:	74 0b                	je     6e09 <math_state_restore+0x24>
		__asm__("fnsave %0"::"m" (last_task_used_math->tss.i387));
    6dfe:	a1 0c eb 02 00       	mov    0x2eb0c,%eax
    6e03:	dd b0 18 04 00 00    	fnsave 0x418(%eax)
	}
	// 现在,las_task_used_math指向当前任务,以备当前任务被交换出去时使用.此时如果当前任务用过协处理器,则恢复其状态.否则的话说明是第一次使用,
	// 于是就向协处理器发初始化命令,并设置使用协处理器标志.
	last_task_used_math = current;
    6e09:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    6e0e:	a3 0c eb 02 00       	mov    %eax,0x2eb0c
	if (current->used_math) {
    6e13:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    6e18:	0f b7 80 28 03 00 00 	movzwl 0x328(%eax),%eax
    6e1f:	66 85 c0             	test   %ax,%ax
    6e22:	74 0d                	je     6e31 <math_state_restore+0x4c>
		__asm__("frstor %0"::"m" (current->tss.i387));
    6e24:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    6e29:	dd a0 18 04 00 00    	frstor 0x418(%eax)
    6e2f:	eb 13                	jmp    6e44 <math_state_restore+0x5f>
	} else {
		__asm__("fninit"::);					// 向协处理器发初始化命令.
    6e31:	db e3                	fninit 
		current->used_math=1;					// 设置已使用协处理器标志.
    6e33:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    6e38:	66 c7 80 28 03 00 00 	movw   $0x1,0x328(%eax)
    6e3f:	01 00 
    6e41:	eb 01                	jmp    6e44 <math_state_restore+0x5f>
// 当任务被调度交换过以后,该函数用以保存原任务的协处理器状态(上下文)并恢复新调度进来的当前任务的协处理器执行状态.
void math_state_restore()
{
	// 如果任务没变则返回(上一个任务就是当前任务).这里"上一个任务"是指刚被交换出去的任务.
	if (last_task_used_math == current)
		return;
    6e43:	90                   	nop
		__asm__("frstor %0"::"m" (current->tss.i387));
	} else {
		__asm__("fninit"::);					// 向协处理器发初始化命令.
		current->used_math=1;					// 设置已使用协处理器标志.
	}
}
    6e44:	c3                   	ret    

00006e45 <schedule>:
 *
 * 注意!!任务0是个闲置('idle')任务,只有当没有其他任务可以运行时才调用它.它不能被杀死,也不睡眠.任务0中的状态信息'state'是从
 * 来不用的.
 */
void schedule(void)
{
    6e45:	83 ec 20             	sub    $0x20,%esp

	/* check alarm, wake up any interruptible tasks that have got a signal */
	/* 检测alarm(进程的报警定时值),唤醒任何已得到信号的可中断任务 */

	// 从任务数组中最后一个任务开始循环检测alarm.在循环时跳过空指针项.
	for(p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    6e48:	c7 44 24 10 bc e2 02 	movl   $0x2e2bc,0x10(%esp)
    6e4f:	00 
    6e50:	e9 e6 00 00 00       	jmp    6f3b <schedule+0xf6>
		if (*p) {
    6e55:	8b 44 24 10          	mov    0x10(%esp),%eax
    6e59:	8b 00                	mov    (%eax),%eax
    6e5b:	85 c0                	test   %eax,%eax
    6e5d:	0f 84 d3 00 00 00    	je     6f36 <schedule+0xf1>
			// 如果设置过任务超时定时timeout,并且已经超时,则复位超时定时值,并且如果任务处于可中断睡眠状态TASK_INTERRUPTIBLE下,将其置为就绪
			// 状态(TASK_RUNNING).
			if ((*p)->timeout && (*p)->timeout < jiffies) {
    6e63:	8b 44 24 10          	mov    0x10(%esp),%eax
    6e67:	8b 00                	mov    (%eax),%eax
    6e69:	8b 80 d8 02 00 00    	mov    0x2d8(%eax),%eax
    6e6f:	85 c0                	test   %eax,%eax
    6e71:	74 3e                	je     6eb1 <schedule+0x6c>
    6e73:	8b 44 24 10          	mov    0x10(%esp),%eax
    6e77:	8b 00                	mov    (%eax),%eax
    6e79:	8b 90 d8 02 00 00    	mov    0x2d8(%eax),%edx
    6e7f:	a1 00 eb 02 00       	mov    0x2eb00,%eax
    6e84:	39 c2                	cmp    %eax,%edx
    6e86:	73 29                	jae    6eb1 <schedule+0x6c>
				(*p)->timeout = 0;
    6e88:	8b 44 24 10          	mov    0x10(%esp),%eax
    6e8c:	8b 00                	mov    (%eax),%eax
    6e8e:	c7 80 d8 02 00 00 00 	movl   $0x0,0x2d8(%eax)
    6e95:	00 00 00 
				if ((*p)->state == TASK_INTERRUPTIBLE)
    6e98:	8b 44 24 10          	mov    0x10(%esp),%eax
    6e9c:	8b 00                	mov    (%eax),%eax
    6e9e:	8b 00                	mov    (%eax),%eax
    6ea0:	83 f8 01             	cmp    $0x1,%eax
    6ea3:	75 0c                	jne    6eb1 <schedule+0x6c>
					(*p)->state = TASK_RUNNING;
    6ea5:	8b 44 24 10          	mov    0x10(%esp),%eax
    6ea9:	8b 00                	mov    (%eax),%eax
    6eab:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			}
			// 如果设置过任务的定时值alarm,并且已经过期(alarm<jiffies),则在信号位图中置SIGALRM信号,即向任务发送SIGALARM信号.然后清alarm.
			// 该信号的默认操作是终止进程.jiffies是系统从开机开始算起的滴答数(10ms/滴答).定义在sched.h中.
			if ((*p)->alarm && (*p)->alarm < jiffies) {
    6eb1:	8b 44 24 10          	mov    0x10(%esp),%eax
    6eb5:	8b 00                	mov    (%eax),%eax
    6eb7:	8b 80 dc 02 00 00    	mov    0x2dc(%eax),%eax
    6ebd:	85 c0                	test   %eax,%eax
    6ebf:	74 3a                	je     6efb <schedule+0xb6>
    6ec1:	8b 44 24 10          	mov    0x10(%esp),%eax
    6ec5:	8b 00                	mov    (%eax),%eax
    6ec7:	8b 90 dc 02 00 00    	mov    0x2dc(%eax),%edx
    6ecd:	a1 00 eb 02 00       	mov    0x2eb00,%eax
    6ed2:	39 c2                	cmp    %eax,%edx
    6ed4:	73 25                	jae    6efb <schedule+0xb6>
				(*p)->signal |= (1 << (SIGALRM - 1));
    6ed6:	8b 44 24 10          	mov    0x10(%esp),%eax
    6eda:	8b 00                	mov    (%eax),%eax
    6edc:	8b 54 24 10          	mov    0x10(%esp),%edx
    6ee0:	8b 12                	mov    (%edx),%edx
    6ee2:	8b 52 0c             	mov    0xc(%edx),%edx
    6ee5:	80 ce 20             	or     $0x20,%dh
    6ee8:	89 50 0c             	mov    %edx,0xc(%eax)
				(*p)->alarm = 0;
    6eeb:	8b 44 24 10          	mov    0x10(%esp),%eax
    6eef:	8b 00                	mov    (%eax),%eax
    6ef1:	c7 80 dc 02 00 00 00 	movl   $0x0,0x2dc(%eax)
    6ef8:	00 00 00 
			}
			// 如果信号位图中除被阻塞的信号外还有其他信号,并且任务处于可中断状态,则置任务为就绪状态.
			// 其中'~(_BLOCKABLE & (*p)->blocked)'用于忽略被阻塞的信号,但SIGKILL和SIGSTOP不能被阻塞.
			if (((*p)->signal & ~(_BLOCKABLE & (*p)->blocked)) && (*p)->state == TASK_INTERRUPTIBLE)
    6efb:	8b 44 24 10          	mov    0x10(%esp),%eax
    6eff:	8b 00                	mov    (%eax),%eax
    6f01:	8b 50 0c             	mov    0xc(%eax),%edx
    6f04:	8b 44 24 10          	mov    0x10(%esp),%eax
    6f08:	8b 00                	mov    (%eax),%eax
    6f0a:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
    6f10:	25 ff fe fb ff       	and    $0xfffbfeff,%eax
    6f15:	f7 d0                	not    %eax
    6f17:	21 d0                	and    %edx,%eax
    6f19:	85 c0                	test   %eax,%eax
    6f1b:	74 19                	je     6f36 <schedule+0xf1>
    6f1d:	8b 44 24 10          	mov    0x10(%esp),%eax
    6f21:	8b 00                	mov    (%eax),%eax
    6f23:	8b 00                	mov    (%eax),%eax
    6f25:	83 f8 01             	cmp    $0x1,%eax
    6f28:	75 0c                	jne    6f36 <schedule+0xf1>
				(*p)->state = TASK_RUNNING;
    6f2a:	8b 44 24 10          	mov    0x10(%esp),%eax
    6f2e:	8b 00                	mov    (%eax),%eax
    6f30:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	/* check alarm, wake up any interruptible tasks that have got a signal */
	/* 检测alarm(进程的报警定时值),唤醒任何已得到信号的可中断任务 */

	// 从任务数组中最后一个任务开始循环检测alarm.在循环时跳过空指针项.
	for(p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    6f36:	83 6c 24 10 04       	subl   $0x4,0x10(%esp)
    6f3b:	81 7c 24 10 c0 e1 02 	cmpl   $0x2e1c0,0x10(%esp)
    6f42:	00 
    6f43:	0f 87 0c ff ff ff    	ja     6e55 <schedule+0x10>
		}

	/* this is the scheduler proper: */
	/* 这里是调度程序的主要部分 */
	while (1) {
		c = -1;
    6f49:	c7 44 24 14 ff ff ff 	movl   $0xffffffff,0x14(%esp)
    6f50:	ff 
		next = 0;
    6f51:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
    6f58:	00 
		i = NR_TASKS;
    6f59:	c7 44 24 1c 40 00 00 	movl   $0x40,0x1c(%esp)
    6f60:	00 
		p = &task[NR_TASKS];
    6f61:	c7 44 24 10 c0 e2 02 	movl   $0x2e2c0,0x10(%esp)
    6f68:	00 
		// 这段代码是从任务数组的最后一个任务开始循环处理,并跳过不含任务的数组糟.比较每个就绪状态任务的counter(任务运行时间的递减滴答计数)值,
		// 哪一个值大,运行时间还不长,next就指向哪个的任务号.
		while (--i) {
    6f69:	eb 41                	jmp    6fac <schedule+0x167>
			// 当前索引没有进程指针则跳过当前循环
			if (!*--p)
    6f6b:	83 6c 24 10 04       	subl   $0x4,0x10(%esp)
    6f70:	8b 44 24 10          	mov    0x10(%esp),%eax
    6f74:	8b 00                	mov    (%eax),%eax
    6f76:	85 c0                	test   %eax,%eax
    6f78:	75 02                	jne    6f7c <schedule+0x137>
				continue;
    6f7a:	eb 30                	jmp    6fac <schedule+0x167>
			if ((*p)->state == TASK_RUNNING && (*p)->counter > c)
    6f7c:	8b 44 24 10          	mov    0x10(%esp),%eax
    6f80:	8b 00                	mov    (%eax),%eax
    6f82:	8b 00                	mov    (%eax),%eax
    6f84:	85 c0                	test   %eax,%eax
    6f86:	75 24                	jne    6fac <schedule+0x167>
    6f88:	8b 44 24 10          	mov    0x10(%esp),%eax
    6f8c:	8b 00                	mov    (%eax),%eax
    6f8e:	8b 40 04             	mov    0x4(%eax),%eax
    6f91:	3b 44 24 14          	cmp    0x14(%esp),%eax
    6f95:	7e 15                	jle    6fac <schedule+0x167>
				c = (*p)->counter, next = i;
    6f97:	8b 44 24 10          	mov    0x10(%esp),%eax
    6f9b:	8b 00                	mov    (%eax),%eax
    6f9d:	8b 40 04             	mov    0x4(%eax),%eax
    6fa0:	89 44 24 14          	mov    %eax,0x14(%esp)
    6fa4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    6fa8:	89 44 24 18          	mov    %eax,0x18(%esp)
		next = 0;
		i = NR_TASKS;
		p = &task[NR_TASKS];
		// 这段代码是从任务数组的最后一个任务开始循环处理,并跳过不含任务的数组糟.比较每个就绪状态任务的counter(任务运行时间的递减滴答计数)值,
		// 哪一个值大,运行时间还不长,next就指向哪个的任务号.
		while (--i) {
    6fac:	83 6c 24 1c 01       	subl   $0x1,0x1c(%esp)
    6fb1:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
    6fb6:	75 b3                	jne    6f6b <schedule+0x126>
				c = (*p)->counter, next = i;
		}
		// 如果比较得出有counter值不等于0的结果,或者後方中没有一个可运行的任务存在(此时c仍然为-1,next=0),则退出开始的循环,执行161行上的任务切换
		// 操作.否则就根据每个任务的优先权值,更新每一个任务的counter值,然后回到125行重新比较.counter值的计算方式为counter = counter /2 +priority.
		// 注意,这里计算过程不考虑进程的状态.
		if (c) break;
    6fb8:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    6fbd:	75 49                	jne    7008 <schedule+0x1c3>
		for(p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    6fbf:	c7 44 24 10 bc e2 02 	movl   $0x2e2bc,0x10(%esp)
    6fc6:	00 
    6fc7:	eb 30                	jmp    6ff9 <schedule+0x1b4>
			if (*p)
    6fc9:	8b 44 24 10          	mov    0x10(%esp),%eax
    6fcd:	8b 00                	mov    (%eax),%eax
    6fcf:	85 c0                	test   %eax,%eax
    6fd1:	74 21                	je     6ff4 <schedule+0x1af>
				(*p)->counter = ((*p)->counter >> 1) + (*p)->priority;
    6fd3:	8b 44 24 10          	mov    0x10(%esp),%eax
    6fd7:	8b 00                	mov    (%eax),%eax
    6fd9:	8b 54 24 10          	mov    0x10(%esp),%edx
    6fdd:	8b 12                	mov    (%edx),%edx
    6fdf:	8b 52 04             	mov    0x4(%edx),%edx
    6fe2:	89 d1                	mov    %edx,%ecx
    6fe4:	d1 f9                	sar    %ecx
    6fe6:	8b 54 24 10          	mov    0x10(%esp),%edx
    6fea:	8b 12                	mov    (%edx),%edx
    6fec:	8b 52 08             	mov    0x8(%edx),%edx
    6fef:	01 ca                	add    %ecx,%edx
    6ff1:	89 50 04             	mov    %edx,0x4(%eax)
		}
		// 如果比较得出有counter值不等于0的结果,或者後方中没有一个可运行的任务存在(此时c仍然为-1,next=0),则退出开始的循环,执行161行上的任务切换
		// 操作.否则就根据每个任务的优先权值,更新每一个任务的counter值,然后回到125行重新比较.counter值的计算方式为counter = counter /2 +priority.
		// 注意,这里计算过程不考虑进程的状态.
		if (c) break;
		for(p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    6ff4:	83 6c 24 10 04       	subl   $0x4,0x10(%esp)
    6ff9:	81 7c 24 10 c0 e1 02 	cmpl   $0x2e1c0,0x10(%esp)
    7000:	00 
    7001:	77 c6                	ja     6fc9 <schedule+0x184>
			if (*p)
				(*p)->counter = ((*p)->counter >> 1) + (*p)->priority;
	}
    7003:	e9 41 ff ff ff       	jmp    6f49 <schedule+0x104>
				c = (*p)->counter, next = i;
		}
		// 如果比较得出有counter值不等于0的结果,或者後方中没有一个可运行的任务存在(此时c仍然为-1,next=0),则退出开始的循环,执行161行上的任务切换
		// 操作.否则就根据每个任务的优先权值,更新每一个任务的counter值,然后回到125行重新比较.counter值的计算方式为counter = counter /2 +priority.
		// 注意,这里计算过程不考虑进程的状态.
		if (c) break;
    7008:	90                   	nop
			if (*p)
				(*p)->counter = ((*p)->counter >> 1) + (*p)->priority;
	}
	// 用下面的宏(定义在sched.h中)把当前任务指针current指向任务号为next的任务,并切换到该任务中运行.在146行上next被初始化为0.因此若系统中没有任何
	// 其他任务可运行时,则next始终为0.因此调度函数会在系统空闲时去执行任务0.此时任务0权执行pause()
	switch_to(next);					// 切换到任务号为next的任务,并运行之.
    7009:	8b 44 24 18          	mov    0x18(%esp),%eax
    700d:	c1 e0 04             	shl    $0x4,%eax
    7010:	8d 50 20             	lea    0x20(%eax),%edx
    7013:	8b 44 24 18          	mov    0x18(%esp),%eax
    7017:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    701e:	89 c1                	mov    %eax,%ecx
    7020:	39 0d a0 e1 02 00    	cmp    %ecx,0x2e1a0
    7026:	74 19                	je     7041 <schedule+0x1fc>
    7028:	66 89 54 24 0c       	mov    %dx,0xc(%esp)
    702d:	87 0d a0 e1 02 00    	xchg   %ecx,0x2e1a0
    7033:	ff 6c 24 08          	ljmp   *0x8(%esp)
    7037:	39 0d 0c eb 02 00    	cmp    %ecx,0x2eb0c
    703d:	75 02                	jne    7041 <schedule+0x1fc>
    703f:	0f 06                	clts   
}
    7041:	90                   	nop
    7042:	83 c4 20             	add    $0x20,%esp
    7045:	c3                   	ret    

00007046 <sys_pause>:
// pause()系统调用.转换当前任务的状态为可中断的等待状态,并重新调试.
// 该系统调用将导致进程进入睡眠状态,直到收到一个信号.该信号用于终止进程或者使进程调用一个信号捕获函数.只有当捕获了一个信号,并且信号捕获处理函数返回,
// pause()才会返回.此时pause()返回值应该是-1,并且errno被置为EINTR.这里还没有完全实现(直到0.95版).
int sys_pause(void)
{
	current->state = TASK_INTERRUPTIBLE;
    7046:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    704b:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
	schedule();
    7051:	e8 ef fd ff ff       	call   6e45 <schedule>
	return 0;
    7056:	b8 00 00 00 00       	mov    $0x0,%eax
}
    705b:	c3                   	ret    

0000705c <__sleep_on>:
// 是任务结构)会改变,因此为了能修改调用该函数程序中原来就是指针变量的值,就需要传递指针'*p'的指针,即'**p'.
// 参数state是任务睡眠使用的状态:TASK_INTERRUPTIBLE或TASK_INTERRUPTIBLE.处于不可中断睡眠状态(TASK_UNINTERRUPTIBLE)的任务需要内核程序利用
// wake_up()函数明确唤醒之.处于可中断睡眠状态(TASK_INTERRUPTIBLE)可以通过信号,任务起时等手段唤醒(置为就绪状态TASK_RUNNING).
// *** 注意,由于本内核代码不是很成熟,因此下列与睡眠相关的代码存在一些问题,不宜深究.
static inline void __sleep_on(struct task_struct **p, int state)
{
    705c:	83 ec 1c             	sub    $0x1c,%esp
	struct task_struct *tmp;

	// 若指针无效,则退出.(指针所指的对象可以是NULL,但指针本身不会为0).
	// 如果当前任务是任务0,则死机(impossible!).
	if (!p)
    705f:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    7064:	0f 84 ae 00 00 00    	je     7118 <__sleep_on+0xbc>
		return;
	if (current == &(init_task.task))
    706a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    706f:	3d a0 d1 02 00       	cmp    $0x2d1a0,%eax
    7074:	75 10                	jne    7086 <__sleep_on+0x2a>
		panic("task[0] trying to sleep");
    7076:	83 ec 0c             	sub    $0xc,%esp
    7079:	68 33 2b 02 00       	push   $0x22b33
    707e:	e8 85 1b 00 00       	call   8c08 <panic>
    7083:	83 c4 10             	add    $0x10,%esp
	// 让tmp指向已经在等待队列上的任务(如果有的话),例如inode->i_wait.并且将睡眠队列头的等待指针指向当前任务.这样就把当前任务插入到了*p的等待队列中.然后
	// 将当前任务置为指定的等待状态,并执行重新调度.
	tmp = *p;
    7086:	8b 44 24 20          	mov    0x20(%esp),%eax
    708a:	8b 00                	mov    (%eax),%eax
    708c:	89 44 24 0c          	mov    %eax,0xc(%esp)
	*p = current;
    7090:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    7096:	8b 44 24 20          	mov    0x20(%esp),%eax
    709a:	89 10                	mov    %edx,(%eax)
	current->state = state;
    709c:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    70a1:	8b 54 24 24          	mov    0x24(%esp),%edx
    70a5:	89 10                	mov    %edx,(%eax)
	// 将当前进程睡眠后立刻调用调度函数进行调度新的进程执行
repeat:	schedule();
    70a7:	e8 99 fd ff ff       	call   6e45 <schedule>
	// 只有当这个等待任务被唤醒时,程序才会返回到这里,表示进程已被明确地唤醒并执行.如果等待队列中还有等待任务,并且队列头指针*p所指向的任务不是当前任务时,说明
	// 在本任务插入等待队列后还有任务进入等待队列.于是我们应该也要唤醒这个任务,而我们自己应按顺序让这些后面进入队列的任务唤醒,因此这里将等待队列头所指任务先
	// 置为就绪状态,而自己则置为不可中断等待状态,即自己要等待这些后续队列的任务被唤醒而执行时来唤醒本任务.然后重新执行调度程序.
	if (*p && *p != current) {
    70ac:	8b 44 24 20          	mov    0x20(%esp),%eax
    70b0:	8b 00                	mov    (%eax),%eax
    70b2:	85 c0                	test   %eax,%eax
    70b4:	74 28                	je     70de <__sleep_on+0x82>
    70b6:	8b 44 24 20          	mov    0x20(%esp),%eax
    70ba:	8b 10                	mov    (%eax),%edx
    70bc:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    70c1:	39 c2                	cmp    %eax,%edx
    70c3:	74 19                	je     70de <__sleep_on+0x82>
		(**p).state = 0;
    70c5:	8b 44 24 20          	mov    0x20(%esp),%eax
    70c9:	8b 00                	mov    (%eax),%eax
    70cb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		current->state = TASK_UNINTERRUPTIBLE;
    70d1:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    70d6:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
		goto repeat;
    70dc:	eb c9                	jmp    70a7 <__sleep_on+0x4b>
	}
	// 执行到这里,说明本任务真正被唤醒执行.此时等待队列头指针应该指向本任务,若它为空,则表明调度有问题,于是显示警告信息.最后我们让头指针指向在我们前面进入队列的
	// 任务(*p = tmp).若确实存在这样一个任务,即队列中还有任务(tmp不为空),就唤醒之.最先进入队列的任务在唤醒后运行时最终会把等待队列头指针置成NULL.
	if (!*p)
    70de:	8b 44 24 20          	mov    0x20(%esp),%eax
    70e2:	8b 00                	mov    (%eax),%eax
    70e4:	85 c0                	test   %eax,%eax
    70e6:	75 10                	jne    70f8 <__sleep_on+0x9c>
		printk("Warning: *P = NULL\n\r");
    70e8:	83 ec 0c             	sub    $0xc,%esp
    70eb:	68 4b 2b 02 00       	push   $0x22b4b
    70f0:	e8 52 1b 00 00       	call   8c47 <printk>
    70f5:	83 c4 10             	add    $0x10,%esp
	if (*p = tmp)
    70f8:	8b 44 24 20          	mov    0x20(%esp),%eax
    70fc:	8b 54 24 0c          	mov    0xc(%esp),%edx
    7100:	89 10                	mov    %edx,(%eax)
    7102:	8b 44 24 20          	mov    0x20(%esp),%eax
    7106:	8b 00                	mov    (%eax),%eax
    7108:	85 c0                	test   %eax,%eax
    710a:	74 0d                	je     7119 <__sleep_on+0xbd>
		tmp->state = 0;
    710c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7110:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    7116:	eb 01                	jmp    7119 <__sleep_on+0xbd>
	struct task_struct *tmp;

	// 若指针无效,则退出.(指针所指的对象可以是NULL,但指针本身不会为0).
	// 如果当前任务是任务0,则死机(impossible!).
	if (!p)
		return;
    7118:	90                   	nop
	// 任务(*p = tmp).若确实存在这样一个任务,即队列中还有任务(tmp不为空),就唤醒之.最先进入队列的任务在唤醒后运行时最终会把等待队列头指针置成NULL.
	if (!*p)
		printk("Warning: *P = NULL\n\r");
	if (*p = tmp)
		tmp->state = 0;
}
    7119:	83 c4 1c             	add    $0x1c,%esp
    711c:	c3                   	ret    

0000711d <interruptible_sleep_on>:

// 将当前任务置为可中断的等待状态(TASK_INIERRUPTIBLE),并放入头指针*p指定的等待队列中.
void interruptible_sleep_on(struct task_struct **p)
{
    711d:	83 ec 0c             	sub    $0xc,%esp
	__sleep_on(p, TASK_INTERRUPTIBLE);
    7120:	83 ec 08             	sub    $0x8,%esp
    7123:	6a 01                	push   $0x1
    7125:	ff 74 24 1c          	pushl  0x1c(%esp)
    7129:	e8 2e ff ff ff       	call   705c <__sleep_on>
    712e:	83 c4 10             	add    $0x10,%esp
}
    7131:	90                   	nop
    7132:	83 c4 0c             	add    $0xc,%esp
    7135:	c3                   	ret    

00007136 <sleep_on>:

// 把当前任务置为不可中断的等待状态(TASK_UNINTERRUPTIBLE),并让睡眠队列头指针指向当前任务.只有明确地唤醒时才会返回.该函数提供了进程与中断处理程序之间的
// 同步机制.
void sleep_on(struct task_struct **p)
{
    7136:	83 ec 0c             	sub    $0xc,%esp
	__sleep_on(p, TASK_UNINTERRUPTIBLE);
    7139:	83 ec 08             	sub    $0x8,%esp
    713c:	6a 02                	push   $0x2
    713e:	ff 74 24 1c          	pushl  0x1c(%esp)
    7142:	e8 15 ff ff ff       	call   705c <__sleep_on>
    7147:	83 c4 10             	add    $0x10,%esp
}
    714a:	90                   	nop
    714b:	83 c4 0c             	add    $0xc,%esp
    714e:	c3                   	ret    

0000714f <wake_up>:

// 唤醒*p指向的任务.*p是任务等待队列头指针.由于新等待任务是插入在等待队列头指针处的,因此唤醒的是最后进入等待队列的任务.若该任务已经处于停止或
// 僵死状态,则显示警告信息.
void wake_up(struct task_struct **p)
{
    714f:	83 ec 0c             	sub    $0xc,%esp
	if (p && *p) {
    7152:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
    7157:	74 50                	je     71a9 <wake_up+0x5a>
    7159:	8b 44 24 10          	mov    0x10(%esp),%eax
    715d:	8b 00                	mov    (%eax),%eax
    715f:	85 c0                	test   %eax,%eax
    7161:	74 46                	je     71a9 <wake_up+0x5a>
		if ((**p).state == TASK_STOPPED)						// 处于停止状态.
    7163:	8b 44 24 10          	mov    0x10(%esp),%eax
    7167:	8b 00                	mov    (%eax),%eax
    7169:	8b 00                	mov    (%eax),%eax
    716b:	83 f8 04             	cmp    $0x4,%eax
    716e:	75 10                	jne    7180 <wake_up+0x31>
			printk("wake_up: TASK_STOPPED");
    7170:	83 ec 0c             	sub    $0xc,%esp
    7173:	68 60 2b 02 00       	push   $0x22b60
    7178:	e8 ca 1a 00 00       	call   8c47 <printk>
    717d:	83 c4 10             	add    $0x10,%esp
		if ((**p).state == TASK_ZOMBIE)							// 处于僵死状态.
    7180:	8b 44 24 10          	mov    0x10(%esp),%eax
    7184:	8b 00                	mov    (%eax),%eax
    7186:	8b 00                	mov    (%eax),%eax
    7188:	83 f8 03             	cmp    $0x3,%eax
    718b:	75 10                	jne    719d <wake_up+0x4e>
			printk("wake_up: TASK_ZOMBIE");
    718d:	83 ec 0c             	sub    $0xc,%esp
    7190:	68 76 2b 02 00       	push   $0x22b76
    7195:	e8 ad 1a 00 00       	call   8c47 <printk>
    719a:	83 c4 10             	add    $0x10,%esp
		(**p).state=0;											// 置为就绪状态TASK_RUNNING.
    719d:	8b 44 24 10          	mov    0x10(%esp),%eax
    71a1:	8b 00                	mov    (%eax),%eax
    71a3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	}
}
    71a9:	90                   	nop
    71aa:	83 c4 0c             	add    $0xc,%esp
    71ad:	c3                   	ret    

000071ae <ticks_to_floppy_on>:

// 指定软驱启动到正常运转状态所需等待时间.
// 参数nr -- 软驱号(0--3),返回值为滴答.
// 局部变量selected是选中软驱标志(blk_drv/floppy.c).mask是所选软驱对应的数字输出寄存器中启动马达位.mask高4位是各软驱启动马达标志.
int ticks_to_floppy_on(unsigned int nr)
{
    71ae:	83 ec 1c             	sub    $0x1c,%esp
	extern unsigned char selected;
	unsigned char mask = 0x10 << nr;
    71b1:	8b 44 24 20          	mov    0x20(%esp),%eax
    71b5:	ba 10 00 00 00       	mov    $0x10,%edx
    71ba:	89 c1                	mov    %eax,%ecx
    71bc:	d3 e2                	shl    %cl,%edx
    71be:	89 d0                	mov    %edx,%eax
    71c0:	88 44 24 0f          	mov    %al,0xf(%esp)

	// 系统最多有4个软驱.首先预先设置好指定软驱nr停转之前需要经过的时间(100秒).然后取当前DOR寄存器值到临时变量mask中,并把指定软驱的马达
	// 启动标志置位.
	if (nr > 3)
    71c4:	83 7c 24 20 03       	cmpl   $0x3,0x20(%esp)
    71c9:	76 10                	jbe    71db <ticks_to_floppy_on+0x2d>
		panic("floppy_on: nr>3");
    71cb:	83 ec 0c             	sub    $0xc,%esp
    71ce:	68 8b 2b 02 00       	push   $0x22b8b
    71d3:	e8 30 1a 00 00       	call   8c08 <panic>
    71d8:	83 c4 10             	add    $0x10,%esp
	moff_timer[nr] = 10000;							/* 100 s = very big :-) */	// 停转维持时间.
    71db:	8b 44 24 20          	mov    0x20(%esp),%eax
    71df:	c7 04 85 30 eb 02 00 	movl   $0x2710,0x2eb30(,%eax,4)
    71e6:	10 27 00 00 
	cli();											/* use floppy_off to turn it off */	// 关中断
    71ea:	fa                   	cli    
	mask |= current_DOR;
    71eb:	0f b6 05 c8 e2 02 00 	movzbl 0x2e2c8,%eax
    71f2:	08 44 24 0f          	or     %al,0xf(%esp)
	// 如果当前没有选择软驱,则首先复位其他软驱的选择位,然后指定软驱选择位.
	if (!selected) {
    71f6:	0f b6 05 58 11 03 00 	movzbl 0x31158,%eax
    71fd:	84 c0                	test   %al,%al
    71ff:	75 0d                	jne    720e <ticks_to_floppy_on+0x60>
		mask &= 0xFC;
    7201:	80 64 24 0f fc       	andb   $0xfc,0xf(%esp)
		mask |= nr;
    7206:	8b 44 24 20          	mov    0x20(%esp),%eax
    720a:	08 44 24 0f          	or     %al,0xf(%esp)
	}
	// 如果数字输出寄存器的当前值与要求的值不同,则向FDC数字输出端口输出新值(mask),并且如果要求启动的马达还没有启动,则置相应软驱的马达启动
	// 定时器值(HZ/2 = 0.5秒或50个滴答).若已经启动,则再设置启动定时为2个滴答,能满足下面do_floppy_timer()中先递减后判断的要求.执行本次
	// 定时代码的要求即可.此后更新当前数字输出寄存器current_DOR.
	if (mask != current_DOR) {
    720e:	0f b6 05 c8 e2 02 00 	movzbl 0x2e2c8,%eax
    7215:	38 44 24 0f          	cmp    %al,0xf(%esp)
    7219:	74 5c                	je     7277 <ticks_to_floppy_on+0xc9>
		outb(mask, FD_DOR);
    721b:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
    7220:	ba f2 03 00 00       	mov    $0x3f2,%edx
    7225:	ee                   	out    %al,(%dx)
		if ((mask ^ current_DOR) & 0xf0)
    7226:	0f b6 05 c8 e2 02 00 	movzbl 0x2e2c8,%eax
    722d:	32 44 24 0f          	xor    0xf(%esp),%al
    7231:	0f b6 c0             	movzbl %al,%eax
    7234:	25 f0 00 00 00       	and    $0xf0,%eax
    7239:	85 c0                	test   %eax,%eax
    723b:	74 11                	je     724e <ticks_to_floppy_on+0xa0>
			mon_timer[nr] = HZ / 2;
    723d:	8b 44 24 20          	mov    0x20(%esp),%eax
    7241:	c7 04 85 20 eb 02 00 	movl   $0x32,0x2eb20(,%eax,4)
    7248:	32 00 00 00 
    724c:	eb 1f                	jmp    726d <ticks_to_floppy_on+0xbf>
		else if (mon_timer[nr] < 2)
    724e:	8b 44 24 20          	mov    0x20(%esp),%eax
    7252:	8b 04 85 20 eb 02 00 	mov    0x2eb20(,%eax,4),%eax
    7259:	83 f8 01             	cmp    $0x1,%eax
    725c:	7f 0f                	jg     726d <ticks_to_floppy_on+0xbf>
			mon_timer[nr] = 2;
    725e:	8b 44 24 20          	mov    0x20(%esp),%eax
    7262:	c7 04 85 20 eb 02 00 	movl   $0x2,0x2eb20(,%eax,4)
    7269:	02 00 00 00 
		current_DOR = mask;
    726d:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
    7272:	a2 c8 e2 02 00       	mov    %al,0x2e2c8
	}
	sti();											// 开中断.
    7277:	fb                   	sti    
	return mon_timer[nr];							// 最后返回启动马达所需的时间值.
    7278:	8b 44 24 20          	mov    0x20(%esp),%eax
    727c:	8b 04 85 20 eb 02 00 	mov    0x2eb20(,%eax,4),%eax
}
    7283:	83 c4 1c             	add    $0x1c,%esp
    7286:	c3                   	ret    

00007287 <floppy_on>:

// 等待指定软驱马达启动所需的一段时间,然后返回.
// 设置指定软驱的马达启动到正常转速所需的延时,然后睡眠等待.在定时中断过程中会一直递减判断这里设定的延时值.当延时到期,就会 这里的等待进程.
void floppy_on(unsigned int nr)
{
    7287:	83 ec 0c             	sub    $0xc,%esp
	// 关中断.如果马达启动定时还没到,就一直把当前进程置为不可中断睡眠状态并放入等待马达运行的队列中.然后开中断.
	cli();
    728a:	fa                   	cli    
	while (ticks_to_floppy_on(nr))
    728b:	eb 18                	jmp    72a5 <floppy_on+0x1e>
		sleep_on(nr + wait_motor);
    728d:	8b 44 24 10          	mov    0x10(%esp),%eax
    7291:	c1 e0 02             	shl    $0x2,%eax
    7294:	05 10 eb 02 00       	add    $0x2eb10,%eax
    7299:	83 ec 0c             	sub    $0xc,%esp
    729c:	50                   	push   %eax
    729d:	e8 94 fe ff ff       	call   7136 <sleep_on>
    72a2:	83 c4 10             	add    $0x10,%esp
// 设置指定软驱的马达启动到正常转速所需的延时,然后睡眠等待.在定时中断过程中会一直递减判断这里设定的延时值.当延时到期,就会 这里的等待进程.
void floppy_on(unsigned int nr)
{
	// 关中断.如果马达启动定时还没到,就一直把当前进程置为不可中断睡眠状态并放入等待马达运行的队列中.然后开中断.
	cli();
	while (ticks_to_floppy_on(nr))
    72a5:	83 ec 0c             	sub    $0xc,%esp
    72a8:	ff 74 24 1c          	pushl  0x1c(%esp)
    72ac:	e8 fd fe ff ff       	call   71ae <ticks_to_floppy_on>
    72b1:	83 c4 10             	add    $0x10,%esp
    72b4:	85 c0                	test   %eax,%eax
    72b6:	75 d5                	jne    728d <floppy_on+0x6>
		sleep_on(nr + wait_motor);
	sti();
    72b8:	fb                   	sti    
}
    72b9:	90                   	nop
    72ba:	83 c4 0c             	add    $0xc,%esp
    72bd:	c3                   	ret    

000072be <floppy_off>:

// 置关闭相应软驱马达停转定时器(3秒).
// 若不使用该函数明确关闭指定的软驱马达,则在马达开启100秒之后也会被关闭.
void floppy_off(unsigned int nr)
{
	moff_timer[nr] = 3 * HZ;
    72be:	8b 44 24 04          	mov    0x4(%esp),%eax
    72c2:	c7 04 85 30 eb 02 00 	movl   $0x12c,0x2eb30(,%eax,4)
    72c9:	2c 01 00 00 
}
    72cd:	90                   	nop
    72ce:	c3                   	ret    

000072cf <do_floppy_timer>:

// 软盘定时处理子程序.更新马达启动定时值和马达关闭停转时值.该子程序会在时钟定时中断过程中被调用,因此系统每经过一个滴答(10ms)就会被
// 调用一次,随时更新马达开启或停转定时器的值.如果某一个马达停转定时到,则将数字输出寄存器马达启动位复位.
void do_floppy_timer(void)
{
    72cf:	83 ec 1c             	sub    $0x1c,%esp
	int i;
	unsigned char mask = 0x10;
    72d2:	c6 44 24 0b 10       	movb   $0x10,0xb(%esp)

	for (i = 0 ; i < 4 ; i++, mask <<= 1) {
    72d7:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    72de:	00 
    72df:	e9 be 00 00 00       	jmp    73a2 <do_floppy_timer+0xd3>
		if (!(mask & current_DOR))						// 如果不是DOR指定的马达则跳过.
    72e4:	0f b6 05 c8 e2 02 00 	movzbl 0x2e2c8,%eax
    72eb:	22 44 24 0b          	and    0xb(%esp),%al
    72ef:	84 c0                	test   %al,%al
    72f1:	0f 84 a1 00 00 00    	je     7398 <do_floppy_timer+0xc9>
			continue;
		if (mon_timer[i]) {								// 如果马达启动定时到则唤醒进程.
    72f7:	8b 44 24 0c          	mov    0xc(%esp),%eax
    72fb:	8b 04 85 20 eb 02 00 	mov    0x2eb20(,%eax,4),%eax
    7302:	85 c0                	test   %eax,%eax
    7304:	74 42                	je     7348 <do_floppy_timer+0x79>
			if (!--mon_timer[i])
    7306:	8b 44 24 0c          	mov    0xc(%esp),%eax
    730a:	8b 04 85 20 eb 02 00 	mov    0x2eb20(,%eax,4),%eax
    7311:	8d 50 ff             	lea    -0x1(%eax),%edx
    7314:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7318:	89 14 85 20 eb 02 00 	mov    %edx,0x2eb20(,%eax,4)
    731f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7323:	8b 04 85 20 eb 02 00 	mov    0x2eb20(,%eax,4),%eax
    732a:	85 c0                	test   %eax,%eax
    732c:	75 6b                	jne    7399 <do_floppy_timer+0xca>
				wake_up(i + wait_motor);
    732e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7332:	c1 e0 02             	shl    $0x2,%eax
    7335:	05 10 eb 02 00       	add    $0x2eb10,%eax
    733a:	83 ec 0c             	sub    $0xc,%esp
    733d:	50                   	push   %eax
    733e:	e8 0c fe ff ff       	call   714f <wake_up>
    7343:	83 c4 10             	add    $0x10,%esp
    7346:	eb 51                	jmp    7399 <do_floppy_timer+0xca>
		} else if (!moff_timer[i]) {					// 如果马达停转定时到则复位相应马达启动位,并且更新数字输出寄存器.
    7348:	8b 44 24 0c          	mov    0xc(%esp),%eax
    734c:	8b 04 85 30 eb 02 00 	mov    0x2eb30(,%eax,4),%eax
    7353:	85 c0                	test   %eax,%eax
    7355:	75 26                	jne    737d <do_floppy_timer+0xae>
			current_DOR &= ~mask;
    7357:	0f b6 44 24 0b       	movzbl 0xb(%esp),%eax
    735c:	f7 d0                	not    %eax
    735e:	89 c2                	mov    %eax,%edx
    7360:	0f b6 05 c8 e2 02 00 	movzbl 0x2e2c8,%eax
    7367:	21 d0                	and    %edx,%eax
    7369:	a2 c8 e2 02 00       	mov    %al,0x2e2c8
			outb(current_DOR, FD_DOR);
    736e:	0f b6 05 c8 e2 02 00 	movzbl 0x2e2c8,%eax
    7375:	ba f2 03 00 00       	mov    $0x3f2,%edx
    737a:	ee                   	out    %al,(%dx)
    737b:	eb 1c                	jmp    7399 <do_floppy_timer+0xca>
		} else
			moff_timer[i]--;							// 否则马达停转计时递减.
    737d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7381:	8b 04 85 30 eb 02 00 	mov    0x2eb30(,%eax,4),%eax
    7388:	8d 50 ff             	lea    -0x1(%eax),%edx
    738b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    738f:	89 14 85 30 eb 02 00 	mov    %edx,0x2eb30(,%eax,4)
    7396:	eb 01                	jmp    7399 <do_floppy_timer+0xca>
	int i;
	unsigned char mask = 0x10;

	for (i = 0 ; i < 4 ; i++, mask <<= 1) {
		if (!(mask & current_DOR))						// 如果不是DOR指定的马达则跳过.
			continue;
    7398:	90                   	nop
void do_floppy_timer(void)
{
	int i;
	unsigned char mask = 0x10;

	for (i = 0 ; i < 4 ; i++, mask <<= 1) {
    7399:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    739e:	d0 64 24 0b          	shlb   0xb(%esp)
    73a2:	83 7c 24 0c 03       	cmpl   $0x3,0xc(%esp)
    73a7:	0f 8e 37 ff ff ff    	jle    72e4 <do_floppy_timer+0x15>
			current_DOR &= ~mask;
			outb(current_DOR, FD_DOR);
		} else
			moff_timer[i]--;							// 否则马达停转计时递减.
	}
}
    73ad:	90                   	nop
    73ae:	83 c4 1c             	add    $0x1c,%esp
    73b1:	c3                   	ret    

000073b2 <add_timer>:

// 添加定时器.输入参数为指定的定时值(滴答数)和相应的处理程序指针.
// 软盘驱动程序(floppy.c)利用该函数执行启动或关闭马达的延时操作.
// 参数jiffies- 以10毫秒计的滴答数; *fn() - 定时时间到时执行的函数.
void add_timer(long jiffies, void (*fn)(void))
{
    73b2:	83 ec 1c             	sub    $0x1c,%esp
	struct timer_list * p;

	// 如果定时处理程序指针为空,则退出.否则关中断.
	if (!fn)
    73b5:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
    73ba:	0f 84 54 01 00 00    	je     7514 <add_timer+0x162>
		return;
	cli();
    73c0:	fa                   	cli    
	// 如果定时值<=0,则立刻调用其处理程序.并且该定时器不加入链表中.
	if (jiffies <= 0)
    73c1:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    73c6:	7f 0b                	jg     73d3 <add_timer+0x21>
		(fn)();
    73c8:	8b 44 24 24          	mov    0x24(%esp),%eax
    73cc:	ff d0                	call   *%eax
    73ce:	e9 3e 01 00 00       	jmp    7511 <add_timer+0x15f>
	else {
		// 否则从定时器数组中,找一个空闲项.
		for (p = timer_list ; p < timer_list + TIME_REQUESTS ; p++)
    73d3:	c7 44 24 0c 40 eb 02 	movl   $0x2eb40,0xc(%esp)
    73da:	00 
    73db:	eb 10                	jmp    73ed <add_timer+0x3b>
			if (!p->fn)
    73dd:	8b 44 24 0c          	mov    0xc(%esp),%eax
    73e1:	8b 40 04             	mov    0x4(%eax),%eax
    73e4:	85 c0                	test   %eax,%eax
    73e6:	74 12                	je     73fa <add_timer+0x48>
	// 如果定时值<=0,则立刻调用其处理程序.并且该定时器不加入链表中.
	if (jiffies <= 0)
		(fn)();
	else {
		// 否则从定时器数组中,找一个空闲项.
		for (p = timer_list ; p < timer_list + TIME_REQUESTS ; p++)
    73e8:	83 44 24 0c 0c       	addl   $0xc,0xc(%esp)
    73ed:	b8 40 ee 02 00       	mov    $0x2ee40,%eax
    73f2:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    73f6:	72 e5                	jb     73dd <add_timer+0x2b>
    73f8:	eb 01                	jmp    73fb <add_timer+0x49>
			if (!p->fn)
				break;
    73fa:	90                   	nop
		// 如果已经用完了定时器数组,则系统崩溃.否则向定时器数据结构填入就信息,并链入链表头.
		if (p >= timer_list + TIME_REQUESTS)
    73fb:	b8 40 ee 02 00       	mov    $0x2ee40,%eax
    7400:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    7404:	72 10                	jb     7416 <add_timer+0x64>
			panic("No more time requests free");
    7406:	83 ec 0c             	sub    $0xc,%esp
    7409:	68 9b 2b 02 00       	push   $0x22b9b
    740e:	e8 f5 17 00 00       	call   8c08 <panic>
    7413:	83 c4 10             	add    $0x10,%esp
		p->fn = fn;
    7416:	8b 44 24 0c          	mov    0xc(%esp),%eax
    741a:	8b 54 24 24          	mov    0x24(%esp),%edx
    741e:	89 50 04             	mov    %edx,0x4(%eax)
		p->jiffies = jiffies;
    7421:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7425:	8b 54 24 20          	mov    0x20(%esp),%edx
    7429:	89 10                	mov    %edx,(%eax)
		p->next = next_timer;
    742b:	8b 15 40 ee 02 00    	mov    0x2ee40,%edx
    7431:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7435:	89 50 08             	mov    %edx,0x8(%eax)
		next_timer = p;
    7438:	8b 44 24 0c          	mov    0xc(%esp),%eax
    743c:	a3 40 ee 02 00       	mov    %eax,0x2ee40
		// 链表项按定时值从小到大排序.在排序时减去排在前面需要的滴答数,这样在处理定时器时只要查看链表头的第一项的定时是否到期即可.
		// [[?? 这段程序好像没有考虑周全.如果新插入的定时器值小于原来关一个定时器值时则根本没会进入循环中,但此时还是应该将紧随后面
		// 的一个定时器值减去新的第1个的定时值.即如果第1个定时值<=第2个,则第2个定时值扣除第1个的值即可,否则进入下面循环中进行处理.]]
		while (p->next && p->next->jiffies < p->jiffies) {
    7441:	eb 72                	jmp    74b5 <add_timer+0x103>
			p->jiffies -= p->next->jiffies;
    7443:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7447:	8b 10                	mov    (%eax),%edx
    7449:	8b 44 24 0c          	mov    0xc(%esp),%eax
    744d:	8b 40 08             	mov    0x8(%eax),%eax
    7450:	8b 00                	mov    (%eax),%eax
    7452:	29 c2                	sub    %eax,%edx
    7454:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7458:	89 10                	mov    %edx,(%eax)
			fn = p->fn;
    745a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    745e:	8b 40 04             	mov    0x4(%eax),%eax
    7461:	89 44 24 24          	mov    %eax,0x24(%esp)
			p->fn = p->next->fn;
    7465:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7469:	8b 40 08             	mov    0x8(%eax),%eax
    746c:	8b 50 04             	mov    0x4(%eax),%edx
    746f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7473:	89 50 04             	mov    %edx,0x4(%eax)
			p->next->fn = fn;
    7476:	8b 44 24 0c          	mov    0xc(%esp),%eax
    747a:	8b 40 08             	mov    0x8(%eax),%eax
    747d:	8b 54 24 24          	mov    0x24(%esp),%edx
    7481:	89 50 04             	mov    %edx,0x4(%eax)
			jiffies = p->jiffies;
    7484:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7488:	8b 00                	mov    (%eax),%eax
    748a:	89 44 24 20          	mov    %eax,0x20(%esp)
			p->jiffies = p->next->jiffies;
    748e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7492:	8b 40 08             	mov    0x8(%eax),%eax
    7495:	8b 10                	mov    (%eax),%edx
    7497:	8b 44 24 0c          	mov    0xc(%esp),%eax
    749b:	89 10                	mov    %edx,(%eax)
			p->next->jiffies = jiffies;
    749d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    74a1:	8b 40 08             	mov    0x8(%eax),%eax
    74a4:	8b 54 24 20          	mov    0x20(%esp),%edx
    74a8:	89 10                	mov    %edx,(%eax)
			p = p->next;
    74aa:	8b 44 24 0c          	mov    0xc(%esp),%eax
    74ae:	8b 40 08             	mov    0x8(%eax),%eax
    74b1:	89 44 24 0c          	mov    %eax,0xc(%esp)
		p->next = next_timer;
		next_timer = p;
		// 链表项按定时值从小到大排序.在排序时减去排在前面需要的滴答数,这样在处理定时器时只要查看链表头的第一项的定时是否到期即可.
		// [[?? 这段程序好像没有考虑周全.如果新插入的定时器值小于原来关一个定时器值时则根本没会进入循环中,但此时还是应该将紧随后面
		// 的一个定时器值减去新的第1个的定时值.即如果第1个定时值<=第2个,则第2个定时值扣除第1个的值即可,否则进入下面循环中进行处理.]]
		while (p->next && p->next->jiffies < p->jiffies) {
    74b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
    74b9:	8b 40 08             	mov    0x8(%eax),%eax
    74bc:	85 c0                	test   %eax,%eax
    74be:	74 17                	je     74d7 <add_timer+0x125>
    74c0:	8b 44 24 0c          	mov    0xc(%esp),%eax
    74c4:	8b 40 08             	mov    0x8(%eax),%eax
    74c7:	8b 10                	mov    (%eax),%edx
    74c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    74cd:	8b 00                	mov    (%eax),%eax
    74cf:	39 c2                	cmp    %eax,%edx
    74d1:	0f 8c 6c ff ff ff    	jl     7443 <add_timer+0x91>
			p->jiffies = p->next->jiffies;
			p->next->jiffies = jiffies;
			p = p->next;
		}
		// 修正上述问题.
		if(p->next && p->next->jiffies >= p->jiffies) {
    74d7:	8b 44 24 0c          	mov    0xc(%esp),%eax
    74db:	8b 40 08             	mov    0x8(%eax),%eax
    74de:	85 c0                	test   %eax,%eax
    74e0:	74 2f                	je     7511 <add_timer+0x15f>
    74e2:	8b 44 24 0c          	mov    0xc(%esp),%eax
    74e6:	8b 40 08             	mov    0x8(%eax),%eax
    74e9:	8b 10                	mov    (%eax),%edx
    74eb:	8b 44 24 0c          	mov    0xc(%esp),%eax
    74ef:	8b 00                	mov    (%eax),%eax
    74f1:	39 c2                	cmp    %eax,%edx
    74f3:	7c 1c                	jl     7511 <add_timer+0x15f>
			p->next->jiffies -= p->jiffies;
    74f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
    74f9:	8b 40 08             	mov    0x8(%eax),%eax
    74fc:	8b 54 24 0c          	mov    0xc(%esp),%edx
    7500:	8b 52 08             	mov    0x8(%edx),%edx
    7503:	8b 0a                	mov    (%edx),%ecx
    7505:	8b 54 24 0c          	mov    0xc(%esp),%edx
    7509:	8b 12                	mov    (%edx),%edx
    750b:	29 d1                	sub    %edx,%ecx
    750d:	89 ca                	mov    %ecx,%edx
    750f:	89 10                	mov    %edx,(%eax)
		}
	}
	sti();
    7511:	fb                   	sti    
    7512:	eb 01                	jmp    7515 <add_timer+0x163>
{
	struct timer_list * p;

	// 如果定时处理程序指针为空,则退出.否则关中断.
	if (!fn)
		return;
    7514:	90                   	nop
		if(p->next && p->next->jiffies >= p->jiffies) {
			p->next->jiffies -= p->jiffies;
		}
	}
	sti();
}
    7515:	83 c4 1c             	add    $0x1c,%esp
    7518:	c3                   	ret    

00007519 <do_timer>:

// 时钟中断C函数处理程序,在sys_call.s中的timer_interrupt被调用.
// 参数cpl是当前特权级0或3,是时钟中断发生时正被执行的代码选择符中的特权级.cpl=0时表示中断发生时正在执行内核代码,cpl=3时表示中断发生时正在执行用户
// 代码.对于一个进程由于执行时间片用完时,则进行任务切换.并执行一个计时更新工作.
void do_timer(long cpl)
{
    7519:	83 ec 1c             	sub    $0x1c,%esp
	static int blanked = 0;

	// 首先判断是否经过了一定时间而让屏幕黑屏(blankcount).如果blankcount计数不为零,或者黑屏延时间隔时间blankinterval为0的话,那么若已经处理黑屏状态
	// (黑屏标志blanked=1),则让屏幕恢复显示.若blnkcount计数不为零,则递减之,并且复位黑屏标志.
	if (blankcount || !blankinterval) {
    751c:	a1 28 ee 03 00       	mov    0x3ee28,%eax
    7521:	85 c0                	test   %eax,%eax
    7523:	75 09                	jne    752e <do_timer+0x15>
    7525:	a1 24 ee 03 00       	mov    0x3ee24,%eax
    752a:	85 c0                	test   %eax,%eax
    752c:	75 30                	jne    755e <do_timer+0x45>
		if (blanked)
    752e:	a1 44 ee 02 00       	mov    0x2ee44,%eax
    7533:	85 c0                	test   %eax,%eax
    7535:	74 05                	je     753c <do_timer+0x23>
			unblank_screen();
    7537:	e8 2b 5f 01 00       	call   1d467 <unblank_screen>
		if (blankcount)
    753c:	a1 28 ee 03 00       	mov    0x3ee28,%eax
    7541:	85 c0                	test   %eax,%eax
    7543:	74 0d                	je     7552 <do_timer+0x39>
			blankcount--;
    7545:	a1 28 ee 03 00       	mov    0x3ee28,%eax
    754a:	83 e8 01             	sub    $0x1,%eax
    754d:	a3 28 ee 03 00       	mov    %eax,0x3ee28
		blanked = 0;
    7552:	c7 05 44 ee 02 00 00 	movl   $0x0,0x2ee44
    7559:	00 00 00 
    755c:	eb 18                	jmp    7576 <do_timer+0x5d>
	// 否则的话若黑屏标志末置位,则让屏幕黑屏,并且设置黑屏标志.
	} else if (!blanked) {
    755e:	a1 44 ee 02 00       	mov    0x2ee44,%eax
    7563:	85 c0                	test   %eax,%eax
    7565:	75 0f                	jne    7576 <do_timer+0x5d>
		blank_screen();
    7567:	e8 e6 5e 01 00       	call   1d452 <blank_screen>
		blanked = 1;
    756c:	c7 05 44 ee 02 00 01 	movl   $0x1,0x2ee44
    7573:	00 00 00 
	}
	// 接着处理硬盘操作超时问题.如果硬盘超时计数递减之后为0,则进行硬盘访问超时处理.
	if (hd_timeout)
    7576:	a1 84 11 03 00       	mov    0x31184,%eax
    757b:	85 c0                	test   %eax,%eax
    757d:	74 1b                	je     759a <do_timer+0x81>
		if (!--hd_timeout)
    757f:	a1 84 11 03 00       	mov    0x31184,%eax
    7584:	83 e8 01             	sub    $0x1,%eax
    7587:	a3 84 11 03 00       	mov    %eax,0x31184
    758c:	a1 84 11 03 00       	mov    0x31184,%eax
    7591:	85 c0                	test   %eax,%eax
    7593:	75 05                	jne    759a <do_timer+0x81>
			hd_times_out();							// 硬盘访问超时处理(blk_drv/hd.c).
    7595:	e8 bf 0b 01 00       	call   18159 <hd_times_out>

	// 如果发声计数次数到,则关闭发声.(向0x61口发送命令,复位位0和1.位0控制8253计数器2的工作,位1控制扬声器.
	if (beepcount)									// 扬声器发声时间滴答数(chr_drv/console.c)
    759a:	a1 2c ee 03 00       	mov    0x3ee2c,%eax
    759f:	85 c0                	test   %eax,%eax
    75a1:	74 1b                	je     75be <do_timer+0xa5>
		if (!--beepcount)
    75a3:	a1 2c ee 03 00       	mov    0x3ee2c,%eax
    75a8:	83 e8 01             	sub    $0x1,%eax
    75ab:	a3 2c ee 03 00       	mov    %eax,0x3ee2c
    75b0:	a1 2c ee 03 00       	mov    0x3ee2c,%eax
    75b5:	85 c0                	test   %eax,%eax
    75b7:	75 05                	jne    75be <do_timer+0xa5>
			sysbeepstop();
    75b9:	e8 46 5d 01 00       	call   1d304 <sysbeepstop>

	// 如果当前特权级(cpl)为0(最高,表示是内核程序在工作),则将内核代码时间stime递增;[Linus把内核程序统称为超级用户(superviser)的
	// 程序.这种称呼来自Intel CPU手册.]如果cpl>0,则表示是一般用户程序在工作,增加utime.
	if (cpl)
    75be:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    75c3:	74 16                	je     75db <do_timer+0xc2>
		current->utime++;
    75c5:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    75ca:	8b 90 e0 02 00 00    	mov    0x2e0(%eax),%edx
    75d0:	83 c2 01             	add    $0x1,%edx
    75d3:	89 90 e0 02 00 00    	mov    %edx,0x2e0(%eax)
    75d9:	eb 14                	jmp    75ef <do_timer+0xd6>
	else
		current->stime++;
    75db:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    75e0:	8b 90 e4 02 00 00    	mov    0x2e4(%eax),%edx
    75e6:	83 c2 01             	add    $0x1,%edx
    75e9:	89 90 e4 02 00 00    	mov    %edx,0x2e4(%eax)

	// 如果有定时器存在,则将链表第1个定时器的值减1.如果已等于0,则调用相应的处理程序,并将该处理程序指针置空.然后去掉该项定时器.next_timer是
	// 定时器链表的头指针.
	if (next_timer) {
    75ef:	a1 40 ee 02 00       	mov    0x2ee40,%eax
    75f4:	85 c0                	test   %eax,%eax
    75f6:	74 4d                	je     7645 <do_timer+0x12c>
		next_timer->jiffies--;
    75f8:	a1 40 ee 02 00       	mov    0x2ee40,%eax
    75fd:	8b 10                	mov    (%eax),%edx
    75ff:	83 ea 01             	sub    $0x1,%edx
    7602:	89 10                	mov    %edx,(%eax)
		while (next_timer && next_timer->jiffies <= 0) {
    7604:	eb 2b                	jmp    7631 <do_timer+0x118>
			void (*fn)(void);						// 这里插入了一个函数指针定义!!

			fn = next_timer->fn;
    7606:	a1 40 ee 02 00       	mov    0x2ee40,%eax
    760b:	8b 40 04             	mov    0x4(%eax),%eax
    760e:	89 44 24 0c          	mov    %eax,0xc(%esp)
			next_timer->fn = NULL;
    7612:	a1 40 ee 02 00       	mov    0x2ee40,%eax
    7617:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
			next_timer = next_timer->next;
    761e:	a1 40 ee 02 00       	mov    0x2ee40,%eax
    7623:	8b 40 08             	mov    0x8(%eax),%eax
    7626:	a3 40 ee 02 00       	mov    %eax,0x2ee40
			(fn)();									// 调用定时处理函数.
    762b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    762f:	ff d0                	call   *%eax

	// 如果有定时器存在,则将链表第1个定时器的值减1.如果已等于0,则调用相应的处理程序,并将该处理程序指针置空.然后去掉该项定时器.next_timer是
	// 定时器链表的头指针.
	if (next_timer) {
		next_timer->jiffies--;
		while (next_timer && next_timer->jiffies <= 0) {
    7631:	a1 40 ee 02 00       	mov    0x2ee40,%eax
    7636:	85 c0                	test   %eax,%eax
    7638:	74 0b                	je     7645 <do_timer+0x12c>
    763a:	a1 40 ee 02 00       	mov    0x2ee40,%eax
    763f:	8b 00                	mov    (%eax),%eax
    7641:	85 c0                	test   %eax,%eax
    7643:	7e c1                	jle    7606 <do_timer+0xed>
			next_timer = next_timer->next;
			(fn)();									// 调用定时处理函数.
		}
	}
	// 如果当前软盘控制器FDC的数字输出寄存器中马达启动位有置位的,则执行软盘定时程序.
	if (current_DOR & 0xf0)
    7645:	0f b6 05 c8 e2 02 00 	movzbl 0x2e2c8,%eax
    764c:	0f b6 c0             	movzbl %al,%eax
    764f:	25 f0 00 00 00       	and    $0xf0,%eax
    7654:	85 c0                	test   %eax,%eax
    7656:	74 05                	je     765d <do_timer+0x144>
		do_floppy_timer();
    7658:	e8 72 fc ff ff       	call   72cf <do_floppy_timer>
	// 如果进程运行时间还没完,则退出.否则置当前任务运行计数值为0.并且若发生时钟中断时正在内核代码中运行则返回,否则调用执行调试函数.
	if ((--current->counter) > 0) return;
    765d:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    7662:	8b 50 04             	mov    0x4(%eax),%edx
    7665:	83 ea 01             	sub    $0x1,%edx
    7668:	89 50 04             	mov    %edx,0x4(%eax)
    766b:	8b 40 04             	mov    0x4(%eax),%eax
    766e:	85 c0                	test   %eax,%eax
    7670:	7f 1a                	jg     768c <do_timer+0x173>
	current->counter = 0;
    7672:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    7677:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	if (!cpl) return;								// 对于内核态程序,不信赖counter值进行调试.
    767e:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    7683:	74 0a                	je     768f <do_timer+0x176>
	schedule();
    7685:	e8 bb f7 ff ff       	call   6e45 <schedule>
    768a:	eb 04                	jmp    7690 <do_timer+0x177>
	}
	// 如果当前软盘控制器FDC的数字输出寄存器中马达启动位有置位的,则执行软盘定时程序.
	if (current_DOR & 0xf0)
		do_floppy_timer();
	// 如果进程运行时间还没完,则退出.否则置当前任务运行计数值为0.并且若发生时钟中断时正在内核代码中运行则返回,否则调用执行调试函数.
	if ((--current->counter) > 0) return;
    768c:	90                   	nop
    768d:	eb 01                	jmp    7690 <do_timer+0x177>
	current->counter = 0;
	if (!cpl) return;								// 对于内核态程序,不信赖counter值进行调试.
    768f:	90                   	nop
	schedule();
}
    7690:	83 c4 1c             	add    $0x1c,%esp
    7693:	c3                   	ret    

00007694 <sys_alarm>:
// 进程数据结构中报警定时值alarm的单位是系统滴答（1滴答为10毫秒），它是系统开机起到设置定时操作时系统滴答值jiffies和转换成滴答
// 单位的定时值之和，即'jiffies + HZ*定时秒值'。而参数给出的是以秒为单位的定时值，因此本函数的主要操作是进行两个单位的转换。
// 其中常数HZ = 100,是内核系统运行频率。定义在inlucde/sched.h上。
// 参数seconds是新的定时时间值，单位是秒。
int sys_alarm(long seconds)
{
    7694:	83 ec 10             	sub    $0x10,%esp
	int old = current->alarm;
    7697:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    769c:	8b 80 dc 02 00 00    	mov    0x2dc(%eax),%eax
    76a2:	89 44 24 0c          	mov    %eax,0xc(%esp)

	if (old)
    76a6:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    76ab:	74 1d                	je     76ca <sys_alarm+0x36>
		old = (old - jiffies) / HZ;
    76ad:	8b 54 24 0c          	mov    0xc(%esp),%edx
    76b1:	a1 00 eb 02 00       	mov    0x2eb00,%eax
    76b6:	29 c2                	sub    %eax,%edx
    76b8:	89 d0                	mov    %edx,%eax
    76ba:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    76bf:	f7 e2                	mul    %edx
    76c1:	89 d0                	mov    %edx,%eax
    76c3:	c1 e8 05             	shr    $0x5,%eax
    76c6:	89 44 24 0c          	mov    %eax,0xc(%esp)
	current->alarm = (seconds>0)?(jiffies+HZ*seconds):0;
    76ca:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    76cf:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    76d4:	7e 13                	jle    76e9 <sys_alarm+0x55>
    76d6:	8b 54 24 14          	mov    0x14(%esp),%edx
    76da:	6b d2 64             	imul   $0x64,%edx,%edx
    76dd:	89 d1                	mov    %edx,%ecx
    76df:	8b 15 00 eb 02 00    	mov    0x2eb00,%edx
    76e5:	01 ca                	add    %ecx,%edx
    76e7:	eb 05                	jmp    76ee <sys_alarm+0x5a>
    76e9:	ba 00 00 00 00       	mov    $0x0,%edx
    76ee:	89 90 dc 02 00 00    	mov    %edx,0x2dc(%eax)
	return (old);
    76f4:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    76f8:	83 c4 10             	add    $0x10,%esp
    76fb:	c3                   	ret    

000076fc <sys_getpid>:

// 取当前进程号pid。
int sys_getpid(void)
{
	return current->pid;
    76fc:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    7701:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
}
    7707:	c3                   	ret    

00007708 <sys_getppid>:

// 取父进程号ppid。
int sys_getppid(void)
{
	return current->p_pptr->pid;
    7708:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    770d:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    7713:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
}
    7719:	c3                   	ret    

0000771a <sys_getuid>:

// 取用户uid。
int sys_getuid(void)
{
	return current->uid;
    771a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    771f:	0f b7 80 cc 02 00 00 	movzwl 0x2cc(%eax),%eax
    7726:	0f b7 c0             	movzwl %ax,%eax
}
    7729:	c3                   	ret    

0000772a <sys_geteuid>:

// 取有效的用户号euid。
int sys_geteuid(void)
{
	return current->euid;
    772a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    772f:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    7736:	0f b7 c0             	movzwl %ax,%eax
}
    7739:	c3                   	ret    

0000773a <sys_getgid>:

// 取组号gid。
int sys_getgid(void)
{
	return current->gid;
    773a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    773f:	0f b7 80 d2 02 00 00 	movzwl 0x2d2(%eax),%eax
    7746:	0f b7 c0             	movzwl %ax,%eax
}
    7749:	c3                   	ret    

0000774a <sys_getegid>:

// 取有效的组号egid。
int sys_getegid(void)
{
	return current->egid;
    774a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    774f:	0f b7 80 d4 02 00 00 	movzwl 0x2d4(%eax),%eax
    7756:	0f b7 c0             	movzwl %ax,%eax
}
    7759:	c3                   	ret    

0000775a <sys_nice>:

// 系统调用功能 -- 降低对CPU的使用优先权（有人会用吗？）。
// 应该限制increment为大于0的值，否则可使优先仅增大！！
int sys_nice(long increment)
{
	if (current->priority-increment > 0)
    775a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    775f:	8b 40 08             	mov    0x8(%eax),%eax
    7762:	2b 44 24 04          	sub    0x4(%esp),%eax
    7766:	85 c0                	test   %eax,%eax
    7768:	7e 15                	jle    777f <sys_nice+0x25>
		current->priority -= increment;
    776a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    776f:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    7775:	8b 52 08             	mov    0x8(%edx),%edx
    7778:	2b 54 24 04          	sub    0x4(%esp),%edx
    777c:	89 50 08             	mov    %edx,0x8(%eax)
	return 0;
    777f:	b8 00 00 00 00       	mov    $0x0,%eax
}
    7784:	c3                   	ret    

00007785 <sched_init>:

// 内核调度程序的初始化子程序
void sched_init(void)
{
    7785:	55                   	push   %ebp
    7786:	57                   	push   %edi
    7787:	56                   	push   %esi
    7788:	53                   	push   %ebx
    7789:	83 ec 10             	sub    $0x10,%esp
		panic("Struct sigaction MUST be 16 bytes");
	// 在全局描述符表中设置初始任务(任务0)的任务状态段描述符和局部数据表描述符.
	// FIRST_TSS_ENTRY和FIRST_LDT_ENTRY的值分别是4和5,定义在include/linux/sched.h中.gdt是一个描述符表数组(include/linux/head.h),
	// 实际上对应程序head.s中的他已描述符表基址(gdt).因此gdt+FIRST_TSS_ENTRY即为gdt[FIRST_TSS_ENTRY](即是gdt[4]),即gdt数组第4项的地址
	// 参见include/asm/system.h
	set_tss_desc(gdt + FIRST_TSS_ENTRY, &(init_task.task.tss));
    778c:	ba d8 5c 00 00       	mov    $0x5cd8,%edx
    7791:	b9 da 5c 00 00       	mov    $0x5cda,%ecx
    7796:	bb dc 5c 00 00       	mov    $0x5cdc,%ebx
    779b:	be dd 5c 00 00       	mov    $0x5cdd,%esi
    77a0:	bf de 5c 00 00       	mov    $0x5cde,%edi
    77a5:	bd df 5c 00 00       	mov    $0x5cdf,%ebp
    77aa:	b8 50 d5 02 00       	mov    $0x2d550,%eax
    77af:	66 c7 02 68 00       	movw   $0x68,(%edx)
    77b4:	66 89 01             	mov    %ax,(%ecx)
    77b7:	c1 c8 10             	ror    $0x10,%eax
    77ba:	88 03                	mov    %al,(%ebx)
    77bc:	c6 06 89             	movb   $0x89,(%esi)
    77bf:	c6 07 00             	movb   $0x0,(%edi)
    77c2:	88 65 00             	mov    %ah,0x0(%ebp)
    77c5:	c1 c8 10             	ror    $0x10,%eax
	set_ldt_desc(gdt + FIRST_LDT_ENTRY, &(init_task.task.ldt));
    77c8:	ba e0 5c 00 00       	mov    $0x5ce0,%edx
    77cd:	b9 e2 5c 00 00       	mov    $0x5ce2,%ecx
    77d2:	bb e4 5c 00 00       	mov    $0x5ce4,%ebx
    77d7:	be e5 5c 00 00       	mov    $0x5ce5,%esi
    77dc:	bf e6 5c 00 00       	mov    $0x5ce6,%edi
    77e1:	bd e7 5c 00 00       	mov    $0x5ce7,%ebp
    77e6:	b8 38 d5 02 00       	mov    $0x2d538,%eax
    77eb:	66 c7 02 68 00       	movw   $0x68,(%edx)
    77f0:	66 89 01             	mov    %ax,(%ecx)
    77f3:	c1 c8 10             	ror    $0x10,%eax
    77f6:	88 03                	mov    %al,(%ebx)
    77f8:	c6 06 82             	movb   $0x82,(%esi)
    77fb:	c6 07 00             	movb   $0x0,(%edi)
    77fe:	88 65 00             	mov    %ah,0x0(%ebp)
    7801:	c1 c8 10             	ror    $0x10,%eax
	// 清任务数组和描述符表项(注意i=1开始,所以初始任务的描述符还在).描述符项结构定义在文件include/linux/head.h中.
	p = gdt + 2 + FIRST_TSS_ENTRY;
    7804:	c7 44 24 08 e8 5c 00 	movl   $0x5ce8,0x8(%esp)
    780b:	00 
	// 初始化除进程一以外的其他进程指针
	for(i = 1; i < NR_TASKS; i++) {
    780c:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
    7813:	00 
    7814:	eb 4e                	jmp    7864 <sched_init+0xdf>
		task[i] = NULL;
    7816:	8b 44 24 0c          	mov    0xc(%esp),%eax
    781a:	c7 04 85 c0 e1 02 00 	movl   $0x0,0x2e1c0(,%eax,4)
    7821:	00 00 00 00 
		p->a = p->b = 0;
    7825:	8b 44 24 08          	mov    0x8(%esp),%eax
    7829:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    7830:	8b 44 24 08          	mov    0x8(%esp),%eax
    7834:	8b 50 04             	mov    0x4(%eax),%edx
    7837:	8b 44 24 08          	mov    0x8(%esp),%eax
    783b:	89 10                	mov    %edx,(%eax)
		p++;
    783d:	83 44 24 08 08       	addl   $0x8,0x8(%esp)
		p->a = p->b = 0;
    7842:	8b 44 24 08          	mov    0x8(%esp),%eax
    7846:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    784d:	8b 44 24 08          	mov    0x8(%esp),%eax
    7851:	8b 50 04             	mov    0x4(%eax),%edx
    7854:	8b 44 24 08          	mov    0x8(%esp),%eax
    7858:	89 10                	mov    %edx,(%eax)
		p++;
    785a:	83 44 24 08 08       	addl   $0x8,0x8(%esp)
	set_tss_desc(gdt + FIRST_TSS_ENTRY, &(init_task.task.tss));
	set_ldt_desc(gdt + FIRST_LDT_ENTRY, &(init_task.task.ldt));
	// 清任务数组和描述符表项(注意i=1开始,所以初始任务的描述符还在).描述符项结构定义在文件include/linux/head.h中.
	p = gdt + 2 + FIRST_TSS_ENTRY;
	// 初始化除进程一以外的其他进程指针
	for(i = 1; i < NR_TASKS; i++) {
    785f:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    7864:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    7869:	7e ab                	jle    7816 <sched_init+0x91>
	}
	/* Clear NT, so that we won't have troubles with that later on */
	/* 清除标志寄存器中的位NT,这样以后就不会有麻烦 */
	// EFLAGS中的NT标志位用于控制任务的嵌套调用.当NT位置位时,那么当前中断任务执行IRET指令时就会引起任务切换.NT指出TSS中的back_link字段是否有效.
	// NT=0时无效.
	__asm__("pushfl ; andl $0xffffbfff,(%esp) ; popfl");
    786b:	9c                   	pushf  
    786c:	81 24 24 ff bf ff ff 	andl   $0xffffbfff,(%esp)
    7873:	9d                   	popf   
	// 将任务0的TSS段选择符加载到任务寄存器tr.将局部描述符表段选择符加载到局部描述符表寄存器ldtr中.注意!!是将GDT中相应LDT描述符的选择符加载到ldtr.
	// 只明确加这一次,以后新任务LDT的加载,是CPU根据TSS中的LDT项自动加载.
	ltr(0);								// 定义在include/linux/sched.h
    7874:	b8 20 00 00 00       	mov    $0x20,%eax
    7879:	0f 00 d8             	ltr    %ax
	lldt(0);							// 其中参数(0)是任务号.
    787c:	b8 28 00 00 00       	mov    $0x28,%eax
    7881:	0f 00 d0             	lldt   %ax
	// 下面代码用于初始化8253定时器.通道0,选择工作方式3,二进制计数方式.通道0的输出引脚接在中断控制主芯片的IRQ0上,它每10毫秒发出一个IRQ0请求.
	// LATCH是初始定时计数值.
	outb_p(0x36, 0x43);					/* binary, mode 3, LSB/MSB, ch 0 */
    7884:	b8 36 00 00 00       	mov    $0x36,%eax
    7889:	ba 43 00 00 00       	mov    $0x43,%edx
    788e:	ee                   	out    %al,(%dx)
    788f:	eb 00                	jmp    7891 <sched_init+0x10c>
    7891:	eb 00                	jmp    7893 <sched_init+0x10e>
	outb_p(LATCH & 0xff , 0x40);		/* LSB */	// 定时值低字节
    7893:	b8 9b 00 00 00       	mov    $0x9b,%eax
    7898:	ba 40 00 00 00       	mov    $0x40,%edx
    789d:	ee                   	out    %al,(%dx)
    789e:	eb 00                	jmp    78a0 <sched_init+0x11b>
    78a0:	eb 00                	jmp    78a2 <sched_init+0x11d>
	outb(LATCH >> 8 , 0x40);			/* MSB */	// 定时值高字节
    78a2:	b8 2e 00 00 00       	mov    $0x2e,%eax
    78a7:	ba 40 00 00 00       	mov    $0x40,%edx
    78ac:	ee                   	out    %al,(%dx)
	// 设置时钟中断处理程序句柄(设置时钟中断门).修改中断控制器屏蔽码,允许时钟中断.
	// 然后设置系统调用中断门.这两个设置中断描述衔表IDT中描述符的宏定义在文件include/asm/system.h中.两者的区别参见system.h文件开始处的说明.
	set_intr_gate(0x20, &timer_interrupt);
    78ad:	b9 b8 55 00 00       	mov    $0x55b8,%ecx
    78b2:	bb bc 55 00 00       	mov    $0x55bc,%ebx
    78b7:	ba 20 7a 00 00       	mov    $0x7a20,%edx
    78bc:	b8 00 00 08 00       	mov    $0x80000,%eax
    78c1:	66 89 d0             	mov    %dx,%ax
    78c4:	66 ba 00 8e          	mov    $0x8e00,%dx
    78c8:	89 01                	mov    %eax,(%ecx)
    78ca:	89 13                	mov    %edx,(%ebx)
	outb(inb_p(0x21) & ~0x01, 0x21);
    78cc:	b8 21 00 00 00       	mov    $0x21,%eax
    78d1:	89 c2                	mov    %eax,%edx
    78d3:	ec                   	in     (%dx),%al
    78d4:	eb 00                	jmp    78d6 <sched_init+0x151>
    78d6:	eb 00                	jmp    78d8 <sched_init+0x153>
    78d8:	88 44 24 07          	mov    %al,0x7(%esp)
    78dc:	0f b6 44 24 07       	movzbl 0x7(%esp),%eax
    78e1:	0f b6 c0             	movzbl %al,%eax
    78e4:	83 e0 fe             	and    $0xfffffffe,%eax
    78e7:	ba 21 00 00 00       	mov    $0x21,%edx
    78ec:	ee                   	out    %al,(%dx)
	set_system_gate(0x80, &system_call);
    78ed:	b9 b8 58 00 00       	mov    $0x58b8,%ecx
    78f2:	bb bc 58 00 00       	mov    $0x58bc,%ebx
    78f7:	ba 28 79 00 00       	mov    $0x7928,%edx
    78fc:	b8 00 00 08 00       	mov    $0x80000,%eax
    7901:	66 89 d0             	mov    %dx,%ax
    7904:	66 ba 00 ef          	mov    $0xef00,%dx
    7908:	89 01                	mov    %eax,(%ecx)
    790a:	89 13                	mov    %edx,(%ebx)
}
    790c:	90                   	nop
    790d:	83 c4 10             	add    $0x10,%esp
    7910:	5b                   	pop    %ebx
    7911:	5e                   	pop    %esi
    7912:	5f                   	pop    %edi
    7913:	5d                   	pop    %ebp
    7914:	c3                   	ret    
    7915:	66 90                	xchg   %ax,%ax
    7917:	90                   	nop

00007918 <bad_sys_call>:
    7918:	6a da                	push   $0xffffffda
    791a:	eb 50                	jmp    796c <ret_from_sys_call>

0000791c <reschedule>:
    791c:	68 6c 79 00 00       	push   $0x796c
    7921:	e9 1f f5 ff ff       	jmp    6e45 <schedule>
    7926:	66 90                	xchg   %ax,%ax

00007928 <system_call>:
    7928:	1e                   	push   %ds
    7929:	06                   	push   %es
    792a:	0f a0                	push   %fs
    792c:	50                   	push   %eax
    792d:	52                   	push   %edx
    792e:	51                   	push   %ecx
    792f:	53                   	push   %ebx
    7930:	ba 10 00 00 00       	mov    $0x10,%edx
    7935:	8e da                	mov    %edx,%ds
    7937:	8e c2                	mov    %edx,%es
    7939:	ba 17 00 00 00       	mov    $0x17,%edx
    793e:	8e e2                	mov    %edx,%fs
    7940:	3b 05 9c d1 02 00    	cmp    0x2d19c,%eax
    7946:	73 d0                	jae    7918 <bad_sys_call>
    7948:	8b 1c 85 40 d0 02 00 	mov    0x2d040(,%eax,4),%ebx
    794f:	83 fb 00             	cmp    $0x0,%ebx
    7952:	75 05                	jne    7959 <sys_call>
    7954:	e8 0d 2a 00 00       	call   a366 <sys_default>

00007959 <sys_call>:
    7959:	ff d3                	call   *%ebx
    795b:	50                   	push   %eax
    795c:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    7961:	83 38 00             	cmpl   $0x0,(%eax)
    7964:	75 b6                	jne    791c <reschedule>
    7966:	83 78 04 00          	cmpl   $0x0,0x4(%eax)
    796a:	74 b0                	je     791c <reschedule>

0000796c <ret_from_sys_call>:
    796c:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    7971:	3b 05 c0 e1 02 00    	cmp    0x2e1c0,%eax
    7977:	74 34                	je     79ad <ret_from_sys_call+0x41>
    7979:	66 83 7c 24 24 0f    	cmpw   $0xf,0x24(%esp)
    797f:	75 2c                	jne    79ad <ret_from_sys_call+0x41>
    7981:	66 83 7c 24 30 17    	cmpw   $0x17,0x30(%esp)
    7987:	75 24                	jne    79ad <ret_from_sys_call+0x41>
    7989:	8b 58 0c             	mov    0xc(%eax),%ebx
    798c:	8b 88 10 02 00 00    	mov    0x210(%eax),%ecx
    7992:	f7 d1                	not    %ecx
    7994:	21 d9                	and    %ebx,%ecx
    7996:	0f bc c9             	bsf    %ecx,%ecx
    7999:	74 12                	je     79ad <ret_from_sys_call+0x41>
    799b:	0f b3 cb             	btr    %ecx,%ebx
    799e:	89 58 0c             	mov    %ebx,0xc(%eax)
    79a1:	41                   	inc    %ecx
    79a2:	51                   	push   %ecx
    79a3:	e8 12 3f 00 00       	call   b8ba <do_signal>
    79a8:	59                   	pop    %ecx
    79a9:	85 c0                	test   %eax,%eax
    79ab:	75 af                	jne    795c <sys_call+0x3>
    79ad:	58                   	pop    %eax
    79ae:	5b                   	pop    %ebx
    79af:	59                   	pop    %ecx
    79b0:	5a                   	pop    %edx
    79b1:	83 c4 04             	add    $0x4,%esp
    79b4:	0f a1                	pop    %fs
    79b6:	07                   	pop    %es
    79b7:	1f                   	pop    %ds
    79b8:	cf                   	iret   
    79b9:	8d 76 00             	lea    0x0(%esi),%esi

000079bc <coprocessor_error>:
    79bc:	1e                   	push   %ds
    79bd:	06                   	push   %es
    79be:	0f a0                	push   %fs
    79c0:	6a ff                	push   $0xffffffff
    79c2:	52                   	push   %edx
    79c3:	51                   	push   %ecx
    79c4:	53                   	push   %ebx
    79c5:	50                   	push   %eax
    79c6:	b8 10 00 00 00       	mov    $0x10,%eax
    79cb:	8e d8                	mov    %eax,%ds
    79cd:	8e c0                	mov    %eax,%es
    79cf:	b8 17 00 00 00       	mov    $0x17,%eax
    79d4:	8e e0                	mov    %eax,%fs
    79d6:	68 6c 79 00 00       	push   $0x796c
    79db:	e9 44 91 01 00       	jmp    20b24 <math_error>

000079e0 <device_not_available>:
    79e0:	1e                   	push   %ds
    79e1:	06                   	push   %es
    79e2:	0f a0                	push   %fs
    79e4:	6a ff                	push   $0xffffffff
    79e6:	52                   	push   %edx
    79e7:	51                   	push   %ecx
    79e8:	53                   	push   %ebx
    79e9:	50                   	push   %eax
    79ea:	b8 10 00 00 00       	mov    $0x10,%eax
    79ef:	8e d8                	mov    %eax,%ds
    79f1:	8e c0                	mov    %eax,%es
    79f3:	b8 17 00 00 00       	mov    $0x17,%eax
    79f8:	8e e0                	mov    %eax,%fs
    79fa:	68 6c 79 00 00       	push   $0x796c
    79ff:	0f 06                	clts   
    7a01:	0f 20 c0             	mov    %cr0,%eax
    7a04:	a9 04 00 00 00       	test   $0x4,%eax
    7a09:	0f 84 d6 f3 ff ff    	je     6de5 <math_state_restore>
    7a0f:	55                   	push   %ebp
    7a10:	56                   	push   %esi
    7a11:	57                   	push   %edi
    7a12:	6a 00                	push   $0x0
    7a14:	e8 15 8f 01 00       	call   2092e <math_emulate>
    7a19:	83 c4 04             	add    $0x4,%esp
    7a1c:	5f                   	pop    %edi
    7a1d:	5e                   	pop    %esi
    7a1e:	5d                   	pop    %ebp
    7a1f:	c3                   	ret    

00007a20 <timer_interrupt>:
    7a20:	1e                   	push   %ds
    7a21:	06                   	push   %es
    7a22:	0f a0                	push   %fs
    7a24:	6a ff                	push   $0xffffffff
    7a26:	52                   	push   %edx
    7a27:	51                   	push   %ecx
    7a28:	53                   	push   %ebx
    7a29:	50                   	push   %eax
    7a2a:	b8 10 00 00 00       	mov    $0x10,%eax
    7a2f:	8e d8                	mov    %eax,%ds
    7a31:	8e c0                	mov    %eax,%es
    7a33:	b8 17 00 00 00       	mov    $0x17,%eax
    7a38:	8e e0                	mov    %eax,%fs
    7a3a:	ff 05 00 eb 02 00    	incl   0x2eb00
    7a40:	b0 20                	mov    $0x20,%al
    7a42:	e6 20                	out    %al,$0x20
    7a44:	8b 44 24 24          	mov    0x24(%esp),%eax
    7a48:	83 e0 03             	and    $0x3,%eax
    7a4b:	50                   	push   %eax
    7a4c:	e8 c8 fa ff ff       	call   7519 <do_timer>
    7a51:	83 c4 04             	add    $0x4,%esp
    7a54:	e9 13 ff ff ff       	jmp    796c <ret_from_sys_call>
    7a59:	8d 76 00             	lea    0x0(%esi),%esi

00007a5c <sys_execve>:
    7a5c:	8d 44 24 20          	lea    0x20(%esp),%eax
    7a60:	50                   	push   %eax
    7a61:	e8 f0 9d 00 00       	call   11856 <do_execve>
    7a66:	83 c4 04             	add    $0x4,%esp
    7a69:	c3                   	ret    
    7a6a:	66 90                	xchg   %ax,%ax

00007a6c <sys_fork>:
    7a6c:	e8 e7 10 00 00       	call   8b58 <find_empty_process>
    7a71:	85 c0                	test   %eax,%eax
    7a73:	78 0e                	js     7a83 <sys_fork+0x17>
    7a75:	0f a8                	push   %gs
    7a77:	56                   	push   %esi
    7a78:	57                   	push   %edi
    7a79:	55                   	push   %ebp
    7a7a:	50                   	push   %eax
    7a7b:	e8 7b 0b 00 00       	call   85fb <copy_process>
    7a80:	83 c4 14             	add    $0x14,%esp
    7a83:	c3                   	ret    

00007a84 <hd_interrupt>:
    7a84:	50                   	push   %eax
    7a85:	51                   	push   %ecx
    7a86:	52                   	push   %edx
    7a87:	1e                   	push   %ds
    7a88:	06                   	push   %es
    7a89:	0f a0                	push   %fs
    7a8b:	b8 10 00 00 00       	mov    $0x10,%eax
    7a90:	8e d8                	mov    %eax,%ds
    7a92:	8e c0                	mov    %eax,%es
    7a94:	b8 17 00 00 00       	mov    $0x17,%eax
    7a99:	8e e0                	mov    %eax,%fs
    7a9b:	b0 20                	mov    $0x20,%al
    7a9d:	e6 a0                	out    %al,$0xa0
    7a9f:	eb 00                	jmp    7aa1 <hd_interrupt+0x1d>
    7aa1:	eb 00                	jmp    7aa3 <hd_interrupt+0x1f>
    7aa3:	31 d2                	xor    %edx,%edx
    7aa5:	89 15 84 11 03 00    	mov    %edx,0x31184
    7aab:	87 15 80 11 03 00    	xchg   %edx,0x31180
    7ab1:	85 d2                	test   %edx,%edx
    7ab3:	75 05                	jne    7aba <hd_interrupt+0x36>
    7ab5:	ba 96 7f 01 00       	mov    $0x17f96,%edx
    7aba:	e6 20                	out    %al,$0x20
    7abc:	ff d2                	call   *%edx
    7abe:	0f a1                	pop    %fs
    7ac0:	07                   	pop    %es
    7ac1:	1f                   	pop    %ds
    7ac2:	5a                   	pop    %edx
    7ac3:	59                   	pop    %ecx
    7ac4:	58                   	pop    %eax
    7ac5:	cf                   	iret   

00007ac6 <floppy_interrupt>:
    7ac6:	50                   	push   %eax
    7ac7:	51                   	push   %ecx
    7ac8:	52                   	push   %edx
    7ac9:	1e                   	push   %ds
    7aca:	06                   	push   %es
    7acb:	0f a0                	push   %fs
    7acd:	b8 10 00 00 00       	mov    $0x10,%eax
    7ad2:	8e d8                	mov    %eax,%ds
    7ad4:	8e c0                	mov    %eax,%es
    7ad6:	b8 17 00 00 00       	mov    $0x17,%eax
    7adb:	8e e0                	mov    %eax,%fs
    7add:	b0 20                	mov    $0x20,%al
    7adf:	e6 20                	out    %al,$0x20
    7ae1:	31 c0                	xor    %eax,%eax
    7ae3:	87 05 54 11 03 00    	xchg   %eax,0x31154
    7ae9:	85 c0                	test   %eax,%eax
    7aeb:	75 05                	jne    7af2 <floppy_interrupt+0x2c>
    7aed:	b8 03 72 01 00       	mov    $0x17203,%eax
    7af2:	ff d0                	call   *%eax
    7af4:	0f a1                	pop    %fs
    7af6:	07                   	pop    %es
    7af7:	1f                   	pop    %ds
    7af8:	5a                   	pop    %edx
    7af9:	59                   	pop    %ecx
    7afa:	58                   	pop    %eax
    7afb:	cf                   	iret   

00007afc <parallel_interrupt>:
    7afc:	50                   	push   %eax
    7afd:	b0 20                	mov    $0x20,%al
    7aff:	e6 20                	out    %al,$0x20
    7b01:	58                   	pop    %eax
    7b02:	cf                   	iret   

00007b03 <die>:
void alignment_check(void);					// int46(kernel/asm.s)

// 该子程序用来打印出错中断的名称,出错号,调用程序的EIP,EFLAGS,ESP,fs段寄存器值,段的基址,段的长度,进程号pid,任务号,10字节指令码.如果
// 堆栈在用户数据段,则还打印16字节堆栈内容.这些信息可用于程序调试.
static void die(char * str, long esp_ptr, long nr)
{
    7b03:	56                   	push   %esi
    7b04:	53                   	push   %ebx
    7b05:	83 ec 14             	sub    $0x14,%esp
	long * esp = (long *) esp_ptr;
    7b08:	8b 44 24 24          	mov    0x24(%esp),%eax
    7b0c:	89 44 24 08          	mov    %eax,0x8(%esp)
	int i;

	printk("%s: %04x\n\r",str, nr & 0xffff);
    7b10:	8b 44 24 28          	mov    0x28(%esp),%eax
    7b14:	0f b7 c0             	movzwl %ax,%eax
    7b17:	83 ec 04             	sub    $0x4,%esp
    7b1a:	50                   	push   %eax
    7b1b:	ff 74 24 28          	pushl  0x28(%esp)
    7b1f:	68 b8 2b 02 00       	push   $0x22bb8
    7b24:	e8 1e 11 00 00       	call   8c47 <printk>
    7b29:	83 c4 10             	add    $0x10,%esp
	// 下行打印语句显示当前调用进程的CS:EIP,EFLAGS和SS:ESP的值.
	// (1) EIP:\t%04x:%p\n	-- esp[1]是段选择符(cs),esp[0]是eip
	// (2) EFLAGS:\t%p	-- esp[2]是eflags
	// (2) ESP:\t%04x:%p\n	-- esp[4]是原ss,esp[3]是原esp
	printk("EIP:\t%04x:%p\nEFLAGS:\t%p\nESP:\t%04x:%p\n",
		esp[1], esp[0], esp[2], esp[4], esp[3]);
    7b2c:	8b 44 24 08          	mov    0x8(%esp),%eax
    7b30:	83 c0 0c             	add    $0xc,%eax
	printk("%s: %04x\n\r",str, nr & 0xffff);
	// 下行打印语句显示当前调用进程的CS:EIP,EFLAGS和SS:ESP的值.
	// (1) EIP:\t%04x:%p\n	-- esp[1]是段选择符(cs),esp[0]是eip
	// (2) EFLAGS:\t%p	-- esp[2]是eflags
	// (2) ESP:\t%04x:%p\n	-- esp[4]是原ss,esp[3]是原esp
	printk("EIP:\t%04x:%p\nEFLAGS:\t%p\nESP:\t%04x:%p\n",
    7b33:	8b 30                	mov    (%eax),%esi
		esp[1], esp[0], esp[2], esp[4], esp[3]);
    7b35:	8b 44 24 08          	mov    0x8(%esp),%eax
    7b39:	83 c0 10             	add    $0x10,%eax
	printk("%s: %04x\n\r",str, nr & 0xffff);
	// 下行打印语句显示当前调用进程的CS:EIP,EFLAGS和SS:ESP的值.
	// (1) EIP:\t%04x:%p\n	-- esp[1]是段选择符(cs),esp[0]是eip
	// (2) EFLAGS:\t%p	-- esp[2]是eflags
	// (2) ESP:\t%04x:%p\n	-- esp[4]是原ss,esp[3]是原esp
	printk("EIP:\t%04x:%p\nEFLAGS:\t%p\nESP:\t%04x:%p\n",
    7b3c:	8b 18                	mov    (%eax),%ebx
		esp[1], esp[0], esp[2], esp[4], esp[3]);
    7b3e:	8b 44 24 08          	mov    0x8(%esp),%eax
    7b42:	83 c0 08             	add    $0x8,%eax
	printk("%s: %04x\n\r",str, nr & 0xffff);
	// 下行打印语句显示当前调用进程的CS:EIP,EFLAGS和SS:ESP的值.
	// (1) EIP:\t%04x:%p\n	-- esp[1]是段选择符(cs),esp[0]是eip
	// (2) EFLAGS:\t%p	-- esp[2]是eflags
	// (2) ESP:\t%04x:%p\n	-- esp[4]是原ss,esp[3]是原esp
	printk("EIP:\t%04x:%p\nEFLAGS:\t%p\nESP:\t%04x:%p\n",
    7b45:	8b 08                	mov    (%eax),%ecx
    7b47:	8b 44 24 08          	mov    0x8(%esp),%eax
    7b4b:	8b 10                	mov    (%eax),%edx
		esp[1], esp[0], esp[2], esp[4], esp[3]);
    7b4d:	8b 44 24 08          	mov    0x8(%esp),%eax
    7b51:	83 c0 04             	add    $0x4,%eax
	printk("%s: %04x\n\r",str, nr & 0xffff);
	// 下行打印语句显示当前调用进程的CS:EIP,EFLAGS和SS:ESP的值.
	// (1) EIP:\t%04x:%p\n	-- esp[1]是段选择符(cs),esp[0]是eip
	// (2) EFLAGS:\t%p	-- esp[2]是eflags
	// (2) ESP:\t%04x:%p\n	-- esp[4]是原ss,esp[3]是原esp
	printk("EIP:\t%04x:%p\nEFLAGS:\t%p\nESP:\t%04x:%p\n",
    7b54:	8b 00                	mov    (%eax),%eax
    7b56:	83 ec 08             	sub    $0x8,%esp
    7b59:	56                   	push   %esi
    7b5a:	53                   	push   %ebx
    7b5b:	51                   	push   %ecx
    7b5c:	52                   	push   %edx
    7b5d:	50                   	push   %eax
    7b5e:	68 c4 2b 02 00       	push   $0x22bc4
    7b63:	e8 df 10 00 00       	call   8c47 <printk>
    7b68:	83 c4 20             	add    $0x20,%esp
		esp[1], esp[0], esp[2], esp[4], esp[3]);
	printk("fs: %04x\n", _fs());
    7b6b:	66 8c e0             	mov    %fs,%ax
    7b6e:	89 c3                	mov    %eax,%ebx
    7b70:	89 d8                	mov    %ebx,%eax
    7b72:	0f b7 c0             	movzwl %ax,%eax
    7b75:	83 ec 08             	sub    $0x8,%esp
    7b78:	50                   	push   %eax
    7b79:	68 ea 2b 02 00       	push   $0x22bea
    7b7e:	e8 c4 10 00 00       	call   8c47 <printk>
    7b83:	83 c4 10             	add    $0x10,%esp
	printk("base: %p, limit: %p\n", get_base(current->ldt[1]), get_limit(0x17));
    7b86:	b8 17 00 00 00       	mov    $0x17,%eax
    7b8b:	0f 03 c0             	lsl    %ax,%eax
    7b8e:	40                   	inc    %eax
    7b8f:	89 44 24 04          	mov    %eax,0x4(%esp)
    7b93:	8b 4c 24 04          	mov    0x4(%esp),%ecx
    7b97:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    7b9c:	05 a0 03 00 00       	add    $0x3a0,%eax
    7ba1:	83 c0 02             	add    $0x2,%eax
    7ba4:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    7baa:	81 c2 a0 03 00 00    	add    $0x3a0,%edx
    7bb0:	8d 72 04             	lea    0x4(%edx),%esi
    7bb3:	8b 1d a0 e1 02 00    	mov    0x2e1a0,%ebx
    7bb9:	81 c3 a0 03 00 00    	add    $0x3a0,%ebx
    7bbf:	83 c3 07             	add    $0x7,%ebx
    7bc2:	8a 33                	mov    (%ebx),%dh
    7bc4:	8a 16                	mov    (%esi),%dl
    7bc6:	c1 e2 10             	shl    $0x10,%edx
    7bc9:	66 8b 10             	mov    (%eax),%dx
    7bcc:	89 d0                	mov    %edx,%eax
    7bce:	89 04 24             	mov    %eax,(%esp)
    7bd1:	8b 04 24             	mov    (%esp),%eax
    7bd4:	83 ec 04             	sub    $0x4,%esp
    7bd7:	51                   	push   %ecx
    7bd8:	50                   	push   %eax
    7bd9:	68 f4 2b 02 00       	push   $0x22bf4
    7bde:	e8 64 10 00 00       	call   8c47 <printk>
    7be3:	83 c4 10             	add    $0x10,%esp
	if (esp[4] == 0x17) {						// 或原ss值为0x17(用户栈),则还打印出用户栈的4个长字值(16字节).
    7be6:	8b 44 24 08          	mov    0x8(%esp),%eax
    7bea:	83 c0 10             	add    $0x10,%eax
    7bed:	8b 00                	mov    (%eax),%eax
    7bef:	83 f8 17             	cmp    $0x17,%eax
    7bf2:	75 71                	jne    7c65 <die+0x162>
		printk("Stack: ");
    7bf4:	83 ec 0c             	sub    $0xc,%esp
    7bf7:	68 09 2c 02 00       	push   $0x22c09
    7bfc:	e8 46 10 00 00       	call   8c47 <printk>
    7c01:	83 c4 10             	add    $0x10,%esp
		for (i = 0; i < 4; i++)
    7c04:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    7c0b:	00 
    7c0c:	eb 40                	jmp    7c4e <die+0x14b>
			printk("%p ", get_seg_long(0x17, i + (long *)esp[3]));
    7c0e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7c12:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    7c19:	8b 44 24 08          	mov    0x8(%esp),%eax
    7c1d:	83 c0 0c             	add    $0xc,%eax
    7c20:	8b 00                	mov    (%eax),%eax
    7c22:	01 d0                	add    %edx,%eax
    7c24:	89 c2                	mov    %eax,%edx
    7c26:	b8 17 00 00 00       	mov    $0x17,%eax
    7c2b:	0f a0                	push   %fs
    7c2d:	8e e0                	mov    %eax,%fs
    7c2f:	64 8b 02             	mov    %fs:(%edx),%eax
    7c32:	0f a1                	pop    %fs
    7c34:	89 c3                	mov    %eax,%ebx
    7c36:	89 d8                	mov    %ebx,%eax
    7c38:	83 ec 08             	sub    $0x8,%esp
    7c3b:	50                   	push   %eax
    7c3c:	68 11 2c 02 00       	push   $0x22c11
    7c41:	e8 01 10 00 00       	call   8c47 <printk>
    7c46:	83 c4 10             	add    $0x10,%esp
		esp[1], esp[0], esp[2], esp[4], esp[3]);
	printk("fs: %04x\n", _fs());
	printk("base: %p, limit: %p\n", get_base(current->ldt[1]), get_limit(0x17));
	if (esp[4] == 0x17) {						// 或原ss值为0x17(用户栈),则还打印出用户栈的4个长字值(16字节).
		printk("Stack: ");
		for (i = 0; i < 4; i++)
    7c49:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    7c4e:	83 7c 24 0c 03       	cmpl   $0x3,0xc(%esp)
    7c53:	7e b9                	jle    7c0e <die+0x10b>
			printk("%p ", get_seg_long(0x17, i + (long *)esp[3]));
		printk("\n");
    7c55:	83 ec 0c             	sub    $0xc,%esp
    7c58:	68 15 2c 02 00       	push   $0x22c15
    7c5d:	e8 e5 0f 00 00       	call   8c47 <printk>
    7c62:	83 c4 10             	add    $0x10,%esp
	}
	str(i);										// 取当前运行任务的任务号(include/linux/sched.h).
    7c65:	b8 00 00 00 00       	mov    $0x0,%eax
    7c6a:	66 0f 00 c8          	str    %ax
    7c6e:	83 e8 20             	sub    $0x20,%eax
    7c71:	c1 e8 04             	shr    $0x4,%eax
    7c74:	89 44 24 0c          	mov    %eax,0xc(%esp)
	printk("Pid: %d, process nr: %d\n\r", current->pid, 0xffff & i);
    7c78:	8b 44 24 0c          	mov    0xc(%esp),%eax
    7c7c:	0f b7 d0             	movzwl %ax,%edx
    7c7f:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    7c84:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    7c8a:	83 ec 04             	sub    $0x4,%esp
    7c8d:	52                   	push   %edx
    7c8e:	50                   	push   %eax
    7c8f:	68 17 2c 02 00       	push   $0x22c17
    7c94:	e8 ae 0f 00 00       	call   8c47 <printk>
    7c99:	83 c4 10             	add    $0x10,%esp
                        						// 进程号,任务号.
	for(i = 0; i < 10; i++)
    7c9c:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    7ca3:	00 
    7ca4:	eb 40                	jmp    7ce6 <die+0x1e3>
		printk("%02x ", 0xff & get_seg_byte(esp[1], (i+(char *)esp[0])));
    7ca6:	8b 44 24 08          	mov    0x8(%esp),%eax
    7caa:	83 c0 04             	add    $0x4,%eax
    7cad:	8b 00                	mov    (%eax),%eax
    7caf:	8b 54 24 08          	mov    0x8(%esp),%edx
    7cb3:	8b 12                	mov    (%edx),%edx
    7cb5:	89 d1                	mov    %edx,%ecx
    7cb7:	8b 54 24 0c          	mov    0xc(%esp),%edx
    7cbb:	01 ca                	add    %ecx,%edx
    7cbd:	0f a0                	push   %fs
    7cbf:	8e e0                	mov    %eax,%fs
    7cc1:	64 8a 02             	mov    %fs:(%edx),%al
    7cc4:	0f a1                	pop    %fs
    7cc6:	89 c3                	mov    %eax,%ebx
    7cc8:	89 d8                	mov    %ebx,%eax
    7cca:	0f be c0             	movsbl %al,%eax
    7ccd:	0f b6 c0             	movzbl %al,%eax
    7cd0:	83 ec 08             	sub    $0x8,%esp
    7cd3:	50                   	push   %eax
    7cd4:	68 31 2c 02 00       	push   $0x22c31
    7cd9:	e8 69 0f 00 00       	call   8c47 <printk>
    7cde:	83 c4 10             	add    $0x10,%esp
		printk("\n");
	}
	str(i);										// 取当前运行任务的任务号(include/linux/sched.h).
	printk("Pid: %d, process nr: %d\n\r", current->pid, 0xffff & i);
                        						// 进程号,任务号.
	for(i = 0; i < 10; i++)
    7ce1:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    7ce6:	83 7c 24 0c 09       	cmpl   $0x9,0xc(%esp)
    7ceb:	7e b9                	jle    7ca6 <die+0x1a3>
		printk("%02x ", 0xff & get_seg_byte(esp[1], (i+(char *)esp[0])));
	printk("\n\r");
    7ced:	83 ec 0c             	sub    $0xc,%esp
    7cf0:	68 37 2c 02 00       	push   $0x22c37
    7cf5:	e8 4d 0f 00 00       	call   8c47 <printk>
    7cfa:	83 c4 10             	add    $0x10,%esp
	do_exit(11);								/* play segment exception */
    7cfd:	83 ec 0c             	sub    $0xc,%esp
    7d00:	6a 0b                	push   $0xb
    7d02:	e8 e3 30 00 00       	call   adea <do_exit>
    7d07:	83 c4 10             	add    $0x10,%esp
}
    7d0a:	90                   	nop
    7d0b:	83 c4 14             	add    $0x14,%esp
    7d0e:	5b                   	pop    %ebx
    7d0f:	5e                   	pop    %esi
    7d10:	c3                   	ret    

00007d11 <do_double_fault>:

// 以下这些以do_开头的函数是asm.s中对应中断处理程序调用的C函数.
void do_double_fault(long esp, long error_code)
{
    7d11:	83 ec 0c             	sub    $0xc,%esp
	die("double fault", esp, error_code);
    7d14:	83 ec 04             	sub    $0x4,%esp
    7d17:	ff 74 24 18          	pushl  0x18(%esp)
    7d1b:	ff 74 24 18          	pushl  0x18(%esp)
    7d1f:	68 3a 2c 02 00       	push   $0x22c3a
    7d24:	e8 da fd ff ff       	call   7b03 <die>
    7d29:	83 c4 10             	add    $0x10,%esp
}
    7d2c:	90                   	nop
    7d2d:	83 c4 0c             	add    $0xc,%esp
    7d30:	c3                   	ret    

00007d31 <do_general_protection>:

void do_general_protection(long esp, long error_code)
{
    7d31:	83 ec 0c             	sub    $0xc,%esp
	die("general protection", esp, error_code);
    7d34:	83 ec 04             	sub    $0x4,%esp
    7d37:	ff 74 24 18          	pushl  0x18(%esp)
    7d3b:	ff 74 24 18          	pushl  0x18(%esp)
    7d3f:	68 47 2c 02 00       	push   $0x22c47
    7d44:	e8 ba fd ff ff       	call   7b03 <die>
    7d49:	83 c4 10             	add    $0x10,%esp
}
    7d4c:	90                   	nop
    7d4d:	83 c4 0c             	add    $0xc,%esp
    7d50:	c3                   	ret    

00007d51 <do_alignment_check>:

void do_alignment_check(long esp, long error_code)
{
    7d51:	83 ec 0c             	sub    $0xc,%esp
    die("alignment check", esp, error_code);
    7d54:	83 ec 04             	sub    $0x4,%esp
    7d57:	ff 74 24 18          	pushl  0x18(%esp)
    7d5b:	ff 74 24 18          	pushl  0x18(%esp)
    7d5f:	68 5a 2c 02 00       	push   $0x22c5a
    7d64:	e8 9a fd ff ff       	call   7b03 <die>
    7d69:	83 c4 10             	add    $0x10,%esp
}
    7d6c:	90                   	nop
    7d6d:	83 c4 0c             	add    $0xc,%esp
    7d70:	c3                   	ret    

00007d71 <do_divide_error>:

void do_divide_error(long esp, long error_code)
{
    7d71:	83 ec 0c             	sub    $0xc,%esp
	die("divide error", esp, error_code);
    7d74:	83 ec 04             	sub    $0x4,%esp
    7d77:	ff 74 24 18          	pushl  0x18(%esp)
    7d7b:	ff 74 24 18          	pushl  0x18(%esp)
    7d7f:	68 6a 2c 02 00       	push   $0x22c6a
    7d84:	e8 7a fd ff ff       	call   7b03 <die>
    7d89:	83 c4 10             	add    $0x10,%esp
}
    7d8c:	90                   	nop
    7d8d:	83 c4 0c             	add    $0xc,%esp
    7d90:	c3                   	ret    

00007d91 <do_int3>:
// 参数是进入中断后被顺序压入堆栈的寄存器值.参见asm.s程序.
void do_int3(long * esp, long error_code,
		long fs, long es, long ds,
		long ebp, long esi, long edi,
		long edx, long ecx, long ebx, long eax)
{
    7d91:	83 ec 1c             	sub    $0x1c,%esp
	int tr;

	__asm__("str %%ax":"=a" (tr):"0" (0));		// 取任务寄存器值->tr
    7d94:	b8 00 00 00 00       	mov    $0x0,%eax
    7d99:	66 0f 00 c8          	str    %ax
    7d9d:	89 44 24 0c          	mov    %eax,0xc(%esp)
	printk("eax\t\tebx\t\tecx\t\tedx\n\r%8x\t%8x\t%8x\t%8x\n\r",
    7da1:	83 ec 0c             	sub    $0xc,%esp
    7da4:	ff 74 24 4c          	pushl  0x4c(%esp)
    7da8:	ff 74 24 54          	pushl  0x54(%esp)
    7dac:	ff 74 24 5c          	pushl  0x5c(%esp)
    7db0:	ff 74 24 64          	pushl  0x64(%esp)
    7db4:	68 78 2c 02 00       	push   $0x22c78
    7db9:	e8 89 0e 00 00       	call   8c47 <printk>
    7dbe:	83 c4 20             	add    $0x20,%esp
		eax, ebx, ecx, edx);
	printk("esi\t\tedi\t\tebp\t\tesp\n\r%8x\t%8x\t%8x\t%8x\n\r",
    7dc1:	8b 44 24 20          	mov    0x20(%esp),%eax
    7dc5:	83 ec 0c             	sub    $0xc,%esp
    7dc8:	50                   	push   %eax
    7dc9:	ff 74 24 44          	pushl  0x44(%esp)
    7dcd:	ff 74 24 50          	pushl  0x50(%esp)
    7dd1:	ff 74 24 50          	pushl  0x50(%esp)
    7dd5:	68 a0 2c 02 00       	push   $0x22ca0
    7dda:	e8 68 0e 00 00       	call   8c47 <printk>
    7ddf:	83 c4 20             	add    $0x20,%esp
		esi, edi, ebp, (long) esp);
	printk("\n\rds\tes\tfs\ttr\n\r%4x\t%4x\t%4x\t%4x\n\r",
    7de2:	83 ec 0c             	sub    $0xc,%esp
    7de5:	ff 74 24 18          	pushl  0x18(%esp)
    7de9:	ff 74 24 38          	pushl  0x38(%esp)
    7ded:	ff 74 24 40          	pushl  0x40(%esp)
    7df1:	ff 74 24 48          	pushl  0x48(%esp)
    7df5:	68 c8 2c 02 00       	push   $0x22cc8
    7dfa:	e8 48 0e 00 00       	call   8c47 <printk>
    7dff:	83 c4 20             	add    $0x20,%esp
		ds, es, fs, tr);
	printk("EIP: %8x   CS: %4x  EFLAGS: %8x\n\r", esp[0], esp[1], esp[2]);
    7e02:	8b 44 24 20          	mov    0x20(%esp),%eax
    7e06:	83 c0 08             	add    $0x8,%eax
    7e09:	8b 08                	mov    (%eax),%ecx
    7e0b:	8b 44 24 20          	mov    0x20(%esp),%eax
    7e0f:	83 c0 04             	add    $0x4,%eax
    7e12:	8b 10                	mov    (%eax),%edx
    7e14:	8b 44 24 20          	mov    0x20(%esp),%eax
    7e18:	8b 00                	mov    (%eax),%eax
    7e1a:	51                   	push   %ecx
    7e1b:	52                   	push   %edx
    7e1c:	50                   	push   %eax
    7e1d:	68 ec 2c 02 00       	push   $0x22cec
    7e22:	e8 20 0e 00 00       	call   8c47 <printk>
    7e27:	83 c4 10             	add    $0x10,%esp
}
    7e2a:	90                   	nop
    7e2b:	83 c4 1c             	add    $0x1c,%esp
    7e2e:	c3                   	ret    

00007e2f <do_nmi>:

void do_nmi(long esp, long error_code)
{
    7e2f:	83 ec 0c             	sub    $0xc,%esp
	die("nmi", esp, error_code);
    7e32:	83 ec 04             	sub    $0x4,%esp
    7e35:	ff 74 24 18          	pushl  0x18(%esp)
    7e39:	ff 74 24 18          	pushl  0x18(%esp)
    7e3d:	68 0e 2d 02 00       	push   $0x22d0e
    7e42:	e8 bc fc ff ff       	call   7b03 <die>
    7e47:	83 c4 10             	add    $0x10,%esp
}
    7e4a:	90                   	nop
    7e4b:	83 c4 0c             	add    $0xc,%esp
    7e4e:	c3                   	ret    

00007e4f <do_debug>:

void do_debug(long esp, long error_code)
{
    7e4f:	83 ec 0c             	sub    $0xc,%esp
	die("debug", esp, error_code);
    7e52:	83 ec 04             	sub    $0x4,%esp
    7e55:	ff 74 24 18          	pushl  0x18(%esp)
    7e59:	ff 74 24 18          	pushl  0x18(%esp)
    7e5d:	68 12 2d 02 00       	push   $0x22d12
    7e62:	e8 9c fc ff ff       	call   7b03 <die>
    7e67:	83 c4 10             	add    $0x10,%esp
}
    7e6a:	90                   	nop
    7e6b:	83 c4 0c             	add    $0xc,%esp
    7e6e:	c3                   	ret    

00007e6f <do_overflow>:

void do_overflow(long esp, long error_code)
{
    7e6f:	83 ec 0c             	sub    $0xc,%esp
	die("overflow", esp, error_code);
    7e72:	83 ec 04             	sub    $0x4,%esp
    7e75:	ff 74 24 18          	pushl  0x18(%esp)
    7e79:	ff 74 24 18          	pushl  0x18(%esp)
    7e7d:	68 18 2d 02 00       	push   $0x22d18
    7e82:	e8 7c fc ff ff       	call   7b03 <die>
    7e87:	83 c4 10             	add    $0x10,%esp
}
    7e8a:	90                   	nop
    7e8b:	83 c4 0c             	add    $0xc,%esp
    7e8e:	c3                   	ret    

00007e8f <do_bounds>:

void do_bounds(long esp, long error_code)
{
    7e8f:	83 ec 0c             	sub    $0xc,%esp
	die("bounds", esp, error_code);
    7e92:	83 ec 04             	sub    $0x4,%esp
    7e95:	ff 74 24 18          	pushl  0x18(%esp)
    7e99:	ff 74 24 18          	pushl  0x18(%esp)
    7e9d:	68 21 2d 02 00       	push   $0x22d21
    7ea2:	e8 5c fc ff ff       	call   7b03 <die>
    7ea7:	83 c4 10             	add    $0x10,%esp
}
    7eaa:	90                   	nop
    7eab:	83 c4 0c             	add    $0xc,%esp
    7eae:	c3                   	ret    

00007eaf <do_invalid_op>:

void do_invalid_op(long esp, long error_code)
{
    7eaf:	83 ec 0c             	sub    $0xc,%esp
	die("invalid operand", esp, error_code);
    7eb2:	83 ec 04             	sub    $0x4,%esp
    7eb5:	ff 74 24 18          	pushl  0x18(%esp)
    7eb9:	ff 74 24 18          	pushl  0x18(%esp)
    7ebd:	68 28 2d 02 00       	push   $0x22d28
    7ec2:	e8 3c fc ff ff       	call   7b03 <die>
    7ec7:	83 c4 10             	add    $0x10,%esp
}
    7eca:	90                   	nop
    7ecb:	83 c4 0c             	add    $0xc,%esp
    7ece:	c3                   	ret    

00007ecf <do_device_not_available>:

void do_device_not_available(long esp, long error_code)
{
    7ecf:	83 ec 0c             	sub    $0xc,%esp
	die("device not available", esp, error_code);
    7ed2:	83 ec 04             	sub    $0x4,%esp
    7ed5:	ff 74 24 18          	pushl  0x18(%esp)
    7ed9:	ff 74 24 18          	pushl  0x18(%esp)
    7edd:	68 38 2d 02 00       	push   $0x22d38
    7ee2:	e8 1c fc ff ff       	call   7b03 <die>
    7ee7:	83 c4 10             	add    $0x10,%esp
}
    7eea:	90                   	nop
    7eeb:	83 c4 0c             	add    $0xc,%esp
    7eee:	c3                   	ret    

00007eef <do_coprocessor_segment_overrun>:

void do_coprocessor_segment_overrun(long esp, long error_code)
{
    7eef:	83 ec 0c             	sub    $0xc,%esp
	die("coprocessor segment overrun", esp, error_code);
    7ef2:	83 ec 04             	sub    $0x4,%esp
    7ef5:	ff 74 24 18          	pushl  0x18(%esp)
    7ef9:	ff 74 24 18          	pushl  0x18(%esp)
    7efd:	68 4d 2d 02 00       	push   $0x22d4d
    7f02:	e8 fc fb ff ff       	call   7b03 <die>
    7f07:	83 c4 10             	add    $0x10,%esp
}
    7f0a:	90                   	nop
    7f0b:	83 c4 0c             	add    $0xc,%esp
    7f0e:	c3                   	ret    

00007f0f <do_invalid_TSS>:

void do_invalid_TSS(long esp, long error_code)
{
    7f0f:	83 ec 0c             	sub    $0xc,%esp
	die("invalid TSS", esp, error_code);
    7f12:	83 ec 04             	sub    $0x4,%esp
    7f15:	ff 74 24 18          	pushl  0x18(%esp)
    7f19:	ff 74 24 18          	pushl  0x18(%esp)
    7f1d:	68 69 2d 02 00       	push   $0x22d69
    7f22:	e8 dc fb ff ff       	call   7b03 <die>
    7f27:	83 c4 10             	add    $0x10,%esp
}
    7f2a:	90                   	nop
    7f2b:	83 c4 0c             	add    $0xc,%esp
    7f2e:	c3                   	ret    

00007f2f <do_segment_not_present>:

void do_segment_not_present(long esp, long error_code)
{
    7f2f:	83 ec 0c             	sub    $0xc,%esp
	die("segment not present", esp, error_code);
    7f32:	83 ec 04             	sub    $0x4,%esp
    7f35:	ff 74 24 18          	pushl  0x18(%esp)
    7f39:	ff 74 24 18          	pushl  0x18(%esp)
    7f3d:	68 75 2d 02 00       	push   $0x22d75
    7f42:	e8 bc fb ff ff       	call   7b03 <die>
    7f47:	83 c4 10             	add    $0x10,%esp
}
    7f4a:	90                   	nop
    7f4b:	83 c4 0c             	add    $0xc,%esp
    7f4e:	c3                   	ret    

00007f4f <do_stack_segment>:

void do_stack_segment(long esp, long error_code)
{
    7f4f:	83 ec 0c             	sub    $0xc,%esp
	die("stack segment", esp, error_code);
    7f52:	83 ec 04             	sub    $0x4,%esp
    7f55:	ff 74 24 18          	pushl  0x18(%esp)
    7f59:	ff 74 24 18          	pushl  0x18(%esp)
    7f5d:	68 89 2d 02 00       	push   $0x22d89
    7f62:	e8 9c fb ff ff       	call   7b03 <die>
    7f67:	83 c4 10             	add    $0x10,%esp
}
    7f6a:	90                   	nop
    7f6b:	83 c4 0c             	add    $0xc,%esp
    7f6e:	c3                   	ret    

00007f6f <do_coprocessor_error>:

void do_coprocessor_error(long esp, long error_code)
{
    7f6f:	83 ec 0c             	sub    $0xc,%esp
	if (last_task_used_math != current)
    7f72:	8b 15 0c eb 02 00    	mov    0x2eb0c,%edx
    7f78:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    7f7d:	39 c2                	cmp    %eax,%edx
    7f7f:	75 1a                	jne    7f9b <do_coprocessor_error+0x2c>
		return;
	die("coprocessor error", esp, error_code);
    7f81:	83 ec 04             	sub    $0x4,%esp
    7f84:	ff 74 24 18          	pushl  0x18(%esp)
    7f88:	ff 74 24 18          	pushl  0x18(%esp)
    7f8c:	68 97 2d 02 00       	push   $0x22d97
    7f91:	e8 6d fb ff ff       	call   7b03 <die>
    7f96:	83 c4 10             	add    $0x10,%esp
    7f99:	eb 01                	jmp    7f9c <do_coprocessor_error+0x2d>
}

void do_coprocessor_error(long esp, long error_code)
{
	if (last_task_used_math != current)
		return;
    7f9b:	90                   	nop
	die("coprocessor error", esp, error_code);
}
    7f9c:	83 c4 0c             	add    $0xc,%esp
    7f9f:	c3                   	ret    

00007fa0 <do_reserved>:

void do_reserved(long esp, long error_code)
{
    7fa0:	83 ec 0c             	sub    $0xc,%esp
	die("reserved (15,17-47) error", esp, error_code);
    7fa3:	83 ec 04             	sub    $0x4,%esp
    7fa6:	ff 74 24 18          	pushl  0x18(%esp)
    7faa:	ff 74 24 18          	pushl  0x18(%esp)
    7fae:	68 a9 2d 02 00       	push   $0x22da9
    7fb3:	e8 4b fb ff ff       	call   7b03 <die>
    7fb8:	83 c4 10             	add    $0x10,%esp
}
    7fbb:	90                   	nop
    7fbc:	83 c4 0c             	add    $0xc,%esp
    7fbf:	c3                   	ret    

00007fc0 <trap_init>:
// 下面是异常(陷阱)中断程序初始化子程序.设置它们的中断调用门(中断向量).
// set_trap_gate()与set_system_gate()都使用了中断描述符表IDT中的陷阱门(Trap Gate),它们之间的主要区别在于前者设置的特权级为0,
// 后者是3.因此断点陷阱中断int3,溢出中断overflow和边界出错中断bounds可以由任何程序调用.这两个函数均是嵌入式汇编宏程序,参见
// include/asm/system.h
void trap_init(void)
{
    7fc0:	53                   	push   %ebx
    7fc1:	83 ec 10             	sub    $0x10,%esp
	int i;

	set_trap_gate(0, &divide_error);							// 设置除操作出错的中断向量值.
    7fc4:	b9 b8 54 00 00       	mov    $0x54b8,%ecx
    7fc9:	bb bc 54 00 00       	mov    $0x54bc,%ebx
    7fce:	ba c7 82 00 00       	mov    $0x82c7,%edx
    7fd3:	b8 00 00 08 00       	mov    $0x80000,%eax
    7fd8:	66 89 d0             	mov    %dx,%ax
    7fdb:	66 ba 00 8f          	mov    $0x8f00,%dx
    7fdf:	89 01                	mov    %eax,(%ecx)
    7fe1:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(1, &debug);
    7fe3:	b9 c0 54 00 00       	mov    $0x54c0,%ecx
    7fe8:	bb c4 54 00 00       	mov    $0x54c4,%ebx
    7fed:	ba fc 82 00 00       	mov    $0x82fc,%edx
    7ff2:	b8 00 00 08 00       	mov    $0x80000,%eax
    7ff7:	66 89 d0             	mov    %dx,%ax
    7ffa:	66 ba 00 8f          	mov    $0x8f00,%dx
    7ffe:	89 01                	mov    %eax,(%ecx)
    8000:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(2, &nmi);
    8002:	b9 c8 54 00 00       	mov    $0x54c8,%ecx
    8007:	bb cc 54 00 00       	mov    $0x54cc,%ebx
    800c:	ba 03 83 00 00       	mov    $0x8303,%edx
    8011:	b8 00 00 08 00       	mov    $0x80000,%eax
    8016:	66 89 d0             	mov    %dx,%ax
    8019:	66 ba 00 8f          	mov    $0x8f00,%dx
    801d:	89 01                	mov    %eax,(%ecx)
    801f:	89 13                	mov    %edx,(%ebx)
	set_system_gate(3, &int3);									/* int3-5 can be called from all */
    8021:	b9 d0 54 00 00       	mov    $0x54d0,%ecx
    8026:	bb d4 54 00 00       	mov    $0x54d4,%ebx
    802b:	ba 0a 83 00 00       	mov    $0x830a,%edx
    8030:	b8 00 00 08 00       	mov    $0x80000,%eax
    8035:	66 89 d0             	mov    %dx,%ax
    8038:	66 ba 00 ef          	mov    $0xef00,%dx
    803c:	89 01                	mov    %eax,(%ecx)
    803e:	89 13                	mov    %edx,(%ebx)
	set_system_gate(4, &overflow);
    8040:	b9 d8 54 00 00       	mov    $0x54d8,%ecx
    8045:	bb dc 54 00 00       	mov    $0x54dc,%ebx
    804a:	ba 11 83 00 00       	mov    $0x8311,%edx
    804f:	b8 00 00 08 00       	mov    $0x80000,%eax
    8054:	66 89 d0             	mov    %dx,%ax
    8057:	66 ba 00 ef          	mov    $0xef00,%dx
    805b:	89 01                	mov    %eax,(%ecx)
    805d:	89 13                	mov    %edx,(%ebx)
	set_system_gate(5, &bounds);
    805f:	b9 e0 54 00 00       	mov    $0x54e0,%ecx
    8064:	bb e4 54 00 00       	mov    $0x54e4,%ebx
    8069:	ba 18 83 00 00       	mov    $0x8318,%edx
    806e:	b8 00 00 08 00       	mov    $0x80000,%eax
    8073:	66 89 d0             	mov    %dx,%ax
    8076:	66 ba 00 ef          	mov    $0xef00,%dx
    807a:	89 01                	mov    %eax,(%ecx)
    807c:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(6, &invalid_op);
    807e:	b9 e8 54 00 00       	mov    $0x54e8,%ecx
    8083:	bb ec 54 00 00       	mov    $0x54ec,%ebx
    8088:	ba 1f 83 00 00       	mov    $0x831f,%edx
    808d:	b8 00 00 08 00       	mov    $0x80000,%eax
    8092:	66 89 d0             	mov    %dx,%ax
    8095:	66 ba 00 8f          	mov    $0x8f00,%dx
    8099:	89 01                	mov    %eax,(%ecx)
    809b:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(7, &device_not_available);					// 函数未实现
    809d:	b9 f0 54 00 00       	mov    $0x54f0,%ecx
    80a2:	bb f4 54 00 00       	mov    $0x54f4,%ebx
    80a7:	ba e0 79 00 00       	mov    $0x79e0,%edx
    80ac:	b8 00 00 08 00       	mov    $0x80000,%eax
    80b1:	66 89 d0             	mov    %dx,%ax
    80b4:	66 ba 00 8f          	mov    $0x8f00,%dx
    80b8:	89 01                	mov    %eax,(%ecx)
    80ba:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(8, &double_fault);
    80bc:	b9 f8 54 00 00       	mov    $0x54f8,%ecx
    80c1:	bb fc 54 00 00       	mov    $0x54fc,%ebx
    80c6:	ba 49 83 00 00       	mov    $0x8349,%edx
    80cb:	b8 00 00 08 00       	mov    $0x80000,%eax
    80d0:	66 89 d0             	mov    %dx,%ax
    80d3:	66 ba 00 8f          	mov    $0x8f00,%dx
    80d7:	89 01                	mov    %eax,(%ecx)
    80d9:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(9, &coprocessor_segment_overrun);
    80db:	b9 00 55 00 00       	mov    $0x5500,%ecx
    80e0:	bb 04 55 00 00       	mov    $0x5504,%ebx
    80e5:	ba 26 83 00 00       	mov    $0x8326,%edx
    80ea:	b8 00 00 08 00       	mov    $0x80000,%eax
    80ef:	66 89 d0             	mov    %dx,%ax
    80f2:	66 ba 00 8f          	mov    $0x8f00,%dx
    80f6:	89 01                	mov    %eax,(%ecx)
    80f8:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(10, &invalid_TSS);
    80fa:	b9 08 55 00 00       	mov    $0x5508,%ecx
    80ff:	bb 0c 55 00 00       	mov    $0x550c,%ebx
    8104:	ba 80 83 00 00       	mov    $0x8380,%edx
    8109:	b8 00 00 08 00       	mov    $0x80000,%eax
    810e:	66 89 d0             	mov    %dx,%ax
    8111:	66 ba 00 8f          	mov    $0x8f00,%dx
    8115:	89 01                	mov    %eax,(%ecx)
    8117:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(11, &segment_not_present);
    8119:	b9 10 55 00 00       	mov    $0x5510,%ecx
    811e:	bb 14 55 00 00       	mov    $0x5514,%ebx
    8123:	ba 87 83 00 00       	mov    $0x8387,%edx
    8128:	b8 00 00 08 00       	mov    $0x80000,%eax
    812d:	66 89 d0             	mov    %dx,%ax
    8130:	66 ba 00 8f          	mov    $0x8f00,%dx
    8134:	89 01                	mov    %eax,(%ecx)
    8136:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(12, &stack_segment);
    8138:	b9 18 55 00 00       	mov    $0x5518,%ecx
    813d:	bb 1c 55 00 00       	mov    $0x551c,%ebx
    8142:	ba 8e 83 00 00       	mov    $0x838e,%edx
    8147:	b8 00 00 08 00       	mov    $0x80000,%eax
    814c:	66 89 d0             	mov    %dx,%ax
    814f:	66 ba 00 8f          	mov    $0x8f00,%dx
    8153:	89 01                	mov    %eax,(%ecx)
    8155:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(13, &general_protection);
    8157:	b9 20 55 00 00       	mov    $0x5520,%ecx
    815c:	bb 24 55 00 00       	mov    $0x5524,%ebx
    8161:	ba 95 83 00 00       	mov    $0x8395,%edx
    8166:	b8 00 00 08 00       	mov    $0x80000,%eax
    816b:	66 89 d0             	mov    %dx,%ax
    816e:	66 ba 00 8f          	mov    $0x8f00,%dx
    8172:	89 01                	mov    %eax,(%ecx)
    8174:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(14, &page_fault);
    8176:	b9 28 55 00 00       	mov    $0x5528,%ecx
    817b:	bb 2c 55 00 00       	mov    $0x552c,%ebx
    8180:	ba dd d2 00 00       	mov    $0xd2dd,%edx
    8185:	b8 00 00 08 00       	mov    $0x80000,%eax
    818a:	66 89 d0             	mov    %dx,%ax
    818d:	66 ba 00 8f          	mov    $0x8f00,%dx
    8191:	89 01                	mov    %eax,(%ecx)
    8193:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(15, &reserved);
    8195:	b9 30 55 00 00       	mov    $0x5530,%ecx
    819a:	bb 34 55 00 00       	mov    $0x5534,%ebx
    819f:	ba 2d 83 00 00       	mov    $0x832d,%edx
    81a4:	b8 00 00 08 00       	mov    $0x80000,%eax
    81a9:	66 89 d0             	mov    %dx,%ax
    81ac:	66 ba 00 8f          	mov    $0x8f00,%dx
    81b0:	89 01                	mov    %eax,(%ecx)
    81b2:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(16, &coprocessor_error);						// 函数未实现
    81b4:	b9 38 55 00 00       	mov    $0x5538,%ecx
    81b9:	bb 3c 55 00 00       	mov    $0x553c,%ebx
    81be:	ba bc 79 00 00       	mov    $0x79bc,%edx
    81c3:	b8 00 00 08 00       	mov    $0x80000,%eax
    81c8:	66 89 d0             	mov    %dx,%ax
    81cb:	66 ba 00 8f          	mov    $0x8f00,%dx
    81cf:	89 01                	mov    %eax,(%ecx)
    81d1:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(17, &alignment_check);
    81d3:	b9 40 55 00 00       	mov    $0x5540,%ecx
    81d8:	bb 44 55 00 00       	mov    $0x5544,%ebx
    81dd:	ba 9c 83 00 00       	mov    $0x839c,%edx
    81e2:	b8 00 00 08 00       	mov    $0x80000,%eax
    81e7:	66 89 d0             	mov    %dx,%ax
    81ea:	66 ba 00 8f          	mov    $0x8f00,%dx
    81ee:	89 01                	mov    %eax,(%ecx)
    81f0:	89 13                	mov    %edx,(%ebx)
	// 下面把int17-47的陷阱门先均设置为reserved,以后各硬件初始化时会重新设置自己的陷阱门.
	for (i = 18; i < 48; i++)
    81f2:	c7 44 24 0c 12 00 00 	movl   $0x12,0xc(%esp)
    81f9:	00 
    81fa:	eb 36                	jmp    8232 <trap_init+0x272>
		set_trap_gate(i, &reserved);
    81fc:	8b 44 24 0c          	mov    0xc(%esp),%eax
    8200:	c1 e0 03             	shl    $0x3,%eax
    8203:	8d 88 b8 54 00 00    	lea    0x54b8(%eax),%ecx
    8209:	8b 44 24 0c          	mov    0xc(%esp),%eax
    820d:	c1 e0 03             	shl    $0x3,%eax
    8210:	05 b8 54 00 00       	add    $0x54b8,%eax
    8215:	8d 58 04             	lea    0x4(%eax),%ebx
    8218:	ba 2d 83 00 00       	mov    $0x832d,%edx
    821d:	b8 00 00 08 00       	mov    $0x80000,%eax
    8222:	66 89 d0             	mov    %dx,%ax
    8225:	66 ba 00 8f          	mov    $0x8f00,%dx
    8229:	89 01                	mov    %eax,(%ecx)
    822b:	89 13                	mov    %edx,(%ebx)
	set_trap_gate(14, &page_fault);
	set_trap_gate(15, &reserved);
	set_trap_gate(16, &coprocessor_error);						// 函数未实现
	set_trap_gate(17, &alignment_check);
	// 下面把int17-47的陷阱门先均设置为reserved,以后各硬件初始化时会重新设置自己的陷阱门.
	for (i = 18; i < 48; i++)
    822d:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    8232:	83 7c 24 0c 2f       	cmpl   $0x2f,0xc(%esp)
    8237:	7e c3                	jle    81fc <trap_init+0x23c>
		set_trap_gate(i, &reserved);
	// 设置协处理器中断0x2d(45)陷阱门描述符,并允许其产生中断请求.设置并行口中断描述符.
	set_trap_gate(45, &irq13);
    8239:	b9 20 56 00 00       	mov    $0x5620,%ecx
    823e:	bb 24 56 00 00       	mov    $0x5624,%ebx
    8243:	ba 34 83 00 00       	mov    $0x8334,%edx
    8248:	b8 00 00 08 00       	mov    $0x80000,%eax
    824d:	66 89 d0             	mov    %dx,%ax
    8250:	66 ba 00 8f          	mov    $0x8f00,%dx
    8254:	89 01                	mov    %eax,(%ecx)
    8256:	89 13                	mov    %edx,(%ebx)
	outb_p(inb_p(0x21)&0xfb, 0x21);								// 允许8259A主芯片的IRQ2中断请求(连接从芯片)
    8258:	b8 21 00 00 00       	mov    $0x21,%eax
    825d:	89 c2                	mov    %eax,%edx
    825f:	ec                   	in     (%dx),%al
    8260:	eb 00                	jmp    8262 <trap_init+0x2a2>
    8262:	eb 00                	jmp    8264 <trap_init+0x2a4>
    8264:	88 44 24 0b          	mov    %al,0xb(%esp)
    8268:	0f b6 44 24 0b       	movzbl 0xb(%esp),%eax
    826d:	0f b6 c0             	movzbl %al,%eax
    8270:	25 fb 00 00 00       	and    $0xfb,%eax
    8275:	ba 21 00 00 00       	mov    $0x21,%edx
    827a:	ee                   	out    %al,(%dx)
    827b:	eb 00                	jmp    827d <trap_init+0x2bd>
    827d:	eb 00                	jmp    827f <trap_init+0x2bf>
	outb(inb_p(0xA1)&0xdf, 0xA1);								// 允许8259A从芯片的IRQ13中断请求(协处理器中断)
    827f:	b8 a1 00 00 00       	mov    $0xa1,%eax
    8284:	89 c2                	mov    %eax,%edx
    8286:	ec                   	in     (%dx),%al
    8287:	eb 00                	jmp    8289 <trap_init+0x2c9>
    8289:	eb 00                	jmp    828b <trap_init+0x2cb>
    828b:	88 44 24 0a          	mov    %al,0xa(%esp)
    828f:	0f b6 44 24 0a       	movzbl 0xa(%esp),%eax
    8294:	0f b6 c0             	movzbl %al,%eax
    8297:	25 df 00 00 00       	and    $0xdf,%eax
    829c:	ba a1 00 00 00       	mov    $0xa1,%edx
    82a1:	ee                   	out    %al,(%dx)
	set_trap_gate(39, &parallel_interrupt);						// 设置并行口1的中断0x27陷阱门描述符.
    82a2:	b9 f0 55 00 00       	mov    $0x55f0,%ecx
    82a7:	bb f4 55 00 00       	mov    $0x55f4,%ebx
    82ac:	ba fc 7a 00 00       	mov    $0x7afc,%edx
    82b1:	b8 00 00 08 00       	mov    $0x80000,%eax
    82b6:	66 89 d0             	mov    %dx,%ax
    82b9:	66 ba 00 8f          	mov    $0x8f00,%dx
    82bd:	89 01                	mov    %eax,(%ecx)
    82bf:	89 13                	mov    %edx,(%ebx)
}
    82c1:	90                   	nop
    82c2:	83 c4 10             	add    $0x10,%esp
    82c5:	5b                   	pop    %ebx
    82c6:	c3                   	ret    

000082c7 <divide_error>:
    82c7:	68 71 7d 00 00       	push   $0x7d71

000082cc <no_error_code>:
    82cc:	87 04 24             	xchg   %eax,(%esp)
    82cf:	53                   	push   %ebx
    82d0:	51                   	push   %ecx
    82d1:	52                   	push   %edx
    82d2:	57                   	push   %edi
    82d3:	56                   	push   %esi
    82d4:	55                   	push   %ebp
    82d5:	1e                   	push   %ds
    82d6:	06                   	push   %es
    82d7:	0f a0                	push   %fs
    82d9:	6a 00                	push   $0x0
    82db:	8d 54 24 2c          	lea    0x2c(%esp),%edx
    82df:	52                   	push   %edx
    82e0:	ba 10 00 00 00       	mov    $0x10,%edx
    82e5:	8e da                	mov    %edx,%ds
    82e7:	8e c2                	mov    %edx,%es
    82e9:	8e e2                	mov    %edx,%fs
    82eb:	ff d0                	call   *%eax
    82ed:	83 c4 08             	add    $0x8,%esp
    82f0:	0f a1                	pop    %fs
    82f2:	07                   	pop    %es
    82f3:	1f                   	pop    %ds
    82f4:	5d                   	pop    %ebp
    82f5:	5e                   	pop    %esi
    82f6:	5f                   	pop    %edi
    82f7:	5a                   	pop    %edx
    82f8:	59                   	pop    %ecx
    82f9:	5b                   	pop    %ebx
    82fa:	58                   	pop    %eax
    82fb:	cf                   	iret   

000082fc <debug>:
    82fc:	68 91 7d 00 00       	push   $0x7d91
    8301:	eb c9                	jmp    82cc <no_error_code>

00008303 <nmi>:
    8303:	68 2f 7e 00 00       	push   $0x7e2f
    8308:	eb c2                	jmp    82cc <no_error_code>

0000830a <int3>:
    830a:	68 91 7d 00 00       	push   $0x7d91
    830f:	eb bb                	jmp    82cc <no_error_code>

00008311 <overflow>:
    8311:	68 6f 7e 00 00       	push   $0x7e6f
    8316:	eb b4                	jmp    82cc <no_error_code>

00008318 <bounds>:
    8318:	68 8f 7e 00 00       	push   $0x7e8f
    831d:	eb ad                	jmp    82cc <no_error_code>

0000831f <invalid_op>:
    831f:	68 af 7e 00 00       	push   $0x7eaf
    8324:	eb a6                	jmp    82cc <no_error_code>

00008326 <coprocessor_segment_overrun>:
    8326:	68 ef 7e 00 00       	push   $0x7eef
    832b:	eb 9f                	jmp    82cc <no_error_code>

0000832d <reserved>:
    832d:	68 a0 7f 00 00       	push   $0x7fa0
    8332:	eb 98                	jmp    82cc <no_error_code>

00008334 <irq13>:
    8334:	50                   	push   %eax
    8335:	30 c0                	xor    %al,%al
    8337:	e6 f0                	out    %al,$0xf0
    8339:	b0 20                	mov    $0x20,%al
    833b:	e6 20                	out    %al,$0x20
    833d:	eb 00                	jmp    833f <irq13+0xb>
    833f:	eb 00                	jmp    8341 <irq13+0xd>
    8341:	e6 a0                	out    %al,$0xa0
    8343:	58                   	pop    %eax
    8344:	e9 73 f6 ff ff       	jmp    79bc <coprocessor_error>

00008349 <double_fault>:
    8349:	68 11 7d 00 00       	push   $0x7d11

0000834e <error_code>:
    834e:	87 44 24 04          	xchg   %eax,0x4(%esp)
    8352:	87 1c 24             	xchg   %ebx,(%esp)
    8355:	51                   	push   %ecx
    8356:	52                   	push   %edx
    8357:	57                   	push   %edi
    8358:	56                   	push   %esi
    8359:	55                   	push   %ebp
    835a:	1e                   	push   %ds
    835b:	06                   	push   %es
    835c:	0f a0                	push   %fs
    835e:	50                   	push   %eax
    835f:	8d 44 24 2c          	lea    0x2c(%esp),%eax
    8363:	50                   	push   %eax
    8364:	b8 10 00 00 00       	mov    $0x10,%eax
    8369:	8e d8                	mov    %eax,%ds
    836b:	8e c0                	mov    %eax,%es
    836d:	8e e0                	mov    %eax,%fs
    836f:	ff d3                	call   *%ebx
    8371:	83 c4 08             	add    $0x8,%esp
    8374:	0f a1                	pop    %fs
    8376:	07                   	pop    %es
    8377:	1f                   	pop    %ds
    8378:	5d                   	pop    %ebp
    8379:	5e                   	pop    %esi
    837a:	5f                   	pop    %edi
    837b:	5a                   	pop    %edx
    837c:	59                   	pop    %ecx
    837d:	5b                   	pop    %ebx
    837e:	58                   	pop    %eax
    837f:	cf                   	iret   

00008380 <invalid_TSS>:
    8380:	68 0f 7f 00 00       	push   $0x7f0f
    8385:	eb c7                	jmp    834e <error_code>

00008387 <segment_not_present>:
    8387:	68 2f 7f 00 00       	push   $0x7f2f
    838c:	eb c0                	jmp    834e <error_code>

0000838e <stack_segment>:
    838e:	68 4f 7f 00 00       	push   $0x7f4f
    8393:	eb b9                	jmp    834e <error_code>

00008395 <general_protection>:
    8395:	68 31 7d 00 00       	push   $0x7d31
    839a:	eb b2                	jmp    834e <error_code>

0000839c <alignment_check>:
    839c:	68 51 7d 00 00       	push   $0x7d51
    83a1:	eb ab                	jmp    834e <error_code>

000083a3 <verify_area>:
// 可以通过设置该标志来达到使用本函数同样的目的.该函数对当前进程逻辑地址从addr到addr + size这一段范围以页为单位执行写操作前
// 的检测操作.由于检测判断是以页面为单位进行操作,因此程序首先需要找出addr所在页面开始地址start,然后start加上进程数据段基址,
// 使这个start变换成CPU 4GB线性空间中的地址.最后循环调用write_verify()对指定大小的内存空间进行写前验证.若页面是只读的,
// 则执行共享检验和复制页面操作(写时复制).
void verify_area(void * addr, int size)
{
    83a3:	53                   	push   %ebx
    83a4:	83 ec 18             	sub    $0x18,%esp
	unsigned long start;

	// 首先将起始地址start调整为其所在页的左边界开始位置,同时相应地调整验证区域大小.下句中的start & 0xfff用来获得指定起始位置addr
	// (也即start)在所在页面中的偏移值,原验证范围size加上这个偏移值即扩展成以addr所在页面起始位置开始的范围值.因此在30行上也需要
	// 把验证开始位置start调整成页面边界值.
	start = (unsigned long) addr;
    83a7:	8b 44 24 20          	mov    0x20(%esp),%eax
    83ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
	size += start & 0xfff;
    83af:	8b 44 24 0c          	mov    0xc(%esp),%eax
    83b3:	25 ff 0f 00 00       	and    $0xfff,%eax
    83b8:	89 c2                	mov    %eax,%edx
    83ba:	8b 44 24 24          	mov    0x24(%esp),%eax
    83be:	01 d0                	add    %edx,%eax
    83c0:	89 44 24 24          	mov    %eax,0x24(%esp)
	start &= 0xfffff000;					// 此时start是当前进程空间中的逻辑地址.
    83c4:	81 64 24 0c 00 f0 ff 	andl   $0xfffff000,0xc(%esp)
    83cb:	ff 
	// 下面把start加上进程数据段在线性地址空间中的起始基址,变成系统整个线性空间中的地址位置.对于Linux0.1x内核,其数据段和代码段在
	// 线性地址空间中的基址和限长均相同.然后循环进行写页面验证.若页面不可写,则复制页面.(mm/memory.c)
	start += get_base(current->ldt[2]);
    83cc:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    83d1:	05 a8 03 00 00       	add    $0x3a8,%eax
    83d6:	83 c0 02             	add    $0x2,%eax
    83d9:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    83df:	81 c2 a8 03 00 00    	add    $0x3a8,%edx
    83e5:	8d 5a 04             	lea    0x4(%edx),%ebx
    83e8:	8b 0d a0 e1 02 00    	mov    0x2e1a0,%ecx
    83ee:	81 c1 a8 03 00 00    	add    $0x3a8,%ecx
    83f4:	83 c1 07             	add    $0x7,%ecx
    83f7:	8a 31                	mov    (%ecx),%dh
    83f9:	8a 13                	mov    (%ebx),%dl
    83fb:	c1 e2 10             	shl    $0x10,%edx
    83fe:	66 8b 10             	mov    (%eax),%dx
    8401:	89 d0                	mov    %edx,%eax
    8403:	89 44 24 08          	mov    %eax,0x8(%esp)
    8407:	8b 44 24 08          	mov    0x8(%esp),%eax
    840b:	01 44 24 0c          	add    %eax,0xc(%esp)
	while (size > 0) {
    840f:	eb 1f                	jmp    8430 <verify_area+0x8d>
		size -= 4096;
    8411:	81 6c 24 24 00 10 00 	subl   $0x1000,0x24(%esp)
    8418:	00 
		write_verify(start);				// include/linux/sched.h
    8419:	83 ec 0c             	sub    $0xc,%esp
    841c:	ff 74 24 18          	pushl  0x18(%esp)
    8420:	e8 3a 3f 00 00       	call   c35f <write_verify>
    8425:	83 c4 10             	add    $0x10,%esp
		start += 4096;
    8428:	81 44 24 0c 00 10 00 	addl   $0x1000,0xc(%esp)
    842f:	00 
	size += start & 0xfff;
	start &= 0xfffff000;					// 此时start是当前进程空间中的逻辑地址.
	// 下面把start加上进程数据段在线性地址空间中的起始基址,变成系统整个线性空间中的地址位置.对于Linux0.1x内核,其数据段和代码段在
	// 线性地址空间中的基址和限长均相同.然后循环进行写页面验证.若页面不可写,则复制页面.(mm/memory.c)
	start += get_base(current->ldt[2]);
	while (size > 0) {
    8430:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
    8435:	7f da                	jg     8411 <verify_area+0x6e>
		size -= 4096;
		write_verify(start);				// include/linux/sched.h
		start += 4096;
	}
}
    8437:	90                   	nop
    8438:	83 c4 18             	add    $0x18,%esp
    843b:	5b                   	pop    %ebx
    843c:	c3                   	ret    

0000843d <copy_mem>:
// 复制内存页表.
// 参数nr是新任务号;p是新任务数据结构指针.该函数为新任务在线性地址空间中设置代码段和数据段基址,限长,并复制页表.由于Linux系统采用写时
// 复制(copy on write)技术,因此这里仅为新进程设置自己的页目录表项和页表项,而没有实际为新进程分配物理内存页面.此时新进程与其父进程
// 共享所有内存页面.操作成功返回0,否则返回出错号.
int copy_mem(int nr, struct task_struct * p)
{
    843d:	56                   	push   %esi
    843e:	53                   	push   %ebx
    843f:	83 ec 34             	sub    $0x34,%esp

	// 首先取当前进程局部描述符表中代码段描述符和数据段描述符项中的段限长(字节数).
	// 0x0f是代码段选择符;0x17是数据段选择符.然后取当前进程代码段和数据段的线性地址空间中的基地址.由于Linux0.12内核还不支持代码和数据段分立的情况,
	// 因此这里需要检查代码段和数据段基址是否都相同,并且要求数据段的长度至少不小于代码段的长度,否则内核显示出错信息,并停止运行.
	// get_limit()和get_base()定义在include/linux/sched.h.
	code_limit = get_limit(0x0f);
    8442:	b8 0f 00 00 00       	mov    $0xf,%eax
    8447:	0f 03 c0             	lsl    %ax,%eax
    844a:	40                   	inc    %eax
    844b:	89 44 24 2c          	mov    %eax,0x2c(%esp)
    844f:	8b 44 24 2c          	mov    0x2c(%esp),%eax
    8453:	89 44 24 28          	mov    %eax,0x28(%esp)
	data_limit = get_limit(0x17);
    8457:	b8 17 00 00 00       	mov    $0x17,%eax
    845c:	0f 03 c0             	lsl    %ax,%eax
    845f:	40                   	inc    %eax
    8460:	89 44 24 24          	mov    %eax,0x24(%esp)
    8464:	8b 44 24 24          	mov    0x24(%esp),%eax
    8468:	89 44 24 20          	mov    %eax,0x20(%esp)
	old_code_base = get_base(current->ldt[1]);
    846c:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    8471:	05 a0 03 00 00       	add    $0x3a0,%eax
    8476:	83 c0 02             	add    $0x2,%eax
    8479:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    847f:	81 c2 a0 03 00 00    	add    $0x3a0,%edx
    8485:	8d 5a 04             	lea    0x4(%edx),%ebx
    8488:	8b 0d a0 e1 02 00    	mov    0x2e1a0,%ecx
    848e:	81 c1 a0 03 00 00    	add    $0x3a0,%ecx
    8494:	83 c1 07             	add    $0x7,%ecx
    8497:	8a 31                	mov    (%ecx),%dh
    8499:	8a 13                	mov    (%ebx),%dl
    849b:	c1 e2 10             	shl    $0x10,%edx
    849e:	66 8b 10             	mov    (%eax),%dx
    84a1:	89 d0                	mov    %edx,%eax
    84a3:	89 44 24 1c          	mov    %eax,0x1c(%esp)
    84a7:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    84ab:	89 44 24 18          	mov    %eax,0x18(%esp)
	old_data_base = get_base(current->ldt[2]);
    84af:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    84b4:	05 a8 03 00 00       	add    $0x3a8,%eax
    84b9:	83 c0 02             	add    $0x2,%eax
    84bc:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    84c2:	81 c2 a8 03 00 00    	add    $0x3a8,%edx
    84c8:	8d 72 04             	lea    0x4(%edx),%esi
    84cb:	8b 0d a0 e1 02 00    	mov    0x2e1a0,%ecx
    84d1:	81 c1 a8 03 00 00    	add    $0x3a8,%ecx
    84d7:	83 c1 07             	add    $0x7,%ecx
    84da:	8a 31                	mov    (%ecx),%dh
    84dc:	8a 16                	mov    (%esi),%dl
    84de:	c1 e2 10             	shl    $0x10,%edx
    84e1:	66 8b 10             	mov    (%eax),%dx
    84e4:	89 d0                	mov    %edx,%eax
    84e6:	89 44 24 14          	mov    %eax,0x14(%esp)
    84ea:	8b 44 24 14          	mov    0x14(%esp),%eax
    84ee:	89 44 24 10          	mov    %eax,0x10(%esp)
	if (old_data_base != old_code_base)
    84f2:	8b 44 24 10          	mov    0x10(%esp),%eax
    84f6:	3b 44 24 18          	cmp    0x18(%esp),%eax
    84fa:	74 10                	je     850c <copy_mem+0xcf>
		panic("We don't support separate I&D");
    84fc:	83 ec 0c             	sub    $0xc,%esp
    84ff:	68 c4 2d 02 00       	push   $0x22dc4
    8504:	e8 ff 06 00 00       	call   8c08 <panic>
    8509:	83 c4 10             	add    $0x10,%esp
	if (data_limit < code_limit)
    850c:	8b 44 24 20          	mov    0x20(%esp),%eax
    8510:	3b 44 24 28          	cmp    0x28(%esp),%eax
    8514:	73 10                	jae    8526 <copy_mem+0xe9>
		panic("Bad data_limit");
    8516:	83 ec 0c             	sub    $0xc,%esp
    8519:	68 e2 2d 02 00       	push   $0x22de2
    851e:	e8 e5 06 00 00       	call   8c08 <panic>
    8523:	83 c4 10             	add    $0x10,%esp
	// 然后设置创建中的新进程在线性地址空间中的基地址等于(64MB*其任务号),并用该值设置新进程局部描述符表中段描述符中的基地址.接着设置新进程的页目录
	// 表项和页表项,即复制当前进程(父进程)的页目录表项和页表项.此时子进程共享父进程的内存页面.
	// 正常情况下copy_page_tables()返回0,否则表示出错,则释放刚申请的页表项.
	new_data_base = new_code_base = nr * TASK_SIZE;
    8526:	8b 44 24 40          	mov    0x40(%esp),%eax
    852a:	c1 e0 1a             	shl    $0x1a,%eax
    852d:	89 44 24 0c          	mov    %eax,0xc(%esp)
    8531:	8b 44 24 0c          	mov    0xc(%esp),%eax
    8535:	89 44 24 08          	mov    %eax,0x8(%esp)
	p->start_code = new_code_base;
    8539:	8b 44 24 44          	mov    0x44(%esp),%eax
    853d:	8b 54 24 0c          	mov    0xc(%esp),%edx
    8541:	89 90 18 02 00 00    	mov    %edx,0x218(%eax)
	set_base(p->ldt[1], new_code_base);
    8547:	8b 44 24 44          	mov    0x44(%esp),%eax
    854b:	05 a0 03 00 00       	add    $0x3a0,%eax
    8550:	8d 48 02             	lea    0x2(%eax),%ecx
    8553:	8b 44 24 44          	mov    0x44(%esp),%eax
    8557:	05 a0 03 00 00       	add    $0x3a0,%eax
    855c:	8d 58 04             	lea    0x4(%eax),%ebx
    855f:	8b 44 24 44          	mov    0x44(%esp),%eax
    8563:	05 a0 03 00 00       	add    $0x3a0,%eax
    8568:	8d 70 07             	lea    0x7(%eax),%esi
    856b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    856f:	89 c2                	mov    %eax,%edx
    8571:	66 89 11             	mov    %dx,(%ecx)
    8574:	c1 ca 10             	ror    $0x10,%edx
    8577:	88 13                	mov    %dl,(%ebx)
    8579:	88 36                	mov    %dh,(%esi)
    857b:	89 d0                	mov    %edx,%eax
    857d:	89 44 24 04          	mov    %eax,0x4(%esp)
	set_base(p->ldt[2], new_data_base);
    8581:	8b 44 24 44          	mov    0x44(%esp),%eax
    8585:	05 a8 03 00 00       	add    $0x3a8,%eax
    858a:	8d 48 02             	lea    0x2(%eax),%ecx
    858d:	8b 44 24 44          	mov    0x44(%esp),%eax
    8591:	05 a8 03 00 00       	add    $0x3a8,%eax
    8596:	8d 58 04             	lea    0x4(%eax),%ebx
    8599:	8b 44 24 44          	mov    0x44(%esp),%eax
    859d:	05 a8 03 00 00       	add    $0x3a8,%eax
    85a2:	8d 70 07             	lea    0x7(%eax),%esi
    85a5:	8b 44 24 08          	mov    0x8(%esp),%eax
    85a9:	89 c2                	mov    %eax,%edx
    85ab:	66 89 11             	mov    %dx,(%ecx)
    85ae:	c1 ca 10             	ror    $0x10,%edx
    85b1:	88 13                	mov    %dl,(%ebx)
    85b3:	88 36                	mov    %dh,(%esi)
    85b5:	89 d0                	mov    %edx,%eax
    85b7:	89 04 24             	mov    %eax,(%esp)
	if (copy_page_tables(old_data_base, new_data_base, data_limit)) {
    85ba:	8b 44 24 20          	mov    0x20(%esp),%eax
    85be:	83 ec 04             	sub    $0x4,%esp
    85c1:	50                   	push   %eax
    85c2:	ff 74 24 10          	pushl  0x10(%esp)
    85c6:	ff 74 24 1c          	pushl  0x1c(%esp)
    85ca:	e8 8c 38 00 00       	call   be5b <copy_page_tables>
    85cf:	83 c4 10             	add    $0x10,%esp
    85d2:	85 c0                	test   %eax,%eax
    85d4:	74 1a                	je     85f0 <copy_mem+0x1b3>
		free_page_tables(new_data_base, data_limit);
    85d6:	83 ec 08             	sub    $0x8,%esp
    85d9:	ff 74 24 28          	pushl  0x28(%esp)
    85dd:	ff 74 24 14          	pushl  0x14(%esp)
    85e1:	e8 40 37 00 00       	call   bd26 <free_page_tables>
    85e6:	83 c4 10             	add    $0x10,%esp
		return -ENOMEM;
    85e9:	b8 f4 ff ff ff       	mov    $0xfffffff4,%eax
    85ee:	eb 05                	jmp    85f5 <copy_mem+0x1b8>
	}
	return 0;
    85f0:	b8 00 00 00 00       	mov    $0x0,%eax
}
    85f5:	83 c4 34             	add    $0x34,%esp
    85f8:	5b                   	pop    %ebx
    85f9:	5e                   	pop    %esi
    85fa:	c3                   	ret    

000085fb <copy_process>:
// 其中参数nr是调用find_empty_process()分配的任务数组项号.
int copy_process(int nr, long ebp, long edi, long esi, long gs, long none,
		long ebx, long ecx, long edx, long orig_eax,
		long fs, long es, long ds,
		long eip, long cs, long eflags, long esp, long ss)
{
    85fb:	55                   	push   %ebp
    85fc:	57                   	push   %edi
    85fd:	56                   	push   %esi
    85fe:	53                   	push   %ebx
    85ff:	83 ec 1c             	sub    $0x1c,%esp
	int i;
	struct file *f;

	// 首先为新任务数据结构分配内存.如果内存分配出错,则返回出错码并退出.然后将新任务结构指针放入任务数组的nr项中.其中nr为任务号,由前面
	// find_empty_process()返回.接着把当前进程任务结构复制到刚申请到的内存页面p开始处.
	p = (struct task_struct *) get_free_page();
    8602:	e8 34 4a 00 00       	call   d03b <get_free_page>
    8607:	89 44 24 08          	mov    %eax,0x8(%esp)
	if (!p)
    860b:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    8610:	75 0a                	jne    861c <copy_process+0x21>
		return -EAGAIN;
    8612:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
    8617:	e9 34 05 00 00       	jmp    8b50 <copy_process+0x555>
	task[nr] = p;
    861c:	8b 44 24 30          	mov    0x30(%esp),%eax
    8620:	8b 54 24 08          	mov    0x8(%esp),%edx
    8624:	89 14 85 c0 e1 02 00 	mov    %edx,0x2e1c0(,%eax,4)
	*p = *current;							/* NOTE! this doesn't copy the supervisor stack */	/* 注意!这样不会复制超级用户堆栈(只复制进程结构) */
    862b:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    8630:	8b 54 24 08          	mov    0x8(%esp),%edx
    8634:	89 c3                	mov    %eax,%ebx
    8636:	b8 21 01 00 00       	mov    $0x121,%eax
    863b:	89 d7                	mov    %edx,%edi
    863d:	89 de                	mov    %ebx,%esi
    863f:	89 c1                	mov    %eax,%ecx
    8641:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	//	memcpy(p, current, sizeof(struct task_struct));
	// 随后对复制来的进程结构内容进行一些修改,作为新进程的任务结构.先将新进程的状态置为不可中断等待状态,以防止内核调试其执行.然后设置新进程
	// 的进程号pid,并初始化进程运行时间片值等于其priorty值(一般为16个嘀嗒).接着复位新进程的信号位图,报警定时值,会话(session)领导标志
	// leader,进程及其子进程在内核和用户态运行时间统计值,还设置进程开始运行的系统时间start_time.
	p->state = TASK_UNINTERRUPTIBLE;
    8643:	8b 44 24 08          	mov    0x8(%esp),%eax
    8647:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
	p->pid = last_pid;						// 新进程号.也由find_empty_process()得到.
    864d:	8b 15 48 ee 02 00    	mov    0x2ee48,%edx
    8653:	8b 44 24 08          	mov    0x8(%esp),%eax
    8657:	89 90 2c 02 00 00    	mov    %edx,0x22c(%eax)
	p->counter = p->priority;				// 运行时间片值(嘀嗒数).
    865d:	8b 44 24 08          	mov    0x8(%esp),%eax
    8661:	8b 50 08             	mov    0x8(%eax),%edx
    8664:	8b 44 24 08          	mov    0x8(%esp),%eax
    8668:	89 50 04             	mov    %edx,0x4(%eax)
	p->signal = 0;							// 信号位图.
    866b:	8b 44 24 08          	mov    0x8(%esp),%eax
    866f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	p->alarm = 0;							// 报警定时值(嘀嗒数).
    8676:	8b 44 24 08          	mov    0x8(%esp),%eax
    867a:	c7 80 dc 02 00 00 00 	movl   $0x0,0x2dc(%eax)
    8681:	00 00 00 
	p->leader = 0;							/* process leadership doesn't inherit */	/* 进程的领导权是不能继承的 */
    8684:	8b 44 24 08          	mov    0x8(%esp),%eax
    8688:	c7 80 38 02 00 00 00 	movl   $0x0,0x238(%eax)
    868f:	00 00 00 
	p->utime = p->stime = 0;				// 用户态时间和核心态运行时间.
    8692:	8b 44 24 08          	mov    0x8(%esp),%eax
    8696:	c7 80 e4 02 00 00 00 	movl   $0x0,0x2e4(%eax)
    869d:	00 00 00 
    86a0:	8b 44 24 08          	mov    0x8(%esp),%eax
    86a4:	8b 90 e4 02 00 00    	mov    0x2e4(%eax),%edx
    86aa:	8b 44 24 08          	mov    0x8(%esp),%eax
    86ae:	89 90 e0 02 00 00    	mov    %edx,0x2e0(%eax)
	p->cutime = p->cstime = 0;				// 子进程用户态和核心态运行时间.
    86b4:	8b 44 24 08          	mov    0x8(%esp),%eax
    86b8:	c7 80 ec 02 00 00 00 	movl   $0x0,0x2ec(%eax)
    86bf:	00 00 00 
    86c2:	8b 44 24 08          	mov    0x8(%esp),%eax
    86c6:	8b 90 ec 02 00 00    	mov    0x2ec(%eax),%edx
    86cc:	8b 44 24 08          	mov    0x8(%esp),%eax
    86d0:	89 90 e8 02 00 00    	mov    %edx,0x2e8(%eax)
	p->start_time = jiffies;				// 进程开始运行时间(当前时间滴答数).
    86d6:	a1 00 eb 02 00       	mov    0x2eb00,%eax
    86db:	89 c2                	mov    %eax,%edx
    86dd:	8b 44 24 08          	mov    0x8(%esp),%eax
    86e1:	89 90 f0 02 00 00    	mov    %edx,0x2f0(%eax)
	// 再修改任务状态段TSS数据.由于系统给任务结构p分配了1页新内存,所以(PAGE_SIZE + (long) p)让esp0正好指向该页顶端.ss0:esp0用作程序在内核
	// 态执行时的栈.另外,在第3章中我们已经知道,每个任务在GDT表中都有两个段描述符,一个是任务的TSS段描述符,另一个是任务的LDT表段描述符.下面语句就是
	// 把GDT中本任务LDT段描述符的选择符保存在本任务的TSS段.当CPU执行切换任务时,会自动从TSS中把LDT段描述符的选择符加载到ldtr寄存器中.
	p->tss.back_link = 0;
    86e7:	8b 44 24 08          	mov    0x8(%esp),%eax
    86eb:	c7 80 b0 03 00 00 00 	movl   $0x0,0x3b0(%eax)
    86f2:	00 00 00 
	p->tss.esp0 = PAGE_SIZE + (long) p;		// 任务内核态栈指针.
    86f5:	8b 44 24 08          	mov    0x8(%esp),%eax
    86f9:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
    86ff:	8b 44 24 08          	mov    0x8(%esp),%eax
    8703:	89 90 b4 03 00 00    	mov    %edx,0x3b4(%eax)
	p->tss.ss0 = 0x10;              		// 内核态栈的段选择符(与内核数据段相同).
    8709:	8b 44 24 08          	mov    0x8(%esp),%eax
    870d:	c7 80 b8 03 00 00 10 	movl   $0x10,0x3b8(%eax)
    8714:	00 00 00 
	p->tss.eip = eip;						// 指令代码指针.
    8717:	8b 44 24 08          	mov    0x8(%esp),%eax
    871b:	8b 54 24 64          	mov    0x64(%esp),%edx
    871f:	89 90 d0 03 00 00    	mov    %edx,0x3d0(%eax)
	p->tss.eflags = eflags;					// 标志寄存器.
    8725:	8b 44 24 08          	mov    0x8(%esp),%eax
    8729:	8b 54 24 6c          	mov    0x6c(%esp),%edx
    872d:	89 90 d4 03 00 00    	mov    %edx,0x3d4(%eax)
	p->tss.eax = 0;							// 这是当fork()返回时新进程会返回0的原因所在.
    8733:	8b 44 24 08          	mov    0x8(%esp),%eax
    8737:	c7 80 d8 03 00 00 00 	movl   $0x0,0x3d8(%eax)
    873e:	00 00 00 
	p->tss.ecx = ecx;
    8741:	8b 44 24 08          	mov    0x8(%esp),%eax
    8745:	8b 54 24 4c          	mov    0x4c(%esp),%edx
    8749:	89 90 dc 03 00 00    	mov    %edx,0x3dc(%eax)
	p->tss.edx = edx;
    874f:	8b 44 24 08          	mov    0x8(%esp),%eax
    8753:	8b 54 24 50          	mov    0x50(%esp),%edx
    8757:	89 90 e0 03 00 00    	mov    %edx,0x3e0(%eax)
	p->tss.ebx = ebx;
    875d:	8b 44 24 08          	mov    0x8(%esp),%eax
    8761:	8b 54 24 48          	mov    0x48(%esp),%edx
    8765:	89 90 e4 03 00 00    	mov    %edx,0x3e4(%eax)
	p->tss.esp = esp;
    876b:	8b 44 24 08          	mov    0x8(%esp),%eax
    876f:	8b 54 24 70          	mov    0x70(%esp),%edx
    8773:	89 90 e8 03 00 00    	mov    %edx,0x3e8(%eax)
	p->tss.ebp = ebp;
    8779:	8b 44 24 08          	mov    0x8(%esp),%eax
    877d:	8b 54 24 34          	mov    0x34(%esp),%edx
    8781:	89 90 ec 03 00 00    	mov    %edx,0x3ec(%eax)
	p->tss.esi = esi;
    8787:	8b 44 24 08          	mov    0x8(%esp),%eax
    878b:	8b 54 24 3c          	mov    0x3c(%esp),%edx
    878f:	89 90 f0 03 00 00    	mov    %edx,0x3f0(%eax)
	p->tss.edi = edi;
    8795:	8b 44 24 08          	mov    0x8(%esp),%eax
    8799:	8b 54 24 38          	mov    0x38(%esp),%edx
    879d:	89 90 f4 03 00 00    	mov    %edx,0x3f4(%eax)
	p->tss.es = es & 0xffff;				// 段寄存器仅16位有效.
    87a3:	8b 44 24 5c          	mov    0x5c(%esp),%eax
    87a7:	0f b7 d0             	movzwl %ax,%edx
    87aa:	8b 44 24 08          	mov    0x8(%esp),%eax
    87ae:	89 90 f8 03 00 00    	mov    %edx,0x3f8(%eax)
	p->tss.cs = cs & 0xffff;
    87b4:	8b 44 24 68          	mov    0x68(%esp),%eax
    87b8:	0f b7 d0             	movzwl %ax,%edx
    87bb:	8b 44 24 08          	mov    0x8(%esp),%eax
    87bf:	89 90 fc 03 00 00    	mov    %edx,0x3fc(%eax)
	p->tss.ss = ss & 0xffff;
    87c5:	8b 44 24 74          	mov    0x74(%esp),%eax
    87c9:	0f b7 d0             	movzwl %ax,%edx
    87cc:	8b 44 24 08          	mov    0x8(%esp),%eax
    87d0:	89 90 00 04 00 00    	mov    %edx,0x400(%eax)
	p->tss.ds = ds & 0xffff;
    87d6:	8b 44 24 60          	mov    0x60(%esp),%eax
    87da:	0f b7 d0             	movzwl %ax,%edx
    87dd:	8b 44 24 08          	mov    0x8(%esp),%eax
    87e1:	89 90 04 04 00 00    	mov    %edx,0x404(%eax)
	p->tss.fs = fs & 0xffff;
    87e7:	8b 44 24 58          	mov    0x58(%esp),%eax
    87eb:	0f b7 d0             	movzwl %ax,%edx
    87ee:	8b 44 24 08          	mov    0x8(%esp),%eax
    87f2:	89 90 08 04 00 00    	mov    %edx,0x408(%eax)
	p->tss.gs = gs & 0xffff;
    87f8:	8b 44 24 40          	mov    0x40(%esp),%eax
    87fc:	0f b7 d0             	movzwl %ax,%edx
    87ff:	8b 44 24 08          	mov    0x8(%esp),%eax
    8803:	89 90 0c 04 00 00    	mov    %edx,0x40c(%eax)
	p->tss.ldt = _LDT(nr);					// 任务局部表描述符的选择符(LDT描述符在GET中).
    8809:	8b 44 24 30          	mov    0x30(%esp),%eax
    880d:	c1 e0 04             	shl    $0x4,%eax
    8810:	83 c0 28             	add    $0x28,%eax
    8813:	89 c2                	mov    %eax,%edx
    8815:	8b 44 24 08          	mov    0x8(%esp),%eax
    8819:	89 90 10 04 00 00    	mov    %edx,0x410(%eax)
	p->tss.trace_bitmap = 0x80000000;		// (高16位有效).
    881f:	8b 44 24 08          	mov    0x8(%esp),%eax
    8823:	c7 80 14 04 00 00 00 	movl   $0x80000000,0x414(%eax)
    882a:	00 00 80 
	// 如果当前任务使用了协处理器,就保存其上下文.汇编指令clts用于清除控制寄存器CR0中的任务已交换(TS)标志.每当发生任务切换,CPU都会设置该标志.该标志用于管理
	// 数学协处理器:如果该标志置位,那么每个ESC指令都会被捕获(异常7).如果协处理器存在标志MP也同时置位的话,那么WAIT指令也会捕获.因此,如果任务切换发生在一个
	// ESC指令开始执行之后,则协处理器中的内容就可能需要在执行新的ESC指令之前保存起来.捕获处理句柄会保存协处理器的内容并复位TS标志.指令fnsave用于把协处理器的
	// 所有状态保存到目的操作数指定的内存区域中(tss.i387).
	if (last_task_used_math == current)
    882d:	8b 15 0c eb 02 00    	mov    0x2eb0c,%edx
    8833:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    8838:	39 c2                	cmp    %eax,%edx
    883a:	75 12                	jne    884e <copy_process+0x253>
		__asm__("clts ; fnsave %0 ; frstor %0"::"m" (p->tss.i387));
    883c:	8b 44 24 08          	mov    0x8(%esp),%eax
    8840:	0f 06                	clts   
    8842:	dd b0 18 04 00 00    	fnsave 0x418(%eax)
    8848:	dd a0 18 04 00 00    	frstor 0x418(%eax)
	// 接下来复制进程页表.即在线性地址空间设置新任务代码段和数据段描述符中的基址和限长,并复制页表.如果出错(返回值不是0),则复位任务数组中相应项并
	// 释放为该新任务分配的用于任务结构的内存页.
	if (copy_mem(nr, p)) {					// 返回不为0示出错.
    884e:	83 ec 08             	sub    $0x8,%esp
    8851:	ff 74 24 10          	pushl  0x10(%esp)
    8855:	ff 74 24 3c          	pushl  0x3c(%esp)
    8859:	e8 df fb ff ff       	call   843d <copy_mem>
    885e:	83 c4 10             	add    $0x10,%esp
    8861:	85 c0                	test   %eax,%eax
    8863:	74 29                	je     888e <copy_process+0x293>
		task[nr] = NULL;
    8865:	8b 44 24 30          	mov    0x30(%esp),%eax
    8869:	c7 04 85 c0 e1 02 00 	movl   $0x0,0x2e1c0(,%eax,4)
    8870:	00 00 00 00 
		free_page((long) p);
    8874:	8b 44 24 08          	mov    0x8(%esp),%eax
    8878:	83 ec 0c             	sub    $0xc,%esp
    887b:	50                   	push   %eax
    887c:	e8 2b 34 00 00       	call   bcac <free_page>
    8881:	83 c4 10             	add    $0x10,%esp
		return -EAGAIN;
    8884:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
    8889:	e9 c2 02 00 00       	jmp    8b50 <copy_process+0x555>
	}
	// 如果父进程中有文件是打开的,则将对应文件的打开次数增1.因为这里创建的子进程会与父进程共享这些打开的文件.将当前进程(父进程)的pwd,root和
	// executable引用次数均增1.与上面同样的道理,子进程也引用了这些i节点.
	for (i = 0; i < NR_OPEN; i++)
    888e:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    8895:	00 
    8896:	eb 35                	jmp    88cd <copy_process+0x2d2>
		if (f = p->filp[i])
    8898:	8b 44 24 08          	mov    0x8(%esp),%eax
    889c:	8b 54 24 0c          	mov    0xc(%esp),%edx
    88a0:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    88a6:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
    88aa:	89 44 24 04          	mov    %eax,0x4(%esp)
    88ae:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    88b3:	74 13                	je     88c8 <copy_process+0x2cd>
			f->f_count++;
    88b5:	8b 44 24 04          	mov    0x4(%esp),%eax
    88b9:	0f b7 40 04          	movzwl 0x4(%eax),%eax
    88bd:	8d 50 01             	lea    0x1(%eax),%edx
    88c0:	8b 44 24 04          	mov    0x4(%esp),%eax
    88c4:	66 89 50 04          	mov    %dx,0x4(%eax)
		free_page((long) p);
		return -EAGAIN;
	}
	// 如果父进程中有文件是打开的,则将对应文件的打开次数增1.因为这里创建的子进程会与父进程共享这些打开的文件.将当前进程(父进程)的pwd,root和
	// executable引用次数均增1.与上面同样的道理,子进程也引用了这些i节点.
	for (i = 0; i < NR_OPEN; i++)
    88c8:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    88cd:	83 7c 24 0c 13       	cmpl   $0x13,0xc(%esp)
    88d2:	7e c4                	jle    8898 <copy_process+0x29d>
		if (f = p->filp[i])
			f->f_count++;
	if (current->pwd)
    88d4:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    88d9:	8b 80 34 03 00 00    	mov    0x334(%eax),%eax
    88df:	85 c0                	test   %eax,%eax
    88e1:	74 16                	je     88f9 <copy_process+0x2fe>
		current->pwd->i_count++;
    88e3:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    88e8:	8b 80 34 03 00 00    	mov    0x334(%eax),%eax
    88ee:	0f b7 50 34          	movzwl 0x34(%eax),%edx
    88f2:	83 c2 01             	add    $0x1,%edx
    88f5:	66 89 50 34          	mov    %dx,0x34(%eax)
	if (current->root)
    88f9:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    88fe:	8b 80 38 03 00 00    	mov    0x338(%eax),%eax
    8904:	85 c0                	test   %eax,%eax
    8906:	74 16                	je     891e <copy_process+0x323>
		current->root->i_count++;
    8908:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    890d:	8b 80 38 03 00 00    	mov    0x338(%eax),%eax
    8913:	0f b7 50 34          	movzwl 0x34(%eax),%edx
    8917:	83 c2 01             	add    $0x1,%edx
    891a:	66 89 50 34          	mov    %dx,0x34(%eax)
	if (current->executable)
    891e:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    8923:	8b 80 3c 03 00 00    	mov    0x33c(%eax),%eax
    8929:	85 c0                	test   %eax,%eax
    892b:	74 16                	je     8943 <copy_process+0x348>
		current->executable->i_count++;
    892d:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    8932:	8b 80 3c 03 00 00    	mov    0x33c(%eax),%eax
    8938:	0f b7 50 34          	movzwl 0x34(%eax),%edx
    893c:	83 c2 01             	add    $0x1,%edx
    893f:	66 89 50 34          	mov    %dx,0x34(%eax)
	if (current->library)
    8943:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    8948:	8b 80 40 03 00 00    	mov    0x340(%eax),%eax
    894e:	85 c0                	test   %eax,%eax
    8950:	74 16                	je     8968 <copy_process+0x36d>
		current->library->i_count++;
    8952:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    8957:	8b 80 40 03 00 00    	mov    0x340(%eax),%eax
    895d:	0f b7 50 34          	movzwl 0x34(%eax),%edx
    8961:	83 c2 01             	add    $0x1,%edx
    8964:	66 89 50 34          	mov    %dx,0x34(%eax)
	// 设置等于父进程的最新子进程指针.若当前进程确实还有其他子进程,则让比邻老兄进程的最年轻进程指针p_yspter指向新进程.最后把当前进程的最新子进程指针指向这个新进程.
	// 然后把新进程设置成就绪态.最后返回新进程号.
	// 另外,set_tss_desc()和set_ldt_desc()定义在include/asm/system.h文件中."gdt+(nr<<1)+FIRST_TSS_ENTRY"是任务nr的TSS描述符项在全局表中的地址.
	// 因为每个任务占用GDT表中2项,因此上式中要包括'(nr<<1)'.
	// 请注意,在任务切换时,任务寄存器tr会由CPU自动加载.
	set_tss_desc(gdt + (nr << 1) + FIRST_TSS_ENTRY, &(p->tss));
    8968:	8b 44 24 08          	mov    0x8(%esp),%eax
    896c:	05 b0 03 00 00       	add    $0x3b0,%eax
    8971:	8b 54 24 30          	mov    0x30(%esp),%edx
    8975:	01 d2                	add    %edx,%edx
    8977:	83 c2 04             	add    $0x4,%edx
    897a:	c1 e2 03             	shl    $0x3,%edx
    897d:	81 c2 b8 5c 00 00    	add    $0x5cb8,%edx
    8983:	8b 4c 24 30          	mov    0x30(%esp),%ecx
    8987:	01 c9                	add    %ecx,%ecx
    8989:	83 c1 04             	add    $0x4,%ecx
    898c:	c1 e1 03             	shl    $0x3,%ecx
    898f:	83 c1 02             	add    $0x2,%ecx
    8992:	81 c1 b8 5c 00 00    	add    $0x5cb8,%ecx
    8998:	8b 5c 24 30          	mov    0x30(%esp),%ebx
    899c:	01 db                	add    %ebx,%ebx
    899e:	83 c3 04             	add    $0x4,%ebx
    89a1:	c1 e3 03             	shl    $0x3,%ebx
    89a4:	83 c3 04             	add    $0x4,%ebx
    89a7:	81 c3 b8 5c 00 00    	add    $0x5cb8,%ebx
    89ad:	8b 74 24 30          	mov    0x30(%esp),%esi
    89b1:	01 f6                	add    %esi,%esi
    89b3:	83 c6 04             	add    $0x4,%esi
    89b6:	c1 e6 03             	shl    $0x3,%esi
    89b9:	83 c6 05             	add    $0x5,%esi
    89bc:	81 c6 b8 5c 00 00    	add    $0x5cb8,%esi
    89c2:	8b 7c 24 30          	mov    0x30(%esp),%edi
    89c6:	01 ff                	add    %edi,%edi
    89c8:	83 c7 04             	add    $0x4,%edi
    89cb:	c1 e7 03             	shl    $0x3,%edi
    89ce:	83 c7 06             	add    $0x6,%edi
    89d1:	81 c7 b8 5c 00 00    	add    $0x5cb8,%edi
    89d7:	8b 6c 24 30          	mov    0x30(%esp),%ebp
    89db:	01 ed                	add    %ebp,%ebp
    89dd:	83 c5 04             	add    $0x4,%ebp
    89e0:	c1 e5 03             	shl    $0x3,%ebp
    89e3:	83 c5 07             	add    $0x7,%ebp
    89e6:	81 c5 b8 5c 00 00    	add    $0x5cb8,%ebp
    89ec:	66 c7 02 68 00       	movw   $0x68,(%edx)
    89f1:	66 89 01             	mov    %ax,(%ecx)
    89f4:	c1 c8 10             	ror    $0x10,%eax
    89f7:	88 03                	mov    %al,(%ebx)
    89f9:	c6 06 89             	movb   $0x89,(%esi)
    89fc:	c6 07 00             	movb   $0x0,(%edi)
    89ff:	88 65 00             	mov    %ah,0x0(%ebp)
    8a02:	c1 c8 10             	ror    $0x10,%eax
	set_ldt_desc(gdt + (nr << 1) + FIRST_LDT_ENTRY, &(p->ldt));
    8a05:	8b 44 24 08          	mov    0x8(%esp),%eax
    8a09:	05 98 03 00 00       	add    $0x398,%eax
    8a0e:	8b 54 24 30          	mov    0x30(%esp),%edx
    8a12:	01 d2                	add    %edx,%edx
    8a14:	83 c2 05             	add    $0x5,%edx
    8a17:	c1 e2 03             	shl    $0x3,%edx
    8a1a:	81 c2 b8 5c 00 00    	add    $0x5cb8,%edx
    8a20:	8b 4c 24 30          	mov    0x30(%esp),%ecx
    8a24:	01 c9                	add    %ecx,%ecx
    8a26:	83 c1 05             	add    $0x5,%ecx
    8a29:	c1 e1 03             	shl    $0x3,%ecx
    8a2c:	83 c1 02             	add    $0x2,%ecx
    8a2f:	81 c1 b8 5c 00 00    	add    $0x5cb8,%ecx
    8a35:	8b 5c 24 30          	mov    0x30(%esp),%ebx
    8a39:	01 db                	add    %ebx,%ebx
    8a3b:	83 c3 05             	add    $0x5,%ebx
    8a3e:	c1 e3 03             	shl    $0x3,%ebx
    8a41:	83 c3 04             	add    $0x4,%ebx
    8a44:	81 c3 b8 5c 00 00    	add    $0x5cb8,%ebx
    8a4a:	8b 74 24 30          	mov    0x30(%esp),%esi
    8a4e:	01 f6                	add    %esi,%esi
    8a50:	83 c6 05             	add    $0x5,%esi
    8a53:	c1 e6 03             	shl    $0x3,%esi
    8a56:	83 c6 05             	add    $0x5,%esi
    8a59:	81 c6 b8 5c 00 00    	add    $0x5cb8,%esi
    8a5f:	8b 7c 24 30          	mov    0x30(%esp),%edi
    8a63:	01 ff                	add    %edi,%edi
    8a65:	83 c7 05             	add    $0x5,%edi
    8a68:	c1 e7 03             	shl    $0x3,%edi
    8a6b:	83 c7 06             	add    $0x6,%edi
    8a6e:	81 c7 b8 5c 00 00    	add    $0x5cb8,%edi
    8a74:	8b 6c 24 30          	mov    0x30(%esp),%ebp
    8a78:	01 ed                	add    %ebp,%ebp
    8a7a:	83 c5 05             	add    $0x5,%ebp
    8a7d:	c1 e5 03             	shl    $0x3,%ebp
    8a80:	83 c5 07             	add    $0x7,%ebp
    8a83:	81 c5 b8 5c 00 00    	add    $0x5cb8,%ebp
    8a89:	66 c7 02 68 00       	movw   $0x68,(%edx)
    8a8e:	66 89 01             	mov    %ax,(%ecx)
    8a91:	c1 c8 10             	ror    $0x10,%eax
    8a94:	88 03                	mov    %al,(%ebx)
    8a96:	c6 06 82             	movb   $0x82,(%esi)
    8a99:	c6 07 00             	movb   $0x0,(%edi)
    8a9c:	88 65 00             	mov    %ah,0x0(%ebp)
    8a9f:	c1 c8 10             	ror    $0x10,%eax
	p->p_pptr = current;				// 设置新进程的父进程指针.
    8aa2:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    8aa8:	8b 44 24 08          	mov    0x8(%esp),%eax
    8aac:	89 90 bc 02 00 00    	mov    %edx,0x2bc(%eax)
	p->p_cptr = 0;						// 复位新进程的最新子进程指针.
    8ab2:	8b 44 24 08          	mov    0x8(%esp),%eax
    8ab6:	c7 80 c0 02 00 00 00 	movl   $0x0,0x2c0(%eax)
    8abd:	00 00 00 
	p->p_ysptr = 0;						// 复位新进程的比邻年轻兄弟进程指针.
    8ac0:	8b 44 24 08          	mov    0x8(%esp),%eax
    8ac4:	c7 80 c4 02 00 00 00 	movl   $0x0,0x2c4(%eax)
    8acb:	00 00 00 
	p->p_osptr = current->p_cptr;		// 设置新进程的比邻老兄兄弟进程指针.
    8ace:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    8ad3:	8b 90 c0 02 00 00    	mov    0x2c0(%eax),%edx
    8ad9:	8b 44 24 08          	mov    0x8(%esp),%eax
    8add:	89 90 c8 02 00 00    	mov    %edx,0x2c8(%eax)
	if (p->p_osptr)						// 若新进程有老兄兄弟进程,则让其年轻进程兄弟指针指向新进程
    8ae3:	8b 44 24 08          	mov    0x8(%esp),%eax
    8ae7:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    8aed:	85 c0                	test   %eax,%eax
    8aef:	74 14                	je     8b05 <copy_process+0x50a>
		p->p_osptr->p_ysptr = p;
    8af1:	8b 44 24 08          	mov    0x8(%esp),%eax
    8af5:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    8afb:	8b 54 24 08          	mov    0x8(%esp),%edx
    8aff:	89 90 c4 02 00 00    	mov    %edx,0x2c4(%eax)
	current->p_cptr = p;				// 让当前进程最新子进程指针指向新进程.
    8b05:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    8b0a:	8b 54 24 08          	mov    0x8(%esp),%edx
    8b0e:	89 90 c0 02 00 00    	mov    %edx,0x2c0(%eax)
	p->state = TASK_RUNNING;			/* do this last, just in case */        /* 设置进程状态为待运行状态栏 */
    8b14:	8b 44 24 08          	mov    0x8(%esp),%eax
    8b18:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	Log(LOG_INFO_TYPE, "<<<<< fork new process current_pid = %d, child_pid = %d, nr = %d >>>>>\n", current->pid, p->pid, nr);
    8b1e:	8b 44 24 08          	mov    0x8(%esp),%eax
    8b22:	8b 90 2c 02 00 00    	mov    0x22c(%eax),%edx
    8b28:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    8b2d:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    8b33:	83 ec 0c             	sub    $0xc,%esp
    8b36:	ff 74 24 3c          	pushl  0x3c(%esp)
    8b3a:	52                   	push   %edx
    8b3b:	50                   	push   %eax
    8b3c:	68 f4 2d 02 00       	push   $0x22df4
    8b41:	6a 00                	push   $0x0
    8b43:	e8 bf 9d 01 00       	call   22907 <Log>
    8b48:	83 c4 20             	add    $0x20,%esp
	return last_pid;        			// 返回新进程号
    8b4b:	a1 48 ee 02 00       	mov    0x2ee48,%eax
}
    8b50:	83 c4 1c             	add    $0x1c,%esp
    8b53:	5b                   	pop    %ebx
    8b54:	5e                   	pop    %esi
    8b55:	5f                   	pop    %edi
    8b56:	5d                   	pop    %ebp
    8b57:	c3                   	ret    

00008b58 <find_empty_process>:

// 为新进程取得不重复的进程号last_pid.函数返回在任务数组中的任务号(数组项).
int find_empty_process(void)
{
    8b58:	83 ec 10             	sub    $0x10,%esp

	// 首先获取新的进程号.如果last_pid增1后超出进程号的正数表示范围,则重新从1开始使用pid号.然后在任务数组中搜索刚设置的pid号是
	// 否已经被任何任务使用.如果是则跳转到函数开始处理重新获得一个pid号.接着在任务数组中为新任务寻找一个空闲项,并返回项号.last_pid是一
	// 个全局变量,不用返回.如果此时任务数组中64个项已经被全部占用,则返回出错码.
	repeat:
		if ((++last_pid) < 0) last_pid = 1;
    8b5b:	a1 48 ee 02 00       	mov    0x2ee48,%eax
    8b60:	83 c0 01             	add    $0x1,%eax
    8b63:	a3 48 ee 02 00       	mov    %eax,0x2ee48
    8b68:	a1 48 ee 02 00       	mov    0x2ee48,%eax
    8b6d:	85 c0                	test   %eax,%eax
    8b6f:	79 0a                	jns    8b7b <find_empty_process+0x23>
    8b71:	c7 05 48 ee 02 00 01 	movl   $0x1,0x2ee48
    8b78:	00 00 00 
		for(i = 0 ; i < NR_TASKS ; i++)
    8b7b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    8b82:	00 
    8b83:	eb 48                	jmp    8bcd <find_empty_process+0x75>
			if (task[i] && ((task[i]->pid == last_pid) ||
    8b85:	8b 44 24 0c          	mov    0xc(%esp),%eax
    8b89:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    8b90:	85 c0                	test   %eax,%eax
    8b92:	74 34                	je     8bc8 <find_empty_process+0x70>
    8b94:	8b 44 24 0c          	mov    0xc(%esp),%eax
    8b98:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    8b9f:	8b 90 2c 02 00 00    	mov    0x22c(%eax),%edx
    8ba5:	a1 48 ee 02 00       	mov    0x2ee48,%eax
    8baa:	39 c2                	cmp    %eax,%edx
    8bac:	74 ad                	je     8b5b <find_empty_process+0x3>
				        (task[i]->pgrp == last_pid)))
    8bae:	8b 44 24 0c          	mov    0xc(%esp),%eax
    8bb2:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    8bb9:	8b 90 30 02 00 00    	mov    0x230(%eax),%edx
    8bbf:	a1 48 ee 02 00       	mov    0x2ee48,%eax
	// 否已经被任何任务使用.如果是则跳转到函数开始处理重新获得一个pid号.接着在任务数组中为新任务寻找一个空闲项,并返回项号.last_pid是一
	// 个全局变量,不用返回.如果此时任务数组中64个项已经被全部占用,则返回出错码.
	repeat:
		if ((++last_pid) < 0) last_pid = 1;
		for(i = 0 ; i < NR_TASKS ; i++)
			if (task[i] && ((task[i]->pid == last_pid) ||
    8bc4:	39 c2                	cmp    %eax,%edx
    8bc6:	74 93                	je     8b5b <find_empty_process+0x3>
	// 首先获取新的进程号.如果last_pid增1后超出进程号的正数表示范围,则重新从1开始使用pid号.然后在任务数组中搜索刚设置的pid号是
	// 否已经被任何任务使用.如果是则跳转到函数开始处理重新获得一个pid号.接着在任务数组中为新任务寻找一个空闲项,并返回项号.last_pid是一
	// 个全局变量,不用返回.如果此时任务数组中64个项已经被全部占用,则返回出错码.
	repeat:
		if ((++last_pid) < 0) last_pid = 1;
		for(i = 0 ; i < NR_TASKS ; i++)
    8bc8:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    8bcd:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    8bd2:	7e b1                	jle    8b85 <find_empty_process+0x2d>
			if (task[i] && ((task[i]->pid == last_pid) ||
				        (task[i]->pgrp == last_pid)))
				goto repeat;
	for(i = 1 ; i < NR_TASKS ; i++)
    8bd4:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
    8bdb:	00 
    8bdc:	eb 1a                	jmp    8bf8 <find_empty_process+0xa0>
		if (!task[i])
    8bde:	8b 44 24 0c          	mov    0xc(%esp),%eax
    8be2:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    8be9:	85 c0                	test   %eax,%eax
    8beb:	75 06                	jne    8bf3 <find_empty_process+0x9b>
			return i;
    8bed:	8b 44 24 0c          	mov    0xc(%esp),%eax
    8bf1:	eb 11                	jmp    8c04 <find_empty_process+0xac>
		if ((++last_pid) < 0) last_pid = 1;
		for(i = 0 ; i < NR_TASKS ; i++)
			if (task[i] && ((task[i]->pid == last_pid) ||
				        (task[i]->pgrp == last_pid)))
				goto repeat;
	for(i = 1 ; i < NR_TASKS ; i++)
    8bf3:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    8bf8:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    8bfd:	7e df                	jle    8bde <find_empty_process+0x86>
		if (!task[i])
			return i;
	return -EAGAIN;
    8bff:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
}
    8c04:	83 c4 10             	add    $0x10,%esp
    8c07:	c3                   	ret    

00008c08 <panic>:
// 如果当前进程是任务0的话,还说明是交换任务出错,并且还没有运行文件系统同步函数.
// 函数名前的关键字volatile用于告诉编译器gcc该函数不会返回.这样可让gcc产生更好一些的代码,更重要的是使用这个关键字
// 以避免产生某些(未初始化变量的)假警告信息.
// 等同于现在gcc的函数属性说明:void panic(const char *s) __attribute__((noreturn));
void panic(const char * s)
{
    8c08:	83 ec 0c             	sub    $0xc,%esp
	printk("Kernel panic: %s\n\r", s);
    8c0b:	83 ec 08             	sub    $0x8,%esp
    8c0e:	ff 74 24 18          	pushl  0x18(%esp)
    8c12:	68 3c 2e 02 00       	push   $0x22e3c
    8c17:	e8 2b 00 00 00       	call   8c47 <printk>
    8c1c:	83 c4 10             	add    $0x10,%esp
	if (current == task[0])
    8c1f:	8b 15 c0 e1 02 00    	mov    0x2e1c0,%edx
    8c25:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    8c2a:	39 c2                	cmp    %eax,%edx
    8c2c:	75 12                	jne    8c40 <panic+0x38>
		printk("In swapper task - not syncing\n\r");
    8c2e:	83 ec 0c             	sub    $0xc,%esp
    8c31:	68 50 2e 02 00       	push   $0x22e50
    8c36:	e8 0c 00 00 00       	call   8c47 <printk>
    8c3b:	83 c4 10             	add    $0x10,%esp
    8c3e:	eb 05                	jmp    8c45 <panic+0x3d>
	else
		sys_sync();
    8c40:	e8 c1 62 00 00       	call   ef06 <sys_sync>
	for(;;);
    8c45:	eb fe                	jmp    8c45 <panic+0x3d>

00008c47 <printk>:
// 函数vsprintf()定义在linux/kernel/vsprintf.c中
extern int vsprintf(char * buf, const char * fmt, va_list args);

// 内核使用的显示函数.
int printk(const char *fmt, ...)
{
    8c47:	83 ec 1c             	sub    $0x1c,%esp
	va_list args;							// va_list实际上是一个字符指针类型.
	int i;

	// 运行参数处理开始函数.然后使用格式串fmt将参数列表args输出到buf中.返回值i等于输出字符串的长度.再运行参数处理结束函数.最后调用控制台显示
	// 函数并返回显示字符数.
	va_start(args, fmt);
    8c4a:	8d 44 24 24          	lea    0x24(%esp),%eax
    8c4e:	89 44 24 0c          	mov    %eax,0xc(%esp)
	i = vsprintf(buf, fmt, args);
    8c52:	8b 44 24 20          	mov    0x20(%esp),%eax
    8c56:	83 ec 04             	sub    $0x4,%esp
    8c59:	ff 74 24 10          	pushl  0x10(%esp)
    8c5d:	50                   	push   %eax
    8c5e:	68 60 ee 02 00       	push   $0x2ee60
    8c63:	e8 1d 03 00 00       	call   8f85 <vsprintf>
    8c68:	83 c4 10             	add    $0x10,%esp
    8c6b:	89 44 24 08          	mov    %eax,0x8(%esp)
	va_end(args);
	console_print(buf);						// chr_drv/console.c
    8c6f:	83 ec 0c             	sub    $0xc,%esp
    8c72:	68 60 ee 02 00       	push   $0x2ee60
    8c77:	e8 00 48 01 00       	call   1d47c <console_print>
    8c7c:	83 c4 10             	add    $0x10,%esp
	return i;
    8c7f:	8b 44 24 08          	mov    0x8(%esp),%eax
}
    8c83:	83 c4 1c             	add    $0x1c,%esp
    8c86:	c3                   	ret    

00008c87 <strlen>:
// 计算字符串长度.
// 参数:s - 字符串
// %0 - ecx(__res),%1 - edi(字符串指针s),%2 - eax(0),%3 - ecx(0xffffffff).
// 返回:返回字符串长度.
static inline int strlen(const char * s)
{
    8c87:	57                   	push   %edi
register int __res __asm__("cx");       					// __res是寄存器变量(ecx).
__asm__(
    8c88:	8b 54 24 08          	mov    0x8(%esp),%edx
    8c8c:	b8 00 00 00 00       	mov    $0x0,%eax
    8c91:	b9 ff ff ff ff       	mov    $0xffffffff,%ecx
    8c96:	89 d7                	mov    %edx,%edi
    8c98:	fc                   	cld    
    8c99:	f2 ae                	repnz scas %es:(%edi),%al
    8c9b:	f7 d1                	not    %ecx
    8c9d:	49                   	dec    %ecx
	"repne\n\t"												// al(0)与字符串中字符es:[edi比较,
	"scasb\n\t"												// 若不相等就一直比较.
	"notl %0\n\t"											// ecx取反.
	"decl %0"												// ecx--,得字符串的长度值.
	:"=c" (__res):"D" (s), "a" (0), "0" (0xffffffff));
return __res;												// 返回字符串长度值.
    8c9e:	89 c8                	mov    %ecx,%eax
}
    8ca0:	5f                   	pop    %edi
    8ca1:	c3                   	ret    

00008ca2 <skip_atoi>:
/* 我们使用下面的定义,这样我们就可以不使用ctype库了 */
#define is_digit(c)	((c) >= '0' && (c) <= '9')	// 判断字符c是否为数字字符.

// 该函数将字符数字串转换成整数.输入是数字串指针的指针,返回是结果数值.另外指针将前移.
static int skip_atoi(const char **s)
{
    8ca2:	53                   	push   %ebx
    8ca3:	83 ec 10             	sub    $0x10,%esp
	int i = 0;
    8ca6:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    8cad:	00 

	while (is_digit(**s))
    8cae:	eb 2d                	jmp    8cdd <skip_atoi+0x3b>
		i = i*10 + *((*s)++) - '0';
    8cb0:	8b 54 24 0c          	mov    0xc(%esp),%edx
    8cb4:	89 d0                	mov    %edx,%eax
    8cb6:	c1 e0 02             	shl    $0x2,%eax
    8cb9:	01 d0                	add    %edx,%eax
    8cbb:	01 c0                	add    %eax,%eax
    8cbd:	89 c3                	mov    %eax,%ebx
    8cbf:	8b 44 24 18          	mov    0x18(%esp),%eax
    8cc3:	8b 00                	mov    (%eax),%eax
    8cc5:	8d 48 01             	lea    0x1(%eax),%ecx
    8cc8:	8b 54 24 18          	mov    0x18(%esp),%edx
    8ccc:	89 0a                	mov    %ecx,(%edx)
    8cce:	0f b6 00             	movzbl (%eax),%eax
    8cd1:	0f be c0             	movsbl %al,%eax
    8cd4:	01 d8                	add    %ebx,%eax
    8cd6:	83 e8 30             	sub    $0x30,%eax
    8cd9:	89 44 24 0c          	mov    %eax,0xc(%esp)
// 该函数将字符数字串转换成整数.输入是数字串指针的指针,返回是结果数值.另外指针将前移.
static int skip_atoi(const char **s)
{
	int i = 0;

	while (is_digit(**s))
    8cdd:	8b 44 24 18          	mov    0x18(%esp),%eax
    8ce1:	8b 00                	mov    (%eax),%eax
    8ce3:	0f b6 00             	movzbl (%eax),%eax
    8ce6:	3c 2f                	cmp    $0x2f,%al
    8ce8:	7e 0d                	jle    8cf7 <skip_atoi+0x55>
    8cea:	8b 44 24 18          	mov    0x18(%esp),%eax
    8cee:	8b 00                	mov    (%eax),%eax
    8cf0:	0f b6 00             	movzbl (%eax),%eax
    8cf3:	3c 39                	cmp    $0x39,%al
    8cf5:	7e b9                	jle    8cb0 <skip_atoi+0xe>
		i = i*10 + *((*s)++) - '0';
	return i;
    8cf7:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    8cfb:	83 c4 10             	add    $0x10,%esp
    8cfe:	5b                   	pop    %ebx
    8cff:	c3                   	ret    

00008d00 <number>:
// 将整数转换为指定进制的字符串.
// 输入: num-整数; base-进制; size-字符串长度;precision-数字长度(精度);type-类型选项.
// 输出: 数字转换成字符串后指向该字符串末端后面的指针.
static char * number(char * str, int num, int base, int size, int precision
	,int type)
{
    8d00:	53                   	push   %ebx
    8d01:	83 ec 40             	sub    $0x40,%esp
	char c,sign,tmp[36];
	const char *digits="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    8d04:	c7 44 24 38 70 2e 02 	movl   $0x22e70,0x38(%esp)
    8d0b:	00 
	int i;

	// 如果类型type指出用小写字母,则定义小写字母集.
	// 如果类型指出要左调整(靠左边界),则屏蔽类型中的填零标志.
	// 如果进制基数小于2或大于36,则退出处理,即本程序只能处理基数在2-36之间的数.
	if (type & SMALL) digits = "0123456789abcdefghijklmnopqrstuvwxyz";
    8d0c:	8b 44 24 5c          	mov    0x5c(%esp),%eax
    8d10:	83 e0 40             	and    $0x40,%eax
    8d13:	85 c0                	test   %eax,%eax
    8d15:	74 08                	je     8d1f <number+0x1f>
    8d17:	c7 44 24 38 98 2e 02 	movl   $0x22e98,0x38(%esp)
    8d1e:	00 
	if (type & LEFT) type &= ~ZEROPAD;
    8d1f:	8b 44 24 5c          	mov    0x5c(%esp),%eax
    8d23:	83 e0 10             	and    $0x10,%eax
    8d26:	85 c0                	test   %eax,%eax
    8d28:	74 05                	je     8d2f <number+0x2f>
    8d2a:	83 64 24 5c fe       	andl   $0xfffffffe,0x5c(%esp)
	if (base < 2 || base > 36)
    8d2f:	83 7c 24 50 01       	cmpl   $0x1,0x50(%esp)
    8d34:	7e 07                	jle    8d3d <number+0x3d>
    8d36:	83 7c 24 50 24       	cmpl   $0x24,0x50(%esp)
    8d3b:	7e 0a                	jle    8d47 <number+0x47>
		return 0;
    8d3d:	b8 00 00 00 00       	mov    $0x0,%eax
    8d42:	e9 39 02 00 00       	jmp    8f80 <number+0x280>
	// 如果类型指出要填零,则置字符变量c='0',否则c等于空格字符.
	// 如果类型指出是带符号数并且数值num小于0,则置符号变量sign=负号,并使num取绝对值.
	// 否则如果类型指出是加号,则置sign=加号,否则若类型带空格标志则sign=空格,否则置0.
	c = (type & ZEROPAD) ? '0' : ' ' ;
    8d47:	8b 44 24 5c          	mov    0x5c(%esp),%eax
    8d4b:	83 e0 01             	and    $0x1,%eax
    8d4e:	85 c0                	test   %eax,%eax
    8d50:	74 07                	je     8d59 <number+0x59>
    8d52:	b8 30 00 00 00       	mov    $0x30,%eax
    8d57:	eb 05                	jmp    8d5e <number+0x5e>
    8d59:	b8 20 00 00 00       	mov    $0x20,%eax
    8d5e:	88 44 24 33          	mov    %al,0x33(%esp)
	if (type & SIGN && num < 0) {
    8d62:	8b 44 24 5c          	mov    0x5c(%esp),%eax
    8d66:	83 e0 02             	and    $0x2,%eax
    8d69:	85 c0                	test   %eax,%eax
    8d6b:	74 12                	je     8d7f <number+0x7f>
    8d6d:	83 7c 24 4c 00       	cmpl   $0x0,0x4c(%esp)
    8d72:	79 0b                	jns    8d7f <number+0x7f>
		sign = '-';
    8d74:	c6 44 24 3f 2d       	movb   $0x2d,0x3f(%esp)
		num = -num;
    8d79:	f7 5c 24 4c          	negl   0x4c(%esp)
    8d7d:	eb 2d                	jmp    8dac <number+0xac>
	} else
		sign = (type & PLUS) ? '+' : ((type & SPACE) ? ' ' : 0);
    8d7f:	8b 44 24 5c          	mov    0x5c(%esp),%eax
    8d83:	83 e0 04             	and    $0x4,%eax
    8d86:	85 c0                	test   %eax,%eax
    8d88:	75 19                	jne    8da3 <number+0xa3>
    8d8a:	8b 44 24 5c          	mov    0x5c(%esp),%eax
    8d8e:	83 e0 08             	and    $0x8,%eax
    8d91:	85 c0                	test   %eax,%eax
    8d93:	74 07                	je     8d9c <number+0x9c>
    8d95:	b8 20 00 00 00       	mov    $0x20,%eax
    8d9a:	eb 0c                	jmp    8da8 <number+0xa8>
    8d9c:	b8 00 00 00 00       	mov    $0x0,%eax
    8da1:	eb 05                	jmp    8da8 <number+0xa8>
    8da3:	b8 2b 00 00 00       	mov    $0x2b,%eax
    8da8:	88 44 24 3f          	mov    %al,0x3f(%esp)
	// 若带符号,则宽度值减1.若类型指出是特殊转换,则对十六进制宽度再减少2位(用于0x),对于八进制宽度减1(用于八进制转换结果前放一个零).
	if (sign) size--;
    8dac:	80 7c 24 3f 00       	cmpb   $0x0,0x3f(%esp)
    8db1:	74 05                	je     8db8 <number+0xb8>
    8db3:	83 6c 24 54 01       	subl   $0x1,0x54(%esp)
	if (type & SPECIAL)
    8db8:	8b 44 24 5c          	mov    0x5c(%esp),%eax
    8dbc:	83 e0 20             	and    $0x20,%eax
    8dbf:	85 c0                	test   %eax,%eax
    8dc1:	74 1a                	je     8ddd <number+0xdd>
		if (base == 16) size -= 2;
    8dc3:	83 7c 24 50 10       	cmpl   $0x10,0x50(%esp)
    8dc8:	75 07                	jne    8dd1 <number+0xd1>
    8dca:	83 6c 24 54 02       	subl   $0x2,0x54(%esp)
    8dcf:	eb 0c                	jmp    8ddd <number+0xdd>
		else if (base == 8) size--;
    8dd1:	83 7c 24 50 08       	cmpl   $0x8,0x50(%esp)
    8dd6:	75 05                	jne    8ddd <number+0xdd>
    8dd8:	83 6c 24 54 01       	subl   $0x1,0x54(%esp)
	// 如果数值num为0,则临时字符串='0';否则根据给定的基数将数值num转换成字符形式.
	i = 0;
    8ddd:	c7 44 24 34 00 00 00 	movl   $0x0,0x34(%esp)
    8de4:	00 
	if (num == 0)
    8de5:	83 7c 24 4c 00       	cmpl   $0x0,0x4c(%esp)
    8dea:	75 47                	jne    8e33 <number+0x133>
		tmp[i++] = '0';
    8dec:	8b 44 24 34          	mov    0x34(%esp),%eax
    8df0:	8d 50 01             	lea    0x1(%eax),%edx
    8df3:	89 54 24 34          	mov    %edx,0x34(%esp)
    8df7:	c6 44 04 08 30       	movb   $0x30,0x8(%esp,%eax,1)
    8dfc:	eb 3c                	jmp    8e3a <number+0x13a>
	else while (num != 0)
		tmp[i++] = digits[do_div(num, base)];
    8dfe:	8b 4c 24 34          	mov    0x34(%esp),%ecx
    8e02:	8d 41 01             	lea    0x1(%ecx),%eax
    8e05:	89 44 24 34          	mov    %eax,0x34(%esp)
    8e09:	8b 44 24 4c          	mov    0x4c(%esp),%eax
    8e0d:	ba 00 00 00 00       	mov    $0x0,%edx
    8e12:	8b 5c 24 50          	mov    0x50(%esp),%ebx
    8e16:	f7 f3                	div    %ebx
    8e18:	89 44 24 4c          	mov    %eax,0x4c(%esp)
    8e1c:	89 54 24 2c          	mov    %edx,0x2c(%esp)
    8e20:	8b 44 24 2c          	mov    0x2c(%esp),%eax
    8e24:	89 c2                	mov    %eax,%edx
    8e26:	8b 44 24 38          	mov    0x38(%esp),%eax
    8e2a:	01 d0                	add    %edx,%eax
    8e2c:	0f b6 00             	movzbl (%eax),%eax
    8e2f:	88 44 0c 08          	mov    %al,0x8(%esp,%ecx,1)
		else if (base == 8) size--;
	// 如果数值num为0,则临时字符串='0';否则根据给定的基数将数值num转换成字符形式.
	i = 0;
	if (num == 0)
		tmp[i++] = '0';
	else while (num != 0)
    8e33:	83 7c 24 4c 00       	cmpl   $0x0,0x4c(%esp)
    8e38:	75 c4                	jne    8dfe <number+0xfe>
		tmp[i++] = digits[do_div(num, base)];
	// 若数值字符个数大于精度值,则精度值扩展为数字个数值.
	// 宽度值size减去用于存放数值字符的个数.
	if (i > precision) precision = i;
    8e3a:	8b 44 24 34          	mov    0x34(%esp),%eax
    8e3e:	3b 44 24 58          	cmp    0x58(%esp),%eax
    8e42:	7e 08                	jle    8e4c <number+0x14c>
    8e44:	8b 44 24 34          	mov    0x34(%esp),%eax
    8e48:	89 44 24 58          	mov    %eax,0x58(%esp)
	size -= precision;
    8e4c:	8b 44 24 58          	mov    0x58(%esp),%eax
    8e50:	29 44 24 54          	sub    %eax,0x54(%esp)
	// 从这里真正开始形成所需要的转换结果,并暂时放在字符串str中.
	// 若类型中没有填零(ZEROPAD)和左靠齐(左调整)标志,则在str中首先填放剩余宽度值指出的空格数.若需带符号位,则存入符号.
	if (!(type & (ZEROPAD + LEFT)))
    8e54:	8b 44 24 5c          	mov    0x5c(%esp),%eax
    8e58:	83 e0 11             	and    $0x11,%eax
    8e5b:	85 c0                	test   %eax,%eax
    8e5d:	75 1f                	jne    8e7e <number+0x17e>
		while(size-- > 0)
    8e5f:	eb 0e                	jmp    8e6f <number+0x16f>
			*str++ = ' ';
    8e61:	8b 44 24 48          	mov    0x48(%esp),%eax
    8e65:	8d 50 01             	lea    0x1(%eax),%edx
    8e68:	89 54 24 48          	mov    %edx,0x48(%esp)
    8e6c:	c6 00 20             	movb   $0x20,(%eax)
	if (i > precision) precision = i;
	size -= precision;
	// 从这里真正开始形成所需要的转换结果,并暂时放在字符串str中.
	// 若类型中没有填零(ZEROPAD)和左靠齐(左调整)标志,则在str中首先填放剩余宽度值指出的空格数.若需带符号位,则存入符号.
	if (!(type & (ZEROPAD + LEFT)))
		while(size-- > 0)
    8e6f:	8b 44 24 54          	mov    0x54(%esp),%eax
    8e73:	8d 50 ff             	lea    -0x1(%eax),%edx
    8e76:	89 54 24 54          	mov    %edx,0x54(%esp)
    8e7a:	85 c0                	test   %eax,%eax
    8e7c:	7f e3                	jg     8e61 <number+0x161>
			*str++ = ' ';
	if (sign)
    8e7e:	80 7c 24 3f 00       	cmpb   $0x0,0x3f(%esp)
    8e83:	74 12                	je     8e97 <number+0x197>
		*str++ = sign;
    8e85:	8b 44 24 48          	mov    0x48(%esp),%eax
    8e89:	8d 50 01             	lea    0x1(%eax),%edx
    8e8c:	89 54 24 48          	mov    %edx,0x48(%esp)
    8e90:	0f b6 54 24 3f       	movzbl 0x3f(%esp),%edx
    8e95:	88 10                	mov    %dl,(%eax)
	// 若类型指出是特殊转换,则对于八进制转换结果头一位放置一个'0';而对于十六进制则存放'0x'.
	if (type & SPECIAL)
    8e97:	8b 44 24 5c          	mov    0x5c(%esp),%eax
    8e9b:	83 e0 20             	and    $0x20,%eax
    8e9e:	85 c0                	test   %eax,%eax
    8ea0:	74 41                	je     8ee3 <number+0x1e3>
		if (base == 8)
    8ea2:	83 7c 24 50 08       	cmpl   $0x8,0x50(%esp)
    8ea7:	75 10                	jne    8eb9 <number+0x1b9>
			*str++ = '0';
    8ea9:	8b 44 24 48          	mov    0x48(%esp),%eax
    8ead:	8d 50 01             	lea    0x1(%eax),%edx
    8eb0:	89 54 24 48          	mov    %edx,0x48(%esp)
    8eb4:	c6 00 30             	movb   $0x30,(%eax)
    8eb7:	eb 2a                	jmp    8ee3 <number+0x1e3>
		else if (base == 16) {
    8eb9:	83 7c 24 50 10       	cmpl   $0x10,0x50(%esp)
    8ebe:	75 23                	jne    8ee3 <number+0x1e3>
			*str++ = '0';
    8ec0:	8b 44 24 48          	mov    0x48(%esp),%eax
    8ec4:	8d 50 01             	lea    0x1(%eax),%edx
    8ec7:	89 54 24 48          	mov    %edx,0x48(%esp)
    8ecb:	c6 00 30             	movb   $0x30,(%eax)
			*str++ = digits[33];						// 'X'或'x'
    8ece:	8b 44 24 48          	mov    0x48(%esp),%eax
    8ed2:	8d 50 01             	lea    0x1(%eax),%edx
    8ed5:	89 54 24 48          	mov    %edx,0x48(%esp)
    8ed9:	8b 54 24 38          	mov    0x38(%esp),%edx
    8edd:	0f b6 52 21          	movzbl 0x21(%edx),%edx
    8ee1:	88 10                	mov    %dl,(%eax)
		}
	// 若类型中没有左调整(左靠齐)标志,则在剩余宽度中存放c字符('0'或空格)
	if (!(type & LEFT))
    8ee3:	8b 44 24 5c          	mov    0x5c(%esp),%eax
    8ee7:	83 e0 10             	and    $0x10,%eax
    8eea:	85 c0                	test   %eax,%eax
    8eec:	75 33                	jne    8f21 <number+0x221>
		while(size-- > 0)
    8eee:	eb 12                	jmp    8f02 <number+0x202>
			*str++ = c;
    8ef0:	8b 44 24 48          	mov    0x48(%esp),%eax
    8ef4:	8d 50 01             	lea    0x1(%eax),%edx
    8ef7:	89 54 24 48          	mov    %edx,0x48(%esp)
    8efb:	0f b6 54 24 33       	movzbl 0x33(%esp),%edx
    8f00:	88 10                	mov    %dl,(%eax)
			*str++ = '0';
			*str++ = digits[33];						// 'X'或'x'
		}
	// 若类型中没有左调整(左靠齐)标志,则在剩余宽度中存放c字符('0'或空格)
	if (!(type & LEFT))
		while(size-- > 0)
    8f02:	8b 44 24 54          	mov    0x54(%esp),%eax
    8f06:	8d 50 ff             	lea    -0x1(%eax),%edx
    8f09:	89 54 24 54          	mov    %edx,0x54(%esp)
    8f0d:	85 c0                	test   %eax,%eax
    8f0f:	7f df                	jg     8ef0 <number+0x1f0>
			*str++ = c;
	// 此时i存有数值num的数字个数.若数字个数小于精度值,则str中放入(精度值-i)个'0'.
	while(i < precision--)
    8f11:	eb 0e                	jmp    8f21 <number+0x221>
		*str++ = '0';
    8f13:	8b 44 24 48          	mov    0x48(%esp),%eax
    8f17:	8d 50 01             	lea    0x1(%eax),%edx
    8f1a:	89 54 24 48          	mov    %edx,0x48(%esp)
    8f1e:	c6 00 30             	movb   $0x30,(%eax)
	// 若类型中没有左调整(左靠齐)标志,则在剩余宽度中存放c字符('0'或空格)
	if (!(type & LEFT))
		while(size-- > 0)
			*str++ = c;
	// 此时i存有数值num的数字个数.若数字个数小于精度值,则str中放入(精度值-i)个'0'.
	while(i < precision--)
    8f21:	8b 44 24 58          	mov    0x58(%esp),%eax
    8f25:	8d 50 ff             	lea    -0x1(%eax),%edx
    8f28:	89 54 24 58          	mov    %edx,0x58(%esp)
    8f2c:	3b 44 24 34          	cmp    0x34(%esp),%eax
    8f30:	7f e1                	jg     8f13 <number+0x213>
		*str++ = '0';
	// 将数值转换好的数字字符填入str中.共i个.
	while(i-- > 0)
    8f32:	eb 1a                	jmp    8f4e <number+0x24e>
		*str++ = tmp[i];
    8f34:	8b 44 24 48          	mov    0x48(%esp),%eax
    8f38:	8d 50 01             	lea    0x1(%eax),%edx
    8f3b:	89 54 24 48          	mov    %edx,0x48(%esp)
    8f3f:	8d 4c 24 08          	lea    0x8(%esp),%ecx
    8f43:	8b 54 24 34          	mov    0x34(%esp),%edx
    8f47:	01 ca                	add    %ecx,%edx
    8f49:	0f b6 12             	movzbl (%edx),%edx
    8f4c:	88 10                	mov    %dl,(%eax)
			*str++ = c;
	// 此时i存有数值num的数字个数.若数字个数小于精度值,则str中放入(精度值-i)个'0'.
	while(i < precision--)
		*str++ = '0';
	// 将数值转换好的数字字符填入str中.共i个.
	while(i-- > 0)
    8f4e:	8b 44 24 34          	mov    0x34(%esp),%eax
    8f52:	8d 50 ff             	lea    -0x1(%eax),%edx
    8f55:	89 54 24 34          	mov    %edx,0x34(%esp)
    8f59:	85 c0                	test   %eax,%eax
    8f5b:	7f d7                	jg     8f34 <number+0x234>
		*str++ = tmp[i];
	// 若宽度值仍大于零,则表示类型标志中有左靠齐标志.则在剩余宽度中放入空格.
	while(size-- > 0)
    8f5d:	eb 0e                	jmp    8f6d <number+0x26d>
		*str++ = ' ';
    8f5f:	8b 44 24 48          	mov    0x48(%esp),%eax
    8f63:	8d 50 01             	lea    0x1(%eax),%edx
    8f66:	89 54 24 48          	mov    %edx,0x48(%esp)
    8f6a:	c6 00 20             	movb   $0x20,(%eax)
		*str++ = '0';
	// 将数值转换好的数字字符填入str中.共i个.
	while(i-- > 0)
		*str++ = tmp[i];
	// 若宽度值仍大于零,则表示类型标志中有左靠齐标志.则在剩余宽度中放入空格.
	while(size-- > 0)
    8f6d:	8b 44 24 54          	mov    0x54(%esp),%eax
    8f71:	8d 50 ff             	lea    -0x1(%eax),%edx
    8f74:	89 54 24 54          	mov    %edx,0x54(%esp)
    8f78:	85 c0                	test   %eax,%eax
    8f7a:	7f e3                	jg     8f5f <number+0x25f>
		*str++ = ' ';
	return str;											// 返回转换好的指向字符串末端后的指针.
    8f7c:	8b 44 24 48          	mov    0x48(%esp),%eax
}
    8f80:	83 c4 40             	add    $0x40,%esp
    8f83:	5b                   	pop    %ebx
    8f84:	c3                   	ret    

00008f85 <vsprintf>:

// 下面函数是送格式化输出到字符串中.
// 为了能在内核中使用格式化的输出,Linus在内核实现了该C标准函数.
// 其中参数fmt是格式字符串;args是个数变化的值;buf是输出字符串缓冲区.
int vsprintf(char *buf, const char *fmt, va_list args)
{
    8f85:	83 ec 30             	sub    $0x30,%esp
				   											number of chars for from string */
														/* min.整数数字个数;max.字符串中字符个数 */
	int qualifier;										/* 'h', 'l', or 'L' for integer fields */	/* 'h','l',或 'L'用于整数字段 */

	// 首先将字符指针指向buf,然后扫描格式字符串,对各个格式转换指示进行相应的处理.
	for (str=buf ; *fmt ; ++fmt) {
    8f88:	8b 44 24 34          	mov    0x34(%esp),%eax
    8f8c:	89 44 24 24          	mov    %eax,0x24(%esp)
    8f90:	e9 3b 04 00 00       	jmp    93d0 <vsprintf+0x44b>
		// 格式转换指示字符串均'%'开始,这里从fmt格式字符串中扫描'%',寻找格式转换字符串的开始.不是格式指示的一般字符均被依次存入str.
		if (*fmt != '%') {
    8f95:	8b 44 24 38          	mov    0x38(%esp),%eax
    8f99:	0f b6 00             	movzbl (%eax),%eax
    8f9c:	3c 25                	cmp    $0x25,%al
    8f9e:	74 19                	je     8fb9 <vsprintf+0x34>
			*str++ = *fmt;
    8fa0:	8b 44 24 24          	mov    0x24(%esp),%eax
    8fa4:	8d 50 01             	lea    0x1(%eax),%edx
    8fa7:	89 54 24 24          	mov    %edx,0x24(%esp)
    8fab:	8b 54 24 38          	mov    0x38(%esp),%edx
    8faf:	0f b6 12             	movzbl (%edx),%edx
    8fb2:	88 10                	mov    %dl,(%eax)
			continue;
    8fb4:	e9 0c 04 00 00       	jmp    93c5 <vsprintf+0x440>
		}

		// 下面取得格式指示字符串中的标志域,并将标志常量放入flags变量中.
		/* process flags */
		flags = 0;
    8fb9:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
    8fc0:	00 
		repeat:
			++fmt;		/* this also skips first '%' */
    8fc1:	8b 44 24 38          	mov    0x38(%esp),%eax
    8fc5:	83 c0 01             	add    $0x1,%eax
    8fc8:	89 44 24 38          	mov    %eax,0x38(%esp)
			switch (*fmt) {
    8fcc:	8b 44 24 38          	mov    0x38(%esp),%eax
    8fd0:	0f b6 00             	movzbl (%eax),%eax
    8fd3:	0f be c0             	movsbl %al,%eax
    8fd6:	83 e8 20             	sub    $0x20,%eax
    8fd9:	83 f8 10             	cmp    $0x10,%eax
    8fdc:	77 2c                	ja     900a <vsprintf+0x85>
    8fde:	8b 04 85 c0 2e 02 00 	mov    0x22ec0(,%eax,4),%eax
    8fe5:	ff e0                	jmp    *%eax
				case '-': flags |= LEFT; goto repeat;		// 左靠齐调整
    8fe7:	83 4c 24 1c 10       	orl    $0x10,0x1c(%esp)
    8fec:	eb d3                	jmp    8fc1 <vsprintf+0x3c>
				case '+': flags |= PLUS; goto repeat;		// 放加号
    8fee:	83 4c 24 1c 04       	orl    $0x4,0x1c(%esp)
    8ff3:	eb cc                	jmp    8fc1 <vsprintf+0x3c>
				case ' ': flags |= SPACE; goto repeat;		// 放空格
    8ff5:	83 4c 24 1c 08       	orl    $0x8,0x1c(%esp)
    8ffa:	eb c5                	jmp    8fc1 <vsprintf+0x3c>
				case '#': flags |= SPECIAL; goto repeat;	// 是特殊转换
    8ffc:	83 4c 24 1c 20       	orl    $0x20,0x1c(%esp)
    9001:	eb be                	jmp    8fc1 <vsprintf+0x3c>
				case '0': flags |= ZEROPAD; goto repeat;	// 要填零(即'0')
    9003:	83 4c 24 1c 01       	orl    $0x1,0x1c(%esp)
    9008:	eb b7                	jmp    8fc1 <vsprintf+0x3c>
				}

		// 取当前参数字段宽度域值,放入field_width变量中.如果宽度域中是数值则直接其为宽度值.如果宽度域中是字符'*',表示下一个参数指定宽度.因此
		// 调用va_arg取宽度值.若此时宽度值小于0,则该负数表示其带有标志域'-'标志(左靠齐),因此还需在标志变量中添入该标志,并将字段宽度值取为其绝对值.
		/* get field width */
		field_width = -1;
    900a:	c7 44 24 18 ff ff ff 	movl   $0xffffffff,0x18(%esp)
    9011:	ff 
		if (is_digit(*fmt))
    9012:	8b 44 24 38          	mov    0x38(%esp),%eax
    9016:	0f b6 00             	movzbl (%eax),%eax
    9019:	3c 2f                	cmp    $0x2f,%al
    901b:	7e 1e                	jle    903b <vsprintf+0xb6>
    901d:	8b 44 24 38          	mov    0x38(%esp),%eax
    9021:	0f b6 00             	movzbl (%eax),%eax
    9024:	3c 39                	cmp    $0x39,%al
    9026:	7f 13                	jg     903b <vsprintf+0xb6>
			field_width = skip_atoi(&fmt);
    9028:	8d 44 24 38          	lea    0x38(%esp),%eax
    902c:	50                   	push   %eax
    902d:	e8 70 fc ff ff       	call   8ca2 <skip_atoi>
    9032:	83 c4 04             	add    $0x4,%esp
    9035:	89 44 24 18          	mov    %eax,0x18(%esp)
    9039:	eb 36                	jmp    9071 <vsprintf+0xec>
		else if (*fmt == '*') {
    903b:	8b 44 24 38          	mov    0x38(%esp),%eax
    903f:	0f b6 00             	movzbl (%eax),%eax
    9042:	3c 2a                	cmp    $0x2a,%al
    9044:	75 2b                	jne    9071 <vsprintf+0xec>
			/* it's the next argument */
			++fmt;
    9046:	8b 44 24 38          	mov    0x38(%esp),%eax
    904a:	83 c0 01             	add    $0x1,%eax
    904d:	89 44 24 38          	mov    %eax,0x38(%esp)
			field_width = va_arg(args, int);
    9051:	83 44 24 3c 04       	addl   $0x4,0x3c(%esp)
    9056:	8b 44 24 3c          	mov    0x3c(%esp),%eax
    905a:	8b 40 fc             	mov    -0x4(%eax),%eax
    905d:	89 44 24 18          	mov    %eax,0x18(%esp)
			if (field_width < 0) {
    9061:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
    9066:	79 09                	jns    9071 <vsprintf+0xec>
				field_width = -field_width;
    9068:	f7 5c 24 18          	negl   0x18(%esp)
				flags |= LEFT;
    906c:	83 4c 24 1c 10       	orl    $0x10,0x1c(%esp)
		}

	// 下面这段代码,取格式转换串的精度域,并放入precision变量中.精度域开始的标志是'.'.其处理过程与上面宽度域的类似.如果精度域中是数值则直接取其为
	// 精度值.如果精度域中是字符'*',表示下一个参数指定精度.因此调用va_arg取精度值.若此时宽度值小于0,则将字段精度值取为0.
		/* get the precision */
		precision = -1;
    9071:	c7 44 24 14 ff ff ff 	movl   $0xffffffff,0x14(%esp)
    9078:	ff 
		if (*fmt == '.') {
    9079:	8b 44 24 38          	mov    0x38(%esp),%eax
    907d:	0f b6 00             	movzbl (%eax),%eax
    9080:	3c 2e                	cmp    $0x2e,%al
    9082:	75 69                	jne    90ed <vsprintf+0x168>
			++fmt;
    9084:	8b 44 24 38          	mov    0x38(%esp),%eax
    9088:	83 c0 01             	add    $0x1,%eax
    908b:	89 44 24 38          	mov    %eax,0x38(%esp)
			if (is_digit(*fmt))
    908f:	8b 44 24 38          	mov    0x38(%esp),%eax
    9093:	0f b6 00             	movzbl (%eax),%eax
    9096:	3c 2f                	cmp    $0x2f,%al
    9098:	7e 1e                	jle    90b8 <vsprintf+0x133>
    909a:	8b 44 24 38          	mov    0x38(%esp),%eax
    909e:	0f b6 00             	movzbl (%eax),%eax
    90a1:	3c 39                	cmp    $0x39,%al
    90a3:	7f 13                	jg     90b8 <vsprintf+0x133>
				precision = skip_atoi(&fmt);
    90a5:	8d 44 24 38          	lea    0x38(%esp),%eax
    90a9:	50                   	push   %eax
    90aa:	e8 f3 fb ff ff       	call   8ca2 <skip_atoi>
    90af:	83 c4 04             	add    $0x4,%esp
    90b2:	89 44 24 14          	mov    %eax,0x14(%esp)
    90b6:	eb 26                	jmp    90de <vsprintf+0x159>
			else if (*fmt == '*') {
    90b8:	8b 44 24 38          	mov    0x38(%esp),%eax
    90bc:	0f b6 00             	movzbl (%eax),%eax
    90bf:	3c 2a                	cmp    $0x2a,%al
    90c1:	75 1b                	jne    90de <vsprintf+0x159>
				/* it's the next argument */
                                ++fmt;
    90c3:	8b 44 24 38          	mov    0x38(%esp),%eax
    90c7:	83 c0 01             	add    $0x1,%eax
    90ca:	89 44 24 38          	mov    %eax,0x38(%esp)
				precision = va_arg(args, int);
    90ce:	83 44 24 3c 04       	addl   $0x4,0x3c(%esp)
    90d3:	8b 44 24 3c          	mov    0x3c(%esp),%eax
    90d7:	8b 40 fc             	mov    -0x4(%eax),%eax
    90da:	89 44 24 14          	mov    %eax,0x14(%esp)
			}
			if (precision < 0)
    90de:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    90e3:	79 08                	jns    90ed <vsprintf+0x168>
				precision = 0;
    90e5:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
    90ec:	00 
		}

		// 下面这段代码分析长度修饰符,并将其存入qualifer变量.
		/* get the conversion qualifier */
		qualifier = -1;
    90ed:	c7 44 24 10 ff ff ff 	movl   $0xffffffff,0x10(%esp)
    90f4:	ff 
		if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L') {
    90f5:	8b 44 24 38          	mov    0x38(%esp),%eax
    90f9:	0f b6 00             	movzbl (%eax),%eax
    90fc:	3c 68                	cmp    $0x68,%al
    90fe:	74 16                	je     9116 <vsprintf+0x191>
    9100:	8b 44 24 38          	mov    0x38(%esp),%eax
    9104:	0f b6 00             	movzbl (%eax),%eax
    9107:	3c 6c                	cmp    $0x6c,%al
    9109:	74 0b                	je     9116 <vsprintf+0x191>
    910b:	8b 44 24 38          	mov    0x38(%esp),%eax
    910f:	0f b6 00             	movzbl (%eax),%eax
    9112:	3c 4c                	cmp    $0x4c,%al
    9114:	75 19                	jne    912f <vsprintf+0x1aa>
			qualifier = *fmt;
    9116:	8b 44 24 38          	mov    0x38(%esp),%eax
    911a:	0f b6 00             	movzbl (%eax),%eax
    911d:	0f be c0             	movsbl %al,%eax
    9120:	89 44 24 10          	mov    %eax,0x10(%esp)
			++fmt;
    9124:	8b 44 24 38          	mov    0x38(%esp),%eax
    9128:	83 c0 01             	add    $0x1,%eax
    912b:	89 44 24 38          	mov    %eax,0x38(%esp)
		}

		// 下面分析转换指示符.
		switch (*fmt) {
    912f:	8b 44 24 38          	mov    0x38(%esp),%eax
    9133:	0f b6 00             	movzbl (%eax),%eax
    9136:	0f be c0             	movsbl %al,%eax
    9139:	83 e8 58             	sub    $0x58,%eax
    913c:	83 f8 20             	cmp    $0x20,%eax
    913f:	0f 87 3a 02 00 00    	ja     937f <vsprintf+0x3fa>
    9145:	8b 04 85 04 2f 02 00 	mov    0x22f04(,%eax,4),%eax
    914c:	ff e0                	jmp    *%eax
		// 如果转换指示符是'c',则表示对应参数应是字符.此时如果标志域表明不是左靠齐,则该字段前面放入'宽度域值-1'个空格字符,然后再放入参数字符.如果
		// 宽度域还大于0,则表示左靠齐,则在参数字符后面添加'宽度值-1'个空格字符.
		case 'c':
			if (!(flags & LEFT))
    914e:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    9152:	83 e0 10             	and    $0x10,%eax
    9155:	85 c0                	test   %eax,%eax
    9157:	75 1c                	jne    9175 <vsprintf+0x1f0>
				while (--field_width > 0)
    9159:	eb 0e                	jmp    9169 <vsprintf+0x1e4>
					*str++ = ' ';
    915b:	8b 44 24 24          	mov    0x24(%esp),%eax
    915f:	8d 50 01             	lea    0x1(%eax),%edx
    9162:	89 54 24 24          	mov    %edx,0x24(%esp)
    9166:	c6 00 20             	movb   $0x20,(%eax)
		switch (*fmt) {
		// 如果转换指示符是'c',则表示对应参数应是字符.此时如果标志域表明不是左靠齐,则该字段前面放入'宽度域值-1'个空格字符,然后再放入参数字符.如果
		// 宽度域还大于0,则表示左靠齐,则在参数字符后面添加'宽度值-1'个空格字符.
		case 'c':
			if (!(flags & LEFT))
				while (--field_width > 0)
    9169:	83 6c 24 18 01       	subl   $0x1,0x18(%esp)
    916e:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
    9173:	7f e6                	jg     915b <vsprintf+0x1d6>
					*str++ = ' ';
			*str++ = (unsigned char) va_arg(args, int);
    9175:	83 44 24 3c 04       	addl   $0x4,0x3c(%esp)
    917a:	8b 44 24 24          	mov    0x24(%esp),%eax
    917e:	8d 50 01             	lea    0x1(%eax),%edx
    9181:	89 54 24 24          	mov    %edx,0x24(%esp)
    9185:	8b 54 24 3c          	mov    0x3c(%esp),%edx
    9189:	83 ea 04             	sub    $0x4,%edx
    918c:	8b 12                	mov    (%edx),%edx
    918e:	88 10                	mov    %dl,(%eax)
			while (--field_width > 0)
    9190:	eb 0e                	jmp    91a0 <vsprintf+0x21b>
				*str++ = ' ';
    9192:	8b 44 24 24          	mov    0x24(%esp),%eax
    9196:	8d 50 01             	lea    0x1(%eax),%edx
    9199:	89 54 24 24          	mov    %edx,0x24(%esp)
    919d:	c6 00 20             	movb   $0x20,(%eax)
		case 'c':
			if (!(flags & LEFT))
				while (--field_width > 0)
					*str++ = ' ';
			*str++ = (unsigned char) va_arg(args, int);
			while (--field_width > 0)
    91a0:	83 6c 24 18 01       	subl   $0x1,0x18(%esp)
    91a5:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
    91aa:	7f e6                	jg     9192 <vsprintf+0x20d>
				*str++ = ' ';
			break;
    91ac:	e9 14 02 00 00       	jmp    93c5 <vsprintf+0x440>

		// 如果转换指示符是's',则表示对应参数是字符串.首先取参数字符串的长度,若其超过了精度域值,则扩展精度=字符串长度.此时如果标志域表明不是左靠齐,
		// 则该字段前放入'宽度值-字符串长度'个空格字符.然后再放入参数字符串.如果宽度域还大于0,则表示为左靠齐,则在参数字符串后面添加'宽度值-字符串长
		// 度'个空格字符.
		case 's':
			s = va_arg(args, char *);
    91b1:	83 44 24 3c 04       	addl   $0x4,0x3c(%esp)
    91b6:	8b 44 24 3c          	mov    0x3c(%esp),%eax
    91ba:	8b 40 fc             	mov    -0x4(%eax),%eax
    91bd:	89 44 24 20          	mov    %eax,0x20(%esp)
			len = strlen(s);
    91c1:	ff 74 24 20          	pushl  0x20(%esp)
    91c5:	e8 bd fa ff ff       	call   8c87 <strlen>
    91ca:	83 c4 04             	add    $0x4,%esp
    91cd:	89 44 24 2c          	mov    %eax,0x2c(%esp)
			if (precision < 0)
    91d1:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    91d6:	79 0a                	jns    91e2 <vsprintf+0x25d>
				precision = len;
    91d8:	8b 44 24 2c          	mov    0x2c(%esp),%eax
    91dc:	89 44 24 14          	mov    %eax,0x14(%esp)
    91e0:	eb 12                	jmp    91f4 <vsprintf+0x26f>
			else if (len > precision)
    91e2:	8b 44 24 2c          	mov    0x2c(%esp),%eax
    91e6:	3b 44 24 14          	cmp    0x14(%esp),%eax
    91ea:	7e 08                	jle    91f4 <vsprintf+0x26f>
				len = precision;
    91ec:	8b 44 24 14          	mov    0x14(%esp),%eax
    91f0:	89 44 24 2c          	mov    %eax,0x2c(%esp)

			if (!(flags & LEFT))
    91f4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    91f8:	83 e0 10             	and    $0x10,%eax
    91fb:	85 c0                	test   %eax,%eax
    91fd:	75 21                	jne    9220 <vsprintf+0x29b>
				while (len < field_width--)
    91ff:	eb 0e                	jmp    920f <vsprintf+0x28a>
					*str++ = ' ';
    9201:	8b 44 24 24          	mov    0x24(%esp),%eax
    9205:	8d 50 01             	lea    0x1(%eax),%edx
    9208:	89 54 24 24          	mov    %edx,0x24(%esp)
    920c:	c6 00 20             	movb   $0x20,(%eax)
				precision = len;
			else if (len > precision)
				len = precision;

			if (!(flags & LEFT))
				while (len < field_width--)
    920f:	8b 44 24 18          	mov    0x18(%esp),%eax
    9213:	8d 50 ff             	lea    -0x1(%eax),%edx
    9216:	89 54 24 18          	mov    %edx,0x18(%esp)
    921a:	3b 44 24 2c          	cmp    0x2c(%esp),%eax
    921e:	7f e1                	jg     9201 <vsprintf+0x27c>
					*str++ = ' ';
			for (i = 0; i < len; ++i)
    9220:	c7 44 24 28 00 00 00 	movl   $0x0,0x28(%esp)
    9227:	00 
    9228:	eb 20                	jmp    924a <vsprintf+0x2c5>
				*str++ = *s++;
    922a:	8b 44 24 24          	mov    0x24(%esp),%eax
    922e:	8d 50 01             	lea    0x1(%eax),%edx
    9231:	89 54 24 24          	mov    %edx,0x24(%esp)
    9235:	8b 54 24 20          	mov    0x20(%esp),%edx
    9239:	8d 4a 01             	lea    0x1(%edx),%ecx
    923c:	89 4c 24 20          	mov    %ecx,0x20(%esp)
    9240:	0f b6 12             	movzbl (%edx),%edx
    9243:	88 10                	mov    %dl,(%eax)
				len = precision;

			if (!(flags & LEFT))
				while (len < field_width--)
					*str++ = ' ';
			for (i = 0; i < len; ++i)
    9245:	83 44 24 28 01       	addl   $0x1,0x28(%esp)
    924a:	8b 44 24 28          	mov    0x28(%esp),%eax
    924e:	3b 44 24 2c          	cmp    0x2c(%esp),%eax
    9252:	7c d6                	jl     922a <vsprintf+0x2a5>
				*str++ = *s++;
			while (len < field_width--)
    9254:	eb 0e                	jmp    9264 <vsprintf+0x2df>
				*str++ = ' ';
    9256:	8b 44 24 24          	mov    0x24(%esp),%eax
    925a:	8d 50 01             	lea    0x1(%eax),%edx
    925d:	89 54 24 24          	mov    %edx,0x24(%esp)
    9261:	c6 00 20             	movb   $0x20,(%eax)
			if (!(flags & LEFT))
				while (len < field_width--)
					*str++ = ' ';
			for (i = 0; i < len; ++i)
				*str++ = *s++;
			while (len < field_width--)
    9264:	8b 44 24 18          	mov    0x18(%esp),%eax
    9268:	8d 50 ff             	lea    -0x1(%eax),%edx
    926b:	89 54 24 18          	mov    %edx,0x18(%esp)
    926f:	3b 44 24 2c          	cmp    0x2c(%esp),%eax
    9273:	7f e1                	jg     9256 <vsprintf+0x2d1>
				*str++ = ' ';
			break;
    9275:	e9 4b 01 00 00       	jmp    93c5 <vsprintf+0x440>

		// 如果格式转换符是'o',表示需将对应的参数转换成八进制数的字符串.调用number()函数处理.
		case 'o':
			str = number(str, va_arg(args, unsigned long), 8,
    927a:	83 44 24 3c 04       	addl   $0x4,0x3c(%esp)
    927f:	8b 44 24 3c          	mov    0x3c(%esp),%eax
    9283:	83 e8 04             	sub    $0x4,%eax
    9286:	8b 00                	mov    (%eax),%eax
    9288:	ff 74 24 1c          	pushl  0x1c(%esp)
    928c:	ff 74 24 18          	pushl  0x18(%esp)
    9290:	ff 74 24 20          	pushl  0x20(%esp)
    9294:	6a 08                	push   $0x8
    9296:	50                   	push   %eax
    9297:	ff 74 24 38          	pushl  0x38(%esp)
    929b:	e8 60 fa ff ff       	call   8d00 <number>
    92a0:	83 c4 18             	add    $0x18,%esp
    92a3:	89 44 24 24          	mov    %eax,0x24(%esp)
				field_width, precision, flags);
			break;
    92a7:	e9 19 01 00 00       	jmp    93c5 <vsprintf+0x440>

		// 如果格式转换符是'p',表示对应参数是一个指针类型.此时若该参数没有设置宽度域,则默认宽度为8,并且需要添零.然后调用number()函数进行处理.
		case 'p':
			if (field_width == -1) {
    92ac:	83 7c 24 18 ff       	cmpl   $0xffffffff,0x18(%esp)
    92b1:	75 0d                	jne    92c0 <vsprintf+0x33b>
				field_width = 8;
    92b3:	c7 44 24 18 08 00 00 	movl   $0x8,0x18(%esp)
    92ba:	00 
				flags |= ZEROPAD;
    92bb:	83 4c 24 1c 01       	orl    $0x1,0x1c(%esp)
			}
			str = number(str,
				(unsigned long) va_arg(args, void *), 16,
    92c0:	83 44 24 3c 04       	addl   $0x4,0x3c(%esp)
    92c5:	8b 44 24 3c          	mov    0x3c(%esp),%eax
    92c9:	83 e8 04             	sub    $0x4,%eax
    92cc:	8b 00                	mov    (%eax),%eax
		case 'p':
			if (field_width == -1) {
				field_width = 8;
				flags |= ZEROPAD;
			}
			str = number(str,
    92ce:	ff 74 24 1c          	pushl  0x1c(%esp)
    92d2:	ff 74 24 18          	pushl  0x18(%esp)
    92d6:	ff 74 24 20          	pushl  0x20(%esp)
    92da:	6a 10                	push   $0x10
    92dc:	50                   	push   %eax
    92dd:	ff 74 24 38          	pushl  0x38(%esp)
    92e1:	e8 1a fa ff ff       	call   8d00 <number>
    92e6:	83 c4 18             	add    $0x18,%esp
    92e9:	89 44 24 24          	mov    %eax,0x24(%esp)
				(unsigned long) va_arg(args, void *), 16,
				field_width, precision, flags);
			break;
    92ed:	e9 d3 00 00 00       	jmp    93c5 <vsprintf+0x440>

		// 如果格式转换指示是'x'或'X',则表示对应参数需要打印成十六进制数输出.'x'表示用定字母表示.
		case 'x':
			flags |= SMALL;
    92f2:	83 4c 24 1c 40       	orl    $0x40,0x1c(%esp)
		case 'X':
			str = number(str, va_arg(args, unsigned long), 16,
    92f7:	83 44 24 3c 04       	addl   $0x4,0x3c(%esp)
    92fc:	8b 44 24 3c          	mov    0x3c(%esp),%eax
    9300:	83 e8 04             	sub    $0x4,%eax
    9303:	8b 00                	mov    (%eax),%eax
    9305:	ff 74 24 1c          	pushl  0x1c(%esp)
    9309:	ff 74 24 18          	pushl  0x18(%esp)
    930d:	ff 74 24 20          	pushl  0x20(%esp)
    9311:	6a 10                	push   $0x10
    9313:	50                   	push   %eax
    9314:	ff 74 24 38          	pushl  0x38(%esp)
    9318:	e8 e3 f9 ff ff       	call   8d00 <number>
    931d:	83 c4 18             	add    $0x18,%esp
    9320:	89 44 24 24          	mov    %eax,0x24(%esp)
				field_width, precision, flags);
			break;
    9324:	e9 9c 00 00 00       	jmp    93c5 <vsprintf+0x440>

		// 如果格式转换字符是'd','i'或'u',则表示对应参数是整数,'d','i'代表符号整数,因此需要加上带符号标志.'u'代表无符号整数.
		case 'd':
		case 'i':
			flags |= SIGN;
    9329:	83 4c 24 1c 02       	orl    $0x2,0x1c(%esp)
		case 'u':
			str = number(str, va_arg(args, unsigned long), 10,
    932e:	83 44 24 3c 04       	addl   $0x4,0x3c(%esp)
    9333:	8b 44 24 3c          	mov    0x3c(%esp),%eax
    9337:	83 e8 04             	sub    $0x4,%eax
    933a:	8b 00                	mov    (%eax),%eax
    933c:	ff 74 24 1c          	pushl  0x1c(%esp)
    9340:	ff 74 24 18          	pushl  0x18(%esp)
    9344:	ff 74 24 20          	pushl  0x20(%esp)
    9348:	6a 0a                	push   $0xa
    934a:	50                   	push   %eax
    934b:	ff 74 24 38          	pushl  0x38(%esp)
    934f:	e8 ac f9 ff ff       	call   8d00 <number>
    9354:	83 c4 18             	add    $0x18,%esp
    9357:	89 44 24 24          	mov    %eax,0x24(%esp)
				field_width, precision, flags);
			break;
    935b:	eb 68                	jmp    93c5 <vsprintf+0x440>

		// 若格式转换指示符是'n',则表示要把目前为止转换输出字符数保存到对应参数指针指定的位置中.首先利用va_arg()取得该参数指针,然后将已经转换好
		// 的字符数存入该指示的位置.
		case 'n':
			ip = va_arg(args, int *);
    935d:	83 44 24 3c 04       	addl   $0x4,0x3c(%esp)
    9362:	8b 44 24 3c          	mov    0x3c(%esp),%eax
    9366:	8b 40 fc             	mov    -0x4(%eax),%eax
    9369:	89 44 24 0c          	mov    %eax,0xc(%esp)
			*ip = (str - buf);
    936d:	8b 54 24 24          	mov    0x24(%esp),%edx
    9371:	8b 44 24 34          	mov    0x34(%esp),%eax
    9375:	29 c2                	sub    %eax,%edx
    9377:	8b 44 24 0c          	mov    0xc(%esp),%eax
    937b:	89 10                	mov    %edx,(%eax)
			break;
    937d:	eb 46                	jmp    93c5 <vsprintf+0x440>

		// 若格式转换符不是'%',则表示格式字符串有错,直接将一个'%'写入输出串中.
		// 如果格式转换符的位置处还有字符,则也直接将该字符写入输出串中,并返回前面继续处理格式字符串.否则表示已经处理到格式字符串的结尾处,则退出循环.
		default:
			if (*fmt != '%')
    937f:	8b 44 24 38          	mov    0x38(%esp),%eax
    9383:	0f b6 00             	movzbl (%eax),%eax
    9386:	3c 25                	cmp    $0x25,%al
    9388:	74 0e                	je     9398 <vsprintf+0x413>
				*str++ = '%';
    938a:	8b 44 24 24          	mov    0x24(%esp),%eax
    938e:	8d 50 01             	lea    0x1(%eax),%edx
    9391:	89 54 24 24          	mov    %edx,0x24(%esp)
    9395:	c6 00 25             	movb   $0x25,(%eax)
			if (*fmt)
    9398:	8b 44 24 38          	mov    0x38(%esp),%eax
    939c:	0f b6 00             	movzbl (%eax),%eax
    939f:	84 c0                	test   %al,%al
    93a1:	74 16                	je     93b9 <vsprintf+0x434>
				*str++ = *fmt;
    93a3:	8b 44 24 24          	mov    0x24(%esp),%eax
    93a7:	8d 50 01             	lea    0x1(%eax),%edx
    93aa:	89 54 24 24          	mov    %edx,0x24(%esp)
    93ae:	8b 54 24 38          	mov    0x38(%esp),%edx
    93b2:	0f b6 12             	movzbl (%edx),%edx
    93b5:	88 10                	mov    %dl,(%eax)
			else
				--fmt;
			break;
    93b7:	eb 0b                	jmp    93c4 <vsprintf+0x43f>
			if (*fmt != '%')
				*str++ = '%';
			if (*fmt)
				*str++ = *fmt;
			else
				--fmt;
    93b9:	8b 44 24 38          	mov    0x38(%esp),%eax
    93bd:	83 e8 01             	sub    $0x1,%eax
    93c0:	89 44 24 38          	mov    %eax,0x38(%esp)
			break;
    93c4:	90                   	nop
				   											number of chars for from string */
														/* min.整数数字个数;max.字符串中字符个数 */
	int qualifier;										/* 'h', 'l', or 'L' for integer fields */	/* 'h','l',或 'L'用于整数字段 */

	// 首先将字符指针指向buf,然后扫描格式字符串,对各个格式转换指示进行相应的处理.
	for (str=buf ; *fmt ; ++fmt) {
    93c5:	8b 44 24 38          	mov    0x38(%esp),%eax
    93c9:	83 c0 01             	add    $0x1,%eax
    93cc:	89 44 24 38          	mov    %eax,0x38(%esp)
    93d0:	8b 44 24 38          	mov    0x38(%esp),%eax
    93d4:	0f b6 00             	movzbl (%eax),%eax
    93d7:	84 c0                	test   %al,%al
    93d9:	0f 85 b6 fb ff ff    	jne    8f95 <vsprintf+0x10>
			else
				--fmt;
			break;
		}
	}
	*str = '\0';										// 最后在转换好的字符串结尾处添上null.
    93df:	8b 44 24 24          	mov    0x24(%esp),%eax
    93e3:	c6 00 00             	movb   $0x0,(%eax)
	return str - buf;									// 返回转换好的字符串长度值.
    93e6:	8b 54 24 24          	mov    0x24(%esp),%edx
    93ea:	8b 44 24 34          	mov    0x34(%esp),%eax
    93ee:	29 c2                	sub    %eax,%edx
    93f0:	89 d0                	mov    %edx,%eax
}
    93f2:	83 c4 30             	add    $0x30,%esp
    93f5:	c3                   	ret    

000093f6 <get_fs_byte>:
//// 读取fs段中指定地址处的字节.
// 参数:addr - 指定的内存地址.
// %0 - (返回的字节_v);%1 - (内存地址addr)
// 返回:返回内存fs[addr]处的字节.
static inline unsigned char get_fs_byte(const char * addr)
{
    93f6:	53                   	push   %ebx
	unsigned register char _v;

	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
    93f7:	8b 44 24 08          	mov    0x8(%esp),%eax
    93fb:	64 8a 00             	mov    %fs:(%eax),%al
    93fe:	89 c3                	mov    %eax,%ebx
	return _v;
    9400:	89 d8                	mov    %ebx,%eax
}
    9402:	5b                   	pop    %ebx
    9403:	c3                   	ret    

00009404 <get_fs_word>:
//// 读取fs段中指定地址处的字.
// 参数:addr - 指定的内存地址.
// %0 - (返回的字_v);%1 - (内存地址addr)
// 返回:返回内存fs:[addr]处的字.
static inline unsigned short get_fs_word(const unsigned short *addr)
{
    9404:	83 ec 10             	sub    $0x10,%esp
	unsigned short _v;

	__asm__ ("movw %%fs:%1,%0":"=q" (_v):"m" (*addr));
    9407:	8b 44 24 14          	mov    0x14(%esp),%eax
    940b:	64 66 8b 00          	mov    %fs:(%eax),%ax
    940f:	66 89 44 24 0e       	mov    %ax,0xe(%esp)
	return _v;
    9414:	0f b7 44 24 0e       	movzwl 0xe(%esp),%eax
}
    9419:	83 c4 10             	add    $0x10,%esp
    941c:	c3                   	ret    

0000941d <get_fs_long>:
//// 读取fs段中指定地址处的长字(4字节).
// 参数:addr - 指定的内存地址.
// %0 - (返回的长字_v);%1 - (内存地址addr)
// 返回:返回内存fs:[addr]处的长字.
static inline unsigned long get_fs_long(const unsigned long *addr)
{
    941d:	83 ec 10             	sub    $0x10,%esp
	unsigned long _v;

	__asm__ ("movl %%fs:%1,%0":"=q" (_v):"m" (*addr)); \
    9420:	8b 44 24 14          	mov    0x14(%esp),%eax
    9424:	64 8b 00             	mov    %fs:(%eax),%eax
    9427:	89 44 24 0c          	mov    %eax,0xc(%esp)
	return _v;
    942b:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    942f:	83 c4 10             	add    $0x10,%esp
    9432:	c3                   	ret    

00009433 <put_fs_byte>:

//// 将一字节存放在fs段中指定内存地址处.
// 参数:val - 字节值;addr - 内存地址.
// %0 - 寄存器(字节值val);%1 - (内存地址addr).
static inline void put_fs_byte(char val,char *addr)
{
    9433:	83 ec 04             	sub    $0x4,%esp
    9436:	8b 44 24 08          	mov    0x8(%esp),%eax
    943a:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
    943d:	0f b6 04 24          	movzbl (%esp),%eax
    9441:	8b 54 24 0c          	mov    0xc(%esp),%edx
    9445:	64 88 02             	mov    %al,%fs:(%edx)
}
    9448:	90                   	nop
    9449:	83 c4 04             	add    $0x4,%esp
    944c:	c3                   	ret    

0000944d <put_fs_word>:

//// 将一字存放在fs段中指定内存地址处.
// 参数:val - 字值;addr - 内存地址.
// %0 - 寄存器(字值val);%1 - (内存地址addr).
static inline void put_fs_word(short val,short * addr)
{
    944d:	83 ec 04             	sub    $0x4,%esp
    9450:	8b 44 24 08          	mov    0x8(%esp),%eax
    9454:	66 89 04 24          	mov    %ax,(%esp)
__asm__ ("movw %0,%%fs:%1"::"q" (val),"m" (*addr));
    9458:	0f b7 04 24          	movzwl (%esp),%eax
    945c:	8b 54 24 0c          	mov    0xc(%esp),%edx
    9460:	64 66 89 02          	mov    %ax,%fs:(%edx)
}
    9464:	90                   	nop
    9465:	83 c4 04             	add    $0x4,%esp
    9468:	c3                   	ret    

00009469 <put_fs_long>:
//// 将一长字存放在fs段中指定内存地址处.
// 参数:val - 长字值;addr - 内存地址.
// %0 - 寄存器(长字值val);%1 - (内存地址addr).
static inline void put_fs_long(unsigned long val,unsigned long * addr)
{
__asm__ ("movl %0,%%fs:%1"::"q" (val),"m" (*addr));
    9469:	8b 44 24 04          	mov    0x4(%esp),%eax
    946d:	8b 54 24 08          	mov    0x8(%esp),%edx
    9471:	64 89 02             	mov    %eax,%fs:(%edx)
}
    9474:	90                   	nop
    9475:	c3                   	ret    

00009476 <memset>:

// 用字符填写指定长度内存块.
// 用字符c填写s指向的内存区域,共填count字节.
// %0 - eax(字符c),%1 - edi(内存地址),%2 - ecx(字节数count).
static inline void * memset(void * s, char c, int count)
{
    9476:	57                   	push   %edi
    9477:	83 ec 04             	sub    $0x4,%esp
    947a:	8b 44 24 10          	mov    0x10(%esp),%eax
    947e:	88 04 24             	mov    %al,(%esp)
__asm__(
    9481:	0f b6 04 24          	movzbl (%esp),%eax
    9485:	8b 54 24 0c          	mov    0xc(%esp),%edx
    9489:	8b 4c 24 14          	mov    0x14(%esp),%ecx
    948d:	89 d7                	mov    %edx,%edi
    948f:	fc                   	cld    
    9490:	57                   	push   %edi
    9491:	f3 aa                	rep stos %al,%es:(%edi)
    9493:	5f                   	pop    %edi
		"rep\n\t"											// 重复ecx指定的次数,执行.
		"stosb\n\t"											// 将al中字符存入es:[edi]中,并且edi++.
		"popl %%edi"
		::"a" (c), "D" (s), "c" (count)
		:);
return s;
    9494:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    9498:	83 c4 04             	add    $0x4,%esp
    949b:	5f                   	pop    %edi
    949c:	c3                   	ret    

0000949d <sys_ftime>:

// 返回日期和时间（ftime - Fetch time）。
// 以下返回值是-ENOSYS的系统调用函数均表示在本版本内核中还未实现。
int sys_ftime()
{
	return -ENOSYS;
    949d:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    94a2:	c3                   	ret    

000094a3 <sys_break>:

int sys_break()
{
	return -ENOSYS;
    94a3:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    94a8:	c3                   	ret    

000094a9 <sys_ptrace>:

// 用于当前进程对子进程进行高度（debugging）。
int sys_ptrace()
{
	return -ENOSYS;
    94a9:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    94ae:	c3                   	ret    

000094af <sys_stty>:

// 改变并打印终端行设置。
int sys_stty()
{
	return -ENOSYS;
    94af:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    94b4:	c3                   	ret    

000094b5 <sys_gtty>:

// 取终端行设置信息。
int sys_gtty()
{
	return -ENOSYS;
    94b5:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    94ba:	c3                   	ret    

000094bb <sys_rename>:

// 修改文件名。
int sys_rename()
{
	return -ENOSYS;
    94bb:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    94c0:	c3                   	ret    

000094c1 <sys_prof>:

int sys_prof()
{
	return -ENOSYS;
    94c1:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    94c6:	c3                   	ret    

000094c7 <sys_setregid>:
// 设置当前任务的实际以及/或者有效组ID（gid）。如果任务没有超级用户特权，那么只能互换其实际组ID和有效组ID。
// 如果任务具有超级用户特权，就能任意设置有效的和实际的组ID。保留的gid（saved gid）被设置成与有效gid。实际
// 组ID是指进程当前的gid。
int sys_setregid(int rgid, int egid)
{
	if (rgid > 0) {
    94c7:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    94cc:	7e 3f                	jle    950d <sys_setregid+0x46>
		if ((current->gid == rgid) ||
    94ce:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    94d3:	0f b7 80 d2 02 00 00 	movzwl 0x2d2(%eax),%eax
    94da:	0f b7 c0             	movzwl %ax,%eax
    94dd:	3b 44 24 04          	cmp    0x4(%esp),%eax
    94e1:	74 11                	je     94f4 <sys_setregid+0x2d>
		    suser())
    94e3:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    94e8:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
// 如果任务具有超级用户特权，就能任意设置有效的和实际的组ID。保留的gid（saved gid）被设置成与有效gid。实际
// 组ID是指进程当前的gid。
int sys_setregid(int rgid, int egid)
{
	if (rgid > 0) {
		if ((current->gid == rgid) ||
    94ef:	66 85 c0             	test   %ax,%ax
    94f2:	75 12                	jne    9506 <sys_setregid+0x3f>
		    suser())
			current->gid = rgid;
    94f4:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    94f9:	8b 54 24 04          	mov    0x4(%esp),%edx
    94fd:	66 89 90 d2 02 00 00 	mov    %dx,0x2d2(%eax)
    9504:	eb 07                	jmp    950d <sys_setregid+0x46>
		else
			return(-EPERM);
    9506:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    950b:	eb 70                	jmp    957d <sys_setregid+0xb6>
	}
	if (egid > 0) {
    950d:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    9512:	7e 64                	jle    9578 <sys_setregid+0xb1>
		if ((current->gid == egid) ||
    9514:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9519:	0f b7 80 d2 02 00 00 	movzwl 0x2d2(%eax),%eax
    9520:	0f b7 c0             	movzwl %ax,%eax
    9523:	3b 44 24 08          	cmp    0x8(%esp),%eax
    9527:	74 26                	je     954f <sys_setregid+0x88>
		    (current->egid == egid) ||
    9529:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    952e:	0f b7 80 d4 02 00 00 	movzwl 0x2d4(%eax),%eax
    9535:	0f b7 c0             	movzwl %ax,%eax
			current->gid = rgid;
		else
			return(-EPERM);
	}
	if (egid > 0) {
		if ((current->gid == egid) ||
    9538:	3b 44 24 08          	cmp    0x8(%esp),%eax
    953c:	74 11                	je     954f <sys_setregid+0x88>
		    (current->egid == egid) ||
		    suser()) {
    953e:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9543:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
		else
			return(-EPERM);
	}
	if (egid > 0) {
		if ((current->gid == egid) ||
		    (current->egid == egid) ||
    954a:	66 85 c0             	test   %ax,%ax
    954d:	75 22                	jne    9571 <sys_setregid+0xaa>
		    suser()) {
			current->egid = egid;
    954f:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9554:	8b 54 24 08          	mov    0x8(%esp),%edx
    9558:	66 89 90 d4 02 00 00 	mov    %dx,0x2d4(%eax)
			current->sgid = egid;
    955f:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9564:	8b 54 24 08          	mov    0x8(%esp),%edx
    9568:	66 89 90 d6 02 00 00 	mov    %dx,0x2d6(%eax)
    956f:	eb 07                	jmp    9578 <sys_setregid+0xb1>
		} else
			return(-EPERM);
    9571:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    9576:	eb 05                	jmp    957d <sys_setregid+0xb6>
	}
	return 0;
    9578:	b8 00 00 00 00       	mov    $0x0,%eax
}
    957d:	c3                   	ret    

0000957e <sys_setgid>:
 */
// 设置进程组号（gid）。如果任务没有超级用户特权，它可以使用setgid()将其有效gid（effective gid）设置为成其保留
// gid（saved git）或其实际git（real gid）。如果任务有超级用户特权，则实际gid、有效gid和保留gid都被设置成参数
// 指定的gid。
int sys_setgid(int gid)
{
    957e:	53                   	push   %ebx
	if (suser())
    957f:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9584:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    958b:	66 85 c0             	test   %ax,%ax
    958e:	75 3a                	jne    95ca <sys_setgid+0x4c>
		current->gid = current->egid = current->sgid = gid;
    9590:	8b 0d a0 e1 02 00    	mov    0x2e1a0,%ecx
    9596:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    959b:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    95a1:	8b 5c 24 08          	mov    0x8(%esp),%ebx
    95a5:	66 89 9a d6 02 00 00 	mov    %bx,0x2d6(%edx)
    95ac:	0f b7 92 d6 02 00 00 	movzwl 0x2d6(%edx),%edx
    95b3:	66 89 90 d4 02 00 00 	mov    %dx,0x2d4(%eax)
    95ba:	0f b7 80 d4 02 00 00 	movzwl 0x2d4(%eax),%eax
    95c1:	66 89 81 d2 02 00 00 	mov    %ax,0x2d2(%ecx)
    95c8:	eb 43                	jmp    960d <sys_setgid+0x8f>
	else if ((gid == current->gid) || (gid == current->sgid))
    95ca:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    95cf:	0f b7 80 d2 02 00 00 	movzwl 0x2d2(%eax),%eax
    95d6:	0f b7 c0             	movzwl %ax,%eax
    95d9:	3b 44 24 08          	cmp    0x8(%esp),%eax
    95dd:	74 15                	je     95f4 <sys_setgid+0x76>
    95df:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    95e4:	0f b7 80 d6 02 00 00 	movzwl 0x2d6(%eax),%eax
    95eb:	0f b7 c0             	movzwl %ax,%eax
    95ee:	3b 44 24 08          	cmp    0x8(%esp),%eax
    95f2:	75 12                	jne    9606 <sys_setgid+0x88>
		current->egid = gid;
    95f4:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    95f9:	8b 54 24 08          	mov    0x8(%esp),%edx
    95fd:	66 89 90 d4 02 00 00 	mov    %dx,0x2d4(%eax)
    9604:	eb 07                	jmp    960d <sys_setgid+0x8f>
	else
		return -EPERM;
    9606:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    960b:	eb 05                	jmp    9612 <sys_setgid+0x94>
	return 0;
    960d:	b8 00 00 00 00       	mov    $0x0,%eax
}
    9612:	5b                   	pop    %ebx
    9613:	c3                   	ret    

00009614 <sys_acct>:

// 打开或关闭进程计账功能。
int sys_acct()
{
	return -ENOSYS;
    9614:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    9619:	c3                   	ret    

0000961a <sys_phys>:

// 映射任意物理内在到进程的虚拟地址空间。
int sys_phys()
{
	return -ENOSYS;
    961a:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    961f:	c3                   	ret    

00009620 <sys_lock>:

int sys_lock()
{
	return -ENOSYS;
    9620:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    9625:	c3                   	ret    

00009626 <sys_mpx>:

int sys_mpx()
{
	return -ENOSYS;
    9626:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    962b:	c3                   	ret    

0000962c <sys_ulimit>:

int sys_ulimit()
{
	return -ENOSYS;
    962c:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    9631:	c3                   	ret    

00009632 <sys_time>:

// 返回从1970年1月1日00:00:00 GMT开始计时的时间值（秒）。如果tloc不为null，则时间值也存储在那里。
// 由于参数是一个指针，而其所指位置在用户空间，因此需要使用函数put_fs_long()来访问该值。在进入内核中运行时，段
// 寄存器fs默认地指向当前用户数据空间。因此该函数就可利用fs来访问用户空间中的值。
int sys_time(long * tloc)
{
    9632:	83 ec 1c             	sub    $0x1c,%esp
	int i;

	i = CURRENT_TIME;
    9635:	a1 00 eb 02 00       	mov    0x2eb00,%eax
    963a:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
    9640:	01 d0                	add    %edx,%eax
    9642:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    9647:	f7 e2                	mul    %edx
    9649:	c1 ea 05             	shr    $0x5,%edx
    964c:	a1 04 eb 02 00       	mov    0x2eb04,%eax
    9651:	01 d0                	add    %edx,%eax
    9653:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if (tloc) {
    9657:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    965c:	74 25                	je     9683 <sys_time+0x51>
		verify_area(tloc,4);            				// 验证内存容量是否够（这里是4字节）。
    965e:	83 ec 08             	sub    $0x8,%esp
    9661:	6a 04                	push   $0x4
    9663:	ff 74 24 2c          	pushl  0x2c(%esp)
    9667:	e8 37 ed ff ff       	call   83a3 <verify_area>
    966c:	83 c4 10             	add    $0x10,%esp
		put_fs_long(i,(unsigned long *)tloc);   		// 放入用户数据段tloc处。
    966f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9673:	83 ec 08             	sub    $0x8,%esp
    9676:	ff 74 24 28          	pushl  0x28(%esp)
    967a:	50                   	push   %eax
    967b:	e8 e9 fd ff ff       	call   9469 <put_fs_long>
    9680:	83 c4 10             	add    $0x10,%esp
	}
	return i;
    9683:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    9687:	83 c4 1c             	add    $0x1c,%esp
    968a:	c3                   	ret    

0000968b <sys_setreuid>:
 * 用setuid()和保存的gid的程序将会与POSIX 100%兼容。
 */
// 设置任务的实际以及/或者有效的用户ID（uid）。如果任务没有超级用户特权，那么只能互换其实际的uid和有效的uid。如果
// 任务具有超级用户特权，就能任意设置有效的和实际的用户ID。保存的uid（saved uid）被设置成与有效uid同值。
int sys_setreuid(int ruid, int euid)
{
    968b:	83 ec 10             	sub    $0x10,%esp
	int old_ruid = current->uid;
    968e:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9693:	0f b7 80 cc 02 00 00 	movzwl 0x2cc(%eax),%eax
    969a:	0f b7 c0             	movzwl %ax,%eax
    969d:	89 44 24 0c          	mov    %eax,0xc(%esp)

	if (ruid > 0) {
    96a1:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    96a6:	7e 49                	jle    96f1 <sys_setreuid+0x66>
		if ((current->euid == ruid) ||
    96a8:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    96ad:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    96b4:	0f b7 c0             	movzwl %ax,%eax
    96b7:	3b 44 24 14          	cmp    0x14(%esp),%eax
    96bb:	74 1b                	je     96d8 <sys_setreuid+0x4d>
    96bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
    96c1:	3b 44 24 14          	cmp    0x14(%esp),%eax
    96c5:	74 11                	je     96d8 <sys_setreuid+0x4d>
                    (old_ruid == ruid) ||
		    suser())
    96c7:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    96cc:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
{
	int old_ruid = current->uid;

	if (ruid > 0) {
		if ((current->euid == ruid) ||
                    (old_ruid == ruid) ||
    96d3:	66 85 c0             	test   %ax,%ax
    96d6:	75 12                	jne    96ea <sys_setreuid+0x5f>
		    suser())
			current->uid = ruid;
    96d8:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    96dd:	8b 54 24 14          	mov    0x14(%esp),%edx
    96e1:	66 89 90 cc 02 00 00 	mov    %dx,0x2cc(%eax)
    96e8:	eb 07                	jmp    96f1 <sys_setreuid+0x66>
		else
			return(-EPERM);
    96ea:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    96ef:	eb 75                	jmp    9766 <sys_setreuid+0xdb>
	}
	if (euid > 0) {
    96f1:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
    96f6:	7e 69                	jle    9761 <sys_setreuid+0xd6>
		if ((old_ruid == euid) ||
    96f8:	8b 44 24 0c          	mov    0xc(%esp),%eax
    96fc:	3b 44 24 18          	cmp    0x18(%esp),%eax
    9700:	74 26                	je     9728 <sys_setreuid+0x9d>
                    (current->euid == euid) ||
    9702:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9707:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    970e:	0f b7 c0             	movzwl %ax,%eax
			current->uid = ruid;
		else
			return(-EPERM);
	}
	if (euid > 0) {
		if ((old_ruid == euid) ||
    9711:	3b 44 24 18          	cmp    0x18(%esp),%eax
    9715:	74 11                	je     9728 <sys_setreuid+0x9d>
                    (current->euid == euid) ||
		    suser()) {
    9717:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    971c:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
		else
			return(-EPERM);
	}
	if (euid > 0) {
		if ((old_ruid == euid) ||
                    (current->euid == euid) ||
    9723:	66 85 c0             	test   %ax,%ax
    9726:	75 22                	jne    974a <sys_setreuid+0xbf>
		    suser()) {
			current->euid = euid;
    9728:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    972d:	8b 54 24 18          	mov    0x18(%esp),%edx
    9731:	66 89 90 ce 02 00 00 	mov    %dx,0x2ce(%eax)
			current->suid = euid;
    9738:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    973d:	8b 54 24 18          	mov    0x18(%esp),%edx
    9741:	66 89 90 d0 02 00 00 	mov    %dx,0x2d0(%eax)
    9748:	eb 17                	jmp    9761 <sys_setreuid+0xd6>
		} else {
			current->uid = old_ruid;
    974a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    974f:	8b 54 24 0c          	mov    0xc(%esp),%edx
    9753:	66 89 90 cc 02 00 00 	mov    %dx,0x2cc(%eax)
			return(-EPERM);
    975a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    975f:	eb 05                	jmp    9766 <sys_setreuid+0xdb>
		}
	}
	return 0;
    9761:	b8 00 00 00 00       	mov    $0x0,%eax
}
    9766:	83 c4 10             	add    $0x10,%esp
    9769:	c3                   	ret    

0000976a <sys_setuid>:
 */
// 设置任务用户ID（uid）。如果任务没有超级用户特权，它可以使用setuid()将其有效的uid（effective uid）设置成其保存
// 的uid（saved uid）或其实际的uid（real uid）。如果用户有超级用户特权，则实际的uid、有效的uid和保存的uid都会被
// 设置成参数指定的uid。
int sys_setuid(int uid)
{
    976a:	53                   	push   %ebx
	if (suser())
    976b:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9770:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    9777:	66 85 c0             	test   %ax,%ax
    977a:	75 3a                	jne    97b6 <sys_setuid+0x4c>
		current->uid = current->euid = current->suid = uid;
    977c:	8b 0d a0 e1 02 00    	mov    0x2e1a0,%ecx
    9782:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9787:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    978d:	8b 5c 24 08          	mov    0x8(%esp),%ebx
    9791:	66 89 9a d0 02 00 00 	mov    %bx,0x2d0(%edx)
    9798:	0f b7 92 d0 02 00 00 	movzwl 0x2d0(%edx),%edx
    979f:	66 89 90 ce 02 00 00 	mov    %dx,0x2ce(%eax)
    97a6:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    97ad:	66 89 81 cc 02 00 00 	mov    %ax,0x2cc(%ecx)
    97b4:	eb 43                	jmp    97f9 <sys_setuid+0x8f>
	else if ((uid == current->uid) || (uid == current->suid))
    97b6:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    97bb:	0f b7 80 cc 02 00 00 	movzwl 0x2cc(%eax),%eax
    97c2:	0f b7 c0             	movzwl %ax,%eax
    97c5:	3b 44 24 08          	cmp    0x8(%esp),%eax
    97c9:	74 15                	je     97e0 <sys_setuid+0x76>
    97cb:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    97d0:	0f b7 80 d0 02 00 00 	movzwl 0x2d0(%eax),%eax
    97d7:	0f b7 c0             	movzwl %ax,%eax
    97da:	3b 44 24 08          	cmp    0x8(%esp),%eax
    97de:	75 12                	jne    97f2 <sys_setuid+0x88>
		current->euid = uid;
    97e0:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    97e5:	8b 54 24 08          	mov    0x8(%esp),%edx
    97e9:	66 89 90 ce 02 00 00 	mov    %dx,0x2ce(%eax)
    97f0:	eb 07                	jmp    97f9 <sys_setuid+0x8f>
	else
		return -EPERM;
    97f2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    97f7:	eb 05                	jmp    97fe <sys_setuid+0x94>
	return(0);
    97f9:	b8 00 00 00 00       	mov    $0x0,%eax
}
    97fe:	5b                   	pop    %ebx
    97ff:	c3                   	ret    

00009800 <sys_stime>:
// 由于参数是一个指针，而其所指位置在用户空间，因此需要使用函数get_fs_long()来访问该值。在进入内核中运行时，段
// 寄存器fs被默认地指向当前用户数据空间。因此该函数就可利用fs来访问用户空间中的值。函数参数提供的当前时间值减去
// 系统已经运行的时间秒值（jiffies/HZ）即是开机时间秒值。
int sys_stime(long * tptr)
{
	if (!suser())
    9800:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9805:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    980c:	66 85 c0             	test   %ax,%ax
    980f:	74 07                	je     9818 <sys_stime+0x18>
		return -EPERM;          					// 如果不是超级用户则出错返回（许可）。
    9811:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    9816:	eb 37                	jmp    984f <sys_stime+0x4f>
	startup_time = get_fs_long((unsigned long *)tptr) - jiffies / HZ;
    9818:	ff 74 24 04          	pushl  0x4(%esp)
    981c:	e8 fc fb ff ff       	call   941d <get_fs_long>
    9821:	83 c4 04             	add    $0x4,%esp
    9824:	89 c1                	mov    %eax,%ecx
    9826:	a1 00 eb 02 00       	mov    0x2eb00,%eax
    982b:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    9830:	f7 e2                	mul    %edx
    9832:	89 d0                	mov    %edx,%eax
    9834:	c1 e8 05             	shr    $0x5,%eax
    9837:	29 c1                	sub    %eax,%ecx
    9839:	89 c8                	mov    %ecx,%eax
    983b:	a3 04 eb 02 00       	mov    %eax,0x2eb04
	jiffies_offset = 0;
    9840:	c7 05 08 eb 02 00 00 	movl   $0x0,0x2eb08
    9847:	00 00 00 
	return 0;
    984a:	b8 00 00 00 00       	mov    $0x0,%eax
}
    984f:	c3                   	ret    

00009850 <sys_times>:

// 获取当前任务运行时间统计值。
// 在tbuf所指用户数据空间处返回tms结构的任务运行时间统计值。tms结构中包括进程用户运行时间、内核（系统）时间、子进
// 程用户运行时间、子进程系统运行时间。函数返回值是系统运行到当前的嘀嗒数。
int sys_times(struct tms * tbuf)
{
    9850:	83 ec 0c             	sub    $0xc,%esp
	if (tbuf) {
    9853:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
    9858:	0f 84 8b 00 00 00    	je     98e9 <sys_times+0x99>
		verify_area(tbuf,sizeof *tbuf);
    985e:	83 ec 08             	sub    $0x8,%esp
    9861:	6a 10                	push   $0x10
    9863:	ff 74 24 1c          	pushl  0x1c(%esp)
    9867:	e8 37 eb ff ff       	call   83a3 <verify_area>
    986c:	83 c4 10             	add    $0x10,%esp
		put_fs_long(current->utime,(unsigned long *)&tbuf->tms_utime);
    986f:	8b 44 24 10          	mov    0x10(%esp),%eax
    9873:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    9879:	8b 92 e0 02 00 00    	mov    0x2e0(%edx),%edx
    987f:	83 ec 08             	sub    $0x8,%esp
    9882:	50                   	push   %eax
    9883:	52                   	push   %edx
    9884:	e8 e0 fb ff ff       	call   9469 <put_fs_long>
    9889:	83 c4 10             	add    $0x10,%esp
		put_fs_long(current->stime,(unsigned long *)&tbuf->tms_stime);
    988c:	8b 44 24 10          	mov    0x10(%esp),%eax
    9890:	8d 50 04             	lea    0x4(%eax),%edx
    9893:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9898:	8b 80 e4 02 00 00    	mov    0x2e4(%eax),%eax
    989e:	83 ec 08             	sub    $0x8,%esp
    98a1:	52                   	push   %edx
    98a2:	50                   	push   %eax
    98a3:	e8 c1 fb ff ff       	call   9469 <put_fs_long>
    98a8:	83 c4 10             	add    $0x10,%esp
		put_fs_long(current->cutime,(unsigned long *)&tbuf->tms_cutime);
    98ab:	8b 44 24 10          	mov    0x10(%esp),%eax
    98af:	8d 50 08             	lea    0x8(%eax),%edx
    98b2:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    98b7:	8b 80 e8 02 00 00    	mov    0x2e8(%eax),%eax
    98bd:	83 ec 08             	sub    $0x8,%esp
    98c0:	52                   	push   %edx
    98c1:	50                   	push   %eax
    98c2:	e8 a2 fb ff ff       	call   9469 <put_fs_long>
    98c7:	83 c4 10             	add    $0x10,%esp
		put_fs_long(current->cstime,(unsigned long *)&tbuf->tms_cstime);
    98ca:	8b 44 24 10          	mov    0x10(%esp),%eax
    98ce:	8d 50 0c             	lea    0xc(%eax),%edx
    98d1:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    98d6:	8b 80 ec 02 00 00    	mov    0x2ec(%eax),%eax
    98dc:	83 ec 08             	sub    $0x8,%esp
    98df:	52                   	push   %edx
    98e0:	50                   	push   %eax
    98e1:	e8 83 fb ff ff       	call   9469 <put_fs_long>
    98e6:	83 c4 10             	add    $0x10,%esp
	}
	return jiffies;
    98e9:	a1 00 eb 02 00       	mov    0x2eb00,%eax
}
    98ee:	83 c4 0c             	add    $0xc,%esp
    98f1:	c3                   	ret    

000098f2 <sys_brk>:
// end_data_seg指定的值。该值必须大于代码结尾并且要小于堆栈结尾16KB。返回值是数据段的新结尾值（如果返回值与要求不
// 同，则表明有错误发生)。该函数并不被用户直接调用，而由libc库函数进行包装，并且返回值也不一样。
int sys_brk(unsigned long end_data_seg)
{
	// 如果参数值大于代码结尾，并且小于（堆栈 - 16KB），则设置新数据段结尾值。
	if (end_data_seg >= current->end_code &&
    98f2:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    98f7:	8b 80 1c 02 00 00    	mov    0x21c(%eax),%eax
    98fd:	3b 44 24 04          	cmp    0x4(%esp),%eax
    9901:	77 25                	ja     9928 <sys_brk+0x36>
	    end_data_seg < current->start_stack - 16384)
    9903:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9908:	8b 80 28 02 00 00    	mov    0x228(%eax),%eax
    990e:	2d 00 40 00 00       	sub    $0x4000,%eax
// end_data_seg指定的值。该值必须大于代码结尾并且要小于堆栈结尾16KB。返回值是数据段的新结尾值（如果返回值与要求不
// 同，则表明有错误发生)。该函数并不被用户直接调用，而由libc库函数进行包装，并且返回值也不一样。
int sys_brk(unsigned long end_data_seg)
{
	// 如果参数值大于代码结尾，并且小于（堆栈 - 16KB），则设置新数据段结尾值。
	if (end_data_seg >= current->end_code &&
    9913:	3b 44 24 04          	cmp    0x4(%esp),%eax
    9917:	76 0f                	jbe    9928 <sys_brk+0x36>
	    end_data_seg < current->start_stack - 16384)
		current->brk = end_data_seg;
    9919:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    991e:	8b 54 24 04          	mov    0x4(%esp),%edx
    9922:	89 90 24 02 00 00    	mov    %edx,0x224(%eax)
	return current->brk;            			// 返回进程当前的数据段结尾值。
    9928:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    992d:	8b 80 24 02 00 00    	mov    0x224(%eax),%eax
}
    9933:	c3                   	ret    

00009934 <sys_setpgid>:
// 设置指定进程pid的进程组号为pgid。
// 参数pid是指定进程的进程号。如果它为0,则让pid等于当前进程的进程号。参数pgid是指定的进程组号。如果它为0,则让它等于
// 进程组号。如果该函数用于将进程从一个进程组移到另一个进程组，则这两个进程组必须属于同一个会话（session）。在这种情
// 况下，参数pgid指定了要加入的现在进程组ID，此时该组的会话ID必须与将要加入进程的相同。
int sys_setpgid(int pid, int pgid)
{
    9934:	83 ec 1c             	sub    $0x1c,%esp
	int i;

	// 如果参数pid为0,则pid取值为当前进程的进程号pid。如果参数pgid为0,则pgid也取值为当前进程的pid。[??这里与POSIX标
	// 准的描述有出入]。若pgid小于0,则返回无效错误码。
	if (!pid)
    9937:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    993c:	75 0f                	jne    994d <sys_setpgid+0x19>
		pid = current->pid;
    993e:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9943:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    9949:	89 44 24 20          	mov    %eax,0x20(%esp)
	if (!pgid)
    994d:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
    9952:	75 0f                	jne    9963 <sys_setpgid+0x2f>
		pgid = current->pid;
    9954:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9959:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    995f:	89 44 24 24          	mov    %eax,0x24(%esp)
	if (pgid < 0)
    9963:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
    9968:	79 0a                	jns    9974 <sys_setpgid+0x40>
		return -EINVAL;
    996a:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    996f:	e9 0e 01 00 00       	jmp    9a82 <sys_setpgid+0x14e>
	// 扫描任务数组，查找指定进程号pid的任务。如果找到了进程号是pid的进程，并且该进程的父进程就是当前进程或者该进程就是当
	// 前进程，那么若该任务已经是会话首领，则出错返回。若该任务的会话号（session）与当前进程的不同，或者指定的进程组号pgid
	// 与pid不同并且pgid进程组所属会话号与当前进程所属会话号不同，则也出错返回。否则把查找到的进程的pgrp设置为pgid，并
	// 返回0。若没有找到指定pid的进程，则返回进程不存在出错码。
	for (i = 0 ; i < NR_TASKS ; i++)
    9974:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    997b:	00 
    997c:	e9 f1 00 00 00       	jmp    9a72 <sys_setpgid+0x13e>
		if (task[i] && (task[i]->pid == pid) && ((task[i]->p_pptr == current) || (task[i] == current))) {
    9981:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9985:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    998c:	85 c0                	test   %eax,%eax
    998e:	0f 84 d9 00 00 00    	je     9a6d <sys_setpgid+0x139>
    9994:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9998:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    999f:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    99a5:	3b 44 24 20          	cmp    0x20(%esp),%eax
    99a9:	0f 85 be 00 00 00    	jne    9a6d <sys_setpgid+0x139>
    99af:	8b 44 24 0c          	mov    0xc(%esp),%eax
    99b3:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    99ba:	8b 90 bc 02 00 00    	mov    0x2bc(%eax),%edx
    99c0:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    99c5:	39 c2                	cmp    %eax,%edx
    99c7:	74 18                	je     99e1 <sys_setpgid+0xad>
    99c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    99cd:	8b 14 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%edx
    99d4:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    99d9:	39 c2                	cmp    %eax,%edx
    99db:	0f 85 8c 00 00 00    	jne    9a6d <sys_setpgid+0x139>
			if (task[i]->leader)
    99e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
    99e5:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    99ec:	8b 80 38 02 00 00    	mov    0x238(%eax),%eax
    99f2:	85 c0                	test   %eax,%eax
    99f4:	74 0a                	je     9a00 <sys_setpgid+0xcc>
				return -EPERM;
    99f6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    99fb:	e9 82 00 00 00       	jmp    9a82 <sys_setpgid+0x14e>
			if ((task[i]->session != current->session) ||
    9a00:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9a04:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    9a0b:	8b 90 34 02 00 00    	mov    0x234(%eax),%edx
    9a11:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9a16:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
    9a1c:	39 c2                	cmp    %eax,%edx
    9a1e:	75 2a                	jne    9a4a <sys_setpgid+0x116>
    9a20:	8b 44 24 24          	mov    0x24(%esp),%eax
    9a24:	3b 44 24 20          	cmp    0x20(%esp),%eax
    9a28:	74 27                	je     9a51 <sys_setpgid+0x11d>
			    ((pgid != pid) &&
			     (session_of_pgrp(pgid) != current->session)))
    9a2a:	83 ec 0c             	sub    $0xc,%esp
    9a2d:	ff 74 24 30          	pushl  0x30(%esp)
    9a31:	e8 ac 10 00 00       	call   aae2 <session_of_pgrp>
    9a36:	83 c4 10             	add    $0x10,%esp
    9a39:	89 c2                	mov    %eax,%edx
    9a3b:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9a40:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
	for (i = 0 ; i < NR_TASKS ; i++)
		if (task[i] && (task[i]->pid == pid) && ((task[i]->p_pptr == current) || (task[i] == current))) {
			if (task[i]->leader)
				return -EPERM;
			if ((task[i]->session != current->session) ||
			    ((pgid != pid) &&
    9a46:	39 c2                	cmp    %eax,%edx
    9a48:	74 07                	je     9a51 <sys_setpgid+0x11d>
			     (session_of_pgrp(pgid) != current->session)))
				return -EPERM;
    9a4a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    9a4f:	eb 31                	jmp    9a82 <sys_setpgid+0x14e>
			task[i]->pgrp = pgid;
    9a51:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9a55:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    9a5c:	8b 54 24 24          	mov    0x24(%esp),%edx
    9a60:	89 90 30 02 00 00    	mov    %edx,0x230(%eax)
			return 0;
    9a66:	b8 00 00 00 00       	mov    $0x0,%eax
    9a6b:	eb 15                	jmp    9a82 <sys_setpgid+0x14e>
		return -EINVAL;
	// 扫描任务数组，查找指定进程号pid的任务。如果找到了进程号是pid的进程，并且该进程的父进程就是当前进程或者该进程就是当
	// 前进程，那么若该任务已经是会话首领，则出错返回。若该任务的会话号（session）与当前进程的不同，或者指定的进程组号pgid
	// 与pid不同并且pgid进程组所属会话号与当前进程所属会话号不同，则也出错返回。否则把查找到的进程的pgrp设置为pgid，并
	// 返回0。若没有找到指定pid的进程，则返回进程不存在出错码。
	for (i = 0 ; i < NR_TASKS ; i++)
    9a6d:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    9a72:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    9a77:	0f 8e 04 ff ff ff    	jle    9981 <sys_setpgid+0x4d>
			     (session_of_pgrp(pgid) != current->session)))
				return -EPERM;
			task[i]->pgrp = pgid;
			return 0;
		}
	return -ESRCH;
    9a7d:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
    9a82:	83 c4 1c             	add    $0x1c,%esp
    9a85:	c3                   	ret    

00009a86 <sys_getpgrp>:

// 返回当前进程的进程组号。与getpgid(0)等同。
int sys_getpgrp(void)
{
	return current->pgrp;
    9a86:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9a8b:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
}
    9a91:	c3                   	ret    

00009a92 <sys_setsid>:
// 创建一个会话（session）（即设置其leader = 1），并且设置其会话号=其组号=其进程号。
// 如果当前进程已是会话首领并且不是超级用户，则出错返回。否则设置当前进程为新会话首领（leader = 1），并且设置当前进程会话
// 号session和组号pgrp都等于进程号pid，而且设置当前进程没有控制终端。最后系统调用返回会话号。
int sys_setsid(void)
{
	if (current->leader && !suser())
    9a92:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9a97:	8b 80 38 02 00 00    	mov    0x238(%eax),%eax
    9a9d:	85 c0                	test   %eax,%eax
    9a9f:	74 18                	je     9ab9 <sys_setsid+0x27>
    9aa1:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9aa6:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    9aad:	66 85 c0             	test   %ax,%ax
    9ab0:	74 07                	je     9ab9 <sys_setsid+0x27>
		return -EPERM;
    9ab2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    9ab7:	eb 52                	jmp    9b0b <sys_setsid+0x79>
	current->leader = 1;
    9ab9:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9abe:	c7 80 38 02 00 00 01 	movl   $0x1,0x238(%eax)
    9ac5:	00 00 00 
	current->session = current->pgrp = current->pid;
    9ac8:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    9ace:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9ad3:	8b 0d a0 e1 02 00    	mov    0x2e1a0,%ecx
    9ad9:	8b 89 2c 02 00 00    	mov    0x22c(%ecx),%ecx
    9adf:	89 88 30 02 00 00    	mov    %ecx,0x230(%eax)
    9ae5:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    9aeb:	89 82 34 02 00 00    	mov    %eax,0x234(%edx)
	current->tty = -1;      				// 表示当前进程没有控制终端。
    9af1:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9af6:	c7 80 2c 03 00 00 ff 	movl   $0xffffffff,0x32c(%eax)
    9afd:	ff ff ff 
	return current->pgrp;
    9b00:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9b05:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
}
    9b0b:	c3                   	ret    

00009b0c <sys_getgroups>:
// 取当前进程其他辅助用户组号。
// 任务数据结构中groups[]数组保存着进程同时所属的多个用户组号。该数组共NGROUPS个项，若某项值是NOGROUP（即为-1），则
// 表示从该项开始以后所有项都空闲。否则数组项中保存的是用户组号。
// 参数gidsetsize是获取的用户组号个数；grouplist是存储这些用户组号的用户空间缓存。
int sys_getgroups(int gidsetsize, gid_t *grouplist)
{
    9b0c:	83 ec 1c             	sub    $0x1c,%esp

	// 首先验证grouplist指针所指的用户缓存空间是否足够，然后从当前进程结构的groups[]数组中逐个取得用户组号并复制到用户缓存
	// 中。在复制过程中，如果groups[]中的项数大于给定的参数gitsetsize所指定的个数，则表示用户给出的缓存太小，不能容下当前
	// 进程所有组号，因此此次取组号操作会出错返回。若复制过程正常，则函数最后会返回复制的用户组号个数。（gidsetsize - gid
	// set size，用户组号集大小）。
	if (gidsetsize)
    9b0f:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    9b14:	74 16                	je     9b2c <sys_getgroups+0x20>
		verify_area(grouplist, sizeof(gid_t) * gidsetsize);
    9b16:	8b 44 24 20          	mov    0x20(%esp),%eax
    9b1a:	01 c0                	add    %eax,%eax
    9b1c:	83 ec 08             	sub    $0x8,%esp
    9b1f:	50                   	push   %eax
    9b20:	ff 74 24 30          	pushl  0x30(%esp)
    9b24:	e8 7a e8 ff ff       	call   83a3 <verify_area>
    9b29:	83 c4 10             	add    $0x10,%esp

	for (i = 0; (i < NGROUPS) && (current->groups[i] != NOGROUP); i++, grouplist++) {
    9b2c:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    9b33:	00 
    9b34:	eb 46                	jmp    9b7c <sys_getgroups+0x70>
		if (gidsetsize) {
    9b36:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    9b3b:	74 35                	je     9b72 <sys_getgroups+0x66>
			if (i >= gidsetsize)
    9b3d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9b41:	3b 44 24 20          	cmp    0x20(%esp),%eax
    9b45:	7c 07                	jl     9b4e <sys_getgroups+0x42>
				return -EINVAL;
    9b47:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    9b4c:	eb 51                	jmp    9b9f <sys_getgroups+0x93>
			put_fs_word(current->groups[i], (short *) grouplist);
    9b4e:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9b53:	8b 54 24 0c          	mov    0xc(%esp),%edx
    9b57:	81 c2 8c 00 00 00    	add    $0x8c,%edx
    9b5d:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
    9b61:	98                   	cwtl   
    9b62:	83 ec 08             	sub    $0x8,%esp
    9b65:	ff 74 24 2c          	pushl  0x2c(%esp)
    9b69:	50                   	push   %eax
    9b6a:	e8 de f8 ff ff       	call   944d <put_fs_word>
    9b6f:	83 c4 10             	add    $0x10,%esp
	// 进程所有组号，因此此次取组号操作会出错返回。若复制过程正常，则函数最后会返回复制的用户组号个数。（gidsetsize - gid
	// set size，用户组号集大小）。
	if (gidsetsize)
		verify_area(grouplist, sizeof(gid_t) * gidsetsize);

	for (i = 0; (i < NGROUPS) && (current->groups[i] != NOGROUP); i++, grouplist++) {
    9b72:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    9b77:	83 44 24 24 02       	addl   $0x2,0x24(%esp)
    9b7c:	83 7c 24 0c 1f       	cmpl   $0x1f,0xc(%esp)
    9b81:	7f 18                	jg     9b9b <sys_getgroups+0x8f>
    9b83:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9b88:	8b 54 24 0c          	mov    0xc(%esp),%edx
    9b8c:	81 c2 8c 00 00 00    	add    $0x8c,%edx
    9b92:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
    9b96:	83 f8 ff             	cmp    $0xffffffff,%eax
    9b99:	75 9b                	jne    9b36 <sys_getgroups+0x2a>
			if (i >= gidsetsize)
				return -EINVAL;
			put_fs_word(current->groups[i], (short *) grouplist);
		}
	}
	return(i);              				// 返回实际含有的用户组号个数。
    9b9b:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    9b9f:	83 c4 1c             	add    $0x1c,%esp
    9ba2:	c3                   	ret    

00009ba3 <sys_setgroups>:

// 设置当前进程同时所属的其他辅助用户组号。
// 参数gidsetsize是将设置的用户组号个数；grouplist是含有用户组号的用户空间缓存。
int sys_setgroups(int gidsetsize, gid_t *grouplist)
{
    9ba3:	53                   	push   %ebx
    9ba4:	83 ec 10             	sub    $0x10,%esp
	int	i;

	// 首先查权限和参数的有效性。只有超级用户可以修改或设置当前进程的辅助用户组号，而且设置的项数不能超过进程的groups[NGROUPS]
	// 数组的容量。然后从用户缓冲中逐个复制用户组号，共gidsetsize个。如果复制的个数没有填满group[]，则在随后一项上填上值为-1
	// 的项（NOGROUP）。最后函数返回0。
	if (!suser())
    9ba7:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9bac:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    9bb3:	66 85 c0             	test   %ax,%ax
    9bb6:	74 07                	je     9bbf <sys_setgroups+0x1c>
		return -EPERM;
    9bb8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    9bbd:	eb 72                	jmp    9c31 <sys_setgroups+0x8e>
	if (gidsetsize > NGROUPS)
    9bbf:	83 7c 24 18 20       	cmpl   $0x20,0x18(%esp)
    9bc4:	7e 07                	jle    9bcd <sys_setgroups+0x2a>
		return -EINVAL;
    9bc6:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    9bcb:	eb 64                	jmp    9c31 <sys_setgroups+0x8e>
	for (i = 0; i < gidsetsize; i++, grouplist++) {
    9bcd:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    9bd4:	00 
    9bd5:	eb 2d                	jmp    9c04 <sys_setgroups+0x61>
		current->groups[i] = get_fs_word((unsigned short *) grouplist);
    9bd7:	8b 1d a0 e1 02 00    	mov    0x2e1a0,%ebx
    9bdd:	ff 74 24 1c          	pushl  0x1c(%esp)
    9be1:	e8 1e f8 ff ff       	call   9404 <get_fs_word>
    9be6:	83 c4 04             	add    $0x4,%esp
    9be9:	0f b7 c0             	movzwl %ax,%eax
    9bec:	8b 54 24 0c          	mov    0xc(%esp),%edx
    9bf0:	81 c2 8c 00 00 00    	add    $0x8c,%edx
    9bf6:	89 44 93 0c          	mov    %eax,0xc(%ebx,%edx,4)
	// 的项（NOGROUP）。最后函数返回0。
	if (!suser())
		return -EPERM;
	if (gidsetsize > NGROUPS)
		return -EINVAL;
	for (i = 0; i < gidsetsize; i++, grouplist++) {
    9bfa:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    9bff:	83 44 24 1c 02       	addl   $0x2,0x1c(%esp)
    9c04:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9c08:	3b 44 24 18          	cmp    0x18(%esp),%eax
    9c0c:	7c c9                	jl     9bd7 <sys_setgroups+0x34>
		current->groups[i] = get_fs_word((unsigned short *) grouplist);
	}
	if (i < NGROUPS)
    9c0e:	83 7c 24 0c 1f       	cmpl   $0x1f,0xc(%esp)
    9c13:	7f 17                	jg     9c2c <sys_setgroups+0x89>
		current->groups[i] = NOGROUP;
    9c15:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9c1a:	8b 54 24 0c          	mov    0xc(%esp),%edx
    9c1e:	81 c2 8c 00 00 00    	add    $0x8c,%edx
    9c24:	c7 44 90 0c ff ff ff 	movl   $0xffffffff,0xc(%eax,%edx,4)
    9c2b:	ff 
	return 0;
    9c2c:	b8 00 00 00 00       	mov    $0x0,%eax
}
    9c31:	83 c4 10             	add    $0x10,%esp
    9c34:	5b                   	pop    %ebx
    9c35:	c3                   	ret    

00009c36 <in_group_p>:

// 检查当前进程是否在指定的用户组grp中.是则返回1,否则返回0.
int in_group_p(gid_t grp)
{
    9c36:	83 ec 14             	sub    $0x14,%esp
    9c39:	8b 44 24 18          	mov    0x18(%esp),%eax
    9c3d:	66 89 04 24          	mov    %ax,(%esp)
	int	i;

	// 如果当前进程的有效组号就是grp,则表示进程属于grp进程组.函数返回1.否则就在进程的辅助用户组数组中扫描是否有grp进程组号.若
	// 有则函数也返回1.若扫描到值为NOGROUP的项,表示已扫描完全部有效项没有发现匹配的组号,因此函数返回0.
	if (grp == current->egid)
    9c41:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9c46:	0f b7 80 d4 02 00 00 	movzwl 0x2d4(%eax),%eax
    9c4d:	66 3b 04 24          	cmp    (%esp),%ax
    9c51:	75 07                	jne    9c5a <in_group_p+0x24>
		return 1;
    9c53:	b8 01 00 00 00       	mov    $0x1,%eax
    9c58:	eb 58                	jmp    9cb2 <in_group_p+0x7c>

	for (i = 0; i < NGROUPS; i++) {
    9c5a:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
    9c61:	00 
    9c62:	eb 3f                	jmp    9ca3 <in_group_p+0x6d>
		if (current->groups[i] == NOGROUP)
    9c64:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9c69:	8b 54 24 10          	mov    0x10(%esp),%edx
    9c6d:	81 c2 8c 00 00 00    	add    $0x8c,%edx
    9c73:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
    9c77:	83 f8 ff             	cmp    $0xffffffff,%eax
    9c7a:	74 30                	je     9cac <in_group_p+0x76>
			break;
		if (current->groups[i] == grp)
    9c7c:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9c81:	8b 54 24 10          	mov    0x10(%esp),%edx
    9c85:	81 c2 8c 00 00 00    	add    $0x8c,%edx
    9c8b:	8b 54 90 0c          	mov    0xc(%eax,%edx,4),%edx
    9c8f:	0f b7 04 24          	movzwl (%esp),%eax
    9c93:	39 c2                	cmp    %eax,%edx
    9c95:	75 07                	jne    9c9e <in_group_p+0x68>
			return 1;
    9c97:	b8 01 00 00 00       	mov    $0x1,%eax
    9c9c:	eb 14                	jmp    9cb2 <in_group_p+0x7c>
	// 如果当前进程的有效组号就是grp,则表示进程属于grp进程组.函数返回1.否则就在进程的辅助用户组数组中扫描是否有grp进程组号.若
	// 有则函数也返回1.若扫描到值为NOGROUP的项,表示已扫描完全部有效项没有发现匹配的组号,因此函数返回0.
	if (grp == current->egid)
		return 1;

	for (i = 0; i < NGROUPS; i++) {
    9c9e:	83 44 24 10 01       	addl   $0x1,0x10(%esp)
    9ca3:	83 7c 24 10 1f       	cmpl   $0x1f,0x10(%esp)
    9ca8:	7e ba                	jle    9c64 <in_group_p+0x2e>
    9caa:	eb 01                	jmp    9cad <in_group_p+0x77>
		if (current->groups[i] == NOGROUP)
			break;
    9cac:	90                   	nop
		if (current->groups[i] == grp)
			return 1;
	}
	return 0;
    9cad:	b8 00 00 00 00       	mov    $0x0,%eax
}
    9cb2:	83 c4 14             	add    $0x14,%esp
    9cb5:	c3                   	ret    

00009cb6 <sys_uname>:
	UTS_SYSNAME, UTS_NODENAME, UTS_RELEASE, UTS_VERSION, UTS_MACHINE
};

// 获取系统名称等信息。
int sys_uname(struct utsname * name)
{
    9cb6:	83 ec 1c             	sub    $0x1c,%esp
	int i;

	if (!name) return -ERROR;
    9cb9:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    9cbe:	75 07                	jne    9cc7 <sys_uname+0x11>
    9cc0:	b8 9d ff ff ff       	mov    $0xffffff9d,%eax
    9cc5:	eb 54                	jmp    9d1b <sys_uname+0x65>
	verify_area(name,sizeof *name);
    9cc7:	83 ec 08             	sub    $0x8,%esp
    9cca:	6a 2d                	push   $0x2d
    9ccc:	ff 74 24 2c          	pushl  0x2c(%esp)
    9cd0:	e8 ce e6 ff ff       	call   83a3 <verify_area>
    9cd5:	83 c4 10             	add    $0x10,%esp
	for(i = 0; i < sizeof *name; i++)
    9cd8:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    9cdf:	00 
    9ce0:	eb 2b                	jmp    9d0d <sys_uname+0x57>
		put_fs_byte(((char *) &thisname)[i], i + (char *) name);
    9ce2:	8b 54 24 0c          	mov    0xc(%esp),%edx
    9ce6:	8b 44 24 20          	mov    0x20(%esp),%eax
    9cea:	01 c2                	add    %eax,%edx
    9cec:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9cf0:	05 e0 e2 02 00       	add    $0x2e2e0,%eax
    9cf5:	0f b6 00             	movzbl (%eax),%eax
    9cf8:	0f be c0             	movsbl %al,%eax
    9cfb:	83 ec 08             	sub    $0x8,%esp
    9cfe:	52                   	push   %edx
    9cff:	50                   	push   %eax
    9d00:	e8 2e f7 ff ff       	call   9433 <put_fs_byte>
    9d05:	83 c4 10             	add    $0x10,%esp
{
	int i;

	if (!name) return -ERROR;
	verify_area(name,sizeof *name);
	for(i = 0; i < sizeof *name; i++)
    9d08:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    9d0d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9d11:	83 f8 2c             	cmp    $0x2c,%eax
    9d14:	76 cc                	jbe    9ce2 <sys_uname+0x2c>
		put_fs_byte(((char *) &thisname)[i], i + (char *) name);
	return 0;
    9d16:	b8 00 00 00 00       	mov    $0x0,%eax
}
    9d1b:	83 c4 1c             	add    $0x1c,%esp
    9d1e:	c3                   	ret    

00009d1f <sys_sethostname>:
 * 通过调用uname()只能实现sethostname和gethostname。
 */
// 设置系统主机名（系统的网络节点名）。
// 参数name指针指向用户数据区中含有主机名字符串的缓冲区；len是主机名字符串长度。
int sys_sethostname(char *name, int len)
{
    9d1f:	83 ec 10             	sub    $0x10,%esp
	int	i;

	// 系统主机名只能由超级用户设置或修改，并且主机名长度不能超过最大长度MAXHOSTNAMELEN。
	if (!suser())
    9d22:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9d27:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    9d2e:	66 85 c0             	test   %ax,%ax
    9d31:	74 0a                	je     9d3d <sys_sethostname+0x1e>
		return -EPERM;
    9d33:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    9d38:	e9 85 00 00 00       	jmp    9dc2 <sys_sethostname+0xa3>
	if (len > MAXHOSTNAMELEN)
    9d3d:	83 7c 24 18 08       	cmpl   $0x8,0x18(%esp)
    9d42:	7e 07                	jle    9d4b <sys_sethostname+0x2c>
		return -EINVAL;
    9d44:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    9d49:	eb 77                	jmp    9dc2 <sys_sethostname+0xa3>
	for (i = 0; i < len; i++) {
    9d4b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    9d52:	00 
    9d53:	eb 35                	jmp    9d8a <sys_sethostname+0x6b>
		if ((thisname.nodename[i] = get_fs_byte(name + i)) == 0)
    9d55:	8b 54 24 0c          	mov    0xc(%esp),%edx
    9d59:	8b 44 24 14          	mov    0x14(%esp),%eax
    9d5d:	01 d0                	add    %edx,%eax
    9d5f:	50                   	push   %eax
    9d60:	e8 91 f6 ff ff       	call   93f6 <get_fs_byte>
    9d65:	83 c4 04             	add    $0x4,%esp
    9d68:	89 c2                	mov    %eax,%edx
    9d6a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9d6e:	05 e9 e2 02 00       	add    $0x2e2e9,%eax
    9d73:	88 10                	mov    %dl,(%eax)
    9d75:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9d79:	05 e9 e2 02 00       	add    $0x2e2e9,%eax
    9d7e:	0f b6 00             	movzbl (%eax),%eax
    9d81:	84 c0                	test   %al,%al
    9d83:	74 11                	je     9d96 <sys_sethostname+0x77>
	// 系统主机名只能由超级用户设置或修改，并且主机名长度不能超过最大长度MAXHOSTNAMELEN。
	if (!suser())
		return -EPERM;
	if (len > MAXHOSTNAMELEN)
		return -EINVAL;
	for (i = 0; i < len; i++) {
    9d85:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    9d8a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9d8e:	3b 44 24 18          	cmp    0x18(%esp),%eax
    9d92:	7c c1                	jl     9d55 <sys_sethostname+0x36>
    9d94:	eb 01                	jmp    9d97 <sys_sethostname+0x78>
		if ((thisname.nodename[i] = get_fs_byte(name + i)) == 0)
			break;
    9d96:	90                   	nop
	}
	// 在复制完毕后，如果用户提供的字符串没有包含NULL字符，那么若复制的主机名长度还没有超过MAXHOSTNAMELEN，则在主机名字
	// 符串后添加一个NULL。若已经填满MAXHOSTNAMELEN个字符，则把最后一个字符改成NULL字符。即thisname.nodename[min(
	// i,MAXHOSTNAMELEN)] = 0。
	if (thisname.nodename[i]) {
    9d97:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9d9b:	05 e9 e2 02 00       	add    $0x2e2e9,%eax
    9da0:	0f b6 00             	movzbl (%eax),%eax
    9da3:	84 c0                	test   %al,%al
    9da5:	74 16                	je     9dbd <sys_sethostname+0x9e>
		thisname.nodename[i > MAXHOSTNAMELEN ? MAXHOSTNAMELEN : i] = 0;
    9da7:	b8 08 00 00 00       	mov    $0x8,%eax
    9dac:	83 7c 24 0c 08       	cmpl   $0x8,0xc(%esp)
    9db1:	0f 4e 44 24 0c       	cmovle 0xc(%esp),%eax
    9db6:	c6 80 e9 e2 02 00 00 	movb   $0x0,0x2e2e9(%eax)
	}
	return 0;
    9dbd:	b8 00 00 00 00       	mov    $0x0,%eax
}
    9dc2:	83 c4 10             	add    $0x10,%esp
    9dc5:	c3                   	ret    

00009dc6 <sys_getrlimit>:
// 界限（hard limit，即硬限制）。rlim[]数组的每一项对应系统对当前进程一种资源的界限信息。Linux 0.12系统共对6种资源
// 规定了界限，即RLIM_NLIMITS=6。请参考头文件include/sys/resource.h说明。
// 参数resource指定我们咨询的资源名称，实际上它是任务结构中rlim[]数组的索引项值。
// 参数rlim是指向rlimit结构的用户缓冲区指针，用于存放取得的资源界限信息。
int sys_getrlimit(int resource, struct rlimit *rlim)
{
    9dc6:	83 ec 0c             	sub    $0xc,%esp
	// 所咨询的资源resource实际上是进程任务结构中rlim[]数组的索引项值。该索引值当然不能大于数组的最大项数RLIM_NLIMITS。
	// 在验证过rlim指针所指用户缓冲足够以后，这里就把参数指定的资源resource结构信息复制到用户缓冲区中，并返回0。
	if (resource >= RLIM_NLIMITS)
    9dc9:	83 7c 24 10 05       	cmpl   $0x5,0x10(%esp)
    9dce:	7e 07                	jle    9dd7 <sys_getrlimit+0x11>
		return -EINVAL;
    9dd0:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    9dd5:	eb 5a                	jmp    9e31 <sys_getrlimit+0x6b>
	verify_area(rlim, sizeof *rlim);
    9dd7:	83 ec 08             	sub    $0x8,%esp
    9dda:	6a 08                	push   $0x8
    9ddc:	ff 74 24 20          	pushl  0x20(%esp)
    9de0:	e8 be e5 ff ff       	call   83a3 <verify_area>
    9de5:	83 c4 10             	add    $0x10,%esp
	put_fs_long(current->rlim[resource].rlim_cur,           // 当前（软）限制值。
    9de8:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9ded:	8b 54 24 10          	mov    0x10(%esp),%edx
    9df1:	83 c2 5e             	add    $0x5e,%edx
    9df4:	8b 44 d0 04          	mov    0x4(%eax,%edx,8),%eax
    9df8:	83 ec 08             	sub    $0x8,%esp
    9dfb:	ff 74 24 1c          	pushl  0x1c(%esp)
    9dff:	50                   	push   %eax
    9e00:	e8 64 f6 ff ff       	call   9469 <put_fs_long>
    9e05:	83 c4 10             	add    $0x10,%esp
		    (unsigned long *) rlim);
	put_fs_long(current->rlim[resource].rlim_max,           // 系统（硬）限制值。
    9e08:	8b 44 24 14          	mov    0x14(%esp),%eax
    9e0c:	8d 50 04             	lea    0x4(%eax),%edx
    9e0f:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9e14:	8b 4c 24 10          	mov    0x10(%esp),%ecx
    9e18:	83 c1 5e             	add    $0x5e,%ecx
    9e1b:	8b 44 c8 08          	mov    0x8(%eax,%ecx,8),%eax
    9e1f:	83 ec 08             	sub    $0x8,%esp
    9e22:	52                   	push   %edx
    9e23:	50                   	push   %eax
    9e24:	e8 40 f6 ff ff       	call   9469 <put_fs_long>
    9e29:	83 c4 10             	add    $0x10,%esp
		    ((unsigned long *) rlim) + 1);
	return 0;
    9e2c:	b8 00 00 00 00       	mov    $0x0,%eax
}
    9e31:	83 c4 0c             	add    $0xc,%esp
    9e34:	c3                   	ret    

00009e35 <sys_setrlimit>:

// 设置当前进程指定资源的界限值。
// 参数resource指定我们设置界限的资源名称，实际上它是任务结构中rlim[]数组的索引项值。
// 参数rlim是指向rlimit结构的用户缓冲区指针，用于内核读取新的资源界限信息。
int sys_setrlimit(int resource, struct rlimit *rlim)
{
    9e35:	83 ec 10             	sub    $0x10,%esp

	// 首先判断参数resource（任务结构rlim[]项索引值）有效性。然后先让rlimit结构指针old指向进程任务结构中指定资源的当前
	// rlimit结构信息。接着把用户提供的资源界限信息复制到临时rlimit结构new中。此时如果判断出new结构中的软界限值或硬界限
	// 值大于进程该资源原硬界限值，并且当前不是超级用户的话，就返回许可出错。否则表示new中信息合理或者进程是超级用户进程，
	// 则修改原进程指定资源信息等于new结构中的信息，并成功返回0。
	if (resource >= RLIM_NLIMITS)
    9e38:	83 7c 24 14 05       	cmpl   $0x5,0x14(%esp)
    9e3d:	7e 0a                	jle    9e49 <sys_setrlimit+0x14>
		return -EINVAL;
    9e3f:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    9e44:	e9 88 00 00 00       	jmp    9ed1 <sys_setrlimit+0x9c>
	old = current->rlim + resource;
    9e49:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9e4e:	8d 90 f4 02 00 00    	lea    0x2f4(%eax),%edx
    9e54:	8b 44 24 14          	mov    0x14(%esp),%eax
    9e58:	c1 e0 03             	shl    $0x3,%eax
    9e5b:	01 d0                	add    %edx,%eax
    9e5d:	89 44 24 0c          	mov    %eax,0xc(%esp)
	new.rlim_cur = get_fs_long((unsigned long *) rlim);
    9e61:	ff 74 24 18          	pushl  0x18(%esp)
    9e65:	e8 b3 f5 ff ff       	call   941d <get_fs_long>
    9e6a:	83 c4 04             	add    $0x4,%esp
    9e6d:	89 44 24 04          	mov    %eax,0x4(%esp)
	new.rlim_max = get_fs_long(((unsigned long *) rlim) + 1);
    9e71:	8b 44 24 18          	mov    0x18(%esp),%eax
    9e75:	83 c0 04             	add    $0x4,%eax
    9e78:	50                   	push   %eax
    9e79:	e8 9f f5 ff ff       	call   941d <get_fs_long>
    9e7e:	83 c4 04             	add    $0x4,%esp
    9e81:	89 44 24 08          	mov    %eax,0x8(%esp)
	if (((new.rlim_cur > old->rlim_max) || (new.rlim_max > old->rlim_max)) && !suser())
    9e85:	8b 54 24 04          	mov    0x4(%esp),%edx
    9e89:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9e8d:	8b 40 04             	mov    0x4(%eax),%eax
    9e90:	39 c2                	cmp    %eax,%edx
    9e92:	7f 0f                	jg     9ea3 <sys_setrlimit+0x6e>
    9e94:	8b 54 24 08          	mov    0x8(%esp),%edx
    9e98:	8b 44 24 0c          	mov    0xc(%esp),%eax
    9e9c:	8b 40 04             	mov    0x4(%eax),%eax
    9e9f:	39 c2                	cmp    %eax,%edx
    9ea1:	7e 18                	jle    9ebb <sys_setrlimit+0x86>
    9ea3:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9ea8:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    9eaf:	66 85 c0             	test   %ax,%ax
    9eb2:	74 07                	je     9ebb <sys_setrlimit+0x86>
		return -EPERM;
    9eb4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    9eb9:	eb 16                	jmp    9ed1 <sys_setrlimit+0x9c>
	*old = new;
    9ebb:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
    9ebf:	8b 44 24 04          	mov    0x4(%esp),%eax
    9ec3:	8b 54 24 08          	mov    0x8(%esp),%edx
    9ec7:	89 01                	mov    %eax,(%ecx)
    9ec9:	89 51 04             	mov    %edx,0x4(%ecx)
	return 0;
    9ecc:	b8 00 00 00 00       	mov    $0x0,%eax
}
    9ed1:	83 c4 10             	add    $0x10,%esp
    9ed4:	c3                   	ret    

00009ed5 <sys_getrusage>:
// 获取指定进程的资源利用信息。
// 本系统调用提供当前进程或其已终止的和等待着的子进程资源使用情况。如果参数who等于RUSAGE_SELF，则返回当前进程的资源利用
// 信息。如果指定进程who是RUSAGE_CHILDREN，则返回当前进程的已终止和等待着的子进程资源利用信息。符号常数RUSAGE_SELF和
// RUSAGE_CHILDREN以及rusage结构都定义在include/sys/resource.h文件中。
int sys_getrusage(int who, struct rusage *ru)
{
    9ed5:	83 ec 6c             	sub    $0x6c,%esp
	struct rusage r;
	unsigned long	*lp, *lpend, *dest;

	// 首先判断参数指定进程的有效性。如果who即不是RUSAGE_SELF（指定当前进程），也不是RUSAGE_CHILDREN（指定子进程），则以
	// 无效参数码返回。否则在验证了指针ru指定的用户缓冲区域后，把临时rusage结构区域r清零。
	if (who != RUSAGE_SELF && who != RUSAGE_CHILDREN)
    9ed8:	83 7c 24 70 00       	cmpl   $0x0,0x70(%esp)
    9edd:	74 11                	je     9ef0 <sys_getrusage+0x1b>
    9edf:	83 7c 24 70 ff       	cmpl   $0xffffffff,0x70(%esp)
    9ee4:	74 0a                	je     9ef0 <sys_getrusage+0x1b>
		return -EINVAL;
    9ee6:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    9eeb:	e9 2c 02 00 00       	jmp    a11c <sys_getrusage+0x247>
	verify_area(ru, sizeof *ru);
    9ef0:	83 ec 08             	sub    $0x8,%esp
    9ef3:	6a 48                	push   $0x48
    9ef5:	ff b4 24 80 00 00 00 	pushl  0x80(%esp)
    9efc:	e8 a2 e4 ff ff       	call   83a3 <verify_area>
    9f01:	83 c4 10             	add    $0x10,%esp
	memset((char *) &r, 0, sizeof(r));
    9f04:	83 ec 04             	sub    $0x4,%esp
    9f07:	6a 48                	push   $0x48
    9f09:	6a 00                	push   $0x0
    9f0b:	8d 44 24 18          	lea    0x18(%esp),%eax
    9f0f:	50                   	push   %eax
    9f10:	e8 61 f5 ff ff       	call   9476 <memset>
    9f15:	83 c4 10             	add    $0x10,%esp
	// 若参数who是RUSAGE_SELF，则复制当前进程资源利用信息到r结构中。若指定进程who是RUSAGE_CHILDREN，则复制当前进程的已终止
	// 和等待着的子进程资源利用信息到临时rusage结构r中。宏CT_TO_SECS和CT_TO_USECS用于把系统当前嘀嗒数转换成用秒值加微秒值
	// 表示。它们定义在include/linux/sched.h文件中。jiffies_offset是系统嘀嗒数误差调整数。
	if (who == RUSAGE_SELF) {
    9f18:	83 7c 24 70 00       	cmpl   $0x0,0x70(%esp)
    9f1d:	0f 85 d9 00 00 00    	jne    9ffc <sys_getrusage+0x127>
		r.ru_utime.tv_sec = CT_TO_SECS(current->utime);
    9f23:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9f28:	8b 88 e0 02 00 00    	mov    0x2e0(%eax),%ecx
    9f2e:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    9f33:	89 c8                	mov    %ecx,%eax
    9f35:	f7 ea                	imul   %edx
    9f37:	c1 fa 05             	sar    $0x5,%edx
    9f3a:	89 c8                	mov    %ecx,%eax
    9f3c:	c1 f8 1f             	sar    $0x1f,%eax
    9f3f:	29 c2                	sub    %eax,%edx
    9f41:	89 d0                	mov    %edx,%eax
    9f43:	89 44 24 0c          	mov    %eax,0xc(%esp)
		r.ru_utime.tv_usec = CT_TO_USECS(current->utime);
    9f47:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9f4c:	8b 88 e0 02 00 00    	mov    0x2e0(%eax),%ecx
    9f52:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    9f57:	89 c8                	mov    %ecx,%eax
    9f59:	f7 ea                	imul   %edx
    9f5b:	c1 fa 05             	sar    $0x5,%edx
    9f5e:	89 c8                	mov    %ecx,%eax
    9f60:	c1 f8 1f             	sar    $0x1f,%eax
    9f63:	29 c2                	sub    %eax,%edx
    9f65:	89 d0                	mov    %edx,%eax
    9f67:	6b c0 64             	imul   $0x64,%eax,%eax
    9f6a:	29 c1                	sub    %eax,%ecx
    9f6c:	89 c8                	mov    %ecx,%eax
    9f6e:	69 c8 40 42 0f 00    	imul   $0xf4240,%eax,%ecx
    9f74:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    9f79:	89 c8                	mov    %ecx,%eax
    9f7b:	f7 ea                	imul   %edx
    9f7d:	c1 fa 05             	sar    $0x5,%edx
    9f80:	89 c8                	mov    %ecx,%eax
    9f82:	c1 f8 1f             	sar    $0x1f,%eax
    9f85:	29 c2                	sub    %eax,%edx
    9f87:	89 d0                	mov    %edx,%eax
    9f89:	89 44 24 10          	mov    %eax,0x10(%esp)
		r.ru_stime.tv_sec = CT_TO_SECS(current->stime);
    9f8d:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9f92:	8b 88 e4 02 00 00    	mov    0x2e4(%eax),%ecx
    9f98:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    9f9d:	89 c8                	mov    %ecx,%eax
    9f9f:	f7 ea                	imul   %edx
    9fa1:	c1 fa 05             	sar    $0x5,%edx
    9fa4:	89 c8                	mov    %ecx,%eax
    9fa6:	c1 f8 1f             	sar    $0x1f,%eax
    9fa9:	29 c2                	sub    %eax,%edx
    9fab:	89 d0                	mov    %edx,%eax
    9fad:	89 44 24 14          	mov    %eax,0x14(%esp)
		r.ru_stime.tv_usec = CT_TO_USECS(current->stime);
    9fb1:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    9fb6:	8b 88 e4 02 00 00    	mov    0x2e4(%eax),%ecx
    9fbc:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    9fc1:	89 c8                	mov    %ecx,%eax
    9fc3:	f7 ea                	imul   %edx
    9fc5:	c1 fa 05             	sar    $0x5,%edx
    9fc8:	89 c8                	mov    %ecx,%eax
    9fca:	c1 f8 1f             	sar    $0x1f,%eax
    9fcd:	29 c2                	sub    %eax,%edx
    9fcf:	89 d0                	mov    %edx,%eax
    9fd1:	6b c0 64             	imul   $0x64,%eax,%eax
    9fd4:	29 c1                	sub    %eax,%ecx
    9fd6:	89 c8                	mov    %ecx,%eax
    9fd8:	69 c8 40 42 0f 00    	imul   $0xf4240,%eax,%ecx
    9fde:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    9fe3:	89 c8                	mov    %ecx,%eax
    9fe5:	f7 ea                	imul   %edx
    9fe7:	c1 fa 05             	sar    $0x5,%edx
    9fea:	89 c8                	mov    %ecx,%eax
    9fec:	c1 f8 1f             	sar    $0x1f,%eax
    9fef:	29 c2                	sub    %eax,%edx
    9ff1:	89 d0                	mov    %edx,%eax
    9ff3:	89 44 24 18          	mov    %eax,0x18(%esp)
    9ff7:	e9 d4 00 00 00       	jmp    a0d0 <sys_getrusage+0x1fb>
	} else {
		r.ru_utime.tv_sec = CT_TO_SECS(current->cutime);
    9ffc:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    a001:	8b 88 e8 02 00 00    	mov    0x2e8(%eax),%ecx
    a007:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    a00c:	89 c8                	mov    %ecx,%eax
    a00e:	f7 ea                	imul   %edx
    a010:	c1 fa 05             	sar    $0x5,%edx
    a013:	89 c8                	mov    %ecx,%eax
    a015:	c1 f8 1f             	sar    $0x1f,%eax
    a018:	29 c2                	sub    %eax,%edx
    a01a:	89 d0                	mov    %edx,%eax
    a01c:	89 44 24 0c          	mov    %eax,0xc(%esp)
		r.ru_utime.tv_usec = CT_TO_USECS(current->cutime);
    a020:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    a025:	8b 88 e8 02 00 00    	mov    0x2e8(%eax),%ecx
    a02b:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    a030:	89 c8                	mov    %ecx,%eax
    a032:	f7 ea                	imul   %edx
    a034:	c1 fa 05             	sar    $0x5,%edx
    a037:	89 c8                	mov    %ecx,%eax
    a039:	c1 f8 1f             	sar    $0x1f,%eax
    a03c:	29 c2                	sub    %eax,%edx
    a03e:	89 d0                	mov    %edx,%eax
    a040:	6b c0 64             	imul   $0x64,%eax,%eax
    a043:	29 c1                	sub    %eax,%ecx
    a045:	89 c8                	mov    %ecx,%eax
    a047:	69 c8 40 42 0f 00    	imul   $0xf4240,%eax,%ecx
    a04d:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    a052:	89 c8                	mov    %ecx,%eax
    a054:	f7 ea                	imul   %edx
    a056:	c1 fa 05             	sar    $0x5,%edx
    a059:	89 c8                	mov    %ecx,%eax
    a05b:	c1 f8 1f             	sar    $0x1f,%eax
    a05e:	29 c2                	sub    %eax,%edx
    a060:	89 d0                	mov    %edx,%eax
    a062:	89 44 24 10          	mov    %eax,0x10(%esp)
		r.ru_stime.tv_sec = CT_TO_SECS(current->cstime);
    a066:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    a06b:	8b 88 ec 02 00 00    	mov    0x2ec(%eax),%ecx
    a071:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    a076:	89 c8                	mov    %ecx,%eax
    a078:	f7 ea                	imul   %edx
    a07a:	c1 fa 05             	sar    $0x5,%edx
    a07d:	89 c8                	mov    %ecx,%eax
    a07f:	c1 f8 1f             	sar    $0x1f,%eax
    a082:	29 c2                	sub    %eax,%edx
    a084:	89 d0                	mov    %edx,%eax
    a086:	89 44 24 14          	mov    %eax,0x14(%esp)
		r.ru_stime.tv_usec = CT_TO_USECS(current->cstime);
    a08a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    a08f:	8b 88 ec 02 00 00    	mov    0x2ec(%eax),%ecx
    a095:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    a09a:	89 c8                	mov    %ecx,%eax
    a09c:	f7 ea                	imul   %edx
    a09e:	c1 fa 05             	sar    $0x5,%edx
    a0a1:	89 c8                	mov    %ecx,%eax
    a0a3:	c1 f8 1f             	sar    $0x1f,%eax
    a0a6:	29 c2                	sub    %eax,%edx
    a0a8:	89 d0                	mov    %edx,%eax
    a0aa:	6b c0 64             	imul   $0x64,%eax,%eax
    a0ad:	29 c1                	sub    %eax,%ecx
    a0af:	89 c8                	mov    %ecx,%eax
    a0b1:	69 c8 40 42 0f 00    	imul   $0xf4240,%eax,%ecx
    a0b7:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    a0bc:	89 c8                	mov    %ecx,%eax
    a0be:	f7 ea                	imul   %edx
    a0c0:	c1 fa 05             	sar    $0x5,%edx
    a0c3:	89 c8                	mov    %ecx,%eax
    a0c5:	c1 f8 1f             	sar    $0x1f,%eax
    a0c8:	29 c2                	sub    %eax,%edx
    a0ca:	89 d0                	mov    %edx,%eax
    a0cc:	89 44 24 18          	mov    %eax,0x18(%esp)
	}
	// 然后让lp指针指向r结构，lpend指向r结构末尾处，而dest指针指向用户空间中的ru结构。最后把r中信息复制到用户空间ru结构中，并
	// 返回0。
	lp = (unsigned long *) &r;
    a0d0:	8d 44 24 0c          	lea    0xc(%esp),%eax
    a0d4:	89 44 24 5c          	mov    %eax,0x5c(%esp)
	lpend = (unsigned long *) (&r + 1);
    a0d8:	8d 44 24 0c          	lea    0xc(%esp),%eax
    a0dc:	83 c0 48             	add    $0x48,%eax
    a0df:	89 44 24 54          	mov    %eax,0x54(%esp)
	dest = (unsigned long *) ru;
    a0e3:	8b 44 24 74          	mov    0x74(%esp),%eax
    a0e7:	89 44 24 58          	mov    %eax,0x58(%esp)
	for (; lp < lpend; lp++, dest++)
    a0eb:	eb 20                	jmp    a10d <sys_getrusage+0x238>
		put_fs_long(*lp, dest);
    a0ed:	8b 44 24 5c          	mov    0x5c(%esp),%eax
    a0f1:	8b 00                	mov    (%eax),%eax
    a0f3:	83 ec 08             	sub    $0x8,%esp
    a0f6:	ff 74 24 60          	pushl  0x60(%esp)
    a0fa:	50                   	push   %eax
    a0fb:	e8 69 f3 ff ff       	call   9469 <put_fs_long>
    a100:	83 c4 10             	add    $0x10,%esp
	// 然后让lp指针指向r结构，lpend指向r结构末尾处，而dest指针指向用户空间中的ru结构。最后把r中信息复制到用户空间ru结构中，并
	// 返回0。
	lp = (unsigned long *) &r;
	lpend = (unsigned long *) (&r + 1);
	dest = (unsigned long *) ru;
	for (; lp < lpend; lp++, dest++)
    a103:	83 44 24 5c 04       	addl   $0x4,0x5c(%esp)
    a108:	83 44 24 58 04       	addl   $0x4,0x58(%esp)
    a10d:	8b 44 24 5c          	mov    0x5c(%esp),%eax
    a111:	3b 44 24 54          	cmp    0x54(%esp),%eax
    a115:	72 d6                	jb     a0ed <sys_getrusage+0x218>
		put_fs_long(*lp, dest);
	return(0);
    a117:	b8 00 00 00 00       	mov    $0x0,%eax
}
    a11c:	83 c4 6c             	add    $0x6c,%esp
    a11f:	c3                   	ret    

0000a120 <sys_gettimeofday>:
// 取得系统当前时间，并用指定格式返回。
// timeval结构和timezone结构都定义在include/sys/time.h文件中。timeval结构含有秒和微秒（tv_sec和tv_usec）两个
// 字段。timezone结构含有本地距格林尼治标准时间以西的分钟数（tz_minuteswest）和夏令时间调整类型（tz_dsttime）两上
// 字段。（dst -- Daylight Savings Time）
int sys_gettimeofday(struct timeval *tv, struct timezone *tz)
{
    a120:	53                   	push   %ebx
    a121:	83 ec 08             	sub    $0x8,%esp
	// 如果参数给定的timeval结构指针不空，则在该结构中返回当前时间（秒值和微秒值）;
	// 如果参数给定的用户数据空间中timezone结构的指针不空，则也返回该结构的信息。
	// 程序中startup_time是系统开机时间（秒值）。宏CT_TO_SECS和CT_TO_USECS用于把系统当前嘀嗒数转换成用秒值加微秒值表示。
	// 它们定义在include/linux/sched.h文件中。jiffies_offset是系统嘀嗒数误差调整数。
	if (tv) {
    a124:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
    a129:	0f 84 88 00 00 00    	je     a1b7 <sys_gettimeofday+0x97>
		verify_area(tv, sizeof *tv);
    a12f:	83 ec 08             	sub    $0x8,%esp
    a132:	6a 08                	push   $0x8
    a134:	ff 74 24 1c          	pushl  0x1c(%esp)
    a138:	e8 66 e2 ff ff       	call   83a3 <verify_area>
    a13d:	83 c4 10             	add    $0x10,%esp
		put_fs_long(startup_time + CT_TO_SECS(jiffies + jiffies_offset),
    a140:	a1 00 eb 02 00       	mov    0x2eb00,%eax
    a145:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
    a14b:	01 d0                	add    %edx,%eax
    a14d:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    a152:	f7 e2                	mul    %edx
    a154:	c1 ea 05             	shr    $0x5,%edx
    a157:	a1 04 eb 02 00       	mov    0x2eb04,%eax
    a15c:	01 d0                	add    %edx,%eax
    a15e:	83 ec 08             	sub    $0x8,%esp
    a161:	ff 74 24 18          	pushl  0x18(%esp)
    a165:	50                   	push   %eax
    a166:	e8 fe f2 ff ff       	call   9469 <put_fs_long>
    a16b:	83 c4 10             	add    $0x10,%esp
			    (unsigned long *) tv);
		put_fs_long(CT_TO_USECS(jiffies + jiffies_offset),
    a16e:	8b 44 24 10          	mov    0x10(%esp),%eax
    a172:	8d 58 04             	lea    0x4(%eax),%ebx
    a175:	a1 00 eb 02 00       	mov    0x2eb00,%eax
    a17a:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
    a180:	8d 0c 10             	lea    (%eax,%edx,1),%ecx
    a183:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    a188:	89 c8                	mov    %ecx,%eax
    a18a:	f7 e2                	mul    %edx
    a18c:	89 d0                	mov    %edx,%eax
    a18e:	c1 e8 05             	shr    $0x5,%eax
    a191:	6b c0 64             	imul   $0x64,%eax,%eax
    a194:	29 c1                	sub    %eax,%ecx
    a196:	89 c8                	mov    %ecx,%eax
    a198:	69 c0 40 42 0f 00    	imul   $0xf4240,%eax,%eax
    a19e:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    a1a3:	f7 e2                	mul    %edx
    a1a5:	89 d0                	mov    %edx,%eax
    a1a7:	c1 e8 05             	shr    $0x5,%eax
    a1aa:	83 ec 08             	sub    $0x8,%esp
    a1ad:	53                   	push   %ebx
    a1ae:	50                   	push   %eax
    a1af:	e8 b5 f2 ff ff       	call   9469 <put_fs_long>
    a1b4:	83 c4 10             	add    $0x10,%esp
			    ((unsigned long *) tv) + 1);
	}
	if (tz) {
    a1b7:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    a1bc:	74 40                	je     a1fe <sys_gettimeofday+0xde>
		verify_area(tz, sizeof *tz);
    a1be:	83 ec 08             	sub    $0x8,%esp
    a1c1:	6a 08                	push   $0x8
    a1c3:	ff 74 24 20          	pushl  0x20(%esp)
    a1c7:	e8 d7 e1 ff ff       	call   83a3 <verify_area>
    a1cc:	83 c4 10             	add    $0x10,%esp
		put_fs_long(sys_tz.tz_minuteswest, (unsigned long *) tz);
    a1cf:	a1 60 f2 02 00       	mov    0x2f260,%eax
    a1d4:	83 ec 08             	sub    $0x8,%esp
    a1d7:	ff 74 24 1c          	pushl  0x1c(%esp)
    a1db:	50                   	push   %eax
    a1dc:	e8 88 f2 ff ff       	call   9469 <put_fs_long>
    a1e1:	83 c4 10             	add    $0x10,%esp
		put_fs_long(sys_tz.tz_dsttime, ((unsigned long *) tz) + 1);
    a1e4:	8b 44 24 14          	mov    0x14(%esp),%eax
    a1e8:	83 c0 04             	add    $0x4,%eax
    a1eb:	8b 15 64 f2 02 00    	mov    0x2f264,%edx
    a1f1:	83 ec 08             	sub    $0x8,%esp
    a1f4:	50                   	push   %eax
    a1f5:	52                   	push   %edx
    a1f6:	e8 6e f2 ff ff       	call   9469 <put_fs_long>
    a1fb:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
    a1fe:	b8 00 00 00 00       	mov    $0x0,%eax
}
    a203:	83 c4 08             	add    $0x8,%esp
    a206:	5b                   	pop    %ebx
    a207:	c3                   	ret    

0000a208 <sys_settimeofday>:
 */
// 设置系统当前时间。
// 参数tv是指向用户数据区中timeval结构信息的指针。参数tz是用户数据区中timezone结构的指针。该操作需要超级用户权限。如果
// 两者皆为空，则什么也不做，函数返回0。
int sys_settimeofday(struct timeval *tv, struct timezone *tz)
{
    a208:	53                   	push   %ebx
    a209:	83 ec 18             	sub    $0x18,%esp
	static int	firsttime = 1;
	void 		adjust_clock();

	// 设置系统当前时间需要超级用户权限。如果tz指针不空，则设置系统时区信息。即复制用户timezone结构信息到系统中的sys_tz结构
	// 中。如果是第1次调用本系统调用并且参数tv指针不空，则调整系统时钟值。
	if (!suser())
    a20c:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    a211:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    a218:	66 85 c0             	test   %ax,%ax
    a21b:	74 0a                	je     a227 <sys_settimeofday+0x1f>
		return -EPERM;
    a21d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    a222:	e9 e6 00 00 00       	jmp    a30d <sys_settimeofday+0x105>
	if (tz) {
    a227:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
    a22c:	74 45                	je     a273 <sys_settimeofday+0x6b>
		sys_tz.tz_minuteswest = get_fs_long((unsigned long *) tz);
    a22e:	ff 74 24 24          	pushl  0x24(%esp)
    a232:	e8 e6 f1 ff ff       	call   941d <get_fs_long>
    a237:	83 c4 04             	add    $0x4,%esp
    a23a:	a3 60 f2 02 00       	mov    %eax,0x2f260
		sys_tz.tz_dsttime = get_fs_long(((unsigned long *) tz)+1);
    a23f:	8b 44 24 24          	mov    0x24(%esp),%eax
    a243:	83 c0 04             	add    $0x4,%eax
    a246:	50                   	push   %eax
    a247:	e8 d1 f1 ff ff       	call   941d <get_fs_long>
    a24c:	83 c4 04             	add    $0x4,%esp
    a24f:	a3 64 f2 02 00       	mov    %eax,0x2f264
		if (firsttime) {
    a254:	a1 10 e3 02 00       	mov    0x2e310,%eax
    a259:	85 c0                	test   %eax,%eax
    a25b:	74 16                	je     a273 <sys_settimeofday+0x6b>
			firsttime = 0;
    a25d:	c7 05 10 e3 02 00 00 	movl   $0x0,0x2e310
    a264:	00 00 00 
			if (!tv)
    a267:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    a26c:	75 05                	jne    a273 <sys_settimeofday+0x6b>
				adjust_clock();
    a26e:	e8 9f 00 00 00       	call   a312 <adjust_clock>
		}
	}
	// 如果参数的timeval结构指针tv不空，则用该结构信息设置系统时钟。首先从tv所指处获取以秒值（sec）加微秒值（usec）表示的系统
	// 时间，然后用秒值修改系统开机时间全局变量startup_time值，并用微秒值设置系统嘀嗒误差值jiffies_offset。
	if (tv) {
    a273:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    a278:	0f 84 8a 00 00 00    	je     a308 <sys_settimeofday+0x100>
		int sec, usec;

		sec = get_fs_long((unsigned long *)tv);
    a27e:	83 ec 0c             	sub    $0xc,%esp
    a281:	ff 74 24 2c          	pushl  0x2c(%esp)
    a285:	e8 93 f1 ff ff       	call   941d <get_fs_long>
    a28a:	83 c4 10             	add    $0x10,%esp
    a28d:	89 44 24 0c          	mov    %eax,0xc(%esp)
		usec = get_fs_long(((unsigned long *)tv) + 1);
    a291:	8b 44 24 20          	mov    0x20(%esp),%eax
    a295:	83 c0 04             	add    $0x4,%eax
    a298:	83 ec 0c             	sub    $0xc,%esp
    a29b:	50                   	push   %eax
    a29c:	e8 7c f1 ff ff       	call   941d <get_fs_long>
    a2a1:	83 c4 10             	add    $0x10,%esp
    a2a4:	89 44 24 08          	mov    %eax,0x8(%esp)

		startup_time = sec - jiffies / HZ;
    a2a8:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
    a2ac:	a1 00 eb 02 00       	mov    0x2eb00,%eax
    a2b1:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    a2b6:	f7 e2                	mul    %edx
    a2b8:	89 d0                	mov    %edx,%eax
    a2ba:	c1 e8 05             	shr    $0x5,%eax
    a2bd:	29 c1                	sub    %eax,%ecx
    a2bf:	89 c8                	mov    %ecx,%eax
    a2c1:	a3 04 eb 02 00       	mov    %eax,0x2eb04
		jiffies_offset = usec * HZ / 1000000 - jiffies % HZ;
    a2c6:	8b 44 24 08          	mov    0x8(%esp),%eax
    a2ca:	6b c8 64             	imul   $0x64,%eax,%ecx
    a2cd:	ba 83 de 1b 43       	mov    $0x431bde83,%edx
    a2d2:	89 c8                	mov    %ecx,%eax
    a2d4:	f7 ea                	imul   %edx
    a2d6:	c1 fa 12             	sar    $0x12,%edx
    a2d9:	89 c8                	mov    %ecx,%eax
    a2db:	c1 f8 1f             	sar    $0x1f,%eax
    a2de:	29 c2                	sub    %eax,%edx
    a2e0:	89 d0                	mov    %edx,%eax
    a2e2:	89 c3                	mov    %eax,%ebx
    a2e4:	8b 0d 00 eb 02 00    	mov    0x2eb00,%ecx
    a2ea:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    a2ef:	89 c8                	mov    %ecx,%eax
    a2f1:	f7 e2                	mul    %edx
    a2f3:	89 d0                	mov    %edx,%eax
    a2f5:	c1 e8 05             	shr    $0x5,%eax
    a2f8:	6b c0 64             	imul   $0x64,%eax,%eax
    a2fb:	29 c1                	sub    %eax,%ecx
    a2fd:	89 c8                	mov    %ecx,%eax
    a2ff:	29 c3                	sub    %eax,%ebx
    a301:	89 d8                	mov    %ebx,%eax
    a303:	a3 08 eb 02 00       	mov    %eax,0x2eb08
	}
	return 0;
    a308:	b8 00 00 00 00       	mov    $0x0,%eax
}
    a30d:	83 c4 18             	add    $0x18,%esp
    a310:	5b                   	pop    %ebx
    a311:	c3                   	ret    

0000a312 <adjust_clock>:
 */
// 把系统启动时间调整为以GMT为标准的时间。
// startup_time是秒值，因此这里需要把时区分钟值乘上60。
void adjust_clock()
{
	startup_time += sys_tz.tz_minuteswest * 60;
    a312:	a1 60 f2 02 00       	mov    0x2f260,%eax
    a317:	c1 e0 02             	shl    $0x2,%eax
    a31a:	89 c2                	mov    %eax,%edx
    a31c:	c1 e2 04             	shl    $0x4,%edx
    a31f:	29 c2                	sub    %eax,%edx
    a321:	89 d0                	mov    %edx,%eax
    a323:	89 c2                	mov    %eax,%edx
    a325:	a1 04 eb 02 00       	mov    0x2eb04,%eax
    a32a:	01 d0                	add    %edx,%eax
    a32c:	a3 04 eb 02 00       	mov    %eax,0x2eb04
}
    a331:	90                   	nop
    a332:	c3                   	ret    

0000a333 <sys_umask>:

// 设置当前进程创建文件属性屏蔽码为mask & 0777。并返回原屏蔽码。
int sys_umask(int mask)
{
    a333:	83 ec 10             	sub    $0x10,%esp
	int old = current->umask;
    a336:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    a33b:	0f b7 80 30 03 00 00 	movzwl 0x330(%eax),%eax
    a342:	0f b7 c0             	movzwl %ax,%eax
    a345:	89 44 24 0c          	mov    %eax,0xc(%esp)

	current->umask = mask & 0777;
    a349:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    a34e:	8b 54 24 14          	mov    0x14(%esp),%edx
    a352:	66 81 e2 ff 01       	and    $0x1ff,%dx
    a357:	66 89 90 30 03 00 00 	mov    %dx,0x330(%eax)
	return (old);
    a35e:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    a362:	83 c4 10             	add    $0x10,%esp
    a365:	c3                   	ret    

0000a366 <sys_default>:

// 用于捕获未实现的System Call调用。
int sys_default(unsigned long arg1, unsigned long arg2, unsigned long arg3, unsigned long code){
    a366:	83 ec 0c             	sub    $0xc,%esp
    printk("System Call Number:%d\r\n",code);
    a369:	83 ec 08             	sub    $0x8,%esp
    a36c:	ff 74 24 24          	pushl  0x24(%esp)
    a370:	68 88 2f 02 00       	push   $0x22f88
    a375:	e8 cd e8 ff ff       	call   8c47 <printk>
    a37a:	83 c4 10             	add    $0x10,%esp
    printk("Arg1:%X\r\n",arg1);
    a37d:	83 ec 08             	sub    $0x8,%esp
    a380:	ff 74 24 18          	pushl  0x18(%esp)
    a384:	68 a0 2f 02 00       	push   $0x22fa0
    a389:	e8 b9 e8 ff ff       	call   8c47 <printk>
    a38e:	83 c4 10             	add    $0x10,%esp
    printk("Arg2:%X\r\n",arg2);
    a391:	83 ec 08             	sub    $0x8,%esp
    a394:	ff 74 24 1c          	pushl  0x1c(%esp)
    a398:	68 aa 2f 02 00       	push   $0x22faa
    a39d:	e8 a5 e8 ff ff       	call   8c47 <printk>
    a3a2:	83 c4 10             	add    $0x10,%esp
    printk("Arg3:%X\r\n",arg3);
    a3a5:	83 ec 08             	sub    $0x8,%esp
    a3a8:	ff 74 24 20          	pushl  0x20(%esp)
    a3ac:	68 b4 2f 02 00       	push   $0x22fb4
    a3b1:	e8 91 e8 ff ff       	call   8c47 <printk>
    a3b6:	83 c4 10             	add    $0x10,%esp
    for(;;);
    a3b9:	eb fe                	jmp    a3b9 <sys_default+0x53>

0000a3bb <put_fs_long>:
//// 将一长字存放在fs段中指定内存地址处.
// 参数:val - 长字值;addr - 内存地址.
// %0 - 寄存器(长字值val);%1 - (内存地址addr).
static inline void put_fs_long(unsigned long val,unsigned long * addr)
{
__asm__ ("movl %0,%%fs:%1"::"q" (val),"m" (*addr));
    a3bb:	8b 44 24 04          	mov    0x4(%esp),%eax
    a3bf:	8b 54 24 08          	mov    0x8(%esp),%edx
    a3c3:	64 89 02             	mov    %eax,%fs:(%edx)
}
    a3c6:	90                   	nop
    a3c7:	c3                   	ret    

0000a3c8 <release>:
// 释放指定进程占用的任务槽及其任务数据结构占用的内在页面。
// 参数p是任务数据结构指针。该函数在后面的sys_kill()和sys_waitpid()函数中被调用。扫描任务指针数组表task[]
// 以寻找指定的任务。如果找到，则首先清空该任务槽，然后释放该任务数据结构所占用的内在页面，最后执行调度函数并返回
// 立即退出。如果在任务数组表中没有找到指定任务对应的项，则内核panic。
void release(struct task_struct * p)
{
    a3c8:	83 ec 1c             	sub    $0x1c,%esp
	int i;

	// 如果给定的任务结构指针为NULL则退出。如果该指针指向当前进程则显示警告信息退出。
	if (!p)
    a3cb:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    a3d0:	0f 84 f6 00 00 00    	je     a4cc <release+0x104>
		return;
	if (p == current) {
    a3d6:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    a3db:	39 44 24 20          	cmp    %eax,0x20(%esp)
    a3df:	75 15                	jne    a3f6 <release+0x2e>
		printk("task releasing itself\n\r");
    a3e1:	83 ec 0c             	sub    $0xc,%esp
    a3e4:	68 c0 2f 02 00       	push   $0x22fc0
    a3e9:	e8 59 e8 ff ff       	call   8c47 <printk>
    a3ee:	83 c4 10             	add    $0x10,%esp
		return;
    a3f1:	e9 d7 00 00 00       	jmp    a4cd <release+0x105>
	}
	// 扫描任务结构指针数组，寻找指定的任务p。如果找到，则置空任务指针数组中对应项，并且更新任务结构之间的关联指针，释放
	// 任务p数据结构占用的内在页面。最后在执行调度程序返回后退出。如果没有找到指定的任务p，则说明内核代码出错了，则显示出错
	// 信息并死机。
	// 更新链接部分的代码会把指定任务p从双向链表中删除。
	for (i = 1 ; i < NR_TASKS ; i++)
    a3f6:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
    a3fd:	00 
    a3fe:	e9 ac 00 00 00       	jmp    a4af <release+0xe7>
		if (task[i] == p) {
    a403:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a407:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a40e:	3b 44 24 20          	cmp    0x20(%esp),%eax
    a412:	0f 85 92 00 00 00    	jne    a4aa <release+0xe2>
			task[i] = NULL;
    a418:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a41c:	c7 04 85 c0 e1 02 00 	movl   $0x0,0x2e1c0(,%eax,4)
    a423:	00 00 00 00 
			// 指向比邻的老进程。如果任务p就是最新的子进程，则还需要更新其父进程的最新子进程指针cptr为指向p的比邻子进程。
			// 指针osptr（old sibling pointer）指向比p先创建的兄弟进程。
			// 指针ysptr（younger sibling pointer）指向比p后创建的兄弟进程。
			// 指针pptr（parent pointer）指向p的父进程。
			// 指针cptr（child pointer）是父进程指向最新（最后）创建的子进程。
			if (p->p_osptr)
    a427:	8b 44 24 20          	mov    0x20(%esp),%eax
    a42b:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    a431:	85 c0                	test   %eax,%eax
    a433:	74 1a                	je     a44f <release+0x87>
				p->p_osptr->p_ysptr = p->p_ysptr;
    a435:	8b 44 24 20          	mov    0x20(%esp),%eax
    a439:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    a43f:	8b 54 24 20          	mov    0x20(%esp),%edx
    a443:	8b 92 c4 02 00 00    	mov    0x2c4(%edx),%edx
    a449:	89 90 c4 02 00 00    	mov    %edx,0x2c4(%eax)
			if (p->p_ysptr)
    a44f:	8b 44 24 20          	mov    0x20(%esp),%eax
    a453:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
    a459:	85 c0                	test   %eax,%eax
    a45b:	74 1c                	je     a479 <release+0xb1>
				p->p_ysptr->p_osptr = p->p_osptr;
    a45d:	8b 44 24 20          	mov    0x20(%esp),%eax
    a461:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
    a467:	8b 54 24 20          	mov    0x20(%esp),%edx
    a46b:	8b 92 c8 02 00 00    	mov    0x2c8(%edx),%edx
    a471:	89 90 c8 02 00 00    	mov    %edx,0x2c8(%eax)
    a477:	eb 1a                	jmp    a493 <release+0xcb>
			else
				p->p_pptr->p_cptr = p->p_osptr;
    a479:	8b 44 24 20          	mov    0x20(%esp),%eax
    a47d:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    a483:	8b 54 24 20          	mov    0x20(%esp),%edx
    a487:	8b 92 c8 02 00 00    	mov    0x2c8(%edx),%edx
    a48d:	89 90 c0 02 00 00    	mov    %edx,0x2c0(%eax)
			// 释放要释放的进程数据结构占用的那页内存
			free_page((long)p);
    a493:	8b 44 24 20          	mov    0x20(%esp),%eax
    a497:	83 ec 0c             	sub    $0xc,%esp
    a49a:	50                   	push   %eax
    a49b:	e8 0c 18 00 00       	call   bcac <free_page>
    a4a0:	83 c4 10             	add    $0x10,%esp
			// 重新调度进程
			schedule();
    a4a3:	e8 9d c9 ff ff       	call   6e45 <schedule>
			return;
    a4a8:	eb 23                	jmp    a4cd <release+0x105>
	}
	// 扫描任务结构指针数组，寻找指定的任务p。如果找到，则置空任务指针数组中对应项，并且更新任务结构之间的关联指针，释放
	// 任务p数据结构占用的内在页面。最后在执行调度程序返回后退出。如果没有找到指定的任务p，则说明内核代码出错了，则显示出错
	// 信息并死机。
	// 更新链接部分的代码会把指定任务p从双向链表中删除。
	for (i = 1 ; i < NR_TASKS ; i++)
    a4aa:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    a4af:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    a4b4:	0f 8e 49 ff ff ff    	jle    a403 <release+0x3b>
			free_page((long)p);
			// 重新调度进程
			schedule();
			return;
		}
	panic("trying to release non-existent task");
    a4ba:	83 ec 0c             	sub    $0xc,%esp
    a4bd:	68 d8 2f 02 00       	push   $0x22fd8
    a4c2:	e8 41 e7 ff ff       	call   8c08 <panic>
    a4c7:	83 c4 10             	add    $0x10,%esp
    a4ca:	eb 01                	jmp    a4cd <release+0x105>
{
	int i;

	// 如果给定的任务结构指针为NULL则退出。如果该指针指向当前进程则显示警告信息退出。
	if (!p)
		return;
    a4cc:	90                   	nop
			// 重新调度进程
			schedule();
			return;
		}
	panic("trying to release non-existent task");
}
    a4cd:	83 c4 1c             	add    $0x1c,%esp
    a4d0:	c3                   	ret    

0000a4d1 <bad_task_ptr>:
/*
 * 检查task[]数组中是否存在一个指定的task_struct结构指针p。
 */
// 检测任务结构指针p。
int bad_task_ptr(struct task_struct *p)
{
    a4d1:	83 ec 10             	sub    $0x10,%esp
	int 	i;

	if (!p)
    a4d4:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    a4d9:	75 07                	jne    a4e2 <bad_task_ptr+0x11>
		return 0;
    a4db:	b8 00 00 00 00       	mov    $0x0,%eax
    a4e0:	eb 33                	jmp    a515 <bad_task_ptr+0x44>
	for (i = 0 ; i < NR_TASKS ; i++)
    a4e2:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    a4e9:	00 
    a4ea:	eb 1d                	jmp    a509 <bad_task_ptr+0x38>
		if (task[i] == p)
    a4ec:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a4f0:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a4f7:	3b 44 24 14          	cmp    0x14(%esp),%eax
    a4fb:	75 07                	jne    a504 <bad_task_ptr+0x33>
			return 0;
    a4fd:	b8 00 00 00 00       	mov    $0x0,%eax
    a502:	eb 11                	jmp    a515 <bad_task_ptr+0x44>
{
	int 	i;

	if (!p)
		return 0;
	for (i = 0 ; i < NR_TASKS ; i++)
    a504:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    a509:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    a50e:	7e dc                	jle    a4ec <bad_task_ptr+0x1b>
		if (task[i] == p)
			return 0;
	return 1;
    a510:	b8 01 00 00 00       	mov    $0x1,%eax
}
    a515:	83 c4 10             	add    $0x10,%esp
    a518:	c3                   	ret    

0000a519 <audit_ptree>:
 * 该函数看上去要比实际的恐怖....其实我们仅仅验证了指针p_ysptr和p_osptr构成的双向链表，并检查
 * 了链表与指针p_cptr和p_pptr构成的进程树之间的关系。
 */
// 检查进程树。
void audit_ptree()
{
    a519:	83 ec 1c             	sub    $0x1c,%esp
	int	i;

	// 扫描系统中的除任务0以外的所有任务，检查它们中4个指针（pptr、cptr、ysptr和osptr）的正确性。若任务数组槽（项）
	// 为空则跳过。
	for (i = 1 ; i < NR_TASKS ; i++) {
    a51c:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
    a523:	00 
    a524:	e9 a6 04 00 00       	jmp    a9cf <audit_ptree+0x4b6>
		if (!task[i])
    a529:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a52d:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a534:	85 c0                	test   %eax,%eax
    a536:	0f 84 8d 04 00 00    	je     a9c9 <audit_ptree+0x4b0>
			continue;
		// 如果任务的父进程指针p_pptr没的指向任何进程（即在任务数组中存在），则显示警告信息“警告，pid号N的父进程链接有问题”。
		// 以下语句对cptr、ysptr和osptr进行类似操作。
		if (bad_task_ptr(task[i]->p_pptr))
    a53c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a540:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a547:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    a54d:	50                   	push   %eax
    a54e:	e8 7e ff ff ff       	call   a4d1 <bad_task_ptr>
    a553:	83 c4 04             	add    $0x4,%esp
    a556:	85 c0                	test   %eax,%eax
    a558:	74 22                	je     a57c <audit_ptree+0x63>
			printk("Warning, pid %d's parent link is bad\n",
				task[i]->pid);
    a55a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a55e:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
		if (!task[i])
			continue;
		// 如果任务的父进程指针p_pptr没的指向任何进程（即在任务数组中存在），则显示警告信息“警告，pid号N的父进程链接有问题”。
		// 以下语句对cptr、ysptr和osptr进行类似操作。
		if (bad_task_ptr(task[i]->p_pptr))
			printk("Warning, pid %d's parent link is bad\n",
    a565:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    a56b:	83 ec 08             	sub    $0x8,%esp
    a56e:	50                   	push   %eax
    a56f:	68 fc 2f 02 00       	push   $0x22ffc
    a574:	e8 ce e6 ff ff       	call   8c47 <printk>
    a579:	83 c4 10             	add    $0x10,%esp
				task[i]->pid);
		if (bad_task_ptr(task[i]->p_cptr))
    a57c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a580:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a587:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
    a58d:	83 ec 0c             	sub    $0xc,%esp
    a590:	50                   	push   %eax
    a591:	e8 3b ff ff ff       	call   a4d1 <bad_task_ptr>
    a596:	83 c4 10             	add    $0x10,%esp
    a599:	85 c0                	test   %eax,%eax
    a59b:	74 22                	je     a5bf <audit_ptree+0xa6>
			printk("Warning, pid %d's child link is bad\n",
				task[i]->pid);
    a59d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a5a1:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
		// 以下语句对cptr、ysptr和osptr进行类似操作。
		if (bad_task_ptr(task[i]->p_pptr))
			printk("Warning, pid %d's parent link is bad\n",
				task[i]->pid);
		if (bad_task_ptr(task[i]->p_cptr))
			printk("Warning, pid %d's child link is bad\n",
    a5a8:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    a5ae:	83 ec 08             	sub    $0x8,%esp
    a5b1:	50                   	push   %eax
    a5b2:	68 24 30 02 00       	push   $0x23024
    a5b7:	e8 8b e6 ff ff       	call   8c47 <printk>
    a5bc:	83 c4 10             	add    $0x10,%esp
				task[i]->pid);
		if (bad_task_ptr(task[i]->p_ysptr))
    a5bf:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a5c3:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a5ca:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
    a5d0:	83 ec 0c             	sub    $0xc,%esp
    a5d3:	50                   	push   %eax
    a5d4:	e8 f8 fe ff ff       	call   a4d1 <bad_task_ptr>
    a5d9:	83 c4 10             	add    $0x10,%esp
    a5dc:	85 c0                	test   %eax,%eax
    a5de:	74 22                	je     a602 <audit_ptree+0xe9>
			printk("Warning, pid %d's ys link is bad\n",
				task[i]->pid);
    a5e0:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a5e4:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
				task[i]->pid);
		if (bad_task_ptr(task[i]->p_cptr))
			printk("Warning, pid %d's child link is bad\n",
				task[i]->pid);
		if (bad_task_ptr(task[i]->p_ysptr))
			printk("Warning, pid %d's ys link is bad\n",
    a5eb:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    a5f1:	83 ec 08             	sub    $0x8,%esp
    a5f4:	50                   	push   %eax
    a5f5:	68 4c 30 02 00       	push   $0x2304c
    a5fa:	e8 48 e6 ff ff       	call   8c47 <printk>
    a5ff:	83 c4 10             	add    $0x10,%esp
				task[i]->pid);
		if (bad_task_ptr(task[i]->p_osptr))
    a602:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a606:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a60d:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    a613:	83 ec 0c             	sub    $0xc,%esp
    a616:	50                   	push   %eax
    a617:	e8 b5 fe ff ff       	call   a4d1 <bad_task_ptr>
    a61c:	83 c4 10             	add    $0x10,%esp
    a61f:	85 c0                	test   %eax,%eax
    a621:	74 22                	je     a645 <audit_ptree+0x12c>
			printk("Warning, pid %d's os link is bad\n",
				task[i]->pid);
    a623:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a627:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
				task[i]->pid);
		if (bad_task_ptr(task[i]->p_ysptr))
			printk("Warning, pid %d's ys link is bad\n",
				task[i]->pid);
		if (bad_task_ptr(task[i]->p_osptr))
			printk("Warning, pid %d's os link is bad\n",
    a62e:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    a634:	83 ec 08             	sub    $0x8,%esp
    a637:	50                   	push   %eax
    a638:	68 70 30 02 00       	push   $0x23070
    a63d:	e8 05 e6 ff ff       	call   8c47 <printk>
    a642:	83 c4 10             	add    $0x10,%esp
				task[i]->pid);
		// 如果任务的父进程指针p_pptr指向了自己，则显示警告信息“警告，pid号N的父进程链接指针指向了自己”。以下语句对cptr、ysptr
		// 和osptr进行类似操作。
		if (task[i]->p_pptr == task[i])
    a645:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a649:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a650:	8b 90 bc 02 00 00    	mov    0x2bc(%eax),%edx
    a656:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a65a:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a661:	39 c2                	cmp    %eax,%edx
    a663:	75 10                	jne    a675 <audit_ptree+0x15c>
			printk("Warning, pid %d parent link points to self\n");
    a665:	83 ec 0c             	sub    $0xc,%esp
    a668:	68 94 30 02 00       	push   $0x23094
    a66d:	e8 d5 e5 ff ff       	call   8c47 <printk>
    a672:	83 c4 10             	add    $0x10,%esp
		if (task[i]->p_cptr == task[i])
    a675:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a679:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a680:	8b 90 c0 02 00 00    	mov    0x2c0(%eax),%edx
    a686:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a68a:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a691:	39 c2                	cmp    %eax,%edx
    a693:	75 10                	jne    a6a5 <audit_ptree+0x18c>
			printk("Warning, pid %d child link points to self\n");
    a695:	83 ec 0c             	sub    $0xc,%esp
    a698:	68 c0 30 02 00       	push   $0x230c0
    a69d:	e8 a5 e5 ff ff       	call   8c47 <printk>
    a6a2:	83 c4 10             	add    $0x10,%esp
		if (task[i]->p_ysptr == task[i])
    a6a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a6a9:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a6b0:	8b 90 c4 02 00 00    	mov    0x2c4(%eax),%edx
    a6b6:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a6ba:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a6c1:	39 c2                	cmp    %eax,%edx
    a6c3:	75 10                	jne    a6d5 <audit_ptree+0x1bc>
			printk("Warning, pid %d ys link points to self\n");
    a6c5:	83 ec 0c             	sub    $0xc,%esp
    a6c8:	68 ec 30 02 00       	push   $0x230ec
    a6cd:	e8 75 e5 ff ff       	call   8c47 <printk>
    a6d2:	83 c4 10             	add    $0x10,%esp
		if (task[i]->p_osptr == task[i])
    a6d5:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a6d9:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a6e0:	8b 90 c8 02 00 00    	mov    0x2c8(%eax),%edx
    a6e6:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a6ea:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a6f1:	39 c2                	cmp    %eax,%edx
    a6f3:	75 10                	jne    a705 <audit_ptree+0x1ec>
			printk("Warning, pid %d os link points to self\n");
    a6f5:	83 ec 0c             	sub    $0xc,%esp
    a6f8:	68 14 31 02 00       	push   $0x23114
    a6fd:	e8 45 e5 ff ff       	call   8c47 <printk>
    a702:	83 c4 10             	add    $0x10,%esp
		// 如果任务有比自己先创建的比邻兄弟进程，那么就检查它们是否有共同的父进程，并检查这个老兄弟进程的ysptr指针是否正确地指向本
		// 进程。否则显示警告信息。
		if (task[i]->p_osptr) {
    a705:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a709:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a710:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    a716:	85 c0                	test   %eax,%eax
    a718:	0f 84 e1 00 00 00    	je     a7ff <audit_ptree+0x2e6>
			if (task[i]->p_pptr != task[i]->p_osptr->p_pptr)
    a71e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a722:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a729:	8b 90 bc 02 00 00    	mov    0x2bc(%eax),%edx
    a72f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a733:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a73a:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    a740:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    a746:	39 c2                	cmp    %eax,%edx
    a748:	74 55                	je     a79f <audit_ptree+0x286>
				printk(
			"Warning, pid %d older sibling %d parent is %d\n",
				task[i]->pid, task[i]->p_osptr->pid,
				task[i]->p_osptr->p_pptr->pid);
    a74a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a74e:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a755:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    a75b:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
			printk("Warning, pid %d os link points to self\n");
		// 如果任务有比自己先创建的比邻兄弟进程，那么就检查它们是否有共同的父进程，并检查这个老兄弟进程的ysptr指针是否正确地指向本
		// 进程。否则显示警告信息。
		if (task[i]->p_osptr) {
			if (task[i]->p_pptr != task[i]->p_osptr->p_pptr)
				printk(
    a761:	8b 88 2c 02 00 00    	mov    0x22c(%eax),%ecx
			"Warning, pid %d older sibling %d parent is %d\n",
				task[i]->pid, task[i]->p_osptr->pid,
    a767:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a76b:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a772:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
			printk("Warning, pid %d os link points to self\n");
		// 如果任务有比自己先创建的比邻兄弟进程，那么就检查它们是否有共同的父进程，并检查这个老兄弟进程的ysptr指针是否正确地指向本
		// 进程。否则显示警告信息。
		if (task[i]->p_osptr) {
			if (task[i]->p_pptr != task[i]->p_osptr->p_pptr)
				printk(
    a778:	8b 90 2c 02 00 00    	mov    0x22c(%eax),%edx
			"Warning, pid %d older sibling %d parent is %d\n",
				task[i]->pid, task[i]->p_osptr->pid,
    a77e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a782:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
			printk("Warning, pid %d os link points to self\n");
		// 如果任务有比自己先创建的比邻兄弟进程，那么就检查它们是否有共同的父进程，并检查这个老兄弟进程的ysptr指针是否正确地指向本
		// 进程。否则显示警告信息。
		if (task[i]->p_osptr) {
			if (task[i]->p_pptr != task[i]->p_osptr->p_pptr)
				printk(
    a789:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    a78f:	51                   	push   %ecx
    a790:	52                   	push   %edx
    a791:	50                   	push   %eax
    a792:	68 3c 31 02 00       	push   $0x2313c
    a797:	e8 ab e4 ff ff       	call   8c47 <printk>
    a79c:	83 c4 10             	add    $0x10,%esp
			"Warning, pid %d older sibling %d parent is %d\n",
				task[i]->pid, task[i]->p_osptr->pid,
				task[i]->p_osptr->p_pptr->pid);
			if (task[i]->p_osptr->p_ysptr != task[i])
    a79f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a7a3:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a7aa:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    a7b0:	8b 90 c4 02 00 00    	mov    0x2c4(%eax),%edx
    a7b6:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a7ba:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a7c1:	39 c2                	cmp    %eax,%edx
    a7c3:	74 3a                	je     a7ff <audit_ptree+0x2e6>
				printk(
		"Warning, pid %d older sibling %d has mismatched ys link\n",
				task[i]->pid, task[i]->p_osptr->pid);
    a7c5:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a7c9:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a7d0:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
				printk(
			"Warning, pid %d older sibling %d parent is %d\n",
				task[i]->pid, task[i]->p_osptr->pid,
				task[i]->p_osptr->p_pptr->pid);
			if (task[i]->p_osptr->p_ysptr != task[i])
				printk(
    a7d6:	8b 90 2c 02 00 00    	mov    0x22c(%eax),%edx
		"Warning, pid %d older sibling %d has mismatched ys link\n",
				task[i]->pid, task[i]->p_osptr->pid);
    a7dc:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a7e0:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
				printk(
			"Warning, pid %d older sibling %d parent is %d\n",
				task[i]->pid, task[i]->p_osptr->pid,
				task[i]->p_osptr->p_pptr->pid);
			if (task[i]->p_osptr->p_ysptr != task[i])
				printk(
    a7e7:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    a7ed:	83 ec 04             	sub    $0x4,%esp
    a7f0:	52                   	push   %edx
    a7f1:	50                   	push   %eax
    a7f2:	68 6c 31 02 00       	push   $0x2316c
    a7f7:	e8 4b e4 ff ff       	call   8c47 <printk>
    a7fc:	83 c4 10             	add    $0x10,%esp
		"Warning, pid %d older sibling %d has mismatched ys link\n",
				task[i]->pid, task[i]->p_osptr->pid);
		}
		// 如果任务有比自己后创建的比邻兄弟进程，那么就检查它们是否有共同的父进程，并检查这个小弟进程的osptr指针是否正确地指向本进程
		// 否则显示警告信息。
		if (task[i]->p_ysptr) {
    a7ff:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a803:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a80a:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
    a810:	85 c0                	test   %eax,%eax
    a812:	0f 84 e1 00 00 00    	je     a8f9 <audit_ptree+0x3e0>
			if (task[i]->p_pptr != task[i]->p_ysptr->p_pptr)
    a818:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a81c:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a823:	8b 90 bc 02 00 00    	mov    0x2bc(%eax),%edx
    a829:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a82d:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a834:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
    a83a:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    a840:	39 c2                	cmp    %eax,%edx
    a842:	74 55                	je     a899 <audit_ptree+0x380>
				printk(
			"Warning, pid %d younger sibling %d parent is %d\n",
				task[i]->pid, task[i]->p_osptr->pid,
				task[i]->p_osptr->p_pptr->pid);
    a844:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a848:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a84f:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    a855:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
		}
		// 如果任务有比自己后创建的比邻兄弟进程，那么就检查它们是否有共同的父进程，并检查这个小弟进程的osptr指针是否正确地指向本进程
		// 否则显示警告信息。
		if (task[i]->p_ysptr) {
			if (task[i]->p_pptr != task[i]->p_ysptr->p_pptr)
				printk(
    a85b:	8b 88 2c 02 00 00    	mov    0x22c(%eax),%ecx
			"Warning, pid %d younger sibling %d parent is %d\n",
				task[i]->pid, task[i]->p_osptr->pid,
    a861:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a865:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a86c:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
		}
		// 如果任务有比自己后创建的比邻兄弟进程，那么就检查它们是否有共同的父进程，并检查这个小弟进程的osptr指针是否正确地指向本进程
		// 否则显示警告信息。
		if (task[i]->p_ysptr) {
			if (task[i]->p_pptr != task[i]->p_ysptr->p_pptr)
				printk(
    a872:	8b 90 2c 02 00 00    	mov    0x22c(%eax),%edx
			"Warning, pid %d younger sibling %d parent is %d\n",
				task[i]->pid, task[i]->p_osptr->pid,
    a878:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a87c:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
		}
		// 如果任务有比自己后创建的比邻兄弟进程，那么就检查它们是否有共同的父进程，并检查这个小弟进程的osptr指针是否正确地指向本进程
		// 否则显示警告信息。
		if (task[i]->p_ysptr) {
			if (task[i]->p_pptr != task[i]->p_ysptr->p_pptr)
				printk(
    a883:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    a889:	51                   	push   %ecx
    a88a:	52                   	push   %edx
    a88b:	50                   	push   %eax
    a88c:	68 a8 31 02 00       	push   $0x231a8
    a891:	e8 b1 e3 ff ff       	call   8c47 <printk>
    a896:	83 c4 10             	add    $0x10,%esp
			"Warning, pid %d younger sibling %d parent is %d\n",
				task[i]->pid, task[i]->p_osptr->pid,
				task[i]->p_osptr->p_pptr->pid);
			if (task[i]->p_ysptr->p_osptr != task[i])
    a899:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a89d:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a8a4:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
    a8aa:	8b 90 c8 02 00 00    	mov    0x2c8(%eax),%edx
    a8b0:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a8b4:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a8bb:	39 c2                	cmp    %eax,%edx
    a8bd:	74 3a                	je     a8f9 <audit_ptree+0x3e0>
				printk(
		"Warning, pid %d younger sibling %d has mismatched os link\n",
				task[i]->pid, task[i]->p_ysptr->pid);
    a8bf:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a8c3:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a8ca:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
				printk(
			"Warning, pid %d younger sibling %d parent is %d\n",
				task[i]->pid, task[i]->p_osptr->pid,
				task[i]->p_osptr->p_pptr->pid);
			if (task[i]->p_ysptr->p_osptr != task[i])
				printk(
    a8d0:	8b 90 2c 02 00 00    	mov    0x22c(%eax),%edx
		"Warning, pid %d younger sibling %d has mismatched os link\n",
				task[i]->pid, task[i]->p_ysptr->pid);
    a8d6:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a8da:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
				printk(
			"Warning, pid %d younger sibling %d parent is %d\n",
				task[i]->pid, task[i]->p_osptr->pid,
				task[i]->p_osptr->p_pptr->pid);
			if (task[i]->p_ysptr->p_osptr != task[i])
				printk(
    a8e1:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    a8e7:	83 ec 04             	sub    $0x4,%esp
    a8ea:	52                   	push   %edx
    a8eb:	50                   	push   %eax
    a8ec:	68 dc 31 02 00       	push   $0x231dc
    a8f1:	e8 51 e3 ff ff       	call   8c47 <printk>
    a8f6:	83 c4 10             	add    $0x10,%esp
		"Warning, pid %d younger sibling %d has mismatched os link\n",
				task[i]->pid, task[i]->p_ysptr->pid);
		}
		// 如果任务的最新子进程指针cptr不空，那么检查该子进程的父进程是否为本进程，并检查该子进程的小弟进程指针yspter是否为空。若不是
		// 则显示警告信息。
		if (task[i]->p_cptr) {
    a8f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a8fd:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a904:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
    a90a:	85 c0                	test   %eax,%eax
    a90c:	0f 84 b8 00 00 00    	je     a9ca <audit_ptree+0x4b1>
			if (task[i]->p_cptr->p_pptr != task[i])
    a912:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a916:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a91d:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
    a923:	8b 90 bc 02 00 00    	mov    0x2bc(%eax),%edx
    a929:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a92d:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a934:	39 c2                	cmp    %eax,%edx
    a936:	74 3a                	je     a972 <audit_ptree+0x459>
				printk(
			"Warning, pid %d youngest child %d has mismatched parent link\n",
				task[i]->pid, task[i]->p_cptr->pid);
    a938:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a93c:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a943:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
		}
		// 如果任务的最新子进程指针cptr不空，那么检查该子进程的父进程是否为本进程，并检查该子进程的小弟进程指针yspter是否为空。若不是
		// 则显示警告信息。
		if (task[i]->p_cptr) {
			if (task[i]->p_cptr->p_pptr != task[i])
				printk(
    a949:	8b 90 2c 02 00 00    	mov    0x22c(%eax),%edx
			"Warning, pid %d youngest child %d has mismatched parent link\n",
				task[i]->pid, task[i]->p_cptr->pid);
    a94f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a953:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
		}
		// 如果任务的最新子进程指针cptr不空，那么检查该子进程的父进程是否为本进程，并检查该子进程的小弟进程指针yspter是否为空。若不是
		// 则显示警告信息。
		if (task[i]->p_cptr) {
			if (task[i]->p_cptr->p_pptr != task[i])
				printk(
    a95a:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    a960:	83 ec 04             	sub    $0x4,%esp
    a963:	52                   	push   %edx
    a964:	50                   	push   %eax
    a965:	68 18 32 02 00       	push   $0x23218
    a96a:	e8 d8 e2 ff ff       	call   8c47 <printk>
    a96f:	83 c4 10             	add    $0x10,%esp
			"Warning, pid %d youngest child %d has mismatched parent link\n",
				task[i]->pid, task[i]->p_cptr->pid);
			if (task[i]->p_cptr->p_ysptr)
    a972:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a976:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a97d:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
    a983:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
    a989:	85 c0                	test   %eax,%eax
    a98b:	74 3d                	je     a9ca <audit_ptree+0x4b1>
				printk(
			"Warning, pid %d youngest child %d has non-NULL ys link\n",
				task[i]->pid, task[i]->p_cptr->pid);
    a98d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a991:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
    a998:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
			if (task[i]->p_cptr->p_pptr != task[i])
				printk(
			"Warning, pid %d youngest child %d has mismatched parent link\n",
				task[i]->pid, task[i]->p_cptr->pid);
			if (task[i]->p_cptr->p_ysptr)
				printk(
    a99e:	8b 90 2c 02 00 00    	mov    0x22c(%eax),%edx
			"Warning, pid %d youngest child %d has non-NULL ys link\n",
				task[i]->pid, task[i]->p_cptr->pid);
    a9a4:	8b 44 24 0c          	mov    0xc(%esp),%eax
    a9a8:	8b 04 85 c0 e1 02 00 	mov    0x2e1c0(,%eax,4),%eax
			if (task[i]->p_cptr->p_pptr != task[i])
				printk(
			"Warning, pid %d youngest child %d has mismatched parent link\n",
				task[i]->pid, task[i]->p_cptr->pid);
			if (task[i]->p_cptr->p_ysptr)
				printk(
    a9af:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    a9b5:	83 ec 04             	sub    $0x4,%esp
    a9b8:	52                   	push   %edx
    a9b9:	50                   	push   %eax
    a9ba:	68 58 32 02 00       	push   $0x23258
    a9bf:	e8 83 e2 ff ff       	call   8c47 <printk>
    a9c4:	83 c4 10             	add    $0x10,%esp
    a9c7:	eb 01                	jmp    a9ca <audit_ptree+0x4b1>

	// 扫描系统中的除任务0以外的所有任务，检查它们中4个指针（pptr、cptr、ysptr和osptr）的正确性。若任务数组槽（项）
	// 为空则跳过。
	for (i = 1 ; i < NR_TASKS ; i++) {
		if (!task[i])
			continue;
    a9c9:	90                   	nop
{
	int	i;

	// 扫描系统中的除任务0以外的所有任务，检查它们中4个指针（pptr、cptr、ysptr和osptr）的正确性。若任务数组槽（项）
	// 为空则跳过。
	for (i = 1 ; i < NR_TASKS ; i++) {
    a9ca:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    a9cf:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    a9d4:	0f 8e 4f fb ff ff    	jle    a529 <audit_ptree+0x10>
				printk(
			"Warning, pid %d youngest child %d has non-NULL ys link\n",
				task[i]->pid, task[i]->p_cptr->pid);
		}
	}
}
    a9da:	90                   	nop
    a9db:	83 c4 1c             	add    $0x1c,%esp
    a9de:	c3                   	ret    

0000a9df <send_sig>:

// 向指定任务p发送信号sig，权限为priv。
// 参数：sig - 信号值；p - 指定任务的指针；priv - 强制发送信号的标志。即不需要考虑进程用户属性或级别而能发
// 送信号sig并退出，否则返回未许可错误号。
static inline int send_sig(long sig, struct task_struct * p, int priv)
{
    a9df:	53                   	push   %ebx
	// 如果没有权限，并且当前进程的有效用户ID与进程p的不同，并且也不是超级用户，则说明没有向p发送信号的权利。suser()
	// 定义为（current->euid==0），用于判断是否为超级用户。
	if (!p)
    a9e0:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    a9e5:	75 0a                	jne    a9f1 <send_sig+0x12>
		return -EINVAL;
    a9e7:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    a9ec:	e9 ef 00 00 00       	jmp    aae0 <send_sig+0x101>
	if (!priv && (current->euid != p->euid) && !suser())
    a9f1:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
    a9f6:	75 37                	jne    aa2f <send_sig+0x50>
    a9f8:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    a9fd:	0f b7 90 ce 02 00 00 	movzwl 0x2ce(%eax),%edx
    aa04:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aa08:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    aa0f:	66 39 c2             	cmp    %ax,%dx
    aa12:	74 1b                	je     aa2f <send_sig+0x50>
    aa14:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    aa19:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    aa20:	66 85 c0             	test   %ax,%ax
    aa23:	74 0a                	je     aa2f <send_sig+0x50>
		return -EPERM;
    aa25:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    aa2a:	e9 b1 00 00 00       	jmp    aae0 <send_sig+0x101>
	// 若需要发送的信号是SIGKILL或SIGCONT，那么如果此时接收信号的进程p正处于停止状态就置其为就绪（运行）状态。然后
	// 修改进程p的信号位图signal，去掉（复位）会导致进程停止的信号SIGSTOP、SIGTSTP、SIGTTIN和SIGTTOU。
	if ((sig == SIGKILL) || (sig == SIGCONT)) {
    aa2f:	83 7c 24 08 09       	cmpl   $0x9,0x8(%esp)
    aa34:	74 07                	je     aa3d <send_sig+0x5e>
    aa36:	83 7c 24 08 12       	cmpl   $0x12,0x8(%esp)
    aa3b:	75 38                	jne    aa75 <send_sig+0x96>
		if (p->state == TASK_STOPPED)
    aa3d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aa41:	8b 00                	mov    (%eax),%eax
    aa43:	83 f8 04             	cmp    $0x4,%eax
    aa46:	75 0a                	jne    aa52 <send_sig+0x73>
			p->state = TASK_RUNNING;
    aa48:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aa4c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		p->exit_code = 0;
    aa52:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aa56:	c7 80 14 02 00 00 00 	movl   $0x0,0x214(%eax)
    aa5d:	00 00 00 
		p->signal &= ~( (1 << (SIGSTOP - 1)) | (1 << (SIGTSTP - 1)) |
    aa60:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aa64:	8b 40 0c             	mov    0xc(%eax),%eax
    aa67:	25 ff ff c3 ff       	and    $0xffc3ffff,%eax
    aa6c:	89 c2                	mov    %eax,%edx
    aa6e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aa72:	89 50 0c             	mov    %edx,0xc(%eax)
				(1 << (SIGTTIN - 1)) | (1 << (SIGTTOU - 1)) );
	}
	/* If the signal will be ignored, don't even post it */
    /* 如果要发送的信号sig将被进程p忽略掉，那么就根本不用发送 */
	if ((int) p->sigaction[sig - 1].sa_handler == 1)
    aa75:	8b 44 24 08          	mov    0x8(%esp),%eax
    aa79:	8d 50 ff             	lea    -0x1(%eax),%edx
    aa7c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aa80:	83 c2 01             	add    $0x1,%edx
    aa83:	c1 e2 04             	shl    $0x4,%edx
    aa86:	01 d0                	add    %edx,%eax
    aa88:	8b 00                	mov    (%eax),%eax
    aa8a:	83 f8 01             	cmp    $0x1,%eax
    aa8d:	75 07                	jne    aa96 <send_sig+0xb7>
		return 0;
    aa8f:	b8 00 00 00 00       	mov    $0x0,%eax
    aa94:	eb 4a                	jmp    aae0 <send_sig+0x101>
	/* Depends on order SIGSTOP, SIGTSTP, SIGTTIN, SIGTTOU */
   	/* 以下判断依赖于SIGSTOP、SIGTSTP、SIGTTIN和SIGTTOU */
	// 如果信号是SIGSTOP、SIGTSTP、SIGTTIN和SIGTTOU之一，那么说明要让接收信号的进程p停止运行。因此（若p的信号位图
	// 中有SIGCONT置位）就需要复位位图中继续运行的信号。
	if ((sig >= SIGSTOP) && (sig <= SIGTTOU))
    aa96:	83 7c 24 08 12       	cmpl   $0x12,0x8(%esp)
    aa9b:	7e 1c                	jle    aab9 <send_sig+0xda>
    aa9d:	83 7c 24 08 16       	cmpl   $0x16,0x8(%esp)
    aaa2:	7f 15                	jg     aab9 <send_sig+0xda>
		p->signal &= ~(1 << (SIGCONT - 1));
    aaa4:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aaa8:	8b 40 0c             	mov    0xc(%eax),%eax
    aaab:	25 ff ff fd ff       	and    $0xfffdffff,%eax
    aab0:	89 c2                	mov    %eax,%edx
    aab2:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aab6:	89 50 0c             	mov    %edx,0xc(%eax)
	/* Actually deliver the signal */
    /* 最后，我们向进程p发送信号p */
	p->signal |= (1 << (sig - 1));
    aab9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aabd:	8b 40 0c             	mov    0xc(%eax),%eax
    aac0:	8b 54 24 08          	mov    0x8(%esp),%edx
    aac4:	83 ea 01             	sub    $0x1,%edx
    aac7:	bb 01 00 00 00       	mov    $0x1,%ebx
    aacc:	89 d1                	mov    %edx,%ecx
    aace:	d3 e3                	shl    %cl,%ebx
    aad0:	89 da                	mov    %ebx,%edx
    aad2:	09 c2                	or     %eax,%edx
    aad4:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aad8:	89 50 0c             	mov    %edx,0xc(%eax)
	return 0;
    aadb:	b8 00 00 00 00       	mov    $0x0,%eax
}
    aae0:	5b                   	pop    %ebx
    aae1:	c3                   	ret    

0000aae2 <session_of_pgrp>:

// 根据进程组号pgrp取得进程组所属的会话号。
// 扫描任务数组，寻找进程组号为pgrp的进程，并返回其会话号。如果没有找到指定的进程组号pgrp的任何进程，则返回-1.
int session_of_pgrp(int pgrp)
{
    aae2:	83 ec 10             	sub    $0x10,%esp
	struct task_struct **p;

 	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    aae5:	c7 44 24 0c bc e2 02 	movl   $0x2e2bc,0xc(%esp)
    aaec:	00 
    aaed:	eb 25                	jmp    ab14 <session_of_pgrp+0x32>
		if ((*p)->pgrp == pgrp)
    aaef:	8b 44 24 0c          	mov    0xc(%esp),%eax
    aaf3:	8b 00                	mov    (%eax),%eax
    aaf5:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    aafb:	3b 44 24 14          	cmp    0x14(%esp),%eax
    aaff:	75 0e                	jne    ab0f <session_of_pgrp+0x2d>
			return((*p)->session);
    ab01:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ab05:	8b 00                	mov    (%eax),%eax
    ab07:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
    ab0d:	eb 14                	jmp    ab23 <session_of_pgrp+0x41>
// 扫描任务数组，寻找进程组号为pgrp的进程，并返回其会话号。如果没有找到指定的进程组号pgrp的任何进程，则返回-1.
int session_of_pgrp(int pgrp)
{
	struct task_struct **p;

 	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    ab0f:	83 6c 24 0c 04       	subl   $0x4,0xc(%esp)
    ab14:	81 7c 24 0c c0 e1 02 	cmpl   $0x2e1c0,0xc(%esp)
    ab1b:	00 
    ab1c:	77 d1                	ja     aaef <session_of_pgrp+0xd>
		if ((*p)->pgrp == pgrp)
			return((*p)->session);
	return -1;
    ab1e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
    ab23:	83 c4 10             	add    $0x10,%esp
    ab26:	c3                   	ret    

0000ab27 <kill_pg>:
// 参数：pgrp - 指定的进程组号；sig - 指定的信号；priv - 权限。
// 即向指定进程组pgrp中的每个进程发送指定信号sig。只要向一个进程发送成功最后就会返回0，否则如果没有找到指定进程
// 组号pgrp的任何一个进程，则返回出错号-ESRCH，若找到进程组号是pgrp的进程，但是发送信号失败，则返回发送失败的
// 错误码。
int kill_pg(int pgrp, int sig, int priv)
{
    ab27:	83 ec 10             	sub    $0x10,%esp
	struct task_struct **p;
	int err,retval = -ESRCH;                // -ESRCH表示指定的进程不存在。
    ab2a:	c7 44 24 08 fd ff ff 	movl   $0xfffffffd,0x8(%esp)
    ab31:	ff 
	int found = 0;
    ab32:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
    ab39:	00 

	// 首先判断给定的信号和进程组号是否有效。然后扫描系统中所有任务。若扫描到进程组号为pgrp的进程，就向其发送信号sig。
	// 只要有一次信号发送成功，函数最后就会返回0。
	if (sig < 1 || sig > 32 || pgrp <= 0)
    ab3a:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
    ab3f:	7e 0e                	jle    ab4f <kill_pg+0x28>
    ab41:	83 7c 24 18 20       	cmpl   $0x20,0x18(%esp)
    ab46:	7f 07                	jg     ab4f <kill_pg+0x28>
    ab48:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    ab4d:	7f 07                	jg     ab56 <kill_pg+0x2f>
		return -EINVAL;
    ab4f:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    ab54:	eb 73                	jmp    abc9 <kill_pg+0xa2>
 	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    ab56:	c7 44 24 0c bc e2 02 	movl   $0x2e2bc,0xc(%esp)
    ab5d:	00 
    ab5e:	eb 4c                	jmp    abac <kill_pg+0x85>
		if ((*p)->pgrp == pgrp) {
    ab60:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ab64:	8b 00                	mov    (%eax),%eax
    ab66:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    ab6c:	3b 44 24 14          	cmp    0x14(%esp),%eax
    ab70:	75 35                	jne    aba7 <kill_pg+0x80>
			if (sig && (err = send_sig(sig, *p, priv)))
    ab72:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
    ab77:	74 29                	je     aba2 <kill_pg+0x7b>
    ab79:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ab7d:	8b 00                	mov    (%eax),%eax
    ab7f:	ff 74 24 1c          	pushl  0x1c(%esp)
    ab83:	50                   	push   %eax
    ab84:	ff 74 24 20          	pushl  0x20(%esp)
    ab88:	e8 52 fe ff ff       	call   a9df <send_sig>
    ab8d:	83 c4 0c             	add    $0xc,%esp
    ab90:	89 04 24             	mov    %eax,(%esp)
    ab93:	83 3c 24 00          	cmpl   $0x0,(%esp)
    ab97:	74 09                	je     aba2 <kill_pg+0x7b>
				retval = err;
    ab99:	8b 04 24             	mov    (%esp),%eax
    ab9c:	89 44 24 08          	mov    %eax,0x8(%esp)
    aba0:	eb 05                	jmp    aba7 <kill_pg+0x80>
			else
				found++;
    aba2:	83 44 24 04 01       	addl   $0x1,0x4(%esp)

	// 首先判断给定的信号和进程组号是否有效。然后扫描系统中所有任务。若扫描到进程组号为pgrp的进程，就向其发送信号sig。
	// 只要有一次信号发送成功，函数最后就会返回0。
	if (sig < 1 || sig > 32 || pgrp <= 0)
		return -EINVAL;
 	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    aba7:	83 6c 24 0c 04       	subl   $0x4,0xc(%esp)
    abac:	81 7c 24 0c c0 e1 02 	cmpl   $0x2e1c0,0xc(%esp)
    abb3:	00 
    abb4:	77 aa                	ja     ab60 <kill_pg+0x39>
			if (sig && (err = send_sig(sig, *p, priv)))
				retval = err;
			else
				found++;
		}
	return(found ? 0 : retval);
    abb6:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    abbb:	75 06                	jne    abc3 <kill_pg+0x9c>
    abbd:	8b 44 24 08          	mov    0x8(%esp),%eax
    abc1:	eb 05                	jmp    abc8 <kill_pg+0xa1>
    abc3:	b8 00 00 00 00       	mov    $0x0,%eax
    abc8:	90                   	nop
}
    abc9:	83 c4 10             	add    $0x10,%esp
    abcc:	c3                   	ret    

0000abcd <kill_proc>:
// 终止进程（向进程发送信号）。
// 参数：pid - 进程号；sig - 指定信号；priv - 权限。
// 即向进程号为pid的进程发送指定信号sig。若找到指定pid的进程，那么若信号发送成功，则返回0，否则返回信号发送出错。
// 如果没有找到指定进程号pid的进程，则返回出错号-ESRCH（指定进程不存在）。
int kill_proc(int pid, int sig, int priv)
{
    abcd:	83 ec 10             	sub    $0x10,%esp
 	struct task_struct **p;

	if (sig < 1 || sig > 32)
    abd0:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
    abd5:	7e 07                	jle    abde <kill_proc+0x11>
    abd7:	83 7c 24 18 20       	cmpl   $0x20,0x18(%esp)
    abdc:	7e 07                	jle    abe5 <kill_proc+0x18>
		return -EINVAL;
    abde:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    abe3:	eb 57                	jmp    ac3c <kill_proc+0x6f>
	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    abe5:	c7 44 24 0c bc e2 02 	movl   $0x2e2bc,0xc(%esp)
    abec:	00 
    abed:	eb 3e                	jmp    ac2d <kill_proc+0x60>
		if ((*p)->pid == pid)
    abef:	8b 44 24 0c          	mov    0xc(%esp),%eax
    abf3:	8b 00                	mov    (%eax),%eax
    abf5:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    abfb:	3b 44 24 14          	cmp    0x14(%esp),%eax
    abff:	75 27                	jne    ac28 <kill_proc+0x5b>
			return(sig ? send_sig(sig, *p, priv) : 0);
    ac01:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
    ac06:	74 19                	je     ac21 <kill_proc+0x54>
    ac08:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ac0c:	8b 00                	mov    (%eax),%eax
    ac0e:	ff 74 24 1c          	pushl  0x1c(%esp)
    ac12:	50                   	push   %eax
    ac13:	ff 74 24 20          	pushl  0x20(%esp)
    ac17:	e8 c3 fd ff ff       	call   a9df <send_sig>
    ac1c:	83 c4 0c             	add    $0xc,%esp
    ac1f:	eb 1b                	jmp    ac3c <kill_proc+0x6f>
    ac21:	b8 00 00 00 00       	mov    $0x0,%eax
    ac26:	eb 14                	jmp    ac3c <kill_proc+0x6f>
{
 	struct task_struct **p;

	if (sig < 1 || sig > 32)
		return -EINVAL;
	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    ac28:	83 6c 24 0c 04       	subl   $0x4,0xc(%esp)
    ac2d:	81 7c 24 0c c0 e1 02 	cmpl   $0x2e1c0,0xc(%esp)
    ac34:	00 
    ac35:	77 b8                	ja     abef <kill_proc+0x22>
		if ((*p)->pid == pid)
			return(sig ? send_sig(sig, *p, priv) : 0);
	return(-ESRCH);
    ac37:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
}
    ac3c:	83 c4 10             	add    $0x10,%esp
    ac3f:	c3                   	ret    

0000ac40 <sys_kill>:
// 如果pid<-1，则信号sig将发送给进程组-pid的所有进程。
// 如果信号sig为0，则不发送信号，但仍会进行错误检查。如果成功则返回0.
// 该函数扫描任务数组表，并根据pid对满足条件的进程发送指定信号sig。若pid等于0，表明当前进程是进程组组长，因此需要
// 向所有组内的进程强制发送信号sig。
int sys_kill(int pid, int sig)
{
    ac40:	83 ec 10             	sub    $0x10,%esp
	struct task_struct **p = NR_TASKS + task;       // p指向任务数组最后一项。
    ac43:	c7 44 24 0c c0 e2 02 	movl   $0x2e2c0,0xc(%esp)
    ac4a:	00 
	int err, retval = 0;
    ac4b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    ac52:	00 

	if (!pid)
    ac53:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    ac58:	75 1c                	jne    ac76 <sys_kill+0x36>
		return(kill_pg(current->pid, sig, 0));
    ac5a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    ac5f:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    ac65:	6a 00                	push   $0x0
    ac67:	ff 74 24 1c          	pushl  0x1c(%esp)
    ac6b:	50                   	push   %eax
    ac6c:	e8 b6 fe ff ff       	call   ab27 <kill_pg>
    ac71:	83 c4 0c             	add    $0xc,%esp
    ac74:	eb 76                	jmp    acec <sys_kill+0xac>
	if (pid == -1) {
    ac76:	83 7c 24 14 ff       	cmpl   $0xffffffff,0x14(%esp)
    ac7b:	75 3f                	jne    acbc <sys_kill+0x7c>
		while (--p > &FIRST_TASK)
    ac7d:	eb 28                	jmp    aca7 <sys_kill+0x67>
			if (err = send_sig(sig, *p, 0))
    ac7f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ac83:	8b 00                	mov    (%eax),%eax
    ac85:	6a 00                	push   $0x0
    ac87:	50                   	push   %eax
    ac88:	ff 74 24 20          	pushl  0x20(%esp)
    ac8c:	e8 4e fd ff ff       	call   a9df <send_sig>
    ac91:	83 c4 0c             	add    $0xc,%esp
    ac94:	89 44 24 04          	mov    %eax,0x4(%esp)
    ac98:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    ac9d:	74 08                	je     aca7 <sys_kill+0x67>
				retval = err;
    ac9f:	8b 44 24 04          	mov    0x4(%esp),%eax
    aca3:	89 44 24 08          	mov    %eax,0x8(%esp)
	int err, retval = 0;

	if (!pid)
		return(kill_pg(current->pid, sig, 0));
	if (pid == -1) {
		while (--p > &FIRST_TASK)
    aca7:	83 6c 24 0c 04       	subl   $0x4,0xc(%esp)
    acac:	81 7c 24 0c c0 e1 02 	cmpl   $0x2e1c0,0xc(%esp)
    acb3:	00 
    acb4:	77 c9                	ja     ac7f <sys_kill+0x3f>
			if (err = send_sig(sig, *p, 0))
				retval = err;
		return(retval);
    acb6:	8b 44 24 08          	mov    0x8(%esp),%eax
    acba:	eb 30                	jmp    acec <sys_kill+0xac>
	}
	if (pid < 0)
    acbc:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    acc1:	79 17                	jns    acda <sys_kill+0x9a>
		return(kill_pg(-pid, sig, 0));
    acc3:	8b 44 24 14          	mov    0x14(%esp),%eax
    acc7:	f7 d8                	neg    %eax
    acc9:	6a 00                	push   $0x0
    accb:	ff 74 24 1c          	pushl  0x1c(%esp)
    accf:	50                   	push   %eax
    acd0:	e8 52 fe ff ff       	call   ab27 <kill_pg>
    acd5:	83 c4 0c             	add    $0xc,%esp
    acd8:	eb 12                	jmp    acec <sys_kill+0xac>
	/* Normal kill */
	return(kill_proc(pid, sig, 0));
    acda:	6a 00                	push   $0x0
    acdc:	ff 74 24 1c          	pushl  0x1c(%esp)
    ace0:	ff 74 24 1c          	pushl  0x1c(%esp)
    ace4:	e8 e4 fe ff ff       	call   abcd <kill_proc>
    ace9:	83 c4 0c             	add    $0xc,%esp
}
    acec:	83 c4 10             	add    $0x10,%esp
    acef:	c3                   	ret    

0000acf0 <is_orphaned_pgrp>:
// 扫描任务数组。如果任务项空，或者进程的组号与指定的不同，或者进程已经处于僵死状态。或者进程的父进程是init进程，
// 则说明扫描的进程不是指定进程组的成员，或者不满足要求，于是跳过。否则说明该进程是指定组的成员并且其父进程不是init
// 进程。此时如果该进程父进程的组号不等于指定的组号pgrp，但父进程的会话号等于进程的会话号，则说明它们同属于一个会话。
// 因此指定的pgrp进程组肯定不是孤儿进程组。否则......
int is_orphaned_pgrp(int pgrp)
{
    acf0:	83 ec 10             	sub    $0x10,%esp
	struct task_struct **p;

	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p) {
    acf3:	c7 44 24 0c bc e2 02 	movl   $0x2e2bc,0xc(%esp)
    acfa:	00 
    acfb:	e9 87 00 00 00       	jmp    ad87 <is_orphaned_pgrp+0x97>
		if (!(*p) ||
    ad00:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ad04:	8b 00                	mov    (%eax),%eax
    ad06:	85 c0                	test   %eax,%eax
    ad08:	74 77                	je     ad81 <is_orphaned_pgrp+0x91>
		    ((*p)->pgrp != pgrp) ||
    ad0a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ad0e:	8b 00                	mov    (%eax),%eax
    ad10:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
int is_orphaned_pgrp(int pgrp)
{
	struct task_struct **p;

	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p) {
		if (!(*p) ||
    ad16:	3b 44 24 14          	cmp    0x14(%esp),%eax
    ad1a:	75 65                	jne    ad81 <is_orphaned_pgrp+0x91>
		    ((*p)->pgrp != pgrp) ||
		    ((*p)->state == TASK_ZOMBIE) ||
    ad1c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ad20:	8b 00                	mov    (%eax),%eax
    ad22:	8b 00                	mov    (%eax),%eax
{
	struct task_struct **p;

	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p) {
		if (!(*p) ||
		    ((*p)->pgrp != pgrp) ||
    ad24:	83 f8 03             	cmp    $0x3,%eax
    ad27:	74 58                	je     ad81 <is_orphaned_pgrp+0x91>
		    ((*p)->state == TASK_ZOMBIE) ||
		    ((*p)->p_pptr->pid == 1))
    ad29:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ad2d:	8b 00                	mov    (%eax),%eax
    ad2f:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    ad35:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
	struct task_struct **p;

	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p) {
		if (!(*p) ||
		    ((*p)->pgrp != pgrp) ||
		    ((*p)->state == TASK_ZOMBIE) ||
    ad3b:	83 f8 01             	cmp    $0x1,%eax
    ad3e:	74 41                	je     ad81 <is_orphaned_pgrp+0x91>
		    ((*p)->p_pptr->pid == 1))
			continue;
		if (((*p)->p_pptr->pgrp != pgrp) &&
    ad40:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ad44:	8b 00                	mov    (%eax),%eax
    ad46:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    ad4c:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    ad52:	3b 44 24 14          	cmp    0x14(%esp),%eax
    ad56:	74 2a                	je     ad82 <is_orphaned_pgrp+0x92>
		    ((*p)->p_pptr->session == (*p)->session))
    ad58:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ad5c:	8b 00                	mov    (%eax),%eax
    ad5e:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    ad64:	8b 90 34 02 00 00    	mov    0x234(%eax),%edx
    ad6a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ad6e:	8b 00                	mov    (%eax),%eax
    ad70:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
		if (!(*p) ||
		    ((*p)->pgrp != pgrp) ||
		    ((*p)->state == TASK_ZOMBIE) ||
		    ((*p)->p_pptr->pid == 1))
			continue;
		if (((*p)->p_pptr->pgrp != pgrp) &&
    ad76:	39 c2                	cmp    %eax,%edx
    ad78:	75 08                	jne    ad82 <is_orphaned_pgrp+0x92>
		    ((*p)->p_pptr->session == (*p)->session))
			return 0;
    ad7a:	b8 00 00 00 00       	mov    $0x0,%eax
    ad7f:	eb 19                	jmp    ad9a <is_orphaned_pgrp+0xaa>
	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p) {
		if (!(*p) ||
		    ((*p)->pgrp != pgrp) ||
		    ((*p)->state == TASK_ZOMBIE) ||
		    ((*p)->p_pptr->pid == 1))
			continue;
    ad81:	90                   	nop
// 因此指定的pgrp进程组肯定不是孤儿进程组。否则......
int is_orphaned_pgrp(int pgrp)
{
	struct task_struct **p;

	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p) {
    ad82:	83 6c 24 0c 04       	subl   $0x4,0xc(%esp)
    ad87:	81 7c 24 0c c0 e1 02 	cmpl   $0x2e1c0,0xc(%esp)
    ad8e:	00 
    ad8f:	0f 87 6b ff ff ff    	ja     ad00 <is_orphaned_pgrp+0x10>
			continue;
		if (((*p)->p_pptr->pgrp != pgrp) &&
		    ((*p)->p_pptr->session == (*p)->session))
			return 0;
	}
	return(1);	/* (sighing) "Often!" */        /* (唉）是孤儿进程组！ */
    ad95:	b8 01 00 00 00       	mov    $0x1,%eax
}
    ad9a:	83 c4 10             	add    $0x10,%esp
    ad9d:	c3                   	ret    

0000ad9e <has_stopped_jobs>:

// 判断进程组中是否含有处于停止状态的作业（进程组）。有则返回1；无则返回0.
// 查找方法是扫描整个任务数组。检查属于指定组pgrp的任何进程是否处于停止状态。
static int has_stopped_jobs(int pgrp)
{
    ad9e:	83 ec 10             	sub    $0x10,%esp
	struct task_struct ** p;

	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p) {
    ada1:	c7 44 24 0c bc e2 02 	movl   $0x2e2bc,0xc(%esp)
    ada8:	00 
    ada9:	eb 2c                	jmp    add7 <has_stopped_jobs+0x39>
		if ((*p)->pgrp != pgrp)
    adab:	8b 44 24 0c          	mov    0xc(%esp),%eax
    adaf:	8b 00                	mov    (%eax),%eax
    adb1:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    adb7:	3b 44 24 14          	cmp    0x14(%esp),%eax
    adbb:	75 14                	jne    add1 <has_stopped_jobs+0x33>
			continue;
		if ((*p)->state == TASK_STOPPED)
    adbd:	8b 44 24 0c          	mov    0xc(%esp),%eax
    adc1:	8b 00                	mov    (%eax),%eax
    adc3:	8b 00                	mov    (%eax),%eax
    adc5:	83 f8 04             	cmp    $0x4,%eax
    adc8:	75 08                	jne    add2 <has_stopped_jobs+0x34>
			return(1);
    adca:	b8 01 00 00 00       	mov    $0x1,%eax
    adcf:	eb 15                	jmp    ade6 <has_stopped_jobs+0x48>
{
	struct task_struct ** p;

	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p) {
		if ((*p)->pgrp != pgrp)
			continue;
    add1:	90                   	nop
// 查找方法是扫描整个任务数组。检查属于指定组pgrp的任何进程是否处于停止状态。
static int has_stopped_jobs(int pgrp)
{
	struct task_struct ** p;

	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p) {
    add2:	83 6c 24 0c 04       	subl   $0x4,0xc(%esp)
    add7:	81 7c 24 0c c0 e1 02 	cmpl   $0x2e1c0,0xc(%esp)
    adde:	00 
    addf:	77 ca                	ja     adab <has_stopped_jobs+0xd>
		if ((*p)->pgrp != pgrp)
			continue;
		if ((*p)->state == TASK_STOPPED)
			return(1);
	}
	return(0);
    ade1:	b8 00 00 00 00       	mov    $0x0,%eax
}
    ade6:	83 c4 10             	add    $0x10,%esp
    ade9:	c3                   	ret    

0000adea <do_exit>:

// 程序退出处理函数。
// 该函数将根据进程自身的特性对其进行处理，并把当前进程状态设置成僵死状态TASK_ZOMBIE，最后调用调度函数schedule()去
// 执行其他进程，不再返回。
void do_exit(long code)
{
    adea:	56                   	push   %esi
    adeb:	53                   	push   %ebx
    adec:	83 ec 24             	sub    $0x24,%esp
	// 首先释放当前进程代码段和数据段所占的内存页。函数free_page_tables()的第1个参数（get_base()返回值）指明在CPU线性
	// 地址空间中起始其地址，第2个（get_limit()返回值）说明欲释放的字节长度值。get_base()宏中的current->ldt[1]给出进程
	// 代码段描述符的位置（current->ldt[2]给出进程数据段描述符的位置）；get_limit()中的0x0f是进程代码段的选择符（0x17是
	// 进程数据段的选择符）。即在取段其地址时使用该段的描述符所处地址作为参数，取段长度时使用该段的选择符作为参数。
	// free_page_tables()函数位于mm/memory.c文件；get_base()和get_limit()宏位于include/linux/sched.h头文件。
	free_page_tables(get_base(current->ldt[1]), get_limit(0x0f));
    adef:	b8 0f 00 00 00       	mov    $0xf,%eax
    adf4:	0f 03 c0             	lsl    %ax,%eax
    adf7:	40                   	inc    %eax
    adf8:	89 44 24 10          	mov    %eax,0x10(%esp)
    adfc:	8b 4c 24 10          	mov    0x10(%esp),%ecx
    ae00:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    ae05:	05 a0 03 00 00       	add    $0x3a0,%eax
    ae0a:	83 c0 02             	add    $0x2,%eax
    ae0d:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    ae13:	81 c2 a0 03 00 00    	add    $0x3a0,%edx
    ae19:	8d 72 04             	lea    0x4(%edx),%esi
    ae1c:	8b 1d a0 e1 02 00    	mov    0x2e1a0,%ebx
    ae22:	81 c3 a0 03 00 00    	add    $0x3a0,%ebx
    ae28:	83 c3 07             	add    $0x7,%ebx
    ae2b:	8a 33                	mov    (%ebx),%dh
    ae2d:	8a 16                	mov    (%esi),%dl
    ae2f:	c1 e2 10             	shl    $0x10,%edx
    ae32:	66 8b 10             	mov    (%eax),%dx
    ae35:	89 d0                	mov    %edx,%eax
    ae37:	89 44 24 0c          	mov    %eax,0xc(%esp)
    ae3b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ae3f:	83 ec 08             	sub    $0x8,%esp
    ae42:	51                   	push   %ecx
    ae43:	50                   	push   %eax
    ae44:	e8 dd 0e 00 00       	call   bd26 <free_page_tables>
    ae49:	83 c4 10             	add    $0x10,%esp
	free_page_tables(get_base(current->ldt[2]), get_limit(0x17));
    ae4c:	b8 17 00 00 00       	mov    $0x17,%eax
    ae51:	0f 03 c0             	lsl    %ax,%eax
    ae54:	40                   	inc    %eax
    ae55:	89 44 24 08          	mov    %eax,0x8(%esp)
    ae59:	8b 4c 24 08          	mov    0x8(%esp),%ecx
    ae5d:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    ae62:	05 a8 03 00 00       	add    $0x3a8,%eax
    ae67:	83 c0 02             	add    $0x2,%eax
    ae6a:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    ae70:	81 c2 a8 03 00 00    	add    $0x3a8,%edx
    ae76:	8d 72 04             	lea    0x4(%edx),%esi
    ae79:	8b 1d a0 e1 02 00    	mov    0x2e1a0,%ebx
    ae7f:	81 c3 a8 03 00 00    	add    $0x3a8,%ebx
    ae85:	83 c3 07             	add    $0x7,%ebx
    ae88:	8a 33                	mov    (%ebx),%dh
    ae8a:	8a 16                	mov    (%esi),%dl
    ae8c:	c1 e2 10             	shl    $0x10,%edx
    ae8f:	66 8b 10             	mov    (%eax),%dx
    ae92:	89 d0                	mov    %edx,%eax
    ae94:	89 44 24 04          	mov    %eax,0x4(%esp)
    ae98:	8b 44 24 04          	mov    0x4(%esp),%eax
    ae9c:	83 ec 08             	sub    $0x8,%esp
    ae9f:	51                   	push   %ecx
    aea0:	50                   	push   %eax
    aea1:	e8 80 0e 00 00       	call   bd26 <free_page_tables>
    aea6:	83 c4 10             	add    $0x10,%esp
	// 然后关闭当前进程打开着的所有文件。再对当前进程的工作目录pwd、根目录root、执行程序文件的i节点以及库文件进行同步操作，
	// 放回各个i节点并分别置空（释放）。接着把当前进程的状态设置为僵死状态（TASK_ZOMBIE），并设置进程退出码。
	for (i = 0 ; i < NR_OPEN ; i++)
    aea9:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
    aeb0:	00 
    aeb1:	eb 2b                	jmp    aede <do_exit+0xf4>
		if (current->filp[i])
    aeb3:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    aeb8:	8b 54 24 18          	mov    0x18(%esp),%edx
    aebc:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    aec2:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
    aec6:	85 c0                	test   %eax,%eax
    aec8:	74 0f                	je     aed9 <do_exit+0xef>
			sys_close(i);
    aeca:	83 ec 0c             	sub    $0xc,%esp
    aecd:	ff 74 24 24          	pushl  0x24(%esp)
    aed1:	e8 a7 2c 00 00       	call   db7d <sys_close>
    aed6:	83 c4 10             	add    $0x10,%esp
	// free_page_tables()函数位于mm/memory.c文件；get_base()和get_limit()宏位于include/linux/sched.h头文件。
	free_page_tables(get_base(current->ldt[1]), get_limit(0x0f));
	free_page_tables(get_base(current->ldt[2]), get_limit(0x17));
	// 然后关闭当前进程打开着的所有文件。再对当前进程的工作目录pwd、根目录root、执行程序文件的i节点以及库文件进行同步操作，
	// 放回各个i节点并分别置空（释放）。接着把当前进程的状态设置为僵死状态（TASK_ZOMBIE），并设置进程退出码。
	for (i = 0 ; i < NR_OPEN ; i++)
    aed9:	83 44 24 18 01       	addl   $0x1,0x18(%esp)
    aede:	83 7c 24 18 13       	cmpl   $0x13,0x18(%esp)
    aee3:	7e ce                	jle    aeb3 <do_exit+0xc9>
		if (current->filp[i])
			sys_close(i);
	iput(current->pwd);
    aee5:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    aeea:	8b 80 34 03 00 00    	mov    0x334(%eax),%eax
    aef0:	83 ec 0c             	sub    $0xc,%esp
    aef3:	50                   	push   %eax
    aef4:	e8 a3 37 00 00       	call   e69c <iput>
    aef9:	83 c4 10             	add    $0x10,%esp
	current->pwd = NULL;
    aefc:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    af01:	c7 80 34 03 00 00 00 	movl   $0x0,0x334(%eax)
    af08:	00 00 00 
	iput(current->root);
    af0b:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    af10:	8b 80 38 03 00 00    	mov    0x338(%eax),%eax
    af16:	83 ec 0c             	sub    $0xc,%esp
    af19:	50                   	push   %eax
    af1a:	e8 7d 37 00 00       	call   e69c <iput>
    af1f:	83 c4 10             	add    $0x10,%esp
	current->root = NULL;
    af22:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    af27:	c7 80 38 03 00 00 00 	movl   $0x0,0x338(%eax)
    af2e:	00 00 00 
	iput(current->executable);
    af31:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    af36:	8b 80 3c 03 00 00    	mov    0x33c(%eax),%eax
    af3c:	83 ec 0c             	sub    $0xc,%esp
    af3f:	50                   	push   %eax
    af40:	e8 57 37 00 00       	call   e69c <iput>
    af45:	83 c4 10             	add    $0x10,%esp
	current->executable = NULL;
    af48:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    af4d:	c7 80 3c 03 00 00 00 	movl   $0x0,0x33c(%eax)
    af54:	00 00 00 
	iput(current->library);
    af57:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    af5c:	8b 80 40 03 00 00    	mov    0x340(%eax),%eax
    af62:	83 ec 0c             	sub    $0xc,%esp
    af65:	50                   	push   %eax
    af66:	e8 31 37 00 00       	call   e69c <iput>
    af6b:	83 c4 10             	add    $0x10,%esp
	current->library = NULL;
    af6e:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    af73:	c7 80 40 03 00 00 00 	movl   $0x0,0x340(%eax)
    af7a:	00 00 00 
	current->state = TASK_ZOMBIE;
    af7d:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    af82:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
	current->exit_code = code;
    af88:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    af8d:	8b 54 24 30          	mov    0x30(%esp),%edx
    af91:	89 90 14 02 00 00    	mov    %edx,0x214(%eax)
     * 组将变成一个孤儿进程组。
     */
	// POSIX 3.2.2.2（1991版）是关于exit()函数的说明。如果父进程所在的进程组与当前进程的不同，但都处于同一个会话
	// （session）中，并且当前进程所在进程组将要变成孤儿进程了并且当前进程的进程组中含有处于停止状态的作业（进程），
	// 那么就要向这个当前进程的进程组发送两个信号：SIGHUP和SIGCONT。
	if ((current->p_pptr->pgrp != current->pgrp) &&
    af97:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    af9c:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    afa2:	8b 90 30 02 00 00    	mov    0x230(%eax),%edx
    afa8:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    afad:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    afb3:	39 c2                	cmp    %eax,%edx
    afb5:	0f 84 8c 00 00 00    	je     b047 <do_exit+0x25d>
	    (current->p_pptr->session == current->session) &&
    afbb:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    afc0:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    afc6:	8b 90 34 02 00 00    	mov    0x234(%eax),%edx
    afcc:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    afd1:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
     * 组将变成一个孤儿进程组。
     */
	// POSIX 3.2.2.2（1991版）是关于exit()函数的说明。如果父进程所在的进程组与当前进程的不同，但都处于同一个会话
	// （session）中，并且当前进程所在进程组将要变成孤儿进程了并且当前进程的进程组中含有处于停止状态的作业（进程），
	// 那么就要向这个当前进程的进程组发送两个信号：SIGHUP和SIGCONT。
	if ((current->p_pptr->pgrp != current->pgrp) &&
    afd7:	39 c2                	cmp    %eax,%edx
    afd9:	75 6c                	jne    b047 <do_exit+0x25d>
	    (current->p_pptr->session == current->session) &&
	    is_orphaned_pgrp(current->pgrp) &&
    afdb:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    afe0:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    afe6:	83 ec 0c             	sub    $0xc,%esp
    afe9:	50                   	push   %eax
    afea:	e8 01 fd ff ff       	call   acf0 <is_orphaned_pgrp>
    afef:	83 c4 10             	add    $0x10,%esp
     */
	// POSIX 3.2.2.2（1991版）是关于exit()函数的说明。如果父进程所在的进程组与当前进程的不同，但都处于同一个会话
	// （session）中，并且当前进程所在进程组将要变成孤儿进程了并且当前进程的进程组中含有处于停止状态的作业（进程），
	// 那么就要向这个当前进程的进程组发送两个信号：SIGHUP和SIGCONT。
	if ((current->p_pptr->pgrp != current->pgrp) &&
	    (current->p_pptr->session == current->session) &&
    aff2:	85 c0                	test   %eax,%eax
    aff4:	74 51                	je     b047 <do_exit+0x25d>
	    is_orphaned_pgrp(current->pgrp) &&
	    has_stopped_jobs(current->pgrp)) {
    aff6:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    affb:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    b001:	83 ec 0c             	sub    $0xc,%esp
    b004:	50                   	push   %eax
    b005:	e8 94 fd ff ff       	call   ad9e <has_stopped_jobs>
    b00a:	83 c4 10             	add    $0x10,%esp
	// POSIX 3.2.2.2（1991版）是关于exit()函数的说明。如果父进程所在的进程组与当前进程的不同，但都处于同一个会话
	// （session）中，并且当前进程所在进程组将要变成孤儿进程了并且当前进程的进程组中含有处于停止状态的作业（进程），
	// 那么就要向这个当前进程的进程组发送两个信号：SIGHUP和SIGCONT。
	if ((current->p_pptr->pgrp != current->pgrp) &&
	    (current->p_pptr->session == current->session) &&
	    is_orphaned_pgrp(current->pgrp) &&
    b00d:	85 c0                	test   %eax,%eax
    b00f:	74 36                	je     b047 <do_exit+0x25d>
	    has_stopped_jobs(current->pgrp)) {
		kill_pg(current->pgrp,SIGHUP,1);
    b011:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b016:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    b01c:	83 ec 04             	sub    $0x4,%esp
    b01f:	6a 01                	push   $0x1
    b021:	6a 01                	push   $0x1
    b023:	50                   	push   %eax
    b024:	e8 fe fa ff ff       	call   ab27 <kill_pg>
    b029:	83 c4 10             	add    $0x10,%esp
		kill_pg(current->pgrp,SIGCONT,1);
    b02c:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b031:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    b037:	83 ec 04             	sub    $0x4,%esp
    b03a:	6a 01                	push   $0x1
    b03c:	6a 12                	push   $0x12
    b03e:	50                   	push   %eax
    b03f:	e8 e3 fa ff ff       	call   ab27 <kill_pg>
    b044:	83 c4 10             	add    $0x10,%esp
	}
	/* Let father know we died */           /* 通知父进程当前进程将终止 */
	current->p_pptr->signal |= (1 << (SIGCHLD - 1));
    b047:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b04c:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    b052:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    b058:	8b 92 bc 02 00 00    	mov    0x2bc(%edx),%edx
    b05e:	8b 52 0c             	mov    0xc(%edx),%edx
    b061:	81 ca 00 00 01 00    	or     $0x10000,%edx
    b067:	89 50 0c             	mov    %edx,0xc(%eax)
     * B. 检查当前进程的退出是否会造成任何进程组变成孤儿进程组。如果有，并且有处于停止状态
     * （TASK_STOPPED）的组员，则向它们发送一个SIGHUP信号和一个SIGCONT信号。（POSIX 3.2.2.2节要求）
     */
	// 如果当前进程有子进程（其p_cptr指针指向最近创建的子进程），则让进程1（init进程）成为其所有子进程的父进程。如果
	// 子进程已经处于僵死状态，则向init进程（父进程）发送子进程已终止信号SIGCHLD。
	if (p = current->p_cptr) {
    b06a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b06f:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
    b075:	89 44 24 1c          	mov    %eax,0x1c(%esp)
    b079:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
    b07e:	0f 84 42 01 00 00    	je     b1c6 <do_exit+0x3dc>
		while (1) {
			p->p_pptr = task[1];
    b084:	8b 15 c4 e1 02 00    	mov    0x2e1c4,%edx
    b08a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b08e:	89 90 bc 02 00 00    	mov    %edx,0x2bc(%eax)
			if (p->state == TASK_ZOMBIE)
    b094:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b098:	8b 00                	mov    (%eax),%eax
    b09a:	83 f8 03             	cmp    $0x3,%eax
    b09d:	75 17                	jne    b0b6 <do_exit+0x2cc>
				task[1]->signal |= (1 << (SIGCHLD - 1));
    b09f:	a1 c4 e1 02 00       	mov    0x2e1c4,%eax
    b0a4:	8b 15 c4 e1 02 00    	mov    0x2e1c4,%edx
    b0aa:	8b 52 0c             	mov    0xc(%edx),%edx
    b0ad:	81 ca 00 00 01 00    	or     $0x10000,%edx
    b0b3:	89 50 0c             	mov    %edx,0xc(%eax)
             * 因此现在子进程所有进程组将变成孤儿进程组了。
             */
			// 如果子进程与当前进程不在同一个进程组但属于同一个session中，并且当前进程所在进程组将要变成孤儿进程了，并且当前
			// 进程的进程组中含有处于停止状态的作业（进程），那么就要向这个当前进程的进程组发送两个信号：SIGHUP和SIGCONT。如果
			// 该子进程有兄弟进程，则继续循环处理这些兄弟进程。
			if ((p->pgrp != current->pgrp) &&
    b0b6:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b0ba:	8b 90 30 02 00 00    	mov    0x230(%eax),%edx
    b0c0:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b0c5:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    b0cb:	39 c2                	cmp    %eax,%edx
    b0cd:	0f 84 81 00 00 00    	je     b154 <do_exit+0x36a>
			    (p->session == current->session) &&
    b0d3:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b0d7:	8b 90 34 02 00 00    	mov    0x234(%eax),%edx
    b0dd:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b0e2:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
             * 因此现在子进程所有进程组将变成孤儿进程组了。
             */
			// 如果子进程与当前进程不在同一个进程组但属于同一个session中，并且当前进程所在进程组将要变成孤儿进程了，并且当前
			// 进程的进程组中含有处于停止状态的作业（进程），那么就要向这个当前进程的进程组发送两个信号：SIGHUP和SIGCONT。如果
			// 该子进程有兄弟进程，则继续循环处理这些兄弟进程。
			if ((p->pgrp != current->pgrp) &&
    b0e8:	39 c2                	cmp    %eax,%edx
    b0ea:	75 68                	jne    b154 <do_exit+0x36a>
			    (p->session == current->session) &&
			    is_orphaned_pgrp(p->pgrp) &&
    b0ec:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b0f0:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    b0f6:	83 ec 0c             	sub    $0xc,%esp
    b0f9:	50                   	push   %eax
    b0fa:	e8 f1 fb ff ff       	call   acf0 <is_orphaned_pgrp>
    b0ff:	83 c4 10             	add    $0x10,%esp
             */
			// 如果子进程与当前进程不在同一个进程组但属于同一个session中，并且当前进程所在进程组将要变成孤儿进程了，并且当前
			// 进程的进程组中含有处于停止状态的作业（进程），那么就要向这个当前进程的进程组发送两个信号：SIGHUP和SIGCONT。如果
			// 该子进程有兄弟进程，则继续循环处理这些兄弟进程。
			if ((p->pgrp != current->pgrp) &&
			    (p->session == current->session) &&
    b102:	85 c0                	test   %eax,%eax
    b104:	74 4e                	je     b154 <do_exit+0x36a>
			    is_orphaned_pgrp(p->pgrp) &&
			    has_stopped_jobs(p->pgrp)) {
    b106:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b10a:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    b110:	83 ec 0c             	sub    $0xc,%esp
    b113:	50                   	push   %eax
    b114:	e8 85 fc ff ff       	call   ad9e <has_stopped_jobs>
    b119:	83 c4 10             	add    $0x10,%esp
			// 如果子进程与当前进程不在同一个进程组但属于同一个session中，并且当前进程所在进程组将要变成孤儿进程了，并且当前
			// 进程的进程组中含有处于停止状态的作业（进程），那么就要向这个当前进程的进程组发送两个信号：SIGHUP和SIGCONT。如果
			// 该子进程有兄弟进程，则继续循环处理这些兄弟进程。
			if ((p->pgrp != current->pgrp) &&
			    (p->session == current->session) &&
			    is_orphaned_pgrp(p->pgrp) &&
    b11c:	85 c0                	test   %eax,%eax
    b11e:	74 34                	je     b154 <do_exit+0x36a>
			    has_stopped_jobs(p->pgrp)) {
				kill_pg(p->pgrp,SIGHUP,1);
    b120:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b124:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    b12a:	83 ec 04             	sub    $0x4,%esp
    b12d:	6a 01                	push   $0x1
    b12f:	6a 01                	push   $0x1
    b131:	50                   	push   %eax
    b132:	e8 f0 f9 ff ff       	call   ab27 <kill_pg>
    b137:	83 c4 10             	add    $0x10,%esp
				kill_pg(p->pgrp,SIGCONT,1);
    b13a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b13e:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    b144:	83 ec 04             	sub    $0x4,%esp
    b147:	6a 01                	push   $0x1
    b149:	6a 12                	push   $0x12
    b14b:	50                   	push   %eax
    b14c:	e8 d6 f9 ff ff       	call   ab27 <kill_pg>
    b151:	83 c4 10             	add    $0x10,%esp
			}
			if (p->p_osptr) {
    b154:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b158:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    b15e:	85 c0                	test   %eax,%eax
    b160:	74 13                	je     b175 <do_exit+0x38b>
				p = p->p_osptr;
    b162:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b166:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    b16c:	89 44 24 1c          	mov    %eax,0x1c(%esp)
			p->p_osptr = task[1]->p_cptr;
			task[1]->p_cptr->p_ysptr = p;
			task[1]->p_cptr = current->p_cptr;
			current->p_cptr = 0;
			break;
		}
    b170:	e9 0f ff ff ff       	jmp    b084 <do_exit+0x29a>
             */
			// 通过上面处理，当前进程子进程的所有兄弟子进程都已经处理过。此时p指向最老的兄弟子进程。于是把这些兄弟子进程全部加入
			// init进程的子进程双向链表表头部中。加入后，init进程的p_cptr指向当前进程原子进程中最年轻的（the youngest）子进程
			// 而原子进程中最老的（the oldest）兄弟子进程p_osptr指向原init进程的最年轻进程，而原init进程中最年轻进程的p_ysptr
			// 指向原子进程中最老的兄弟子进程。最后把当前进程的p_cptr指针置空，并退出循环。
			p->p_osptr = task[1]->p_cptr;
    b175:	a1 c4 e1 02 00       	mov    0x2e1c4,%eax
    b17a:	8b 90 c0 02 00 00    	mov    0x2c0(%eax),%edx
    b180:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b184:	89 90 c8 02 00 00    	mov    %edx,0x2c8(%eax)
			task[1]->p_cptr->p_ysptr = p;
    b18a:	a1 c4 e1 02 00       	mov    0x2e1c4,%eax
    b18f:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
    b195:	8b 54 24 1c          	mov    0x1c(%esp),%edx
    b199:	89 90 c4 02 00 00    	mov    %edx,0x2c4(%eax)
			task[1]->p_cptr = current->p_cptr;
    b19f:	a1 c4 e1 02 00       	mov    0x2e1c4,%eax
    b1a4:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    b1aa:	8b 92 c0 02 00 00    	mov    0x2c0(%edx),%edx
    b1b0:	89 90 c0 02 00 00    	mov    %edx,0x2c0(%eax)
			current->p_cptr = 0;
    b1b6:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b1bb:	c7 80 c0 02 00 00 00 	movl   $0x0,0x2c0(%eax)
    b1c2:	00 00 00 
			break;
    b1c5:	90                   	nop
		}
	}
	// 如果当前进程是会话头领（leader）进程，那么若它有控制终端，则首先向使用该控制终端的进程组发送挂断信号SIGHUP，然后释放
	// 该终端。接着扫描任务数组，把属于当前进程会话中进程的终端置空（取消）。
	if (current->leader) {
    b1c6:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b1cb:	8b 80 38 02 00 00    	mov    0x238(%eax),%eax
    b1d1:	85 c0                	test   %eax,%eax
    b1d3:	0f 84 e7 00 00 00    	je     b2c0 <do_exit+0x4d6>
		struct task_struct **p;
		struct tty_struct *tty;

		if (current->tty >= 0) {
    b1d9:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b1de:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
    b1e4:	85 c0                	test   %eax,%eax
    b1e6:	0f 88 90 00 00 00    	js     b27c <do_exit+0x492>
			tty = TTY_TABLE(current->tty);
    b1ec:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b1f1:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
    b1f7:	85 c0                	test   %eax,%eax
    b1f9:	74 3d                	je     b238 <do_exit+0x44e>
    b1fb:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b200:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
    b206:	83 f8 3f             	cmp    $0x3f,%eax
    b209:	7f 18                	jg     b223 <do_exit+0x439>
    b20b:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b210:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
    b216:	83 e8 01             	sub    $0x1,%eax
    b219:	c1 e0 06             	shl    $0x6,%eax
    b21c:	05 20 18 04 00       	add    $0x41820,%eax
    b221:	eb 22                	jmp    b245 <do_exit+0x45b>
    b223:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b228:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
    b22e:	c1 e0 06             	shl    $0x6,%eax
    b231:	05 20 18 04 00       	add    $0x41820,%eax
    b236:	eb 0d                	jmp    b245 <do_exit+0x45b>
    b238:	a1 80 12 03 00       	mov    0x31280,%eax
    b23d:	c1 e0 06             	shl    $0x6,%eax
    b240:	05 20 18 04 00       	add    $0x41820,%eax
    b245:	89 04 24             	mov    %eax,(%esp)
			if (tty->pgrp>0)
    b248:	8b 04 24             	mov    (%esp),%eax
    b24b:	8b 40 24             	mov    0x24(%eax),%eax
    b24e:	85 c0                	test   %eax,%eax
    b250:	7e 16                	jle    b268 <do_exit+0x47e>
				kill_pg(tty->pgrp, SIGHUP, 1);
    b252:	8b 04 24             	mov    (%esp),%eax
    b255:	8b 40 24             	mov    0x24(%eax),%eax
    b258:	83 ec 04             	sub    $0x4,%esp
    b25b:	6a 01                	push   $0x1
    b25d:	6a 01                	push   $0x1
    b25f:	50                   	push   %eax
    b260:	e8 c2 f8 ff ff       	call   ab27 <kill_pg>
    b265:	83 c4 10             	add    $0x10,%esp
			tty->pgrp = 0;
    b268:	8b 04 24             	mov    (%esp),%eax
    b26b:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
			tty->session = 0;
    b272:	8b 04 24             	mov    (%esp),%eax
    b275:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
		}
	 	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    b27c:	c7 44 24 14 bc e2 02 	movl   $0x2e2bc,0x14(%esp)
    b283:	00 
    b284:	eb 30                	jmp    b2b6 <do_exit+0x4cc>
			if ((*p)->session == current->session)
    b286:	8b 44 24 14          	mov    0x14(%esp),%eax
    b28a:	8b 00                	mov    (%eax),%eax
    b28c:	8b 90 34 02 00 00    	mov    0x234(%eax),%edx
    b292:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b297:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
    b29d:	39 c2                	cmp    %eax,%edx
    b29f:	75 10                	jne    b2b1 <do_exit+0x4c7>
				(*p)->tty = -1;
    b2a1:	8b 44 24 14          	mov    0x14(%esp),%eax
    b2a5:	8b 00                	mov    (%eax),%eax
    b2a7:	c7 80 2c 03 00 00 ff 	movl   $0xffffffff,0x32c(%eax)
    b2ae:	ff ff ff 
			if (tty->pgrp>0)
				kill_pg(tty->pgrp, SIGHUP, 1);
			tty->pgrp = 0;
			tty->session = 0;
		}
	 	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p)
    b2b1:	83 6c 24 14 04       	subl   $0x4,0x14(%esp)
    b2b6:	81 7c 24 14 c0 e1 02 	cmpl   $0x2e1c0,0x14(%esp)
    b2bd:	00 
    b2be:	77 c6                	ja     b286 <do_exit+0x49c>
			if ((*p)->session == current->session)
				(*p)->tty = -1;
	}
	// 如果当前进程上次使用过协处理器，则把记录此信息的指针置空。若定义了调试进程树符号，则调用进程树检测显示函数。最后调用调度
	// 函数，重新调度进程运行，以让父进程能够处理僵死进程的其他善后事宜。
	if (last_task_used_math == current)
    b2c0:	8b 15 0c eb 02 00    	mov    0x2eb0c,%edx
    b2c6:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b2cb:	39 c2                	cmp    %eax,%edx
    b2cd:	75 0a                	jne    b2d9 <do_exit+0x4ef>
		last_task_used_math = NULL;
    b2cf:	c7 05 0c eb 02 00 00 	movl   $0x0,0x2eb0c
    b2d6:	00 00 00 
#ifdef DEBUG_PROC_TREE
	audit_ptree();
    b2d9:	e8 3b f2 ff ff       	call   a519 <audit_ptree>
#endif
	schedule();
    b2de:	e8 62 bb ff ff       	call   6e45 <schedule>
}
    b2e3:	90                   	nop
    b2e4:	83 c4 24             	add    $0x24,%esp
    b2e7:	5b                   	pop    %ebx
    b2e8:	5e                   	pop    %esi
    b2e9:	c3                   	ret    

0000b2ea <sys_exit>:
// 系统调用exit()。终止进程。
// 参数error_code是用户程序提供的退出状态信息，只有低字节有效。把error_code左移8位是wait()或waitpid()函数的要求。
// 低字节中将用来保存wait()的状态信息。例如，如果进程处于暂停状态（TASK_STOPPED），那么其低字节就等于0x7f。参见
// sys/wait.h文件。wait()或waitpid()利用这些宏就可以取得子进程的退出状态码或子进程终止的原因（信号）。
int sys_exit(int error_code)
{
    b2ea:	83 ec 0c             	sub    $0xc,%esp
	do_exit((error_code & 0xff) << 8);
    b2ed:	8b 44 24 10          	mov    0x10(%esp),%eax
    b2f1:	c1 e0 08             	shl    $0x8,%eax
    b2f4:	0f b7 c0             	movzwl %ax,%eax
    b2f7:	83 ec 0c             	sub    $0xc,%esp
    b2fa:	50                   	push   %eax
    b2fb:	e8 ea fa ff ff       	call   adea <do_exit>
    b300:	83 c4 10             	add    $0x10,%esp
}
    b303:	90                   	nop
    b304:	83 c4 0c             	add    $0xc,%esp
    b307:	c3                   	ret    

0000b308 <sys_waitpid>:
// 若options = WUNTRACED，表示如果子进程是停止的，也马上返回（无须跟踪）。
// 若options = WNOHANG，表示如果没有子进程退出或终止就马上返回。
// 如果返回状态指针stat_addr不为空，则就将状态信息保存到那里。
// 参数pid是进程号；*stat_addr是保存状态信息位置的指针；options是waitpid选项。
int sys_waitpid(pid_t pid, unsigned long * stat_addr, int options)
{
    b308:	83 ec 1c             	sub    $0x1c,%esp
	int flag;               				// 该标志用于后面所选出的子进程处于就绪或睡眠态。
	struct task_struct *p;
	unsigned long oldblocked;

	// 首先验证将在存放状态信息的位置处内在空间足够。然后复位标志flag。接着从当前进程的最年轻子进程开始扫描子进程兄弟链表。
	verify_area(stat_addr, 4);
    b30b:	83 ec 08             	sub    $0x8,%esp
    b30e:	6a 04                	push   $0x4
    b310:	ff 74 24 30          	pushl  0x30(%esp)
    b314:	e8 8a d0 ff ff       	call   83a3 <verify_area>
    b319:	83 c4 10             	add    $0x10,%esp
repeat:
	flag = 0;
    b31c:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    b323:	00 
	for (p = current->p_cptr ; p ; p = p->p_osptr) {
    b324:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b329:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
    b32f:	89 44 24 08          	mov    %eax,0x8(%esp)
    b333:	e9 79 01 00 00       	jmp    b4b1 <sys_waitpid+0x1a9>
		// 如果等待的子进程号pid>0，但与被扫描子进程p的pid不相等，说明它是当前进程另外的子进程，于是跳过该进程，接着扫描下一
		// 个进程。
		if (pid > 0) {
    b338:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    b33d:	7e 15                	jle    b354 <sys_waitpid+0x4c>
			if (p->pid != pid)
    b33f:	8b 44 24 08          	mov    0x8(%esp),%eax
    b343:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    b349:	3b 44 24 20          	cmp    0x20(%esp),%eax
    b34d:	74 49                	je     b398 <sys_waitpid+0x90>
				continue;
    b34f:	e9 4f 01 00 00       	jmp    b4a3 <sys_waitpid+0x19b>
		// 否则，如果指定等待进程的pid=0，表示正在等待进程组号等于当前进程组号的任何子进程。如果此时被扫描进程p的进程组号与当前
		// 进程的组号不等，则跳过。
		} else if (!pid) {
    b354:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    b359:	75 1e                	jne    b379 <sys_waitpid+0x71>
			if (p->pgrp != current->pgrp)
    b35b:	8b 44 24 08          	mov    0x8(%esp),%eax
    b35f:	8b 90 30 02 00 00    	mov    0x230(%eax),%edx
    b365:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b36a:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    b370:	39 c2                	cmp    %eax,%edx
    b372:	74 24                	je     b398 <sys_waitpid+0x90>
				continue;
    b374:	e9 2a 01 00 00       	jmp    b4a3 <sys_waitpid+0x19b>
		// 否则，如果指定的pid<-1，表示正在等待进程组号等于pid绝对值的任何子进程。如果此时被扫描进程p的组号与pid的绝对值
		// 不等，则跳过。
		} else if (pid != -1) {
    b379:	83 7c 24 20 ff       	cmpl   $0xffffffff,0x20(%esp)
    b37e:	74 18                	je     b398 <sys_waitpid+0x90>
			if (p->pgrp != -pid)
    b380:	8b 44 24 08          	mov    0x8(%esp),%eax
    b384:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
    b38a:	8b 54 24 20          	mov    0x20(%esp),%edx
    b38e:	f7 da                	neg    %edx
    b390:	39 d0                	cmp    %edx,%eax
    b392:	0f 85 07 01 00 00    	jne    b49f <sys_waitpid+0x197>
		// pid等于-1）。接下来根据这个子进程p所处的状态来处理。
		// 当子进程p停止状态时，如果此时参数选项options中WUNTRACED标志没有置位，表示程序无须立刻返回，或者子进程此时的退出码等于
		// 0，于是继续扫描处理其他子进程。如果WUNTRACED置位且子进程退出码不为0,则把退出码移入高字节，同状态信息0x7f进行或运算后
		// 放入*stat_addr，在复位子进程退出码后立刻返回子进程号pid。这里0x7f表示的返回状态使WIFSTOPPED()宏为值。参见include/
		// sys/wait.h。
		switch (p->state) {
    b398:	8b 44 24 08          	mov    0x8(%esp),%eax
    b39c:	8b 00                	mov    (%eax),%eax
    b39e:	83 f8 03             	cmp    $0x3,%eax
    b3a1:	74 67                	je     b40a <sys_waitpid+0x102>
    b3a3:	83 f8 04             	cmp    $0x4,%eax
    b3a6:	0f 85 e9 00 00 00    	jne    b495 <sys_waitpid+0x18d>
			case TASK_STOPPED:
				if (!(options & WUNTRACED) ||
    b3ac:	8b 44 24 28          	mov    0x28(%esp),%eax
    b3b0:	83 e0 02             	and    $0x2,%eax
    b3b3:	85 c0                	test   %eax,%eax
    b3b5:	0f 84 e7 00 00 00    	je     b4a2 <sys_waitpid+0x19a>
				    !p->exit_code)
    b3bb:	8b 44 24 08          	mov    0x8(%esp),%eax
    b3bf:	8b 80 14 02 00 00    	mov    0x214(%eax),%eax
		// 0，于是继续扫描处理其他子进程。如果WUNTRACED置位且子进程退出码不为0,则把退出码移入高字节，同状态信息0x7f进行或运算后
		// 放入*stat_addr，在复位子进程退出码后立刻返回子进程号pid。这里0x7f表示的返回状态使WIFSTOPPED()宏为值。参见include/
		// sys/wait.h。
		switch (p->state) {
			case TASK_STOPPED:
				if (!(options & WUNTRACED) ||
    b3c5:	85 c0                	test   %eax,%eax
    b3c7:	0f 84 d5 00 00 00    	je     b4a2 <sys_waitpid+0x19a>
				    !p->exit_code)
					continue;
				put_fs_long((p->exit_code << 8) | 0x7f,
    b3cd:	8b 44 24 08          	mov    0x8(%esp),%eax
    b3d1:	8b 80 14 02 00 00    	mov    0x214(%eax),%eax
    b3d7:	c1 e0 08             	shl    $0x8,%eax
    b3da:	83 c8 7f             	or     $0x7f,%eax
    b3dd:	83 ec 08             	sub    $0x8,%esp
    b3e0:	ff 74 24 2c          	pushl  0x2c(%esp)
    b3e4:	50                   	push   %eax
    b3e5:	e8 d1 ef ff ff       	call   a3bb <put_fs_long>
    b3ea:	83 c4 10             	add    $0x10,%esp
					stat_addr);
				p->exit_code = 0;
    b3ed:	8b 44 24 08          	mov    0x8(%esp),%eax
    b3f1:	c7 80 14 02 00 00 00 	movl   $0x0,0x214(%eax)
    b3f8:	00 00 00 
				return p->pid;
    b3fb:	8b 44 24 08          	mov    0x8(%esp),%eax
    b3ff:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    b405:	e9 4a 01 00 00       	jmp    b554 <sys_waitpid+0x24c>
			// 如果子进程p处于僵死状态，则首先把它在用户态和内核态运行的时间分别累计到当前进程（父进程）中，然后取出子进程pid和退出码，
			// 把退出码放入返回状态位置stat_addr处并释放该子进程。最后返回子进程的退出码和pid。若定义了调试进程树符号，则调用进程树
			// 检测显示函数。
			case TASK_ZOMBIE:
				current->cutime += p->utime;
    b40a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b40f:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    b415:	8b 8a e8 02 00 00    	mov    0x2e8(%edx),%ecx
    b41b:	8b 54 24 08          	mov    0x8(%esp),%edx
    b41f:	8b 92 e0 02 00 00    	mov    0x2e0(%edx),%edx
    b425:	01 ca                	add    %ecx,%edx
    b427:	89 90 e8 02 00 00    	mov    %edx,0x2e8(%eax)
				current->cstime += p->stime;
    b42d:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b432:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    b438:	8b 8a ec 02 00 00    	mov    0x2ec(%edx),%ecx
    b43e:	8b 54 24 08          	mov    0x8(%esp),%edx
    b442:	8b 92 e4 02 00 00    	mov    0x2e4(%edx),%edx
    b448:	01 ca                	add    %ecx,%edx
    b44a:	89 90 ec 02 00 00    	mov    %edx,0x2ec(%eax)
				flag = p->pid;
    b450:	8b 44 24 08          	mov    0x8(%esp),%eax
    b454:	8b 80 2c 02 00 00    	mov    0x22c(%eax),%eax
    b45a:	89 44 24 0c          	mov    %eax,0xc(%esp)
				// Log(LOG_INFO_TYPE, "current_pid = %d, child_pid = %d, exit_code = %d\n", current->pid, p->pid, p->exit_code);
				put_fs_long(p->exit_code, stat_addr);
    b45e:	8b 44 24 08          	mov    0x8(%esp),%eax
    b462:	8b 80 14 02 00 00    	mov    0x214(%eax),%eax
    b468:	83 ec 08             	sub    $0x8,%esp
    b46b:	ff 74 24 2c          	pushl  0x2c(%esp)
    b46f:	50                   	push   %eax
    b470:	e8 46 ef ff ff       	call   a3bb <put_fs_long>
    b475:	83 c4 10             	add    $0x10,%esp
				release(p);
    b478:	83 ec 0c             	sub    $0xc,%esp
    b47b:	ff 74 24 14          	pushl  0x14(%esp)
    b47f:	e8 44 ef ff ff       	call   a3c8 <release>
    b484:	83 c4 10             	add    $0x10,%esp
#ifdef DEBUG_PROC_TREE
				audit_ptree();
    b487:	e8 8d f0 ff ff       	call   a519 <audit_ptree>
#endif
				return flag;
    b48c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    b490:	e9 bf 00 00 00       	jmp    b554 <sys_waitpid+0x24c>
			// 如果这个子进程p的状态即是不停止也不是僵死，那么就置flag = 1。表示找到过一个符合要求的子进程，但是它处于运行态或睡眠态。
			default:
				flag = 1;
    b495:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
    b49c:	00 
				continue;
    b49d:	eb 04                	jmp    b4a3 <sys_waitpid+0x19b>
				continue;
		// 否则，如果指定的pid<-1，表示正在等待进程组号等于pid绝对值的任何子进程。如果此时被扫描进程p的组号与pid的绝对值
		// 不等，则跳过。
		} else if (pid != -1) {
			if (p->pgrp != -pid)
				continue;
    b49f:	90                   	nop
    b4a0:	eb 01                	jmp    b4a3 <sys_waitpid+0x19b>
		// sys/wait.h。
		switch (p->state) {
			case TASK_STOPPED:
				if (!(options & WUNTRACED) ||
				    !p->exit_code)
					continue;
    b4a2:	90                   	nop

	// 首先验证将在存放状态信息的位置处内在空间足够。然后复位标志flag。接着从当前进程的最年轻子进程开始扫描子进程兄弟链表。
	verify_area(stat_addr, 4);
repeat:
	flag = 0;
	for (p = current->p_cptr ; p ; p = p->p_osptr) {
    b4a3:	8b 44 24 08          	mov    0x8(%esp),%eax
    b4a7:	8b 80 c8 02 00 00    	mov    0x2c8(%eax),%eax
    b4ad:	89 44 24 08          	mov    %eax,0x8(%esp)
    b4b1:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    b4b6:	0f 85 7c fe ff ff    	jne    b338 <sys_waitpid+0x30>
    }
	// 在上面对任务数组扫描结束后，如果flag被置位，说明了有符合等待要求的子进程并没有处于退出立刻或僵死状态。此时如果已设置
	// WNOHANG选项（表示若没有子进程处于退出或终止态就返回），就立刻返回0,退出。否则把当前进程置为可中断等待状态，保留并修改当前
	// 进程信号阻塞位图，允许其接收SIGCHLD信号。然后执行调度程序。当系统又开始执行本进程时，如果本进程收到除SIGCHLD以外的
	// 其他未屏蔽信号，则以退出码“重新启动系统调用”返回。否则跳转到函数开始处repeat标号处重重复处理。
	if (flag) {
    b4bc:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    b4c1:	0f 84 88 00 00 00    	je     b54f <sys_waitpid+0x247>
		if (options & WNOHANG)
    b4c7:	8b 44 24 28          	mov    0x28(%esp),%eax
    b4cb:	83 e0 01             	and    $0x1,%eax
    b4ce:	85 c0                	test   %eax,%eax
    b4d0:	74 07                	je     b4d9 <sys_waitpid+0x1d1>
			return 0;
    b4d2:	b8 00 00 00 00       	mov    $0x0,%eax
    b4d7:	eb 7b                	jmp    b554 <sys_waitpid+0x24c>
		current->state = TASK_INTERRUPTIBLE;
    b4d9:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b4de:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
		oldblocked = current->blocked;
    b4e4:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b4e9:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
    b4ef:	89 44 24 04          	mov    %eax,0x4(%esp)
		current->blocked &= ~(1 << (SIGCHLD - 1));
    b4f3:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b4f8:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    b4fe:	8b 92 10 02 00 00    	mov    0x210(%edx),%edx
    b504:	81 e2 ff ff fe ff    	and    $0xfffeffff,%edx
    b50a:	89 90 10 02 00 00    	mov    %edx,0x210(%eax)
		schedule();
    b510:	e8 30 b9 ff ff       	call   6e45 <schedule>
		current->blocked = oldblocked;
    b515:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b51a:	8b 54 24 04          	mov    0x4(%esp),%edx
    b51e:	89 90 10 02 00 00    	mov    %edx,0x210(%eax)
		if (current->signal & ~(current->blocked | (1 << (SIGCHLD - 1))))
    b524:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b529:	8b 50 0c             	mov    0xc(%eax),%edx
    b52c:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b531:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
    b537:	0d 00 00 01 00       	or     $0x10000,%eax
    b53c:	f7 d0                	not    %eax
    b53e:	21 d0                	and    %edx,%eax
    b540:	85 c0                	test   %eax,%eax
    b542:	0f 84 d4 fd ff ff    	je     b31c <sys_waitpid+0x14>
			return -ERESTARTSYS;
    b548:	b8 00 fe ff ff       	mov    $0xfffffe00,%eax
    b54d:	eb 05                	jmp    b554 <sys_waitpid+0x24c>
		else
			goto repeat;
	}
	// 若flag = 0，表示没有找到符合要求的子进程，则返回出错码（子进程不存在）。
	return -ECHILD;
    b54f:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
}
    b554:	83 c4 1c             	add    $0x1c,%esp
    b557:	c3                   	ret    

0000b558 <get_fs_byte>:
//// 读取fs段中指定地址处的字节.
// 参数:addr - 指定的内存地址.
// %0 - (返回的字节_v);%1 - (内存地址addr)
// 返回:返回内存fs[addr]处的字节.
static inline unsigned char get_fs_byte(const char * addr)
{
    b558:	53                   	push   %ebx
	unsigned register char _v;

	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
    b559:	8b 44 24 08          	mov    0x8(%esp),%eax
    b55d:	64 8a 00             	mov    %fs:(%eax),%al
    b560:	89 c3                	mov    %eax,%ebx
	return _v;
    b562:	89 d8                	mov    %ebx,%eax
}
    b564:	5b                   	pop    %ebx
    b565:	c3                   	ret    

0000b566 <put_fs_byte>:

//// 将一字节存放在fs段中指定内存地址处.
// 参数:val - 字节值;addr - 内存地址.
// %0 - 寄存器(字节值val);%1 - (内存地址addr).
static inline void put_fs_byte(char val,char *addr)
{
    b566:	83 ec 04             	sub    $0x4,%esp
    b569:	8b 44 24 08          	mov    0x8(%esp),%eax
    b56d:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
    b570:	0f b6 04 24          	movzbl (%esp),%eax
    b574:	8b 54 24 0c          	mov    0xc(%esp),%edx
    b578:	64 88 02             	mov    %al,%fs:(%edx)
}
    b57b:	90                   	nop
    b57c:	83 c4 04             	add    $0x4,%esp
    b57f:	c3                   	ret    

0000b580 <put_fs_long>:
//// 将一长字存放在fs段中指定内存地址处.
// 参数:val - 长字值;addr - 内存地址.
// %0 - 寄存器(长字值val);%1 - (内存地址addr).
static inline void put_fs_long(unsigned long val,unsigned long * addr)
{
__asm__ ("movl %0,%%fs:%1"::"q" (val),"m" (*addr));
    b580:	8b 44 24 04          	mov    0x4(%esp),%eax
    b584:	8b 54 24 08          	mov    0x8(%esp),%edx
    b588:	64 89 02             	mov    %eax,%fs:(%edx)
}
    b58b:	90                   	nop
    b58c:	c3                   	ret    

0000b58d <sys_sgetmask>:
#include <errno.h>

// 获取当前任务信号屏蔽位图（屏蔽码或阻塞码）。sgetmask可分解为signal-get-mask。以下类似。
int sys_sgetmask()
{
	return current->blocked;
    b58d:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b592:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
}
    b598:	c3                   	ret    

0000b599 <sys_ssetmask>:

// 设置新的信号屏蔽位图。信号SIGKILL和SIGSTOP不能被屏蔽。返回值是原信号屏蔽位图。
int sys_ssetmask(int newmask)
{
    b599:	83 ec 10             	sub    $0x10,%esp
	int old = current->blocked;
    b59c:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b5a1:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
    b5a7:	89 44 24 0c          	mov    %eax,0xc(%esp)

	current->blocked = newmask & ~(1 << (SIGKILL - 1)) & ~(1 << (SIGSTOP - 1));
    b5ab:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b5b0:	8b 54 24 14          	mov    0x14(%esp),%edx
    b5b4:	81 e2 ff fe fb ff    	and    $0xfffbfeff,%edx
    b5ba:	89 90 10 02 00 00    	mov    %edx,0x210(%eax)
	return old;
    b5c0:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    b5c4:	83 c4 10             	add    $0x10,%esp
    b5c7:	c3                   	ret    

0000b5c8 <sys_sigpending>:

// 检测并取得进程收到的但被屏蔽（阻塞）的信号。还未处理信号的位图将被放入set中。
int sys_sigpending(sigset_t *set)
{
    b5c8:	83 ec 0c             	sub    $0xc,%esp
    /* fill in "set" with signals pending but blocked. */
    /* 用还未处理并且被阻塞信号的位图填入set指针所指位置处 */
	// 首先验证进程提供的用户存储空间就有4个字节。然后把还未处理并且被阻塞信号的位图填入set指针所指位置处。
    verify_area(set, 4);
    b5cb:	83 ec 08             	sub    $0x8,%esp
    b5ce:	6a 04                	push   $0x4
    b5d0:	ff 74 24 1c          	pushl  0x1c(%esp)
    b5d4:	e8 ca cd ff ff       	call   83a3 <verify_area>
    b5d9:	83 c4 10             	add    $0x10,%esp
    put_fs_long(current->blocked & current->signal, (unsigned long *)set);
    b5dc:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b5e1:	8b 90 10 02 00 00    	mov    0x210(%eax),%edx
    b5e7:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b5ec:	8b 40 0c             	mov    0xc(%eax),%eax
    b5ef:	21 d0                	and    %edx,%eax
    b5f1:	83 ec 08             	sub    $0x8,%esp
    b5f4:	ff 74 24 18          	pushl  0x18(%esp)
    b5f8:	50                   	push   %eax
    b5f9:	e8 82 ff ff ff       	call   b580 <put_fs_long>
    b5fe:	83 c4 10             	add    $0x10,%esp
    return 0;
    b601:	b8 00 00 00 00       	mov    $0x0,%eax
}
    b606:	83 c4 0c             	add    $0xc,%esp
    b609:	c3                   	ret    

0000b60a <sys_sigsuspend>:
// 该系统调用临时把进程信号屏蔽码替换成参数中给定的set，然后挂起进程，直到收到一个信号为止。
// restart是一个被中断的系统调用重新启动标志。当第1次调用该系统调用时，这是0.并且在该函数中会把进程原来的阻塞码
// blocked保存起来（old_mask），并设置restart为非0值。因此当进程第2次调用该系统调用时，它就会恢复进程原来保存在
// old_mask中的阻塞码。
int sys_sigsuspend(int restart, unsigned long old_mask, unsigned long set)
{
    b60a:	83 ec 0c             	sub    $0xc,%esp
	// 相应的信号捕获函数。
    extern int sys_pause(void);

	// 如果restart标志不为0,表示重新让程序运行起来。于是恢复前面保存在old_mask中的原进程阻塞码。并返回码-EINTR（系统
	// 调用被信号中断）。
    if (restart) {
    b60d:	8b 44 24 10          	mov    0x10(%esp),%eax
    b611:	85 c0                	test   %eax,%eax
    b613:	74 16                	je     b62b <sys_sigsuspend+0x21>
			/* we're restarting */  /* 我们正在重新启动系统调用 */
			current->blocked = old_mask;
    b615:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b61a:	8b 54 24 14          	mov    0x14(%esp),%edx
    b61e:	89 90 10 02 00 00    	mov    %edx,0x210(%eax)
			return -EINTR;
    b624:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
    b629:	eb 30                	jmp    b65b <sys_sigsuspend+0x51>
	// 进程会去执行信号处理函数，然后本调用返回-ERESTARTNOINTR码退出。这个返回码说明在处理完信号后要求返回到本系统调用中继续
	// 运行，即本系统调用不会被中断。
    /* we're not restarting.  do the work */
    /* 我们不是重新运行，那么就干活吧 */
    //*(&restart) = 1;
	__asm__("movl $1, %0\n\t" \
    b62b:	c7 44 24 10 01 00 00 	movl   $0x1,0x10(%esp)
    b632:	00 
			: \
			:"m"(restart));
    //*(&old_mask) = current->blocked;
	__asm__("movl %%eax, %0\n\t" \
			: \
			:"m"(old_mask), "a"(current->blocked));
    b633:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b638:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
    //*(&restart) = 1;
	__asm__("movl $1, %0\n\t" \
			: \
			:"m"(restart));
    //*(&old_mask) = current->blocked;
	__asm__("movl %%eax, %0\n\t" \
    b63e:	89 44 24 14          	mov    %eax,0x14(%esp)
			: \
			:"m"(old_mask), "a"(current->blocked));
    current->blocked = set;
    b642:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b647:	8b 54 24 18          	mov    0x18(%esp),%edx
    b64b:	89 90 10 02 00 00    	mov    %edx,0x210(%eax)
    (void) sys_pause();			/* return after a signal arrives */
    b651:	e8 f0 b9 ff ff       	call   7046 <sys_pause>
    return -ERESTARTNOINTR;		/* handle the signal, and come back */
    b656:	b8 ff fd ff ff       	mov    $0xfffffdff,%eax
}
    b65b:	83 c4 0c             	add    $0xc,%esp
    b65e:	c3                   	ret    

0000b65f <save_old>:

// 复制sigaction数据到fs数据段to处。即从内核空间复制到用户（任务）数据段中。
static inline void save_old(char * from, char * to)
{
    b65f:	83 ec 1c             	sub    $0x1c,%esp
	int i;

	// 首先验证to处的内存空间是否足够大。然后把一个sigaction结构信息复制到fs段（用户）空间中。宏函数put_fs_byte()在
	// include/asm/segment.h中实现。
	verify_area(to, sizeof(struct sigaction));
    b662:	83 ec 08             	sub    $0x8,%esp
    b665:	6a 10                	push   $0x10
    b667:	ff 74 24 30          	pushl  0x30(%esp)
    b66b:	e8 33 cd ff ff       	call   83a3 <verify_area>
    b670:	83 c4 10             	add    $0x10,%esp
	for (i = 0 ; i < sizeof(struct sigaction) ; i++) {
    b673:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    b67a:	00 
    b67b:	eb 29                	jmp    b6a6 <save_old+0x47>
		put_fs_byte(*from, to);
    b67d:	8b 44 24 20          	mov    0x20(%esp),%eax
    b681:	0f b6 00             	movzbl (%eax),%eax
    b684:	0f be c0             	movsbl %al,%eax
    b687:	83 ec 08             	sub    $0x8,%esp
    b68a:	ff 74 24 2c          	pushl  0x2c(%esp)
    b68e:	50                   	push   %eax
    b68f:	e8 d2 fe ff ff       	call   b566 <put_fs_byte>
    b694:	83 c4 10             	add    $0x10,%esp
		from++;
    b697:	83 44 24 20 01       	addl   $0x1,0x20(%esp)
		to++;
    b69c:	83 44 24 24 01       	addl   $0x1,0x24(%esp)
	int i;

	// 首先验证to处的内存空间是否足够大。然后把一个sigaction结构信息复制到fs段（用户）空间中。宏函数put_fs_byte()在
	// include/asm/segment.h中实现。
	verify_area(to, sizeof(struct sigaction));
	for (i = 0 ; i < sizeof(struct sigaction) ; i++) {
    b6a1:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    b6a6:	8b 44 24 0c          	mov    0xc(%esp),%eax
    b6aa:	83 f8 0f             	cmp    $0xf,%eax
    b6ad:	76 ce                	jbe    b67d <save_old+0x1e>
		put_fs_byte(*from, to);
		from++;
		to++;
	}
}
    b6af:	90                   	nop
    b6b0:	83 c4 1c             	add    $0x1c,%esp
    b6b3:	c3                   	ret    

0000b6b4 <get_new>:

// 把sigaction数据从fs数据段from位置复制到to处。即从用户数据空间取到内核数据段中。
static inline void get_new(char * from, char * to)
{
    b6b4:	53                   	push   %ebx
    b6b5:	83 ec 10             	sub    $0x10,%esp
	int i;

	for (i = 0 ; i < sizeof(struct sigaction) ; i++)
    b6b8:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    b6bf:	00 
    b6c0:	eb 26                	jmp    b6e8 <get_new+0x34>
		*(to++) = get_fs_byte(from++);
    b6c2:	8b 5c 24 1c          	mov    0x1c(%esp),%ebx
    b6c6:	8d 43 01             	lea    0x1(%ebx),%eax
    b6c9:	89 44 24 1c          	mov    %eax,0x1c(%esp)
    b6cd:	8b 44 24 18          	mov    0x18(%esp),%eax
    b6d1:	8d 50 01             	lea    0x1(%eax),%edx
    b6d4:	89 54 24 18          	mov    %edx,0x18(%esp)
    b6d8:	50                   	push   %eax
    b6d9:	e8 7a fe ff ff       	call   b558 <get_fs_byte>
    b6de:	83 c4 04             	add    $0x4,%esp
    b6e1:	88 03                	mov    %al,(%ebx)
// 把sigaction数据从fs数据段from位置复制到to处。即从用户数据空间取到内核数据段中。
static inline void get_new(char * from, char * to)
{
	int i;

	for (i = 0 ; i < sizeof(struct sigaction) ; i++)
    b6e3:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    b6e8:	8b 44 24 0c          	mov    0xc(%esp),%eax
    b6ec:	83 f8 0f             	cmp    $0xf,%eax
    b6ef:	76 d1                	jbe    b6c2 <get_new+0xe>
		*(to++) = get_fs_byte(from++);
}
    b6f1:	90                   	nop
    b6f2:	83 c4 10             	add    $0x10,%esp
    b6f5:	5b                   	pop    %ebx
    b6f6:	c3                   	ret    

0000b6f7 <sys_signal>:
// 信号句柄可以是用户指定的函数，也可以是SIG_DFL（默认句柄）或SIG_IGN（忽略）。
// 参数signum -- 指定的信号； handler -- 指定的句柄； restorer -- 恢复函数指针，该函数由Libc库提供。用于在信号
// 处理程序结束后恢复系统调用返回时几个寄存器的原有值以及系统调用的返回值，就好像系统调用没有执行过信号处理程序而直接
// 返回到用户程序一样。函数返回原信号句柄。
int sys_signal(int signum, long handler, long restorer)
{
    b6f7:	83 ec 10             	sub    $0x10,%esp
	struct sigaction tmp;

	// 首先验证信号值在有效范围（1--32）内，并且不得是信号SIGKILL和SIGSTOP。因为这两个信号不能被进程捕获。
	if (signum < 1 || signum > 32 || signum == SIGKILL || signum == SIGSTOP)
    b6fa:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    b6ff:	7e 15                	jle    b716 <sys_signal+0x1f>
    b701:	83 7c 24 14 20       	cmpl   $0x20,0x14(%esp)
    b706:	7f 0e                	jg     b716 <sys_signal+0x1f>
    b708:	83 7c 24 14 09       	cmpl   $0x9,0x14(%esp)
    b70d:	74 07                	je     b716 <sys_signal+0x1f>
    b70f:	83 7c 24 14 13       	cmpl   $0x13,0x14(%esp)
    b714:	75 07                	jne    b71d <sys_signal+0x26>
		return -EINVAL;
    b716:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    b71b:	eb 6b                	jmp    b788 <sys_signal+0x91>
	// 然后根据提供的参数组建sigaction结构内容。sa_handler是指定的信号处理句柄（函数）。sa_mask是执行信号处理句柄时的
	// 信号屏蔽码。sa_flags是执行时的一些标志组合。这里设定该信号处理句柄只使用1次后就恢复到默认值，并允许信号在自己的处理
	// 句柄中收到。
	tmp.sa_handler = (void (*)(int)) handler;
    b71d:	8b 44 24 18          	mov    0x18(%esp),%eax
    b721:	89 04 24             	mov    %eax,(%esp)
	tmp.sa_mask = 0;
    b724:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
    b72b:	00 
	tmp.sa_flags = SA_ONESHOT | SA_NOMASK;
    b72c:	c7 44 24 08 00 00 00 	movl   $0xc0000000,0x8(%esp)
    b733:	c0 
	tmp.sa_restorer = (void (*)(void)) restorer;    				// 保存恢复处理函数指针。
    b734:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b738:	89 44 24 0c          	mov    %eax,0xc(%esp)
	// 接着取该信号原来的处理句柄，并设置该信号的sigaction结构。最后返回原信号句柄。
	handler = (long) current->sigaction[signum - 1].sa_handler;
    b73c:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b741:	8b 54 24 14          	mov    0x14(%esp),%edx
    b745:	83 ea 01             	sub    $0x1,%edx
    b748:	83 c2 01             	add    $0x1,%edx
    b74b:	c1 e2 04             	shl    $0x4,%edx
    b74e:	01 d0                	add    %edx,%eax
    b750:	8b 00                	mov    (%eax),%eax
    b752:	89 44 24 18          	mov    %eax,0x18(%esp)
	current->sigaction[signum - 1] = tmp;
    b756:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b75b:	8b 54 24 14          	mov    0x14(%esp),%edx
    b75f:	83 ea 01             	sub    $0x1,%edx
    b762:	83 c2 01             	add    $0x1,%edx
    b765:	c1 e2 04             	shl    $0x4,%edx
    b768:	01 d0                	add    %edx,%eax
    b76a:	8b 14 24             	mov    (%esp),%edx
    b76d:	89 10                	mov    %edx,(%eax)
    b76f:	8b 54 24 04          	mov    0x4(%esp),%edx
    b773:	89 50 04             	mov    %edx,0x4(%eax)
    b776:	8b 54 24 08          	mov    0x8(%esp),%edx
    b77a:	89 50 08             	mov    %edx,0x8(%eax)
    b77d:	8b 54 24 0c          	mov    0xc(%esp),%edx
    b781:	89 50 0c             	mov    %edx,0xc(%eax)
	return handler;
    b784:	8b 44 24 18          	mov    0x18(%esp),%eax
}
    b788:	83 c4 10             	add    $0x10,%esp
    b78b:	c3                   	ret    

0000b78c <sys_sigaction>:

// sigaction()系统调用。改变进程在收到一个信号时的操作。signum是除了SIGKILL以外的任何信号。[如果新操作（action）不为空]
// 则新操作被安装。如果oldaction指针不为空，则原操作被保留到oldaction。成功则返回0,否则为-EINVAL。
int sys_sigaction(int signum, const struct sigaction * action,
	struct sigaction * oldaction)
{
    b78c:	56                   	push   %esi
    b78d:	53                   	push   %ebx
    b78e:	83 ec 14             	sub    $0x14,%esp
	struct sigaction tmp;

	// 首先验证信号值在有效范围（1--32）内，并且不得是信号SIGKILL和SIGSTOP。因为这两个信号不能被进程捕获。
	if (signum < 1 || signum > 32 || signum == SIGKILL || signum == SIGSTOP)
    b791:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    b796:	7e 15                	jle    b7ad <sys_sigaction+0x21>
    b798:	83 7c 24 20 20       	cmpl   $0x20,0x20(%esp)
    b79d:	7f 0e                	jg     b7ad <sys_sigaction+0x21>
    b79f:	83 7c 24 20 09       	cmpl   $0x9,0x20(%esp)
    b7a4:	74 07                	je     b7ad <sys_sigaction+0x21>
    b7a6:	83 7c 24 20 13       	cmpl   $0x13,0x20(%esp)
    b7ab:	75 0a                	jne    b7b7 <sys_sigaction+0x2b>
		return -EINVAL;
    b7ad:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    b7b2:	e9 f7 00 00 00       	jmp    b8ae <sys_sigaction+0x122>
	// 在信号的sigaction结构中设置新的操作（动作）。如果oldaction指针不为空的话，则将原操作指针保存到oldaction所指的位置。
	tmp = current->sigaction[signum - 1];
    b7b7:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b7bc:	8b 54 24 20          	mov    0x20(%esp),%edx
    b7c0:	83 ea 01             	sub    $0x1,%edx
    b7c3:	83 c2 01             	add    $0x1,%edx
    b7c6:	c1 e2 04             	shl    $0x4,%edx
    b7c9:	01 d0                	add    %edx,%eax
    b7cb:	8b 10                	mov    (%eax),%edx
    b7cd:	89 14 24             	mov    %edx,(%esp)
    b7d0:	8b 50 04             	mov    0x4(%eax),%edx
    b7d3:	89 54 24 04          	mov    %edx,0x4(%esp)
    b7d7:	8b 50 08             	mov    0x8(%eax),%edx
    b7da:	89 54 24 08          	mov    %edx,0x8(%esp)
    b7de:	8b 40 0c             	mov    0xc(%eax),%eax
    b7e1:	89 44 24 0c          	mov    %eax,0xc(%esp)
	get_new((char *) action,
		(char *) (signum - 1 + current->sigaction));
    b7e5:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b7ea:	8d 50 10             	lea    0x10(%eax),%edx
    b7ed:	8b 44 24 20          	mov    0x20(%esp),%eax
	// 首先验证信号值在有效范围（1--32）内，并且不得是信号SIGKILL和SIGSTOP。因为这两个信号不能被进程捕获。
	if (signum < 1 || signum > 32 || signum == SIGKILL || signum == SIGSTOP)
		return -EINVAL;
	// 在信号的sigaction结构中设置新的操作（动作）。如果oldaction指针不为空的话，则将原操作指针保存到oldaction所指的位置。
	tmp = current->sigaction[signum - 1];
	get_new((char *) action,
    b7f1:	05 ff ff ff 0f       	add    $0xfffffff,%eax
    b7f6:	c1 e0 04             	shl    $0x4,%eax
    b7f9:	01 d0                	add    %edx,%eax
    b7fb:	50                   	push   %eax
    b7fc:	ff 74 24 28          	pushl  0x28(%esp)
    b800:	e8 af fe ff ff       	call   b6b4 <get_new>
    b805:	83 c4 08             	add    $0x8,%esp
		(char *) (signum - 1 + current->sigaction));
	if (oldaction)
    b808:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    b80d:	74 14                	je     b823 <sys_sigaction+0x97>
		save_old((char *) &tmp,(char *) oldaction);
    b80f:	83 ec 08             	sub    $0x8,%esp
    b812:	ff 74 24 30          	pushl  0x30(%esp)
    b816:	8d 44 24 0c          	lea    0xc(%esp),%eax
    b81a:	50                   	push   %eax
    b81b:	e8 3f fe ff ff       	call   b65f <save_old>
    b820:	83 c4 10             	add    $0x10,%esp
	// 如果允许信号在自己的信号句柄中收到，则令屏蔽码为0,否则设置屏蔽本信号。
	if (current->sigaction[signum - 1].sa_flags & SA_NOMASK)
    b823:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b828:	8b 54 24 20          	mov    0x20(%esp),%edx
    b82c:	83 ea 01             	sub    $0x1,%edx
    b82f:	83 c2 01             	add    $0x1,%edx
    b832:	c1 e2 04             	shl    $0x4,%edx
    b835:	01 d0                	add    %edx,%eax
    b837:	83 c0 08             	add    $0x8,%eax
    b83a:	8b 00                	mov    (%eax),%eax
    b83c:	25 00 00 00 40       	and    $0x40000000,%eax
    b841:	85 c0                	test   %eax,%eax
    b843:	74 1f                	je     b864 <sys_sigaction+0xd8>
		current->sigaction[signum - 1].sa_mask = 0;
    b845:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b84a:	8b 54 24 20          	mov    0x20(%esp),%edx
    b84e:	83 ea 01             	sub    $0x1,%edx
    b851:	83 c2 01             	add    $0x1,%edx
    b854:	c1 e2 04             	shl    $0x4,%edx
    b857:	01 d0                	add    %edx,%eax
    b859:	83 c0 04             	add    $0x4,%eax
    b85c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    b862:	eb 45                	jmp    b8a9 <sys_sigaction+0x11d>
	else
		current->sigaction[signum - 1].sa_mask |= (1 << (signum - 1));
    b864:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b869:	8b 54 24 20          	mov    0x20(%esp),%edx
    b86d:	8d 5a ff             	lea    -0x1(%edx),%ebx
    b870:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    b876:	8b 4c 24 20          	mov    0x20(%esp),%ecx
    b87a:	83 e9 01             	sub    $0x1,%ecx
    b87d:	83 c1 01             	add    $0x1,%ecx
    b880:	c1 e1 04             	shl    $0x4,%ecx
    b883:	01 ca                	add    %ecx,%edx
    b885:	83 c2 04             	add    $0x4,%edx
    b888:	8b 12                	mov    (%edx),%edx
    b88a:	8b 4c 24 20          	mov    0x20(%esp),%ecx
    b88e:	83 e9 01             	sub    $0x1,%ecx
    b891:	be 01 00 00 00       	mov    $0x1,%esi
    b896:	d3 e6                	shl    %cl,%esi
    b898:	89 f1                	mov    %esi,%ecx
    b89a:	09 ca                	or     %ecx,%edx
    b89c:	8d 4b 01             	lea    0x1(%ebx),%ecx
    b89f:	c1 e1 04             	shl    $0x4,%ecx
    b8a2:	01 c8                	add    %ecx,%eax
    b8a4:	83 c0 04             	add    $0x4,%eax
    b8a7:	89 10                	mov    %edx,(%eax)
	return 0;
    b8a9:	b8 00 00 00 00       	mov    $0x0,%eax
}
    b8ae:	83 c4 14             	add    $0x14,%esp
    b8b1:	5b                   	pop    %ebx
    b8b2:	5e                   	pop    %esi
    b8b3:	c3                   	ret    

0000b8b4 <core_dump>:
/*
 * 在当前目录中产生core dump映像文件的子程序。目前还没有实现。
 */
int core_dump(long signr)
{
	return(0);	/* We didn't do a dump */
    b8b4:	b8 00 00 00 00       	mov    $0x0,%eax
}
    b8b9:	c3                   	ret    

0000b8ba <do_signal>:
// 4、第124行压入栈中的当前处理的信号值（signr）。
int do_signal(long signr, long eax, long ebx, long ecx, long edx, long orig_eax,
	long fs, long es, long ds,
	long eip, long cs, long eflags,
	unsigned long * esp, long ss)
{
    b8ba:	83 ec 2c             	sub    $0x2c,%esp
	unsigned long sa_handler;
	long old_eip = eip;
    b8bd:	8b 44 24 54          	mov    0x54(%esp),%eax
    b8c1:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	struct sigaction * sa = current->sigaction + signr - 1;			// 得到对应信号的处理数据结构
    b8c5:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b8ca:	8d 50 10             	lea    0x10(%eax),%edx
    b8cd:	8b 44 24 30          	mov    0x30(%esp),%eax
    b8d1:	05 ff ff ff 0f       	add    $0xfffffff,%eax
    b8d6:	c1 e0 04             	shl    $0x4,%eax
    b8d9:	01 d0                	add    %edx,%eax
    b8db:	89 44 24 14          	mov    %eax,0x14(%esp)
	// 当前读数据但没有读到任何数据等情况下，进程收到了任何一个非阻塞的信号，则都会-ERESTARTSYS返回值返回。它表示进程可以被
	// 中断，但是在继续执行后会重新启动系统调用。返回码-ERESTARTNOINTR说明在处理完信号后要求返回到原系统调用中继续运行，即系统
	// 调用不会被中断。
	// 因此下面语句说明如果是在系统调用中调用的本函数，并且相应系统调用的返回码eax等于-ERESTARTSYS或-ERESTARTNOINTR时进行下面
	// 的处理（实际上还没有真正回到用户程序中）。
	if ((orig_eax != -1) &&
    b8df:	83 7c 24 44 ff       	cmpl   $0xffffffff,0x44(%esp)
    b8e4:	74 5e                	je     b944 <do_signal+0x8a>
	    ((eax == -ERESTARTSYS) || (eax == -ERESTARTNOINTR))) {
    b8e6:	8b 44 24 34          	mov    0x34(%esp),%eax
	// 当前读数据但没有读到任何数据等情况下，进程收到了任何一个非阻塞的信号，则都会-ERESTARTSYS返回值返回。它表示进程可以被
	// 中断，但是在继续执行后会重新启动系统调用。返回码-ERESTARTNOINTR说明在处理完信号后要求返回到原系统调用中继续运行，即系统
	// 调用不会被中断。
	// 因此下面语句说明如果是在系统调用中调用的本函数，并且相应系统调用的返回码eax等于-ERESTARTSYS或-ERESTARTNOINTR时进行下面
	// 的处理（实际上还没有真正回到用户程序中）。
	if ((orig_eax != -1) &&
    b8ea:	3d 00 fe ff ff       	cmp    $0xfffffe00,%eax
    b8ef:	74 0b                	je     b8fc <do_signal+0x42>
	    ((eax == -ERESTARTSYS) || (eax == -ERESTARTNOINTR))) {
    b8f1:	8b 44 24 34          	mov    0x34(%esp),%eax
    b8f5:	3d ff fd ff ff       	cmp    $0xfffffdff,%eax
    b8fa:	75 48                	jne    b944 <do_signal+0x8a>
		// 如果系统调用返回码是-ERESTARTSYS（重新启动系统调用），并且sigaction中含有标志SA_INTERRUPT（系统调用被信号中断后不重新
		// 启动系统调用）或者信号值小于SIGCONT或者信号值大于SIGTTOU（即信号不是SIGCONT、SIGSTOP、SIGTSTP、SIGTTIN或SIGTTOU），
		// 则修改系统调用的返回值为eax = -EINTR，即被信号中断的系统调用。
		if ((eax == -ERESTARTSYS) && ((sa->sa_flags & SA_INTERRUPT) ||
    b8fc:	8b 44 24 34          	mov    0x34(%esp),%eax
    b900:	3d 00 fe ff ff       	cmp    $0xfffffe00,%eax
    b905:	75 28                	jne    b92f <do_signal+0x75>
    b907:	8b 44 24 14          	mov    0x14(%esp),%eax
    b90b:	8b 40 08             	mov    0x8(%eax),%eax
    b90e:	25 00 00 00 20       	and    $0x20000000,%eax
    b913:	85 c0                	test   %eax,%eax
    b915:	75 0e                	jne    b925 <do_signal+0x6b>
    b917:	83 7c 24 30 11       	cmpl   $0x11,0x30(%esp)
    b91c:	7e 07                	jle    b925 <do_signal+0x6b>
		    signr < SIGCONT || signr > SIGTTOU))
    b91e:	83 7c 24 30 16       	cmpl   $0x16,0x30(%esp)
    b923:	7e 0a                	jle    b92f <do_signal+0x75>
			*(&eax) = -EINTR;
    b925:	c7 44 24 34 fc ff ff 	movl   $0xfffffffc,0x34(%esp)
    b92c:	ff 
    b92d:	eb 15                	jmp    b944 <do_signal+0x8a>
		// 否则就恢复进程寄存器eax在调用系统调用之前的值，并且把源程序指令指针回调2个字节。即当返回用户程序时，让程序重新启动执行被信号
		// 中断的系统调用。
		else {
			*(&eax) = orig_eax;     				// orig_eax系统调用号
    b92f:	8b 44 24 44          	mov    0x44(%esp),%eax
    b933:	89 44 24 34          	mov    %eax,0x34(%esp)
			//*(&eip) = old_eip -= 2;
			// 系统调用返回到用户态的时候再次执行本次系统调用
			old_eip -= 2;
    b937:	83 6c 24 1c 02       	subl   $0x2,0x1c(%esp)
			__asm__ ("movl %%eax, %0\n\t" \
    b93c:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    b940:	89 44 24 54          	mov    %eax,0x54(%esp)
					: \
					:"m"(eip), "a"(old_eip));
		}
	}
	// 如果信号句柄为SIG_IGN（1,默认忽略句柄）则不对信号进行处理而直接返回。
	sa_handler = (unsigned long) sa->sa_handler;
    b944:	8b 44 24 14          	mov    0x14(%esp),%eax
    b948:	8b 00                	mov    (%eax),%eax
    b94a:	89 44 24 10          	mov    %eax,0x10(%esp)
	if (sa_handler == 1)
    b94e:	83 7c 24 10 01       	cmpl   $0x1,0x10(%esp)
    b953:	75 0a                	jne    b95f <do_signal+0xa5>
		return(1);   								/* Ignore, see if there are more signals... */
    b955:	b8 01 00 00 00       	mov    $0x1,%eax
    b95a:	e9 4c 02 00 00       	jmp    bbab <do_signal+0x2f1>
	// 如果句柄为SIG_DFL（0,默认处理），则根据具体的信号进行分别处理。
	if (!sa_handler) {
    b95f:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
    b964:	0f 85 b3 00 00 00    	jne    ba1d <do_signal+0x163>
		switch (signr) {
    b96a:	8b 44 24 30          	mov    0x30(%esp),%eax
    b96e:	83 e8 03             	sub    $0x3,%eax
    b971:	83 f8 13             	cmp    $0x13,%eax
    b974:	0f 87 94 00 00 00    	ja     ba0e <do_signal+0x154>
    b97a:	8b 04 85 90 32 02 00 	mov    0x23290(,%eax,4),%eax
    b981:	ff e0                	jmp    *%eax
		// 如果信号是以下两个则也忽略之，并返回
		case SIGCONT:
		case SIGCHLD:
			return(1);  							/* Ignore, ... */
    b983:	b8 01 00 00 00       	mov    $0x1,%eax
    b988:	e9 1e 02 00 00       	jmp    bbab <do_signal+0x2f1>
		// 信号。
		case SIGSTOP:
		case SIGTSTP:
		case SIGTTIN:
		case SIGTTOU:
			current->state = TASK_STOPPED;
    b98d:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b992:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
			current->exit_code = signr;
    b998:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b99d:	8b 54 24 30          	mov    0x30(%esp),%edx
    b9a1:	89 90 14 02 00 00    	mov    %edx,0x214(%eax)
			if (!(current->p_pptr->sigaction[SIGCHLD - 1].sa_flags &
    b9a7:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b9ac:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    b9b2:	8b 80 18 01 00 00    	mov    0x118(%eax),%eax
    b9b8:	83 e0 01             	and    $0x1,%eax
    b9bb:	85 c0                	test   %eax,%eax
    b9bd:	75 23                	jne    b9e2 <do_signal+0x128>
					SA_NOCLDSTOP))
				current->p_pptr->signal |= (1 << (SIGCHLD - 1));
    b9bf:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    b9c4:	8b 80 bc 02 00 00    	mov    0x2bc(%eax),%eax
    b9ca:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    b9d0:	8b 92 bc 02 00 00    	mov    0x2bc(%edx),%edx
    b9d6:	8b 52 0c             	mov    0xc(%edx),%edx
    b9d9:	81 ca 00 00 01 00    	or     $0x10000,%edx
    b9df:	89 50 0c             	mov    %edx,0xc(%eax)
			return(1);  							/* Reschedule another event */
    b9e2:	b8 01 00 00 00       	mov    $0x1,%eax
    b9e7:	e9 bf 01 00 00       	jmp    bbab <do_signal+0x2f1>
		case SIGILL:
		case SIGTRAP:
		case SIGIOT:
		case SIGFPE:
		case SIGSEGV:
			if (core_dump(signr))
    b9ec:	ff 74 24 30          	pushl  0x30(%esp)
    b9f0:	e8 bf fe ff ff       	call   b8b4 <core_dump>
    b9f5:	83 c4 04             	add    $0x4,%esp
    b9f8:	85 c0                	test   %eax,%eax
    b9fa:	74 12                	je     ba0e <do_signal+0x154>
				do_exit(signr | 0x80);
    b9fc:	8b 44 24 30          	mov    0x30(%esp),%eax
    ba00:	0c 80                	or     $0x80,%al
    ba02:	83 ec 0c             	sub    $0xc,%esp
    ba05:	50                   	push   %eax
    ba06:	e8 df f3 ff ff       	call   adea <do_exit>
    ba0b:	83 c4 10             	add    $0x10,%esp
			/* fall through */
		default:
			do_exit(signr);
    ba0e:	83 ec 0c             	sub    $0xc,%esp
    ba11:	ff 74 24 3c          	pushl  0x3c(%esp)
    ba15:	e8 d0 f3 ff ff       	call   adea <do_exit>
    ba1a:	83 c4 10             	add    $0x10,%esp
	// 如果该信号句柄只需被调用一次，则将该句柄置空。注意，该信号句柄前面已经保存在sa_handler指针中。
	// 在系统调用进程内核时，用户程序返回地址（eip、cs）被保存在内核态栈中。下面这段代码修改内核态堆栈上用户调用时
	// 的代码指针eip为指向信号处理句柄，同时也将sa_restorer、signr、进程屏蔽码（如果SA_NOMASK没置位）、eax、
	// ecx、edx作为参数以及原调用系统调用的程序返回指针及标志寄存器值压入用户堆栈。因此在本次系统调用中断返回用户
	// 程序时会首先执行用户信号句柄程序，然后继续执行用户程序。
	if (sa->sa_flags & SA_ONESHOT)
    ba1d:	8b 44 24 14          	mov    0x14(%esp),%eax
    ba21:	8b 40 08             	mov    0x8(%eax),%eax
    ba24:	85 c0                	test   %eax,%eax
    ba26:	79 0a                	jns    ba32 <do_signal+0x178>
		sa->sa_handler = NULL;
    ba28:	8b 44 24 14          	mov    0x14(%esp),%eax
    ba2c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	// 调用者丢弃。这里之所以可以使用这种方式，是因为该函数是从汇编程序中被调用的，并且在函数返回后汇编程序并没有把
	// 调用do_signal()时的所有参数都丢弃。eip等仍然在堆栈中。
	// sigaction结构的sa_mask字段给出了在当前信号句柄（信号描述符）程序执行期间应该被屏蔽的信号集。同时，引起本
	// 信号句柄执行的信号也会被屏蔽。不过若sa_flags中使用了SA_NOMASK标志，那么引起本信号句柄执行的信号将不会被屏蔽
	// 掉。如果允许信号自己的处理句柄程序收到信号自己，则也需要将进程的信号阻塞码压入堆栈。
	*(&eip) = sa_handler;
    ba32:	8b 44 24 10          	mov    0x10(%esp),%eax
    ba36:	89 44 24 54          	mov    %eax,0x54(%esp)
	longs = (sa->sa_flags & SA_NOMASK)?7:8;
    ba3a:	8b 44 24 14          	mov    0x14(%esp),%eax
    ba3e:	8b 40 08             	mov    0x8(%eax),%eax
    ba41:	25 00 00 00 40       	and    $0x40000000,%eax
    ba46:	85 c0                	test   %eax,%eax
    ba48:	74 07                	je     ba51 <do_signal+0x197>
    ba4a:	b8 07 00 00 00       	mov    $0x7,%eax
    ba4f:	eb 05                	jmp    ba56 <do_signal+0x19c>
    ba51:	b8 08 00 00 00       	mov    $0x8,%eax
    ba56:	89 44 24 0c          	mov    %eax,0xc(%esp)
	// 将原调用程序的用户堆栈指针向下扩展7（或8）个长字（用来存放调用信号句柄的参数等），并检查内存使用情况（如内存超
	// 界则分配新页等）。
	//*(&esp) -= longs;
	__asm__("subl %1, %0\n\t" \
			: \
			:"m"(esp), "a"(longs * 4));
    ba5a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ba5e:	c1 e0 02             	shl    $0x2,%eax
	*(&eip) = sa_handler;
	longs = (sa->sa_flags & SA_NOMASK)?7:8;
	// 将原调用程序的用户堆栈指针向下扩展7（或8）个长字（用来存放调用信号句柄的参数等），并检查内存使用情况（如内存超
	// 界则分配新页等）。
	//*(&esp) -= longs;
	__asm__("subl %1, %0\n\t" \
    ba61:	29 44 24 60          	sub    %eax,0x60(%esp)
			: \
			:"m"(esp), "a"(longs * 4));
	verify_area(esp, longs * 4);
    ba65:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ba69:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    ba70:	8b 44 24 60          	mov    0x60(%esp),%eax
    ba74:	83 ec 08             	sub    $0x8,%esp
    ba77:	52                   	push   %edx
    ba78:	50                   	push   %eax
    ba79:	e8 25 c9 ff ff       	call   83a3 <verify_area>
    ba7e:	83 c4 10             	add    $0x10,%esp
	// 在用户堆栈中从下到上存放sa_restorer、信号signr、屏蔽码blocked（如果SA_NOMASK置位）、eax、ecx、edx、eflags
	// 和用户程序原代码指针。
	tmp_esp = esp;
    ba81:	8b 44 24 60          	mov    0x60(%esp),%eax
    ba85:	89 44 24 18          	mov    %eax,0x18(%esp)
	put_fs_long((long) sa->sa_restorer, tmp_esp++);
    ba89:	8b 44 24 18          	mov    0x18(%esp),%eax
    ba8d:	8d 50 04             	lea    0x4(%eax),%edx
    ba90:	89 54 24 18          	mov    %edx,0x18(%esp)
    ba94:	8b 54 24 14          	mov    0x14(%esp),%edx
    ba98:	8b 52 0c             	mov    0xc(%edx),%edx
    ba9b:	83 ec 08             	sub    $0x8,%esp
    ba9e:	50                   	push   %eax
    ba9f:	52                   	push   %edx
    baa0:	e8 db fa ff ff       	call   b580 <put_fs_long>
    baa5:	83 c4 10             	add    $0x10,%esp
	put_fs_long(signr, tmp_esp++);
    baa8:	8b 44 24 18          	mov    0x18(%esp),%eax
    baac:	8d 50 04             	lea    0x4(%eax),%edx
    baaf:	89 54 24 18          	mov    %edx,0x18(%esp)
    bab3:	8b 54 24 30          	mov    0x30(%esp),%edx
    bab7:	83 ec 08             	sub    $0x8,%esp
    baba:	50                   	push   %eax
    babb:	52                   	push   %edx
    babc:	e8 bf fa ff ff       	call   b580 <put_fs_long>
    bac1:	83 c4 10             	add    $0x10,%esp
	if (!(sa->sa_flags & SA_NOMASK))
    bac4:	8b 44 24 14          	mov    0x14(%esp),%eax
    bac8:	8b 40 08             	mov    0x8(%eax),%eax
    bacb:	25 00 00 00 40       	and    $0x40000000,%eax
    bad0:	85 c0                	test   %eax,%eax
    bad2:	75 24                	jne    baf8 <do_signal+0x23e>
		put_fs_long(current->blocked, tmp_esp++);
    bad4:	8b 44 24 18          	mov    0x18(%esp),%eax
    bad8:	8d 50 04             	lea    0x4(%eax),%edx
    badb:	89 54 24 18          	mov    %edx,0x18(%esp)
    badf:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    bae5:	8b 92 10 02 00 00    	mov    0x210(%edx),%edx
    baeb:	83 ec 08             	sub    $0x8,%esp
    baee:	50                   	push   %eax
    baef:	52                   	push   %edx
    baf0:	e8 8b fa ff ff       	call   b580 <put_fs_long>
    baf5:	83 c4 10             	add    $0x10,%esp
	put_fs_long(eax, tmp_esp++);
    baf8:	8b 44 24 18          	mov    0x18(%esp),%eax
    bafc:	8d 50 04             	lea    0x4(%eax),%edx
    baff:	89 54 24 18          	mov    %edx,0x18(%esp)
    bb03:	8b 54 24 34          	mov    0x34(%esp),%edx
    bb07:	83 ec 08             	sub    $0x8,%esp
    bb0a:	50                   	push   %eax
    bb0b:	52                   	push   %edx
    bb0c:	e8 6f fa ff ff       	call   b580 <put_fs_long>
    bb11:	83 c4 10             	add    $0x10,%esp
	put_fs_long(ecx, tmp_esp++);
    bb14:	8b 44 24 18          	mov    0x18(%esp),%eax
    bb18:	8d 50 04             	lea    0x4(%eax),%edx
    bb1b:	89 54 24 18          	mov    %edx,0x18(%esp)
    bb1f:	8b 54 24 3c          	mov    0x3c(%esp),%edx
    bb23:	83 ec 08             	sub    $0x8,%esp
    bb26:	50                   	push   %eax
    bb27:	52                   	push   %edx
    bb28:	e8 53 fa ff ff       	call   b580 <put_fs_long>
    bb2d:	83 c4 10             	add    $0x10,%esp
	put_fs_long(edx, tmp_esp++);
    bb30:	8b 44 24 18          	mov    0x18(%esp),%eax
    bb34:	8d 50 04             	lea    0x4(%eax),%edx
    bb37:	89 54 24 18          	mov    %edx,0x18(%esp)
    bb3b:	8b 54 24 40          	mov    0x40(%esp),%edx
    bb3f:	83 ec 08             	sub    $0x8,%esp
    bb42:	50                   	push   %eax
    bb43:	52                   	push   %edx
    bb44:	e8 37 fa ff ff       	call   b580 <put_fs_long>
    bb49:	83 c4 10             	add    $0x10,%esp
	put_fs_long(eflags, tmp_esp++);
    bb4c:	8b 44 24 18          	mov    0x18(%esp),%eax
    bb50:	8d 50 04             	lea    0x4(%eax),%edx
    bb53:	89 54 24 18          	mov    %edx,0x18(%esp)
    bb57:	8b 54 24 5c          	mov    0x5c(%esp),%edx
    bb5b:	83 ec 08             	sub    $0x8,%esp
    bb5e:	50                   	push   %eax
    bb5f:	52                   	push   %edx
    bb60:	e8 1b fa ff ff       	call   b580 <put_fs_long>
    bb65:	83 c4 10             	add    $0x10,%esp
	put_fs_long(old_eip, tmp_esp++);
    bb68:	8b 44 24 18          	mov    0x18(%esp),%eax
    bb6c:	8d 50 04             	lea    0x4(%eax),%edx
    bb6f:	89 54 24 18          	mov    %edx,0x18(%esp)
    bb73:	8b 54 24 1c          	mov    0x1c(%esp),%edx
    bb77:	83 ec 08             	sub    $0x8,%esp
    bb7a:	50                   	push   %eax
    bb7b:	52                   	push   %edx
    bb7c:	e8 ff f9 ff ff       	call   b580 <put_fs_long>
    bb81:	83 c4 10             	add    $0x10,%esp
	current->blocked |= sa->sa_mask;                // 进程阻塞码（屏蔽码）添上as_mask中的码。
    bb84:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    bb89:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    bb8f:	8b 92 10 02 00 00    	mov    0x210(%edx),%edx
    bb95:	89 d1                	mov    %edx,%ecx
    bb97:	8b 54 24 14          	mov    0x14(%esp),%edx
    bb9b:	8b 52 04             	mov    0x4(%edx),%edx
    bb9e:	09 ca                	or     %ecx,%edx
    bba0:	89 90 10 02 00 00    	mov    %edx,0x210(%eax)
	return(0);										/* Continue, execute handler */
    bba6:	b8 00 00 00 00       	mov    $0x0,%eax
}
    bbab:	83 c4 2c             	add    $0x2c,%esp
    bbae:	c3                   	ret    

0000bbaf <kernel_mktime>:
};

// 该函数计算从1970年1月1日0时起到开机当日经过的秒数,作为开机时间.
// 参数tm中各字段已经在init/main.c中被赋值,信息取自CMOS.
long kernel_mktime(struct tm * tm)
{
    bbaf:	83 ec 10             	sub    $0x10,%esp
	// if(tm->tm_year<70) tm->tm_year += 100;由于UNIX计年份y是从1970年算起.到1972年就是一个闰年,因此过3年(71,72,73)
	// 就是第1个闰年,这样从1970年开始的闰年数计算方法就应该是1+(y-3)/4,即为(y+1)/4.res=这些年经过的秒数时间+每个闰年时多1天
	// 的秒数时间+当年到当月时的秒数.另外,month[]数组中已经在2月份的天数中包含进了闰年时的天数,即2月份天数多算了1天.因此,若
	// 当年不是闰年并且当前月份大于2月份的话,我们就要减去这天.因为人70开始算起,所以当年是闰年的判断方法是(y+2)能被4除尽.若不能
	// 除尽(有余数)就不是闰年.
	if(tm->tm_year < 70) tm->tm_year += 100;				//处理2000年问题
    bbb2:	8b 44 24 14          	mov    0x14(%esp),%eax
    bbb6:	8b 40 14             	mov    0x14(%eax),%eax
    bbb9:	83 f8 45             	cmp    $0x45,%eax
    bbbc:	7f 11                	jg     bbcf <kernel_mktime+0x20>
    bbbe:	8b 44 24 14          	mov    0x14(%esp),%eax
    bbc2:	8b 40 14             	mov    0x14(%eax),%eax
    bbc5:	8d 50 64             	lea    0x64(%eax),%edx
    bbc8:	8b 44 24 14          	mov    0x14(%esp),%eax
    bbcc:	89 50 14             	mov    %edx,0x14(%eax)
	year = tm->tm_year - 70;
    bbcf:	8b 44 24 14          	mov    0x14(%esp),%eax
    bbd3:	8b 40 14             	mov    0x14(%eax),%eax
    bbd6:	83 e8 46             	sub    $0x46,%eax
    bbd9:	89 44 24 08          	mov    %eax,0x8(%esp)
	/* magic offsets (y+1) needed to get leapyears right.*/
	/* 为了获得正确的闰年数,这里需要这样一个魔幻值(y+1) */
	res = YEAR * year + DAY * ((year + 1) / 4);
    bbdd:	8b 44 24 08          	mov    0x8(%esp),%eax
    bbe1:	69 d0 80 33 e1 01    	imul   $0x1e13380,%eax,%edx
    bbe7:	8b 44 24 08          	mov    0x8(%esp),%eax
    bbeb:	83 c0 01             	add    $0x1,%eax
    bbee:	8d 48 03             	lea    0x3(%eax),%ecx
    bbf1:	85 c0                	test   %eax,%eax
    bbf3:	0f 48 c1             	cmovs  %ecx,%eax
    bbf6:	c1 f8 02             	sar    $0x2,%eax
    bbf9:	69 c0 80 51 01 00    	imul   $0x15180,%eax,%eax
    bbff:	01 d0                	add    %edx,%eax
    bc01:	89 44 24 0c          	mov    %eax,0xc(%esp)
	res += month[tm->tm_mon];
    bc05:	8b 44 24 14          	mov    0x14(%esp),%eax
    bc09:	8b 40 10             	mov    0x10(%eax),%eax
    bc0c:	8b 04 85 20 e3 02 00 	mov    0x2e320(,%eax,4),%eax
    bc13:	01 44 24 0c          	add    %eax,0xc(%esp)
	/* and (y+2) here. If it wasn't a leap-year, we have to adjust */
	/* 以及(y+2).如果(y+2)不是闰年,那么我们就必须进行调整(减去一天的秒数时间). */
	if (tm->tm_mon > 1 && ((year + 2) % 4))
    bc17:	8b 44 24 14          	mov    0x14(%esp),%eax
    bc1b:	8b 40 10             	mov    0x10(%eax),%eax
    bc1e:	83 f8 01             	cmp    $0x1,%eax
    bc21:	7e 16                	jle    bc39 <kernel_mktime+0x8a>
    bc23:	8b 44 24 08          	mov    0x8(%esp),%eax
    bc27:	83 c0 02             	add    $0x2,%eax
    bc2a:	83 e0 03             	and    $0x3,%eax
    bc2d:	85 c0                	test   %eax,%eax
    bc2f:	74 08                	je     bc39 <kernel_mktime+0x8a>
		res -= DAY;
    bc31:	81 6c 24 0c 80 51 01 	subl   $0x15180,0xc(%esp)
    bc38:	00 
	res += DAY * (tm->tm_mday - 1);							// 再加上本月过去的天数的秒数时间.
    bc39:	8b 44 24 14          	mov    0x14(%esp),%eax
    bc3d:	8b 40 0c             	mov    0xc(%eax),%eax
    bc40:	83 e8 01             	sub    $0x1,%eax
    bc43:	69 c0 80 51 01 00    	imul   $0x15180,%eax,%eax
    bc49:	01 44 24 0c          	add    %eax,0xc(%esp)
	res += HOUR * tm->tm_hour;								// 再加上当天过去的小时数的秒数时间.
    bc4d:	8b 44 24 14          	mov    0x14(%esp),%eax
    bc51:	8b 40 08             	mov    0x8(%eax),%eax
    bc54:	69 c0 10 0e 00 00    	imul   $0xe10,%eax,%eax
    bc5a:	01 44 24 0c          	add    %eax,0xc(%esp)
	res += MINUTE * tm->tm_min;								// 再加上1小时内过去的分钟数的秒数时间.
    bc5e:	8b 44 24 14          	mov    0x14(%esp),%eax
    bc62:	8b 40 04             	mov    0x4(%eax),%eax
    bc65:	c1 e0 02             	shl    $0x2,%eax
    bc68:	89 c2                	mov    %eax,%edx
    bc6a:	c1 e2 04             	shl    $0x4,%edx
    bc6d:	29 c2                	sub    %eax,%edx
    bc6f:	89 d0                	mov    %edx,%eax
    bc71:	01 44 24 0c          	add    %eax,0xc(%esp)
	res += tm->tm_sec;										// 再加上1分钟内已过的秒数.
    bc75:	8b 44 24 14          	mov    0x14(%esp),%eax
    bc79:	8b 00                	mov    (%eax),%eax
    bc7b:	01 44 24 0c          	add    %eax,0xc(%esp)
	return res;												// 即等于从1970年以来经过的秒数时间.
    bc7f:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    bc83:	83 c4 10             	add    $0x10,%esp
    bc86:	c3                   	ret    

0000bc87 <oom>:
void swap_in(unsigned long *table_ptr);                                             // 把页表项是table_ptr的一页物理内存换出到交换空间

// 下面函数名前关键字volatile用于告诉编译器gcc该函数不会返回.这样可让gcc产生更好的代码,更重要的是使用这个关键字可以避免产生某些(未
//　初始化变量的)假警告信息.
static inline void oom(void)
{
    bc87:	83 ec 0c             	sub    $0xc,%esp
	printk("out of memory\n\r");
    bc8a:	83 ec 0c             	sub    $0xc,%esp
    bc8d:	68 e0 32 02 00       	push   $0x232e0
    bc92:	e8 b0 cf ff ff       	call   8c47 <printk>
    bc97:	83 c4 10             	add    $0x10,%esp
    //　do_exit()应该使用退出代码,这里用了信息值SIGSEGV(11).相同值的出错码含义是"资源暂不可用",正好同义.
	do_exit(SIGSEGV);
    bc9a:	83 ec 0c             	sub    $0xc,%esp
    bc9d:	6a 0b                	push   $0xb
    bc9f:	e8 46 f1 ff ff       	call   adea <do_exit>
    bca4:	83 c4 10             	add    $0x10,%esp
}
    bca7:	90                   	nop
    bca8:	83 c4 0c             	add    $0xc,%esp
    bcab:	c3                   	ret    

0000bcac <free_page>:
 * 释放物理地址"addr"处的一页内存.用于函数free_page_tables().
 */
// 释放物理地址addr开始的1页面内存.
// 物理地址1MB以下的内存空间用于内核程序和缓冲,不作为分配页面的内存空间.因此参数addr需要大于1MB
void free_page(unsigned long addr)
{
    bcac:	83 ec 0c             	sub    $0xc,%esp
	// 首先判断参数给定的物理地址addr的合理性.如果物理地址addr小于内存低端(1MB),则表示在内核程序或高速缓冲中,对此不予处理.如果物理地址
	// addr >=系统所含物理内存最高端,则显示出错信息并且内核停止工作.
	if (addr < LOW_MEM) return;
    bcaf:	81 7c 24 10 ff ff 0f 	cmpl   $0xfffff,0x10(%esp)
    bcb6:	00 
    bcb7:	76 65                	jbe    bd1e <free_page+0x72>
	if (addr >= HIGH_MEMORY)
    bcb9:	a1 80 f2 02 00       	mov    0x2f280,%eax
    bcbe:	39 44 24 10          	cmp    %eax,0x10(%esp)
    bcc2:	72 10                	jb     bcd4 <free_page+0x28>
		panic("trying to free nonexistent page");
    bcc4:	83 ec 0c             	sub    $0xc,%esp
    bcc7:	68 f0 32 02 00       	push   $0x232f0
    bccc:	e8 37 cf ff ff       	call   8c08 <panic>
    bcd1:	83 c4 10             	add    $0x10,%esp
	// 如果对参数addr验证通过,那么就根据这个物理地址换算出内存低端开始计起的内存页面号.页面号 = (addr - LOW_MEME)/4096.可见页面号从0号
	// 开始计起.此时addr中存放着页面号.如果该页面号对应的页面映射字节不等于0,则减1返回.此时该映射字节值应该为0,表示页面已释放.如果对应页面原本就
	// 是0,表示该物理页面本来就是空闲的,说明内核代码出问题.于是显示出错信息并停机.
	addr -= LOW_MEM;
    bcd4:	81 6c 24 10 00 00 10 	subl   $0x100000,0x10(%esp)
    bcdb:	00 
	addr >>= 12;
    bcdc:	c1 6c 24 10 0c       	shrl   $0xc,0x10(%esp)
	if (mem_map[addr]--) return;
    bce1:	8b 44 24 10          	mov    0x10(%esp),%eax
    bce5:	05 a0 f2 02 00       	add    $0x2f2a0,%eax
    bcea:	0f b6 00             	movzbl (%eax),%eax
    bced:	8d 50 ff             	lea    -0x1(%eax),%edx
    bcf0:	8b 4c 24 10          	mov    0x10(%esp),%ecx
    bcf4:	81 c1 a0 f2 02 00    	add    $0x2f2a0,%ecx
    bcfa:	88 11                	mov    %dl,(%ecx)
    bcfc:	84 c0                	test   %al,%al
    bcfe:	75 21                	jne    bd21 <free_page+0x75>
	// 执行到此处表示要释放空闲的页面，则将该页面的引用次数重置为0
	mem_map[addr] = 0;
    bd00:	8b 44 24 10          	mov    0x10(%esp),%eax
    bd04:	05 a0 f2 02 00       	add    $0x2f2a0,%eax
    bd09:	c6 00 00             	movb   $0x0,(%eax)
	panic("trying to free free page");
    bd0c:	83 ec 0c             	sub    $0xc,%esp
    bd0f:	68 10 33 02 00       	push   $0x23310
    bd14:	e8 ef ce ff ff       	call   8c08 <panic>
    bd19:	83 c4 10             	add    $0x10,%esp
    bd1c:	eb 04                	jmp    bd22 <free_page+0x76>
// 物理地址1MB以下的内存空间用于内核程序和缓冲,不作为分配页面的内存空间.因此参数addr需要大于1MB
void free_page(unsigned long addr)
{
	// 首先判断参数给定的物理地址addr的合理性.如果物理地址addr小于内存低端(1MB),则表示在内核程序或高速缓冲中,对此不予处理.如果物理地址
	// addr >=系统所含物理内存最高端,则显示出错信息并且内核停止工作.
	if (addr < LOW_MEM) return;
    bd1e:	90                   	nop
    bd1f:	eb 01                	jmp    bd22 <free_page+0x76>
	// 如果对参数addr验证通过,那么就根据这个物理地址换算出内存低端开始计起的内存页面号.页面号 = (addr - LOW_MEME)/4096.可见页面号从0号
	// 开始计起.此时addr中存放着页面号.如果该页面号对应的页面映射字节不等于0,则减1返回.此时该映射字节值应该为0,表示页面已释放.如果对应页面原本就
	// 是0,表示该物理页面本来就是空闲的,说明内核代码出问题.于是显示出错信息并停机.
	addr -= LOW_MEM;
	addr >>= 12;
	if (mem_map[addr]--) return;
    bd21:	90                   	nop
	// 执行到此处表示要释放空闲的页面，则将该页面的引用次数重置为0
	mem_map[addr] = 0;
	panic("trying to free free page");
}
    bd22:	83 c4 0c             	add    $0xc,%esp
    bd25:	c3                   	ret    

0000bd26 <free_page_tables>:
// 页目录位于物理地址0开始处,共1024项,每项4字节,共占4KB.每个目录项指定一个页表.内核页表物理地址0x1000处开始(紧接着目录空间),
// 共4个页表.每个页表有1024项,每项4B.因此也占4KB(1页)内存.各进程(除了在内核代码中的进程0和1)的页表所占据的页面在进程被创建时由
// 内核为其在主内存区申请得到.每个页表项对应1页物理内存,因此一个页表最多可映射4MB的物理内存.
// 参数:from - 起始线性基地址;size - 释放的字节长度.
int free_page_tables(unsigned long from, unsigned long size)
{
    bd26:	83 ec 1c             	sub    $0x1c,%esp
	unsigned long *pg_table;
	unsigned long * dir, nr;

	// 首先检测参数from给出的线性基地址是否在4MB的边界处.因为该函数只能处理这种情况.若from = 0,则出错.说明试图释放内核和缓冲所占空间.
	if (from & 0x3fffff)
    bd29:	8b 44 24 20          	mov    0x20(%esp),%eax
    bd2d:	25 ff ff 3f 00       	and    $0x3fffff,%eax
    bd32:	85 c0                	test   %eax,%eax
    bd34:	74 10                	je     bd46 <free_page_tables+0x20>
		panic("free_page_tables called with wrong alignment");
    bd36:	83 ec 0c             	sub    $0xc,%esp
    bd39:	68 2c 33 02 00       	push   $0x2332c
    bd3e:	e8 c5 ce ff ff       	call   8c08 <panic>
    bd43:	83 c4 10             	add    $0x10,%esp
	if (!from)
    bd46:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    bd4b:	75 10                	jne    bd5d <free_page_tables+0x37>
		panic("Trying to free up swapper memory space");
    bd4d:	83 ec 0c             	sub    $0xc,%esp
    bd50:	68 5c 33 02 00       	push   $0x2335c
    bd55:	e8 ae ce ff ff       	call   8c08 <panic>
    bd5a:	83 c4 10             	add    $0x10,%esp
	// 然后计算参数size给出的长度所占的页目录数(4MB的进位整数倍),也即所占页表数.
	// 因为1个页表可管理4MB物理内存,所以这里用右移22位的方式把需要复制的内存长度值除以4MB.其中加上0x3fffff(即4MB-1)用于得到进位整数倍
	// 结果,即除操作若有余数则进1.例如,如果原size = 4.01MB,那么可得到结果size = 2.
	size = (size + 0x3fffff) >> 22;
    bd5d:	8b 44 24 24          	mov    0x24(%esp),%eax
    bd61:	05 ff ff 3f 00       	add    $0x3fffff,%eax
    bd66:	c1 e8 16             	shr    $0x16,%eax
    bd69:	89 44 24 24          	mov    %eax,0x24(%esp)
	// 接着计算给出的线性基地址对应的起始目录项, 对应的目录项号 = from >>22.因为每项点4字节,并且由于页目录表从物理地址0开始存放,
	// 因此实际目录项指针 = 目录项号<<2,也即(from >> 20),"与"上0xffc确保目录项指针范围有效.
	// dir表示起始的页目录项物理地址
	dir = (unsigned long *) ((from >> 20) & 0xffc); 			/* _pg_dir = 0 */
    bd6d:	8b 44 24 20          	mov    0x20(%esp),%eax
    bd71:	c1 e8 14             	shr    $0x14,%eax
    bd74:	25 fc 0f 00 00       	and    $0xffc,%eax
    bd79:	89 44 24 08          	mov    %eax,0x8(%esp)
	// 此时size是释放的页表个数,即页目录项数,而dir是起始目录项指针.现在开始循环操作页目录项,依次释放每个页表中的页表项.如果当前目录项无效(
	// P位=0),表示该目录项没有使用(对应的页表不存在),则继续处理下一个页表项.否则从目录项中取出页表地址pg_table,并对该页表中的1024个表项
	// 进行处理,释放有效页表(P位=1)对应的物理内存页面,或者从交换设备中释放无效页表项(P位=0)对应的页面,即释放交换设备中对应的内存页面(因为
	// 页面可能已经交换出去).然后把该页表项清零,并继续处理下一页表项.当一个页表所有表项都处理完毕就释放该页表自身占据的内存页面,并继续处理下
	// 一页目录项.最后刷新页变换高速缓冲,并返回0.
	for ( ; size-- > 0 ; dir++) {
    bd7d:	e9 b5 00 00 00       	jmp    be37 <free_page_tables+0x111>
		// 如果该目录项不存在页表项，则直接跳过该页表项
		if (!(1 & *dir))
    bd82:	8b 44 24 08          	mov    0x8(%esp),%eax
    bd86:	8b 00                	mov    (%eax),%eax
    bd88:	83 e0 01             	and    $0x1,%eax
    bd8b:	85 c0                	test   %eax,%eax
    bd8d:	0f 84 9e 00 00 00    	je     be31 <free_page_tables+0x10b>
			continue;
		pg_table = (unsigned long *) (0xfffff000 & *dir);		// 取页表地址.
    bd93:	8b 44 24 08          	mov    0x8(%esp),%eax
    bd97:	8b 00                	mov    (%eax),%eax
    bd99:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    bd9e:	89 44 24 0c          	mov    %eax,0xc(%esp)
		for (nr = 0 ; nr < 1024 ; nr++) {
    bda2:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
    bda9:	00 
    bdaa:	eb 58                	jmp    be04 <free_page_tables+0xde>
			if (*pg_table) {									// 若所指页表项内容不为0,则若该项有效,则释放对应面.
    bdac:	8b 44 24 0c          	mov    0xc(%esp),%eax
    bdb0:	8b 00                	mov    (%eax),%eax
    bdb2:	85 c0                	test   %eax,%eax
    bdb4:	74 44                	je     bdfa <free_page_tables+0xd4>
				if (1 & *pg_table)
    bdb6:	8b 44 24 0c          	mov    0xc(%esp),%eax
    bdba:	8b 00                	mov    (%eax),%eax
    bdbc:	83 e0 01             	and    $0x1,%eax
    bdbf:	85 c0                	test   %eax,%eax
    bdc1:	74 19                	je     bddc <free_page_tables+0xb6>
					free_page(0xfffff000 & *pg_table);
    bdc3:	8b 44 24 0c          	mov    0xc(%esp),%eax
    bdc7:	8b 00                	mov    (%eax),%eax
    bdc9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    bdce:	83 ec 0c             	sub    $0xc,%esp
    bdd1:	50                   	push   %eax
    bdd2:	e8 d5 fe ff ff       	call   bcac <free_page>
    bdd7:	83 c4 10             	add    $0x10,%esp
    bdda:	eb 14                	jmp    bdf0 <free_page_tables+0xca>
				else											// 否则释放交换设备中对应页.
					swap_free(*pg_table >> 1);
    bddc:	8b 44 24 0c          	mov    0xc(%esp),%eax
    bde0:	8b 00                	mov    (%eax),%eax
    bde2:	d1 e8                	shr    %eax
    bde4:	83 ec 0c             	sub    $0xc,%esp
    bde7:	50                   	push   %eax
    bde8:	e8 f6 0e 00 00       	call   cce3 <swap_free>
    bded:	83 c4 10             	add    $0x10,%esp
				*pg_table = 0;									// 该页表项内容清零.
    bdf0:	8b 44 24 0c          	mov    0xc(%esp),%eax
    bdf4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			}
			pg_table++;											//指向页表中下一项.
    bdfa:	83 44 24 0c 04       	addl   $0x4,0xc(%esp)
	for ( ; size-- > 0 ; dir++) {
		// 如果该目录项不存在页表项，则直接跳过该页表项
		if (!(1 & *dir))
			continue;
		pg_table = (unsigned long *) (0xfffff000 & *dir);		// 取页表地址.
		for (nr = 0 ; nr < 1024 ; nr++) {
    bdff:	83 44 24 04 01       	addl   $0x1,0x4(%esp)
    be04:	81 7c 24 04 ff 03 00 	cmpl   $0x3ff,0x4(%esp)
    be0b:	00 
    be0c:	76 9e                	jbe    bdac <free_page_tables+0x86>
					swap_free(*pg_table >> 1);
				*pg_table = 0;									// 该页表项内容清零.
			}
			pg_table++;											//指向页表中下一项.
		}
		free_page(0xfffff000 & *dir);							// 释放该页表所占内存页面.
    be0e:	8b 44 24 08          	mov    0x8(%esp),%eax
    be12:	8b 00                	mov    (%eax),%eax
    be14:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    be19:	83 ec 0c             	sub    $0xc,%esp
    be1c:	50                   	push   %eax
    be1d:	e8 8a fe ff ff       	call   bcac <free_page>
    be22:	83 c4 10             	add    $0x10,%esp
		*dir = 0;												// 对应页表的目录项清零.
    be25:	8b 44 24 08          	mov    0x8(%esp),%eax
    be29:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    be2f:	eb 01                	jmp    be32 <free_page_tables+0x10c>
	// 页面可能已经交换出去).然后把该页表项清零,并继续处理下一页表项.当一个页表所有表项都处理完毕就释放该页表自身占据的内存页面,并继续处理下
	// 一页目录项.最后刷新页变换高速缓冲,并返回0.
	for ( ; size-- > 0 ; dir++) {
		// 如果该目录项不存在页表项，则直接跳过该页表项
		if (!(1 & *dir))
			continue;
    be31:	90                   	nop
	// 此时size是释放的页表个数,即页目录项数,而dir是起始目录项指针.现在开始循环操作页目录项,依次释放每个页表中的页表项.如果当前目录项无效(
	// P位=0),表示该目录项没有使用(对应的页表不存在),则继续处理下一个页表项.否则从目录项中取出页表地址pg_table,并对该页表中的1024个表项
	// 进行处理,释放有效页表(P位=1)对应的物理内存页面,或者从交换设备中释放无效页表项(P位=0)对应的页面,即释放交换设备中对应的内存页面(因为
	// 页面可能已经交换出去).然后把该页表项清零,并继续处理下一页表项.当一个页表所有表项都处理完毕就释放该页表自身占据的内存页面,并继续处理下
	// 一页目录项.最后刷新页变换高速缓冲,并返回0.
	for ( ; size-- > 0 ; dir++) {
    be32:	83 44 24 08 04       	addl   $0x4,0x8(%esp)
    be37:	8b 44 24 24          	mov    0x24(%esp),%eax
    be3b:	8d 50 ff             	lea    -0x1(%eax),%edx
    be3e:	89 54 24 24          	mov    %edx,0x24(%esp)
    be42:	85 c0                	test   %eax,%eax
    be44:	0f 85 38 ff ff ff    	jne    bd82 <free_page_tables+0x5c>
			pg_table++;											//指向页表中下一项.
		}
		free_page(0xfffff000 & *dir);							// 释放该页表所占内存页面.
		*dir = 0;												// 对应页表的目录项清零.
	}
	invalidate();												// 刷新CPU页变换高速缓冲.
    be4a:	b8 00 00 00 00       	mov    $0x0,%eax
    be4f:	0f 22 d8             	mov    %eax,%cr3
	return 0;
    be52:	b8 00 00 00 00       	mov    $0x0,%eax
}
    be57:	83 c4 1c             	add    $0x1c,%esp
    be5a:	c3                   	ret    

0000be5b <copy_page_tables>:
// 复制指定线性地址和长度内存对应的页目录项和页表项,从而被复制的页目录和页表对应的原物理内存页面区被两套页表映射而共享使用.复制时,需申请
// 新页面来存放新页表,原物理内存区将被共享.此后两个进程(父进程和其子进程)将共享内存区,直到有一个进程执行写操作时,内核才会为写操作进程分配
// 新的内存页(写时复制机制).
// 参数from,to是线性地址,size是需要复制(共享)的内存长度,单位是字节.
int copy_page_tables(unsigned long from, unsigned long to, long size)
{
    be5b:	83 ec 2c             	sub    $0x2c,%esp
	unsigned long nr;

	// 首先检测参数给出的源地址from和目的地址to的有效性.源地址和目的地址都需要在4MB内存边界地址上.否则出错死机.作这样的要求是因为一个页表的
	// 1024项可管理4MB内存.源地址from和目的地址to只有满足这个要求才能保证从一个页表的第1项开始复制页表项,并且新页表最初所有项都是有效的.然后
	// 取得源地址和目的地址的起始目录项指针(from_dir和do_dir).再根据参数给出的长度size计算要复制的内存块占用的页表数(即目录项数)
	if ((from & 0x3fffff) || (to & 0x3fffff))
    be5e:	8b 44 24 30          	mov    0x30(%esp),%eax
    be62:	25 ff ff 3f 00       	and    $0x3fffff,%eax
    be67:	85 c0                	test   %eax,%eax
    be69:	75 0d                	jne    be78 <copy_page_tables+0x1d>
    be6b:	8b 44 24 34          	mov    0x34(%esp),%eax
    be6f:	25 ff ff 3f 00       	and    $0x3fffff,%eax
    be74:	85 c0                	test   %eax,%eax
    be76:	74 10                	je     be88 <copy_page_tables+0x2d>
		panic("copy_page_tables called with wrong alignment");
    be78:	83 ec 0c             	sub    $0xc,%esp
    be7b:	68 84 33 02 00       	push   $0x23384
    be80:	e8 83 cd ff ff       	call   8c08 <panic>
    be85:	83 c4 10             	add    $0x10,%esp
	from_dir = (unsigned long *) ((from >> 20) & 0xffc); 				/* _pg_dir = 0 */
    be88:	8b 44 24 30          	mov    0x30(%esp),%eax
    be8c:	c1 e8 14             	shr    $0x14,%eax
    be8f:	25 fc 0f 00 00       	and    $0xffc,%eax
    be94:	89 44 24 14          	mov    %eax,0x14(%esp)
	to_dir = (unsigned long *) ((to >> 20) & 0xffc);
    be98:	8b 44 24 34          	mov    0x34(%esp),%eax
    be9c:	c1 e8 14             	shr    $0x14,%eax
    be9f:	25 fc 0f 00 00       	and    $0xffc,%eax
    bea4:	89 44 24 10          	mov    %eax,0x10(%esp)
	size = ((unsigned) (size + 0x3fffff)) >> 22;
    bea8:	8b 44 24 38          	mov    0x38(%esp),%eax
    beac:	05 ff ff 3f 00       	add    $0x3fffff,%eax
    beb1:	c1 e8 16             	shr    $0x16,%eax
    beb4:	89 44 24 38          	mov    %eax,0x38(%esp)
	// 在得到了源起始目录项指针from_dir和目的起始目录项指针to_dir以及需要复制的页表个数size后,下面开始对每个页目录项依次申请1页内存来保存对应的面表,
	// 并且开始页表项复制操作.如果目的目录项指定的页表已经存在(P=1),则出错死机.如果源目录项无效,即指定的页表不存在(P=0),则继续循环处理下一个页目录项.
	for( ; size-- > 0 ; from_dir++, to_dir++) {
    beb8:	e9 6c 01 00 00       	jmp    c029 <copy_page_tables+0x1ce>
		if (1 & *to_dir)
    bebd:	8b 44 24 10          	mov    0x10(%esp),%eax
    bec1:	8b 00                	mov    (%eax),%eax
    bec3:	83 e0 01             	and    $0x1,%eax
    bec6:	85 c0                	test   %eax,%eax
    bec8:	74 10                	je     beda <copy_page_tables+0x7f>
			panic("copy_page_tables: already exist");
    beca:	83 ec 0c             	sub    $0xc,%esp
    becd:	68 b4 33 02 00       	push   $0x233b4
    bed2:	e8 31 cd ff ff       	call   8c08 <panic>
    bed7:	83 c4 10             	add    $0x10,%esp
		if (!(1 & *from_dir))
    beda:	8b 44 24 14          	mov    0x14(%esp),%eax
    bede:	8b 00                	mov    (%eax),%eax
    bee0:	83 e0 01             	and    $0x1,%eax
    bee3:	85 c0                	test   %eax,%eax
    bee5:	0f 84 33 01 00 00    	je     c01e <copy_page_tables+0x1c3>
			continue;
		// 在验证了当前源目录项和目的项正常之后,取源目录项中页表地址from_page_table.为了保存目的目录项对应的页表,需要在主内存区中申请1页空闲内存页.如果取
		// 空闲页面函数get_free_page()返回0,则说明没有申请到空闲内存页面,可能是内存不够.于是返回-1值退出.
		from_page_table = (unsigned long *) (0xfffff000 & *from_dir);
    beeb:	8b 44 24 14          	mov    0x14(%esp),%eax
    beef:	8b 00                	mov    (%eax),%eax
    bef1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    bef6:	89 44 24 1c          	mov    %eax,0x1c(%esp)
		if (!(to_page_table = (unsigned long *) get_free_page()))
    befa:	e8 3c 11 00 00       	call   d03b <get_free_page>
    beff:	89 44 24 18          	mov    %eax,0x18(%esp)
    bf03:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
    bf08:	75 0a                	jne    bf14 <copy_page_tables+0xb9>
			return -1;													/* Out of memory, see freeing */
    bf0a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    bf0f:	e9 35 01 00 00       	jmp    c049 <copy_page_tables+0x1ee>
		// 否则我们设置目的目录项信息,把最后3位置位,即当前目的目录项"或"上7,表示对应页表映射的内存页面是用户级的,并且可读写,存在(User,R/W,Present).(如果
		// U/S位是0,则R/W就没有作用.如果U/S是1,而R/W是0,那么运行在用户层的代码就只能读页面.如果U/S和R/W都置位,则就有读写的权限).
		*to_dir = ((unsigned long) to_page_table) | 7;
    bf14:	8b 44 24 18          	mov    0x18(%esp),%eax
    bf18:	83 c8 07             	or     $0x7,%eax
    bf1b:	89 c2                	mov    %eax,%edx
    bf1d:	8b 44 24 10          	mov    0x10(%esp),%eax
    bf21:	89 10                	mov    %edx,(%eax)
		// 然后针对当前处理的页目录项对应的页表,设置需要复制的页面项数.如果是在内核空间,则仅需复制头160页对应的页表项(nr = 160),
		// 对应于开始640KB物理内存.否则需要复制一个页表中的所有1024个页表项(nr= 1024),可映射4MB物理内存.
		nr = (from == 0) ? 0xA0 : 1024;
    bf23:	83 7c 24 30 00       	cmpl   $0x0,0x30(%esp)
    bf28:	75 07                	jne    bf31 <copy_page_tables+0xd6>
    bf2a:	b8 a0 00 00 00       	mov    $0xa0,%eax
    bf2f:	eb 05                	jmp    bf36 <copy_page_tables+0xdb>
    bf31:	b8 00 04 00 00       	mov    $0x400,%eax
    bf36:	89 44 24 0c          	mov    %eax,0xc(%esp)
		// 此时对于当前页表,开始循环复制指定的nr个内存页面表项.先取出源页表项内容,如果当前源页面没有使用(项内容为0),则不用复制该表项,继续处理下一项.
		for ( ; nr-- > 0 ; from_page_table++, to_page_table++) {
    bf3a:	e9 ca 00 00 00       	jmp    c009 <copy_page_tables+0x1ae>
			this_page = *from_page_table;
    bf3f:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    bf43:	8b 00                	mov    (%eax),%eax
    bf45:	89 44 24 08          	mov    %eax,0x8(%esp)
			// 如果源页表不存在，则直接拷贝下一页表
			if (!this_page)
    bf49:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    bf4e:	0f 84 aa 00 00 00    	je     bffe <copy_page_tables+0x1a3>
				continue;
			// 如果该表项有内容,但是其存在位P=0,则该表项对应的页面可能在交换设备中.于是先申请1页内存,并从交换设备中读入该页面(若交换设备中有的话).然后将该页表项复制到
			// 目的页表项中.并修改源页表项内容指向该新申请的内存页.
			if (!(1 & this_page)) {
    bf54:	8b 44 24 08          	mov    0x8(%esp),%eax
    bf58:	83 e0 01             	and    $0x1,%eax
    bf5b:	85 c0                	test   %eax,%eax
    bf5d:	75 53                	jne    bfb2 <copy_page_tables+0x157>
				// 申请一页新的内存然后将交换设备中的数据读取到该页面中
				if (!(new_page = get_free_page()))
    bf5f:	e8 d7 10 00 00       	call   d03b <get_free_page>
    bf64:	89 44 24 04          	mov    %eax,0x4(%esp)
    bf68:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    bf6d:	75 0a                	jne    bf79 <copy_page_tables+0x11e>
					return -1;
    bf6f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    bf74:	e9 d0 00 00 00       	jmp    c049 <copy_page_tables+0x1ee>
				// 从交换设备中将页面读取出来
				read_swap_page(this_page >> 1, (char *) new_page);
    bf79:	8b 54 24 04          	mov    0x4(%esp),%edx
    bf7d:	8b 44 24 08          	mov    0x8(%esp),%eax
    bf81:	d1 e8                	shr    %eax
    bf83:	89 c1                	mov    %eax,%ecx
    bf85:	a1 a0 01 03 00       	mov    0x301a0,%eax
    bf8a:	52                   	push   %edx
    bf8b:	51                   	push   %ecx
    bf8c:	50                   	push   %eax
    bf8d:	6a 00                	push   $0x0
    bf8f:	e8 42 a8 00 00       	call   167d6 <ll_rw_page>
    bf94:	83 c4 10             	add    $0x10,%esp
				// 目的页表项指向源页表项值
				*to_page_table = this_page;
    bf97:	8b 44 24 18          	mov    0x18(%esp),%eax
    bf9b:	8b 54 24 08          	mov    0x8(%esp),%edx
    bf9f:	89 10                	mov    %edx,(%eax)
				// 并修改源页表项内容指向该新申请的内存页,并设置表项标志为"页面脏"加上7
				*from_page_table = new_page | (PAGE_DIRTY | 7);
    bfa1:	8b 44 24 04          	mov    0x4(%esp),%eax
    bfa5:	83 c8 47             	or     $0x47,%eax
    bfa8:	89 c2                	mov    %eax,%edx
    bfaa:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    bfae:	89 10                	mov    %edx,(%eax)
				// 继续处理下一页表项
				continue;
    bfb0:	eb 4d                	jmp    bfff <copy_page_tables+0x1a4>
			}
			// 复位页表项中R/W标志(位1置0),即让页表项对应的内存页面只读,然后将该页表项复制到目的页表中
			this_page &= ~2;
    bfb2:	83 64 24 08 fd       	andl   $0xfffffffd,0x8(%esp)
			*to_page_table = this_page;
    bfb7:	8b 44 24 18          	mov    0x18(%esp),%eax
    bfbb:	8b 54 24 08          	mov    0x8(%esp),%edx
    bfbf:	89 10                	mov    %edx,(%eax)
			// 的页面,说明是内核页面,因此不需要对mem_map[]进行设置.因为mem_map[]仅用于管理主内存区中的页面使用请问.因此对于内核移动到任务0中并且调用fork()创建任务1时
			// (用于运行init()),由于此时复制的页面还仍然都在内核代码区域,因此以下判断中的语句不会执行,任务0的页面仍然可以随时读写.只有当调用fork()的父进程代码处于主内存
			// (页面位置大于1MB)时才会执行.这种情况需要在进程调用execve(),并装载执行了新程序代码时才会出现.
			// 157行语句含义是令源页表项所指内存页也为只读.因为现在开始已有两个进程共用内存区了.若其中1个进程需要进行操作,则可以通过页异常写保护处理为执行写操作的进程分配
			// 1页新空闲页面,也即进行写时复制(copy_on_write)操作.
			if (this_page > LOW_MEM) {
    bfc1:	81 7c 24 08 00 00 10 	cmpl   $0x100000,0x8(%esp)
    bfc8:	00 
    bfc9:	76 34                	jbe    bfff <copy_page_tables+0x1a4>
				*from_page_table = this_page;		// 令源页表项也只读.
    bfcb:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    bfcf:	8b 54 24 08          	mov    0x8(%esp),%edx
    bfd3:	89 10                	mov    %edx,(%eax)
				this_page -= LOW_MEM;
    bfd5:	81 6c 24 08 00 00 10 	subl   $0x100000,0x8(%esp)
    bfdc:	00 
				this_page >>= 12;
    bfdd:	c1 6c 24 08 0c       	shrl   $0xc,0x8(%esp)
				mem_map[this_page]++;
    bfe2:	8b 44 24 08          	mov    0x8(%esp),%eax
    bfe6:	05 a0 f2 02 00       	add    $0x2f2a0,%eax
    bfeb:	0f b6 00             	movzbl (%eax),%eax
    bfee:	8d 50 01             	lea    0x1(%eax),%edx
    bff1:	8b 44 24 08          	mov    0x8(%esp),%eax
    bff5:	05 a0 f2 02 00       	add    $0x2f2a0,%eax
    bffa:	88 10                	mov    %dl,(%eax)
    bffc:	eb 01                	jmp    bfff <copy_page_tables+0x1a4>
		// 此时对于当前页表,开始循环复制指定的nr个内存页面表项.先取出源页表项内容,如果当前源页面没有使用(项内容为0),则不用复制该表项,继续处理下一项.
		for ( ; nr-- > 0 ; from_page_table++, to_page_table++) {
			this_page = *from_page_table;
			// 如果源页表不存在，则直接拷贝下一页表
			if (!this_page)
				continue;
    bffe:	90                   	nop
		*to_dir = ((unsigned long) to_page_table) | 7;
		// 然后针对当前处理的页目录项对应的页表,设置需要复制的页面项数.如果是在内核空间,则仅需复制头160页对应的页表项(nr = 160),
		// 对应于开始640KB物理内存.否则需要复制一个页表中的所有1024个页表项(nr= 1024),可映射4MB物理内存.
		nr = (from == 0) ? 0xA0 : 1024;
		// 此时对于当前页表,开始循环复制指定的nr个内存页面表项.先取出源页表项内容,如果当前源页面没有使用(项内容为0),则不用复制该表项,继续处理下一项.
		for ( ; nr-- > 0 ; from_page_table++, to_page_table++) {
    bfff:	83 44 24 1c 04       	addl   $0x4,0x1c(%esp)
    c004:	83 44 24 18 04       	addl   $0x4,0x18(%esp)
    c009:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c00d:	8d 50 ff             	lea    -0x1(%eax),%edx
    c010:	89 54 24 0c          	mov    %edx,0xc(%esp)
    c014:	85 c0                	test   %eax,%eax
    c016:	0f 85 23 ff ff ff    	jne    bf3f <copy_page_tables+0xe4>
    c01c:	eb 01                	jmp    c01f <copy_page_tables+0x1c4>
	// 并且开始页表项复制操作.如果目的目录项指定的页表已经存在(P=1),则出错死机.如果源目录项无效,即指定的页表不存在(P=0),则继续循环处理下一个页目录项.
	for( ; size-- > 0 ; from_dir++, to_dir++) {
		if (1 & *to_dir)
			panic("copy_page_tables: already exist");
		if (!(1 & *from_dir))
			continue;
    c01e:	90                   	nop
	from_dir = (unsigned long *) ((from >> 20) & 0xffc); 				/* _pg_dir = 0 */
	to_dir = (unsigned long *) ((to >> 20) & 0xffc);
	size = ((unsigned) (size + 0x3fffff)) >> 22;
	// 在得到了源起始目录项指针from_dir和目的起始目录项指针to_dir以及需要复制的页表个数size后,下面开始对每个页目录项依次申请1页内存来保存对应的面表,
	// 并且开始页表项复制操作.如果目的目录项指定的页表已经存在(P=1),则出错死机.如果源目录项无效,即指定的页表不存在(P=0),则继续循环处理下一个页目录项.
	for( ; size-- > 0 ; from_dir++, to_dir++) {
    c01f:	83 44 24 14 04       	addl   $0x4,0x14(%esp)
    c024:	83 44 24 10 04       	addl   $0x4,0x10(%esp)
    c029:	8b 44 24 38          	mov    0x38(%esp),%eax
    c02d:	8d 50 ff             	lea    -0x1(%eax),%edx
    c030:	89 54 24 38          	mov    %edx,0x38(%esp)
    c034:	85 c0                	test   %eax,%eax
    c036:	0f 8f 81 fe ff ff    	jg     bebd <copy_page_tables+0x62>
				this_page >>= 12;
				mem_map[this_page]++;
			}
        }
    }
	invalidate();									// 刷新页变换高速缓冲.
    c03c:	b8 00 00 00 00       	mov    $0x0,%eax
    c041:	0f 22 d8             	mov    %eax,%cr3
	return 0;
    c044:	b8 00 00 00 00       	mov    $0x0,%eax
}
    c049:	83 c4 2c             	add    $0x2c,%esp
    c04c:	c3                   	ret    

0000c04d <put_page>:
// 或者说是把线性地址空间中指定地址address处的页面映射到主内存区页面page上.主要工作是在相关页目录项和页表项中设置指定页面的信息.若成功则返回物理页面地址.
// 在处理缺页异常的C函数do_no_page()中会调用此函数.对于缺页引起的异常,由于任何缺页缘故而对页表作修改时,并不需要刷新CPU的页变换缓冲(或称Translation Lookaside
// Buffer,TLB),即使页表项中标志P被从0修改成1.因为无效页项不会被缓冲,因此当修改了一个无效的页表项时不需要刷新.在此就表现为不用调用Invalidate()函数.
// 参数page是分配的主内存区中某一页面(页帧,页框)的指针;address是线性地址.
static unsigned long put_page(unsigned long page, unsigned long address)
{
    c04d:	83 ec 1c             	sub    $0x1c,%esp
	/* 注意!!!这里使用了页目录表基地址pg_dir=0的条件 */

	// 首先判断参数给定物理内存页面page的有效性.如果该页面位置低于LOW_MEM(1MB)或超出系统实际含有内存高端HIGH_MEMORY,则发出警告.LOW_MEM是主内存区可能有的
	// 最小起始位置.当系统后果内存小于或等于6MB时,主内存区始于LOW_MEM处.再查看一下该page页面是不已经申请的页面,即判断其在内存页面映射字节图mem_map[]中相应
	// 字节是否以置位.若没有则需发出警告.
	if (page < LOW_MEM || page >= HIGH_MEMORY)
    c050:	81 7c 24 20 ff ff 0f 	cmpl   $0xfffff,0x20(%esp)
    c057:	00 
    c058:	76 0b                	jbe    c065 <put_page+0x18>
    c05a:	a1 80 f2 02 00       	mov    0x2f280,%eax
    c05f:	39 44 24 20          	cmp    %eax,0x20(%esp)
    c063:	72 18                	jb     c07d <put_page+0x30>
		printk("Trying to put page %p at %p\n", page, address);
    c065:	83 ec 04             	sub    $0x4,%esp
    c068:	ff 74 24 28          	pushl  0x28(%esp)
    c06c:	ff 74 24 28          	pushl  0x28(%esp)
    c070:	68 d4 33 02 00       	push   $0x233d4
    c075:	e8 cd cb ff ff       	call   8c47 <printk>
    c07a:	83 c4 10             	add    $0x10,%esp
	if (mem_map[(page - LOW_MEM) >> 12] != 1)
    c07d:	8b 44 24 20          	mov    0x20(%esp),%eax
    c081:	2d 00 00 10 00       	sub    $0x100000,%eax
    c086:	c1 e8 0c             	shr    $0xc,%eax
    c089:	0f b6 80 a0 f2 02 00 	movzbl 0x2f2a0(%eax),%eax
    c090:	3c 01                	cmp    $0x1,%al
    c092:	74 18                	je     c0ac <put_page+0x5f>
		printk("mem_map disagrees with %p at %p\n", page, address);
    c094:	83 ec 04             	sub    $0x4,%esp
    c097:	ff 74 24 28          	pushl  0x28(%esp)
    c09b:	ff 74 24 28          	pushl  0x28(%esp)
    c09f:	68 f4 33 02 00       	push   $0x233f4
    c0a4:	e8 9e cb ff ff       	call   8c47 <printk>
    c0a9:	83 c4 10             	add    $0x10,%esp
	// 然后根据参数指定的线性地址address计算其在页目录表中对应的目录项指针,并从中取得一级页表地址.如果该目录项有效(P=1),即指定的页表在内存中,则从中取得指定页表
	// 地址放到page_table变量中.否则申请一空闲页面给页表使用,并在对应目录项中置相应标志(7 - User,U/S,R/W).然后将该页表地址放到page_table变量中.
	page_table = (unsigned long *) ((address >> 20) & 0xffc);
    c0ac:	8b 44 24 24          	mov    0x24(%esp),%eax
    c0b0:	c1 e8 14             	shr    $0x14,%eax
    c0b3:	25 fc 0f 00 00       	and    $0xffc,%eax
    c0b8:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if ((*page_table) & 1)
    c0bc:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c0c0:	8b 00                	mov    (%eax),%eax
    c0c2:	83 e0 01             	and    $0x1,%eax
    c0c5:	85 c0                	test   %eax,%eax
    c0c7:	74 11                	je     c0da <put_page+0x8d>
		page_table = (unsigned long *) (0xfffff000 & *page_table);
    c0c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c0cd:	8b 00                	mov    (%eax),%eax
    c0cf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    c0d4:	89 44 24 0c          	mov    %eax,0xc(%esp)
    c0d8:	eb 2e                	jmp    c108 <put_page+0xbb>
	else {
		if (!(tmp = get_free_page()))
    c0da:	e8 5c 0f 00 00       	call   d03b <get_free_page>
    c0df:	89 44 24 08          	mov    %eax,0x8(%esp)
    c0e3:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    c0e8:	75 07                	jne    c0f1 <put_page+0xa4>
			return 0;
    c0ea:	b8 00 00 00 00       	mov    $0x0,%eax
    c0ef:	eb 3d                	jmp    c12e <put_page+0xe1>
		*page_table = tmp | 7;
    c0f1:	8b 44 24 08          	mov    0x8(%esp),%eax
    c0f5:	83 c8 07             	or     $0x7,%eax
    c0f8:	89 c2                	mov    %eax,%edx
    c0fa:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c0fe:	89 10                	mov    %edx,(%eax)
		page_table = (unsigned long *) tmp;
    c100:	8b 44 24 08          	mov    0x8(%esp),%eax
    c104:	89 44 24 0c          	mov    %eax,0xc(%esp)
	}
	// 最后在找到的页表page_table中设置相关页表项内容,即把物理页面page的地址填入表项同时置位3个标志(U/S,W/R,P).该页表项在页表中的索引值等于线性地址位21~位12
	// 组成的10位的值.每个页表共可有1024项(0~0x3ff).
	page_table[(address >> 12) & 0x3ff] = page | 7;
    c108:	8b 44 24 24          	mov    0x24(%esp),%eax
    c10c:	c1 e8 0c             	shr    $0xc,%eax
    c10f:	25 ff 03 00 00       	and    $0x3ff,%eax
    c114:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    c11b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c11f:	01 d0                	add    %edx,%eax
    c121:	8b 54 24 20          	mov    0x20(%esp),%edx
    c125:	83 ca 07             	or     $0x7,%edx
    c128:	89 10                	mov    %edx,(%eax)
	/* no need for invalidate */
	/* 不需要刷新页变换高速缓冲 */
	return page;					// 返回物理页面地址.
    c12a:	8b 44 24 20          	mov    0x20(%esp),%eax
}
    c12e:	83 c4 1c             	add    $0x1c,%esp
    c131:	c3                   	ret    

0000c132 <put_dirty_page>:
 * 已修改状态标志.因而下面就有了与上面相同的函数,但是该函数在放置页面时会把页面标志为已修改状态.
 */
// 把一内容已修改过的物理内存页面映射到线性地址空间指定处.
// 该函数与一个函数put_page()几乎完全一样,除了本函数在第223行设置页表项内容时,同时还设置了页面已修改标志(位6,PAGE_DIRTY).
unsigned long put_dirty_page(unsigned long page, unsigned long address)
{
    c132:	83 ec 1c             	sub    $0x1c,%esp
	/* NOTE !!! This uses the fact that _pg_dir=0 */

	// 首先判断参数给定物理内存页面page的有效性.如果该页面位置低于LOW_MEM(1MB)或超出系统实际含有内存高端HIGH_MEMORY,则发出警告.LOW_MEM是主内存区可能有的
	// 最小起始位置.当系统后果内存小于或等于6MB时,主内存区始于LOW_MEM处.再查看一下该page页面是不已经申请的页面,即判断其在内存页面映射字节图mem_map[]中相应
	// 字节是否以置位.若没有则需发出警告.
	if (page < LOW_MEM || page >= HIGH_MEMORY)
    c135:	81 7c 24 20 ff ff 0f 	cmpl   $0xfffff,0x20(%esp)
    c13c:	00 
    c13d:	76 0b                	jbe    c14a <put_dirty_page+0x18>
    c13f:	a1 80 f2 02 00       	mov    0x2f280,%eax
    c144:	39 44 24 20          	cmp    %eax,0x20(%esp)
    c148:	72 18                	jb     c162 <put_dirty_page+0x30>
		printk("Trying to put page %p at %p\n", page, address);
    c14a:	83 ec 04             	sub    $0x4,%esp
    c14d:	ff 74 24 28          	pushl  0x28(%esp)
    c151:	ff 74 24 28          	pushl  0x28(%esp)
    c155:	68 d4 33 02 00       	push   $0x233d4
    c15a:	e8 e8 ca ff ff       	call   8c47 <printk>
    c15f:	83 c4 10             	add    $0x10,%esp
	if (mem_map[(page-LOW_MEM)>>12] != 1)
    c162:	8b 44 24 20          	mov    0x20(%esp),%eax
    c166:	2d 00 00 10 00       	sub    $0x100000,%eax
    c16b:	c1 e8 0c             	shr    $0xc,%eax
    c16e:	0f b6 80 a0 f2 02 00 	movzbl 0x2f2a0(%eax),%eax
    c175:	3c 01                	cmp    $0x1,%al
    c177:	74 18                	je     c191 <put_dirty_page+0x5f>
		printk("mem_map disagrees with %p at %p\n", page, address);
    c179:	83 ec 04             	sub    $0x4,%esp
    c17c:	ff 74 24 28          	pushl  0x28(%esp)
    c180:	ff 74 24 28          	pushl  0x28(%esp)
    c184:	68 f4 33 02 00       	push   $0x233f4
    c189:	e8 b9 ca ff ff       	call   8c47 <printk>
    c18e:	83 c4 10             	add    $0x10,%esp
	// 然后根据参数指定的线性地址address计算其在页目录表中对应的目录项指针,并从中取得一级页表地址.如果该目录项有效(P=1),即指定的页表在内存中,则从中取得指定页表
	// 地址放到page_table变量中.否则申请一空闲页面给页表使用,并在对应目录项中置相应标志(7 - User,U/S,R/W).然后将该页表地址放到page_table变量中.
	page_table = (unsigned long *) ((address >> 20) & 0xffc);
    c191:	8b 44 24 24          	mov    0x24(%esp),%eax
    c195:	c1 e8 14             	shr    $0x14,%eax
    c198:	25 fc 0f 00 00       	and    $0xffc,%eax
    c19d:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if ((*page_table) & 1)
    c1a1:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c1a5:	8b 00                	mov    (%eax),%eax
    c1a7:	83 e0 01             	and    $0x1,%eax
    c1aa:	85 c0                	test   %eax,%eax
    c1ac:	74 11                	je     c1bf <put_dirty_page+0x8d>
		page_table = (unsigned long *) (0xfffff000 & *page_table);
    c1ae:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c1b2:	8b 00                	mov    (%eax),%eax
    c1b4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    c1b9:	89 44 24 0c          	mov    %eax,0xc(%esp)
    c1bd:	eb 2e                	jmp    c1ed <put_dirty_page+0xbb>
	else {
		if (!(tmp = get_free_page()))
    c1bf:	e8 77 0e 00 00       	call   d03b <get_free_page>
    c1c4:	89 44 24 08          	mov    %eax,0x8(%esp)
    c1c8:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    c1cd:	75 07                	jne    c1d6 <put_dirty_page+0xa4>
			return 0;
    c1cf:	b8 00 00 00 00       	mov    $0x0,%eax
    c1d4:	eb 3d                	jmp    c213 <put_dirty_page+0xe1>
		*page_table = tmp | 7;
    c1d6:	8b 44 24 08          	mov    0x8(%esp),%eax
    c1da:	83 c8 07             	or     $0x7,%eax
    c1dd:	89 c2                	mov    %eax,%edx
    c1df:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c1e3:	89 10                	mov    %edx,(%eax)
		page_table = (unsigned long *) tmp;
    c1e5:	8b 44 24 08          	mov    0x8(%esp),%eax
    c1e9:	89 44 24 0c          	mov    %eax,0xc(%esp)
	}
	// 最后在找到的页表page_table中设置相关页表项内容,即把物理页面page的地址填入表项同时置位3个标志(U/S,W/R,P).该页表项在页表中的索引值等于线性地址位21~位12
	// 组成的10位的值.每个页表共可有1024项(0~0x3ff).
	page_table[(address >> 12) & 0x3ff] = page | (PAGE_DIRTY | 7);
    c1ed:	8b 44 24 24          	mov    0x24(%esp),%eax
    c1f1:	c1 e8 0c             	shr    $0xc,%eax
    c1f4:	25 ff 03 00 00       	and    $0x3ff,%eax
    c1f9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    c200:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c204:	01 d0                	add    %edx,%eax
    c206:	8b 54 24 20          	mov    0x20(%esp),%edx
    c20a:	83 ca 47             	or     $0x47,%edx
    c20d:	89 10                	mov    %edx,(%eax)
	/* no need for invalidate */
	/* 不需要刷新页变换高速缓冲 */
	return page;
    c20f:	8b 44 24 20          	mov    0x20(%esp),%eax
}
    c213:	83 c4 1c             	add    $0x1c,%esp
    c216:	c3                   	ret    

0000c217 <un_wp_page>:
// 用于页异常中断过程中写保护异常的处理(写时复制).在内核创建进程时,新进程与父进程被设置成共享代码和数据内存页面,并且所有这些页面均被设置成只读页面.而当新进程或原
// 进程需要向内存页面写数据时,CPU就会检测到这个情况并产生页面写保护异常.于是在这个函数中内核就会首先判断要写的页面是否被共享.若没有则把页面设置成可写然后退出.若页面
// 处于共享状态,则要重新申请一新页面并复制被写页面内容,以供写进程单独使用.共享被取消.
// 输入参数为页面表项指针,是物理地址.[un_wp_page -- Un-Write Protect Page]
void un_wp_page(unsigned long * table_entry)
{
    c217:	57                   	push   %edi
    c218:	56                   	push   %esi
    c219:	83 ec 14             	sub    $0x14,%esp
	unsigned long old_page, new_page;

	// 首先取参数指定的页表项中物理页面位置(地址)并判断该页面是不是共享页面.如果原页面地址大于内存低端LOW_MEM(表示在主内存区中),并且其在页面映射字节图数组中值为1(表示
	// 页面仅被引用1次,页面没有被共享),则在该页面的页表项中 R/W标志(可写),并刷新页变换高速缓冲,然后返回.即如果该内存页面此时只被一个进程使用,并且不是内核中的进程,就直接
	// 把属性改为可写即可,不必重新申请一个新页面.
	old_page = 0xfffff000 & *table_entry;				// 取指定页表项中物理页面地址.
    c21c:	8b 44 24 20          	mov    0x20(%esp),%eax
    c220:	8b 00                	mov    (%eax),%eax
    c222:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    c227:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if (old_page >= LOW_MEM && mem_map[MAP_NR(old_page)] == 1) {
    c22b:	81 7c 24 0c ff ff 0f 	cmpl   $0xfffff,0xc(%esp)
    c232:	00 
    c233:	76 32                	jbe    c267 <un_wp_page+0x50>
    c235:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c239:	2d 00 00 10 00       	sub    $0x100000,%eax
    c23e:	c1 e8 0c             	shr    $0xc,%eax
    c241:	0f b6 80 a0 f2 02 00 	movzbl 0x2f2a0(%eax),%eax
    c248:	3c 01                	cmp    $0x1,%al
    c24a:	75 1b                	jne    c267 <un_wp_page+0x50>
		*table_entry |= 2;
    c24c:	8b 44 24 20          	mov    0x20(%esp),%eax
    c250:	8b 00                	mov    (%eax),%eax
    c252:	83 c8 02             	or     $0x2,%eax
    c255:	89 c2                	mov    %eax,%edx
    c257:	8b 44 24 20          	mov    0x20(%esp),%eax
    c25b:	89 10                	mov    %edx,(%eax)
		invalidate();
    c25d:	b8 00 00 00 00       	mov    $0x0,%eax
    c262:	0f 22 d8             	mov    %eax,%cr3
		return;
    c265:	eb 6a                	jmp    c2d1 <un_wp_page+0xba>
	}
	// 否则就需要在主内存区内申请一页空闲页面给执行写操作的进程单独使用,取消页面共享.如果原页面大于内存低端(则意味着mem_map[]>1,页面是共享的),则将原页面的页面映射字节数组
	// 值递减1.然后将指定页表项内容更新为新页面地址,并置可读写标志(U/S,R/W,P).在刷新页变换高速缓冲之后,最后将原页面内容复制到新页面.
	if (!(new_page = get_free_page()))
    c267:	e8 cf 0d 00 00       	call   d03b <get_free_page>
    c26c:	89 44 24 08          	mov    %eax,0x8(%esp)
    c270:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    c275:	75 05                	jne    c27c <un_wp_page+0x65>
		oom();											// 内存不够处理.
    c277:	e8 0b fa ff ff       	call   bc87 <oom>
	if (old_page >= LOW_MEM)
    c27c:	81 7c 24 0c ff ff 0f 	cmpl   $0xfffff,0xc(%esp)
    c283:	00 
    c284:	76 1c                	jbe    c2a2 <un_wp_page+0x8b>
		mem_map[MAP_NR(old_page)]--;
    c286:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c28a:	2d 00 00 10 00       	sub    $0x100000,%eax
    c28f:	c1 e8 0c             	shr    $0xc,%eax
    c292:	0f b6 90 a0 f2 02 00 	movzbl 0x2f2a0(%eax),%edx
    c299:	83 ea 01             	sub    $0x1,%edx
    c29c:	88 90 a0 f2 02 00    	mov    %dl,0x2f2a0(%eax)
	copy_page(old_page, new_page);
    c2a2:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c2a6:	8b 54 24 08          	mov    0x8(%esp),%edx
    c2aa:	b9 00 04 00 00       	mov    $0x400,%ecx
    c2af:	89 c6                	mov    %eax,%esi
    c2b1:	89 d7                	mov    %edx,%edi
    c2b3:	57                   	push   %edi
    c2b4:	56                   	push   %esi
    c2b5:	fc                   	cld    
    c2b6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
    c2b8:	5e                   	pop    %esi
    c2b9:	5f                   	pop    %edi
	// 将新的页面设置为可读可写且存在
	*table_entry = new_page | 7;
    c2ba:	8b 44 24 08          	mov    0x8(%esp),%eax
    c2be:	83 c8 07             	or     $0x7,%eax
    c2c1:	89 c2                	mov    %eax,%edx
    c2c3:	8b 44 24 20          	mov    0x20(%esp),%eax
    c2c7:	89 10                	mov    %edx,(%eax)
	// 刷新高速缓冲
	invalidate();
    c2c9:	b8 00 00 00 00       	mov    $0x0,%eax
    c2ce:	0f 22 d8             	mov    %eax,%cr3
}
    c2d1:	83 c4 14             	add    $0x14,%esp
    c2d4:	5e                   	pop    %esi
    c2d5:	5f                   	pop    %edi
    c2d6:	c3                   	ret    

0000c2d7 <do_wp_page>:
// 执行写保护页面处理.
// 是写共享页面处理函数.是页异常中断处理过程中调用的C函数.在page.s程序中被调用.
// 函数参数error_code和address是进程在写写保护页面时由CPU产生异常而自动生成的.error_code指出出错类型;address是产生异常的页面
// 线性地址.写共享页面时需复制页面(写时复制).
void do_wp_page(unsigned long error_code, unsigned long address)
{
    c2d7:	83 ec 0c             	sub    $0xc,%esp
	// 首先判断CPU控制寄存器CR2给出的引起页面异常的线性地址在什么范围中.如果address小于TASK_SIZE(0x4000000,即64MB),表示异常页面位置
	// 在内核或任务0和任务1所处的线性地址范围内,于是发出警告信息"内核范围内存被写保护";如果(address - 当前进程代码起始地址)大于一个进程的
	// 长度(64MB),表示address所指的线性地址不在引起异常的进程线性地址空间范围内,则在发出出错信息后退出.
	if (address < TASK_SIZE)
    c2da:	81 7c 24 14 ff ff ff 	cmpl   $0x3ffffff,0x14(%esp)
    c2e1:	03 
    c2e2:	77 10                	ja     c2f4 <do_wp_page+0x1d>
		printk("\n\rBAD! KERNEL MEMORY WP-ERR!\n\r");
    c2e4:	83 ec 0c             	sub    $0xc,%esp
    c2e7:	68 18 34 02 00       	push   $0x23418
    c2ec:	e8 56 c9 ff ff       	call   8c47 <printk>
    c2f1:	83 c4 10             	add    $0x10,%esp
	if (address - current->start_code > TASK_SIZE) {
    c2f4:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    c2f9:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
    c2ff:	8b 54 24 14          	mov    0x14(%esp),%edx
    c303:	29 c2                	sub    %eax,%edx
    c305:	89 d0                	mov    %edx,%eax
    c307:	3d 00 00 00 04       	cmp    $0x4000000,%eax
    c30c:	76 1d                	jbe    c32b <do_wp_page+0x54>
		printk("Bad things happen: page error in do_wp_page\n\r");
    c30e:	83 ec 0c             	sub    $0xc,%esp
    c311:	68 38 34 02 00       	push   $0x23438
    c316:	e8 2c c9 ff ff       	call   8c47 <printk>
    c31b:	83 c4 10             	add    $0x10,%esp
		do_exit(SIGSEGV);
    c31e:	83 ec 0c             	sub    $0xc,%esp
    c321:	6a 0b                	push   $0xb
    c323:	e8 c2 ea ff ff       	call   adea <do_exit>
    c328:	83 c4 10             	add    $0x10,%esp
	// 目录项索引值中最后2位.因为只移动了20位,因此最后2位是页表索引的内容,应该屏蔽掉.而*((address>>20)&0xffc)则是取指定目录表项内容中对应页表
	// 的物理地址.最后与上0xffffff000用于屏蔽掉页目录项内容中的一些标志位(目录项低12位).直观表示为(0xffffff000 & *((unsigned long *) (((
	// address>>22) & 0x3ff)<<2))).3:由1中页表项在页表中偏移地址加上2中目录表项内容中对应页表的物理地址即可得到页表项的指针(物理地址).这里对
	// 共享的页面进行复制.
	un_wp_page((unsigned long *)
		(((address >> 10) & 0xffc) + (0xfffff000 &
    c32b:	8b 44 24 14          	mov    0x14(%esp),%eax
    c32f:	c1 e8 0a             	shr    $0xa,%eax
    c332:	25 fc 0f 00 00       	and    $0xffc,%eax
    c337:	89 c2                	mov    %eax,%edx
		*((unsigned long *) ((address >> 20) & 0xffc)))));
    c339:	8b 44 24 14          	mov    0x14(%esp),%eax
    c33d:	c1 e8 14             	shr    $0x14,%eax
    c340:	25 fc 0f 00 00       	and    $0xffc,%eax
    c345:	8b 00                	mov    (%eax),%eax
	// 目录项索引值中最后2位.因为只移动了20位,因此最后2位是页表索引的内容,应该屏蔽掉.而*((address>>20)&0xffc)则是取指定目录表项内容中对应页表
	// 的物理地址.最后与上0xffffff000用于屏蔽掉页目录项内容中的一些标志位(目录项低12位).直观表示为(0xffffff000 & *((unsigned long *) (((
	// address>>22) & 0x3ff)<<2))).3:由1中页表项在页表中偏移地址加上2中目录表项内容中对应页表的物理地址即可得到页表项的指针(物理地址).这里对
	// 共享的页面进行复制.
	un_wp_page((unsigned long *)
		(((address >> 10) & 0xffc) + (0xfffff000 &
    c347:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    c34c:	01 d0                	add    %edx,%eax
	// 位置.因为address>>22是目录项索引值,但每项4个字节,因此乘以4后:(address>>22)<<2=(address>>20)就是指定项在目录表中的偏移地址.&0xffc用于屏蔽
	// 目录项索引值中最后2位.因为只移动了20位,因此最后2位是页表索引的内容,应该屏蔽掉.而*((address>>20)&0xffc)则是取指定目录表项内容中对应页表
	// 的物理地址.最后与上0xffffff000用于屏蔽掉页目录项内容中的一些标志位(目录项低12位).直观表示为(0xffffff000 & *((unsigned long *) (((
	// address>>22) & 0x3ff)<<2))).3:由1中页表项在页表中偏移地址加上2中目录表项内容中对应页表的物理地址即可得到页表项的指针(物理地址).这里对
	// 共享的页面进行复制.
	un_wp_page((unsigned long *)
    c34e:	83 ec 0c             	sub    $0xc,%esp
    c351:	50                   	push   %eax
    c352:	e8 c0 fe ff ff       	call   c217 <un_wp_page>
    c357:	83 c4 10             	add    $0x10,%esp
		(((address >> 10) & 0xffc) + (0xfffff000 &
		*((unsigned long *) ((address >> 20) & 0xffc)))));

}
    c35a:	90                   	nop
    c35b:	83 c4 0c             	add    $0xc,%esp
    c35e:	c3                   	ret    

0000c35f <write_verify>:

// 写页面验证.
// 若页面不可写,则复制页面.在fork.c中被内存验证通用函数verify_area()调用.
// 参数address是指定页面在4GB空间中的线性地址.
void write_verify(unsigned long address)
{
    c35f:	83 ec 1c             	sub    $0x1c,%esp

	// 首先取指定线性地址对应的页目录项,根据目录项中的存在位(P)判断目录项对应的页表是否存在(存在位P=1?),若不存在(P=0)则返回.这样处理
	// 是因为对于不存在的页面没有共享和写时复制可言,并且若程序对此不存在的页面执行写操作时,系统就会因为缺页异常而去执行do_no_page(),
	// 并为这个地方使用put_page()函数映射一个物理页面.接着程序从目录项中取页表地址,加上指定页面在页表中的页表项偏移值,得对应地址的页表
	// 项指针.在该表项中包含着给定线性地址对应的物理页面.
	if (!( (page = *((unsigned long *) ((address >> 20) & 0xffc)) ) & 1))
    c362:	8b 44 24 20          	mov    0x20(%esp),%eax
    c366:	c1 e8 14             	shr    $0x14,%eax
    c369:	25 fc 0f 00 00       	and    $0xffc,%eax
    c36e:	8b 00                	mov    (%eax),%eax
    c370:	89 44 24 0c          	mov    %eax,0xc(%esp)
    c374:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c378:	83 e0 01             	and    $0x1,%eax
    c37b:	85 c0                	test   %eax,%eax
    c37d:	74 39                	je     c3b8 <write_verify+0x59>
		return;
	page &= 0xfffff000;
    c37f:	81 64 24 0c 00 f0 ff 	andl   $0xfffff000,0xc(%esp)
    c386:	ff 
	// 得到页表项的物理地址
	page += ((address >> 10) & 0xffc);
    c387:	8b 44 24 20          	mov    0x20(%esp),%eax
    c38b:	c1 e8 0a             	shr    $0xa,%eax
    c38e:	25 fc 0f 00 00       	and    $0xffc,%eax
    c393:	01 44 24 0c          	add    %eax,0xc(%esp)
	// 然后判断该页表项中位1(P/W),位0(P)标志.如果该页面不可写(R/W=0)且存在,那么就执行共享检验和复制页面操作(写时复制).否则什么也不做,
	// 直接退出.
	if ((3 & *(unsigned long *) page) == 1)  /* non-writeable, present */
    c397:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c39b:	8b 00                	mov    (%eax),%eax
    c39d:	83 e0 03             	and    $0x3,%eax
    c3a0:	83 f8 01             	cmp    $0x1,%eax
    c3a3:	75 16                	jne    c3bb <write_verify+0x5c>
		un_wp_page((unsigned long *) page);
    c3a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c3a9:	83 ec 0c             	sub    $0xc,%esp
    c3ac:	50                   	push   %eax
    c3ad:	e8 65 fe ff ff       	call   c217 <un_wp_page>
    c3b2:	83 c4 10             	add    $0x10,%esp
	return;
    c3b5:	90                   	nop
    c3b6:	eb 03                	jmp    c3bb <write_verify+0x5c>
	// 首先取指定线性地址对应的页目录项,根据目录项中的存在位(P)判断目录项对应的页表是否存在(存在位P=1?),若不存在(P=0)则返回.这样处理
	// 是因为对于不存在的页面没有共享和写时复制可言,并且若程序对此不存在的页面执行写操作时,系统就会因为缺页异常而去执行do_no_page(),
	// 并为这个地方使用put_page()函数映射一个物理页面.接着程序从目录项中取页表地址,加上指定页面在页表中的页表项偏移值,得对应地址的页表
	// 项指针.在该表项中包含着给定线性地址对应的物理页面.
	if (!( (page = *((unsigned long *) ((address >> 20) & 0xffc)) ) & 1))
		return;
    c3b8:	90                   	nop
    c3b9:	eb 01                	jmp    c3bc <write_verify+0x5d>
	page += ((address >> 10) & 0xffc);
	// 然后判断该页表项中位1(P/W),位0(P)标志.如果该页面不可写(R/W=0)且存在,那么就执行共享检验和复制页面操作(写时复制).否则什么也不做,
	// 直接退出.
	if ((3 & *(unsigned long *) page) == 1)  /* non-writeable, present */
		un_wp_page((unsigned long *) page);
	return;
    c3bb:	90                   	nop
}
    c3bc:	83 c4 1c             	add    $0x1c,%esp
    c3bf:	c3                   	ret    

0000c3c0 <get_empty_page>:

// 取得一页空闲内存并映射到指定线性地址处.
// get_free_page()仅是申请取得了主内存区的一页物理内存.而本函数则不仅是获取到一页物理内存页面,还进一步调用put_page(),将物理页面映射到指定的线性地址处.
// 参数address是指定页面的线性地址.
void get_empty_page(unsigned long address)
{
    c3c0:	83 ec 1c             	sub    $0x1c,%esp
	unsigned long tmp;

	// 若不能取得一空闲页面,或者不能将所取页面放置到指定地址处,则显示内存不够的信息.292行上英文注释的含义是:free_page()函数的参数tmp是0也没有关系,该函数会忽略它
	// 并能正常返回.
	if (!(tmp = get_free_page()) || !put_page(tmp, address)) {
    c3c3:	e8 73 0c 00 00       	call   d03b <get_free_page>
    c3c8:	89 44 24 0c          	mov    %eax,0xc(%esp)
    c3cc:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    c3d1:	74 17                	je     c3ea <get_empty_page+0x2a>
    c3d3:	83 ec 08             	sub    $0x8,%esp
    c3d6:	ff 74 24 28          	pushl  0x28(%esp)
    c3da:	ff 74 24 18          	pushl  0x18(%esp)
    c3de:	e8 6a fc ff ff       	call   c04d <put_page>
    c3e3:	83 c4 10             	add    $0x10,%esp
    c3e6:	85 c0                	test   %eax,%eax
    c3e8:	75 14                	jne    c3fe <get_empty_page+0x3e>
		free_page(tmp);		/* 0 is ok - ignored */
    c3ea:	83 ec 0c             	sub    $0xc,%esp
    c3ed:	ff 74 24 18          	pushl  0x18(%esp)
    c3f1:	e8 b6 f8 ff ff       	call   bcac <free_page>
    c3f6:	83 c4 10             	add    $0x10,%esp
		oom();
    c3f9:	e8 89 f8 ff ff       	call   bc87 <oom>
	}
}
    c3fe:	90                   	nop
    c3ff:	83 c4 1c             	add    $0x1c,%esp
    c402:	c3                   	ret    

0000c403 <try_to_share>:
// 段内容作过修改那么数据段内容也应一样。参数address是进程中的逻辑地址，即是当前进程欲与p进程共享页面的逻辑页面地址。进程
// p是将被共享页面的进程。如果p进程address处的页面存在并且没有被修改过的话，就让当前进程与p进程共享之。同时还需要验证指定
// 的地址处是否已经申请了页面，若是则出错，死机。
// 返回：1 - 页面共享处理成功；0 - 失败。
static int try_to_share(unsigned long address, struct task_struct * p)
{
    c403:	83 ec 2c             	sub    $0x2c,%esp

	// 首先分别求得指定进程p中和当前进程中逻辑地址address对应的页目录项。为了计算方便先求出指定逻辑地址address处的“逻辑”页
	// 目录号，即以进程空间（0 - 64MB）算出的页目录项号。该“逻辑”页目录项号加上进程p在CPU 4GB线性空间中起始地址对应的页目录
	// 项，即得到进程p中地址address处页面所对应的4GB线性空间中实际页目录项from_page。而“逻辑”页目录项号加上当前进程CPU 4GB
	// 线性空间中的实际页目录项to_page。
	from_page = to_page = ((address >> 20) & 0xffc);
    c406:	8b 44 24 30          	mov    0x30(%esp),%eax
    c40a:	c1 e8 14             	shr    $0x14,%eax
    c40d:	25 fc 0f 00 00       	and    $0xffc,%eax
    c412:	89 44 24 18          	mov    %eax,0x18(%esp)
    c416:	8b 44 24 18          	mov    0x18(%esp),%eax
    c41a:	89 44 24 14          	mov    %eax,0x14(%esp)
	from_page += ((p->start_code >> 20) & 0xffc);             		// p进程目录项。
    c41e:	8b 44 24 34          	mov    0x34(%esp),%eax
    c422:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
    c428:	c1 e8 14             	shr    $0x14,%eax
    c42b:	25 fc 0f 00 00       	and    $0xffc,%eax
    c430:	01 44 24 14          	add    %eax,0x14(%esp)
	to_page += ((current->start_code >> 20) & 0xffc);         		// 当前进程目录项。
    c434:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    c439:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
    c43f:	c1 e8 14             	shr    $0x14,%eax
    c442:	25 fc 0f 00 00       	and    $0xffc,%eax
    c447:	01 44 24 18          	add    %eax,0x18(%esp)
	// address对应的物理内在页面地址，并且该物理页面存在，而且干净（没有被修改过，不脏）。
	// 方法是先取目录项内容。如果该目录项元效（P=0），表示目录项对应的二级页表不存在，于是返回。否则取该目录项对应页表地址from，
	// 从而计算出逻辑地址address对应的页表项指针，并取出该面表项内容临时保存在phys_addr中。
	/* is there a page-directory at from? */
	/* 在from处是否存在页目录项？ */
	from = *(unsigned long *) from_page;                    		// p进程目录项内容。
    c44b:	8b 44 24 14          	mov    0x14(%esp),%eax
    c44f:	8b 00                	mov    (%eax),%eax
    c451:	89 44 24 10          	mov    %eax,0x10(%esp)
	if (!(from & 1))
    c455:	8b 44 24 10          	mov    0x10(%esp),%eax
    c459:	83 e0 01             	and    $0x1,%eax
    c45c:	85 c0                	test   %eax,%eax
    c45e:	75 0a                	jne    c46a <try_to_share+0x67>
		return 0;
    c460:	b8 00 00 00 00       	mov    $0x0,%eax
    c465:	e9 2c 01 00 00       	jmp    c596 <try_to_share+0x193>
	from &= 0xfffff000;                                     		// 页表地址。
    c46a:	81 64 24 10 00 f0 ff 	andl   $0xfffff000,0x10(%esp)
    c471:	ff 
	from_page = from + ((address >> 10) & 0xffc);             		// 页表项指针。
    c472:	8b 44 24 30          	mov    0x30(%esp),%eax
    c476:	c1 e8 0a             	shr    $0xa,%eax
    c479:	25 fc 0f 00 00       	and    $0xffc,%eax
    c47e:	89 c2                	mov    %eax,%edx
    c480:	8b 44 24 10          	mov    0x10(%esp),%eax
    c484:	01 d0                	add    %edx,%eax
    c486:	89 44 24 14          	mov    %eax,0x14(%esp)
	phys_addr = *(unsigned long *) from_page;               		// 页表项内容。
    c48a:	8b 44 24 14          	mov    0x14(%esp),%eax
    c48e:	8b 00                	mov    (%eax),%eax
    c490:	89 44 24 0c          	mov    %eax,0xc(%esp)
	// 接着看看页表项映射的物理页面是否存在并且干净。0x41对应页表项中的D（Dirty）和P（present）标志。如果页面不干净或无效则返回。
	// 然后我们从该表项中取出物理页面地址再保存在phys_addr中。最后我们再检查一下这个物理页面地址的有效性，即它不应该超过机器最大
	// 物理地址值，也不应该小于内在低端（1MB）。
	/* is the page clean and present? */
	/* 物理页面干净并且存在吗？ */
	if ((phys_addr & 0x41) != 0x01)
    c494:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c498:	83 e0 41             	and    $0x41,%eax
    c49b:	83 f8 01             	cmp    $0x1,%eax
    c49e:	74 0a                	je     c4aa <try_to_share+0xa7>
		return 0;
    c4a0:	b8 00 00 00 00       	mov    $0x0,%eax
    c4a5:	e9 ec 00 00 00       	jmp    c596 <try_to_share+0x193>
	phys_addr &= 0xfffff000;                                		// 物理页面地址。
    c4aa:	81 64 24 0c 00 f0 ff 	andl   $0xfffff000,0xc(%esp)
    c4b1:	ff 
	if (phys_addr >= HIGH_MEMORY || phys_addr < LOW_MEM)
    c4b2:	a1 80 f2 02 00       	mov    0x2f280,%eax
    c4b7:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    c4bb:	73 0a                	jae    c4c7 <try_to_share+0xc4>
    c4bd:	81 7c 24 0c ff ff 0f 	cmpl   $0xfffff,0xc(%esp)
    c4c4:	00 
    c4c5:	77 0a                	ja     c4d1 <try_to_share+0xce>
		return 0;
    c4c7:	b8 00 00 00 00       	mov    $0x0,%eax
    c4cc:	e9 c5 00 00 00       	jmp    c596 <try_to_share+0x193>
	// 下面首先对当前进程的表项进行操作。目标是取得当前进程中address对应的页表项地址，并且该页表项还没有映射物理页面，即其P=0。
	// 首先取当前进程页目录项内容->to。如果该目录项元效（P=0），即目录项对应的二级页表不存在，则申请一空闲页面来存放页表，并更新
	// 目录项to_page内容，让其指向该内存页面。
	to = *(unsigned long *) to_page;                        		// 当前进程目录项内容。
    c4d1:	8b 44 24 18          	mov    0x18(%esp),%eax
    c4d5:	8b 00                	mov    (%eax),%eax
    c4d7:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (!(to & 1))
    c4db:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    c4df:	83 e0 01             	and    $0x1,%eax
    c4e2:	85 c0                	test   %eax,%eax
    c4e4:	75 24                	jne    c50a <try_to_share+0x107>
		if (to = get_free_page())
    c4e6:	e8 50 0b 00 00       	call   d03b <get_free_page>
    c4eb:	89 44 24 1c          	mov    %eax,0x1c(%esp)
    c4ef:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
    c4f4:	74 0f                	je     c505 <try_to_share+0x102>
			*(unsigned long *) to_page = to | 7;
    c4f6:	8b 44 24 18          	mov    0x18(%esp),%eax
    c4fa:	8b 54 24 1c          	mov    0x1c(%esp),%edx
    c4fe:	83 ca 07             	or     $0x7,%edx
    c501:	89 10                	mov    %edx,(%eax)
    c503:	eb 05                	jmp    c50a <try_to_share+0x107>
		else
			oom();
    c505:	e8 7d f7 ff ff       	call   bc87 <oom>
	// 否则取目录项中的页表地址->to，加上页表索引值<<2，即页表项在表中偏移地址，得到页表项地址->to_page。针对该页表项，如果
	// 此时我们检查出其对应的物理页面已经存在，即页表项的存在位P=1,则说明原本我们想共享进程p中对应的物理页面，但现在我们自己已经
	// 占有了（映射有）物理页面。于是说明内核出错，死机。
	to &= 0xfffff000;                                       		// 当前进程的页表地址。
    c50a:	81 64 24 1c 00 f0 ff 	andl   $0xfffff000,0x1c(%esp)
    c511:	ff 
	to_page = to + ((address >> 10) & 0xffc);                 		// 当前进程的页表项地址。
    c512:	8b 44 24 30          	mov    0x30(%esp),%eax
    c516:	c1 e8 0a             	shr    $0xa,%eax
    c519:	25 fc 0f 00 00       	and    $0xffc,%eax
    c51e:	89 c2                	mov    %eax,%edx
    c520:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    c524:	01 d0                	add    %edx,%eax
    c526:	89 44 24 18          	mov    %eax,0x18(%esp)
	if (1 & *(unsigned long *) to_page)
    c52a:	8b 44 24 18          	mov    0x18(%esp),%eax
    c52e:	8b 00                	mov    (%eax),%eax
    c530:	83 e0 01             	and    $0x1,%eax
    c533:	85 c0                	test   %eax,%eax
    c535:	74 10                	je     c547 <try_to_share+0x144>
		panic("try_to_share: to_page already exists");
    c537:	83 ec 0c             	sub    $0xc,%esp
    c53a:	68 68 34 02 00       	push   $0x23468
    c53f:	e8 c4 c6 ff ff       	call   8c08 <panic>
    c544:	83 c4 10             	add    $0x10,%esp
	/* share them: write-protect */
	/* 对它们进行共享处理：写保护区*/
	*(unsigned long *) from_page &= ~2;
    c547:	8b 44 24 14          	mov    0x14(%esp),%eax
    c54b:	8b 54 24 14          	mov    0x14(%esp),%edx
    c54f:	8b 12                	mov    (%edx),%edx
    c551:	83 e2 fd             	and    $0xfffffffd,%edx
    c554:	89 10                	mov    %edx,(%eax)
	*(unsigned long *) to_page = *(unsigned long *) from_page;
    c556:	8b 44 24 18          	mov    0x18(%esp),%eax
    c55a:	8b 54 24 14          	mov    0x14(%esp),%edx
    c55e:	8b 12                	mov    (%edx),%edx
    c560:	89 10                	mov    %edx,(%eax)
	// 随后刷新页变换高速缓冲。计算所操作物理页面的页面号，并将对应页面映射字节数组项中的引用递增1.最后返回1,表示共享处理成功。
	invalidate();
    c562:	b8 00 00 00 00       	mov    $0x0,%eax
    c567:	0f 22 d8             	mov    %eax,%cr3
	phys_addr -= LOW_MEM;
    c56a:	81 6c 24 0c 00 00 10 	subl   $0x100000,0xc(%esp)
    c571:	00 
	phys_addr >>= 12;                       						// 得页面号。
    c572:	c1 6c 24 0c 0c       	shrl   $0xc,0xc(%esp)
	mem_map[phys_addr]++;
    c577:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c57b:	05 a0 f2 02 00       	add    $0x2f2a0,%eax
    c580:	0f b6 00             	movzbl (%eax),%eax
    c583:	8d 50 01             	lea    0x1(%eax),%edx
    c586:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c58a:	05 a0 f2 02 00       	add    $0x2f2a0,%eax
    c58f:	88 10                	mov    %dl,(%eax)
	return 1;
    c591:	b8 01 00 00 00       	mov    $0x1,%eax
}
    c596:	83 c4 2c             	add    $0x2c,%esp
    c599:	c3                   	ret    

0000c59a <share_page>:
// 点.根据该i节点的引用次数i_count我们可以进行这种判断.若节点的i_count值大于1,则表明系统中有两个进程正在运行同一个执行文件(或库
// 文件),于是可以再对任务结构数组中所有任务比较是否有相同的executable字段(或library字段)来最后确定多个进程运行着相同执行文件的
// 情况.参数inode是欲进行共享页面进程执行文件的内存i节点.address是进程中的逻辑地址,即当前进程欲与p进程共享页面的逻辑页面地址.返
// 回1 - 共享操作成功,0 - 失败.
static int share_page(struct m_inode * inode, unsigned long address)
{
    c59a:	83 ec 1c             	sub    $0x1c,%esp
	struct task_struct ** p;

	// 首先检查一下参数指定的内存i节点引用计数值.如果该内存i节点的引用计数值等于1(executalbe->i_count=1)或者i节点指针空,表示当前系
	// 统中只有1个进程在运行该执行文件或者提供的i节点无效.因此无共享可言,直接退出函数.
	if (inode->i_count < 2 || !inode)
    c59d:	8b 44 24 20          	mov    0x20(%esp),%eax
    c5a1:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    c5a5:	66 83 f8 01          	cmp    $0x1,%ax
    c5a9:	76 07                	jbe    c5b2 <share_page+0x18>
    c5ab:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    c5b0:	75 0a                	jne    c5bc <share_page+0x22>
		return 0;
    c5b2:	b8 00 00 00 00       	mov    $0x0,%eax
    c5b7:	e9 8f 00 00 00       	jmp    c64b <share_page+0xb1>
	// 辑地址address小于进程库文件在逻辑地址空间的起始地址LIBRARY_OFFSET,则表明共享的页面在进程执行文件对应的逻辑地址空间范围内,于是
	// 检查一下指定i节点是否与进程的执行文件i节点(即进程executable相同,若不相同则继续寻找.若进程逻辑地址address大于等于进程库文件在
	// 逻辑地址空间的起始地址LIBRARY_OFFSET,则表明想要共享的页面在进程使用的库文件中,于是检查指定节点inode是否与进程的库文件i节点相同,
	// 若不相同则继续寻找.如果找到某个进程p,其executable或library与指定的节点inode相同,则调用页面试探函数try_to_share()尝试页面共
	// 享.若共享操作成功,则函数返回1.否则返回0,表示共享页面操作失败.
	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p) {
    c5bc:	c7 44 24 0c bc e2 02 	movl   $0x2e2bc,0xc(%esp)
    c5c3:	00 
    c5c4:	eb 76                	jmp    c63c <share_page+0xa2>
		if (!*p)								// 如果该任务项空闲,则继续寻找.
    c5c6:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c5ca:	8b 00                	mov    (%eax),%eax
    c5cc:	85 c0                	test   %eax,%eax
    c5ce:	74 60                	je     c630 <share_page+0x96>
			continue;
		if (current == *p)						// 如果是当前任务,也继续寻找.
    c5d0:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c5d4:	8b 10                	mov    (%eax),%edx
    c5d6:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    c5db:	39 c2                	cmp    %eax,%edx
    c5dd:	74 54                	je     c633 <share_page+0x99>
			continue;
		if (address < LIBRARY_OFFSET) {
    c5df:	81 7c 24 24 ff ff bf 	cmpl   $0x3bfffff,0x24(%esp)
    c5e6:	03 
    c5e7:	77 14                	ja     c5fd <share_page+0x63>
			if (inode != (*p)->executable)		// 进程执行文件i节点.
    c5e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c5ed:	8b 00                	mov    (%eax),%eax
    c5ef:	8b 80 3c 03 00 00    	mov    0x33c(%eax),%eax
    c5f5:	3b 44 24 20          	cmp    0x20(%esp),%eax
    c5f9:	74 14                	je     c60f <share_page+0x75>
				continue;
    c5fb:	eb 3a                	jmp    c637 <share_page+0x9d>
		} else {
			if (inode != (*p)->library)			// 进程使用库文件i节点.
    c5fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c601:	8b 00                	mov    (%eax),%eax
    c603:	8b 80 40 03 00 00    	mov    0x340(%eax),%eax
    c609:	3b 44 24 20          	cmp    0x20(%esp),%eax
    c60d:	75 27                	jne    c636 <share_page+0x9c>
				continue;
		}
		if (try_to_share(address, *p))			// 尝试共享页面.
    c60f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c613:	8b 00                	mov    (%eax),%eax
    c615:	83 ec 08             	sub    $0x8,%esp
    c618:	50                   	push   %eax
    c619:	ff 74 24 30          	pushl  0x30(%esp)
    c61d:	e8 e1 fd ff ff       	call   c403 <try_to_share>
    c622:	83 c4 10             	add    $0x10,%esp
    c625:	85 c0                	test   %eax,%eax
    c627:	74 0e                	je     c637 <share_page+0x9d>
			return 1;
    c629:	b8 01 00 00 00       	mov    $0x1,%eax
    c62e:	eb 1b                	jmp    c64b <share_page+0xb1>
	// 逻辑地址空间的起始地址LIBRARY_OFFSET,则表明想要共享的页面在进程使用的库文件中,于是检查指定节点inode是否与进程的库文件i节点相同,
	// 若不相同则继续寻找.如果找到某个进程p,其executable或library与指定的节点inode相同,则调用页面试探函数try_to_share()尝试页面共
	// 享.若共享操作成功,则函数返回1.否则返回0,表示共享页面操作失败.
	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p) {
		if (!*p)								// 如果该任务项空闲,则继续寻找.
			continue;
    c630:	90                   	nop
    c631:	eb 04                	jmp    c637 <share_page+0x9d>
		if (current == *p)						// 如果是当前任务,也继续寻找.
			continue;
    c633:	90                   	nop
    c634:	eb 01                	jmp    c637 <share_page+0x9d>
		if (address < LIBRARY_OFFSET) {
			if (inode != (*p)->executable)		// 进程执行文件i节点.
				continue;
		} else {
			if (inode != (*p)->library)			// 进程使用库文件i节点.
				continue;
    c636:	90                   	nop
	// 辑地址address小于进程库文件在逻辑地址空间的起始地址LIBRARY_OFFSET,则表明共享的页面在进程执行文件对应的逻辑地址空间范围内,于是
	// 检查一下指定i节点是否与进程的执行文件i节点(即进程executable相同,若不相同则继续寻找.若进程逻辑地址address大于等于进程库文件在
	// 逻辑地址空间的起始地址LIBRARY_OFFSET,则表明想要共享的页面在进程使用的库文件中,于是检查指定节点inode是否与进程的库文件i节点相同,
	// 若不相同则继续寻找.如果找到某个进程p,其executable或library与指定的节点inode相同,则调用页面试探函数try_to_share()尝试页面共
	// 享.若共享操作成功,则函数返回1.否则返回0,表示共享页面操作失败.
	for (p = &LAST_TASK ; p > &FIRST_TASK ; --p) {
    c637:	83 6c 24 0c 04       	subl   $0x4,0xc(%esp)
    c63c:	81 7c 24 0c c0 e1 02 	cmpl   $0x2e1c0,0xc(%esp)
    c643:	00 
    c644:	77 80                	ja     c5c6 <share_page+0x2c>
				continue;
		}
		if (try_to_share(address, *p))			// 尝试共享页面.
			return 1;
	}
	return 0;
    c646:	b8 00 00 00 00       	mov    $0x0,%eax
}
    c64b:	83 c4 1c             	add    $0x1c,%esp
    c64e:	c3                   	ret    

0000c64f <do_no_page>:
// 是访问不存在页面处理函数.页异常中断处理过程中调用的函数.在page.s程序中被调用.函数参数error_code和address是进程在访问页面时由CPU因
// 缺页产生异常而自动生成.error_code指出出错类型;address产生异常的页面线性地址.
// 该函数首先查看所缺页是否在交换设备中,若是则交换进来.否则尝试与已加载的相同文件进行页面共享,或者只是由于进程动态申请内存页面而只需映射一页
// 物理内存页即可.若共享操作不成功,那么只能从相应文件中读入所缺的数据页面到指定线性地址处.
void do_no_page(unsigned long error_code, unsigned long address)
{
    c64f:	83 ec 3c             	sub    $0x3c,%esp
	struct m_inode * inode;

	// 首先判断CPU控制寄存器CR2给出的引起页面异常的线性地址在什么范围中.如果address小于TASK_SIZE(0x4000000,即64MB),表示异常页面位置在内核
	// 或任务0和任务1所处的线性地址范围内,于是发出警告信息"内核范围内存被写保护";如果(address-当前进程代码起始地址)大于一个进程的长度(64MB),表示
	// address所指的线性地址不在引起异常的进程线性地址空间范围内,则在发出出错信息后退出
	if (address < TASK_SIZE)
    c652:	81 7c 24 44 ff ff ff 	cmpl   $0x3ffffff,0x44(%esp)
    c659:	03 
    c65a:	77 10                	ja     c66c <do_no_page+0x1d>
		printk("\n\rBAD!! KERNEL PAGE MISSING\n\r");
    c65c:	83 ec 0c             	sub    $0xc,%esp
    c65f:	68 8d 34 02 00       	push   $0x2348d
    c664:	e8 de c5 ff ff       	call   8c47 <printk>
    c669:	83 c4 10             	add    $0x10,%esp
	if (address - current->start_code > TASK_SIZE) {
    c66c:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    c671:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
    c677:	8b 54 24 44          	mov    0x44(%esp),%edx
    c67b:	29 c2                	sub    %eax,%edx
    c67d:	89 d0                	mov    %edx,%eax
    c67f:	3d 00 00 00 04       	cmp    $0x4000000,%eax
    c684:	76 1d                	jbe    c6a3 <do_no_page+0x54>
		printk("Bad things happen: nonexistent page error in do_no_page\n\r");
    c686:	83 ec 0c             	sub    $0xc,%esp
    c689:	68 ac 34 02 00       	push   $0x234ac
    c68e:	e8 b4 c5 ff ff       	call   8c47 <printk>
    c693:	83 c4 10             	add    $0x10,%esp
		do_exit(SIGSEGV);
    c696:	83 ec 0c             	sub    $0xc,%esp
    c699:	6a 0b                	push   $0xb
    c69b:	e8 4a e7 ff ff       	call   adea <do_exit>
    c6a0:	83 c4 10             	add    $0x10,%esp
	}
	// 然后根据指定的线性地址address求出其对应的二级页表项指针,并根据该页表项内容判断address处的页面是否在交换设备中.若是则调入页面并退出.方法是首先
	// 取指定线性地址address对应的目录项内容.如果对应的二级页表存在,则取出该目录项中二级页表的地址,加上页表项偏移值即得到线性地址address处页面对应的
	// 页表项指针,从而获得页表项内容.若页表内容不为0并且页表项存在位P=0,则说明该页表项指定的物理页面应该在交换设备中.于是从交换设备中调入指定页面后退出函数.
	page = *(unsigned long *) ((address >> 20) & 0xffc);				// 取目录项内容.
    c6a3:	8b 44 24 44          	mov    0x44(%esp),%eax
    c6a7:	c1 e8 14             	shr    $0x14,%eax
    c6aa:	25 fc 0f 00 00       	and    $0xffc,%eax
    c6af:	8b 00                	mov    (%eax),%eax
    c6b1:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (page & 1) {
    c6b5:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    c6b9:	83 e0 01             	and    $0x1,%eax
    c6bc:	85 c0                	test   %eax,%eax
    c6be:	74 49                	je     c709 <do_no_page+0xba>
		page &= 0xfffff000;												// 二级页表地址.
    c6c0:	81 64 24 1c 00 f0 ff 	andl   $0xfffff000,0x1c(%esp)
    c6c7:	ff 
		page += (address >> 10) & 0xffc;								// 页表项指针.
    c6c8:	8b 44 24 44          	mov    0x44(%esp),%eax
    c6cc:	c1 e8 0a             	shr    $0xa,%eax
    c6cf:	25 fc 0f 00 00       	and    $0xffc,%eax
    c6d4:	01 44 24 1c          	add    %eax,0x1c(%esp)
		tmp = *(unsigned long *) page;									// 页表项内容.
    c6d8:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    c6dc:	8b 00                	mov    (%eax),%eax
    c6de:	89 44 24 2c          	mov    %eax,0x2c(%esp)
		if (tmp && !(1 & tmp)) {
    c6e2:	83 7c 24 2c 00       	cmpl   $0x0,0x2c(%esp)
    c6e7:	74 20                	je     c709 <do_no_page+0xba>
    c6e9:	8b 44 24 2c          	mov    0x2c(%esp),%eax
    c6ed:	83 e0 01             	and    $0x1,%eax
    c6f0:	85 c0                	test   %eax,%eax
    c6f2:	75 15                	jne    c709 <do_no_page+0xba>
			swap_in((unsigned long *) page);							// 从交换设备读页面.
    c6f4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    c6f8:	83 ec 0c             	sub    $0xc,%esp
    c6fb:	50                   	push   %eax
    c6fc:	e8 31 06 00 00       	call   cd32 <swap_in>
    c701:	83 c4 10             	add    $0x10,%esp
			return;
    c704:	e9 b9 01 00 00       	jmp    c8c2 <do_no_page+0x273>
		}
	}
	// 否则取线性空间中指定地址address处页面地址,并算出指定线性地址在进程空间中相对于进程基址的偏移长度值tmp,即对应的逻辑地址.从而可以算出缺页页面在执行文件映像
	// 中或在库文件中的具体起始数据块号.
	address &= 0xfffff000;												// address处缺页页面地址.
    c709:	81 64 24 44 00 f0 ff 	andl   $0xfffff000,0x44(%esp)
    c710:	ff 
	tmp = address - current->start_code;								// 缺页页面对应逻辑地址.
    c711:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    c716:	8b 80 18 02 00 00    	mov    0x218(%eax),%eax
    c71c:	8b 54 24 44          	mov    0x44(%esp),%edx
    c720:	29 c2                	sub    %eax,%edx
    c722:	89 d0                	mov    %edx,%eax
    c724:	89 44 24 2c          	mov    %eax,0x2c(%esp)
	// 如果缺页对应的逻辑地址tmp大于库映像文件在进程逻辑空间中的起始位置,说明缺少的页面在库映像文件中.于是从当前进程任务数据结构中可以取得库映像文件的i节点library,
	// 并计算出该缺页在库文件中的起始数据块号block.
	// 因为设置上存放的执行文件映像第1块数据是程序头结构,因此在读取该文件时需要跳过第1块数据.所以需要首先计算缺页所在数据块号.因为每块数据长度为BLOCK_SIZE = 1KB,因此
	// 一页内存可存放4个数据块.进程逻辑地址tmp除以数据块大小再加1即可得出缺少的页面在执行映像文件中的起始块号block.
	if (tmp >= LIBRARY_OFFSET ) {
    c728:	81 7c 24 2c ff ff bf 	cmpl   $0x3bfffff,0x2c(%esp)
    c72f:	03 
    c730:	76 24                	jbe    c756 <do_no_page+0x107>
		inode = current->library;										// 库文件i节点和缺页起始块号.
    c732:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    c737:	8b 80 40 03 00 00    	mov    0x340(%eax),%eax
    c73d:	89 44 24 20          	mov    %eax,0x20(%esp)
		block = 1 + (tmp - LIBRARY_OFFSET) / BLOCK_SIZE;
    c741:	8b 44 24 2c          	mov    0x2c(%esp),%eax
    c745:	2d 00 00 c0 03       	sub    $0x3c00000,%eax
    c74a:	c1 e8 0a             	shr    $0xa,%eax
    c74d:	83 c0 01             	add    $0x1,%eax
    c750:	89 44 24 28          	mov    %eax,0x28(%esp)
    c754:	eb 40                	jmp    c796 <do_no_page+0x147>
	// 如果缺页对应的逻辑地址tmp小于进程的执行映像文件在逻辑地址空间的末端位置,则说明缺少的页面在进程执行文件映像中,于是可
	// 以从当前进程任务数据机构中取得执行文件的i节点号executable,并计算出该缺页在执行文件映像中的起始数据块号block.若逻辑地址tmp既不在执行文件映像的地址范围内,
	} else if (tmp < current->end_data) {
    c756:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    c75b:	8b 80 20 02 00 00    	mov    0x220(%eax),%eax
    c761:	3b 44 24 2c          	cmp    0x2c(%esp),%eax
    c765:	76 1f                	jbe    c786 <do_no_page+0x137>
		inode = current->executable;									// 执行文件i节点和缺页起始块号.
    c767:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    c76c:	8b 80 3c 03 00 00    	mov    0x33c(%eax),%eax
    c772:	89 44 24 20          	mov    %eax,0x20(%esp)
		block = 1 + tmp / BLOCK_SIZE;
    c776:	8b 44 24 2c          	mov    0x2c(%esp),%eax
    c77a:	c1 e8 0a             	shr    $0xa,%eax
    c77d:	83 c0 01             	add    $0x1,%eax
    c780:	89 44 24 28          	mov    %eax,0x28(%esp)
    c784:	eb 10                	jmp    c796 <do_no_page+0x147>
	// 也不在库文件空间范围内,则说明缺页是进程访问动态申请的内存页面数据所致,因此没有对应i节点和数据块号(都置空).
	} else {
		inode = NULL;													// 是动态申请的数据或栈内存页面.
    c786:	c7 44 24 20 00 00 00 	movl   $0x0,0x20(%esp)
    c78d:	00 
		block = 0;
    c78e:	c7 44 24 28 00 00 00 	movl   $0x0,0x28(%esp)
    c795:	00 
	}
	// 若是进程访问其动态申请的页面或为了存放栈信息而引起的缺页异常,则直接申请一页物理内存页面并映射到线性地址address处即可.
	if (!inode) {														// 是动态申请的数据内存页面.
    c796:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    c79b:	75 14                	jne    c7b1 <do_no_page+0x162>
		get_empty_page(address);
    c79d:	83 ec 0c             	sub    $0xc,%esp
    c7a0:	ff 74 24 50          	pushl  0x50(%esp)
    c7a4:	e8 17 fc ff ff       	call   c3c0 <get_empty_page>
    c7a9:	83 c4 10             	add    $0x10,%esp
		return;
    c7ac:	e9 11 01 00 00       	jmp    c8c2 <do_no_page+0x273>
	}
	// 否则说明所缺页面进程执行文件或库文件范围内,于是就尝试共享页面操作,若成功则退出.
	if (share_page(inode, tmp))											// 尝试逻辑地址tmp处页面的共享.
    c7b1:	83 ec 08             	sub    $0x8,%esp
    c7b4:	ff 74 24 34          	pushl  0x34(%esp)
    c7b8:	ff 74 24 2c          	pushl  0x2c(%esp)
    c7bc:	e8 d9 fd ff ff       	call   c59a <share_page>
    c7c1:	83 c4 10             	add    $0x10,%esp
    c7c4:	85 c0                	test   %eax,%eax
    c7c6:	0f 85 f2 00 00 00    	jne    c8be <do_no_page+0x26f>
		return;
	// 如果共享不成功就只能申请一页物理内存页面page,然后从设备上读取执行文件中的相应页面并放置(映射)到进程页面逻辑地址tmp处.
	if (!(page = get_free_page()))										// 申请一页物理内存.
    c7cc:	e8 6a 08 00 00       	call   d03b <get_free_page>
    c7d1:	89 44 24 1c          	mov    %eax,0x1c(%esp)
    c7d5:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
    c7da:	75 05                	jne    c7e1 <do_no_page+0x192>
		oom();
    c7dc:	e8 a6 f4 ff ff       	call   bc87 <oom>
	/* remember that 1 block is used for header */
	/* 记住,(程序)头要使用1个数据块 */
	// 根据这个块号和执行文件的i节点,我们就可以从映射位图中找到对应块设备中对应的设备逻辑块号(保存在nr[]数组中).利用break_page()
	// 即可把这4个逻辑块读入到物理页面page中.
	for (i = 0 ; i < 4 ; block++, i++)
    c7e1:	c7 44 24 24 00 00 00 	movl   $0x0,0x24(%esp)
    c7e8:	00 
    c7e9:	eb 27                	jmp    c812 <do_no_page+0x1c3>
		nr[i] = bmap(inode, block);
    c7eb:	83 ec 08             	sub    $0x8,%esp
    c7ee:	ff 74 24 30          	pushl  0x30(%esp)
    c7f2:	ff 74 24 2c          	pushl  0x2c(%esp)
    c7f6:	e8 69 1e 00 00       	call   e664 <bmap>
    c7fb:	83 c4 10             	add    $0x10,%esp
    c7fe:	89 c2                	mov    %eax,%edx
    c800:	8b 44 24 24          	mov    0x24(%esp),%eax
    c804:	89 54 84 0c          	mov    %edx,0xc(%esp,%eax,4)
		oom();
	/* remember that 1 block is used for header */
	/* 记住,(程序)头要使用1个数据块 */
	// 根据这个块号和执行文件的i节点,我们就可以从映射位图中找到对应块设备中对应的设备逻辑块号(保存在nr[]数组中).利用break_page()
	// 即可把这4个逻辑块读入到物理页面page中.
	for (i = 0 ; i < 4 ; block++, i++)
    c808:	83 44 24 28 01       	addl   $0x1,0x28(%esp)
    c80d:	83 44 24 24 01       	addl   $0x1,0x24(%esp)
    c812:	83 7c 24 24 03       	cmpl   $0x3,0x24(%esp)
    c817:	7e d2                	jle    c7eb <do_no_page+0x19c>
		nr[i] = bmap(inode, block);
	bread_page(page, inode->i_dev, nr);
    c819:	8b 44 24 20          	mov    0x20(%esp),%eax
    c81d:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    c821:	0f b7 c0             	movzwl %ax,%eax
    c824:	83 ec 04             	sub    $0x4,%esp
    c827:	8d 54 24 10          	lea    0x10(%esp),%edx
    c82b:	52                   	push   %edx
    c82c:	50                   	push   %eax
    c82d:	ff 74 24 28          	pushl  0x28(%esp)
    c831:	e8 ea 2e 00 00       	call   f720 <bread_page>
    c836:	83 c4 10             	add    $0x10,%esp
	// 在读设备逻辑块操作时,可能会出现这样一种情况,即在执行文件中的读取页面位置可能离文件尾不到1个页面的长度.因此就可能读入一些无用
	// 的信息.下面的操作就是把这部分超出执行文件end_data以后的部分进行清零处理.当然,若该页面离末端超过1页,说明不是从执行文件映像中
	// 读取的页面,而是从库文件中读取的,因此不用执行清零操作.
	i = tmp + 4096 - current->end_data;									// 超出的字节长度值.
    c839:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    c83e:	8b 80 20 02 00 00    	mov    0x220(%eax),%eax
    c844:	8b 54 24 2c          	mov    0x2c(%esp),%edx
    c848:	29 c2                	sub    %eax,%edx
    c84a:	89 d0                	mov    %edx,%eax
    c84c:	05 00 10 00 00       	add    $0x1000,%eax
    c851:	89 44 24 24          	mov    %eax,0x24(%esp)
	if (i > 4095)														// 离末端超过1页则不用清零.
    c855:	81 7c 24 24 ff 0f 00 	cmpl   $0xfff,0x24(%esp)
    c85c:	00 
    c85d:	7e 08                	jle    c867 <do_no_page+0x218>
		i = 0;
    c85f:	c7 44 24 24 00 00 00 	movl   $0x0,0x24(%esp)
    c866:	00 
	tmp = page + 4096;
    c867:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    c86b:	05 00 10 00 00       	add    $0x1000,%eax
    c870:	89 44 24 2c          	mov    %eax,0x2c(%esp)
	while (i-- > 0) {
    c874:	eb 0c                	jmp    c882 <do_no_page+0x233>
		tmp--;															// tmp指向页面末端.
    c876:	83 6c 24 2c 01       	subl   $0x1,0x2c(%esp)
		*(char *)tmp = 0;       										// 页面末端i字节清零.
    c87b:	8b 44 24 2c          	mov    0x2c(%esp),%eax
    c87f:	c6 00 00             	movb   $0x0,(%eax)
	// 读取的页面,而是从库文件中读取的,因此不用执行清零操作.
	i = tmp + 4096 - current->end_data;									// 超出的字节长度值.
	if (i > 4095)														// 离末端超过1页则不用清零.
		i = 0;
	tmp = page + 4096;
	while (i-- > 0) {
    c882:	8b 44 24 24          	mov    0x24(%esp),%eax
    c886:	8d 50 ff             	lea    -0x1(%eax),%edx
    c889:	89 54 24 24          	mov    %edx,0x24(%esp)
    c88d:	85 c0                	test   %eax,%eax
    c88f:	7f e5                	jg     c876 <do_no_page+0x227>
		tmp--;															// tmp指向页面末端.
		*(char *)tmp = 0;       										// 页面末端i字节清零.
	}
	// 最后把引起缺页异常的一页物理页面映射到指定线性地址address处.若操作成功就返回.否则就释放内存页,显示内存不够.
	if (put_page(page, address))
    c891:	83 ec 08             	sub    $0x8,%esp
    c894:	ff 74 24 4c          	pushl  0x4c(%esp)
    c898:	ff 74 24 28          	pushl  0x28(%esp)
    c89c:	e8 ac f7 ff ff       	call   c04d <put_page>
    c8a1:	83 c4 10             	add    $0x10,%esp
    c8a4:	85 c0                	test   %eax,%eax
    c8a6:	75 19                	jne    c8c1 <do_no_page+0x272>
		return;
	free_page(page);
    c8a8:	83 ec 0c             	sub    $0xc,%esp
    c8ab:	ff 74 24 28          	pushl  0x28(%esp)
    c8af:	e8 f8 f3 ff ff       	call   bcac <free_page>
    c8b4:	83 c4 10             	add    $0x10,%esp
	oom();
    c8b7:	e8 cb f3 ff ff       	call   bc87 <oom>
    c8bc:	eb 04                	jmp    c8c2 <do_no_page+0x273>
		get_empty_page(address);
		return;
	}
	// 否则说明所缺页面进程执行文件或库文件范围内,于是就尝试共享页面操作,若成功则退出.
	if (share_page(inode, tmp))											// 尝试逻辑地址tmp处页面的共享.
		return;
    c8be:	90                   	nop
    c8bf:	eb 01                	jmp    c8c2 <do_no_page+0x273>
		tmp--;															// tmp指向页面末端.
		*(char *)tmp = 0;       										// 页面末端i字节清零.
	}
	// 最后把引起缺页异常的一页物理页面映射到指定线性地址address处.若操作成功就返回.否则就释放内存页,显示内存不够.
	if (put_page(page, address))
		return;
    c8c1:	90                   	nop
	free_page(page);
	oom();
}
    c8c2:	83 c4 3c             	add    $0x3c,%esp
    c8c5:	c3                   	ret    

0000c8c6 <mem_init>:
// 不用.对于具有16MB内存的PC系统,在没有设置虚拟盘RAMDISK的情况下,共有3072个物理页面可供分配.而范围0~1MB内存空间用于内核系统(其实内核
// 只使用0~640KB,剩下的部分被部分高速缓冲和设备内存占用).
// 参数start_mem是可用作页面分配的主内存区起始地址(已去除RAMDISK所占内存空间).end_mem是实际物理内存最大地址.而地址范围start_mem到
// end_mem是主内存区.
void mem_init(long start_mem, long end_mem)
{
    c8c6:	83 ec 10             	sub    $0x10,%esp
	int i;

	// 首先将1MB到16MB范围内所有内存页面对应的内存映射字节数组项置为已占用状态,即各项字节值全部设置成USED(100).PAGING_PAGES被定义为(
	// PAGING_MEMORY>>12),即1MB以上所有物理内存分页后的内存页面数(15MB/4KB = 3840).
	HIGH_MEMORY = end_mem;									// 设置内存最高端(16MB).
    c8c9:	8b 44 24 18          	mov    0x18(%esp),%eax
    c8cd:	a3 80 f2 02 00       	mov    %eax,0x2f280
	for (i = 0; i < PAGING_PAGES; i++)
    c8d2:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    c8d9:	00 
    c8da:	eb 11                	jmp    c8ed <mem_init+0x27>
		mem_map[i] = USED;
    c8dc:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c8e0:	05 a0 f2 02 00       	add    $0x2f2a0,%eax
    c8e5:	c6 00 64             	movb   $0x64,(%eax)
	int i;

	// 首先将1MB到16MB范围内所有内存页面对应的内存映射字节数组项置为已占用状态,即各项字节值全部设置成USED(100).PAGING_PAGES被定义为(
	// PAGING_MEMORY>>12),即1MB以上所有物理内存分页后的内存页面数(15MB/4KB = 3840).
	HIGH_MEMORY = end_mem;									// 设置内存最高端(16MB).
	for (i = 0; i < PAGING_PAGES; i++)
    c8e8:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    c8ed:	81 7c 24 0c ff 0e 00 	cmpl   $0xeff,0xc(%esp)
    c8f4:	00 
    c8f5:	7e e5                	jle    c8dc <mem_init+0x16>
		mem_map[i] = USED;
	// 然后计算主内存区起始内存start_mem处页面对应内存映射字节数组中项号i和主内存区页面数.此时mem_map[]数组的第i项正对应主内存区中第1个页面.
	// 最后将主内存区中页面对应的数组项清零(表示空闲).对于具有16MB物理内存的系统,mem_map[]中对应4MB~16MB主内存区的项被清零.
	i = MAP_NR(start_mem);									// 主内存区起始位置处页面号.
    c8f7:	8b 44 24 14          	mov    0x14(%esp),%eax
    c8fb:	2d 00 00 10 00       	sub    $0x100000,%eax
    c900:	c1 f8 0c             	sar    $0xc,%eax
    c903:	89 44 24 0c          	mov    %eax,0xc(%esp)
	end_mem -= start_mem;
    c907:	8b 44 24 14          	mov    0x14(%esp),%eax
    c90b:	29 44 24 18          	sub    %eax,0x18(%esp)
	// 得到主内存区的页面的数量
	end_mem >>= 12;											// 主内存区中的总页面数.
    c90f:	c1 7c 24 18 0c       	sarl   $0xc,0x18(%esp)
	// 将主内存区对应的页面数的应用数置零
	while (end_mem-- > 0)
    c914:	eb 12                	jmp    c928 <mem_init+0x62>
		mem_map[i++] = 0;									// 主内存区页面对应字节值清零.
    c916:	8b 44 24 0c          	mov    0xc(%esp),%eax
    c91a:	8d 50 01             	lea    0x1(%eax),%edx
    c91d:	89 54 24 0c          	mov    %edx,0xc(%esp)
    c921:	c6 80 a0 f2 02 00 00 	movb   $0x0,0x2f2a0(%eax)
	i = MAP_NR(start_mem);									// 主内存区起始位置处页面号.
	end_mem -= start_mem;
	// 得到主内存区的页面的数量
	end_mem >>= 12;											// 主内存区中的总页面数.
	// 将主内存区对应的页面数的应用数置零
	while (end_mem-- > 0)
    c928:	8b 44 24 18          	mov    0x18(%esp),%eax
    c92c:	8d 50 ff             	lea    -0x1(%eax),%edx
    c92f:	89 54 24 18          	mov    %edx,0x18(%esp)
    c933:	85 c0                	test   %eax,%eax
    c935:	7f df                	jg     c916 <mem_init+0x50>
		mem_map[i++] = 0;									// 主内存区页面对应字节值清零.
}
    c937:	90                   	nop
    c938:	83 c4 10             	add    $0x10,%esp
    c93b:	c3                   	ret    

0000c93c <show_mem>:
// 显示系统内存信息.
// 根据内存映射字节数组mem_map[]中的信息以及页目录和页表内容统计系统中使用的内存页面数和主内存区中总物理内存页面数.该函数在chr_drv/keyboard.S程序
// 被调用.
// 即当按下"Shift + Scroll Lock"组合键时会显示系统内存统计信息.
void show_mem(void)
{
    c93c:	83 ec 2c             	sub    $0x2c,%esp
	int i, j, k, free = 0, total = 0;
    c93f:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
    c946:	00 
    c947:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    c94e:	00 
	int shared = 0;
    c94f:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    c956:	00 
	unsigned long * pg_tbl;

	// 根据内存映射字节数组mem_map[],统计系统主内存区页面总数total,以及其中空闲页面数free和被共享的页面数shared.并显示这些信息.
	printk("Mem-info:\n\r");
    c957:	83 ec 0c             	sub    $0xc,%esp
    c95a:	68 e6 34 02 00       	push   $0x234e6
    c95f:	e8 e3 c2 ff ff       	call   8c47 <printk>
    c964:	83 c4 10             	add    $0x10,%esp
	for(i = 0 ; i < PAGING_PAGES ; i++) {
    c967:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
    c96e:	00 
    c96f:	eb 4a                	jmp    c9bb <show_mem+0x7f>
		if (mem_map[i] == USED)								// 1MB以上内存系统占用的页面.
    c971:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    c975:	05 a0 f2 02 00       	add    $0x2f2a0,%eax
    c97a:	0f b6 00             	movzbl (%eax),%eax
    c97d:	3c 64                	cmp    $0x64,%al
    c97f:	74 34                	je     c9b5 <show_mem+0x79>
			continue;
		// 统计主内存中的页面数
		total++;
    c981:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
		if (!mem_map[i])
    c986:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    c98a:	05 a0 f2 02 00       	add    $0x2f2a0,%eax
    c98f:	0f b6 00             	movzbl (%eax),%eax
    c992:	84 c0                	test   %al,%al
    c994:	75 07                	jne    c99d <show_mem+0x61>
			// 统计未使用的主内存页面数
			free++;											// 主内存区空闲页面统计.
    c996:	83 44 24 10 01       	addl   $0x1,0x10(%esp)
    c99b:	eb 19                	jmp    c9b6 <show_mem+0x7a>
		else
			// 统计共享页面数
			shared += mem_map[i] - 1;						// 共享的页面数(字节值>1)
    c99d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    c9a1:	05 a0 f2 02 00       	add    $0x2f2a0,%eax
    c9a6:	0f b6 00             	movzbl (%eax),%eax
    c9a9:	0f b6 c0             	movzbl %al,%eax
    c9ac:	83 e8 01             	sub    $0x1,%eax
    c9af:	01 44 24 08          	add    %eax,0x8(%esp)
    c9b3:	eb 01                	jmp    c9b6 <show_mem+0x7a>

	// 根据内存映射字节数组mem_map[],统计系统主内存区页面总数total,以及其中空闲页面数free和被共享的页面数shared.并显示这些信息.
	printk("Mem-info:\n\r");
	for(i = 0 ; i < PAGING_PAGES ; i++) {
		if (mem_map[i] == USED)								// 1MB以上内存系统占用的页面.
			continue;
    c9b5:	90                   	nop
	int shared = 0;
	unsigned long * pg_tbl;

	// 根据内存映射字节数组mem_map[],统计系统主内存区页面总数total,以及其中空闲页面数free和被共享的页面数shared.并显示这些信息.
	printk("Mem-info:\n\r");
	for(i = 0 ; i < PAGING_PAGES ; i++) {
    c9b6:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
    c9bb:	81 7c 24 1c ff 0e 00 	cmpl   $0xeff,0x1c(%esp)
    c9c2:	00 
    c9c3:	7e ac                	jle    c971 <show_mem+0x35>
			free++;											// 主内存区空闲页面统计.
		else
			// 统计共享页面数
			shared += mem_map[i] - 1;						// 共享的页面数(字节值>1)
	}
	printk("%d free pages of %d\n\r", free, total);
    c9c5:	83 ec 04             	sub    $0x4,%esp
    c9c8:	ff 74 24 10          	pushl  0x10(%esp)
    c9cc:	ff 74 24 18          	pushl  0x18(%esp)
    c9d0:	68 f2 34 02 00       	push   $0x234f2
    c9d5:	e8 6d c2 ff ff       	call   8c47 <printk>
    c9da:	83 c4 10             	add    $0x10,%esp
	printk("%d pages shared\n\r", shared);
    c9dd:	83 ec 08             	sub    $0x8,%esp
    c9e0:	ff 74 24 10          	pushl  0x10(%esp)
    c9e4:	68 08 35 02 00       	push   $0x23508
    c9e9:	e8 59 c2 ff ff       	call   8c47 <printk>
    c9ee:	83 c4 10             	add    $0x10,%esp
	// 统计处理器分页管理逻辑页面数.页目录表前4项供内核代码使用,不列为统计范围,因此扫描处理的页目录项从第5项开始.方法是循环处理所有页目录项
	// (除前4个项),若对应的二级页表存在,那么先统计二级页表本身占用的内存页面,然后对该页表中所有页表项对应页面情况进行统计.
	k = 0;													// 一个进程占用页面统计值.
    c9f1:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
    c9f8:	00 
	for(i = 4 ; i < 1024 ;) {
    c9f9:	c7 44 24 1c 04 00 00 	movl   $0x4,0x1c(%esp)
    ca00:	00 
    ca01:	e9 6c 01 00 00       	jmp    cb72 <show_mem+0x236>
		if (1 & pg_dir[i]) {
    ca06:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    ca0a:	8b 04 85 00 00 00 00 	mov    0x0(,%eax,4),%eax
    ca11:	83 e0 01             	and    $0x1,%eax
    ca14:	85 c0                	test   %eax,%eax
    ca16:	0f 84 0e 01 00 00    	je     cb2a <show_mem+0x1ee>
			// (如果页目录项对应二级页表地址大于机器最高物理内存地址HIGH_MEMORY,说明该目录项有问题.于是显示该目录项信息并继续处理下一个目录项.
			if (pg_dir[i] > HIGH_MEMORY) {					// 目录项内容不正常.
    ca1c:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    ca20:	8b 14 85 00 00 00 00 	mov    0x0(,%eax,4),%edx
    ca27:	a1 80 f2 02 00       	mov    0x2f280,%eax
    ca2c:	39 c2                	cmp    %eax,%edx
    ca2e:	76 25                	jbe    ca55 <show_mem+0x119>
				printk("page directory[%d]: %08X\n\r",
    ca30:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    ca34:	8b 04 85 00 00 00 00 	mov    0x0(,%eax,4),%eax
    ca3b:	83 ec 04             	sub    $0x4,%esp
    ca3e:	50                   	push   %eax
    ca3f:	ff 74 24 24          	pushl  0x24(%esp)
    ca43:	68 1a 35 02 00       	push   $0x2351a
    ca48:	e8 fa c1 ff ff       	call   8c47 <printk>
    ca4d:	83 c4 10             	add    $0x10,%esp
					i, pg_dir[i]);
				continue;
    ca50:	e9 1d 01 00 00       	jmp    cb72 <show_mem+0x236>
			}
			// 如果页目录项对应二级页表的"地址"大于LOW_MEM(即1MB),则把一个进程占用的物理内存页统计值k增1,把系统占用的所有物理内存页统计值free增1.
			// 然后邓对应页表地址pg_tb1,并对该页表中所有页表项进行统计.如果当前页表项所指物理页面存在并且该物理页面"地址"大于LOW_MEME,那么就将页表项对应页面
			// 纳入统计值.
			if (pg_dir[i] > LOW_MEM)
    ca55:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    ca59:	8b 04 85 00 00 00 00 	mov    0x0(,%eax,4),%eax
    ca60:	3d 00 00 10 00       	cmp    $0x100000,%eax
    ca65:	76 0a                	jbe    ca71 <show_mem+0x135>
				free++, k++;								// 统计页表占用页面.
    ca67:	83 44 24 10 01       	addl   $0x1,0x10(%esp)
    ca6c:	83 44 24 14 01       	addl   $0x1,0x14(%esp)
			pg_tbl = (unsigned long *) (0xfffff000 & pg_dir[i]);
    ca71:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    ca75:	8b 04 85 00 00 00 00 	mov    0x0(,%eax,4),%eax
    ca7c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
    ca81:	89 44 24 04          	mov    %eax,0x4(%esp)
			for(j = 0 ; j < 1024 ; j++)
    ca85:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
    ca8c:	00 
    ca8d:	e9 8a 00 00 00       	jmp    cb1c <show_mem+0x1e0>
				if ((pg_tbl[j]&1) && pg_tbl[j] > LOW_MEM)
    ca92:	8b 44 24 18          	mov    0x18(%esp),%eax
    ca96:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    ca9d:	8b 44 24 04          	mov    0x4(%esp),%eax
    caa1:	01 d0                	add    %edx,%eax
    caa3:	8b 00                	mov    (%eax),%eax
    caa5:	83 e0 01             	and    $0x1,%eax
    caa8:	85 c0                	test   %eax,%eax
    caaa:	74 6b                	je     cb17 <show_mem+0x1db>
    caac:	8b 44 24 18          	mov    0x18(%esp),%eax
    cab0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    cab7:	8b 44 24 04          	mov    0x4(%esp),%eax
    cabb:	01 d0                	add    %edx,%eax
    cabd:	8b 00                	mov    (%eax),%eax
    cabf:	3d 00 00 10 00       	cmp    $0x100000,%eax
    cac4:	76 51                	jbe    cb17 <show_mem+0x1db>
					// (若该物理页面地址大于机器最高物理内存地址HIGH_MEMORY,则说明该页表项内容有问题,于是显示该页表项内容.否则将页表项对应页面纳入统计值.)
					if (pg_tbl[j] > HIGH_MEMORY)
    cac6:	8b 44 24 18          	mov    0x18(%esp),%eax
    caca:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    cad1:	8b 44 24 04          	mov    0x4(%esp),%eax
    cad5:	01 d0                	add    %edx,%eax
    cad7:	8b 10                	mov    (%eax),%edx
    cad9:	a1 80 f2 02 00       	mov    0x2f280,%eax
    cade:	39 c2                	cmp    %eax,%edx
    cae0:	76 2b                	jbe    cb0d <show_mem+0x1d1>
						printk("page_dir[%d][%d]: %08X\n\r",
							i, j, pg_tbl[j]);
    cae2:	8b 44 24 18          	mov    0x18(%esp),%eax
    cae6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    caed:	8b 44 24 04          	mov    0x4(%esp),%eax
    caf1:	01 d0                	add    %edx,%eax
			pg_tbl = (unsigned long *) (0xfffff000 & pg_dir[i]);
			for(j = 0 ; j < 1024 ; j++)
				if ((pg_tbl[j]&1) && pg_tbl[j] > LOW_MEM)
					// (若该物理页面地址大于机器最高物理内存地址HIGH_MEMORY,则说明该页表项内容有问题,于是显示该页表项内容.否则将页表项对应页面纳入统计值.)
					if (pg_tbl[j] > HIGH_MEMORY)
						printk("page_dir[%d][%d]: %08X\n\r",
    caf3:	8b 00                	mov    (%eax),%eax
    caf5:	50                   	push   %eax
    caf6:	ff 74 24 1c          	pushl  0x1c(%esp)
    cafa:	ff 74 24 24          	pushl  0x24(%esp)
    cafe:	68 35 35 02 00       	push   $0x23535
    cb03:	e8 3f c1 ff ff       	call   8c47 <printk>
    cb08:	83 c4 10             	add    $0x10,%esp
    cb0b:	eb 0a                	jmp    cb17 <show_mem+0x1db>
							i, j, pg_tbl[j]);
					else
						k++, free++;						// 统计责表项对应页面.
    cb0d:	83 44 24 14 01       	addl   $0x1,0x14(%esp)
    cb12:	83 44 24 10 01       	addl   $0x1,0x10(%esp)
			// 然后邓对应页表地址pg_tb1,并对该页表中所有页表项进行统计.如果当前页表项所指物理页面存在并且该物理页面"地址"大于LOW_MEME,那么就将页表项对应页面
			// 纳入统计值.
			if (pg_dir[i] > LOW_MEM)
				free++, k++;								// 统计页表占用页面.
			pg_tbl = (unsigned long *) (0xfffff000 & pg_dir[i]);
			for(j = 0 ; j < 1024 ; j++)
    cb17:	83 44 24 18 01       	addl   $0x1,0x18(%esp)
    cb1c:	81 7c 24 18 ff 03 00 	cmpl   $0x3ff,0x18(%esp)
    cb23:	00 
    cb24:	0f 8e 68 ff ff ff    	jle    ca92 <show_mem+0x156>
					else
						k++, free++;						// 统计责表项对应页面.
		}
		// 因每个任务线性空间长度是64MB,所以一个任务占用16个目录项.因此这每统计了16个目录项就把进程的任务结构占用的页表统计进来.若此时k=0则表示当前的16个页
		// 目录所对应的进程在系统中不存在(没有创建或者已经终止).在显示了对应进程号和其占用的物理内存页统计值k后,将k清零,以用于统计下一个进程占用的内存页面数.
		i++;
    cb2a:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
		if (!(i & 15) && k) {
    cb2f:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    cb33:	83 e0 0f             	and    $0xf,%eax
    cb36:	85 c0                	test   %eax,%eax
    cb38:	75 38                	jne    cb72 <show_mem+0x236>
    cb3a:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
    cb3f:	74 31                	je     cb72 <show_mem+0x236>
			k++, free++;									/* one page/process for task_struct */
    cb41:	83 44 24 14 01       	addl   $0x1,0x14(%esp)
    cb46:	83 44 24 10 01       	addl   $0x1,0x10(%esp)
			printk("Process %d: %d pages\n\r", (i >> 4) - 1, k);
    cb4b:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    cb4f:	c1 f8 04             	sar    $0x4,%eax
    cb52:	83 e8 01             	sub    $0x1,%eax
    cb55:	83 ec 04             	sub    $0x4,%esp
    cb58:	ff 74 24 18          	pushl  0x18(%esp)
    cb5c:	50                   	push   %eax
    cb5d:	68 4e 35 02 00       	push   $0x2354e
    cb62:	e8 e0 c0 ff ff       	call   8c47 <printk>
    cb67:	83 c4 10             	add    $0x10,%esp
			k = 0;
    cb6a:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
    cb71:	00 
	printk("%d free pages of %d\n\r", free, total);
	printk("%d pages shared\n\r", shared);
	// 统计处理器分页管理逻辑页面数.页目录表前4项供内核代码使用,不列为统计范围,因此扫描处理的页目录项从第5项开始.方法是循环处理所有页目录项
	// (除前4个项),若对应的二级页表存在,那么先统计二级页表本身占用的内存页面,然后对该页表中所有页表项对应页面情况进行统计.
	k = 0;													// 一个进程占用页面统计值.
	for(i = 4 ; i < 1024 ;) {
    cb72:	81 7c 24 1c ff 03 00 	cmpl   $0x3ff,0x1c(%esp)
    cb79:	00 
    cb7a:	0f 8e 86 fe ff ff    	jle    ca06 <show_mem+0xca>
			printk("Process %d: %d pages\n\r", (i >> 4) - 1, k);
			k = 0;
		}
	}
	// 最后显示系统中正在使用的内存页面和主内存区中总的内存页面数.
	printk("Memory found: %d (%d)\n\r\n\r", free - shared, total);
    cb80:	8b 44 24 10          	mov    0x10(%esp),%eax
    cb84:	2b 44 24 08          	sub    0x8(%esp),%eax
    cb88:	83 ec 04             	sub    $0x4,%esp
    cb8b:	ff 74 24 10          	pushl  0x10(%esp)
    cb8f:	50                   	push   %eax
    cb90:	68 65 35 02 00       	push   $0x23565
    cb95:	e8 ad c0 ff ff       	call   8c47 <printk>
    cb9a:	83 c4 10             	add    $0x10,%esp
}
    cb9d:	90                   	nop
    cb9e:	83 c4 2c             	add    $0x2c,%esp
    cba1:	c3                   	ret    

0000cba2 <strncmp>:
// 字符串与字符串2的前count个字符进行比较.
// 参数:cs - 字符串1,ct - 字符串2,count - 比较的字符数.
// %0 - eax(__res)返回值,%1 - edi(cs)字符串1指针,%2 - esi(ct)字符串2指针,%3 - ecx(count).
// 返回:如果串1>串2,则返回1;串1=串2,则返回0;串1<串2,则返回-1.
static inline int strncmp(const char * cs, const char * ct, int count)
{
    cba2:	57                   	push   %edi
    cba3:	56                   	push   %esi
register int __res __asm__("ax");							// __res是寄存器变量(eax).
__asm__(
    cba4:	8b 44 24 0c          	mov    0xc(%esp),%eax
    cba8:	8b 54 24 10          	mov    0x10(%esp),%edx
    cbac:	8b 4c 24 14          	mov    0x14(%esp),%ecx
    cbb0:	89 c7                	mov    %eax,%edi
    cbb2:	89 d6                	mov    %edx,%esi
    cbb4:	fc                   	cld    
    cbb5:	49                   	dec    %ecx
    cbb6:	78 08                	js     cbc0 <strncmp+0x1e>
    cbb8:	ac                   	lods   %ds:(%esi),%al
    cbb9:	ae                   	scas   %es:(%edi),%al
    cbba:	75 08                	jne    cbc4 <strncmp+0x22>
    cbbc:	84 c0                	test   %al,%al
    cbbe:	75 f5                	jne    cbb5 <strncmp+0x13>
    cbc0:	31 c0                	xor    %eax,%eax
    cbc2:	eb 09                	jmp    cbcd <strncmp+0x2b>
    cbc4:	b8 01 00 00 00       	mov    $0x1,%eax
    cbc9:	7c 02                	jl     cbcd <strncmp+0x2b>
    cbcb:	f7 d8                	neg    %eax
	"jl 4f\n\t"												// 如果前面比较中串2字符<串1字符,则返回1结束.
	"negl %%eax\n"											// 否则eax=-eax,返回负值,结束.
	"4:"
	:"=a" (__res):"D" (cs), "S" (ct), "c" (count):);
return __res;												// 返回比较结果.
}
    cbcd:	5e                   	pop    %esi
    cbce:	5f                   	pop    %edi
    cbcf:	c3                   	ret    

0000cbd0 <memset>:

// 用字符填写指定长度内存块.
// 用字符c填写s指向的内存区域,共填count字节.
// %0 - eax(字符c),%1 - edi(内存地址),%2 - ecx(字节数count).
static inline void * memset(void * s, char c, int count)
{
    cbd0:	57                   	push   %edi
    cbd1:	83 ec 04             	sub    $0x4,%esp
    cbd4:	8b 44 24 10          	mov    0x10(%esp),%eax
    cbd8:	88 04 24             	mov    %al,(%esp)
__asm__(
    cbdb:	0f b6 04 24          	movzbl (%esp),%eax
    cbdf:	8b 54 24 0c          	mov    0xc(%esp),%edx
    cbe3:	8b 4c 24 14          	mov    0x14(%esp),%ecx
    cbe7:	89 d7                	mov    %edx,%edi
    cbe9:	fc                   	cld    
    cbea:	57                   	push   %edi
    cbeb:	f3 aa                	rep stos %al,%es:(%edi)
    cbed:	5f                   	pop    %edi
		"rep\n\t"											// 重复ecx指定的次数,执行.
		"stosb\n\t"											// 将al中字符存入es:[edi]中,并且edi++.
		"popl %%edi"
		::"a" (c), "D" (s), "c" (count)
		:);
return s;
    cbee:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    cbf2:	83 c4 04             	add    $0x4,%esp
    cbf5:	5f                   	pop    %edi
    cbf6:	c3                   	ret    

0000cbf7 <oom>:
void swap_in(unsigned long *table_ptr);                                             // 把页表项是table_ptr的一页物理内存换出到交换空间

// 下面函数名前关键字volatile用于告诉编译器gcc该函数不会返回.这样可让gcc产生更好的代码,更重要的是使用这个关键字可以避免产生某些(未
//　初始化变量的)假警告信息.
static inline void oom(void)
{
    cbf7:	83 ec 0c             	sub    $0xc,%esp
	printk("out of memory\n\r");
    cbfa:	83 ec 0c             	sub    $0xc,%esp
    cbfd:	68 80 35 02 00       	push   $0x23580
    cc02:	e8 40 c0 ff ff       	call   8c47 <printk>
    cc07:	83 c4 10             	add    $0x10,%esp
    //　do_exit()应该使用退出代码,这里用了信息值SIGSEGV(11).相同值的出错码含义是"资源暂不可用",正好同义.
	do_exit(SIGSEGV);
    cc0a:	83 ec 0c             	sub    $0xc,%esp
    cc0d:	6a 0b                	push   $0xb
    cc0f:	e8 d6 e1 ff ff       	call   adea <do_exit>
    cc14:	83 c4 10             	add    $0x10,%esp
}
    cc17:	90                   	nop
    cc18:	83 c4 0c             	add    $0xc,%esp
    cc1b:	c3                   	ret    

0000cc1c <bit>:
:"r" (nr),"m" (*(addr)),"0" (0)); \
return __res; \
}

// 这里根据不同的op字符定义3个内嵌函数.
bitop(bit, "")								// 定义内嵌函数bit(char * addr, unsigned int nr).
    cc1c:	83 ec 10             	sub    $0x10,%esp
    cc1f:	8b 54 24 18          	mov    0x18(%esp),%edx
    cc23:	8b 4c 24 14          	mov    0x14(%esp),%ecx
    cc27:	b8 00 00 00 00       	mov    $0x0,%eax
    cc2c:	b8 00 00 00 00       	mov    $0x0,%eax
    cc31:	0f a3 11             	bt     %edx,(%ecx)
    cc34:	83 d0 00             	adc    $0x0,%eax
    cc37:	89 44 24 0c          	mov    %eax,0xc(%esp)
    cc3b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    cc3f:	83 c4 10             	add    $0x10,%esp
    cc42:	c3                   	ret    

0000cc43 <setbit>:
bitop(setbit, "s")							// 定义内嵌函数setbit(char * addr, unsigned int nr).
    cc43:	83 ec 10             	sub    $0x10,%esp
    cc46:	8b 54 24 18          	mov    0x18(%esp),%edx
    cc4a:	8b 4c 24 14          	mov    0x14(%esp),%ecx
    cc4e:	b8 00 00 00 00       	mov    $0x0,%eax
    cc53:	b8 00 00 00 00       	mov    $0x0,%eax
    cc58:	0f ab 11             	bts    %edx,(%ecx)
    cc5b:	83 d0 00             	adc    $0x0,%eax
    cc5e:	89 44 24 0c          	mov    %eax,0xc(%esp)
    cc62:	8b 44 24 0c          	mov    0xc(%esp),%eax
    cc66:	83 c4 10             	add    $0x10,%esp
    cc69:	c3                   	ret    

0000cc6a <clrbit>:
bitop(clrbit, "r")							// 定义内嵌函数clrbit(char * addr, unsigned int nr).
    cc6a:	83 ec 10             	sub    $0x10,%esp
    cc6d:	8b 54 24 18          	mov    0x18(%esp),%edx
    cc71:	8b 4c 24 14          	mov    0x14(%esp),%ecx
    cc75:	b8 00 00 00 00       	mov    $0x0,%eax
    cc7a:	b8 00 00 00 00       	mov    $0x0,%eax
    cc7f:	0f b3 11             	btr    %edx,(%ecx)
    cc82:	83 d0 00             	adc    $0x0,%eax
    cc85:	89 44 24 0c          	mov    %eax,0xc(%esp)
    cc89:	8b 44 24 0c          	mov    0xc(%esp),%eax
    cc8d:	83 c4 10             	add    $0x10,%esp
    cc90:	c3                   	ret    

0000cc91 <get_swap_page>:
#define VM_PAGES (LAST_VM_PAGE - FIRST_VM_PAGE)					// = 1032192(从0开始计)(用总的页面数减去第0个任务的页面数)

// 申请1页交换页面.
// 扫描整个交换映射位图(除对应位图本身的位0以外),返回值为1的第一个比特位号,即目前空闲的交换页面号.若操作成功则返回交换页面号,否则返回0.
static int get_swap_page(void)
{
    cc91:	83 ec 10             	sub    $0x10,%esp
	int nr;

	if (!swap_bitmap)
    cc94:	a1 a4 01 03 00       	mov    0x301a4,%eax
    cc99:	85 c0                	test   %eax,%eax
    cc9b:	75 07                	jne    cca4 <get_swap_page+0x13>
		return 0;
    cc9d:	b8 00 00 00 00       	mov    $0x0,%eax
    cca2:	eb 3b                	jmp    ccdf <get_swap_page+0x4e>
	for (nr = 1; nr < 32768 ; nr++)
    cca4:	c7 44 24 0c 01 00 00 	movl   $0x1,0xc(%esp)
    ccab:	00 
    ccac:	eb 22                	jmp    ccd0 <get_swap_page+0x3f>
		if (clrbit(swap_bitmap, nr))
    ccae:	8b 54 24 0c          	mov    0xc(%esp),%edx
    ccb2:	a1 a4 01 03 00       	mov    0x301a4,%eax
    ccb7:	52                   	push   %edx
    ccb8:	50                   	push   %eax
    ccb9:	e8 ac ff ff ff       	call   cc6a <clrbit>
    ccbe:	83 c4 08             	add    $0x8,%esp
    ccc1:	85 c0                	test   %eax,%eax
    ccc3:	74 06                	je     cccb <get_swap_page+0x3a>
			return nr;					// 返回目前空闲的交换页面号.
    ccc5:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ccc9:	eb 14                	jmp    ccdf <get_swap_page+0x4e>
{
	int nr;

	if (!swap_bitmap)
		return 0;
	for (nr = 1; nr < 32768 ; nr++)
    cccb:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    ccd0:	81 7c 24 0c ff 7f 00 	cmpl   $0x7fff,0xc(%esp)
    ccd7:	00 
    ccd8:	7e d4                	jle    ccae <get_swap_page+0x1d>
		if (clrbit(swap_bitmap, nr))
			return nr;					// 返回目前空闲的交换页面号.
	return 0;
    ccda:	b8 00 00 00 00       	mov    $0x0,%eax
}
    ccdf:	83 c4 10             	add    $0x10,%esp
    cce2:	c3                   	ret    

0000cce3 <swap_free>:

// 释放交换设备中指定的交换页面.
// 在交换位图中设置指定页面号对应的位(置1).若原来该位就等于1,则表示交换设备中原来该页面就没有被占用,或者位图出错.于是显示出错信息并返回.
// 参数指定交换页面号.
void swap_free(int swap_nr)
{
    cce3:	83 ec 0c             	sub    $0xc,%esp
	if (!swap_nr)
    cce6:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
    cceb:	74 3d                	je     cd2a <swap_free+0x47>
		return;
	if (swap_bitmap && swap_nr < SWAP_BITS)
    cced:	a1 a4 01 03 00       	mov    0x301a4,%eax
    ccf2:	85 c0                	test   %eax,%eax
    ccf4:	74 21                	je     cd17 <swap_free+0x34>
    ccf6:	81 7c 24 10 ff 7f 00 	cmpl   $0x7fff,0x10(%esp)
    ccfd:	00 
    ccfe:	7f 17                	jg     cd17 <swap_free+0x34>
		if (!setbit(swap_bitmap, swap_nr))
    cd00:	8b 54 24 10          	mov    0x10(%esp),%edx
    cd04:	a1 a4 01 03 00       	mov    0x301a4,%eax
    cd09:	52                   	push   %edx
    cd0a:	50                   	push   %eax
    cd0b:	e8 33 ff ff ff       	call   cc43 <setbit>
    cd10:	83 c4 08             	add    $0x8,%esp
    cd13:	85 c0                	test   %eax,%eax
    cd15:	74 16                	je     cd2d <swap_free+0x4a>
			return;
	printk("Swap-space bad (swap_free())\n\r");
    cd17:	83 ec 0c             	sub    $0xc,%esp
    cd1a:	68 90 35 02 00       	push   $0x23590
    cd1f:	e8 23 bf ff ff       	call   8c47 <printk>
    cd24:	83 c4 10             	add    $0x10,%esp
	return;
    cd27:	90                   	nop
    cd28:	eb 04                	jmp    cd2e <swap_free+0x4b>
// 在交换位图中设置指定页面号对应的位(置1).若原来该位就等于1,则表示交换设备中原来该页面就没有被占用,或者位图出错.于是显示出错信息并返回.
// 参数指定交换页面号.
void swap_free(int swap_nr)
{
	if (!swap_nr)
		return;
    cd2a:	90                   	nop
    cd2b:	eb 01                	jmp    cd2e <swap_free+0x4b>
	if (swap_bitmap && swap_nr < SWAP_BITS)
		if (!setbit(swap_bitmap, swap_nr))
			return;
    cd2d:	90                   	nop
	printk("Swap-space bad (swap_free())\n\r");
	return;
}
    cd2e:	83 c4 0c             	add    $0xc,%esp
    cd31:	c3                   	ret    

0000cd32 <swap_in>:

// 把指定页面交换进内存中
// 把指定页表项的对应页面从交换设备中读入到新申请的内存页面中.修改交换位图中对应位(置位),同时修改页表项内容,让它指向该内存页面,并设置相应标志.
void swap_in(unsigned long *table_ptr)
{
    cd32:	83 ec 1c             	sub    $0x1c,%esp
	int swap_nr;
	unsigned long page;

	// 首先检查交换位图和参数有效性.如果交换位图不存在,或者指定页表项对应的页面已存在于内存中,或者交换页面号为0,则显示警告信息并退出.对于已放到交换
	// 设备中去的内存页面,相应页表项中存放的应是交换页面号*2,即(swap_nr << 1).
	if (!swap_bitmap) {
    cd35:	a1 a4 01 03 00       	mov    0x301a4,%eax
    cd3a:	85 c0                	test   %eax,%eax
    cd3c:	75 15                	jne    cd53 <swap_in+0x21>
		printk("Trying to swap in without swap bit-map");
    cd3e:	83 ec 0c             	sub    $0xc,%esp
    cd41:	68 b0 35 02 00       	push   $0x235b0
    cd46:	e8 fc be ff ff       	call   8c47 <printk>
    cd4b:	83 c4 10             	add    $0x10,%esp
		return;
    cd4e:	e9 ae 00 00 00       	jmp    ce01 <swap_in+0xcf>
	}
	if (1 & *table_ptr) {
    cd53:	8b 44 24 20          	mov    0x20(%esp),%eax
    cd57:	8b 00                	mov    (%eax),%eax
    cd59:	83 e0 01             	and    $0x1,%eax
    cd5c:	85 c0                	test   %eax,%eax
    cd5e:	74 15                	je     cd75 <swap_in+0x43>
		printk("trying to swap in present page\n\r");
    cd60:	83 ec 0c             	sub    $0xc,%esp
    cd63:	68 d8 35 02 00       	push   $0x235d8
    cd68:	e8 da be ff ff       	call   8c47 <printk>
    cd6d:	83 c4 10             	add    $0x10,%esp
		return;
    cd70:	e9 8c 00 00 00       	jmp    ce01 <swap_in+0xcf>
	}
	swap_nr = *table_ptr >> 1;
    cd75:	8b 44 24 20          	mov    0x20(%esp),%eax
    cd79:	8b 00                	mov    (%eax),%eax
    cd7b:	d1 e8                	shr    %eax
    cd7d:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if (!swap_nr) {
    cd81:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    cd86:	75 12                	jne    cd9a <swap_in+0x68>
		printk("No swap page in swap_in\n\r");
    cd88:	83 ec 0c             	sub    $0xc,%esp
    cd8b:	68 f9 35 02 00       	push   $0x235f9
    cd90:	e8 b2 be ff ff       	call   8c47 <printk>
    cd95:	83 c4 10             	add    $0x10,%esp
		return;
    cd98:	eb 67                	jmp    ce01 <swap_in+0xcf>
	}
	// 然后申请一页物理内存并从交换设备中读入页面号为swap_nr的页面.在把页面交换进来后,就把交换位图中对应比特位置位.如果其原本就是置位的,说明此次是再次
	// 从交换设备中读入相同的页面,于是显示一下警告信息.最后让页表指向该物理页面,并设置页面已修改,用户可读写和存在标志(Dirty,U/S,R/W,P).
	if (!(page = get_free_page()))
    cd9a:	e8 9c 02 00 00       	call   d03b <get_free_page>
    cd9f:	89 44 24 08          	mov    %eax,0x8(%esp)
    cda3:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    cda8:	75 05                	jne    cdaf <swap_in+0x7d>
		oom();
    cdaa:	e8 48 fe ff ff       	call   cbf7 <oom>
	read_swap_page(swap_nr, (char *) page);
    cdaf:	8b 54 24 08          	mov    0x8(%esp),%edx
    cdb3:	a1 a0 01 03 00       	mov    0x301a0,%eax
    cdb8:	52                   	push   %edx
    cdb9:	ff 74 24 10          	pushl  0x10(%esp)
    cdbd:	50                   	push   %eax
    cdbe:	6a 00                	push   $0x0
    cdc0:	e8 11 9a 00 00       	call   167d6 <ll_rw_page>
    cdc5:	83 c4 10             	add    $0x10,%esp
	if (setbit(swap_bitmap, swap_nr))
    cdc8:	8b 54 24 0c          	mov    0xc(%esp),%edx
    cdcc:	a1 a4 01 03 00       	mov    0x301a4,%eax
    cdd1:	83 ec 08             	sub    $0x8,%esp
    cdd4:	52                   	push   %edx
    cdd5:	50                   	push   %eax
    cdd6:	e8 68 fe ff ff       	call   cc43 <setbit>
    cddb:	83 c4 10             	add    $0x10,%esp
    cdde:	85 c0                	test   %eax,%eax
    cde0:	74 10                	je     cdf2 <swap_in+0xc0>
		printk("swapping in multiply from same page\n\r");
    cde2:	83 ec 0c             	sub    $0xc,%esp
    cde5:	68 14 36 02 00       	push   $0x23614
    cdea:	e8 58 be ff ff       	call   8c47 <printk>
    cdef:	83 c4 10             	add    $0x10,%esp
	*table_ptr = page | (PAGE_DIRTY | 7);
    cdf2:	8b 44 24 08          	mov    0x8(%esp),%eax
    cdf6:	83 c8 47             	or     $0x47,%eax
    cdf9:	89 c2                	mov    %eax,%edx
    cdfb:	8b 44 24 20          	mov    0x20(%esp),%eax
    cdff:	89 10                	mov    %edx,(%eax)
}
    ce01:	83 c4 1c             	add    $0x1c,%esp
    ce04:	c3                   	ret    

0000ce05 <try_to_swap_out>:

// 尝试把页面交换出去.
// 若页面没有被修改过则不必保存在交换设备中,因为对应页面还可以再直接从相应映像文件中读入.于是可以直接释放掉相应物理页面了事.否则就申请一个交换页面号,然后
// 把页面交换出去.此时交换页面号要保存在对应页表项中,并且仍需要保持页表项存在位P=0.参数是页表项指针.页面换或释放成功返回1,否则返回0.
int try_to_swap_out(unsigned long * table_ptr)
{
    ce05:	83 ec 1c             	sub    $0x1c,%esp
	unsigned long page;
	unsigned long swap_nr;

	// 首先判断参数的有效性.若需要交换出去的内存页面并不存在(或称无效),则即可退出.若页表项指定的物理页面地址大于分页管理的内存高端PAGING_MEMORY(15MB),
	// 也退出.
	page = *table_ptr;
    ce08:	8b 44 24 20          	mov    0x20(%esp),%eax
    ce0c:	8b 00                	mov    (%eax),%eax
    ce0e:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if (!(PAGE_PRESENT & page))
    ce12:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ce16:	83 e0 01             	and    $0x1,%eax
    ce19:	85 c0                	test   %eax,%eax
    ce1b:	75 0a                	jne    ce27 <try_to_swap_out+0x22>
		return 0;
    ce1d:	b8 00 00 00 00       	mov    $0x0,%eax
    ce22:	e9 d4 00 00 00       	jmp    cefb <try_to_swap_out+0xf6>
	if (page - LOW_MEM > PAGING_MEMORY)
    ce27:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ce2b:	2d 00 00 10 00       	sub    $0x100000,%eax
    ce30:	3d 00 00 f0 00       	cmp    $0xf00000,%eax
    ce35:	76 0a                	jbe    ce41 <try_to_swap_out+0x3c>
		return 0;
    ce37:	b8 00 00 00 00       	mov    $0x0,%eax
    ce3c:	e9 ba 00 00 00       	jmp    cefb <try_to_swap_out+0xf6>
	// 若内存页面已被修改过,但是该页面是被共享的,那么为了提高运行效率,此类页面不宜被交换出去,于是直接退出,函数返回0.否则就申请一交换页面号,并把它保存在页表
	// 项中,然后把页面交换出去并释放对应物理内存页面.
	if (PAGE_DIRTY & page) {
    ce41:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ce45:	83 e0 40             	and    $0x40,%eax
    ce48:	85 c0                	test   %eax,%eax
    ce4a:	0f 84 85 00 00 00    	je     ced5 <try_to_swap_out+0xd0>
		page &= 0xfffff000;									// 取物理页面地址.
    ce50:	81 64 24 0c 00 f0 ff 	andl   $0xfffff000,0xc(%esp)
    ce57:	ff 
		if (mem_map[MAP_NR(page)] != 1)
    ce58:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ce5c:	2d 00 00 10 00       	sub    $0x100000,%eax
    ce61:	c1 e8 0c             	shr    $0xc,%eax
    ce64:	0f b6 80 a0 f2 02 00 	movzbl 0x2f2a0(%eax),%eax
    ce6b:	3c 01                	cmp    $0x1,%al
    ce6d:	74 0a                	je     ce79 <try_to_swap_out+0x74>
			return 0;
    ce6f:	b8 00 00 00 00       	mov    $0x0,%eax
    ce74:	e9 82 00 00 00       	jmp    cefb <try_to_swap_out+0xf6>
		if (!(swap_nr = get_swap_page()))					// 申请交换页面号.
    ce79:	e8 13 fe ff ff       	call   cc91 <get_swap_page>
    ce7e:	89 44 24 08          	mov    %eax,0x8(%esp)
    ce82:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    ce87:	75 07                	jne    ce90 <try_to_swap_out+0x8b>
			return 0;
    ce89:	b8 00 00 00 00       	mov    $0x0,%eax
    ce8e:	eb 6b                	jmp    cefb <try_to_swap_out+0xf6>
		// 对于要交换设备中的页面,相应页表项中将存放的是(swap_nr << 1).乘2(左移1位)是为了空出原来页表项的存在位(P).只有存在位P=0并且页表项内容不为0的页面才会在
		// 交换设备中.Intel手册中明确指出,当一个表项的存在位P=0时(无效页表项),所有其他位(位31-1)可供随意使用.下面写交换页函数write_swap_page(nr,buffer)被
		// 定义为ll_rw_page(WRITE,SWAP_DEV,(nr),(buffer)).
		*table_ptr = swap_nr << 1;
    ce90:	8b 44 24 08          	mov    0x8(%esp),%eax
    ce94:	8d 14 00             	lea    (%eax,%eax,1),%edx
    ce97:	8b 44 24 20          	mov    0x20(%esp),%eax
    ce9b:	89 10                	mov    %edx,(%eax)
		invalidate();										// 刷新CPU页变换高速缓冲.
    ce9d:	b8 00 00 00 00       	mov    $0x0,%eax
    cea2:	0f 22 d8             	mov    %eax,%cr3
		write_swap_page(swap_nr, (char *) page);
    cea5:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
    cea9:	8b 54 24 08          	mov    0x8(%esp),%edx
    cead:	a1 a0 01 03 00       	mov    0x301a0,%eax
    ceb2:	51                   	push   %ecx
    ceb3:	52                   	push   %edx
    ceb4:	50                   	push   %eax
    ceb5:	6a 01                	push   $0x1
    ceb7:	e8 1a 99 00 00       	call   167d6 <ll_rw_page>
    cebc:	83 c4 10             	add    $0x10,%esp
		free_page(page);
    cebf:	83 ec 0c             	sub    $0xc,%esp
    cec2:	ff 74 24 18          	pushl  0x18(%esp)
    cec6:	e8 e1 ed ff ff       	call   bcac <free_page>
    cecb:	83 c4 10             	add    $0x10,%esp
		return 1;
    cece:	b8 01 00 00 00       	mov    $0x1,%eax
    ced3:	eb 26                	jmp    cefb <try_to_swap_out+0xf6>
	}
	// 否则表明页面没有修改过.那么就不用交换出去,而直接释放即可.
	*table_ptr = 0;
    ced5:	8b 44 24 20          	mov    0x20(%esp),%eax
    ced9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	invalidate();
    cedf:	b8 00 00 00 00       	mov    $0x0,%eax
    cee4:	0f 22 d8             	mov    %eax,%cr3
	free_page(page);
    cee7:	83 ec 0c             	sub    $0xc,%esp
    ceea:	ff 74 24 18          	pushl  0x18(%esp)
    ceee:	e8 b9 ed ff ff       	call   bcac <free_page>
    cef3:	83 c4 10             	add    $0x10,%esp
	return 1;
    cef6:	b8 01 00 00 00       	mov    $0x1,%eax
}
    cefb:	83 c4 1c             	add    $0x1c,%esp
    cefe:	c3                   	ret    

0000ceff <swap_out>:
 */
// 把内存页面放到交换设备中.
// 从线性地址64MB对应的目录项(FIRST_VM_PAGE>>10)开始,搜索整个4GB线性空间,对有效页目录二级页表指定的物理内存页面执行交换
// 到交换设备中去的尝试.一旦成功地交换出一个页面,就返回-1.否则返回0.该函数会在get_free_page()中被调用.
int swap_out(void)
{
    ceff:	83 ec 1c             	sub    $0x1c,%esp
	static int dir_entry = FIRST_VM_PAGE >> 10;	// 即任务1的第1个目录项索引.
	static int page_entry = -1;
	int counter = VM_PAGES;						// 表示除去任务0以外的其他任务的所有页数目
    cf02:	c7 44 24 0c 00 c0 0f 	movl   $0xfc000,0xc(%esp)
    cf09:	00 
	int pg_table;

	// 首先搜索页目录表,查找二级页表存在的页目录项pg_table.找到则退出循环,否则高速页目录项数对应剩余二级页表项数counter,然后继续
	// 检测下一项目录项.若全部搜索完还没有找到适合的(存在的)页目录项,就重新搜索.
	while (counter > 0) {
    cf0a:	eb 46                	jmp    cf52 <swap_out+0x53>
		pg_table = pg_dir[dir_entry];			// 页目录项内容.
    cf0c:	a1 50 e3 02 00       	mov    0x2e350,%eax
    cf11:	8b 04 85 00 00 00 00 	mov    0x0(,%eax,4),%eax
    cf18:	89 44 24 08          	mov    %eax,0x8(%esp)
		if (pg_table & 1)
    cf1c:	8b 44 24 08          	mov    0x8(%esp),%eax
    cf20:	83 e0 01             	and    $0x1,%eax
    cf23:	85 c0                	test   %eax,%eax
    cf25:	75 34                	jne    cf5b <swap_out+0x5c>
			break;
		counter -= 1024;						// 1个页表对应1024个页帧
    cf27:	81 6c 24 0c 00 04 00 	subl   $0x400,0xc(%esp)
    cf2e:	00 
		dir_entry++;							// 下一目录项.
    cf2f:	a1 50 e3 02 00       	mov    0x2e350,%eax
    cf34:	83 c0 01             	add    $0x1,%eax
    cf37:	a3 50 e3 02 00       	mov    %eax,0x2e350
		// 如果整个4GB的1024个页目录项检查完了则又回到第1个任务重新开始检查
		if (dir_entry >= 1024)
    cf3c:	a1 50 e3 02 00       	mov    0x2e350,%eax
    cf41:	3d ff 03 00 00       	cmp    $0x3ff,%eax
    cf46:	7e 0a                	jle    cf52 <swap_out+0x53>
			dir_entry = FIRST_VM_PAGE >> 10;
    cf48:	c7 05 50 e3 02 00 10 	movl   $0x10,0x2e350
    cf4f:	00 00 00 
	int counter = VM_PAGES;						// 表示除去任务0以外的其他任务的所有页数目
	int pg_table;

	// 首先搜索页目录表,查找二级页表存在的页目录项pg_table.找到则退出循环,否则高速页目录项数对应剩余二级页表项数counter,然后继续
	// 检测下一项目录项.若全部搜索完还没有找到适合的(存在的)页目录项,就重新搜索.
	while (counter > 0) {
    cf52:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    cf57:	7f b3                	jg     cf0c <swap_out+0xd>
    cf59:	eb 01                	jmp    cf5c <swap_out+0x5d>
		pg_table = pg_dir[dir_entry];			// 页目录项内容.
		if (pg_table & 1)
			break;
    cf5b:	90                   	nop
		if (dir_entry >= 1024)
			dir_entry = FIRST_VM_PAGE >> 10;
	}
	// 在取得当前目录项的页表指针后,针对该页表中的所有1024个页面,逐一调用交换函数try_to_swap_out()尝试交换出去.一旦某个页面成功交换到交换设备
	// 中就返回1.若对所有目录项的所有页表都已尝试失败,则显示"交换内存用完"的警告,并返回0.
	pg_table &= 0xfffff000;						// 页表指针(地址)(页对齐)
    cf5c:	81 64 24 08 00 f0 ff 	andl   $0xfffff000,0x8(%esp)
    cf63:	ff 
	while (counter-- > 0) {
    cf64:	e9 a3 00 00 00       	jmp    d00c <swap_out+0x10d>
		page_entry++;
    cf69:	a1 54 e3 02 00       	mov    0x2e354,%eax
    cf6e:	83 c0 01             	add    $0x1,%eax
    cf71:	a3 54 e3 02 00       	mov    %eax,0x2e354
		// 如果已经尝试处理完当前页表所有项还没有能够成功地交换出一个页面,即此时页表项索引大于等于1024,则如同前面第135-143行执行相同的处理来选出一个
		// 二级页表存在的页目录项,并取得相应二级页表指针.
		if (page_entry >= 1024) {
    cf76:	a1 54 e3 02 00       	mov    0x2e354,%eax
    cf7b:	3d ff 03 00 00       	cmp    $0x3ff,%eax
    cf80:	7e 61                	jle    cfe3 <swap_out+0xe4>
			page_entry = 0;
    cf82:	c7 05 54 e3 02 00 00 	movl   $0x0,0x2e354
    cf89:	00 00 00 
		repeat:
			dir_entry++;
    cf8c:	a1 50 e3 02 00       	mov    0x2e350,%eax
    cf91:	83 c0 01             	add    $0x1,%eax
    cf94:	a3 50 e3 02 00       	mov    %eax,0x2e350
			if (dir_entry >= 1024)
    cf99:	a1 50 e3 02 00       	mov    0x2e350,%eax
    cf9e:	3d ff 03 00 00       	cmp    $0x3ff,%eax
    cfa3:	7e 0a                	jle    cfaf <swap_out+0xb0>
				dir_entry = FIRST_VM_PAGE >> 10;
    cfa5:	c7 05 50 e3 02 00 10 	movl   $0x10,0x2e350
    cfac:	00 00 00 
			pg_table = pg_dir[dir_entry];		// 页目录项内容.
    cfaf:	a1 50 e3 02 00       	mov    0x2e350,%eax
    cfb4:	8b 04 85 00 00 00 00 	mov    0x0(,%eax,4),%eax
    cfbb:	89 44 24 08          	mov    %eax,0x8(%esp)
			if (!(pg_table & 1))
    cfbf:	8b 44 24 08          	mov    0x8(%esp),%eax
    cfc3:	83 e0 01             	and    $0x1,%eax
    cfc6:	85 c0                	test   %eax,%eax
    cfc8:	75 11                	jne    cfdb <swap_out+0xdc>
				if ((counter -= 1024) > 0)
    cfca:	81 6c 24 0c 00 04 00 	subl   $0x400,0xc(%esp)
    cfd1:	00 
    cfd2:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    cfd7:	7e 48                	jle    d021 <swap_out+0x122>
					goto repeat;
    cfd9:	eb b1                	jmp    cf8c <swap_out+0x8d>
				else
					break;
			pg_table &= 0xfffff000;				// 页表指针.
    cfdb:	81 64 24 08 00 f0 ff 	andl   $0xfffff000,0x8(%esp)
    cfe2:	ff 
		}
		if (try_to_swap_out(page_entry + (unsigned long *) pg_table))
    cfe3:	a1 54 e3 02 00       	mov    0x2e354,%eax
    cfe8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    cfef:	8b 44 24 08          	mov    0x8(%esp),%eax
    cff3:	01 d0                	add    %edx,%eax
    cff5:	83 ec 0c             	sub    $0xc,%esp
    cff8:	50                   	push   %eax
    cff9:	e8 07 fe ff ff       	call   ce05 <try_to_swap_out>
    cffe:	83 c4 10             	add    $0x10,%esp
    d001:	85 c0                	test   %eax,%eax
    d003:	74 07                	je     d00c <swap_out+0x10d>
			return 1;
    d005:	b8 01 00 00 00       	mov    $0x1,%eax
    d00a:	eb 2b                	jmp    d037 <swap_out+0x138>
			dir_entry = FIRST_VM_PAGE >> 10;
	}
	// 在取得当前目录项的页表指针后,针对该页表中的所有1024个页面,逐一调用交换函数try_to_swap_out()尝试交换出去.一旦某个页面成功交换到交换设备
	// 中就返回1.若对所有目录项的所有页表都已尝试失败,则显示"交换内存用完"的警告,并返回0.
	pg_table &= 0xfffff000;						// 页表指针(地址)(页对齐)
	while (counter-- > 0) {
    d00c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d010:	8d 50 ff             	lea    -0x1(%eax),%edx
    d013:	89 54 24 0c          	mov    %edx,0xc(%esp)
    d017:	85 c0                	test   %eax,%eax
    d019:	0f 8f 4a ff ff ff    	jg     cf69 <swap_out+0x6a>
    d01f:	eb 01                	jmp    d022 <swap_out+0x123>
			pg_table = pg_dir[dir_entry];		// 页目录项内容.
			if (!(pg_table & 1))
				if ((counter -= 1024) > 0)
					goto repeat;
				else
					break;
    d021:	90                   	nop
			pg_table &= 0xfffff000;				// 页表指针.
		}
		if (try_to_swap_out(page_entry + (unsigned long *) pg_table))
			return 1;
        }
	printk("Out of swap-memory\n\r");
    d022:	83 ec 0c             	sub    $0xc,%esp
    d025:	68 3a 36 02 00       	push   $0x2363a
    d02a:	e8 18 bc ff ff       	call   8c47 <printk>
    d02f:	83 c4 10             	add    $0x10,%esp
	return 0;
    d032:	b8 00 00 00 00       	mov    $0x0,%eax
}
    d037:	83 c4 1c             	add    $0x1c,%esp
    d03a:	c3                   	ret    

0000d03b <get_free_page>:
// 上面%4寄存器实际指向mem_map[]内存字节位图的最后一个字节.本函数从位图末端开始向前扫描所有页面标志(页面总数为PAGING_AGES),若有页面空闲
// (内存位图字节为0)则返回页面地址.注意!本函数只是指出在主内存区的一页空闲物理页面,但并没有映射到某个进程的地址空间中去.后面的put_page()函数
// 即用于把指定页面映射到某个进程的地址空间中.当然对于内核使用本函数并不需要再使用put_page()进行映射,因为内核代码和数据空间(16MB)已经对等
// 地映射到物理地址空间.
unsigned long get_free_page(void)
{
    d03b:	57                   	push   %edi
    d03c:	53                   	push   %ebx
    d03d:	83 ec 04             	sub    $0x4,%esp
		"movl %%edx, %%eax							/* 将页面起始地址->eax(返回值). */\n\t"
		"1:\n\t"
		"cld"
		:"=a" (__res)
		:"0" (0), "i" (LOW_MEM), "c" (PAGING_PAGES),
		"D" (mem_map + PAGING_PAGES - 1)
    d040:	bb 9f 01 03 00       	mov    $0x3019f,%ebx
register unsigned long __res;

// 首先在内存映射字节位图中查找址为0的字节项,然后把对应物理内存页面清零.如果得到的页面地址大于实际物理内存容量则重新寻找.如果没有找到空闲页面则
// 去调用执行交换处理,并重新查找.最后返回空闲物理页面地址.
repeat:
	__asm__(
    d045:	b8 00 00 00 00       	mov    $0x0,%eax
    d04a:	b9 00 0f 00 00       	mov    $0xf00,%ecx
    d04f:	89 df                	mov    %ebx,%edi
    d051:	fd                   	std    
    d052:	f2 ae                	repnz scas %es:(%edi),%al
    d054:	75 1e                	jne    d074 <get_free_page+0x39>
    d056:	c6 47 01 01          	movb   $0x1,0x1(%edi)
    d05a:	c1 e1 0c             	shl    $0xc,%ecx
    d05d:	81 c1 00 00 10 00    	add    $0x100000,%ecx
    d063:	89 ca                	mov    %ecx,%edx
    d065:	b9 00 04 00 00       	mov    $0x400,%ecx
    d06a:	8d ba fc 0f 00 00    	lea    0xffc(%edx),%edi
    d070:	f3 ab                	rep stos %eax,%es:(%edi)
    d072:	89 d0                	mov    %edx,%eax
    d074:	fc                   	cld    
    d075:	89 c3                	mov    %eax,%ebx
		"cld"
		:"=a" (__res)
		:"0" (0), "i" (LOW_MEM), "c" (PAGING_PAGES),
		"D" (mem_map + PAGING_PAGES - 1)
		:"dx");
	if (__res >= HIGH_MEMORY)						// 页面地址大于实际内存容量则重新寻找
    d077:	a1 80 f2 02 00       	mov    0x2f280,%eax
    d07c:	39 c3                	cmp    %eax,%ebx
    d07e:	72 02                	jb     d082 <get_free_page+0x47>
		goto repeat;
    d080:	eb be                	jmp    d040 <get_free_page+0x5>
	if (!__res && swap_out())						// 若没有得到空闲页面则执行交换处理,并重新查找.
    d082:	85 db                	test   %ebx,%ebx
    d084:	75 0b                	jne    d091 <get_free_page+0x56>
    d086:	e8 74 fe ff ff       	call   ceff <swap_out>
    d08b:	85 c0                	test   %eax,%eax
    d08d:	74 02                	je     d091 <get_free_page+0x56>
		goto repeat;
    d08f:	eb af                	jmp    d040 <get_free_page+0x5>
	return __res;									// 返回空闲物理页面地址.
    d091:	89 d8                	mov    %ebx,%eax
}
    d093:	83 c4 04             	add    $0x4,%esp
    d096:	5b                   	pop    %ebx
    d097:	5f                   	pop    %edi
    d098:	c3                   	ret    

0000d099 <init_swapping>:

// 内存交换初始化.
void init_swapping(void)
{
    d099:	83 ec 1c             	sub    $0x1c,%esp
	// blk_size[]指向指定主设备号的块设备块数数组.该块数数组每一项对应一个设备上所拥有的数据块总数(1块大小=1KB).
	extern int *blk_size[];							// blk_drv/ll_rw_blk.c
	int swap_size, i, j;

	// 如果没有定义交换设备则返回.如果交换设备没有设置块数数组,则显示并返回.
	if (!SWAP_DEV)
    d09c:	a1 a0 01 03 00       	mov    0x301a0,%eax
    d0a1:	85 c0                	test   %eax,%eax
    d0a3:	0f 84 2c 02 00 00    	je     d2d5 <init_swapping+0x23c>
		return;
	if (!blk_size[MAJOR(SWAP_DEV)]) {
    d0a9:	a1 a0 01 03 00       	mov    0x301a0,%eax
    d0ae:	c1 e8 08             	shr    $0x8,%eax
    d0b1:	8b 04 85 38 11 03 00 	mov    0x31138(,%eax,4),%eax
    d0b8:	85 c0                	test   %eax,%eax
    d0ba:	75 15                	jne    d0d1 <init_swapping+0x38>
		printk("Unable to get size of swap device\n\r");
    d0bc:	83 ec 0c             	sub    $0xc,%esp
    d0bf:	68 50 36 02 00       	push   $0x23650
    d0c4:	e8 7e bb ff ff       	call   8c47 <printk>
    d0c9:	83 c4 10             	add    $0x10,%esp
		return;
    d0cc:	e9 08 02 00 00       	jmp    d2d9 <init_swapping+0x240>
	}
	// 取指定交换设备号的交换区数据块总数swap_size.若为0则返回,若总块数小于100块则显示信息"交换设备区太小",然后退出.
	swap_size = blk_size[MAJOR(SWAP_DEV)][MINOR(SWAP_DEV)];
    d0d1:	a1 a0 01 03 00       	mov    0x301a0,%eax
    d0d6:	c1 e8 08             	shr    $0x8,%eax
    d0d9:	8b 04 85 38 11 03 00 	mov    0x31138(,%eax,4),%eax
    d0e0:	8b 15 a0 01 03 00    	mov    0x301a0,%edx
    d0e6:	0f b6 d2             	movzbl %dl,%edx
    d0e9:	c1 e2 02             	shl    $0x2,%edx
    d0ec:	01 d0                	add    %edx,%eax
    d0ee:	8b 00                	mov    (%eax),%eax
    d0f0:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if (!swap_size)
    d0f4:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d0f9:	0f 84 d9 01 00 00    	je     d2d8 <init_swapping+0x23f>
		return;
	if (swap_size < 100) {
    d0ff:	83 7c 24 0c 63       	cmpl   $0x63,0xc(%esp)
    d104:	7f 19                	jg     d11f <init_swapping+0x86>
		printk("Swap device too small (%d blocks)\n\r", swap_size);
    d106:	83 ec 08             	sub    $0x8,%esp
    d109:	ff 74 24 14          	pushl  0x14(%esp)
    d10d:	68 74 36 02 00       	push   $0x23674
    d112:	e8 30 bb ff ff       	call   8c47 <printk>
    d117:	83 c4 10             	add    $0x10,%esp
		return;
    d11a:	e9 ba 01 00 00       	jmp    d2d9 <init_swapping+0x240>
	}
	// 每页4个数据块,所以swap_size >>= 2计算出交换页面总数.
	// 交换数据块总数转换成对应可交换页面总数.该值不能大于SWAP_BITS所能表示的页面数.即交换页面总数不得大于32768.
	swap_size >>= 2;
    d11f:	c1 7c 24 0c 02       	sarl   $0x2,0xc(%esp)
	if (swap_size > SWAP_BITS)
    d124:	81 7c 24 0c 00 80 00 	cmpl   $0x8000,0xc(%esp)
    d12b:	00 
    d12c:	7e 08                	jle    d136 <init_swapping+0x9d>
		swap_size = SWAP_BITS;
    d12e:	c7 44 24 0c 00 80 00 	movl   $0x8000,0xc(%esp)
    d135:	00 
	// 然后申请一页物理内存来存放交换页面映射数组swap_bitmap,其中每1比特代表1页交换页面
	swap_bitmap = (char *) get_free_page();
    d136:	e8 00 ff ff ff       	call   d03b <get_free_page>
    d13b:	a3 a4 01 03 00       	mov    %eax,0x301a4
	if (!swap_bitmap) {
    d140:	a1 a4 01 03 00       	mov    0x301a4,%eax
    d145:	85 c0                	test   %eax,%eax
    d147:	75 15                	jne    d15e <init_swapping+0xc5>
		printk("Unable to start swapping: out of memory :-)\n\r");
    d149:	83 ec 0c             	sub    $0xc,%esp
    d14c:	68 98 36 02 00       	push   $0x23698
    d151:	e8 f1 ba ff ff       	call   8c47 <printk>
    d156:	83 c4 10             	add    $0x10,%esp
		return;
    d159:	e9 7b 01 00 00       	jmp    d2d9 <init_swapping+0x240>
	}
	// read_swap_page(nr,buffer)被定义为ll_rw_page(READ,SWAP_DEV,(nr),(buffer)).这里把交换设备上的页面０读到swap_bitmap页面中.该页面
	//　是交换区管理页面.其中第4086字节开始处含有１０个字符的交换设备特征字符串"SWAP-SPACE".若没有找到该特征字符串,则说明不是一个有效的交换设备.
	// 于是显示信息,释放刚申请的物理页面并退出函数.否则将特征字符串字节清零.
	read_swap_page(0, swap_bitmap);
    d15e:	8b 15 a4 01 03 00    	mov    0x301a4,%edx
    d164:	a1 a0 01 03 00       	mov    0x301a0,%eax
    d169:	52                   	push   %edx
    d16a:	6a 00                	push   $0x0
    d16c:	50                   	push   %eax
    d16d:	6a 00                	push   $0x0
    d16f:	e8 62 96 00 00       	call   167d6 <ll_rw_page>
    d174:	83 c4 10             	add    $0x10,%esp
	if (strncmp("SWAP-SPACE", swap_bitmap + 4086, 10)) {
    d177:	a1 a4 01 03 00       	mov    0x301a4,%eax
    d17c:	05 f6 0f 00 00       	add    $0xff6,%eax
    d181:	83 ec 04             	sub    $0x4,%esp
    d184:	6a 0a                	push   $0xa
    d186:	50                   	push   %eax
    d187:	68 c6 36 02 00       	push   $0x236c6
    d18c:	e8 11 fa ff ff       	call   cba2 <strncmp>
    d191:	83 c4 10             	add    $0x10,%esp
    d194:	85 c0                	test   %eax,%eax
    d196:	74 30                	je     d1c8 <init_swapping+0x12f>
		printk("Unable to find swap-space signature\n\r");
    d198:	83 ec 0c             	sub    $0xc,%esp
    d19b:	68 d4 36 02 00       	push   $0x236d4
    d1a0:	e8 a2 ba ff ff       	call   8c47 <printk>
    d1a5:	83 c4 10             	add    $0x10,%esp
		free_page((long) swap_bitmap);
    d1a8:	a1 a4 01 03 00       	mov    0x301a4,%eax
    d1ad:	83 ec 0c             	sub    $0xc,%esp
    d1b0:	50                   	push   %eax
    d1b1:	e8 f6 ea ff ff       	call   bcac <free_page>
    d1b6:	83 c4 10             	add    $0x10,%esp
		swap_bitmap = NULL;
    d1b9:	c7 05 a4 01 03 00 00 	movl   $0x0,0x301a4
    d1c0:	00 00 00 
		return;
    d1c3:	e9 11 01 00 00       	jmp    d2d9 <init_swapping+0x240>
	}
	// 将交换设备的标志字符串"SWAP-SPACE"字符串清空
	memset(swap_bitmap + 4086, 0, 10);
    d1c8:	a1 a4 01 03 00       	mov    0x301a4,%eax
    d1cd:	05 f6 0f 00 00       	add    $0xff6,%eax
    d1d2:	83 ec 04             	sub    $0x4,%esp
    d1d5:	6a 0a                	push   $0xa
    d1d7:	6a 00                	push   $0x0
    d1d9:	50                   	push   %eax
    d1da:	e8 f1 f9 ff ff       	call   cbd0 <memset>
    d1df:	83 c4 10             	add    $0x10,%esp
	// 然后检查读入的交换位映射图.应该32768个位全为0,若位图中有置位的位0,则表示位图有问题,于是显示出错信息,释放位图占用的页面并退出函数.为了加快检查速度,
	// 这里首先仅挑选查看位图0和最后一个交换页面对应的位,即swap_size交换页面对应的位,以及随后到SWAP_BITS(32768)位.
	for (i = 0 ; i < SWAP_BITS ; i++) {
    d1e2:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    d1e9:	00 
    d1ea:	eb 5e                	jmp    d24a <init_swapping+0x1b1>
		if (i == 1)
    d1ec:	83 7c 24 08 01       	cmpl   $0x1,0x8(%esp)
    d1f1:	75 08                	jne    d1fb <init_swapping+0x162>
			i = swap_size;
    d1f3:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d1f7:	89 44 24 08          	mov    %eax,0x8(%esp)
		if (bit(swap_bitmap, i)) {
    d1fb:	8b 54 24 08          	mov    0x8(%esp),%edx
    d1ff:	a1 a4 01 03 00       	mov    0x301a4,%eax
    d204:	83 ec 08             	sub    $0x8,%esp
    d207:	52                   	push   %edx
    d208:	50                   	push   %eax
    d209:	e8 0e fa ff ff       	call   cc1c <bit>
    d20e:	83 c4 10             	add    $0x10,%esp
    d211:	85 c0                	test   %eax,%eax
    d213:	74 30                	je     d245 <init_swapping+0x1ac>
			printk("Bad swap-space bit-map\n\r");
    d215:	83 ec 0c             	sub    $0xc,%esp
    d218:	68 fa 36 02 00       	push   $0x236fa
    d21d:	e8 25 ba ff ff       	call   8c47 <printk>
    d222:	83 c4 10             	add    $0x10,%esp
			free_page((long) swap_bitmap);
    d225:	a1 a4 01 03 00       	mov    0x301a4,%eax
    d22a:	83 ec 0c             	sub    $0xc,%esp
    d22d:	50                   	push   %eax
    d22e:	e8 79 ea ff ff       	call   bcac <free_page>
    d233:	83 c4 10             	add    $0x10,%esp
			swap_bitmap = NULL;
    d236:	c7 05 a4 01 03 00 00 	movl   $0x0,0x301a4
    d23d:	00 00 00 
			return;
    d240:	e9 94 00 00 00       	jmp    d2d9 <init_swapping+0x240>
	}
	// 将交换设备的标志字符串"SWAP-SPACE"字符串清空
	memset(swap_bitmap + 4086, 0, 10);
	// 然后检查读入的交换位映射图.应该32768个位全为0,若位图中有置位的位0,则表示位图有问题,于是显示出错信息,释放位图占用的页面并退出函数.为了加快检查速度,
	// 这里首先仅挑选查看位图0和最后一个交换页面对应的位,即swap_size交换页面对应的位,以及随后到SWAP_BITS(32768)位.
	for (i = 0 ; i < SWAP_BITS ; i++) {
    d245:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    d24a:	81 7c 24 08 ff 7f 00 	cmpl   $0x7fff,0x8(%esp)
    d251:	00 
    d252:	7e 98                	jle    d1ec <init_swapping+0x153>
			return;
		}
	}
	// 然后再仔细地检测位1到位swap_size所有位是否为0.若存在不是0的位,则表示位图有问题,于是释放位图占用的页面并退出函数.否则显示交换设备工作正常以及交换页面
	// 和交换空间总字节数.
	j = 0;
    d254:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
    d25b:	00 
	for (i = 1 ; i < swap_size ; i++)
    d25c:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
    d263:	00 
    d264:	eb 24                	jmp    d28a <init_swapping+0x1f1>
		if (bit(swap_bitmap, i))
    d266:	8b 54 24 08          	mov    0x8(%esp),%edx
    d26a:	a1 a4 01 03 00       	mov    0x301a4,%eax
    d26f:	83 ec 08             	sub    $0x8,%esp
    d272:	52                   	push   %edx
    d273:	50                   	push   %eax
    d274:	e8 a3 f9 ff ff       	call   cc1c <bit>
    d279:	83 c4 10             	add    $0x10,%esp
    d27c:	85 c0                	test   %eax,%eax
    d27e:	74 05                	je     d285 <init_swapping+0x1ec>
			j++;
    d280:	83 44 24 04 01       	addl   $0x1,0x4(%esp)
		}
	}
	// 然后再仔细地检测位1到位swap_size所有位是否为0.若存在不是0的位,则表示位图有问题,于是释放位图占用的页面并退出函数.否则显示交换设备工作正常以及交换页面
	// 和交换空间总字节数.
	j = 0;
	for (i = 1 ; i < swap_size ; i++)
    d285:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    d28a:	8b 44 24 08          	mov    0x8(%esp),%eax
    d28e:	3b 44 24 0c          	cmp    0xc(%esp),%eax
    d292:	7c d2                	jl     d266 <init_swapping+0x1cd>
		if (bit(swap_bitmap, i))
			j++;
	if (!j) {
    d294:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    d299:	75 1d                	jne    d2b8 <init_swapping+0x21f>
		free_page((long) swap_bitmap);
    d29b:	a1 a4 01 03 00       	mov    0x301a4,%eax
    d2a0:	83 ec 0c             	sub    $0xc,%esp
    d2a3:	50                   	push   %eax
    d2a4:	e8 03 ea ff ff       	call   bcac <free_page>
    d2a9:	83 c4 10             	add    $0x10,%esp
		swap_bitmap = NULL;
    d2ac:	c7 05 a4 01 03 00 00 	movl   $0x0,0x301a4
    d2b3:	00 00 00 
		return;
    d2b6:	eb 21                	jmp    d2d9 <init_swapping+0x240>
	}
	Log(LOG_INFO_TYPE, "<<<<< Swap device ok: %d pages (%d bytes) swap-space >>>>>\n\r", j, j * 4096);
    d2b8:	8b 44 24 04          	mov    0x4(%esp),%eax
    d2bc:	c1 e0 0c             	shl    $0xc,%eax
    d2bf:	50                   	push   %eax
    d2c0:	ff 74 24 08          	pushl  0x8(%esp)
    d2c4:	68 14 37 02 00       	push   $0x23714
    d2c9:	6a 00                	push   $0x0
    d2cb:	e8 37 56 01 00       	call   22907 <Log>
    d2d0:	83 c4 10             	add    $0x10,%esp
    d2d3:	eb 04                	jmp    d2d9 <init_swapping+0x240>
	extern int *blk_size[];							// blk_drv/ll_rw_blk.c
	int swap_size, i, j;

	// 如果没有定义交换设备则返回.如果交换设备没有设置块数数组,则显示并返回.
	if (!SWAP_DEV)
		return;
    d2d5:	90                   	nop
    d2d6:	eb 01                	jmp    d2d9 <init_swapping+0x240>
		return;
	}
	// 取指定交换设备号的交换区数据块总数swap_size.若为0则返回,若总块数小于100块则显示信息"交换设备区太小",然后退出.
	swap_size = blk_size[MAJOR(SWAP_DEV)][MINOR(SWAP_DEV)];
	if (!swap_size)
		return;
    d2d8:	90                   	nop
		free_page((long) swap_bitmap);
		swap_bitmap = NULL;
		return;
	}
	Log(LOG_INFO_TYPE, "<<<<< Swap device ok: %d pages (%d bytes) swap-space >>>>>\n\r", j, j * 4096);
}
    d2d9:	83 c4 1c             	add    $0x1c,%esp
    d2dc:	c3                   	ret    

0000d2dd <page_fault>:
    d2dd:	87 04 24             	xchg   %eax,(%esp)
    d2e0:	51                   	push   %ecx
    d2e1:	52                   	push   %edx
    d2e2:	1e                   	push   %ds
    d2e3:	06                   	push   %es
    d2e4:	0f a0                	push   %fs
    d2e6:	ba 10 00 00 00       	mov    $0x10,%edx
    d2eb:	8e da                	mov    %edx,%ds
    d2ed:	8e c2                	mov    %edx,%es
    d2ef:	8e e2                	mov    %edx,%fs
    d2f1:	0f 20 d2             	mov    %cr2,%edx
    d2f4:	52                   	push   %edx
    d2f5:	50                   	push   %eax
    d2f6:	a9 01 00 00 00       	test   $0x1,%eax
    d2fb:	75 07                	jne    d304 <page_fault+0x27>
    d2fd:	e8 4d f3 ff ff       	call   c64f <do_no_page>
    d302:	eb 05                	jmp    d309 <page_fault+0x2c>
    d304:	e8 ce ef ff ff       	call   c2d7 <do_wp_page>
    d309:	83 c4 08             	add    $0x8,%esp
    d30c:	0f a1                	pop    %fs
    d30e:	07                   	pop    %es
    d30f:	1f                   	pop    %ds
    d310:	5a                   	pop    %edx
    d311:	59                   	pop    %ecx
    d312:	58                   	pop    %eax
    d313:	cf                   	iret   

0000d314 <get_fs_long>:
//// 读取fs段中指定地址处的长字(4字节).
// 参数:addr - 指定的内存地址.
// %0 - (返回的长字_v);%1 - (内存地址addr)
// 返回:返回内存fs:[addr]处的长字.
static inline unsigned long get_fs_long(const unsigned long *addr)
{
    d314:	83 ec 10             	sub    $0x10,%esp
	unsigned long _v;

	__asm__ ("movl %%fs:%1,%0":"=q" (_v):"m" (*addr)); \
    d317:	8b 44 24 14          	mov    0x14(%esp),%eax
    d31b:	64 8b 00             	mov    %fs:(%eax),%eax
    d31e:	89 44 24 0c          	mov    %eax,0xc(%esp)
	return _v;
    d322:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    d326:	83 c4 10             	add    $0x10,%esp
    d329:	c3                   	ret    

0000d32a <sys_ustat>:
// 参数dev是含有用户已安装文件系统的设备号。ubuf是一个ustat结构缓冲区指针，用于存放系统返回的文件系统信息。该系统
// 调用用于返回已安装（mounted）文件系统的统计信息。成功时返回0，并且ubuf指向的ustate结构被添入文件系统总空闲块
// 和空闲i节点数。ustat结构定义在include/sys/types.h中。
int sys_ustat(int dev, struct ustat * ubuf)
{
	return -ENOSYS;         						// 出错码：功能还未实现。
    d32a:	b8 da ff ff ff       	mov    $0xffffffda,%eax
}
    d32f:	c3                   	ret    

0000d330 <sys_utime>:
// 设置文件访问和修改时间。
// 参数filename是文件名，times是访问和修改时间结构指针。
// 如果times指针不为NULL，则取utimbuf结构中的时间信息来设置文件的访问和修改时间。
// 如果times指针是NULL，则取系统当前时间来设置指定文件的访问和修改时间域。
int sys_utime(char * filename, struct utimbuf * times)
{
    d330:	83 ec 1c             	sub    $0x1c,%esp
	long actime, modtime;

	// 文件的时间信息保存在其i节点中。因此我们首先根据文件名取得对应i节点。如果没有找到，则返回出错码。如果提供的访问
	// 和修改时间结构指针times不为NULL，则从结构中读取用户设置的时间值。否则就用系统当前时间来设置文件的访问和修改时
	// 间。
	if (!(inode = namei(filename)))
    d333:	83 ec 0c             	sub    $0xc,%esp
    d336:	ff 74 24 2c          	pushl  0x2c(%esp)
    d33a:	e8 1f 61 00 00       	call   1345e <namei>
    d33f:	83 c4 10             	add    $0x10,%esp
    d342:	89 44 24 04          	mov    %eax,0x4(%esp)
    d346:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    d34b:	75 0a                	jne    d357 <sys_utime+0x27>
		return -ENOENT;
    d34d:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    d352:	e9 90 00 00 00       	jmp    d3e7 <sys_utime+0xb7>
	if (times) {
    d357:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
    d35c:	74 2d                	je     d38b <sys_utime+0x5b>
		actime = get_fs_long((unsigned long *) &times->actime);
    d35e:	8b 44 24 24          	mov    0x24(%esp),%eax
    d362:	83 ec 0c             	sub    $0xc,%esp
    d365:	50                   	push   %eax
    d366:	e8 a9 ff ff ff       	call   d314 <get_fs_long>
    d36b:	83 c4 10             	add    $0x10,%esp
    d36e:	89 44 24 0c          	mov    %eax,0xc(%esp)
		modtime = get_fs_long((unsigned long *) &times->modtime);
    d372:	8b 44 24 24          	mov    0x24(%esp),%eax
    d376:	83 c0 04             	add    $0x4,%eax
    d379:	83 ec 0c             	sub    $0xc,%esp
    d37c:	50                   	push   %eax
    d37d:	e8 92 ff ff ff       	call   d314 <get_fs_long>
    d382:	83 c4 10             	add    $0x10,%esp
    d385:	89 44 24 08          	mov    %eax,0x8(%esp)
    d389:	eb 2a                	jmp    d3b5 <sys_utime+0x85>
	} else
		actime = modtime = CURRENT_TIME;
    d38b:	a1 00 eb 02 00       	mov    0x2eb00,%eax
    d390:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
    d396:	01 d0                	add    %edx,%eax
    d398:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    d39d:	f7 e2                	mul    %edx
    d39f:	c1 ea 05             	shr    $0x5,%edx
    d3a2:	a1 04 eb 02 00       	mov    0x2eb04,%eax
    d3a7:	01 d0                	add    %edx,%eax
    d3a9:	89 44 24 08          	mov    %eax,0x8(%esp)
    d3ad:	8b 44 24 08          	mov    0x8(%esp),%eax
    d3b1:	89 44 24 0c          	mov    %eax,0xc(%esp)
	// 然后修改i节点中的访问时间字段和修改时间字段。再设置i节点已修改标志，放回该i节点，并返回0。
	inode->i_atime = actime;
    d3b5:	8b 54 24 0c          	mov    0xc(%esp),%edx
    d3b9:	8b 44 24 04          	mov    0x4(%esp),%eax
    d3bd:	89 50 28             	mov    %edx,0x28(%eax)
	inode->i_mtime = modtime;
    d3c0:	8b 54 24 08          	mov    0x8(%esp),%edx
    d3c4:	8b 44 24 04          	mov    0x4(%esp),%eax
    d3c8:	89 50 08             	mov    %edx,0x8(%eax)
	inode->i_dirt = 1;
    d3cb:	8b 44 24 04          	mov    0x4(%esp),%eax
    d3cf:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	iput(inode);
    d3d3:	83 ec 0c             	sub    $0xc,%esp
    d3d6:	ff 74 24 10          	pushl  0x10(%esp)
    d3da:	e8 bd 12 00 00       	call   e69c <iput>
    d3df:	83 c4 10             	add    $0x10,%esp
	return 0;
    d3e2:	b8 00 00 00 00       	mov    $0x0,%eax
}
    d3e7:	83 c4 1c             	add    $0x1c,%esp
    d3ea:	c3                   	ret    

0000d3eb <sys_access>:
 */
// 检查文件的访问权限。
// 参数filename是文件名，mode是检查的访问属性，它有3个有效位组成：R_OK（值4）、W_OK（2）、X_OK（1）和F_OK（0）
// 组成，分别表示检测文件是否可读、可写、可执行和文件是否存在。如果访问允许的话，则返回0,否则返回出错码。
int sys_access(const char * filename, int mode)
{
    d3eb:	83 ec 1c             	sub    $0x1c,%esp
	int res, i_mode;

	// 文件的访问权限信息同样保存在文件的i节点结构中，因此我们要先取得对应文件名的i节点。检测的访问属性mode由低3位组成，
	// 因此需要与上八进制0007来清除所有高位。如果文件名对应的i节点不存在，则返回没有许可权限出错码。若i节点存在，则取i
	// 节点中文件属性码，并放回该i节点。另外，57行上语句“iput(inode);”最好放在61行之后。
	mode &= 0007;
    d3ee:	83 64 24 24 07       	andl   $0x7,0x24(%esp)
	if (!(inode = namei(filename)))
    d3f3:	83 ec 0c             	sub    $0xc,%esp
    d3f6:	ff 74 24 2c          	pushl  0x2c(%esp)
    d3fa:	e8 5f 60 00 00       	call   1345e <namei>
    d3ff:	83 c4 10             	add    $0x10,%esp
    d402:	89 44 24 08          	mov    %eax,0x8(%esp)
    d406:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    d40b:	75 0a                	jne    d417 <sys_access+0x2c>
		return -EACCES;                 				// 出错码：无访问权限。
    d40d:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
    d412:	e9 b6 00 00 00       	jmp    d4cd <sys_access+0xe2>
	i_mode = res = inode->i_mode & 0777;
    d417:	8b 44 24 08          	mov    0x8(%esp),%eax
    d41b:	0f b7 00             	movzwl (%eax),%eax
    d41e:	0f b7 c0             	movzwl %ax,%eax
    d421:	25 ff 01 00 00       	and    $0x1ff,%eax
    d426:	89 44 24 0c          	mov    %eax,0xc(%esp)
    d42a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d42e:	89 44 24 04          	mov    %eax,0x4(%esp)
	iput(inode);
    d432:	83 ec 0c             	sub    $0xc,%esp
    d435:	ff 74 24 14          	pushl  0x14(%esp)
    d439:	e8 5e 12 00 00       	call   e69c <iput>
    d43e:	83 c4 10             	add    $0x10,%esp
	// 如果当前进程用户是该文件的宿主，则取文件宿主属性。否则如果当前进程用户与该文件宿主同属一个级，则取文件组属性。否则
	// 此时res低3位是其他人访问该文件的许可属性。
	// [??这里应res >> 3 ??]
	if (current->uid == inode->i_uid)
    d441:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    d446:	0f b7 90 cc 02 00 00 	movzwl 0x2cc(%eax),%edx
    d44d:	8b 44 24 08          	mov    0x8(%esp),%eax
    d451:	0f b7 40 02          	movzwl 0x2(%eax),%eax
    d455:	66 39 c2             	cmp    %ax,%dx
    d458:	75 07                	jne    d461 <sys_access+0x76>
		res >>= 6;
    d45a:	c1 7c 24 0c 06       	sarl   $0x6,0xc(%esp)
    d45f:	eb 21                	jmp    d482 <sys_access+0x97>
	else if (current->gid == inode->i_gid)
    d461:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    d466:	0f b7 90 d2 02 00 00 	movzwl 0x2d2(%eax),%edx
    d46d:	8b 44 24 08          	mov    0x8(%esp),%eax
    d471:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
    d475:	0f b6 c0             	movzbl %al,%eax
    d478:	66 39 c2             	cmp    %ax,%dx
    d47b:	75 05                	jne    d482 <sys_access+0x97>
		res >>= 3;
    d47d:	c1 7c 24 0c 03       	sarl   $0x3,0xc(%esp)
	// 此时res的最低3位是根据当前进程用户与文件的关系选择出来的访问属性位。现在我们来判断这3位。如果文件属性具有参数所查询
	// 的属性位mode，则访问许可，返回0。
	if ((res & 0007 & mode) == mode)
    d482:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d486:	83 e0 07             	and    $0x7,%eax
    d489:	23 44 24 24          	and    0x24(%esp),%eax
    d48d:	3b 44 24 24          	cmp    0x24(%esp),%eax
    d491:	75 07                	jne    d49a <sys_access+0xaf>
		return 0;
    d493:	b8 00 00 00 00       	mov    $0x0,%eax
    d498:	eb 33                	jmp    d4cd <sys_access+0xe2>
    /*
     * XXX我们最后才做下面的测试，因为我们实际上需要交换有效用户ID和真实用户ID（临时地），然后才调用suser()函数，
     * 如果我们确实要调用suser()函数，则需要最后才被调用。
     */
	// 如果当前用户ID为0（超级用户）并且屏蔽码执行位是0或者文件可以被任何人执行、搜索，则返回0。否则返回出错码。
	if ((!current->uid) &&
    d49a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    d49f:	0f b7 80 cc 02 00 00 	movzwl 0x2cc(%eax),%eax
    d4a6:	66 85 c0             	test   %ax,%ax
    d4a9:	75 1d                	jne    d4c8 <sys_access+0xdd>
	    (!(mode & 1) || (i_mode & 0111)))
    d4ab:	8b 44 24 24          	mov    0x24(%esp),%eax
    d4af:	83 e0 01             	and    $0x1,%eax
    /*
     * XXX我们最后才做下面的测试，因为我们实际上需要交换有效用户ID和真实用户ID（临时地），然后才调用suser()函数，
     * 如果我们确实要调用suser()函数，则需要最后才被调用。
     */
	// 如果当前用户ID为0（超级用户）并且屏蔽码执行位是0或者文件可以被任何人执行、搜索，则返回0。否则返回出错码。
	if ((!current->uid) &&
    d4b2:	85 c0                	test   %eax,%eax
    d4b4:	74 0b                	je     d4c1 <sys_access+0xd6>
	    (!(mode & 1) || (i_mode & 0111)))
    d4b6:	8b 44 24 04          	mov    0x4(%esp),%eax
    d4ba:	83 e0 49             	and    $0x49,%eax
    d4bd:	85 c0                	test   %eax,%eax
    d4bf:	74 07                	je     d4c8 <sys_access+0xdd>
		return 0;
    d4c1:	b8 00 00 00 00       	mov    $0x0,%eax
    d4c6:	eb 05                	jmp    d4cd <sys_access+0xe2>
	return -EACCES;         							// 出错码：无访问权限。
    d4c8:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
    d4cd:	83 c4 1c             	add    $0x1c,%esp
    d4d0:	c3                   	ret    

0000d4d1 <sys_chdir>:

// 改变当前工作目录系统调用。
// 参数filename是目录名。
// 操作成功则返回0,否则返回出错码。
int sys_chdir(const char * filename)
{
    d4d1:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * inode;

	// 改变当前工作目录就是要求把进程任务结构的当前工作目录字段指向给定目录名的i节点。因此我们首先取目录名的i节点。如果目录名对应
	// 的i节点不存在，则返回出错码。如果该i节点不是一个目录i节点，则放回该i节点，并返回出错码。
	if (!(inode = namei(filename)))
    d4d4:	83 ec 0c             	sub    $0xc,%esp
    d4d7:	ff 74 24 2c          	pushl  0x2c(%esp)
    d4db:	e8 7e 5f 00 00       	call   1345e <namei>
    d4e0:	83 c4 10             	add    $0x10,%esp
    d4e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
    d4e7:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d4ec:	75 07                	jne    d4f5 <sys_chdir+0x24>
		return -ENOENT;                 				// 出错码：文件或目录不存在。
    d4ee:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    d4f3:	eb 57                	jmp    d54c <sys_chdir+0x7b>
	if (!S_ISDIR(inode->i_mode)) {
    d4f5:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d4f9:	0f b7 00             	movzwl (%eax),%eax
    d4fc:	0f b7 c0             	movzwl %ax,%eax
    d4ff:	25 00 f0 00 00       	and    $0xf000,%eax
    d504:	3d 00 40 00 00       	cmp    $0x4000,%eax
    d509:	74 16                	je     d521 <sys_chdir+0x50>
		iput(inode);
    d50b:	83 ec 0c             	sub    $0xc,%esp
    d50e:	ff 74 24 18          	pushl  0x18(%esp)
    d512:	e8 85 11 00 00       	call   e69c <iput>
    d517:	83 c4 10             	add    $0x10,%esp
		return -ENOTDIR;                				// 出错码：不是目录名。
    d51a:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
    d51f:	eb 2b                	jmp    d54c <sys_chdir+0x7b>
	}
	// 然后释放进程原工作目录i节点，并使其指向新设置的工作目录i节点。返回0.
	iput(current->pwd);
    d521:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    d526:	8b 80 34 03 00 00    	mov    0x334(%eax),%eax
    d52c:	83 ec 0c             	sub    $0xc,%esp
    d52f:	50                   	push   %eax
    d530:	e8 67 11 00 00       	call   e69c <iput>
    d535:	83 c4 10             	add    $0x10,%esp
	current->pwd = inode;
    d538:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    d53d:	8b 54 24 0c          	mov    0xc(%esp),%edx
    d541:	89 90 34 03 00 00    	mov    %edx,0x334(%eax)
	return (0);
    d547:	b8 00 00 00 00       	mov    $0x0,%eax
}
    d54c:	83 c4 1c             	add    $0x1c,%esp
    d54f:	c3                   	ret    

0000d550 <sys_chroot>:

// 改变根目录系统调用。
// 把指定的目录名设置成为当前进程的根目录“/”。
// 如果操作成功则返回0，否则返回出错码。
int sys_chroot(const char * filename)
{
    d550:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * inode;

	// 该调用用于改变当前进程任务结构中的根目录字段root，让其指向参数给定目录名的i节点。如果目录名对应i节点不存在，则返回出错码。
	// 如果该i节点不是目录i节点，则放回该i节点，也返回出错码。
	if (!(inode = namei(filename)))
    d553:	83 ec 0c             	sub    $0xc,%esp
    d556:	ff 74 24 2c          	pushl  0x2c(%esp)
    d55a:	e8 ff 5e 00 00       	call   1345e <namei>
    d55f:	83 c4 10             	add    $0x10,%esp
    d562:	89 44 24 0c          	mov    %eax,0xc(%esp)
    d566:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d56b:	75 07                	jne    d574 <sys_chroot+0x24>
		return -ENOENT;
    d56d:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    d572:	eb 57                	jmp    d5cb <sys_chroot+0x7b>
	if (!S_ISDIR(inode->i_mode)) {
    d574:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d578:	0f b7 00             	movzwl (%eax),%eax
    d57b:	0f b7 c0             	movzwl %ax,%eax
    d57e:	25 00 f0 00 00       	and    $0xf000,%eax
    d583:	3d 00 40 00 00       	cmp    $0x4000,%eax
    d588:	74 16                	je     d5a0 <sys_chroot+0x50>
		iput(inode);
    d58a:	83 ec 0c             	sub    $0xc,%esp
    d58d:	ff 74 24 18          	pushl  0x18(%esp)
    d591:	e8 06 11 00 00       	call   e69c <iput>
    d596:	83 c4 10             	add    $0x10,%esp
		return -ENOTDIR;
    d599:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
    d59e:	eb 2b                	jmp    d5cb <sys_chroot+0x7b>
	}
	// 然后释放当前进程的根目录，并重新设置为指定目录名的i节点，返回0。
	iput(current->root);
    d5a0:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    d5a5:	8b 80 38 03 00 00    	mov    0x338(%eax),%eax
    d5ab:	83 ec 0c             	sub    $0xc,%esp
    d5ae:	50                   	push   %eax
    d5af:	e8 e8 10 00 00       	call   e69c <iput>
    d5b4:	83 c4 10             	add    $0x10,%esp
	current->root = inode;
    d5b7:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    d5bc:	8b 54 24 0c          	mov    0xc(%esp),%edx
    d5c0:	89 90 38 03 00 00    	mov    %edx,0x338(%eax)
	return (0);
    d5c6:	b8 00 00 00 00       	mov    $0x0,%eax
}
    d5cb:	83 c4 1c             	add    $0x1c,%esp
    d5ce:	c3                   	ret    

0000d5cf <sys_chmod>:

// 修改文件属性系统调用。
// 参数filename是文件名，mode是新的文件属性。
int sys_chmod(const char * filename, int mode)
{
    d5cf:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * inode;

	// 该调用为指定文件设置新的访问属性mode。文件的访问属性在文件名对应的i节点中，因此我们首先取文件名对应的i节点。如果i节点不存
	// 在，则返回出错码（文件或目录不存在）。如果当前进程的有效用户名id与文件i节点的用户id不同，并且也不是超级用户，则放回该文件
	// i节点，返回出错码（没有访问权限）。
	if (!(inode = namei(filename)))
    d5d2:	83 ec 0c             	sub    $0xc,%esp
    d5d5:	ff 74 24 2c          	pushl  0x2c(%esp)
    d5d9:	e8 80 5e 00 00       	call   1345e <namei>
    d5de:	83 c4 10             	add    $0x10,%esp
    d5e1:	89 44 24 0c          	mov    %eax,0xc(%esp)
    d5e5:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d5ea:	75 07                	jne    d5f3 <sys_chmod+0x24>
		return -ENOENT;
    d5ec:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    d5f1:	eb 7c                	jmp    d66f <sys_chmod+0xa0>
	if ((current->euid != inode->i_uid) && !suser()) {
    d5f3:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    d5f8:	0f b7 90 ce 02 00 00 	movzwl 0x2ce(%eax),%edx
    d5ff:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d603:	0f b7 40 02          	movzwl 0x2(%eax),%eax
    d607:	66 39 c2             	cmp    %ax,%dx
    d60a:	74 27                	je     d633 <sys_chmod+0x64>
    d60c:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    d611:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    d618:	66 85 c0             	test   %ax,%ax
    d61b:	74 16                	je     d633 <sys_chmod+0x64>
		iput(inode);
    d61d:	83 ec 0c             	sub    $0xc,%esp
    d620:	ff 74 24 18          	pushl  0x18(%esp)
    d624:	e8 73 10 00 00       	call   e69c <iput>
    d629:	83 c4 10             	add    $0x10,%esp
		return -EACCES;
    d62c:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
    d631:	eb 3c                	jmp    d66f <sys_chmod+0xa0>
	}
	// 否则就重新设置该i节点的文件属性，并置该i节点已修改标志。放回该i节点，返回0。
	inode->i_mode = (mode & 07777) | (inode->i_mode & ~07777);
    d633:	8b 44 24 24          	mov    0x24(%esp),%eax
    d637:	66 25 ff 0f          	and    $0xfff,%ax
    d63b:	89 c2                	mov    %eax,%edx
    d63d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d641:	0f b7 00             	movzwl (%eax),%eax
    d644:	66 25 00 f0          	and    $0xf000,%ax
    d648:	09 d0                	or     %edx,%eax
    d64a:	89 c2                	mov    %eax,%edx
    d64c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d650:	66 89 10             	mov    %dx,(%eax)
	inode->i_dirt = 1;
    d653:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d657:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	iput(inode);
    d65b:	83 ec 0c             	sub    $0xc,%esp
    d65e:	ff 74 24 18          	pushl  0x18(%esp)
    d662:	e8 35 10 00 00       	call   e69c <iput>
    d667:	83 c4 10             	add    $0x10,%esp
	return 0;
    d66a:	b8 00 00 00 00       	mov    $0x0,%eax
}
    d66f:	83 c4 1c             	add    $0x1c,%esp
    d672:	c3                   	ret    

0000d673 <sys_chown>:

// 修改文件宿主系统调用。
// 参数filename是文件名，uid是用户标识符（用户ID），gid是组ID。
// 若操作成功则返回0，否则返回出错码。
int sys_chown(const char * filename, int uid, int gid)
{
    d673:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * inode;

	// 该调用用于设置文件i节点中的用户和组ID，因此首先要取得给定文件名的i节点。如果文件名的i节点不存在，则返回出错码（文件
	// 或目录不存在）。如果当前进程不是超级用户，则放回该i节点，并返回出错码（没有访问权限）。
	if (!(inode = namei(filename)))
    d676:	83 ec 0c             	sub    $0xc,%esp
    d679:	ff 74 24 2c          	pushl  0x2c(%esp)
    d67d:	e8 dc 5d 00 00       	call   1345e <namei>
    d682:	83 c4 10             	add    $0x10,%esp
    d685:	89 44 24 0c          	mov    %eax,0xc(%esp)
    d689:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d68e:	75 07                	jne    d697 <sys_chown+0x24>
		return -ENOENT;
    d690:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
    d695:	eb 5e                	jmp    d6f5 <sys_chown+0x82>
	if (!suser()) {
    d697:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    d69c:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
    d6a3:	66 85 c0             	test   %ax,%ax
    d6a6:	74 16                	je     d6be <sys_chown+0x4b>
		iput(inode);
    d6a8:	83 ec 0c             	sub    $0xc,%esp
    d6ab:	ff 74 24 18          	pushl  0x18(%esp)
    d6af:	e8 e8 0f 00 00       	call   e69c <iput>
    d6b4:	83 c4 10             	add    $0x10,%esp
		return -EACCES;
    d6b7:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
    d6bc:	eb 37                	jmp    d6f5 <sys_chown+0x82>
	}
	// 否则我们就用参数提供的值来设置文件i节点的用户ID和组ID，并置i节点已经修改标志，放回该i节点，返回0。
	inode->i_uid = uid;
    d6be:	8b 44 24 24          	mov    0x24(%esp),%eax
    d6c2:	89 c2                	mov    %eax,%edx
    d6c4:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d6c8:	66 89 50 02          	mov    %dx,0x2(%eax)
	inode->i_gid = gid;
    d6cc:	8b 44 24 28          	mov    0x28(%esp),%eax
    d6d0:	89 c2                	mov    %eax,%edx
    d6d2:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d6d6:	88 50 0c             	mov    %dl,0xc(%eax)
	inode->i_dirt = 1;
    d6d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d6dd:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	iput(inode);
    d6e1:	83 ec 0c             	sub    $0xc,%esp
    d6e4:	ff 74 24 18          	pushl  0x18(%esp)
    d6e8:	e8 af 0f 00 00       	call   e69c <iput>
    d6ed:	83 c4 10             	add    $0x10,%esp
	return 0;
    d6f0:	b8 00 00 00 00       	mov    $0x0,%eax
}
    d6f5:	83 c4 1c             	add    $0x1c,%esp
    d6f8:	c3                   	ret    

0000d6f9 <check_char_dev>:

// 检查字符设备类型.
// 该函数仅用于下面文件打开系统调用sys_open(),用于检查若打开的文件是tty终端字符设备时,需要对当前进程的设置和对tty表的设置.
// 返回0检测处理成功,返回-1表示失败,对应字符设备不能打开.
static int check_char_dev(struct m_inode * inode, int dev, int flag)
{
    d6f9:	83 ec 10             	sub    $0x10,%esp
	// 的同义名.即/dev/tty设备是一个虚拟设备,它对应到进程实际使用的/dev/ttyxx设备之一.对于一个进程来说,若其有控制终端,那么它的任务结构
	// 中的tty字段将是4号设备的某一个子设备号.
	// 如果打开操作的文件是/dev/tty(即MAJOR(dev) = 5),那么我们令min = 进程任务结构中的tty字段,即取4号设备的子设备号.否则如果打开的是
	// 某个4号设备,则直接取其子设备号.如果得到的4号设备子设备号小于0,那么说明进程没有控制终端,或者设备号错误,则返回-1,表示由于进程没有控制终端
	// 或者不能打开这个设备.
	if (MAJOR(dev) == 4 || MAJOR(dev) == 5) {
    d6fc:	8b 44 24 18          	mov    0x18(%esp),%eax
    d700:	c1 e8 08             	shr    $0x8,%eax
    d703:	83 f8 04             	cmp    $0x4,%eax
    d706:	74 10                	je     d718 <check_char_dev+0x1f>
    d708:	8b 44 24 18          	mov    0x18(%esp),%eax
    d70c:	c1 e8 08             	shr    $0x8,%eax
    d70f:	83 f8 05             	cmp    $0x5,%eax
    d712:	0f 85 16 02 00 00    	jne    d92e <check_char_dev+0x235>
		if (MAJOR(dev) == 5)
    d718:	8b 44 24 18          	mov    0x18(%esp),%eax
    d71c:	c1 e8 08             	shr    $0x8,%eax
    d71f:	83 f8 05             	cmp    $0x5,%eax
    d722:	75 11                	jne    d735 <check_char_dev+0x3c>
			min = current->tty;
    d724:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    d729:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
    d72f:	89 44 24 0c          	mov    %eax,0xc(%esp)
    d733:	eb 0b                	jmp    d740 <check_char_dev+0x47>
		else
			min = MINOR(dev);
    d735:	8b 44 24 18          	mov    0x18(%esp),%eax
    d739:	0f b6 c0             	movzbl %al,%eax
    d73c:	89 44 24 0c          	mov    %eax,0xc(%esp)
		if (min < 0)
    d740:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d745:	79 0a                	jns    d751 <check_char_dev+0x58>
			return -1;
    d747:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    d74c:	e9 e2 01 00 00       	jmp    d933 <check_char_dev+0x23a>
		// 主伪终端设备文件只能被进程独占使用.如果子设备号表明是一个主伪终端,并且该打开文件i节点引用计数大于1,则说明该设备已被其他进程使用.因此不能再
		// 打开该字符设备文件,于是返回-1.否则,我们让tty结构指针tty指向tty表中对应结构项.若打开文件操作标志flag中不含无需控制终端标志O_NOCTTY,并且进程
		// 是进程组首领,并且当前进程没有控制终端,并且tty结构中session字段为0(表示该终端还不是任何进程组的控制终端),那么就允许为进程设置这个终端设备min
		// 为其控制终端.于是设置进程任务结构终端设备号字段tty值等于min,并且设置对应tty结构的会话号session和进程组号pgrp分别等于进程的会话号和进程组号.
		if ((IS_A_PTY_MASTER(min)) && (inode->i_count > 1))
    d751:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d755:	25 c0 00 00 00       	and    $0xc0,%eax
    d75a:	3d 80 00 00 00       	cmp    $0x80,%eax
    d75f:	75 18                	jne    d779 <check_char_dev+0x80>
    d761:	8b 44 24 14          	mov    0x14(%esp),%eax
    d765:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    d769:	66 83 f8 01          	cmp    $0x1,%ax
    d76d:	76 0a                	jbe    d779 <check_char_dev+0x80>
			return -1;
    d76f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
    d774:	e9 ba 01 00 00       	jmp    d933 <check_char_dev+0x23a>
		tty = TTY_TABLE(min);
    d779:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d77e:	74 26                	je     d7a6 <check_char_dev+0xad>
    d780:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    d785:	7f 11                	jg     d798 <check_char_dev+0x9f>
    d787:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d78b:	83 e8 01             	sub    $0x1,%eax
    d78e:	c1 e0 06             	shl    $0x6,%eax
    d791:	05 20 18 04 00       	add    $0x41820,%eax
    d796:	eb 1b                	jmp    d7b3 <check_char_dev+0xba>
    d798:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d79c:	c1 e0 06             	shl    $0x6,%eax
    d79f:	05 20 18 04 00       	add    $0x41820,%eax
    d7a4:	eb 0d                	jmp    d7b3 <check_char_dev+0xba>
    d7a6:	a1 80 12 03 00       	mov    0x31280,%eax
    d7ab:	c1 e0 06             	shl    $0x6,%eax
    d7ae:	05 20 18 04 00       	add    $0x41820,%eax
    d7b3:	89 44 24 08          	mov    %eax,0x8(%esp)
		// Log(LOG_INFO_TYPE, "<<<<< tty index = %d>>>>>\n", min);
		if (!(flag & O_NOCTTY) &&
    d7b7:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    d7bb:	25 00 01 00 00       	and    $0x100,%eax
    d7c0:	85 c0                	test   %eax,%eax
    d7c2:	75 5c                	jne    d820 <check_char_dev+0x127>
		    current->leader &&
    d7c4:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    d7c9:	8b 80 38 02 00 00    	mov    0x238(%eax),%eax
		// 为其控制终端.于是设置进程任务结构终端设备号字段tty值等于min,并且设置对应tty结构的会话号session和进程组号pgrp分别等于进程的会话号和进程组号.
		if ((IS_A_PTY_MASTER(min)) && (inode->i_count > 1))
			return -1;
		tty = TTY_TABLE(min);
		// Log(LOG_INFO_TYPE, "<<<<< tty index = %d>>>>>\n", min);
		if (!(flag & O_NOCTTY) &&
    d7cf:	85 c0                	test   %eax,%eax
    d7d1:	74 4d                	je     d820 <check_char_dev+0x127>
		    current->leader &&
		    current->tty < 0 &&
    d7d3:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    d7d8:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
		if ((IS_A_PTY_MASTER(min)) && (inode->i_count > 1))
			return -1;
		tty = TTY_TABLE(min);
		// Log(LOG_INFO_TYPE, "<<<<< tty index = %d>>>>>\n", min);
		if (!(flag & O_NOCTTY) &&
		    current->leader &&
    d7de:	85 c0                	test   %eax,%eax
    d7e0:	79 3e                	jns    d820 <check_char_dev+0x127>
		    current->tty < 0 &&
		    tty->session == 0) {
    d7e2:	8b 44 24 08          	mov    0x8(%esp),%eax
    d7e6:	8b 40 28             	mov    0x28(%eax),%eax
			return -1;
		tty = TTY_TABLE(min);
		// Log(LOG_INFO_TYPE, "<<<<< tty index = %d>>>>>\n", min);
		if (!(flag & O_NOCTTY) &&
		    current->leader &&
		    current->tty < 0 &&
    d7e9:	85 c0                	test   %eax,%eax
    d7eb:	75 33                	jne    d820 <check_char_dev+0x127>
		    tty->session == 0) {
			current->tty = min;
    d7ed:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    d7f2:	8b 54 24 0c          	mov    0xc(%esp),%edx
    d7f6:	89 90 2c 03 00 00    	mov    %edx,0x32c(%eax)
			tty->session = current->session;
    d7fc:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    d801:	8b 90 34 02 00 00    	mov    0x234(%eax),%edx
    d807:	8b 44 24 08          	mov    0x8(%esp),%eax
    d80b:	89 50 28             	mov    %edx,0x28(%eax)
			tty->pgrp = current->pgrp;
    d80e:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    d813:	8b 90 30 02 00 00    	mov    0x230(%eax),%edx
    d819:	8b 44 24 08          	mov    0x8(%esp),%eax
    d81d:	89 50 24             	mov    %edx,0x24(%eax)
		}
		// 如果打开文件操作标志flag中含有O_NONBLOCK(非阻塞)标志,则我们需要对该字符终端设备进行相关设置,设置为满足读操作需要读取的最少字符数为0,设置超时
		// 定时值为0,并把终端设备设置成非规范模式.非阻塞方式只能工作于非规范模式.在此模式下当VMIN和VTIME均设置为0时,辅助队列中有多少支进程就读取多少字符,
		// 并立刻返回.
		if (flag & O_NONBLOCK) {
    d820:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    d824:	25 00 08 00 00       	and    $0x800,%eax
    d829:	85 c0                	test   %eax,%eax
    d82b:	0f 84 fd 00 00 00    	je     d92e <check_char_dev+0x235>
			TTY_TABLE(min)->termios.c_cc[VMIN] = 0;
    d831:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d836:	74 26                	je     d85e <check_char_dev+0x165>
    d838:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    d83d:	7f 11                	jg     d850 <check_char_dev+0x157>
    d83f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d843:	83 e8 01             	sub    $0x1,%eax
    d846:	c1 e0 06             	shl    $0x6,%eax
    d849:	05 20 18 04 00       	add    $0x41820,%eax
    d84e:	eb 1b                	jmp    d86b <check_char_dev+0x172>
    d850:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d854:	c1 e0 06             	shl    $0x6,%eax
    d857:	05 20 18 04 00       	add    $0x41820,%eax
    d85c:	eb 0d                	jmp    d86b <check_char_dev+0x172>
    d85e:	a1 80 12 03 00       	mov    0x31280,%eax
    d863:	c1 e0 06             	shl    $0x6,%eax
    d866:	05 20 18 04 00       	add    $0x41820,%eax
    d86b:	c6 40 17 00          	movb   $0x0,0x17(%eax)
			TTY_TABLE(min)->termios.c_cc[VTIME] = 0;
    d86f:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d874:	74 26                	je     d89c <check_char_dev+0x1a3>
    d876:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    d87b:	7f 11                	jg     d88e <check_char_dev+0x195>
    d87d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d881:	83 e8 01             	sub    $0x1,%eax
    d884:	c1 e0 06             	shl    $0x6,%eax
    d887:	05 20 18 04 00       	add    $0x41820,%eax
    d88c:	eb 1b                	jmp    d8a9 <check_char_dev+0x1b0>
    d88e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d892:	c1 e0 06             	shl    $0x6,%eax
    d895:	05 20 18 04 00       	add    $0x41820,%eax
    d89a:	eb 0d                	jmp    d8a9 <check_char_dev+0x1b0>
    d89c:	a1 80 12 03 00       	mov    0x31280,%eax
    d8a1:	c1 e0 06             	shl    $0x6,%eax
    d8a4:	05 20 18 04 00       	add    $0x41820,%eax
    d8a9:	c6 40 16 00          	movb   $0x0,0x16(%eax)
			TTY_TABLE(min)->termios.c_lflag &= ~ICANON;
    d8ad:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d8b2:	74 26                	je     d8da <check_char_dev+0x1e1>
    d8b4:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    d8b9:	7f 11                	jg     d8cc <check_char_dev+0x1d3>
    d8bb:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d8bf:	83 e8 01             	sub    $0x1,%eax
    d8c2:	c1 e0 06             	shl    $0x6,%eax
    d8c5:	05 20 18 04 00       	add    $0x41820,%eax
    d8ca:	eb 1b                	jmp    d8e7 <check_char_dev+0x1ee>
    d8cc:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d8d0:	c1 e0 06             	shl    $0x6,%eax
    d8d3:	05 20 18 04 00       	add    $0x41820,%eax
    d8d8:	eb 0d                	jmp    d8e7 <check_char_dev+0x1ee>
    d8da:	a1 80 12 03 00       	mov    0x31280,%eax
    d8df:	c1 e0 06             	shl    $0x6,%eax
    d8e2:	05 20 18 04 00       	add    $0x41820,%eax
    d8e7:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    d8ec:	74 28                	je     d916 <check_char_dev+0x21d>
    d8ee:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    d8f3:	7f 12                	jg     d907 <check_char_dev+0x20e>
    d8f5:	8b 54 24 0c          	mov    0xc(%esp),%edx
    d8f9:	83 ea 01             	sub    $0x1,%edx
    d8fc:	c1 e2 06             	shl    $0x6,%edx
    d8ff:	81 c2 20 18 04 00    	add    $0x41820,%edx
    d905:	eb 1e                	jmp    d925 <check_char_dev+0x22c>
    d907:	8b 54 24 0c          	mov    0xc(%esp),%edx
    d90b:	c1 e2 06             	shl    $0x6,%edx
    d90e:	81 c2 20 18 04 00    	add    $0x41820,%edx
    d914:	eb 0f                	jmp    d925 <check_char_dev+0x22c>
    d916:	8b 15 80 12 03 00    	mov    0x31280,%edx
    d91c:	c1 e2 06             	shl    $0x6,%edx
    d91f:	81 c2 20 18 04 00    	add    $0x41820,%edx
    d925:	8b 52 0c             	mov    0xc(%edx),%edx
    d928:	83 e2 fd             	and    $0xfffffffd,%edx
    d92b:	89 50 0c             	mov    %edx,0xc(%eax)
		}
	}
	return 0;
    d92e:	b8 00 00 00 00       	mov    $0x0,%eax
}
    d933:	83 c4 10             	add    $0x10,%esp
    d936:	c3                   	ret    

0000d937 <sys_open>:
// O_EXCL(被创建文件必须不存在),O_APPEND(在文件尾添加数据)等其他一些标志的组合,如果本调用创建了一个新文件,则mode就用于指定
// 文件的许可属性.这些属性有S_IRWXU(文件宿主具有读,写和执行权限),S_IRUSR(用户具有读文件权限),S_IRWXG(组成员有读,写
// 执行)等等.对于新创建的文件,这些属性只应用于将来对文件的访问,创建了只读文件的打开调用也将返回一个读写的文件句柄.如果调用
// 操作成功,则返回文件句柄(文件描述符),否则返回出错码.参见sys/tat.h,fcntl.h.
int sys_open(const char * filename, int flag, int mode)
{
    d937:	56                   	push   %esi
    d938:	53                   	push   %ebx
    d939:	83 ec 14             	sub    $0x14,%esp
	struct file * f;
	int i, fd;

	// 首先对参数进行处理.将用户设置的文件模式和进程模式屏蔽码相与,产适配器的文件模式.为了为打开文件建立一个文件句柄,需要搜索进程
	// 结构中文件结构指针数组,以查找一个空闲项.空闲项的索引号fd即是句柄值.若已经没有空闲项,则返回出错码(参数无效).
	mode &= 0777 & ~current->umask;
    d93c:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    d941:	0f b7 80 30 03 00 00 	movzwl 0x330(%eax),%eax
    d948:	0f b7 c0             	movzwl %ax,%eax
    d94b:	f7 d0                	not    %eax
    d94d:	25 ff 01 00 00       	and    $0x1ff,%eax
    d952:	21 44 24 28          	and    %eax,0x28(%esp)
	for(fd = 0 ; fd < NR_OPEN ; fd++)
    d956:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
    d95d:	00 
    d95e:	eb 1c                	jmp    d97c <sys_open+0x45>
		if (!current->filp[fd])
    d960:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    d965:	8b 54 24 04          	mov    0x4(%esp),%edx
    d969:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    d96f:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
    d973:	85 c0                	test   %eax,%eax
    d975:	74 0e                	je     d985 <sys_open+0x4e>
	int i, fd;

	// 首先对参数进行处理.将用户设置的文件模式和进程模式屏蔽码相与,产适配器的文件模式.为了为打开文件建立一个文件句柄,需要搜索进程
	// 结构中文件结构指针数组,以查找一个空闲项.空闲项的索引号fd即是句柄值.若已经没有空闲项,则返回出错码(参数无效).
	mode &= 0777 & ~current->umask;
	for(fd = 0 ; fd < NR_OPEN ; fd++)
    d977:	83 44 24 04 01       	addl   $0x1,0x4(%esp)
    d97c:	83 7c 24 04 13       	cmpl   $0x13,0x4(%esp)
    d981:	7e dd                	jle    d960 <sys_open+0x29>
    d983:	eb 01                	jmp    d986 <sys_open+0x4f>
		if (!current->filp[fd])
			break;          						// 找到空闲项.
    d985:	90                   	nop
	if (fd >= NR_OPEN)
    d986:	83 7c 24 04 13       	cmpl   $0x13,0x4(%esp)
    d98b:	7e 0a                	jle    d997 <sys_open+0x60>
		return -EINVAL;
    d98d:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    d992:	e9 c1 01 00 00       	jmp    db58 <sys_open+0x221>
	// 该子进程中调用execve()函数加载执行另一个新程序.此时子进程中开始执行新程序.若一个文件句柄close_on_exec中的对应位被置位,那么在
	// 执行execve()时该对应文件句柄将被关闭,否则该文件句柄将始终处于打开状态.当打开一个文件时,默认情况下文件句柄在子进程中也处于打开
	// 状态.因此这里要复位对应位.然后为打开文件在文件表中寻找一个空闲结构项.我们令f指向文件表数组开始处.搜索空闲文件结构项(引用计数
	// 为0的项),若已经没有空闲文件表结构项,则返回出错码.另外,第184行上的指针赋值"0+file_table"等同于"file_table"和"&file_table[0]"
	// 不过这样写可能更能明了一些.
	current->close_on_exec &= ~(1 << fd);           // 复位对应文件打开位
    d997:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    d99c:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    d9a2:	8b 9a 44 03 00 00    	mov    0x344(%edx),%ebx
    d9a8:	8b 54 24 04          	mov    0x4(%esp),%edx
    d9ac:	be 01 00 00 00       	mov    $0x1,%esi
    d9b1:	89 d1                	mov    %edx,%ecx
    d9b3:	d3 e6                	shl    %cl,%esi
    d9b5:	89 f2                	mov    %esi,%edx
    d9b7:	f7 d2                	not    %edx
    d9b9:	21 da                	and    %ebx,%edx
    d9bb:	89 90 44 03 00 00    	mov    %edx,0x344(%eax)
	f = 0 + file_table;
    d9c1:	c7 44 24 0c 80 0f 04 	movl   $0x40f80,0xc(%esp)
    d9c8:	00 
	for (i = 0 ; i < NR_FILE ; i++, f++)
    d9c9:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    d9d0:	00 
    d9d1:	eb 17                	jmp    d9ea <sys_open+0xb3>
		if (!f->f_count) break;         			// 在文件表中找到空闲结构项。
    d9d3:	8b 44 24 0c          	mov    0xc(%esp),%eax
    d9d7:	0f b7 40 04          	movzwl 0x4(%eax),%eax
    d9db:	66 85 c0             	test   %ax,%ax
    d9de:	74 13                	je     d9f3 <sys_open+0xbc>
	// 状态.因此这里要复位对应位.然后为打开文件在文件表中寻找一个空闲结构项.我们令f指向文件表数组开始处.搜索空闲文件结构项(引用计数
	// 为0的项),若已经没有空闲文件表结构项,则返回出错码.另外,第184行上的指针赋值"0+file_table"等同于"file_table"和"&file_table[0]"
	// 不过这样写可能更能明了一些.
	current->close_on_exec &= ~(1 << fd);           // 复位对应文件打开位
	f = 0 + file_table;
	for (i = 0 ; i < NR_FILE ; i++, f++)
    d9e0:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    d9e5:	83 44 24 0c 10       	addl   $0x10,0xc(%esp)
    d9ea:	83 7c 24 08 3f       	cmpl   $0x3f,0x8(%esp)
    d9ef:	7e e2                	jle    d9d3 <sys_open+0x9c>
    d9f1:	eb 01                	jmp    d9f4 <sys_open+0xbd>
		if (!f->f_count) break;         			// 在文件表中找到空闲结构项。
    d9f3:	90                   	nop
	if (i >= NR_FILE)
    d9f4:	83 7c 24 08 3f       	cmpl   $0x3f,0x8(%esp)
    d9f9:	7e 0a                	jle    da05 <sys_open+0xce>
		return -EINVAL;
    d9fb:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    da00:	e9 53 01 00 00       	jmp    db58 <sys_open+0x221>
	// 此时我们让进程对应文件句柄fd的文件结构指针指向搜索到的文件结构,并令文件引用计数递增1.然后调用函数open_namei()执行打开操作,若返回
	// 值小于0,则说明出错,于是释放刚申请到的文件结构,返回出错码i.若文件打开操作成功,则inode是已打开文件的i节点指针.
	(current->filp[fd] = f)->f_count++;
    da05:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    da0a:	8b 54 24 04          	mov    0x4(%esp),%edx
    da0e:	8d 8a d0 00 00 00    	lea    0xd0(%edx),%ecx
    da14:	8b 54 24 0c          	mov    0xc(%esp),%edx
    da18:	89 54 88 08          	mov    %edx,0x8(%eax,%ecx,4)
    da1c:	8b 54 24 04          	mov    0x4(%esp),%edx
    da20:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    da26:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
    da2a:	0f b7 50 04          	movzwl 0x4(%eax),%edx
    da2e:	83 c2 01             	add    $0x1,%edx
    da31:	66 89 50 04          	mov    %dx,0x4(%eax)
	// Log(LOG_INFO_TYPE, "<<<<< sys_open : fd = %d\n", fd);
	if ((i = open_namei(filename, flag, mode, &inode)) < 0) {
    da35:	89 e0                	mov    %esp,%eax
    da37:	50                   	push   %eax
    da38:	ff 74 24 2c          	pushl  0x2c(%esp)
    da3c:	ff 74 24 2c          	pushl  0x2c(%esp)
    da40:	ff 74 24 2c          	pushl  0x2c(%esp)
    da44:	e8 2f 5a 00 00       	call   13478 <open_namei>
    da49:	83 c4 10             	add    $0x10,%esp
    da4c:	89 44 24 08          	mov    %eax,0x8(%esp)
    da50:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    da55:	79 2a                	jns    da81 <sys_open+0x14a>
		current->filp[fd] = NULL;
    da57:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    da5c:	8b 54 24 04          	mov    0x4(%esp),%edx
    da60:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    da66:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
    da6d:	00 
		f->f_count = 0;
    da6e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    da72:	66 c7 40 04 00 00    	movw   $0x0,0x4(%eax)
		return i;
    da78:	8b 44 24 08          	mov    0x8(%esp),%eax
    da7c:	e9 d7 00 00 00       	jmp    db58 <sys_open+0x221>
	}
	// 根据已打开文件i节点的属性字段,我们可以知道文件的类型.对于不同类型的文件,我们需要作一些特别处理.如果打开的是字符设备文件,那么我们就要调用
	// check_char_dev()函数来检查当前进程是否能打开这个字符设备文件.如果允许(函数返回0),那么在check_char_dev()中会根据具体文件打开标志为进程
	// 设置控制终端.如果不允许打开使用该字符设备文件,那么我们只能释放上面申请的文件项和句柄资源.返回出错码.
	/* ttys are somewhat special (ttyxx major==4, tty major==5) */
	if (S_ISCHR(inode->i_mode))
    da81:	8b 04 24             	mov    (%esp),%eax
    da84:	0f b7 00             	movzwl (%eax),%eax
    da87:	0f b7 c0             	movzwl %ax,%eax
    da8a:	25 00 f0 00 00       	and    $0xf000,%eax
    da8f:	3d 00 20 00 00       	cmp    $0x2000,%eax
    da94:	75 59                	jne    daef <sys_open+0x1b8>
		if (check_char_dev(inode, inode->i_zone[0], flag)) {
    da96:	8b 04 24             	mov    (%esp),%eax
    da99:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
    da9d:	0f b7 d0             	movzwl %ax,%edx
    daa0:	8b 04 24             	mov    (%esp),%eax
    daa3:	83 ec 04             	sub    $0x4,%esp
    daa6:	ff 74 24 28          	pushl  0x28(%esp)
    daaa:	52                   	push   %edx
    daab:	50                   	push   %eax
    daac:	e8 48 fc ff ff       	call   d6f9 <check_char_dev>
    dab1:	83 c4 10             	add    $0x10,%esp
    dab4:	85 c0                	test   %eax,%eax
    dab6:	74 37                	je     daef <sys_open+0x1b8>
			iput(inode);
    dab8:	8b 04 24             	mov    (%esp),%eax
    dabb:	83 ec 0c             	sub    $0xc,%esp
    dabe:	50                   	push   %eax
    dabf:	e8 d8 0b 00 00       	call   e69c <iput>
    dac4:	83 c4 10             	add    $0x10,%esp
			current->filp[fd] = NULL;
    dac7:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    dacc:	8b 54 24 04          	mov    0x4(%esp),%edx
    dad0:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    dad6:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
    dadd:	00 
			f->f_count = 0;
    dade:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dae2:	66 c7 40 04 00 00    	movw   $0x0,0x4(%eax)
			return -EAGAIN;         				// 出错号:资源暂不可用.
    dae8:	b8 f5 ff ff ff       	mov    $0xfffffff5,%eax
    daed:	eb 69                	jmp    db58 <sys_open+0x221>
		}
	// 如果打开的是块设备文件,则检查盘片是否更换过.若更换过则需要让高速缓冲区中该设备的所有缓冲块失效.
	/* Likewise with block-devices: check for floppy_change */
	/* 同样对于块设备文件:需要检查盘片是否被更换 */
	if (S_ISBLK(inode->i_mode))
    daef:	8b 04 24             	mov    (%esp),%eax
    daf2:	0f b7 00             	movzwl (%eax),%eax
    daf5:	0f b7 c0             	movzwl %ax,%eax
    daf8:	25 00 f0 00 00       	and    $0xf000,%eax
    dafd:	3d 00 60 00 00       	cmp    $0x6000,%eax
    db02:	75 16                	jne    db1a <sys_open+0x1e3>
		check_disk_change(inode->i_zone[0]);
    db04:	8b 04 24             	mov    (%esp),%eax
    db07:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
    db0b:	0f b7 c0             	movzwl %ax,%eax
    db0e:	83 ec 0c             	sub    $0xc,%esp
    db11:	50                   	push   %eax
    db12:	e8 d2 15 00 00       	call   f0e9 <check_disk_change>
    db17:	83 c4 10             	add    $0x10,%esp
	// 现在我们初始化打开文件的文件结构.设置文件结构属性和标志,置句柄引用计数为1,并设置i节点字段为打开文件的i节点,初始化文件读写指针为0.最后返回文件句柄号.
	f->f_mode = inode->i_mode;
    db1a:	8b 04 24             	mov    (%esp),%eax
    db1d:	0f b7 10             	movzwl (%eax),%edx
    db20:	8b 44 24 0c          	mov    0xc(%esp),%eax
    db24:	66 89 10             	mov    %dx,(%eax)
	f->f_flags = flag;
    db27:	8b 44 24 24          	mov    0x24(%esp),%eax
    db2b:	89 c2                	mov    %eax,%edx
    db2d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    db31:	66 89 50 02          	mov    %dx,0x2(%eax)
	f->f_count = 1;
    db35:	8b 44 24 0c          	mov    0xc(%esp),%eax
    db39:	66 c7 40 04 01 00    	movw   $0x1,0x4(%eax)
	f->f_inode = inode;
    db3f:	8b 14 24             	mov    (%esp),%edx
    db42:	8b 44 24 0c          	mov    0xc(%esp),%eax
    db46:	89 50 08             	mov    %edx,0x8(%eax)
	f->f_pos = 0;
    db49:	8b 44 24 0c          	mov    0xc(%esp),%eax
    db4d:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	return (fd);
    db54:	8b 44 24 04          	mov    0x4(%esp),%eax
}
    db58:	83 c4 14             	add    $0x14,%esp
    db5b:	5b                   	pop    %ebx
    db5c:	5e                   	pop    %esi
    db5d:	c3                   	ret    

0000db5e <sys_creat>:

// 创建文件系统调用。
// 参数pathname是路径名，mode与上面的sys_open()函数相同。
// 成功则返回文件句柄，否则返回出错码。
int sys_creat(const char * pathname, int mode)
{
    db5e:	83 ec 0c             	sub    $0xc,%esp
	return sys_open(pathname, O_CREAT | O_TRUNC, mode);
    db61:	83 ec 04             	sub    $0x4,%esp
    db64:	ff 74 24 18          	pushl  0x18(%esp)
    db68:	68 40 02 00 00       	push   $0x240
    db6d:	ff 74 24 1c          	pushl  0x1c(%esp)
    db71:	e8 c1 fd ff ff       	call   d937 <sys_open>
    db76:	83 c4 10             	add    $0x10,%esp
}
    db79:	83 c4 0c             	add    $0xc,%esp
    db7c:	c3                   	ret    

0000db7d <sys_close>:

// 关闭文件系统调用.
// 参数fd是文件句柄.
// 成功则返回0,否则返回出错码.
int sys_close(unsigned int fd)
{
    db7d:	56                   	push   %esi
    db7e:	53                   	push   %ebx
    db7f:	83 ec 14             	sub    $0x14,%esp
	struct file * filp;

	// 首先检查参数有效性.若给出的文件句柄值大于程序同时打开的文件数NR_OPEN,则返回出错码(参数无效).然后复位进程的执行时关闭文件句柄位图对应位.若该文件句柄对应的
	// 文件结构指针是NULL,则返回出错码.
	if (fd >= NR_OPEN)
    db82:	83 7c 24 20 13       	cmpl   $0x13,0x20(%esp)
    db87:	76 0a                	jbe    db93 <sys_close+0x16>
		return -EINVAL;
    db89:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    db8e:	e9 c2 00 00 00       	jmp    dc55 <sys_close+0xd8>
	current->close_on_exec &= ~(1 << fd);
    db93:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    db98:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
    db9e:	8b 9a 44 03 00 00    	mov    0x344(%edx),%ebx
    dba4:	8b 54 24 20          	mov    0x20(%esp),%edx
    dba8:	be 01 00 00 00       	mov    $0x1,%esi
    dbad:	89 d1                	mov    %edx,%ecx
    dbaf:	d3 e6                	shl    %cl,%esi
    dbb1:	89 f2                	mov    %esi,%edx
    dbb3:	f7 d2                	not    %edx
    dbb5:	21 da                	and    %ebx,%edx
    dbb7:	89 90 44 03 00 00    	mov    %edx,0x344(%eax)
	if (!(filp = current->filp[fd]))
    dbbd:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    dbc2:	8b 54 24 20          	mov    0x20(%esp),%edx
    dbc6:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    dbcc:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
    dbd0:	89 44 24 0c          	mov    %eax,0xc(%esp)
    dbd4:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    dbd9:	75 07                	jne    dbe2 <sys_close+0x65>
		return -EINVAL;
    dbdb:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    dbe0:	eb 73                	jmp    dc55 <sys_close+0xd8>
	// 现在置该文件句柄的文件结构指针为NULL.若在关闭文件之前,对应文件结构中的句柄引用计数已经为0,则说明内核出错,停机.否则将对应文件结构的引用计数减1.此时如果它还不
	// 为0,则说明有其他进程正在使用该文件,于是返回0(成功).如果引用计数已等于0,说明该文件已经没有进程引用,该文件结构已变为空闲.则释放该文件i节点,返回0.
	current->filp[fd] = NULL;
    dbe2:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    dbe7:	8b 54 24 20          	mov    0x20(%esp),%edx
    dbeb:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    dbf1:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
    dbf8:	00 
	if (filp->f_count == 0)
    dbf9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dbfd:	0f b7 40 04          	movzwl 0x4(%eax),%eax
    dc01:	66 85 c0             	test   %ax,%ax
    dc04:	75 10                	jne    dc16 <sys_close+0x99>
		panic("Close: file count is 0");
    dc06:	83 ec 0c             	sub    $0xc,%esp
    dc09:	68 54 37 02 00       	push   $0x23754
    dc0e:	e8 f5 af ff ff       	call   8c08 <panic>
    dc13:	83 c4 10             	add    $0x10,%esp
	if (--filp->f_count)
    dc16:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dc1a:	0f b7 40 04          	movzwl 0x4(%eax),%eax
    dc1e:	8d 50 ff             	lea    -0x1(%eax),%edx
    dc21:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dc25:	66 89 50 04          	mov    %dx,0x4(%eax)
    dc29:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dc2d:	0f b7 40 04          	movzwl 0x4(%eax),%eax
    dc31:	66 85 c0             	test   %ax,%ax
    dc34:	74 07                	je     dc3d <sys_close+0xc0>
		return (0);
    dc36:	b8 00 00 00 00       	mov    $0x0,%eax
    dc3b:	eb 18                	jmp    dc55 <sys_close+0xd8>
	iput(filp->f_inode);
    dc3d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dc41:	8b 40 08             	mov    0x8(%eax),%eax
    dc44:	83 ec 0c             	sub    $0xc,%esp
    dc47:	50                   	push   %eax
    dc48:	e8 4f 0a 00 00       	call   e69c <iput>
    dc4d:	83 c4 10             	add    $0x10,%esp
	return (0);
    dc50:	b8 00 00 00 00       	mov    $0x0,%eax
}
    dc55:	83 c4 14             	add    $0x14,%esp
    dc58:	5b                   	pop    %ebx
    dc59:	5e                   	pop    %esi
    dc5a:	c3                   	ret    

0000dc5b <sys_lseek>:

// 重定位文件读写指针系统调用。
// 参数fd是文件句柄，offset是新的文件读写指针偏移值，origin是偏移的起始位置，可有三种选择：SEEK_SET（0,
// 从文件开始处）、SEEK_CUR（1,从当前读写位置）、SEEK_END（2,从文件尾处）。
int sys_lseek(unsigned int fd, off_t offset, int origin)
{
    dc5b:	83 ec 10             	sub    $0x10,%esp
	int tmp;

	// 首先判断函数提供的参数有效性。如果文件句柄大于程序最多打开文件数NR_OPEN（20），或者该句柄的文件结构指针为空，
	// 或者对应文件结构的i节点字段为空，或者指定设备文件指针是不可定位的，则返回出错码并退出。如果文件对应i节点是管道
	// 节点，则返回出错码退出。因为管道头尾指针不可随意移动！
	if (fd >= NR_OPEN || !(file = current->filp[fd]) || !(file->f_inode)
    dc5e:	83 7c 24 14 13       	cmpl   $0x13,0x14(%esp)
    dc63:	77 52                	ja     dcb7 <sys_lseek+0x5c>
    dc65:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    dc6a:	8b 54 24 14          	mov    0x14(%esp),%edx
    dc6e:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    dc74:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
    dc78:	89 44 24 0c          	mov    %eax,0xc(%esp)
    dc7c:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    dc81:	74 34                	je     dcb7 <sys_lseek+0x5c>
    dc83:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dc87:	8b 40 08             	mov    0x8(%eax),%eax
    dc8a:	85 c0                	test   %eax,%eax
    dc8c:	74 29                	je     dcb7 <sys_lseek+0x5c>
	   || !IS_SEEKABLE(MAJOR(file->f_inode->i_dev)))
    dc8e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dc92:	8b 40 08             	mov    0x8(%eax),%eax
    dc95:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    dc99:	66 c1 e8 08          	shr    $0x8,%ax
    dc9d:	66 85 c0             	test   %ax,%ax
    dca0:	74 15                	je     dcb7 <sys_lseek+0x5c>
    dca2:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dca6:	8b 40 08             	mov    0x8(%eax),%eax
    dca9:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    dcad:	66 c1 e8 08          	shr    $0x8,%ax
    dcb1:	66 83 f8 03          	cmp    $0x3,%ax
    dcb5:	76 0a                	jbe    dcc1 <sys_lseek+0x66>
		return -EBADF;
    dcb7:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
    dcbc:	e9 b1 00 00 00       	jmp    dd72 <sys_lseek+0x117>
	if (file->f_inode->i_pipe)
    dcc1:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dcc5:	8b 40 08             	mov    0x8(%eax),%eax
    dcc8:	0f b6 40 38          	movzbl 0x38(%eax),%eax
    dccc:	84 c0                	test   %al,%al
    dcce:	74 0a                	je     dcda <sys_lseek+0x7f>
		return -ESPIPE;
    dcd0:	b8 e3 ff ff ff       	mov    $0xffffffe3,%eax
    dcd5:	e9 98 00 00 00       	jmp    dd72 <sys_lseek+0x117>
	// 然后根据设置的定位标志，分别重新定位文件读写指针。
	switch (origin) {
    dcda:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    dcde:	83 f8 01             	cmp    $0x1,%eax
    dce1:	74 24                	je     dd07 <sys_lseek+0xac>
    dce3:	83 f8 02             	cmp    $0x2,%eax
    dce6:	74 4d                	je     dd35 <sys_lseek+0xda>
    dce8:	85 c0                	test   %eax,%eax
    dcea:	75 78                	jne    dd64 <sys_lseek+0x109>
		// origin = SEEK_SET，要求以文件起始处作为原点设置文件读写指针。若偏移值小于零，则出错返回错误码。否则设置文件
		// 读写指针等于offset。
		case 0:
			if (offset < 0) return -EINVAL;
    dcec:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
    dcf1:	79 07                	jns    dcfa <sys_lseek+0x9f>
    dcf3:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    dcf8:	eb 78                	jmp    dd72 <sys_lseek+0x117>
			file->f_pos = offset;
    dcfa:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dcfe:	8b 54 24 18          	mov    0x18(%esp),%edx
    dd02:	89 50 0c             	mov    %edx,0xc(%eax)
			break;
    dd05:	eb 64                	jmp    dd6b <sys_lseek+0x110>
		// origin = SEEK_CUR，要求以文件当前读写指针处作为原点重定位读写指针。如果文件当前指针加上偏移值小于0,则返回
		// 出错码退出。否则在当前读写指针上加上偏移值。
		case 1:
			if (file->f_pos + offset < 0) return -EINVAL;
    dd07:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dd0b:	8b 50 0c             	mov    0xc(%eax),%edx
    dd0e:	8b 44 24 18          	mov    0x18(%esp),%eax
    dd12:	01 d0                	add    %edx,%eax
    dd14:	85 c0                	test   %eax,%eax
    dd16:	79 07                	jns    dd1f <sys_lseek+0xc4>
    dd18:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    dd1d:	eb 53                	jmp    dd72 <sys_lseek+0x117>
			file->f_pos += offset;
    dd1f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dd23:	8b 50 0c             	mov    0xc(%eax),%edx
    dd26:	8b 44 24 18          	mov    0x18(%esp),%eax
    dd2a:	01 c2                	add    %eax,%edx
    dd2c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dd30:	89 50 0c             	mov    %edx,0xc(%eax)
			break;
    dd33:	eb 36                	jmp    dd6b <sys_lseek+0x110>
		// origin = SEEK_END，要求以文件末尾作为原点重定位读写指针。此时若文件大小加上偏移值小于零则返回出错码退出。否则
		// 重定位读写指针为文件长度加上偏移值。
		case 2:
			if ((tmp = file->f_inode->i_size + offset) < 0)
    dd35:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dd39:	8b 40 08             	mov    0x8(%eax),%eax
    dd3c:	8b 50 04             	mov    0x4(%eax),%edx
    dd3f:	8b 44 24 18          	mov    0x18(%esp),%eax
    dd43:	01 d0                	add    %edx,%eax
    dd45:	89 44 24 08          	mov    %eax,0x8(%esp)
    dd49:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    dd4e:	79 07                	jns    dd57 <sys_lseek+0xfc>
				return -EINVAL;
    dd50:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    dd55:	eb 1b                	jmp    dd72 <sys_lseek+0x117>
			file->f_pos = tmp;
    dd57:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dd5b:	8b 54 24 08          	mov    0x8(%esp),%edx
    dd5f:	89 50 0c             	mov    %edx,0xc(%eax)
			break;
    dd62:	eb 07                	jmp    dd6b <sys_lseek+0x110>
		// origin设置无效，返回出错码退出。
		default:
			return -EINVAL;
    dd64:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    dd69:	eb 07                	jmp    dd72 <sys_lseek+0x117>
	}
	return file->f_pos;             					// 最后返回重定位后的文件读写指针值。
    dd6b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dd6f:	8b 40 0c             	mov    0xc(%eax),%eax
}
    dd72:	83 c4 10             	add    $0x10,%esp
    dd75:	c3                   	ret    

0000dd76 <sys_read>:

// 读文件系统调用。
// 参数fd是文件句柄，buf是缓冲区，count是欲读字节数。
int sys_read(unsigned int fd, char * buf, int count)
{
    dd76:	83 ec 1c             	sub    $0x1c,%esp
	struct file * file;
	struct m_inode * inode;

	// 同样地,我们首先判断函数参数的有效性.如果进程文件句柄值大于程序最多打开文件数NR_OPEN,或者需要写入的字节计数小于0,或者该句柄的文件结构指针为空,
	// 则返回出错码并退出.如果需读取的字节数count等于0,则返回0退出.
	if (fd >= NR_OPEN || count < 0 || !(file = current->filp[fd]))
    dd79:	83 7c 24 20 13       	cmpl   $0x13,0x20(%esp)
    dd7e:	77 25                	ja     dda5 <sys_read+0x2f>
    dd80:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    dd85:	78 1e                	js     dda5 <sys_read+0x2f>
    dd87:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    dd8c:	8b 54 24 20          	mov    0x20(%esp),%edx
    dd90:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    dd96:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
    dd9a:	89 44 24 0c          	mov    %eax,0xc(%esp)
    dd9e:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    dda3:	75 0a                	jne    ddaf <sys_read+0x39>
		return -EINVAL;
    dda5:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    ddaa:	e9 99 01 00 00       	jmp    df48 <sys_read+0x1d2>
	if (!count)
    ddaf:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    ddb4:	75 0a                	jne    ddc0 <sys_read+0x4a>
		return 0;
    ddb6:	b8 00 00 00 00       	mov    $0x0,%eax
    ddbb:	e9 88 01 00 00       	jmp    df48 <sys_read+0x1d2>
	// 然后验证存放数据的缓冲区内存限制。并取文件的i节点。用于根据该i节点的属性，分别调用相应的读操作函数。若是管道操作，并且是读管道文件模式，则进行读
	// 管道操作，若成功则返回读取的字节数，否则返回出错码，退出。如果是字符型文件，则进行读字符设备操作，并返回读取的字符数。如果是块设备文件，则执行
	// 块设备读操作，并返回读取的字节数。
	verify_area(buf, count);
    ddc0:	83 ec 08             	sub    $0x8,%esp
    ddc3:	ff 74 24 30          	pushl  0x30(%esp)
    ddc7:	ff 74 24 30          	pushl  0x30(%esp)
    ddcb:	e8 d3 a5 ff ff       	call   83a3 <verify_area>
    ddd0:	83 c4 10             	add    $0x10,%esp
	inode = file->f_inode;
    ddd3:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ddd7:	8b 40 08             	mov    0x8(%eax),%eax
    ddda:	89 44 24 08          	mov    %eax,0x8(%esp)
	// 管道文件的读操作
	if (inode->i_pipe)
    ddde:	8b 44 24 08          	mov    0x8(%esp),%eax
    dde2:	0f b6 40 38          	movzbl 0x38(%eax),%eax
    dde6:	84 c0                	test   %al,%al
    dde8:	74 37                	je     de21 <sys_read+0xab>
		return (file->f_mode & 1) ? read_pipe(inode, buf, count) : -EIO;
    ddea:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ddee:	0f b7 00             	movzwl (%eax),%eax
    ddf1:	0f b7 c0             	movzwl %ax,%eax
    ddf4:	83 e0 01             	and    $0x1,%eax
    ddf7:	85 c0                	test   %eax,%eax
    ddf9:	74 1c                	je     de17 <sys_read+0xa1>
    ddfb:	83 ec 04             	sub    $0x4,%esp
    ddfe:	ff 74 24 2c          	pushl  0x2c(%esp)
    de02:	ff 74 24 2c          	pushl  0x2c(%esp)
    de06:	ff 74 24 14          	pushl  0x14(%esp)
    de0a:	e8 bc 45 00 00       	call   123cb <read_pipe>
    de0f:	83 c4 10             	add    $0x10,%esp
    de12:	e9 31 01 00 00       	jmp    df48 <sys_read+0x1d2>
    de17:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
    de1c:	e9 27 01 00 00       	jmp    df48 <sys_read+0x1d2>
	// 字符设备的读操作
	if (S_ISCHR(inode->i_mode))
    de21:	8b 44 24 08          	mov    0x8(%esp),%eax
    de25:	0f b7 00             	movzwl (%eax),%eax
    de28:	0f b7 c0             	movzwl %ax,%eax
    de2b:	25 00 f0 00 00       	and    $0xf000,%eax
    de30:	3d 00 20 00 00       	cmp    $0x2000,%eax
    de35:	75 2e                	jne    de65 <sys_read+0xef>
		return rw_char(READ, inode->i_zone[0], buf, count, &file->f_pos);
    de37:	8b 44 24 0c          	mov    0xc(%esp),%eax
    de3b:	8d 50 0c             	lea    0xc(%eax),%edx
    de3e:	8b 44 24 08          	mov    0x8(%esp),%eax
    de42:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
    de46:	0f b7 c0             	movzwl %ax,%eax
    de49:	83 ec 0c             	sub    $0xc,%esp
    de4c:	52                   	push   %edx
    de4d:	ff 74 24 38          	pushl  0x38(%esp)
    de51:	ff 74 24 38          	pushl  0x38(%esp)
    de55:	50                   	push   %eax
    de56:	6a 00                	push   $0x0
    de58:	e8 11 2c 00 00       	call   10a6e <rw_char>
    de5d:	83 c4 20             	add    $0x20,%esp
    de60:	e9 e3 00 00 00       	jmp    df48 <sys_read+0x1d2>
	// 块设备的读操作
	if (S_ISBLK(inode->i_mode))
    de65:	8b 44 24 08          	mov    0x8(%esp),%eax
    de69:	0f b7 00             	movzwl (%eax),%eax
    de6c:	0f b7 c0             	movzwl %ax,%eax
    de6f:	25 00 f0 00 00       	and    $0xf000,%eax
    de74:	3d 00 60 00 00       	cmp    $0x6000,%eax
    de79:	75 29                	jne    dea4 <sys_read+0x12e>
		return block_read(inode->i_zone[0], &file->f_pos, buf, count);
    de7b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    de7f:	8d 50 0c             	lea    0xc(%eax),%edx
    de82:	8b 44 24 08          	mov    0x8(%esp),%eax
    de86:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
    de8a:	0f b7 c0             	movzwl %ax,%eax
    de8d:	ff 74 24 28          	pushl  0x28(%esp)
    de91:	ff 74 24 28          	pushl  0x28(%esp)
    de95:	52                   	push   %edx
    de96:	50                   	push   %eax
    de97:	e8 52 28 00 00       	call   106ee <block_read>
    de9c:	83 c4 10             	add    $0x10,%esp
    de9f:	e9 a4 00 00 00       	jmp    df48 <sys_read+0x1d2>
	// 如果是目录文件或者是常规文件，则首先验证读取字节数count的有效性并进行调整（若读取字节数加上文件当前读写指针值大于文件长度，则重新设置读取字节
	// 数为文件长度-当前读写指针值，若读取数等于0,则返回0退出），然后执行文件读操作，返回读取的字节数并退出。
	if (S_ISDIR(inode->i_mode) || S_ISREG(inode->i_mode)) {
    dea4:	8b 44 24 08          	mov    0x8(%esp),%eax
    dea8:	0f b7 00             	movzwl (%eax),%eax
    deab:	0f b7 c0             	movzwl %ax,%eax
    deae:	25 00 f0 00 00       	and    $0xf000,%eax
    deb3:	3d 00 40 00 00       	cmp    $0x4000,%eax
    deb8:	74 16                	je     ded0 <sys_read+0x15a>
    deba:	8b 44 24 08          	mov    0x8(%esp),%eax
    debe:	0f b7 00             	movzwl (%eax),%eax
    dec1:	0f b7 c0             	movzwl %ax,%eax
    dec4:	25 00 f0 00 00       	and    $0xf000,%eax
    dec9:	3d 00 80 00 00       	cmp    $0x8000,%eax
    dece:	75 58                	jne    df28 <sys_read+0x1b2>
		if (count + file->f_pos > inode->i_size)
    ded0:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ded4:	8b 50 0c             	mov    0xc(%eax),%edx
    ded7:	8b 44 24 28          	mov    0x28(%esp),%eax
    dedb:	01 d0                	add    %edx,%eax
    dedd:	89 c2                	mov    %eax,%edx
    dedf:	8b 44 24 08          	mov    0x8(%esp),%eax
    dee3:	8b 40 04             	mov    0x4(%eax),%eax
    dee6:	39 c2                	cmp    %eax,%edx
    dee8:	76 16                	jbe    df00 <sys_read+0x18a>
			count = inode->i_size - file->f_pos;
    deea:	8b 44 24 08          	mov    0x8(%esp),%eax
    deee:	8b 50 04             	mov    0x4(%eax),%edx
    def1:	8b 44 24 0c          	mov    0xc(%esp),%eax
    def5:	8b 40 0c             	mov    0xc(%eax),%eax
    def8:	29 c2                	sub    %eax,%edx
    defa:	89 d0                	mov    %edx,%eax
    defc:	89 44 24 28          	mov    %eax,0x28(%esp)
		if (count <= 0)
    df00:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    df05:	7f 07                	jg     df0e <sys_read+0x198>
			return 0;
    df07:	b8 00 00 00 00       	mov    $0x0,%eax
    df0c:	eb 3a                	jmp    df48 <sys_read+0x1d2>
		return file_read(inode, file, buf, count);
    df0e:	ff 74 24 28          	pushl  0x28(%esp)
    df12:	ff 74 24 28          	pushl  0x28(%esp)
    df16:	ff 74 24 14          	pushl  0x14(%esp)
    df1a:	ff 74 24 14          	pushl  0x14(%esp)
    df1e:	e8 d1 2b 00 00       	call   10af4 <file_read>
    df23:	83 c4 10             	add    $0x10,%esp
    df26:	eb 20                	jmp    df48 <sys_read+0x1d2>
	}
	// 执行到这里，说明我们无法判断文件的属性。则打印节点文件的属性，并返回出错码退出。
	printk("(Read)inode->i_mode=%06o\n\r", inode->i_mode);
    df28:	8b 44 24 08          	mov    0x8(%esp),%eax
    df2c:	0f b7 00             	movzwl (%eax),%eax
    df2f:	0f b7 c0             	movzwl %ax,%eax
    df32:	83 ec 08             	sub    $0x8,%esp
    df35:	50                   	push   %eax
    df36:	68 6b 37 02 00       	push   $0x2376b
    df3b:	e8 07 ad ff ff       	call   8c47 <printk>
    df40:	83 c4 10             	add    $0x10,%esp
	return -EINVAL;
    df43:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
}
    df48:	83 c4 1c             	add    $0x1c,%esp
    df4b:	c3                   	ret    

0000df4c <sys_write>:

// 写文件系统调用.
// 参数fd是文件句柄,buf是用户缓冲区,count是欲写字节数.
int sys_write(unsigned int fd, char * buf, int count)
{
    df4c:	83 ec 1c             	sub    $0x1c,%esp
	struct file * file;
	struct m_inode * inode;

	// 同样地,我们首先判断函数参数的有效性.如果进程文件句柄值大于程序最多打开文件数NR_OPEN,或者需要写入的字节计数小于0,或者该句柄的文件结构指针为空,
	// 则返回出错码并退出.如果需读取的字节数count等于0,则返回0退出.
	if (fd >= NR_OPEN || count < 0 || !(file = current->filp[fd]))
    df4f:	83 7c 24 20 13       	cmpl   $0x13,0x20(%esp)
    df54:	77 25                	ja     df7b <sys_write+0x2f>
    df56:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    df5b:	78 1e                	js     df7b <sys_write+0x2f>
    df5d:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
    df62:	8b 54 24 20          	mov    0x20(%esp),%edx
    df66:	81 c2 d0 00 00 00    	add    $0xd0,%edx
    df6c:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
    df70:	89 44 24 0c          	mov    %eax,0xc(%esp)
    df74:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    df79:	75 0a                	jne    df85 <sys_write+0x39>
		return -EINVAL;
    df7b:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
    df80:	e9 2f 01 00 00       	jmp    e0b4 <sys_write+0x168>
	// Log(LOG_INFO_TYPE, "<<<<< sys_write : fd = %d>>>>>\n", fd);
	if (!count)
    df85:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    df8a:	75 0a                	jne    df96 <sys_write+0x4a>
		return 0;
    df8c:	b8 00 00 00 00       	mov    $0x0,%eax
    df91:	e9 1e 01 00 00       	jmp    e0b4 <sys_write+0x168>
	// 然后验证存放数据的缓冲区内存限制.并取文件的i节点.根据该i节点的属性,分别调用相应的写操作函数.若是管道文件,并且是写管道文件模式,则进行写管道操作,若成功则
	// 返回写入的字节数,否则返回出错码退出.如果是字符设备文件,则进行写字符设备操作,返回写入的字符数退出.如果是块设备文件,则进行块设备写操作,并返回写入的字节数
	// 退出.若是常规文件,则执行文件写操作,并返回写入的字节数.退出.
	inode = file->f_inode;
    df96:	8b 44 24 0c          	mov    0xc(%esp),%eax
    df9a:	8b 40 08             	mov    0x8(%eax),%eax
    df9d:	89 44 24 08          	mov    %eax,0x8(%esp)
	// 管道的写操作
	if (inode->i_pipe)
    dfa1:	8b 44 24 08          	mov    0x8(%esp),%eax
    dfa5:	0f b6 40 38          	movzbl 0x38(%eax),%eax
    dfa9:	84 c0                	test   %al,%al
    dfab:	74 37                	je     dfe4 <sys_write+0x98>
		return (file->f_mode & 2) ? write_pipe(inode, buf, count) : -EIO;
    dfad:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dfb1:	0f b7 00             	movzwl (%eax),%eax
    dfb4:	0f b7 c0             	movzwl %ax,%eax
    dfb7:	83 e0 02             	and    $0x2,%eax
    dfba:	85 c0                	test   %eax,%eax
    dfbc:	74 1c                	je     dfda <sys_write+0x8e>
    dfbe:	83 ec 04             	sub    $0x4,%esp
    dfc1:	ff 74 24 2c          	pushl  0x2c(%esp)
    dfc5:	ff 74 24 2c          	pushl  0x2c(%esp)
    dfc9:	ff 74 24 14          	pushl  0x14(%esp)
    dfcd:	e8 9b 45 00 00       	call   1256d <write_pipe>
    dfd2:	83 c4 10             	add    $0x10,%esp
    dfd5:	e9 da 00 00 00       	jmp    e0b4 <sys_write+0x168>
    dfda:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
    dfdf:	e9 d0 00 00 00       	jmp    e0b4 <sys_write+0x168>
	// 字符设备的写操作
	if (S_ISCHR(inode->i_mode))
    dfe4:	8b 44 24 08          	mov    0x8(%esp),%eax
    dfe8:	0f b7 00             	movzwl (%eax),%eax
    dfeb:	0f b7 c0             	movzwl %ax,%eax
    dfee:	25 00 f0 00 00       	and    $0xf000,%eax
    dff3:	3d 00 20 00 00       	cmp    $0x2000,%eax
    dff8:	75 2e                	jne    e028 <sys_write+0xdc>
		return rw_char(WRITE, inode->i_zone[0], buf, count, &file->f_pos);
    dffa:	8b 44 24 0c          	mov    0xc(%esp),%eax
    dffe:	8d 50 0c             	lea    0xc(%eax),%edx
    e001:	8b 44 24 08          	mov    0x8(%esp),%eax
    e005:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
    e009:	0f b7 c0             	movzwl %ax,%eax
    e00c:	83 ec 0c             	sub    $0xc,%esp
    e00f:	52                   	push   %edx
    e010:	ff 74 24 38          	pushl  0x38(%esp)
    e014:	ff 74 24 38          	pushl  0x38(%esp)
    e018:	50                   	push   %eax
    e019:	6a 01                	push   $0x1
    e01b:	e8 4e 2a 00 00       	call   10a6e <rw_char>
    e020:	83 c4 20             	add    $0x20,%esp
    e023:	e9 8c 00 00 00       	jmp    e0b4 <sys_write+0x168>
	// 块设备的写操作
	if (S_ISBLK(inode->i_mode))
    e028:	8b 44 24 08          	mov    0x8(%esp),%eax
    e02c:	0f b7 00             	movzwl (%eax),%eax
    e02f:	0f b7 c0             	movzwl %ax,%eax
    e032:	25 00 f0 00 00       	and    $0xf000,%eax
    e037:	3d 00 60 00 00       	cmp    $0x6000,%eax
    e03c:	75 26                	jne    e064 <sys_write+0x118>
		return block_write(inode->i_zone[0], &file->f_pos, buf, count);
    e03e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e042:	8d 50 0c             	lea    0xc(%eax),%edx
    e045:	8b 44 24 08          	mov    0x8(%esp),%eax
    e049:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
    e04d:	0f b7 c0             	movzwl %ax,%eax
    e050:	ff 74 24 28          	pushl  0x28(%esp)
    e054:	ff 74 24 28          	pushl  0x28(%esp)
    e058:	52                   	push   %edx
    e059:	50                   	push   %eax
    e05a:	e8 db 24 00 00       	call   1053a <block_write>
    e05f:	83 c4 10             	add    $0x10,%esp
    e062:	eb 50                	jmp    e0b4 <sys_write+0x168>
	// 文件的写操作
	if (S_ISREG(inode->i_mode))
    e064:	8b 44 24 08          	mov    0x8(%esp),%eax
    e068:	0f b7 00             	movzwl (%eax),%eax
    e06b:	0f b7 c0             	movzwl %ax,%eax
    e06e:	25 00 f0 00 00       	and    $0xf000,%eax
    e073:	3d 00 80 00 00       	cmp    $0x8000,%eax
    e078:	75 1a                	jne    e094 <sys_write+0x148>
		return file_write(inode, file, buf, count);
    e07a:	ff 74 24 28          	pushl  0x28(%esp)
    e07e:	ff 74 24 28          	pushl  0x28(%esp)
    e082:	ff 74 24 14          	pushl  0x14(%esp)
    e086:	ff 74 24 14          	pushl  0x14(%esp)
    e08a:	e8 0c 2c 00 00       	call   10c9b <file_write>
    e08f:	83 c4 10             	add    $0x10,%esp
    e092:	eb 20                	jmp    e0b4 <sys_write+0x168>
	// 执行到这里,说明我们无法判断文件的属性.则打印节点文件属性,并返回出错码退出.
	printk("(Write)inode->i_mode=%06o\n\r", inode->i_mode);
    e094:	8b 44 24 08          	mov    0x8(%esp),%eax
    e098:	0f b7 00             	movzwl (%eax),%eax
    e09b:	0f b7 c0             	movzwl %ax,%eax
    e09e:	83 ec 08             	sub    $0x8,%esp
    e0a1:	50                   	push   %eax
    e0a2:	68 86 37 02 00       	push   $0x23786
    e0a7:	e8 9b ab ff ff       	call   8c47 <printk>
    e0ac:	83 c4 10             	add    $0x10,%esp
	return -EINVAL;
    e0af:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
}
    e0b4:	83 c4 1c             	add    $0x1c,%esp
    e0b7:	c3                   	ret    

0000e0b8 <memset>:

// 用字符填写指定长度内存块.
// 用字符c填写s指向的内存区域,共填count字节.
// %0 - eax(字符c),%1 - edi(内存地址),%2 - ecx(字节数count).
static inline void * memset(void * s, char c, int count)
{
    e0b8:	57                   	push   %edi
    e0b9:	83 ec 04             	sub    $0x4,%esp
    e0bc:	8b 44 24 10          	mov    0x10(%esp),%eax
    e0c0:	88 04 24             	mov    %al,(%esp)
__asm__(
    e0c3:	0f b6 04 24          	movzbl (%esp),%eax
    e0c7:	8b 54 24 0c          	mov    0xc(%esp),%edx
    e0cb:	8b 4c 24 14          	mov    0x14(%esp),%ecx
    e0cf:	89 d7                	mov    %edx,%edi
    e0d1:	fc                   	cld    
    e0d2:	57                   	push   %edi
    e0d3:	f3 aa                	rep stos %al,%es:(%edi)
    e0d5:	5f                   	pop    %edi
		"rep\n\t"											// 重复ecx指定的次数,执行.
		"stosb\n\t"											// 将al中字符存入es:[edi]中,并且edi++.
		"popl %%edi"
		::"a" (c), "D" (s), "c" (count)
		:);
return s;
    e0d6:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    e0da:	83 c4 04             	add    $0x4,%esp
    e0dd:	5f                   	pop    %edi
    e0de:	c3                   	ret    

0000e0df <wait_on_inode>:
static void write_inode(struct m_inode * inode);					// 写i节点信息到高速缓冲中.

// 等待指定的i节点可用.
// 如果i节点已被锁定,则将当前任务置为不可中断的等待状态,并添加到该i节点的等待队列i_wait中.直到该i节点解锁并明确地唤醒本任务.
static inline void wait_on_inode(struct m_inode * inode)
{
    e0df:	83 ec 0c             	sub    $0xc,%esp
	cli();
    e0e2:	fa                   	cli    
	while (inode->i_lock)
    e0e3:	eb 13                	jmp    e0f8 <wait_on_inode+0x19>
		sleep_on(&inode->i_wait);									// kernel/sched.c
    e0e5:	8b 44 24 10          	mov    0x10(%esp),%eax
    e0e9:	83 c0 20             	add    $0x20,%eax
    e0ec:	83 ec 0c             	sub    $0xc,%esp
    e0ef:	50                   	push   %eax
    e0f0:	e8 41 90 ff ff       	call   7136 <sleep_on>
    e0f5:	83 c4 10             	add    $0x10,%esp
// 等待指定的i节点可用.
// 如果i节点已被锁定,则将当前任务置为不可中断的等待状态,并添加到该i节点的等待队列i_wait中.直到该i节点解锁并明确地唤醒本任务.
static inline void wait_on_inode(struct m_inode * inode)
{
	cli();
	while (inode->i_lock)
    e0f8:	8b 44 24 10          	mov    0x10(%esp),%eax
    e0fc:	0f b6 40 36          	movzbl 0x36(%eax),%eax
    e100:	84 c0                	test   %al,%al
    e102:	75 e1                	jne    e0e5 <wait_on_inode+0x6>
		sleep_on(&inode->i_wait);									// kernel/sched.c
	sti();
    e104:	fb                   	sti    
}
    e105:	90                   	nop
    e106:	83 c4 0c             	add    $0xc,%esp
    e109:	c3                   	ret    

0000e10a <lock_inode>:

// 对i节点上锁(锁定指定的i节点)
// 如果i节点已被锁定,则将当前任务置为不可中断的等待状态,并添加到该i节点的等待队列i_wait中.直到该i节点解锁并明确地唤醒本任务.然后
// 对其上锁.
static inline void lock_inode(struct m_inode * inode)
{
    e10a:	83 ec 0c             	sub    $0xc,%esp
	cli();
    e10d:	fa                   	cli    
	while (inode->i_lock)
    e10e:	eb 13                	jmp    e123 <lock_inode+0x19>
		sleep_on(&inode->i_wait);
    e110:	8b 44 24 10          	mov    0x10(%esp),%eax
    e114:	83 c0 20             	add    $0x20,%eax
    e117:	83 ec 0c             	sub    $0xc,%esp
    e11a:	50                   	push   %eax
    e11b:	e8 16 90 ff ff       	call   7136 <sleep_on>
    e120:	83 c4 10             	add    $0x10,%esp
// 如果i节点已被锁定,则将当前任务置为不可中断的等待状态,并添加到该i节点的等待队列i_wait中.直到该i节点解锁并明确地唤醒本任务.然后
// 对其上锁.
static inline void lock_inode(struct m_inode * inode)
{
	cli();
	while (inode->i_lock)
    e123:	8b 44 24 10          	mov    0x10(%esp),%eax
    e127:	0f b6 40 36          	movzbl 0x36(%eax),%eax
    e12b:	84 c0                	test   %al,%al
    e12d:	75 e1                	jne    e110 <lock_inode+0x6>
		sleep_on(&inode->i_wait);
	inode->i_lock = 1;												// 置锁定标志.
    e12f:	8b 44 24 10          	mov    0x10(%esp),%eax
    e133:	c6 40 36 01          	movb   $0x1,0x36(%eax)
	sti();
    e137:	fb                   	sti    
}
    e138:	90                   	nop
    e139:	83 c4 0c             	add    $0xc,%esp
    e13c:	c3                   	ret    

0000e13d <unlock_inode>:

// 对指定的i节点解锁.
// 复位i节点的锁定标志,并明确地唤醒等待在此i节点等待队列i_wait上的所有进程.
static inline void unlock_inode(struct m_inode * inode)
{
    e13d:	83 ec 0c             	sub    $0xc,%esp
	inode->i_lock = 0;
    e140:	8b 44 24 10          	mov    0x10(%esp),%eax
    e144:	c6 40 36 00          	movb   $0x0,0x36(%eax)
	wake_up(&inode->i_wait);										// kernel/sched.c
    e148:	8b 44 24 10          	mov    0x10(%esp),%eax
    e14c:	83 c0 20             	add    $0x20,%eax
    e14f:	83 ec 0c             	sub    $0xc,%esp
    e152:	50                   	push   %eax
    e153:	e8 f7 8f ff ff       	call   714f <wake_up>
    e158:	83 c4 10             	add    $0x10,%esp
}
    e15b:	90                   	nop
    e15c:	83 c4 0c             	add    $0xc,%esp
    e15f:	c3                   	ret    

0000e160 <invalidate_inodes>:

// 释放设备dev在内存i节点表中的所有i节点。
// 扫描内存中的i节点表数组，如果是指定设备使用的i节点就释放之。
void invalidate_inodes(int dev)
{
    e160:	83 ec 1c             	sub    $0x1c,%esp

	// 首先让指针指向内存i节点表数组首项。然后扫描i节点表指针数组中的所有i节点。针对其中每个i节点，先等待该i节点
	// 解锁可用（若目前正被上锁的话），再判断是否属于指定设备的i节点。如果是指定设备的i节点，则看看它是否还被使用
	// 着，即其引用计数是否不为0。若是则显示警告信息。然后释放之，即把i节点的设备号字段i_dev置。第50行上的指针
	// 赋值"0+inode_table"等同于"inode_table"、"&inode_table[0]"。不过这样写可能更明了一些。
	inode = 0 + inode_table;                  						// 指向i节点表指针数组首项。
    e163:	c7 44 24 08 c0 01 03 	movl   $0x301c0,0x8(%esp)
    e16a:	00 
	for(i = 0 ; i < NR_INODE ; i++, inode++) {
    e16b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    e172:	00 
    e173:	eb 59                	jmp    e1ce <invalidate_inodes+0x6e>
		wait_on_inode(inode);           							// 等待该i节点可用（解锁）。
    e175:	83 ec 0c             	sub    $0xc,%esp
    e178:	ff 74 24 14          	pushl  0x14(%esp)
    e17c:	e8 5e ff ff ff       	call   e0df <wait_on_inode>
    e181:	83 c4 10             	add    $0x10,%esp
		if (inode->i_dev == dev) {
    e184:	8b 44 24 08          	mov    0x8(%esp),%eax
    e188:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e18c:	0f b7 c0             	movzwl %ax,%eax
    e18f:	3b 44 24 20          	cmp    0x20(%esp),%eax
    e193:	75 2f                	jne    e1c4 <invalidate_inodes+0x64>
			if (inode->i_count)     								// 若其引用数不为0,则显示出错警告。
    e195:	8b 44 24 08          	mov    0x8(%esp),%eax
    e199:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    e19d:	66 85 c0             	test   %ax,%ax
    e1a0:	74 10                	je     e1b2 <invalidate_inodes+0x52>
				printk("inode in use on removed disk\n\r");
    e1a2:	83 ec 0c             	sub    $0xc,%esp
    e1a5:	68 a4 37 02 00       	push   $0x237a4
    e1aa:	e8 98 aa ff ff       	call   8c47 <printk>
    e1af:	83 c4 10             	add    $0x10,%esp
			inode->i_dev = inode->i_dirt = 0;       				// 释放i节点（置设备号为0）。
    e1b2:	8b 44 24 08          	mov    0x8(%esp),%eax
    e1b6:	c6 40 37 00          	movb   $0x0,0x37(%eax)
    e1ba:	8b 44 24 08          	mov    0x8(%esp),%eax
    e1be:	66 c7 40 30 00 00    	movw   $0x0,0x30(%eax)
	// 首先让指针指向内存i节点表数组首项。然后扫描i节点表指针数组中的所有i节点。针对其中每个i节点，先等待该i节点
	// 解锁可用（若目前正被上锁的话），再判断是否属于指定设备的i节点。如果是指定设备的i节点，则看看它是否还被使用
	// 着，即其引用计数是否不为0。若是则显示警告信息。然后释放之，即把i节点的设备号字段i_dev置。第50行上的指针
	// 赋值"0+inode_table"等同于"inode_table"、"&inode_table[0]"。不过这样写可能更明了一些。
	inode = 0 + inode_table;                  						// 指向i节点表指针数组首项。
	for(i = 0 ; i < NR_INODE ; i++, inode++) {
    e1c4:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    e1c9:	83 44 24 08 3c       	addl   $0x3c,0x8(%esp)
    e1ce:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    e1d3:	7e a0                	jle    e175 <invalidate_inodes+0x15>
			if (inode->i_count)     								// 若其引用数不为0,则显示出错警告。
				printk("inode in use on removed disk\n\r");
			inode->i_dev = inode->i_dirt = 0;       				// 释放i节点（置设备号为0）。
		}
	}
}
    e1d5:	90                   	nop
    e1d6:	83 c4 1c             	add    $0x1c,%esp
    e1d9:	c3                   	ret    

0000e1da <sync_inodes>:

// 同步所有i节点。
// 把内存i节点表中所有i节点与设备上i节点作同步操作。
void sync_inodes(void)
{
    e1da:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * inode;

	// 首先让内存i节点类型的指针指向i节点表首项，然后扫描整个i节点表中的节点。针对其中每个i节点，先等待该i节点解锁可用（若
	// 目前正被上锁的话），然后判断该i节点是否已被修改并且不是管道节点。若是这种情况则将该i节点写入高速缓冲区中，缓冲区管理
	// 程序buffer.c会在适当时机将它们写入盘中。
	inode = 0 + inode_table;                          				// 让指针首先指向i节点表指针数组首项。
    e1dd:	c7 44 24 08 c0 01 03 	movl   $0x301c0,0x8(%esp)
    e1e4:	00 
	for(i = 0 ; i < NR_INODE ; i++, inode++) {           			// 扫描i节点表指针数组。
    e1e5:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    e1ec:	00 
    e1ed:	eb 40                	jmp    e22f <sync_inodes+0x55>
		wait_on_inode(inode);                   					// 等待该i节点可用（解锁）。
    e1ef:	83 ec 0c             	sub    $0xc,%esp
    e1f2:	ff 74 24 14          	pushl  0x14(%esp)
    e1f6:	e8 e4 fe ff ff       	call   e0df <wait_on_inode>
    e1fb:	83 c4 10             	add    $0x10,%esp
		if (inode->i_dirt && !inode->i_pipe)    					// 若i节点已修改且不是管道节点，
    e1fe:	8b 44 24 08          	mov    0x8(%esp),%eax
    e202:	0f b6 40 37          	movzbl 0x37(%eax),%eax
    e206:	84 c0                	test   %al,%al
    e208:	74 1b                	je     e225 <sync_inodes+0x4b>
    e20a:	8b 44 24 08          	mov    0x8(%esp),%eax
    e20e:	0f b6 40 38          	movzbl 0x38(%eax),%eax
    e212:	84 c0                	test   %al,%al
    e214:	75 0f                	jne    e225 <sync_inodes+0x4b>
			write_inode(inode);             						// 则写盘（实际是写入缓冲区中）。
    e216:	83 ec 0c             	sub    $0xc,%esp
    e219:	ff 74 24 14          	pushl  0x14(%esp)
    e21d:	e8 5e 0b 00 00       	call   ed80 <write_inode>
    e222:	83 c4 10             	add    $0x10,%esp

	// 首先让内存i节点类型的指针指向i节点表首项，然后扫描整个i节点表中的节点。针对其中每个i节点，先等待该i节点解锁可用（若
	// 目前正被上锁的话），然后判断该i节点是否已被修改并且不是管道节点。若是这种情况则将该i节点写入高速缓冲区中，缓冲区管理
	// 程序buffer.c会在适当时机将它们写入盘中。
	inode = 0 + inode_table;                          				// 让指针首先指向i节点表指针数组首项。
	for(i = 0 ; i < NR_INODE ; i++, inode++) {           			// 扫描i节点表指针数组。
    e225:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    e22a:	83 44 24 08 3c       	addl   $0x3c,0x8(%esp)
    e22f:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
    e234:	7e b9                	jle    e1ef <sync_inodes+0x15>
		wait_on_inode(inode);                   					// 等待该i节点可用（解锁）。
		if (inode->i_dirt && !inode->i_pipe)    					// 若i节点已修改且不是管道节点，
			write_inode(inode);             						// 则写盘（实际是写入缓冲区中）。
	}
}
    e236:	90                   	nop
    e237:	83 c4 1c             	add    $0x1c,%esp
    e23a:	c3                   	ret    

0000e23b <_bmap>:

// 文件数据块映射到盘块的处理操作.(block位图处理函数,bmap - block map)
// 参数:inode - 文件的i节点指针;block - 文件中的数据块号;create - 创建块标志.该函数把指定的文件数据块block对应到设备上逻辑块上,并返回逻辑块号.
// 如果创建标志置位,则在设备上对应逻辑块不存在时就申请新磁盘块,返回文件数据块block对应在设备上的逻辑块号(盘块号).
static int _bmap(struct m_inode * inode, int block, int create)
{
    e23b:	83 ec 1c             	sub    $0x1c,%esp
	struct buffer_head * bh;
	int i;

	// 首先判断参数文件数据块号block的有效性.如果块号小于0,则停机.如果块号大于直接块数 + 间接块数 + 二次间接块数,超出文件系统表示范围,则停机.
	if (block < 0)
    e23e:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
    e243:	79 10                	jns    e255 <_bmap+0x1a>
		panic("_bmap: block<0");
    e245:	83 ec 0c             	sub    $0xc,%esp
    e248:	68 c3 37 02 00       	push   $0x237c3
    e24d:	e8 b6 a9 ff ff       	call   8c08 <panic>
    e252:	83 c4 10             	add    $0x10,%esp
	if (block >= 7 + 512 + 512 * 512)
    e255:	81 7c 24 24 06 02 04 	cmpl   $0x40206,0x24(%esp)
    e25c:	00 
    e25d:	7e 10                	jle    e26f <_bmap+0x34>
		panic("_bmap: block>big");
    e25f:	83 ec 0c             	sub    $0xc,%esp
    e262:	68 d2 37 02 00       	push   $0x237d2
    e267:	e8 9c a9 ff ff       	call   8c08 <panic>
    e26c:	83 c4 10             	add    $0x10,%esp
	// 然后根据文件块号的大小值和是否设置了创建标志分别进行处理.如果该块号小于7,则使用直接块表示.如果创建标志置位,并且i节点中对应该块的逻辑块(区段)字段为0,
	// 则向相应设备申请一磁盘块(逻辑块),并且将盘上逻辑块号(盘块号)填入逻辑块字段中.然后设置i节点改变时间,置i节点已修改标志.最后返回逻辑块号.函数new_block()
	// 定义在bitmap.c程序中.
	if (block < 7) {
    e26f:	83 7c 24 24 06       	cmpl   $0x6,0x24(%esp)
    e274:	0f 8f 93 00 00 00    	jg     e30d <_bmap+0xd2>
		if (create && !inode->i_zone[block])
    e27a:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    e27f:	74 77                	je     e2f8 <_bmap+0xbd>
    e281:	8b 44 24 20          	mov    0x20(%esp),%eax
    e285:	8b 54 24 24          	mov    0x24(%esp),%edx
    e289:	0f b7 44 50 0e       	movzwl 0xe(%eax,%edx,2),%eax
    e28e:	66 85 c0             	test   %ax,%ax
    e291:	75 65                	jne    e2f8 <_bmap+0xbd>
			if (inode->i_zone[block] = new_block(inode->i_dev)) {
    e293:	8b 44 24 20          	mov    0x20(%esp),%eax
    e297:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e29b:	0f b7 c0             	movzwl %ax,%eax
    e29e:	83 ec 0c             	sub    $0xc,%esp
    e2a1:	50                   	push   %eax
    e2a2:	e8 fc 6a 00 00       	call   14da3 <new_block>
    e2a7:	83 c4 10             	add    $0x10,%esp
    e2aa:	89 c1                	mov    %eax,%ecx
    e2ac:	8b 44 24 20          	mov    0x20(%esp),%eax
    e2b0:	8b 54 24 24          	mov    0x24(%esp),%edx
    e2b4:	66 89 4c 50 0e       	mov    %cx,0xe(%eax,%edx,2)
    e2b9:	8b 44 24 20          	mov    0x20(%esp),%eax
    e2bd:	8b 54 24 24          	mov    0x24(%esp),%edx
    e2c1:	0f b7 44 50 0e       	movzwl 0xe(%eax,%edx,2),%eax
    e2c6:	66 85 c0             	test   %ax,%ax
    e2c9:	74 2d                	je     e2f8 <_bmap+0xbd>
				inode->i_ctime = CURRENT_TIME;
    e2cb:	a1 00 eb 02 00       	mov    0x2eb00,%eax
    e2d0:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
    e2d6:	01 d0                	add    %edx,%eax
    e2d8:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    e2dd:	f7 e2                	mul    %edx
    e2df:	c1 ea 05             	shr    $0x5,%edx
    e2e2:	a1 04 eb 02 00       	mov    0x2eb04,%eax
    e2e7:	01 c2                	add    %eax,%edx
    e2e9:	8b 44 24 20          	mov    0x20(%esp),%eax
    e2ed:	89 50 2c             	mov    %edx,0x2c(%eax)
				inode->i_dirt = 1;
    e2f0:	8b 44 24 20          	mov    0x20(%esp),%eax
    e2f4:	c6 40 37 01          	movb   $0x1,0x37(%eax)
			}
		return inode->i_zone[block];
    e2f8:	8b 44 24 20          	mov    0x20(%esp),%eax
    e2fc:	8b 54 24 24          	mov    0x24(%esp),%edx
    e300:	0f b7 44 50 0e       	movzwl 0xe(%eax,%edx,2),%eax
    e305:	0f b7 c0             	movzwl %ax,%eax
    e308:	e9 53 03 00 00       	jmp    e660 <_bmap+0x425>
	}
	// 如果该块号>=7,且小于7+512,则说明使用的是一次间接块.下面对一次间接块进行处理.如果是创建,并且该i节点中对应间接块字段i_zone[7]是0,表明文件是首次使用间接块,
	// 则需申请一磁盘块用于存放间接块信息,并将此实际磁盘块号填入间接块字段中.然后设置i节点已修改标志和修改时间.如果创建时申请磁盘块失败,则此时i节点间接块字段i_zone[7]
	// 为0,则返回0.或者不是创建,但i_zone[7]原来就为0,表明i节点中没有间接块,于是映射磁盘块失败,返回0退出.
	block -= 7;
    e30d:	83 6c 24 24 07       	subl   $0x7,0x24(%esp)
	if (block < 512) {
    e312:	81 7c 24 24 ff 01 00 	cmpl   $0x1ff,0x24(%esp)
    e319:	00 
    e31a:	0f 8f 3b 01 00 00    	jg     e45b <_bmap+0x220>
		// 如果创建标志置位，同时索引7这个位置没有绑定到对应的逻辑块,则申请一个逻辑块
		if (create && !inode->i_zone[7])
    e320:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    e325:	74 68                	je     e38f <_bmap+0x154>
    e327:	8b 44 24 20          	mov    0x20(%esp),%eax
    e32b:	0f b7 40 1c          	movzwl 0x1c(%eax),%eax
    e32f:	66 85 c0             	test   %ax,%ax
    e332:	75 5b                	jne    e38f <_bmap+0x154>
			if (inode->i_zone[7] = new_block(inode->i_dev)) {
    e334:	8b 44 24 20          	mov    0x20(%esp),%eax
    e338:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e33c:	0f b7 c0             	movzwl %ax,%eax
    e33f:	83 ec 0c             	sub    $0xc,%esp
    e342:	50                   	push   %eax
    e343:	e8 5b 6a 00 00       	call   14da3 <new_block>
    e348:	83 c4 10             	add    $0x10,%esp
    e34b:	89 c2                	mov    %eax,%edx
    e34d:	8b 44 24 20          	mov    0x20(%esp),%eax
    e351:	66 89 50 1c          	mov    %dx,0x1c(%eax)
    e355:	8b 44 24 20          	mov    0x20(%esp),%eax
    e359:	0f b7 40 1c          	movzwl 0x1c(%eax),%eax
    e35d:	66 85 c0             	test   %ax,%ax
    e360:	74 2d                	je     e38f <_bmap+0x154>
				inode->i_dirt = 1;
    e362:	8b 44 24 20          	mov    0x20(%esp),%eax
    e366:	c6 40 37 01          	movb   $0x1,0x37(%eax)
				inode->i_ctime = CURRENT_TIME;
    e36a:	a1 00 eb 02 00       	mov    0x2eb00,%eax
    e36f:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
    e375:	01 d0                	add    %edx,%eax
    e377:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    e37c:	f7 e2                	mul    %edx
    e37e:	c1 ea 05             	shr    $0x5,%edx
    e381:	a1 04 eb 02 00       	mov    0x2eb04,%eax
    e386:	01 c2                	add    %eax,%edx
    e388:	8b 44 24 20          	mov    0x20(%esp),%eax
    e38c:	89 50 2c             	mov    %edx,0x2c(%eax)
			}
		if (!inode->i_zone[7])
    e38f:	8b 44 24 20          	mov    0x20(%esp),%eax
    e393:	0f b7 40 1c          	movzwl 0x1c(%eax),%eax
    e397:	66 85 c0             	test   %ax,%ax
    e39a:	75 0a                	jne    e3a6 <_bmap+0x16b>
			return 0;
    e39c:	b8 00 00 00 00       	mov    $0x0,%eax
    e3a1:	e9 ba 02 00 00       	jmp    e660 <_bmap+0x425>
		// 现在读取设备上该i节点的一次间接块.并取该间接块上第block项中的逻辑块号(盘块号)i.每一项占2个字节.如果是创建并且间接块的第block项中的逻辑块号为0的话,则申请一磁盘块,
		// 并让间接块中的第block项等于该新逻辑块块号.然后置位间接块的已修改标志.如果不是创建,则i就是需要映射(寻找)的逻辑块号.
		if (!(bh = bread(inode->i_dev, inode->i_zone[7])))
    e3a6:	8b 44 24 20          	mov    0x20(%esp),%eax
    e3aa:	0f b7 40 1c          	movzwl 0x1c(%eax),%eax
    e3ae:	0f b7 d0             	movzwl %ax,%edx
    e3b1:	8b 44 24 20          	mov    0x20(%esp),%eax
    e3b5:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e3b9:	0f b7 c0             	movzwl %ax,%eax
    e3bc:	83 ec 08             	sub    $0x8,%esp
    e3bf:	52                   	push   %edx
    e3c0:	50                   	push   %eax
    e3c1:	e8 cd 12 00 00       	call   f693 <bread>
    e3c6:	83 c4 10             	add    $0x10,%esp
    e3c9:	89 44 24 08          	mov    %eax,0x8(%esp)
    e3cd:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    e3d2:	75 0a                	jne    e3de <_bmap+0x1a3>
			return 0;
    e3d4:	b8 00 00 00 00       	mov    $0x0,%eax
    e3d9:	e9 82 02 00 00       	jmp    e660 <_bmap+0x425>
		i = ((unsigned short *) (bh->b_data))[block];
    e3de:	8b 44 24 08          	mov    0x8(%esp),%eax
    e3e2:	8b 00                	mov    (%eax),%eax
    e3e4:	8b 54 24 24          	mov    0x24(%esp),%edx
    e3e8:	01 d2                	add    %edx,%edx
    e3ea:	01 d0                	add    %edx,%eax
    e3ec:	0f b7 00             	movzwl (%eax),%eax
    e3ef:	0f b7 c0             	movzwl %ax,%eax
    e3f2:	89 44 24 0c          	mov    %eax,0xc(%esp)
		if (create && !i)
    e3f6:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    e3fb:	74 46                	je     e443 <_bmap+0x208>
    e3fd:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    e402:	75 3f                	jne    e443 <_bmap+0x208>
			if (i = new_block(inode->i_dev)) {
    e404:	8b 44 24 20          	mov    0x20(%esp),%eax
    e408:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e40c:	0f b7 c0             	movzwl %ax,%eax
    e40f:	83 ec 0c             	sub    $0xc,%esp
    e412:	50                   	push   %eax
    e413:	e8 8b 69 00 00       	call   14da3 <new_block>
    e418:	83 c4 10             	add    $0x10,%esp
    e41b:	89 44 24 0c          	mov    %eax,0xc(%esp)
    e41f:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    e424:	74 1d                	je     e443 <_bmap+0x208>
				((unsigned short *) (bh->b_data))[block] = i;
    e426:	8b 44 24 08          	mov    0x8(%esp),%eax
    e42a:	8b 00                	mov    (%eax),%eax
    e42c:	8b 54 24 24          	mov    0x24(%esp),%edx
    e430:	01 d2                	add    %edx,%edx
    e432:	01 d0                	add    %edx,%eax
    e434:	8b 54 24 0c          	mov    0xc(%esp),%edx
    e438:	66 89 10             	mov    %dx,(%eax)
				bh->b_dirt = 1;
    e43b:	8b 44 24 08          	mov    0x8(%esp),%eax
    e43f:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
			}
		// 最后释放该间接块占用的缓冲块,并返回磁盘上新申请或原有的对应block的逻辑块块号.
		brelse(bh);
    e443:	83 ec 0c             	sub    $0xc,%esp
    e446:	ff 74 24 14          	pushl  0x14(%esp)
    e44a:	e8 ee 11 00 00       	call   f63d <brelse>
    e44f:	83 c4 10             	add    $0x10,%esp
		return i;
    e452:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e456:	e9 05 02 00 00       	jmp    e660 <_bmap+0x425>
	}
	// 若程序运行到此,则表明数据块属于二次间接块.其处理过程与一次间接块类似.下面是对二次间接块的处理.首先将block再减去间接块所容纳的块数(512).然后根据
	// 是否设置了创建标志进行创建或寻找处理.如果是新创建并且i节点的二次间接块字段为0,则需申请一磁盘块用于存放二次间接块的一级块信息,并将此实际磁盘块号填入
	// 二次间接块字段中.之后,置i节点已修改编制和修改时间.同样地,如果创建时申请磁盘块失败,则此时i节点二次间接块字段i_zone[8]为0,则返回0.或者不是创建,但
	// i_zone[8]原来变为0,表明i节点中没有间接块,于是映射磁盘块失败,返回0退出.
	block -= 512;
    e45b:	81 6c 24 24 00 02 00 	subl   $0x200,0x24(%esp)
    e462:	00 
	if (create && !inode->i_zone[8])
    e463:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    e468:	74 68                	je     e4d2 <_bmap+0x297>
    e46a:	8b 44 24 20          	mov    0x20(%esp),%eax
    e46e:	0f b7 40 1e          	movzwl 0x1e(%eax),%eax
    e472:	66 85 c0             	test   %ax,%ax
    e475:	75 5b                	jne    e4d2 <_bmap+0x297>
		if (inode->i_zone[8] = new_block(inode->i_dev)) {
    e477:	8b 44 24 20          	mov    0x20(%esp),%eax
    e47b:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e47f:	0f b7 c0             	movzwl %ax,%eax
    e482:	83 ec 0c             	sub    $0xc,%esp
    e485:	50                   	push   %eax
    e486:	e8 18 69 00 00       	call   14da3 <new_block>
    e48b:	83 c4 10             	add    $0x10,%esp
    e48e:	89 c2                	mov    %eax,%edx
    e490:	8b 44 24 20          	mov    0x20(%esp),%eax
    e494:	66 89 50 1e          	mov    %dx,0x1e(%eax)
    e498:	8b 44 24 20          	mov    0x20(%esp),%eax
    e49c:	0f b7 40 1e          	movzwl 0x1e(%eax),%eax
    e4a0:	66 85 c0             	test   %ax,%ax
    e4a3:	74 2d                	je     e4d2 <_bmap+0x297>
			inode->i_dirt = 1;
    e4a5:	8b 44 24 20          	mov    0x20(%esp),%eax
    e4a9:	c6 40 37 01          	movb   $0x1,0x37(%eax)
			inode->i_ctime = CURRENT_TIME;
    e4ad:	a1 00 eb 02 00       	mov    0x2eb00,%eax
    e4b2:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
    e4b8:	01 d0                	add    %edx,%eax
    e4ba:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
    e4bf:	f7 e2                	mul    %edx
    e4c1:	c1 ea 05             	shr    $0x5,%edx
    e4c4:	a1 04 eb 02 00       	mov    0x2eb04,%eax
    e4c9:	01 c2                	add    %eax,%edx
    e4cb:	8b 44 24 20          	mov    0x20(%esp),%eax
    e4cf:	89 50 2c             	mov    %edx,0x2c(%eax)
		}
	if (!inode->i_zone[8])
    e4d2:	8b 44 24 20          	mov    0x20(%esp),%eax
    e4d6:	0f b7 40 1e          	movzwl 0x1e(%eax),%eax
    e4da:	66 85 c0             	test   %ax,%ax
    e4dd:	75 0a                	jne    e4e9 <_bmap+0x2ae>
		return 0;
    e4df:	b8 00 00 00 00       	mov    $0x0,%eax
    e4e4:	e9 77 01 00 00       	jmp    e660 <_bmap+0x425>
	// 现在读取设备上该i节点的二次间接块.并取该二次间接块的一级块上第(block/512)项中的逻辑块号i.如果是创建并且二次间接块的一级块上第(block/512)项中的逻辑
	// 块号为0的话,则需申请一磁盘块(逻辑块)作为二次间接块的二级块i,并让二次间接块的一级块中第(block/512)项等于该二级块的块号i.然后置位二次间接块的一级块已
	// 修改标志.并释放二次间接块的一级块.如果不是创建,则i就是需要映射(寻找)的逻辑块号.
	if (!(bh = bread(inode->i_dev, inode->i_zone[8])))
    e4e9:	8b 44 24 20          	mov    0x20(%esp),%eax
    e4ed:	0f b7 40 1e          	movzwl 0x1e(%eax),%eax
    e4f1:	0f b7 d0             	movzwl %ax,%edx
    e4f4:	8b 44 24 20          	mov    0x20(%esp),%eax
    e4f8:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e4fc:	0f b7 c0             	movzwl %ax,%eax
    e4ff:	83 ec 08             	sub    $0x8,%esp
    e502:	52                   	push   %edx
    e503:	50                   	push   %eax
    e504:	e8 8a 11 00 00       	call   f693 <bread>
    e509:	83 c4 10             	add    $0x10,%esp
    e50c:	89 44 24 08          	mov    %eax,0x8(%esp)
    e510:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    e515:	75 0a                	jne    e521 <_bmap+0x2e6>
		return 0;
    e517:	b8 00 00 00 00       	mov    $0x0,%eax
    e51c:	e9 3f 01 00 00       	jmp    e660 <_bmap+0x425>
	i = ((unsigned short *)bh->b_data)[block >> 9];
    e521:	8b 44 24 08          	mov    0x8(%esp),%eax
    e525:	8b 00                	mov    (%eax),%eax
    e527:	8b 54 24 24          	mov    0x24(%esp),%edx
    e52b:	c1 fa 09             	sar    $0x9,%edx
    e52e:	01 d2                	add    %edx,%edx
    e530:	01 d0                	add    %edx,%eax
    e532:	0f b7 00             	movzwl (%eax),%eax
    e535:	0f b7 c0             	movzwl %ax,%eax
    e538:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if (create && !i)
    e53c:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    e541:	74 49                	je     e58c <_bmap+0x351>
    e543:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    e548:	75 42                	jne    e58c <_bmap+0x351>
		if (i = new_block(inode->i_dev)) {
    e54a:	8b 44 24 20          	mov    0x20(%esp),%eax
    e54e:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e552:	0f b7 c0             	movzwl %ax,%eax
    e555:	83 ec 0c             	sub    $0xc,%esp
    e558:	50                   	push   %eax
    e559:	e8 45 68 00 00       	call   14da3 <new_block>
    e55e:	83 c4 10             	add    $0x10,%esp
    e561:	89 44 24 0c          	mov    %eax,0xc(%esp)
    e565:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    e56a:	74 20                	je     e58c <_bmap+0x351>
			((unsigned short *) (bh->b_data))[block >> 9] = i;
    e56c:	8b 44 24 08          	mov    0x8(%esp),%eax
    e570:	8b 00                	mov    (%eax),%eax
    e572:	8b 54 24 24          	mov    0x24(%esp),%edx
    e576:	c1 fa 09             	sar    $0x9,%edx
    e579:	01 d2                	add    %edx,%edx
    e57b:	01 d0                	add    %edx,%eax
    e57d:	8b 54 24 0c          	mov    0xc(%esp),%edx
    e581:	66 89 10             	mov    %dx,(%eax)
			bh->b_dirt=1;
    e584:	8b 44 24 08          	mov    0x8(%esp),%eax
    e588:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
		}
	brelse(bh);
    e58c:	83 ec 0c             	sub    $0xc,%esp
    e58f:	ff 74 24 14          	pushl  0x14(%esp)
    e593:	e8 a5 10 00 00       	call   f63d <brelse>
    e598:	83 c4 10             	add    $0x10,%esp
	// 如果二次间接块的二级块块号为0,表示申请磁盘失败或者原来对应块号就为0,则返回0退出.否则就从设备上读取二次间接块的二级块,并取该二级块上第block项中的逻辑块
	// 号(与上511是为了限定block值不超过511).
	if (!i)
    e59b:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    e5a0:	75 0a                	jne    e5ac <_bmap+0x371>
		return 0;
    e5a2:	b8 00 00 00 00       	mov    $0x0,%eax
    e5a7:	e9 b4 00 00 00       	jmp    e660 <_bmap+0x425>
	if (!(bh = bread(inode->i_dev, i)))
    e5ac:	8b 44 24 20          	mov    0x20(%esp),%eax
    e5b0:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e5b4:	0f b7 c0             	movzwl %ax,%eax
    e5b7:	83 ec 08             	sub    $0x8,%esp
    e5ba:	ff 74 24 14          	pushl  0x14(%esp)
    e5be:	50                   	push   %eax
    e5bf:	e8 cf 10 00 00       	call   f693 <bread>
    e5c4:	83 c4 10             	add    $0x10,%esp
    e5c7:	89 44 24 08          	mov    %eax,0x8(%esp)
    e5cb:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    e5d0:	75 0a                	jne    e5dc <_bmap+0x3a1>
		return 0;
    e5d2:	b8 00 00 00 00       	mov    $0x0,%eax
    e5d7:	e9 84 00 00 00       	jmp    e660 <_bmap+0x425>
	i = ((unsigned short *)bh->b_data)[block & 511];
    e5dc:	8b 44 24 08          	mov    0x8(%esp),%eax
    e5e0:	8b 00                	mov    (%eax),%eax
    e5e2:	8b 54 24 24          	mov    0x24(%esp),%edx
    e5e6:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
    e5ec:	01 d2                	add    %edx,%edx
    e5ee:	01 d0                	add    %edx,%eax
    e5f0:	0f b7 00             	movzwl (%eax),%eax
    e5f3:	0f b7 c0             	movzwl %ax,%eax
    e5f6:	89 44 24 0c          	mov    %eax,0xc(%esp)
	// 如果是创建并且二级块的第block项中逻辑块号为0的话,则申请一磁盘块(逻辑块),作为最终存放数据信息的块.并让二级块中的第block项等于该新逻辑块块号(i).然后置位
	// 二级块的已修改标志.
	if (create && !i)
    e5fa:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
    e5ff:	74 4c                	je     e64d <_bmap+0x412>
    e601:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    e606:	75 45                	jne    e64d <_bmap+0x412>
		if (i = new_block(inode->i_dev)) {
    e608:	8b 44 24 20          	mov    0x20(%esp),%eax
    e60c:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e610:	0f b7 c0             	movzwl %ax,%eax
    e613:	83 ec 0c             	sub    $0xc,%esp
    e616:	50                   	push   %eax
    e617:	e8 87 67 00 00       	call   14da3 <new_block>
    e61c:	83 c4 10             	add    $0x10,%esp
    e61f:	89 44 24 0c          	mov    %eax,0xc(%esp)
    e623:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    e628:	74 23                	je     e64d <_bmap+0x412>
			((unsigned short *) (bh->b_data))[block & 511] = i;
    e62a:	8b 44 24 08          	mov    0x8(%esp),%eax
    e62e:	8b 00                	mov    (%eax),%eax
    e630:	8b 54 24 24          	mov    0x24(%esp),%edx
    e634:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
    e63a:	01 d2                	add    %edx,%edx
    e63c:	01 d0                	add    %edx,%eax
    e63e:	8b 54 24 0c          	mov    0xc(%esp),%edx
    e642:	66 89 10             	mov    %dx,(%eax)
			bh->b_dirt = 1;
    e645:	8b 44 24 08          	mov    0x8(%esp),%eax
    e649:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
		}
	// 最后释放该二次间接块的二级块,返回磁盘上新申请的或原有的对应block的逻辑块块号.
	brelse(bh);
    e64d:	83 ec 0c             	sub    $0xc,%esp
    e650:	ff 74 24 14          	pushl  0x14(%esp)
    e654:	e8 e4 0f 00 00       	call   f63d <brelse>
    e659:	83 c4 10             	add    $0x10,%esp
	return i;
    e65c:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    e660:	83 c4 1c             	add    $0x1c,%esp
    e663:	c3                   	ret    

0000e664 <bmap>:

// 取文件数据块block在设备上对应的逻辑块号.
// 参数:inode - 文件的内存i节点指针;block - 文件中的数据块号.
// 若操作成功则返回对应的逻辑块号,否则返回0.
int bmap(struct m_inode * inode, int block)
{
    e664:	83 ec 0c             	sub    $0xc,%esp
	return _bmap(inode, block, 0);
    e667:	83 ec 04             	sub    $0x4,%esp
    e66a:	6a 00                	push   $0x0
    e66c:	ff 74 24 1c          	pushl  0x1c(%esp)
    e670:	ff 74 24 1c          	pushl  0x1c(%esp)
    e674:	e8 c2 fb ff ff       	call   e23b <_bmap>
    e679:	83 c4 10             	add    $0x10,%esp
}
    e67c:	83 c4 0c             	add    $0xc,%esp
    e67f:	c3                   	ret    

0000e680 <create_block>:

// 取文件数据块block在设备上对应的逻辑块号。如果对应的逻辑块不存在就创建一块。并返回设备上对应的逻辑块号。
// 参数：inode - 文件的内在i节点指针；block - 文件中的数据块号。
// 若操作成功则返回对应的逻辑块号，否则返回0.
int create_block(struct m_inode * inode, int block)
{
    e680:	83 ec 0c             	sub    $0xc,%esp
	return _bmap(inode, block, 1);
    e683:	83 ec 04             	sub    $0x4,%esp
    e686:	6a 01                	push   $0x1
    e688:	ff 74 24 1c          	pushl  0x1c(%esp)
    e68c:	ff 74 24 1c          	pushl  0x1c(%esp)
    e690:	e8 a6 fb ff ff       	call   e23b <_bmap>
    e695:	83 c4 10             	add    $0x10,%esp
}
    e698:	83 c4 0c             	add    $0xc,%esp
    e69b:	c3                   	ret    

0000e69c <iput>:

// 放回(放置)一个i节点(加写入设备).
// 该函数主要用于把i节点引用计数值递减1,并且若是管道i节点,则唤醒等待的进程.若是块设备文件i节点则刷新设备.并且若i节点的链接计数为0,则释放该
// i节点占用的所有磁盘逻辑块,并释放该i节点.
void iput(struct m_inode * inode)
{
    e69c:	83 ec 0c             	sub    $0xc,%esp
	// 首先判断参数给出的i节点的有效性,并等待inode节点解锁(如果已经上锁的话).如果i节点的引用计数为0,表示该i节点已经是空闲的.内核再要求对其进行
	// 放回操作,说明内核中其他代码有问题.于是显示错误信息并停机.
	if (!inode)
    e69f:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
    e6a4:	0f 84 a6 01 00 00    	je     e850 <iput+0x1b4>
		return;
	wait_on_inode(inode);
    e6aa:	83 ec 0c             	sub    $0xc,%esp
    e6ad:	ff 74 24 1c          	pushl  0x1c(%esp)
    e6b1:	e8 29 fa ff ff       	call   e0df <wait_on_inode>
    e6b6:	83 c4 10             	add    $0x10,%esp
	if (!inode->i_count)
    e6b9:	8b 44 24 10          	mov    0x10(%esp),%eax
    e6bd:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    e6c1:	66 85 c0             	test   %ax,%ax
    e6c4:	75 10                	jne    e6d6 <iput+0x3a>
		panic("iput: trying to free free inode");
    e6c6:	83 ec 0c             	sub    $0xc,%esp
    e6c9:	68 e4 37 02 00       	push   $0x237e4
    e6ce:	e8 35 a5 ff ff       	call   8c08 <panic>
    e6d3:	83 c4 10             	add    $0x10,%esp
	// 如果是管道i节点,则唤醒等待该管道的进程,引用次数减1,如果还有引用则返回.否则释放管道占用的内存页面,并复位该节点的引用计数值,已修改标志和管道
	// 标志,并返回.对于管道节点,inode->i_size存放着内存页地址.参见get_pipe_inode().
	if (inode->i_pipe) {
    e6d6:	8b 44 24 10          	mov    0x10(%esp),%eax
    e6da:	0f b6 40 38          	movzbl 0x38(%eax),%eax
    e6de:	84 c0                	test   %al,%al
    e6e0:	74 7c                	je     e75e <iput+0xc2>
		wake_up(&inode->i_wait);
    e6e2:	8b 44 24 10          	mov    0x10(%esp),%eax
    e6e6:	83 c0 20             	add    $0x20,%eax
    e6e9:	83 ec 0c             	sub    $0xc,%esp
    e6ec:	50                   	push   %eax
    e6ed:	e8 5d 8a ff ff       	call   714f <wake_up>
    e6f2:	83 c4 10             	add    $0x10,%esp
		wake_up(&inode->i_wait2);
    e6f5:	8b 44 24 10          	mov    0x10(%esp),%eax
    e6f9:	83 c0 24             	add    $0x24,%eax
    e6fc:	83 ec 0c             	sub    $0xc,%esp
    e6ff:	50                   	push   %eax
    e700:	e8 4a 8a ff ff       	call   714f <wake_up>
    e705:	83 c4 10             	add    $0x10,%esp
		if (--inode->i_count)
    e708:	8b 44 24 10          	mov    0x10(%esp),%eax
    e70c:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    e710:	8d 50 ff             	lea    -0x1(%eax),%edx
    e713:	8b 44 24 10          	mov    0x10(%esp),%eax
    e717:	66 89 50 34          	mov    %dx,0x34(%eax)
    e71b:	8b 44 24 10          	mov    0x10(%esp),%eax
    e71f:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    e723:	66 85 c0             	test   %ax,%ax
    e726:	0f 85 27 01 00 00    	jne    e853 <iput+0x1b7>
			return;
		free_page(inode->i_size);
    e72c:	8b 44 24 10          	mov    0x10(%esp),%eax
    e730:	8b 40 04             	mov    0x4(%eax),%eax
    e733:	83 ec 0c             	sub    $0xc,%esp
    e736:	50                   	push   %eax
    e737:	e8 70 d5 ff ff       	call   bcac <free_page>
    e73c:	83 c4 10             	add    $0x10,%esp
		inode->i_count = 0;
    e73f:	8b 44 24 10          	mov    0x10(%esp),%eax
    e743:	66 c7 40 34 00 00    	movw   $0x0,0x34(%eax)
		inode->i_dirt = 0;
    e749:	8b 44 24 10          	mov    0x10(%esp),%eax
    e74d:	c6 40 37 00          	movb   $0x0,0x37(%eax)
		inode->i_pipe = 0;
    e751:	8b 44 24 10          	mov    0x10(%esp),%eax
    e755:	c6 40 38 00          	movb   $0x0,0x38(%eax)
		return;
    e759:	e9 f6 00 00 00       	jmp    e854 <iput+0x1b8>
	}
	// 如果i节点对应的设备号 =0,则将此节点的引用计数递减1,返回.例如用于管道操作的i节点,其i节点的设备号为0.
	if (!inode->i_dev) {
    e75e:	8b 44 24 10          	mov    0x10(%esp),%eax
    e762:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    e766:	66 85 c0             	test   %ax,%ax
    e769:	75 18                	jne    e783 <iput+0xe7>
		inode->i_count--;
    e76b:	8b 44 24 10          	mov    0x10(%esp),%eax
    e76f:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    e773:	8d 50 ff             	lea    -0x1(%eax),%edx
    e776:	8b 44 24 10          	mov    0x10(%esp),%eax
    e77a:	66 89 50 34          	mov    %dx,0x34(%eax)
		return;
    e77e:	e9 d1 00 00 00       	jmp    e854 <iput+0x1b8>
	}
	// 如果是块设备文件的i节点,此时逻辑块字段0(i_zone[0])中是设备号,则刷新该设备.并等待i节点解锁.
	if (S_ISBLK(inode->i_mode)) {
    e783:	8b 44 24 10          	mov    0x10(%esp),%eax
    e787:	0f b7 00             	movzwl (%eax),%eax
    e78a:	0f b7 c0             	movzwl %ax,%eax
    e78d:	25 00 f0 00 00       	and    $0xf000,%eax
    e792:	3d 00 60 00 00       	cmp    $0x6000,%eax
    e797:	75 26                	jne    e7bf <iput+0x123>
		sync_dev(inode->i_zone[0]);
    e799:	8b 44 24 10          	mov    0x10(%esp),%eax
    e79d:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
    e7a1:	0f b7 c0             	movzwl %ax,%eax
    e7a4:	83 ec 0c             	sub    $0xc,%esp
    e7a7:	50                   	push   %eax
    e7a8:	e8 be 07 00 00       	call   ef6b <sync_dev>
    e7ad:	83 c4 10             	add    $0x10,%esp
		wait_on_inode(inode);
    e7b0:	83 ec 0c             	sub    $0xc,%esp
    e7b3:	ff 74 24 1c          	pushl  0x1c(%esp)
    e7b7:	e8 23 f9 ff ff       	call   e0df <wait_on_inode>
    e7bc:	83 c4 10             	add    $0x10,%esp
	}
	// 如果i节点引用计数大于1,则计数递减1后就直接返回(因为该i节点还有人在用,不能释放),否则就说明i节点的引用计数值为1(因为第157行已经判断过计数是否为零).
	// 如果i节点的链接数为0,则说明i节点对应文件被删除.于是释放该i节点的所有逻辑块,并释放该i节点.函数free_inode()用于实际释放i节点操作,即复位i节点
	// 对应的i节点位图,清空i节点结构内容.
repeat:
	if (inode->i_count > 1) {
    e7bf:	8b 44 24 10          	mov    0x10(%esp),%eax
    e7c3:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    e7c7:	66 83 f8 01          	cmp    $0x1,%ax
    e7cb:	76 15                	jbe    e7e2 <iput+0x146>
		inode->i_count--;
    e7cd:	8b 44 24 10          	mov    0x10(%esp),%eax
    e7d1:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    e7d5:	8d 50 ff             	lea    -0x1(%eax),%edx
    e7d8:	8b 44 24 10          	mov    0x10(%esp),%eax
    e7dc:	66 89 50 34          	mov    %dx,0x34(%eax)
		return;
    e7e0:	eb 72                	jmp    e854 <iput+0x1b8>
	}
	if (!inode->i_nlinks) {
    e7e2:	8b 44 24 10          	mov    0x10(%esp),%eax
    e7e6:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
    e7ea:	84 c0                	test   %al,%al
    e7ec:	75 20                	jne    e80e <iput+0x172>
		// 释放该i节点对应的所有逻辑块
		truncate(inode);
    e7ee:	83 ec 0c             	sub    $0xc,%esp
    e7f1:	ff 74 24 1c          	pushl  0x1c(%esp)
    e7f5:	e8 e8 6f 00 00       	call   157e2 <truncate>
    e7fa:	83 c4 10             	add    $0x10,%esp
		// 从该设备的超级块中删除该i节点
		free_inode(inode);      								// bitmap.c
    e7fd:	83 ec 0c             	sub    $0xc,%esp
    e800:	ff 74 24 1c          	pushl  0x1c(%esp)
    e804:	e8 58 67 00 00       	call   14f61 <free_inode>
    e809:	83 c4 10             	add    $0x10,%esp
		return;
    e80c:	eb 46                	jmp    e854 <iput+0x1b8>
	}
	// 如果该i节点已作过修改,则回写更新该i节点,并等待该i节点解锁.由于这里在写i节点时需要等待睡眠,此时其他进程有可能修改该i节点,因此在进程被唤醒后需要重复
	// 进行上述判断过程(repeat).
	if (inode->i_dirt) {
    e80e:	8b 44 24 10          	mov    0x10(%esp),%eax
    e812:	0f b6 40 37          	movzbl 0x37(%eax),%eax
    e816:	84 c0                	test   %al,%al
    e818:	74 20                	je     e83a <iput+0x19e>
		write_inode(inode);										/* we can sleep - so do again */
    e81a:	83 ec 0c             	sub    $0xc,%esp
    e81d:	ff 74 24 1c          	pushl  0x1c(%esp)
    e821:	e8 5a 05 00 00       	call   ed80 <write_inode>
    e826:	83 c4 10             	add    $0x10,%esp
		wait_on_inode(inode);									/* 因为我们睡眠了,所以要重复判断 */
    e829:	83 ec 0c             	sub    $0xc,%esp
    e82c:	ff 74 24 1c          	pushl  0x1c(%esp)
    e830:	e8 aa f8 ff ff       	call   e0df <wait_on_inode>
    e835:	83 c4 10             	add    $0x10,%esp
		goto repeat;
    e838:	eb 85                	jmp    e7bf <iput+0x123>
	}
	// 程序若能执行到此,说明该i节点的引用计数值i_count是1,链接数不为零,并且内容没有被修改过.因此此时只要把i节点引用计数递减1,返回.此时该i节点的i_count=0,
	// 表示已释放.
	inode->i_count--;
    e83a:	8b 44 24 10          	mov    0x10(%esp),%eax
    e83e:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    e842:	8d 50 ff             	lea    -0x1(%eax),%edx
    e845:	8b 44 24 10          	mov    0x10(%esp),%eax
    e849:	66 89 50 34          	mov    %dx,0x34(%eax)
	return;
    e84d:	90                   	nop
    e84e:	eb 04                	jmp    e854 <iput+0x1b8>
void iput(struct m_inode * inode)
{
	// 首先判断参数给出的i节点的有效性,并等待inode节点解锁(如果已经上锁的话).如果i节点的引用计数为0,表示该i节点已经是空闲的.内核再要求对其进行
	// 放回操作,说明内核中其他代码有问题.于是显示错误信息并停机.
	if (!inode)
		return;
    e850:	90                   	nop
    e851:	eb 01                	jmp    e854 <iput+0x1b8>
	// 标志,并返回.对于管道节点,inode->i_size存放着内存页地址.参见get_pipe_inode().
	if (inode->i_pipe) {
		wake_up(&inode->i_wait);
		wake_up(&inode->i_wait2);
		if (--inode->i_count)
			return;
    e853:	90                   	nop
	}
	// 程序若能执行到此,说明该i节点的引用计数值i_count是1,链接数不为零,并且内容没有被修改过.因此此时只要把i节点引用计数递减1,返回.此时该i节点的i_count=0,
	// 表示已释放.
	inode->i_count--;
	return;
}
    e854:	83 c4 0c             	add    $0xc,%esp
    e857:	c3                   	ret    

0000e858 <get_empty_inode>:

// 从i节点表(inode_table)中获取一个空闲i节点项.
// 寻找引用计数count为0的i节点,并将其写盘后清零,返回其指针.引用计数被置1.
struct m_inode * get_empty_inode(void)
{
    e858:	83 ec 1c             	sub    $0x1c,%esp

	// 在初始化last_inode指针指向i节点表头一项后循环扫描整个i节点表,如果last_inode已经指向i节点表的最后1项之后,则让其重新指向i节点表开始处,
	// 以继续循环寻找空闲i节点项.如果last_inode所指向的i节点计数值为0,则说明可能找到空闲i节点项.让inode指向该i节点.如果该i节点的已修改标志和
	// 和锁定标志均为0,则我们可以使用该i节点,于是退出for循环.
	do {
		inode = NULL;
    e85b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    e862:	00 
		for (i = NR_INODE; i ; i--) {							// NR_INODE = 64.
    e863:	c7 44 24 08 40 00 00 	movl   $0x40,0x8(%esp)
    e86a:	00 
    e86b:	eb 59                	jmp    e8c6 <get_empty_inode+0x6e>
			if (++last_inode >= inode_table + NR_INODE)
    e86d:	a1 60 e3 02 00       	mov    0x2e360,%eax
    e872:	83 c0 3c             	add    $0x3c,%eax
    e875:	a3 60 e3 02 00       	mov    %eax,0x2e360
    e87a:	a1 60 e3 02 00       	mov    0x2e360,%eax
    e87f:	ba c0 10 03 00       	mov    $0x310c0,%edx
    e884:	39 d0                	cmp    %edx,%eax
    e886:	72 0a                	jb     e892 <get_empty_inode+0x3a>
				last_inode = inode_table;
    e888:	c7 05 60 e3 02 00 c0 	movl   $0x301c0,0x2e360
    e88f:	01 03 00 
			if (!last_inode->i_count) {
    e892:	a1 60 e3 02 00       	mov    0x2e360,%eax
    e897:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    e89b:	66 85 c0             	test   %ax,%ax
    e89e:	75 21                	jne    e8c1 <get_empty_inode+0x69>
				inode = last_inode;
    e8a0:	a1 60 e3 02 00       	mov    0x2e360,%eax
    e8a5:	89 44 24 0c          	mov    %eax,0xc(%esp)
				if (!inode->i_dirt && !inode->i_lock)
    e8a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e8ad:	0f b6 40 37          	movzbl 0x37(%eax),%eax
    e8b1:	84 c0                	test   %al,%al
    e8b3:	75 0c                	jne    e8c1 <get_empty_inode+0x69>
    e8b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e8b9:	0f b6 40 36          	movzbl 0x36(%eax),%eax
    e8bd:	84 c0                	test   %al,%al
    e8bf:	74 0e                	je     e8cf <get_empty_inode+0x77>
	// 在初始化last_inode指针指向i节点表头一项后循环扫描整个i节点表,如果last_inode已经指向i节点表的最后1项之后,则让其重新指向i节点表开始处,
	// 以继续循环寻找空闲i节点项.如果last_inode所指向的i节点计数值为0,则说明可能找到空闲i节点项.让inode指向该i节点.如果该i节点的已修改标志和
	// 和锁定标志均为0,则我们可以使用该i节点,于是退出for循环.
	do {
		inode = NULL;
		for (i = NR_INODE; i ; i--) {							// NR_INODE = 64.
    e8c1:	83 6c 24 08 01       	subl   $0x1,0x8(%esp)
    e8c6:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    e8cb:	75 a0                	jne    e86d <get_empty_inode+0x15>
    e8cd:	eb 01                	jmp    e8d0 <get_empty_inode+0x78>
			if (++last_inode >= inode_table + NR_INODE)
				last_inode = inode_table;
			if (!last_inode->i_count) {
				inode = last_inode;
				if (!inode->i_dirt && !inode->i_lock)
					break;
    e8cf:	90                   	nop
			}
		}
		// 如果没有找到空闲i节点(inode=NULL),则将i节点表打印出来供调试使用,并停机.
		if (!inode) {
    e8d0:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    e8d5:	75 6e                	jne    e945 <get_empty_inode+0xed>
			for (i = 0 ; i < NR_INODE ; i++)
    e8d7:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    e8de:	00 
    e8df:	eb 4d                	jmp    e92e <get_empty_inode+0xd6>
				printk("%04x: %6d\t", inode_table[i].i_dev,
					inode_table[i].i_num);
    e8e1:	8b 44 24 08          	mov    0x8(%esp),%eax
    e8e5:	c1 e0 02             	shl    $0x2,%eax
    e8e8:	89 c2                	mov    %eax,%edx
    e8ea:	c1 e2 04             	shl    $0x4,%edx
    e8ed:	29 c2                	sub    %eax,%edx
    e8ef:	89 d0                	mov    %edx,%eax
    e8f1:	05 f2 01 03 00       	add    $0x301f2,%eax
    e8f6:	0f b7 00             	movzwl (%eax),%eax
			}
		}
		// 如果没有找到空闲i节点(inode=NULL),则将i节点表打印出来供调试使用,并停机.
		if (!inode) {
			for (i = 0 ; i < NR_INODE ; i++)
				printk("%04x: %6d\t", inode_table[i].i_dev,
    e8f9:	0f b7 d0             	movzwl %ax,%edx
    e8fc:	8b 44 24 08          	mov    0x8(%esp),%eax
    e900:	c1 e0 02             	shl    $0x2,%eax
    e903:	89 c1                	mov    %eax,%ecx
    e905:	c1 e1 04             	shl    $0x4,%ecx
    e908:	29 c1                	sub    %eax,%ecx
    e90a:	89 c8                	mov    %ecx,%eax
    e90c:	05 f0 01 03 00       	add    $0x301f0,%eax
    e911:	0f b7 00             	movzwl (%eax),%eax
    e914:	0f b7 c0             	movzwl %ax,%eax
    e917:	83 ec 04             	sub    $0x4,%esp
    e91a:	52                   	push   %edx
    e91b:	50                   	push   %eax
    e91c:	68 04 38 02 00       	push   $0x23804
    e921:	e8 21 a3 ff ff       	call   8c47 <printk>
    e926:	83 c4 10             	add    $0x10,%esp
					break;
			}
		}
		// 如果没有找到空闲i节点(inode=NULL),则将i节点表打印出来供调试使用,并停机.
		if (!inode) {
			for (i = 0 ; i < NR_INODE ; i++)
    e929:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    e92e:	83 7c 24 08 3f       	cmpl   $0x3f,0x8(%esp)
    e933:	7e ac                	jle    e8e1 <get_empty_inode+0x89>
				printk("%04x: %6d\t", inode_table[i].i_dev,
					inode_table[i].i_num);
			panic("No free inodes in mem");
    e935:	83 ec 0c             	sub    $0xc,%esp
    e938:	68 0f 38 02 00       	push   $0x2380f
    e93d:	e8 c6 a2 ff ff       	call   8c08 <panic>
    e942:	83 c4 10             	add    $0x10,%esp
		}
		// 等待该i节点解锁(如果又被上锁的话).如果该i节点已修改标志被置位的话,则将该i节点刷新(同步).因为刷新时可能会睡眠,因此需要再次循环等待i节点解锁.
		wait_on_inode(inode);
    e945:	83 ec 0c             	sub    $0xc,%esp
    e948:	ff 74 24 18          	pushl  0x18(%esp)
    e94c:	e8 8e f7 ff ff       	call   e0df <wait_on_inode>
    e951:	83 c4 10             	add    $0x10,%esp
		while (inode->i_dirt) {
    e954:	eb 1e                	jmp    e974 <get_empty_inode+0x11c>
			write_inode(inode);
    e956:	83 ec 0c             	sub    $0xc,%esp
    e959:	ff 74 24 18          	pushl  0x18(%esp)
    e95d:	e8 1e 04 00 00       	call   ed80 <write_inode>
    e962:	83 c4 10             	add    $0x10,%esp
			wait_on_inode(inode);
    e965:	83 ec 0c             	sub    $0xc,%esp
    e968:	ff 74 24 18          	pushl  0x18(%esp)
    e96c:	e8 6e f7 ff ff       	call   e0df <wait_on_inode>
    e971:	83 c4 10             	add    $0x10,%esp
					inode_table[i].i_num);
			panic("No free inodes in mem");
		}
		// 等待该i节点解锁(如果又被上锁的话).如果该i节点已修改标志被置位的话,则将该i节点刷新(同步).因为刷新时可能会睡眠,因此需要再次循环等待i节点解锁.
		wait_on_inode(inode);
		while (inode->i_dirt) {
    e974:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e978:	0f b6 40 37          	movzbl 0x37(%eax),%eax
    e97c:	84 c0                	test   %al,%al
    e97e:	75 d6                	jne    e956 <get_empty_inode+0xfe>
			write_inode(inode);
			wait_on_inode(inode);
		}
	} while (inode->i_count);
    e980:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e984:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    e988:	66 85 c0             	test   %ax,%ax
    e98b:	0f 85 ca fe ff ff    	jne    e85b <get_empty_inode+0x3>
	// 如果i节点又被其他占用的话(i节点的计数值不为0了),则重新寻找空闲i节点.否则说明已找到符合要求的空闲i节点项.则将该i节点项内容清零,并置引用计数为1,返回该
	// i节点指针.
	memset(inode, 0, sizeof(*inode));
    e991:	83 ec 04             	sub    $0x4,%esp
    e994:	6a 3c                	push   $0x3c
    e996:	6a 00                	push   $0x0
    e998:	ff 74 24 18          	pushl  0x18(%esp)
    e99c:	e8 17 f7 ff ff       	call   e0b8 <memset>
    e9a1:	83 c4 10             	add    $0x10,%esp
	inode->i_count = 1;
    e9a4:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e9a8:	66 c7 40 34 01 00    	movw   $0x1,0x34(%eax)
	return inode;
    e9ae:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    e9b2:	83 c4 1c             	add    $0x1c,%esp
    e9b5:	c3                   	ret    

0000e9b6 <get_pipe_inode>:

// 获取管道节点。
// 首先扫描i节点表，寻找一个空闲i节点项，然后取得一页空闲内存供管道使用。然后将得到的i节点的引用计数置为2（读者
// 和写者），初始化管道头和尾，置i节点的管道类型标志。返回i节点指针，如果失败则返回NULL。
struct m_inode * get_pipe_inode(void)
{
    e9b6:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * inode;

	// 首先从内存i节点表中取得一个空闲i节点。如果找不到空闲i节点则返回NULL。然后为该i节点申请一页内存，并让节点的
	// i_size字段指向该页面。如果已没有空闲内存，则释放该i节点，并返回NULL。
	if (!(inode = get_empty_inode()))
    e9b9:	e8 9a fe ff ff       	call   e858 <get_empty_inode>
    e9be:	89 44 24 0c          	mov    %eax,0xc(%esp)
    e9c2:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    e9c7:	75 07                	jne    e9d0 <get_pipe_inode+0x1a>
		return NULL;
    e9c9:	b8 00 00 00 00       	mov    $0x0,%eax
    e9ce:	eb 5a                	jmp    ea2a <get_pipe_inode+0x74>
	if (!(inode->i_size = get_free_page())) {         			// 节点的i_size字段指向缓冲区。
    e9d0:	e8 66 e6 ff ff       	call   d03b <get_free_page>
    e9d5:	89 c2                	mov    %eax,%edx
    e9d7:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e9db:	89 50 04             	mov    %edx,0x4(%eax)
    e9de:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e9e2:	8b 40 04             	mov    0x4(%eax),%eax
    e9e5:	85 c0                	test   %eax,%eax
    e9e7:	75 11                	jne    e9fa <get_pipe_inode+0x44>
		inode->i_count = 0;
    e9e9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e9ed:	66 c7 40 34 00 00    	movw   $0x0,0x34(%eax)
		return NULL;
    e9f3:	b8 00 00 00 00       	mov    $0x0,%eax
    e9f8:	eb 30                	jmp    ea2a <get_pipe_inode+0x74>
	}
	// 然后设置该i节点的引用计数为2,并复位管道头尾指针。i节点逻辑块号数组i_zone[]的i_zone[0]和i_zone[1]中分别用
	// 来存放管道头和管道尾指针。最后设置i节点是管道i节点标志并返回该i节点号。
	inode->i_count = 2;											/* sum of readers/writers */    /* 读/写两者总计 */
    e9fa:	8b 44 24 0c          	mov    0xc(%esp),%eax
    e9fe:	66 c7 40 34 02 00    	movw   $0x2,0x34(%eax)
	PIPE_HEAD(*inode) = PIPE_TAIL(*inode) = 0;      			// 复位管道头尾指针。
    ea04:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ea08:	66 c7 40 10 00 00    	movw   $0x0,0x10(%eax)
    ea0e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ea12:	0f b7 50 10          	movzwl 0x10(%eax),%edx
    ea16:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ea1a:	66 89 50 0e          	mov    %dx,0xe(%eax)
	inode->i_pipe = 1;                              			// 置节点为管道使用标志。
    ea1e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ea22:	c6 40 38 01          	movb   $0x1,0x38(%eax)
	return inode;
    ea26:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    ea2a:	83 c4 1c             	add    $0x1c,%esp
    ea2d:	c3                   	ret    

0000ea2e <iget>:
// 取得一个i节点.
// 参数:dev - 设备号;nr - i节点号.
// 从设备上读取指定节点号的i节点结构内容到内存i节点表中,并且返回该i节点指针.首先在位于高速缓冲区中的i节点表中搜寻,若找到指定节点号的i节点则在经过一些
// 判断处理后返回该i节点指针.否则从设备dev上读取指定i节点号的i节点信息放入i节点表中,并返回该i节点指针.
struct m_inode * iget(int dev, int nr)
{
    ea2e:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * inode, * empty;

	// 首先判断参数有效性.若设备号是0,则表明内核代码问题,显示出错信息并停机.然后预先从i节点表中取一个空闲i节点备用.
	if (!dev)
    ea31:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    ea36:	75 10                	jne    ea48 <iget+0x1a>
		panic("iget with dev==0");
    ea38:	83 ec 0c             	sub    $0xc,%esp
    ea3b:	68 25 38 02 00       	push   $0x23825
    ea40:	e8 c3 a1 ff ff       	call   8c08 <panic>
    ea45:	83 c4 10             	add    $0x10,%esp
	empty = get_empty_inode();
    ea48:	e8 0b fe ff ff       	call   e858 <get_empty_inode>
    ea4d:	89 44 24 04          	mov    %eax,0x4(%esp)
	// 接着扫描i节点表.寻找参数指定节点号nr的i节点.并递增该节点的引用次数.如果当前扫描i节点的设备号不等于指定的设备号或者节点号不等于指定的节点号,则继续扫描.
	inode = inode_table;
    ea51:	c7 44 24 0c c0 01 03 	movl   $0x301c0,0xc(%esp)
    ea58:	00 
	while (inode < NR_INODE + inode_table) {
    ea59:	e9 43 01 00 00       	jmp    eba1 <iget+0x173>
		if (inode->i_dev != dev || inode->i_num != nr) {
    ea5e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ea62:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    ea66:	0f b7 c0             	movzwl %ax,%eax
    ea69:	3b 44 24 20          	cmp    0x20(%esp),%eax
    ea6d:	75 11                	jne    ea80 <iget+0x52>
    ea6f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ea73:	0f b7 40 32          	movzwl 0x32(%eax),%eax
    ea77:	0f b7 c0             	movzwl %ax,%eax
    ea7a:	3b 44 24 24          	cmp    0x24(%esp),%eax
    ea7e:	74 0a                	je     ea8a <iget+0x5c>
			inode++;
    ea80:	83 44 24 0c 3c       	addl   $0x3c,0xc(%esp)
			continue;
    ea85:	e9 17 01 00 00       	jmp    eba1 <iget+0x173>
		}
		// 如果找到指定设备号dev和节点号nr的i节点,则等待该节点解锁(如果已上锁的话).在等待该节点解锁过程中,i节点可能会发生变化.所以再次进行上述相同判断.如果发生
		// 了变化,则重新扫描整个i节点表.
		wait_on_inode(inode);
    ea8a:	83 ec 0c             	sub    $0xc,%esp
    ea8d:	ff 74 24 18          	pushl  0x18(%esp)
    ea91:	e8 49 f6 ff ff       	call   e0df <wait_on_inode>
    ea96:	83 c4 10             	add    $0x10,%esp
		if (inode->i_dev != dev || inode->i_num != nr) {
    ea99:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ea9d:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    eaa1:	0f b7 c0             	movzwl %ax,%eax
    eaa4:	3b 44 24 20          	cmp    0x20(%esp),%eax
    eaa8:	75 11                	jne    eabb <iget+0x8d>
    eaaa:	8b 44 24 0c          	mov    0xc(%esp),%eax
    eaae:	0f b7 40 32          	movzwl 0x32(%eax),%eax
    eab2:	0f b7 c0             	movzwl %ax,%eax
    eab5:	3b 44 24 24          	cmp    0x24(%esp),%eax
    eab9:	74 0d                	je     eac8 <iget+0x9a>
			inode = inode_table;
    eabb:	c7 44 24 0c c0 01 03 	movl   $0x301c0,0xc(%esp)
    eac2:	00 
			continue;
    eac3:	e9 d9 00 00 00       	jmp    eba1 <iget+0x173>
		}
		// 到这里表示找到相应的i节点.于是将该i节点引用计数增1.然后再作进一步检查,看它是否是另一个文件系统的安装点.若是则寻找被安装文件系统根节点并返回.如果该i节点
		// 的确是其他文件系统的安装点,则在超级块表中搜寻安装在此i节点的超级块.如果没有找到,则显示出错信息,并放回本函数开始时获取的空闲节点empty,返回该i节点指针.
		inode->i_count++;
    eac8:	8b 44 24 0c          	mov    0xc(%esp),%eax
    eacc:	0f b7 40 34          	movzwl 0x34(%eax),%eax
    ead0:	8d 50 01             	lea    0x1(%eax),%edx
    ead3:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ead7:	66 89 50 34          	mov    %dx,0x34(%eax)
		if (inode->i_mount) {
    eadb:	8b 44 24 0c          	mov    0xc(%esp),%eax
    eadf:	0f b6 40 39          	movzbl 0x39(%eax),%eax
    eae3:	84 c0                	test   %al,%al
    eae5:	0f 84 9a 00 00 00    	je     eb85 <iget+0x157>
			int i;

			for (i = 0 ; i < NR_SUPER ; i++)
    eaeb:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    eaf2:	00 
    eaf3:	eb 19                	jmp    eb0e <iget+0xe0>
				if (super_block[i].s_imount == inode)
    eaf5:	8b 44 24 08          	mov    0x8(%esp),%eax
    eaf9:	6b c0 6c             	imul   $0x6c,%eax,%eax
    eafc:	05 7c 0c 04 00       	add    $0x40c7c,%eax
    eb01:	8b 00                	mov    (%eax),%eax
    eb03:	3b 44 24 0c          	cmp    0xc(%esp),%eax
    eb07:	74 0e                	je     eb17 <iget+0xe9>
		// 的确是其他文件系统的安装点,则在超级块表中搜寻安装在此i节点的超级块.如果没有找到,则显示出错信息,并放回本函数开始时获取的空闲节点empty,返回该i节点指针.
		inode->i_count++;
		if (inode->i_mount) {
			int i;

			for (i = 0 ; i < NR_SUPER ; i++)
    eb09:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    eb0e:	83 7c 24 08 07       	cmpl   $0x7,0x8(%esp)
    eb13:	7e e0                	jle    eaf5 <iget+0xc7>
    eb15:	eb 01                	jmp    eb18 <iget+0xea>
				if (super_block[i].s_imount == inode)
					break;
    eb17:	90                   	nop
			if (i >= NR_SUPER) {
    eb18:	83 7c 24 08 07       	cmpl   $0x7,0x8(%esp)
    eb1d:	7e 2f                	jle    eb4e <iget+0x120>
				printk("Mounted inode hasn't got sb\n");
    eb1f:	83 ec 0c             	sub    $0xc,%esp
    eb22:	68 36 38 02 00       	push   $0x23836
    eb27:	e8 1b a1 ff ff       	call   8c47 <printk>
    eb2c:	83 c4 10             	add    $0x10,%esp
				if (empty)
    eb2f:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    eb34:	74 0f                	je     eb45 <iget+0x117>
					iput(empty);
    eb36:	83 ec 0c             	sub    $0xc,%esp
    eb39:	ff 74 24 10          	pushl  0x10(%esp)
    eb3d:	e8 5a fb ff ff       	call   e69c <iput>
    eb42:	83 c4 10             	add    $0x10,%esp
				return inode;
    eb45:	8b 44 24 0c          	mov    0xc(%esp),%eax
    eb49:	e9 a7 00 00 00       	jmp    ebf5 <iget+0x1c7>
			}
			// 执行到这里表示已经找到安装到inode节点的文件系统超级块.于是将该i节点写盘放回,并从安装在此i节点上的文件系统超级块中取设备号,并令i节点号为ROOT_INO.然后
			// 重新扫描整个i节点表,以获取该被安装文件系统的根i节点信息.
			iput(inode);
    eb4e:	83 ec 0c             	sub    $0xc,%esp
    eb51:	ff 74 24 18          	pushl  0x18(%esp)
    eb55:	e8 42 fb ff ff       	call   e69c <iput>
    eb5a:	83 c4 10             	add    $0x10,%esp
			dev = super_block[i].s_dev;
    eb5d:	8b 44 24 08          	mov    0x8(%esp),%eax
    eb61:	6b c0 6c             	imul   $0x6c,%eax,%eax
    eb64:	05 74 0c 04 00       	add    $0x40c74,%eax
    eb69:	0f b7 00             	movzwl (%eax),%eax
    eb6c:	0f b7 c0             	movzwl %ax,%eax
    eb6f:	89 44 24 20          	mov    %eax,0x20(%esp)
			nr = ROOT_INO;
    eb73:	c7 44 24 24 01 00 00 	movl   $0x1,0x24(%esp)
    eb7a:	00 
			inode = inode_table;
    eb7b:	c7 44 24 0c c0 01 03 	movl   $0x301c0,0xc(%esp)
    eb82:	00 
			continue;
    eb83:	eb 1c                	jmp    eba1 <iget+0x173>
		}
		// 最终我们找到了相应的i节点.因此可以放弃本函数开始处临时 的空闲i节点,返回找到的i节点指针.
		if (empty)
    eb85:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    eb8a:	74 0f                	je     eb9b <iget+0x16d>
			iput(empty);
    eb8c:	83 ec 0c             	sub    $0xc,%esp
    eb8f:	ff 74 24 10          	pushl  0x10(%esp)
    eb93:	e8 04 fb ff ff       	call   e69c <iput>
    eb98:	83 c4 10             	add    $0x10,%esp
		return inode;
    eb9b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    eb9f:	eb 54                	jmp    ebf5 <iget+0x1c7>
	if (!dev)
		panic("iget with dev==0");
	empty = get_empty_inode();
	// 接着扫描i节点表.寻找参数指定节点号nr的i节点.并递增该节点的引用次数.如果当前扫描i节点的设备号不等于指定的设备号或者节点号不等于指定的节点号,则继续扫描.
	inode = inode_table;
	while (inode < NR_INODE + inode_table) {
    eba1:	b8 c0 10 03 00       	mov    $0x310c0,%eax
    eba6:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    ebaa:	0f 82 ae fe ff ff    	jb     ea5e <iget+0x30>
		if (empty)
			iput(empty);
		return inode;
    }
	// 如果我们在i节点表中没有找到指定的i节点,则利用前面申请的空闲i节点empty在i节点表中建立该i节点.并从相应设备上读取该i节点信息,返回该i节点指针.
	if (!empty)
    ebb0:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    ebb5:	75 07                	jne    ebbe <iget+0x190>
		return (NULL);
    ebb7:	b8 00 00 00 00       	mov    $0x0,%eax
    ebbc:	eb 37                	jmp    ebf5 <iget+0x1c7>
	inode = empty;
    ebbe:	8b 44 24 04          	mov    0x4(%esp),%eax
    ebc2:	89 44 24 0c          	mov    %eax,0xc(%esp)
	inode->i_dev = dev;									// 设置i节点的设备.
    ebc6:	8b 44 24 20          	mov    0x20(%esp),%eax
    ebca:	89 c2                	mov    %eax,%edx
    ebcc:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ebd0:	66 89 50 30          	mov    %dx,0x30(%eax)
	inode->i_num = nr;									// 设置i节点号.
    ebd4:	8b 44 24 24          	mov    0x24(%esp),%eax
    ebd8:	89 c2                	mov    %eax,%edx
    ebda:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ebde:	66 89 50 32          	mov    %dx,0x32(%eax)
	read_inode(inode);      							// 读取i节点信息
    ebe2:	83 ec 0c             	sub    $0xc,%esp
    ebe5:	ff 74 24 18          	pushl  0x18(%esp)
    ebe9:	e8 0b 00 00 00       	call   ebf9 <read_inode>
    ebee:	83 c4 10             	add    $0x10,%esp
	return inode;
    ebf1:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    ebf5:	83 c4 1c             	add    $0x1c,%esp
    ebf8:	c3                   	ret    

0000ebf9 <read_inode>:
// 读取指定i节点信息.
// 从设备上读取含有指定i节点信息的i节点盘块,然后复制到指定的i节点结构中.为了确定i节点所在设备逻辑块号(或缓冲块),必须首先读取相应设备上的超级块,以
// 获取用于计算逻辑块号的每块i节点数信息INODES_PER_BLOCK.在计算出i节点所在的逻辑块号后,就把该逻辑块读入一缓冲块中.然后把缓冲块中相应位置处的i节点
// 内容复制到指定的位置处.
static void read_inode(struct m_inode * inode)
{
    ebf9:	83 ec 1c             	sub    $0x1c,%esp
	struct super_block * sb;
	struct buffer_head * bh;
	int block;

	// 首先锁定该i节点,并取该节点所在设备的超级块.
	lock_inode(inode);
    ebfc:	83 ec 0c             	sub    $0xc,%esp
    ebff:	ff 74 24 2c          	pushl  0x2c(%esp)
    ec03:	e8 02 f5 ff ff       	call   e10a <lock_inode>
    ec08:	83 c4 10             	add    $0x10,%esp
	if (!(sb = get_super(inode->i_dev)))
    ec0b:	8b 44 24 20          	mov    0x20(%esp),%eax
    ec0f:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    ec13:	0f b7 c0             	movzwl %ax,%eax
    ec16:	83 ec 0c             	sub    $0xc,%esp
    ec19:	50                   	push   %eax
    ec1a:	e8 e5 0e 00 00       	call   fb04 <get_super>
    ec1f:	83 c4 10             	add    $0x10,%esp
    ec22:	89 44 24 0c          	mov    %eax,0xc(%esp)
    ec26:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    ec2b:	75 10                	jne    ec3d <read_inode+0x44>
		panic("trying to read inode without dev");
    ec2d:	83 ec 0c             	sub    $0xc,%esp
    ec30:	68 54 38 02 00       	push   $0x23854
    ec35:	e8 ce 9f ff ff       	call   8c08 <panic>
    ec3a:	83 c4 10             	add    $0x10,%esp
	// 该i节点所在设备逻辑块号 = (启动块 + 超级块) + i节点位图占用的块数 + 逻辑块位图的块数 + (i节点号-1)/每块含有的i节点数.虽然i节点号从0开始编号,
	// 但第1个0号i节点不用,并且磁盘上也不保存对应的0号i节点结构.因此存放i节点的盘块的第1块上保存的是i节点号是1--16的i节点结构而不是0--15的.因此在上面计算
	// i节点号对应的i节点结构所在盘块时需要减1,即:B = (i节点号-1)/每块含有i节点结构数.例如,节点号16的i节点结构应该在B=(16-1)/16 = 0的块上.这里我们从
	// 设备上读取该i节点所在逻辑块,并复制指定i节点内容到inode指针所指位置处.
	block = 2 + sb->s_imap_blocks + sb->s_zmap_blocks +
    ec3d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ec41:	0f b7 40 04          	movzwl 0x4(%eax),%eax
    ec45:	0f b7 c0             	movzwl %ax,%eax
    ec48:	8d 50 02             	lea    0x2(%eax),%edx
    ec4b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ec4f:	0f b7 40 06          	movzwl 0x6(%eax),%eax
    ec53:	0f b7 c0             	movzwl %ax,%eax
    ec56:	01 d0                	add    %edx,%eax
    ec58:	89 c2                	mov    %eax,%edx
		(inode->i_num - 1) / INODES_PER_BLOCK;
    ec5a:	8b 44 24 20          	mov    0x20(%esp),%eax
    ec5e:	0f b7 40 32          	movzwl 0x32(%eax),%eax
    ec62:	0f b7 c0             	movzwl %ax,%eax
    ec65:	83 e8 01             	sub    $0x1,%eax
    ec68:	c1 e8 05             	shr    $0x5,%eax
		panic("trying to read inode without dev");
	// 该i节点所在设备逻辑块号 = (启动块 + 超级块) + i节点位图占用的块数 + 逻辑块位图的块数 + (i节点号-1)/每块含有的i节点数.虽然i节点号从0开始编号,
	// 但第1个0号i节点不用,并且磁盘上也不保存对应的0号i节点结构.因此存放i节点的盘块的第1块上保存的是i节点号是1--16的i节点结构而不是0--15的.因此在上面计算
	// i节点号对应的i节点结构所在盘块时需要减1,即:B = (i节点号-1)/每块含有i节点结构数.例如,节点号16的i节点结构应该在B=(16-1)/16 = 0的块上.这里我们从
	// 设备上读取该i节点所在逻辑块,并复制指定i节点内容到inode指针所指位置处.
	block = 2 + sb->s_imap_blocks + sb->s_zmap_blocks +
    ec6b:	01 d0                	add    %edx,%eax
    ec6d:	89 44 24 08          	mov    %eax,0x8(%esp)
		(inode->i_num - 1) / INODES_PER_BLOCK;
	// 将i节点信息的那个逻辑块读取到高速缓存中
	if (!(bh = bread(inode->i_dev, block)))
    ec71:	8b 44 24 20          	mov    0x20(%esp),%eax
    ec75:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    ec79:	0f b7 c0             	movzwl %ax,%eax
    ec7c:	83 ec 08             	sub    $0x8,%esp
    ec7f:	ff 74 24 10          	pushl  0x10(%esp)
    ec83:	50                   	push   %eax
    ec84:	e8 0a 0a 00 00       	call   f693 <bread>
    ec89:	83 c4 10             	add    $0x10,%esp
    ec8c:	89 44 24 04          	mov    %eax,0x4(%esp)
    ec90:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    ec95:	75 10                	jne    eca7 <read_inode+0xae>
		panic("unable to read i-node block");
    ec97:	83 ec 0c             	sub    $0xc,%esp
    ec9a:	68 75 38 02 00       	push   $0x23875
    ec9f:	e8 64 9f ff ff       	call   8c08 <panic>
    eca4:	83 c4 10             	add    $0x10,%esp
	*(struct d_inode *)inode =
		((struct d_inode *)bh->b_data)
    eca7:	8b 44 24 04          	mov    0x4(%esp),%eax
    ecab:	8b 10                	mov    (%eax),%edx
			[(inode->i_num - 1) % INODES_PER_BLOCK];
    ecad:	8b 44 24 20          	mov    0x20(%esp),%eax
    ecb1:	0f b7 40 32          	movzwl 0x32(%eax),%eax
    ecb5:	0f b7 c0             	movzwl %ax,%eax
    ecb8:	83 e8 01             	sub    $0x1,%eax
    ecbb:	83 e0 1f             	and    $0x1f,%eax
    ecbe:	c1 e0 05             	shl    $0x5,%eax
    ecc1:	01 c2                	add    %eax,%edx
	block = 2 + sb->s_imap_blocks + sb->s_zmap_blocks +
		(inode->i_num - 1) / INODES_PER_BLOCK;
	// 将i节点信息的那个逻辑块读取到高速缓存中
	if (!(bh = bread(inode->i_dev, block)))
		panic("unable to read i-node block");
	*(struct d_inode *)inode =
    ecc3:	8b 44 24 20          	mov    0x20(%esp),%eax
    ecc7:	8b 0a                	mov    (%edx),%ecx
    ecc9:	89 08                	mov    %ecx,(%eax)
    eccb:	8b 4a 04             	mov    0x4(%edx),%ecx
    ecce:	89 48 04             	mov    %ecx,0x4(%eax)
    ecd1:	8b 4a 08             	mov    0x8(%edx),%ecx
    ecd4:	89 48 08             	mov    %ecx,0x8(%eax)
    ecd7:	8b 4a 0c             	mov    0xc(%edx),%ecx
    ecda:	89 48 0c             	mov    %ecx,0xc(%eax)
    ecdd:	8b 4a 10             	mov    0x10(%edx),%ecx
    ece0:	89 48 10             	mov    %ecx,0x10(%eax)
    ece3:	8b 4a 14             	mov    0x14(%edx),%ecx
    ece6:	89 48 14             	mov    %ecx,0x14(%eax)
    ece9:	8b 4a 18             	mov    0x18(%edx),%ecx
    ecec:	89 48 18             	mov    %ecx,0x18(%eax)
    ecef:	8b 52 1c             	mov    0x1c(%edx),%edx
    ecf2:	89 50 1c             	mov    %edx,0x1c(%eax)
		((struct d_inode *)bh->b_data)
			[(inode->i_num - 1) % INODES_PER_BLOCK];
	// 最后释放读入的缓冲块,并解锁该i节点.对于块设备文件,还需要设置i节点的文件最大长度值.
	brelse(bh);
    ecf5:	83 ec 0c             	sub    $0xc,%esp
    ecf8:	ff 74 24 10          	pushl  0x10(%esp)
    ecfc:	e8 3c 09 00 00       	call   f63d <brelse>
    ed01:	83 c4 10             	add    $0x10,%esp
	if (S_ISBLK(inode->i_mode)) {
    ed04:	8b 44 24 20          	mov    0x20(%esp),%eax
    ed08:	0f b7 00             	movzwl (%eax),%eax
    ed0b:	0f b7 c0             	movzwl %ax,%eax
    ed0e:	25 00 f0 00 00       	and    $0xf000,%eax
    ed13:	3d 00 60 00 00       	cmp    $0x6000,%eax
    ed18:	75 52                	jne    ed6c <read_inode+0x173>
		int i = inode->i_zone[0];							// 对于块设备文件,i_zone[0]中是设备号.
    ed1a:	8b 44 24 20          	mov    0x20(%esp),%eax
    ed1e:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
    ed22:	0f b7 c0             	movzwl %ax,%eax
    ed25:	89 04 24             	mov    %eax,(%esp)
		if (blk_size[MAJOR(i)])
    ed28:	8b 04 24             	mov    (%esp),%eax
    ed2b:	c1 e8 08             	shr    $0x8,%eax
    ed2e:	8b 04 85 38 11 03 00 	mov    0x31138(,%eax,4),%eax
    ed35:	85 c0                	test   %eax,%eax
    ed37:	74 28                	je     ed61 <read_inode+0x168>
			inode->i_size = 1024 * blk_size[MAJOR(i)][MINOR(i)];
    ed39:	8b 04 24             	mov    (%esp),%eax
    ed3c:	c1 e8 08             	shr    $0x8,%eax
    ed3f:	8b 04 85 38 11 03 00 	mov    0x31138(,%eax,4),%eax
    ed46:	8b 14 24             	mov    (%esp),%edx
    ed49:	0f b6 d2             	movzbl %dl,%edx
    ed4c:	c1 e2 02             	shl    $0x2,%edx
    ed4f:	01 d0                	add    %edx,%eax
    ed51:	8b 00                	mov    (%eax),%eax
    ed53:	c1 e0 0a             	shl    $0xa,%eax
    ed56:	89 c2                	mov    %eax,%edx
    ed58:	8b 44 24 20          	mov    0x20(%esp),%eax
    ed5c:	89 50 04             	mov    %edx,0x4(%eax)
    ed5f:	eb 0b                	jmp    ed6c <read_inode+0x173>
		else
			inode->i_size = 0x7fffffff;
    ed61:	8b 44 24 20          	mov    0x20(%esp),%eax
    ed65:	c7 40 04 ff ff ff 7f 	movl   $0x7fffffff,0x4(%eax)
	}
	unlock_inode(inode);
    ed6c:	83 ec 0c             	sub    $0xc,%esp
    ed6f:	ff 74 24 2c          	pushl  0x2c(%esp)
    ed73:	e8 c5 f3 ff ff       	call   e13d <unlock_inode>
    ed78:	83 c4 10             	add    $0x10,%esp
}
    ed7b:	90                   	nop
    ed7c:	83 c4 1c             	add    $0x1c,%esp
    ed7f:	c3                   	ret    

0000ed80 <write_inode>:
// 将i节点信息写入缓冲区中.
// 该函数把参数指定的i节点写入缓冲区相应的缓冲块中,待缓冲区刷新时会写入盘中.为了确定i节点所在的设备逻辑块号(或缓冲块),必须首先读取相应设备上的超级块,
// 以获取用于计算逻辑块号的每块i节点数信息INODES_PER_BLOCK.在计算出i节点所在的逻辑块号后,就把该逻辑块读入一缓冲块中.然后把i节点内容复制到缓冲块的
// 相应位置处.
static void write_inode(struct m_inode * inode)
{
    ed80:	83 ec 1c             	sub    $0x1c,%esp
	struct buffer_head * bh;
	int block;

	// 首先锁定该i节点,如果该i节点没有被修改过或者该i节点的设备号等于零,则解锁该i节点,并退出.对于没有被修改过的i节点,其内容与缓冲区中或设备中的相同.然后获取
	// 该i节点的超级块.
	lock_inode(inode);
    ed83:	83 ec 0c             	sub    $0xc,%esp
    ed86:	ff 74 24 2c          	pushl  0x2c(%esp)
    ed8a:	e8 7b f3 ff ff       	call   e10a <lock_inode>
    ed8f:	83 c4 10             	add    $0x10,%esp
	if (!inode->i_dirt || !inode->i_dev) {
    ed92:	8b 44 24 20          	mov    0x20(%esp),%eax
    ed96:	0f b6 40 37          	movzbl 0x37(%eax),%eax
    ed9a:	84 c0                	test   %al,%al
    ed9c:	74 0d                	je     edab <write_inode+0x2b>
    ed9e:	8b 44 24 20          	mov    0x20(%esp),%eax
    eda2:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    eda6:	66 85 c0             	test   %ax,%ax
    eda9:	75 14                	jne    edbf <write_inode+0x3f>
		unlock_inode(inode);
    edab:	83 ec 0c             	sub    $0xc,%esp
    edae:	ff 74 24 2c          	pushl  0x2c(%esp)
    edb2:	e8 86 f3 ff ff       	call   e13d <unlock_inode>
    edb7:	83 c4 10             	add    $0x10,%esp
		return;
    edba:	e9 18 01 00 00       	jmp    eed7 <write_inode+0x157>
	}
	if (!(sb = get_super(inode->i_dev)))
    edbf:	8b 44 24 20          	mov    0x20(%esp),%eax
    edc3:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    edc7:	0f b7 c0             	movzwl %ax,%eax
    edca:	83 ec 0c             	sub    $0xc,%esp
    edcd:	50                   	push   %eax
    edce:	e8 31 0d 00 00       	call   fb04 <get_super>
    edd3:	83 c4 10             	add    $0x10,%esp
    edd6:	89 44 24 0c          	mov    %eax,0xc(%esp)
    edda:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    eddf:	75 10                	jne    edf1 <write_inode+0x71>
		panic("trying to write inode without device");
    ede1:	83 ec 0c             	sub    $0xc,%esp
    ede4:	68 94 38 02 00       	push   $0x23894
    ede9:	e8 1a 9e ff ff       	call   8c08 <panic>
    edee:	83 c4 10             	add    $0x10,%esp
	// 该i节点所在的设备逻辑号 = (启动块 + 超级块) + i节点位图占用的块数 + 逻辑块位图占用的块数 + (i节点号-1)/每块含有的i节点数.我们从设备上读取该i节点所
	// 在的逻辑块,并将该i节点信息复制到逻辑块对应该i节点的项位置处.
	block = 2 + sb->s_imap_blocks + sb->s_zmap_blocks +
    edf1:	8b 44 24 0c          	mov    0xc(%esp),%eax
    edf5:	0f b7 40 04          	movzwl 0x4(%eax),%eax
    edf9:	0f b7 c0             	movzwl %ax,%eax
    edfc:	8d 50 02             	lea    0x2(%eax),%edx
    edff:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ee03:	0f b7 40 06          	movzwl 0x6(%eax),%eax
    ee07:	0f b7 c0             	movzwl %ax,%eax
    ee0a:	01 d0                	add    %edx,%eax
    ee0c:	89 c2                	mov    %eax,%edx
		(inode->i_num - 1) / INODES_PER_BLOCK;
    ee0e:	8b 44 24 20          	mov    0x20(%esp),%eax
    ee12:	0f b7 40 32          	movzwl 0x32(%eax),%eax
    ee16:	0f b7 c0             	movzwl %ax,%eax
    ee19:	83 e8 01             	sub    $0x1,%eax
    ee1c:	c1 e8 05             	shr    $0x5,%eax
	}
	if (!(sb = get_super(inode->i_dev)))
		panic("trying to write inode without device");
	// 该i节点所在的设备逻辑号 = (启动块 + 超级块) + i节点位图占用的块数 + 逻辑块位图占用的块数 + (i节点号-1)/每块含有的i节点数.我们从设备上读取该i节点所
	// 在的逻辑块,并将该i节点信息复制到逻辑块对应该i节点的项位置处.
	block = 2 + sb->s_imap_blocks + sb->s_zmap_blocks +
    ee1f:	01 d0                	add    %edx,%eax
    ee21:	89 44 24 08          	mov    %eax,0x8(%esp)
		(inode->i_num - 1) / INODES_PER_BLOCK;
	if (!(bh = bread(inode->i_dev, block)))
    ee25:	8b 44 24 20          	mov    0x20(%esp),%eax
    ee29:	0f b7 40 30          	movzwl 0x30(%eax),%eax
    ee2d:	0f b7 c0             	movzwl %ax,%eax
    ee30:	83 ec 08             	sub    $0x8,%esp
    ee33:	ff 74 24 10          	pushl  0x10(%esp)
    ee37:	50                   	push   %eax
    ee38:	e8 56 08 00 00       	call   f693 <bread>
    ee3d:	83 c4 10             	add    $0x10,%esp
    ee40:	89 44 24 04          	mov    %eax,0x4(%esp)
    ee44:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    ee49:	75 10                	jne    ee5b <write_inode+0xdb>
		panic("unable to read i-node block");
    ee4b:	83 ec 0c             	sub    $0xc,%esp
    ee4e:	68 75 38 02 00       	push   $0x23875
    ee53:	e8 b0 9d ff ff       	call   8c08 <panic>
    ee58:	83 c4 10             	add    $0x10,%esp
	((struct d_inode *)bh->b_data)
    ee5b:	8b 44 24 04          	mov    0x4(%esp),%eax
    ee5f:	8b 10                	mov    (%eax),%edx
		[(inode->i_num - 1) % INODES_PER_BLOCK] =
    ee61:	8b 44 24 20          	mov    0x20(%esp),%eax
    ee65:	0f b7 40 32          	movzwl 0x32(%eax),%eax
    ee69:	0f b7 c0             	movzwl %ax,%eax
    ee6c:	83 e8 01             	sub    $0x1,%eax
    ee6f:	83 e0 1f             	and    $0x1f,%eax
    ee72:	c1 e0 05             	shl    $0x5,%eax
    ee75:	01 c2                	add    %eax,%edx
    ee77:	8b 44 24 20          	mov    0x20(%esp),%eax
    ee7b:	8b 08                	mov    (%eax),%ecx
    ee7d:	89 0a                	mov    %ecx,(%edx)
    ee7f:	8b 48 04             	mov    0x4(%eax),%ecx
    ee82:	89 4a 04             	mov    %ecx,0x4(%edx)
    ee85:	8b 48 08             	mov    0x8(%eax),%ecx
    ee88:	89 4a 08             	mov    %ecx,0x8(%edx)
    ee8b:	8b 48 0c             	mov    0xc(%eax),%ecx
    ee8e:	89 4a 0c             	mov    %ecx,0xc(%edx)
    ee91:	8b 48 10             	mov    0x10(%eax),%ecx
    ee94:	89 4a 10             	mov    %ecx,0x10(%edx)
    ee97:	8b 48 14             	mov    0x14(%eax),%ecx
    ee9a:	89 4a 14             	mov    %ecx,0x14(%edx)
    ee9d:	8b 48 18             	mov    0x18(%eax),%ecx
    eea0:	89 4a 18             	mov    %ecx,0x18(%edx)
    eea3:	8b 40 1c             	mov    0x1c(%eax),%eax
    eea6:	89 42 1c             	mov    %eax,0x1c(%edx)
			*(struct d_inode *)inode;
	// 然后置缓冲区已修改标志,而i节点内容已经与缓冲区中的一致,因此修改标志置零.然后释放该含有i节点的缓冲区,并解锁该i节点.
	bh->b_dirt = 1;
    eea9:	8b 44 24 04          	mov    0x4(%esp),%eax
    eead:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	inode->i_dirt = 0;
    eeb1:	8b 44 24 20          	mov    0x20(%esp),%eax
    eeb5:	c6 40 37 00          	movb   $0x0,0x37(%eax)
	brelse(bh);
    eeb9:	83 ec 0c             	sub    $0xc,%esp
    eebc:	ff 74 24 10          	pushl  0x10(%esp)
    eec0:	e8 78 07 00 00       	call   f63d <brelse>
    eec5:	83 c4 10             	add    $0x10,%esp
	unlock_inode(inode);
    eec8:	83 ec 0c             	sub    $0xc,%esp
    eecb:	ff 74 24 2c          	pushl  0x2c(%esp)
    eecf:	e8 69 f2 ff ff       	call   e13d <unlock_inode>
    eed4:	83 c4 10             	add    $0x10,%esp
}
    eed7:	83 c4 1c             	add    $0x1c,%esp
    eeda:	c3                   	ret    

0000eedb <wait_on_buffer>:
// 等待指定缓冲块解锁.
// 如果指定的缓冲块bh已经上锁就让进程不可中断地睡眠在该缓冲块的等待队列b_wait中.在缓冲块解锁时,其等待队列上的所有进程将被唤醒.虽然是在关闭
// 中断(cli)之后去睡眠的,但这样做并不会影响在其他进程上下文中响应中断.因为每个进程都在自己的TSS段中保存了标志寄存器EFLAGS的值,所在在进程
// 切换时CPU中当前EFLAGS的值也随之改变.使用sleep_on()进入睡眠状态的进程需要用wake_up()明确地唤醒.
static inline void wait_on_buffer(struct buffer_head * bh)
{
    eedb:	83 ec 0c             	sub    $0xc,%esp
	cli();							// 关中断
    eede:	fa                   	cli    
	while (bh->b_lock)				// 如果已被上锁则进程进入睡眠,等待其解锁.
    eedf:	eb 13                	jmp    eef4 <wait_on_buffer+0x19>
		sleep_on(&bh->b_wait);
    eee1:	8b 44 24 10          	mov    0x10(%esp),%eax
    eee5:	83 c0 10             	add    $0x10,%eax
    eee8:	83 ec 0c             	sub    $0xc,%esp
    eeeb:	50                   	push   %eax
    eeec:	e8 45 82 ff ff       	call   7136 <sleep_on>
    eef1:	83 c4 10             	add    $0x10,%esp
// 中断(cli)之后去睡眠的,但这样做并不会影响在其他进程上下文中响应中断.因为每个进程都在自己的TSS段中保存了标志寄存器EFLAGS的值,所在在进程
// 切换时CPU中当前EFLAGS的值也随之改变.使用sleep_on()进入睡眠状态的进程需要用wake_up()明确地唤醒.
static inline void wait_on_buffer(struct buffer_head * bh)
{
	cli();							// 关中断
	while (bh->b_lock)				// 如果已被上锁则进程进入睡眠,等待其解锁.
    eef4:	8b 44 24 10          	mov    0x10(%esp),%eax
    eef8:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
    eefc:	84 c0                	test   %al,%al
    eefe:	75 e1                	jne    eee1 <wait_on_buffer+0x6>
		sleep_on(&bh->b_wait);
	sti();							// 开中断.
    ef00:	fb                   	sti    
}
    ef01:	90                   	nop
    ef02:	83 c4 0c             	add    $0xc,%esp
    ef05:	c3                   	ret    

0000ef06 <sys_sync>:

// 设备数据同步。
// 同步设备和内存高速缓冲中数据。其中，sync_inodes()定义在inode.c。
int sys_sync(void)
{
    ef06:	83 ec 1c             	sub    $0x1c,%esp
	int i;
	struct buffer_head * bh;

	// 首先调用i节点同步函数，把内在i节点表中所有修改过的i节点写入高速缓冲中。然后扫描所有高速缓冲区，对已被修改的缓冲块
	// 产生写盘请求，将缓冲中数据写入盘中，做到高速缓冲中的数据与设备中的同步。
	sync_inodes();							/* write out inodes into buffers */
    ef09:	e8 cc f2 ff ff       	call   e1da <sync_inodes>
	bh = start_buffer;      				// bh指向缓冲开始处。
    ef0e:	a1 64 e3 02 00       	mov    0x2e364,%eax
    ef13:	89 44 24 08          	mov    %eax,0x8(%esp)
	for (i = 0 ; i < NR_BUFFERS ; i++, bh++) {
    ef17:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    ef1e:	00 
    ef1f:	eb 36                	jmp    ef57 <sys_sync+0x51>
		wait_on_buffer(bh);             	// 等待缓冲区解锁（如果已上锁的话）。
    ef21:	83 ec 0c             	sub    $0xc,%esp
    ef24:	ff 74 24 14          	pushl  0x14(%esp)
    ef28:	e8 ae ff ff ff       	call   eedb <wait_on_buffer>
    ef2d:	83 c4 10             	add    $0x10,%esp
		if (bh->b_dirt)
    ef30:	8b 44 24 08          	mov    0x8(%esp),%eax
    ef34:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
    ef38:	84 c0                	test   %al,%al
    ef3a:	74 11                	je     ef4d <sys_sync+0x47>
			ll_rw_block(WRITE, bh);  		// 产生写设备块请求。
    ef3c:	83 ec 08             	sub    $0x8,%esp
    ef3f:	ff 74 24 10          	pushl  0x10(%esp)
    ef43:	6a 01                	push   $0x1
    ef45:	e8 be 79 00 00       	call   16908 <ll_rw_block>
    ef4a:	83 c4 10             	add    $0x10,%esp

	// 首先调用i节点同步函数，把内在i节点表中所有修改过的i节点写入高速缓冲中。然后扫描所有高速缓冲区，对已被修改的缓冲块
	// 产生写盘请求，将缓冲中数据写入盘中，做到高速缓冲中的数据与设备中的同步。
	sync_inodes();							/* write out inodes into buffers */
	bh = start_buffer;      				// bh指向缓冲开始处。
	for (i = 0 ; i < NR_BUFFERS ; i++, bh++) {
    ef4d:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    ef52:	83 44 24 08 24       	addl   $0x24,0x8(%esp)
    ef57:	a1 c0 10 03 00       	mov    0x310c0,%eax
    ef5c:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    ef60:	7c bf                	jl     ef21 <sys_sync+0x1b>
		wait_on_buffer(bh);             	// 等待缓冲区解锁（如果已上锁的话）。
		if (bh->b_dirt)
			ll_rw_block(WRITE, bh);  		// 产生写设备块请求。
	}
	return 0;
    ef62:	b8 00 00 00 00       	mov    $0x0,%eax
}
    ef67:	83 c4 1c             	add    $0x1c,%esp
    ef6a:	c3                   	ret    

0000ef6b <sync_dev>:

// 对指定设备进行高速缓冲数据与设备上数据的同步操作。
// 该函数首先搜索高速缓冲区中所有缓冲块。对于指定设备dev的缓冲块，若其数据已被修改过就写入盘中（同步操作）。然后
// 把内存中i节点数据写入高速缓冲中。之后再指定设备dev执行一次与上述相同的写盘操作。
int sync_dev(int dev)
{
    ef6b:	83 ec 1c             	sub    $0x1c,%esp

	// 首先对参数指定的设备执行数据同步操作，让设备上的数据与高速缓冲区中的数据同步。方法是扫描高速缓冲区中所有缓冲块，
	// 对指定设备dev的缓冲块，先检测其是否已被上锁，若已被锁就睡眠等待其解锁。然后再判断一次该缓冲块是否还是指定设备的
	// 缓冲块并且已修改过（b_dirt标志置位），若是就对其执行写盘操作。因为在我们睡眠期间该缓冲块有可能已被释放或者被挪
	// 作它用，所以在继续执行前需要再次判断一下该缓冲块是否还是指定设备的缓冲块。
	bh = start_buffer;                      		// bf指向缓冲区开始处。
    ef6e:	a1 64 e3 02 00       	mov    0x2e364,%eax
    ef73:	89 44 24 08          	mov    %eax,0x8(%esp)
	for (i = 0 ; i < NR_BUFFERS ; i++, bh++) {
    ef77:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    ef7e:	00 
    ef7f:	eb 5b                	jmp    efdc <sync_dev+0x71>
		if (bh->b_dev != dev)           			// 不是设备dev的缓冲块则继续。
    ef81:	8b 44 24 08          	mov    0x8(%esp),%eax
    ef85:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    ef89:	0f b7 c0             	movzwl %ax,%eax
    ef8c:	3b 44 24 20          	cmp    0x20(%esp),%eax
    ef90:	75 3f                	jne    efd1 <sync_dev+0x66>
			continue;
		wait_on_buffer(bh);             			// 等待缓冲区解锁（如果已上锁的话）。
    ef92:	83 ec 0c             	sub    $0xc,%esp
    ef95:	ff 74 24 14          	pushl  0x14(%esp)
    ef99:	e8 3d ff ff ff       	call   eedb <wait_on_buffer>
    ef9e:	83 c4 10             	add    $0x10,%esp
		if (bh->b_dev == dev && bh->b_dirt)
    efa1:	8b 44 24 08          	mov    0x8(%esp),%eax
    efa5:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    efa9:	0f b7 c0             	movzwl %ax,%eax
    efac:	3b 44 24 20          	cmp    0x20(%esp),%eax
    efb0:	75 20                	jne    efd2 <sync_dev+0x67>
    efb2:	8b 44 24 08          	mov    0x8(%esp),%eax
    efb6:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
    efba:	84 c0                	test   %al,%al
    efbc:	74 14                	je     efd2 <sync_dev+0x67>
			ll_rw_block(WRITE, bh);
    efbe:	83 ec 08             	sub    $0x8,%esp
    efc1:	ff 74 24 10          	pushl  0x10(%esp)
    efc5:	6a 01                	push   $0x1
    efc7:	e8 3c 79 00 00       	call   16908 <ll_rw_block>
    efcc:	83 c4 10             	add    $0x10,%esp
    efcf:	eb 01                	jmp    efd2 <sync_dev+0x67>
	// 缓冲块并且已修改过（b_dirt标志置位），若是就对其执行写盘操作。因为在我们睡眠期间该缓冲块有可能已被释放或者被挪
	// 作它用，所以在继续执行前需要再次判断一下该缓冲块是否还是指定设备的缓冲块。
	bh = start_buffer;                      		// bf指向缓冲区开始处。
	for (i = 0 ; i < NR_BUFFERS ; i++, bh++) {
		if (bh->b_dev != dev)           			// 不是设备dev的缓冲块则继续。
			continue;
    efd1:	90                   	nop
	// 首先对参数指定的设备执行数据同步操作，让设备上的数据与高速缓冲区中的数据同步。方法是扫描高速缓冲区中所有缓冲块，
	// 对指定设备dev的缓冲块，先检测其是否已被上锁，若已被锁就睡眠等待其解锁。然后再判断一次该缓冲块是否还是指定设备的
	// 缓冲块并且已修改过（b_dirt标志置位），若是就对其执行写盘操作。因为在我们睡眠期间该缓冲块有可能已被释放或者被挪
	// 作它用，所以在继续执行前需要再次判断一下该缓冲块是否还是指定设备的缓冲块。
	bh = start_buffer;                      		// bf指向缓冲区开始处。
	for (i = 0 ; i < NR_BUFFERS ; i++, bh++) {
    efd2:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    efd7:	83 44 24 08 24       	addl   $0x24,0x8(%esp)
    efdc:	a1 c0 10 03 00       	mov    0x310c0,%eax
    efe1:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    efe5:	7c 9a                	jl     ef81 <sync_dev+0x16>
		wait_on_buffer(bh);             			// 等待缓冲区解锁（如果已上锁的话）。
		if (bh->b_dev == dev && bh->b_dirt)
			ll_rw_block(WRITE, bh);
	}
	// 再将i节点数据写入高速缓冲。让i节点表inode_table中的inode与缓冲中的信息同步。
	sync_inodes();
    efe7:	e8 ee f1 ff ff       	call   e1da <sync_inodes>
	// 然后在高速缓冲中的数据更新之后，再把它们与设备中的数据同步。这里采用两遍同步操作是为了提高内核执行效率。第一遍缓
	// 冲区同步操作可以让内核中许多“脏块”变干净，使得i节点的同步操作能够高效执行。本次缓冲区同步操作则把那些由于i节点
	// 同步操作而又变脏的缓冲块与设备中数据同步。
	bh = start_buffer;
    efec:	a1 64 e3 02 00       	mov    0x2e364,%eax
    eff1:	89 44 24 08          	mov    %eax,0x8(%esp)
	for (i = 0 ; i < NR_BUFFERS ; i++, bh++) {
    eff5:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    effc:	00 
    effd:	eb 5b                	jmp    f05a <sync_dev+0xef>
		if (bh->b_dev != dev)
    efff:	8b 44 24 08          	mov    0x8(%esp),%eax
    f003:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f007:	0f b7 c0             	movzwl %ax,%eax
    f00a:	3b 44 24 20          	cmp    0x20(%esp),%eax
    f00e:	75 3f                	jne    f04f <sync_dev+0xe4>
			continue;
		wait_on_buffer(bh);
    f010:	83 ec 0c             	sub    $0xc,%esp
    f013:	ff 74 24 14          	pushl  0x14(%esp)
    f017:	e8 bf fe ff ff       	call   eedb <wait_on_buffer>
    f01c:	83 c4 10             	add    $0x10,%esp
		if (bh->b_dev == dev && bh->b_dirt)
    f01f:	8b 44 24 08          	mov    0x8(%esp),%eax
    f023:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f027:	0f b7 c0             	movzwl %ax,%eax
    f02a:	3b 44 24 20          	cmp    0x20(%esp),%eax
    f02e:	75 20                	jne    f050 <sync_dev+0xe5>
    f030:	8b 44 24 08          	mov    0x8(%esp),%eax
    f034:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
    f038:	84 c0                	test   %al,%al
    f03a:	74 14                	je     f050 <sync_dev+0xe5>
			ll_rw_block(WRITE, bh);
    f03c:	83 ec 08             	sub    $0x8,%esp
    f03f:	ff 74 24 10          	pushl  0x10(%esp)
    f043:	6a 01                	push   $0x1
    f045:	e8 be 78 00 00       	call   16908 <ll_rw_block>
    f04a:	83 c4 10             	add    $0x10,%esp
    f04d:	eb 01                	jmp    f050 <sync_dev+0xe5>
	// 冲区同步操作可以让内核中许多“脏块”变干净，使得i节点的同步操作能够高效执行。本次缓冲区同步操作则把那些由于i节点
	// 同步操作而又变脏的缓冲块与设备中数据同步。
	bh = start_buffer;
	for (i = 0 ; i < NR_BUFFERS ; i++, bh++) {
		if (bh->b_dev != dev)
			continue;
    f04f:	90                   	nop
	sync_inodes();
	// 然后在高速缓冲中的数据更新之后，再把它们与设备中的数据同步。这里采用两遍同步操作是为了提高内核执行效率。第一遍缓
	// 冲区同步操作可以让内核中许多“脏块”变干净，使得i节点的同步操作能够高效执行。本次缓冲区同步操作则把那些由于i节点
	// 同步操作而又变脏的缓冲块与设备中数据同步。
	bh = start_buffer;
	for (i = 0 ; i < NR_BUFFERS ; i++, bh++) {
    f050:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    f055:	83 44 24 08 24       	addl   $0x24,0x8(%esp)
    f05a:	a1 c0 10 03 00       	mov    0x310c0,%eax
    f05f:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    f063:	7c 9a                	jl     efff <sync_dev+0x94>
			continue;
		wait_on_buffer(bh);
		if (bh->b_dev == dev && bh->b_dirt)
			ll_rw_block(WRITE, bh);
	}
	return 0;
    f065:	b8 00 00 00 00       	mov    $0x0,%eax
}
    f06a:	83 c4 1c             	add    $0x1c,%esp
    f06d:	c3                   	ret    

0000f06e <invalidate_buffers>:

// 使指定设备在高速缓冲区中的数据无效。
// 扫描高速缓冲中所有的缓冲块。对指定设备的缓冲块复位其有效（更新）标志和修改标志。
void invalidate_buffers(int dev)
{
    f06e:	83 ec 1c             	sub    $0x1c,%esp
	int i;
	struct buffer_head * bh;

	bh = start_buffer;
    f071:	a1 64 e3 02 00       	mov    0x2e364,%eax
    f076:	89 44 24 08          	mov    %eax,0x8(%esp)
	for (i = 0 ; i < NR_BUFFERS ; i++, bh++) {
    f07a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    f081:	00 
    f082:	eb 55                	jmp    f0d9 <invalidate_buffers+0x6b>
		if (bh->b_dev != dev)           // 如果不是指定设备的缓冲块，则继续扫描下一块。
    f084:	8b 44 24 08          	mov    0x8(%esp),%eax
    f088:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f08c:	0f b7 c0             	movzwl %ax,%eax
    f08f:	3b 44 24 20          	cmp    0x20(%esp),%eax
    f093:	75 39                	jne    f0ce <invalidate_buffers+0x60>
			continue;
		wait_on_buffer(bh);             // 等待该缓冲区解锁（如果已被上锁）。
    f095:	83 ec 0c             	sub    $0xc,%esp
    f098:	ff 74 24 14          	pushl  0x14(%esp)
    f09c:	e8 3a fe ff ff       	call   eedb <wait_on_buffer>
    f0a1:	83 c4 10             	add    $0x10,%esp
		// 由于进程执行过睡眠等待，所以需要再判断一下缓冲区是否是指定设备的。
		if (bh->b_dev == dev)
    f0a4:	8b 44 24 08          	mov    0x8(%esp),%eax
    f0a8:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f0ac:	0f b7 c0             	movzwl %ax,%eax
    f0af:	3b 44 24 20          	cmp    0x20(%esp),%eax
    f0b3:	75 1a                	jne    f0cf <invalidate_buffers+0x61>
			bh->b_uptodate = bh->b_dirt = 0;
    f0b5:	8b 44 24 08          	mov    0x8(%esp),%eax
    f0b9:	c6 40 0b 00          	movb   $0x0,0xb(%eax)
    f0bd:	8b 44 24 08          	mov    0x8(%esp),%eax
    f0c1:	0f b6 50 0b          	movzbl 0xb(%eax),%edx
    f0c5:	8b 44 24 08          	mov    0x8(%esp),%eax
    f0c9:	88 50 0a             	mov    %dl,0xa(%eax)
    f0cc:	eb 01                	jmp    f0cf <invalidate_buffers+0x61>
	struct buffer_head * bh;

	bh = start_buffer;
	for (i = 0 ; i < NR_BUFFERS ; i++, bh++) {
		if (bh->b_dev != dev)           // 如果不是指定设备的缓冲块，则继续扫描下一块。
			continue;
    f0ce:	90                   	nop
{
	int i;
	struct buffer_head * bh;

	bh = start_buffer;
	for (i = 0 ; i < NR_BUFFERS ; i++, bh++) {
    f0cf:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    f0d4:	83 44 24 08 24       	addl   $0x24,0x8(%esp)
    f0d9:	a1 c0 10 03 00       	mov    0x310c0,%eax
    f0de:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    f0e2:	7c a0                	jl     f084 <invalidate_buffers+0x16>
		wait_on_buffer(bh);             // 等待该缓冲区解锁（如果已被上锁）。
		// 由于进程执行过睡眠等待，所以需要再判断一下缓冲区是否是指定设备的。
		if (bh->b_dev == dev)
			bh->b_uptodate = bh->b_dirt = 0;
	}
}
    f0e4:	90                   	nop
    f0e5:	83 c4 1c             	add    $0x1c,%esp
    f0e8:	c3                   	ret    

0000f0e9 <check_disk_change>:
 * 注意！尽管目前该子程序仅用于软盘，以后任何可移动介质的块设备都有将使用该程序，mount/open操作不需要知道
 * 是软盘还是其他什么特殊介质。
 */
// 检查磁盘是否更换，如果已更换就使用对应调整缓冲区无效。
void check_disk_change(int dev)
{
    f0e9:	83 ec 1c             	sub    $0x1c,%esp
	int i;

	// 首先检测一下是不是软盘设备。因为现在仅支持软盘可移动介质。如果不是则退出。然后测试软盘是否已更换，如果没有
	// 则退出。floppy_chang()在blk_drv/floppy.c。
	if (MAJOR(dev) != 2)
    f0ec:	8b 44 24 20          	mov    0x20(%esp),%eax
    f0f0:	c1 e8 08             	shr    $0x8,%eax
    f0f3:	83 f8 02             	cmp    $0x2,%eax
    f0f6:	0f 85 83 00 00 00    	jne    f17f <check_disk_change+0x96>
		return;
	if (!floppy_change(dev & 0x03))
    f0fc:	8b 44 24 20          	mov    0x20(%esp),%eax
    f100:	83 e0 03             	and    $0x3,%eax
    f103:	83 ec 0c             	sub    $0xc,%esp
    f106:	50                   	push   %eax
    f107:	e8 eb 79 00 00       	call   16af7 <floppy_change>
    f10c:	83 c4 10             	add    $0x10,%esp
    f10f:	85 c0                	test   %eax,%eax
    f111:	74 6f                	je     f182 <check_disk_change+0x99>
		return;
	// 软盘已更换，所以释放对应设备的i节点位图和逻辑位图所占的高速缓冲区；并使该设备的i节点和数据块信息所占据的高速缓冲
	// 块无效。
	for (i = 0 ; i < NR_SUPER ; i++)
    f113:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    f11a:	00 
    f11b:	eb 3b                	jmp    f158 <check_disk_change+0x6f>
		if (super_block[i].s_dev == dev)
    f11d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f121:	6b c0 6c             	imul   $0x6c,%eax,%eax
    f124:	05 74 0c 04 00       	add    $0x40c74,%eax
    f129:	0f b7 00             	movzwl (%eax),%eax
    f12c:	0f b7 c0             	movzwl %ax,%eax
    f12f:	3b 44 24 20          	cmp    0x20(%esp),%eax
    f133:	75 1e                	jne    f153 <check_disk_change+0x6a>
			put_super(super_block[i].s_dev);
    f135:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f139:	6b c0 6c             	imul   $0x6c,%eax,%eax
    f13c:	05 74 0c 04 00       	add    $0x40c74,%eax
    f141:	0f b7 00             	movzwl (%eax),%eax
    f144:	0f b7 c0             	movzwl %ax,%eax
    f147:	83 ec 0c             	sub    $0xc,%esp
    f14a:	50                   	push   %eax
    f14b:	e8 29 0a 00 00       	call   fb79 <put_super>
    f150:	83 c4 10             	add    $0x10,%esp
		return;
	if (!floppy_change(dev & 0x03))
		return;
	// 软盘已更换，所以释放对应设备的i节点位图和逻辑位图所占的高速缓冲区；并使该设备的i节点和数据块信息所占据的高速缓冲
	// 块无效。
	for (i = 0 ; i < NR_SUPER ; i++)
    f153:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    f158:	83 7c 24 0c 07       	cmpl   $0x7,0xc(%esp)
    f15d:	7e be                	jle    f11d <check_disk_change+0x34>
		if (super_block[i].s_dev == dev)
			put_super(super_block[i].s_dev);
	invalidate_inodes(dev);         // 释放设备dev在内存i节点表中的所有i节点
    f15f:	83 ec 0c             	sub    $0xc,%esp
    f162:	ff 74 24 2c          	pushl  0x2c(%esp)
    f166:	e8 f5 ef ff ff       	call   e160 <invalidate_inodes>
    f16b:	83 c4 10             	add    $0x10,%esp
	invalidate_buffers(dev);        //
    f16e:	83 ec 0c             	sub    $0xc,%esp
    f171:	ff 74 24 2c          	pushl  0x2c(%esp)
    f175:	e8 f4 fe ff ff       	call   f06e <invalidate_buffers>
    f17a:	83 c4 10             	add    $0x10,%esp
    f17d:	eb 04                	jmp    f183 <check_disk_change+0x9a>
	int i;

	// 首先检测一下是不是软盘设备。因为现在仅支持软盘可移动介质。如果不是则退出。然后测试软盘是否已更换，如果没有
	// 则退出。floppy_chang()在blk_drv/floppy.c。
	if (MAJOR(dev) != 2)
		return;
    f17f:	90                   	nop
    f180:	eb 01                	jmp    f183 <check_disk_change+0x9a>
	if (!floppy_change(dev & 0x03))
		return;
    f182:	90                   	nop
	for (i = 0 ; i < NR_SUPER ; i++)
		if (super_block[i].s_dev == dev)
			put_super(super_block[i].s_dev);
	invalidate_inodes(dev);         // 释放设备dev在内存i节点表中的所有i节点
	invalidate_buffers(dev);        //
}
    f183:	83 c4 1c             	add    $0x1c,%esp
    f186:	c3                   	ret    

0000f187 <remove_from_queues>:
#define hash(dev, block) hash_table[_hashfn(dev, block)]

// 从hash队列和空闲缓冲队列中移走缓冲块.
// hash队列是双向链表结构,空闲缓冲块队列是双向循环链表结构.
static inline void remove_from_queues(struct buffer_head * bh)
{
    f187:	83 ec 0c             	sub    $0xc,%esp
	/* remove from hash-queue */
	/* 从hash队列中移除缓冲块 */
	if (bh->b_next)
    f18a:	8b 44 24 10          	mov    0x10(%esp),%eax
    f18e:	8b 40 18             	mov    0x18(%eax),%eax
    f191:	85 c0                	test   %eax,%eax
    f193:	74 11                	je     f1a6 <remove_from_queues+0x1f>
		bh->b_next->b_prev = bh->b_prev;
    f195:	8b 44 24 10          	mov    0x10(%esp),%eax
    f199:	8b 40 18             	mov    0x18(%eax),%eax
    f19c:	8b 54 24 10          	mov    0x10(%esp),%edx
    f1a0:	8b 52 14             	mov    0x14(%edx),%edx
    f1a3:	89 50 14             	mov    %edx,0x14(%eax)
	if (bh->b_prev)
    f1a6:	8b 44 24 10          	mov    0x10(%esp),%eax
    f1aa:	8b 40 14             	mov    0x14(%eax),%eax
    f1ad:	85 c0                	test   %eax,%eax
    f1af:	74 11                	je     f1c2 <remove_from_queues+0x3b>
		bh->b_prev->b_next = bh->b_next;
    f1b1:	8b 44 24 10          	mov    0x10(%esp),%eax
    f1b5:	8b 40 14             	mov    0x14(%eax),%eax
    f1b8:	8b 54 24 10          	mov    0x10(%esp),%edx
    f1bc:	8b 52 18             	mov    0x18(%edx),%edx
    f1bf:	89 50 18             	mov    %edx,0x18(%eax)
	// 如果该缓冲我是该队列的头一个块,则让hash表的对应项指向本队列中的下一个缓冲区.
	if (hash(bh->b_dev, bh->b_blocknr) == bh)
    f1c2:	8b 44 24 10          	mov    0x10(%esp),%eax
    f1c6:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f1ca:	0f b7 d0             	movzwl %ax,%edx
    f1cd:	8b 44 24 10          	mov    0x10(%esp),%eax
    f1d1:	8b 40 04             	mov    0x4(%eax),%eax
    f1d4:	89 d1                	mov    %edx,%ecx
    f1d6:	31 c1                	xor    %eax,%ecx
    f1d8:	ba 7d e9 78 d5       	mov    $0xd578e97d,%edx
    f1dd:	89 c8                	mov    %ecx,%eax
    f1df:	f7 e2                	mul    %edx
    f1e1:	89 d0                	mov    %edx,%eax
    f1e3:	c1 e8 08             	shr    $0x8,%eax
    f1e6:	69 c0 33 01 00 00    	imul   $0x133,%eax,%eax
    f1ec:	29 c1                	sub    %eax,%ecx
    f1ee:	89 c8                	mov    %ecx,%eax
    f1f0:	8b 04 85 40 07 04 00 	mov    0x40740(,%eax,4),%eax
    f1f7:	3b 44 24 10          	cmp    0x10(%esp),%eax
    f1fb:	75 3c                	jne    f239 <remove_from_queues+0xb2>
		hash(bh->b_dev, bh->b_blocknr) = bh->b_next;
    f1fd:	8b 44 24 10          	mov    0x10(%esp),%eax
    f201:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f205:	0f b7 d0             	movzwl %ax,%edx
    f208:	8b 44 24 10          	mov    0x10(%esp),%eax
    f20c:	8b 40 04             	mov    0x4(%eax),%eax
    f20f:	89 d1                	mov    %edx,%ecx
    f211:	31 c1                	xor    %eax,%ecx
    f213:	ba 7d e9 78 d5       	mov    $0xd578e97d,%edx
    f218:	89 c8                	mov    %ecx,%eax
    f21a:	f7 e2                	mul    %edx
    f21c:	89 d0                	mov    %edx,%eax
    f21e:	c1 e8 08             	shr    $0x8,%eax
    f221:	69 c0 33 01 00 00    	imul   $0x133,%eax,%eax
    f227:	29 c1                	sub    %eax,%ecx
    f229:	89 c8                	mov    %ecx,%eax
    f22b:	8b 54 24 10          	mov    0x10(%esp),%edx
    f22f:	8b 52 18             	mov    0x18(%edx),%edx
    f232:	89 14 85 40 07 04 00 	mov    %edx,0x40740(,%eax,4)
	/* remove from free list */
	/* 从空闲缓冲块表中移除缓冲块 */
	if (!(bh->b_prev_free) || !(bh->b_next_free))
    f239:	8b 44 24 10          	mov    0x10(%esp),%eax
    f23d:	8b 40 1c             	mov    0x1c(%eax),%eax
    f240:	85 c0                	test   %eax,%eax
    f242:	74 0b                	je     f24f <remove_from_queues+0xc8>
    f244:	8b 44 24 10          	mov    0x10(%esp),%eax
    f248:	8b 40 20             	mov    0x20(%eax),%eax
    f24b:	85 c0                	test   %eax,%eax
    f24d:	75 10                	jne    f25f <remove_from_queues+0xd8>
		panic("Free block list corrupted");
    f24f:	83 ec 0c             	sub    $0xc,%esp
    f252:	68 b9 38 02 00       	push   $0x238b9
    f257:	e8 ac 99 ff ff       	call   8c08 <panic>
    f25c:	83 c4 10             	add    $0x10,%esp
	bh->b_prev_free->b_next_free = bh->b_next_free;
    f25f:	8b 44 24 10          	mov    0x10(%esp),%eax
    f263:	8b 40 1c             	mov    0x1c(%eax),%eax
    f266:	8b 54 24 10          	mov    0x10(%esp),%edx
    f26a:	8b 52 20             	mov    0x20(%edx),%edx
    f26d:	89 50 20             	mov    %edx,0x20(%eax)
	bh->b_next_free->b_prev_free = bh->b_prev_free;
    f270:	8b 44 24 10          	mov    0x10(%esp),%eax
    f274:	8b 40 20             	mov    0x20(%eax),%eax
    f277:	8b 54 24 10          	mov    0x10(%esp),%edx
    f27b:	8b 52 1c             	mov    0x1c(%edx),%edx
    f27e:	89 50 1c             	mov    %edx,0x1c(%eax)
	// 如果空闲链表头指向本缓冲区,则让其指向下一缓冲区.
	if (free_list == bh)
    f281:	a1 c4 10 03 00       	mov    0x310c4,%eax
    f286:	3b 44 24 10          	cmp    0x10(%esp),%eax
    f28a:	75 0c                	jne    f298 <remove_from_queues+0x111>
		free_list = bh->b_next_free;
    f28c:	8b 44 24 10          	mov    0x10(%esp),%eax
    f290:	8b 40 20             	mov    0x20(%eax),%eax
    f293:	a3 c4 10 03 00       	mov    %eax,0x310c4
}
    f298:	90                   	nop
    f299:	83 c4 0c             	add    $0xc,%esp
    f29c:	c3                   	ret    

0000f29d <insert_into_queues>:
// 将缓冲块插入空闲链表尾部,同时放入hash队列中.
static inline void insert_into_queues(struct buffer_head * bh)
{
	/* put at end of free list */
	/* 放在空闲链表末尾处 */
	bh->b_next_free = free_list;
    f29d:	8b 15 c4 10 03 00    	mov    0x310c4,%edx
    f2a3:	8b 44 24 04          	mov    0x4(%esp),%eax
    f2a7:	89 50 20             	mov    %edx,0x20(%eax)
	bh->b_prev_free = free_list->b_prev_free;
    f2aa:	a1 c4 10 03 00       	mov    0x310c4,%eax
    f2af:	8b 50 1c             	mov    0x1c(%eax),%edx
    f2b2:	8b 44 24 04          	mov    0x4(%esp),%eax
    f2b6:	89 50 1c             	mov    %edx,0x1c(%eax)
	free_list->b_prev_free->b_next_free = bh;
    f2b9:	a1 c4 10 03 00       	mov    0x310c4,%eax
    f2be:	8b 40 1c             	mov    0x1c(%eax),%eax
    f2c1:	8b 54 24 04          	mov    0x4(%esp),%edx
    f2c5:	89 50 20             	mov    %edx,0x20(%eax)
	free_list->b_prev_free = bh;
    f2c8:	a1 c4 10 03 00       	mov    0x310c4,%eax
    f2cd:	8b 54 24 04          	mov    0x4(%esp),%edx
    f2d1:	89 50 1c             	mov    %edx,0x1c(%eax)
	/* put the buffer in new hash-queue if it has a device */
	/* 如果该缓冲块对应一个设备,则将其插入新hash队列中 */
	bh->b_prev = NULL;
    f2d4:	8b 44 24 04          	mov    0x4(%esp),%eax
    f2d8:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
	bh->b_next = NULL;
    f2df:	8b 44 24 04          	mov    0x4(%esp),%eax
    f2e3:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
	if (!bh->b_dev)
    f2ea:	8b 44 24 04          	mov    0x4(%esp),%eax
    f2ee:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f2f2:	66 85 c0             	test   %ax,%ax
    f2f5:	0f 84 90 00 00 00    	je     f38b <insert_into_queues+0xee>
		return;
	bh->b_next = hash(bh->b_dev, bh->b_blocknr);
    f2fb:	8b 44 24 04          	mov    0x4(%esp),%eax
    f2ff:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f303:	0f b7 d0             	movzwl %ax,%edx
    f306:	8b 44 24 04          	mov    0x4(%esp),%eax
    f30a:	8b 40 04             	mov    0x4(%eax),%eax
    f30d:	89 d1                	mov    %edx,%ecx
    f30f:	31 c1                	xor    %eax,%ecx
    f311:	ba 7d e9 78 d5       	mov    $0xd578e97d,%edx
    f316:	89 c8                	mov    %ecx,%eax
    f318:	f7 e2                	mul    %edx
    f31a:	89 d0                	mov    %edx,%eax
    f31c:	c1 e8 08             	shr    $0x8,%eax
    f31f:	69 c0 33 01 00 00    	imul   $0x133,%eax,%eax
    f325:	29 c1                	sub    %eax,%ecx
    f327:	89 c8                	mov    %ecx,%eax
    f329:	8b 14 85 40 07 04 00 	mov    0x40740(,%eax,4),%edx
    f330:	8b 44 24 04          	mov    0x4(%esp),%eax
    f334:	89 50 18             	mov    %edx,0x18(%eax)
	hash(bh->b_dev, bh->b_blocknr) = bh;
    f337:	8b 44 24 04          	mov    0x4(%esp),%eax
    f33b:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f33f:	0f b7 d0             	movzwl %ax,%edx
    f342:	8b 44 24 04          	mov    0x4(%esp),%eax
    f346:	8b 40 04             	mov    0x4(%eax),%eax
    f349:	89 d1                	mov    %edx,%ecx
    f34b:	31 c1                	xor    %eax,%ecx
    f34d:	ba 7d e9 78 d5       	mov    $0xd578e97d,%edx
    f352:	89 c8                	mov    %ecx,%eax
    f354:	f7 e2                	mul    %edx
    f356:	89 d0                	mov    %edx,%eax
    f358:	c1 e8 08             	shr    $0x8,%eax
    f35b:	69 c0 33 01 00 00    	imul   $0x133,%eax,%eax
    f361:	29 c1                	sub    %eax,%ecx
    f363:	89 c8                	mov    %ecx,%eax
    f365:	8b 54 24 04          	mov    0x4(%esp),%edx
    f369:	89 14 85 40 07 04 00 	mov    %edx,0x40740(,%eax,4)
	// 请注意当hash表某项第1次插入项时,hash()计算值肯定为NULL,因此此时hash(bh->b_dev,bh->b_blocknr)得到的bh->b_next肯定是NULL,
	// 所以bh->b_next->b_prev = bh应该在bh->b_next不为NULL时才能给b_pev赋bh值.即bh->b_next->b_prev = bh前应该增加判断"
	// if(bh->b_next)".该错误到0.96版后才被纠正.
	if(bh->b_next)
    f370:	8b 44 24 04          	mov    0x4(%esp),%eax
    f374:	8b 40 18             	mov    0x18(%eax),%eax
    f377:	85 c0                	test   %eax,%eax
    f379:	74 11                	je     f38c <insert_into_queues+0xef>
		bh->b_next->b_prev = bh;			// 此句前应添加"if(bh->b_next)"判断.
    f37b:	8b 44 24 04          	mov    0x4(%esp),%eax
    f37f:	8b 40 18             	mov    0x18(%eax),%eax
    f382:	8b 54 24 04          	mov    0x4(%esp),%edx
    f386:	89 50 14             	mov    %edx,0x14(%eax)
    f389:	eb 01                	jmp    f38c <insert_into_queues+0xef>
	/* put the buffer in new hash-queue if it has a device */
	/* 如果该缓冲块对应一个设备,则将其插入新hash队列中 */
	bh->b_prev = NULL;
	bh->b_next = NULL;
	if (!bh->b_dev)
		return;
    f38b:	90                   	nop
	// 请注意当hash表某项第1次插入项时,hash()计算值肯定为NULL,因此此时hash(bh->b_dev,bh->b_blocknr)得到的bh->b_next肯定是NULL,
	// 所以bh->b_next->b_prev = bh应该在bh->b_next不为NULL时才能给b_pev赋bh值.即bh->b_next->b_prev = bh前应该增加判断"
	// if(bh->b_next)".该错误到0.96版后才被纠正.
	if(bh->b_next)
		bh->b_next->b_prev = bh;			// 此句前应添加"if(bh->b_next)"判断.
}
    f38c:	c3                   	ret    

0000f38d <find_buffer>:

// 利用hash表在高速缓冲中寻找给定设备和指定块号的缓冲区块.
// 如果找到则返回缓冲区块的指针,否则返回NULL.
static struct buffer_head * find_buffer(int dev, int block)
{
    f38d:	83 ec 10             	sub    $0x10,%esp
	struct buffer_head * tmp;

	// 搜索hash表,寻找指定设备与和块号的缓冲块.
	for (tmp = hash(dev, block) ; tmp != NULL ; tmp = tmp->b_next)
    f390:	8b 44 24 14          	mov    0x14(%esp),%eax
    f394:	33 44 24 18          	xor    0x18(%esp),%eax
    f398:	89 c1                	mov    %eax,%ecx
    f39a:	ba 7d e9 78 d5       	mov    $0xd578e97d,%edx
    f39f:	89 c8                	mov    %ecx,%eax
    f3a1:	f7 e2                	mul    %edx
    f3a3:	89 d0                	mov    %edx,%eax
    f3a5:	c1 e8 08             	shr    $0x8,%eax
    f3a8:	69 c0 33 01 00 00    	imul   $0x133,%eax,%eax
    f3ae:	29 c1                	sub    %eax,%ecx
    f3b0:	89 c8                	mov    %ecx,%eax
    f3b2:	8b 04 85 40 07 04 00 	mov    0x40740(,%eax,4),%eax
    f3b9:	89 44 24 0c          	mov    %eax,0xc(%esp)
    f3bd:	eb 31                	jmp    f3f0 <find_buffer+0x63>
		if (tmp->b_dev == dev && tmp->b_blocknr == block)
    f3bf:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f3c3:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f3c7:	0f b7 c0             	movzwl %ax,%eax
    f3ca:	3b 44 24 14          	cmp    0x14(%esp),%eax
    f3ce:	75 15                	jne    f3e5 <find_buffer+0x58>
    f3d0:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f3d4:	8b 50 04             	mov    0x4(%eax),%edx
    f3d7:	8b 44 24 18          	mov    0x18(%esp),%eax
    f3db:	39 c2                	cmp    %eax,%edx
    f3dd:	75 06                	jne    f3e5 <find_buffer+0x58>
			return tmp;
    f3df:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f3e3:	eb 17                	jmp    f3fc <find_buffer+0x6f>
static struct buffer_head * find_buffer(int dev, int block)
{
	struct buffer_head * tmp;

	// 搜索hash表,寻找指定设备与和块号的缓冲块.
	for (tmp = hash(dev, block) ; tmp != NULL ; tmp = tmp->b_next)
    f3e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f3e9:	8b 40 18             	mov    0x18(%eax),%eax
    f3ec:	89 44 24 0c          	mov    %eax,0xc(%esp)
    f3f0:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    f3f5:	75 c8                	jne    f3bf <find_buffer+0x32>
		if (tmp->b_dev == dev && tmp->b_blocknr == block)
			return tmp;
	return NULL;
    f3f7:	b8 00 00 00 00       	mov    $0x0,%eax
}
    f3fc:	83 c4 10             	add    $0x10,%esp
    f3ff:	c3                   	ret    

0000f400 <get_hash_table>:
 * 代码为什么会是这样子的?我听见你问......原因是竞争条件.由于我们没有对缓冲块上锁(除非我们正在读取它们的数据),那么当我们(进程)睡眠时缓冲块可能
 * 发生一些问题(例如一个读错误将导致该缓冲块出错).目前这种情况实际上是不会发生的,但处理的代码已经准备好了.
 */
// 利用hash表在高速缓冲区中寻找指定的缓冲块.若找到则对该缓冲块上锁并返回块头指针.
struct buffer_head * get_hash_table(int dev, int block)
{
    f400:	83 ec 1c             	sub    $0x1c,%esp
	struct buffer_head * bh;

	for (;;) {
		// 在高速缓冲中寻找给定设备和指定块的缓冲区块,如果没有找到则返回NULL,退出.
		if (!(bh = find_buffer(dev, block)))
    f403:	ff 74 24 24          	pushl  0x24(%esp)
    f407:	ff 74 24 24          	pushl  0x24(%esp)
    f40b:	e8 7d ff ff ff       	call   f38d <find_buffer>
    f410:	83 c4 08             	add    $0x8,%esp
    f413:	89 44 24 0c          	mov    %eax,0xc(%esp)
    f417:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    f41c:	75 07                	jne    f425 <get_hash_table+0x25>
			return NULL;
    f41e:	b8 00 00 00 00       	mov    $0x0,%eax
    f423:	eb 5b                	jmp    f480 <get_hash_table+0x80>
		// 对该缓冲块增加引用计数,并等待该缓冲块解锁(如果已被上锁).由于经过了睡眠状态,因此有必要再验证该缓冲块的正确性,并返回缓冲块头指针.
		bh->b_count++;
    f425:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f429:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
    f42d:	8d 50 01             	lea    0x1(%eax),%edx
    f430:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f434:	88 50 0c             	mov    %dl,0xc(%eax)
		wait_on_buffer(bh);
    f437:	83 ec 0c             	sub    $0xc,%esp
    f43a:	ff 74 24 18          	pushl  0x18(%esp)
    f43e:	e8 98 fa ff ff       	call   eedb <wait_on_buffer>
    f443:	83 c4 10             	add    $0x10,%esp
		if (bh->b_dev == dev && bh->b_blocknr == block)
    f446:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f44a:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f44e:	0f b7 c0             	movzwl %ax,%eax
    f451:	3b 44 24 20          	cmp    0x20(%esp),%eax
    f455:	75 15                	jne    f46c <get_hash_table+0x6c>
    f457:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f45b:	8b 50 04             	mov    0x4(%eax),%edx
    f45e:	8b 44 24 24          	mov    0x24(%esp),%eax
    f462:	39 c2                	cmp    %eax,%edx
    f464:	75 06                	jne    f46c <get_hash_table+0x6c>
			return bh;
    f466:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f46a:	eb 14                	jmp    f480 <get_hash_table+0x80>
		// 如果在睡眠时该缓冲块所属的设备号或块号发生的改变,则撤消对它的用计数.重新寻找.
		bh->b_count--;
    f46c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f470:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
    f474:	8d 50 ff             	lea    -0x1(%eax),%edx
    f477:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f47b:	88 50 0c             	mov    %dl,0xc(%eax)
	}
    f47e:	eb 83                	jmp    f403 <get_hash_table+0x3>
}
    f480:	83 c4 1c             	add    $0x1c,%esp
    f483:	c3                   	ret    

0000f484 <getblk>:
#define BADNESS(bh) (((bh)->b_dirt << 1) + (bh)->b_lock)
// 取高速缓冲中指定的缓冲块.
// 检查指定(设备号和块号)的缓冲区是否已经在高速缓冲中.如果指定块已经在高速缓冲中,则返回对应缓冲区头指针退出;如果不在,就需要在高速中
// 中设置一个对应设备号和块号的新项.返回相应缓冲区头指针.
struct buffer_head * getblk(int dev, int block)
{
    f484:	83 ec 1c             	sub    $0x1c,%esp
	struct buffer_head * tmp, * bh;

repeat:
	if (bh = get_hash_table(dev, block))
    f487:	83 ec 08             	sub    $0x8,%esp
    f48a:	ff 74 24 2c          	pushl  0x2c(%esp)
    f48e:	ff 74 24 2c          	pushl  0x2c(%esp)
    f492:	e8 69 ff ff ff       	call   f400 <get_hash_table>
    f497:	83 c4 10             	add    $0x10,%esp
    f49a:	89 44 24 08          	mov    %eax,0x8(%esp)
    f49e:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    f4a3:	74 09                	je     f4ae <getblk+0x2a>
		return bh;
    f4a5:	8b 44 24 08          	mov    0x8(%esp),%eax
    f4a9:	e9 8b 01 00 00       	jmp    f639 <getblk+0x1b5>
	// 扫描空闲数据块链表,寻找空闲缓冲区.
	// 首先让tmp指向空闲链表的第一个空闲缓冲区头.
	tmp = free_list;
    f4ae:	a1 c4 10 03 00       	mov    0x310c4,%eax
    f4b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
	do {
		// 如果该缓冲区正在被使用(引用计数不等于0),则继续扫描下一项.对于b_count=0的块,即高速缓冲中当前没有引用的块不一定就是干净的(b_dirt=0)
		// 或没有锁定的(b_lock=0).因此,我们还是需要继续下面的判断和选择.例如当一个任务改写过一块内容后就释放了,于是该块b_count=0,但b_lock不等于0;
		// 当一个任务执行breada()预读几个块时,只要ll_rw_block()命令发出后,它就会递减b_count;但此时实际上硬盘访问操作可能还在进行,因此此时
		// b_lock=1,但b_count=0.
		if (tmp->b_count)
    f4b7:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f4bb:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
    f4bf:	84 c0                	test   %al,%al
    f4c1:	75 6a                	jne    f52d <getblk+0xa9>
			continue;
		// 如果缓冲头指针bh为空,或者tmp所指缓冲头的标志(修改,锁定)权重小于bh头标志的权重,则让bh指向tmp缓冲块头.如果该tmp缓冲块头表明缓冲
		// 块既没有修改也没有锁定标志置位,则说明已为指定设备上的块取得对应的高速缓冲块,则退出循环.否则我们就继续执行本循环,看看能否找到一个BADNESS()
		// 最小的缓冲块.
		if (!bh || BADNESS(tmp) < BADNESS(bh)) {
    f4c3:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    f4c8:	74 3a                	je     f504 <getblk+0x80>
    f4ca:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f4ce:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
    f4d2:	0f b6 c0             	movzbl %al,%eax
    f4d5:	8d 14 00             	lea    (%eax,%eax,1),%edx
    f4d8:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f4dc:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
    f4e0:	0f b6 c0             	movzbl %al,%eax
    f4e3:	01 c2                	add    %eax,%edx
    f4e5:	8b 44 24 08          	mov    0x8(%esp),%eax
    f4e9:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
    f4ed:	0f b6 c0             	movzbl %al,%eax
    f4f0:	8d 0c 00             	lea    (%eax,%eax,1),%ecx
    f4f3:	8b 44 24 08          	mov    0x8(%esp),%eax
    f4f7:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
    f4fb:	0f b6 c0             	movzbl %al,%eax
    f4fe:	01 c8                	add    %ecx,%eax
    f500:	39 c2                	cmp    %eax,%edx
    f502:	7d 2a                	jge    f52e <getblk+0xaa>
			bh = tmp;
    f504:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f508:	89 44 24 08          	mov    %eax,0x8(%esp)
			if (!BADNESS(tmp))
    f50c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f510:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
    f514:	0f b6 c0             	movzbl %al,%eax
    f517:	8d 14 00             	lea    (%eax,%eax,1),%edx
    f51a:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f51e:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
    f522:	0f b6 c0             	movzbl %al,%eax
    f525:	01 d0                	add    %edx,%eax
    f527:	85 c0                	test   %eax,%eax
    f529:	74 1f                	je     f54a <getblk+0xc6>
    f52b:	eb 01                	jmp    f52e <getblk+0xaa>
		// 如果该缓冲区正在被使用(引用计数不等于0),则继续扫描下一项.对于b_count=0的块,即高速缓冲中当前没有引用的块不一定就是干净的(b_dirt=0)
		// 或没有锁定的(b_lock=0).因此,我们还是需要继续下面的判断和选择.例如当一个任务改写过一块内容后就释放了,于是该块b_count=0,但b_lock不等于0;
		// 当一个任务执行breada()预读几个块时,只要ll_rw_block()命令发出后,它就会递减b_count;但此时实际上硬盘访问操作可能还在进行,因此此时
		// b_lock=1,但b_count=0.
		if (tmp->b_count)
			continue;
    f52d:	90                   	nop
			bh = tmp;
			if (!BADNESS(tmp))
				break;
		}
	/* and repeat until we find something good */	/* 重复操作直到找到适合的缓冲块 */
	} while ((tmp = tmp->b_next_free) != free_list);
    f52e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f532:	8b 40 20             	mov    0x20(%eax),%eax
    f535:	89 44 24 0c          	mov    %eax,0xc(%esp)
    f539:	a1 c4 10 03 00       	mov    0x310c4,%eax
    f53e:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    f542:	0f 85 6f ff ff ff    	jne    f4b7 <getblk+0x33>
    f548:	eb 01                	jmp    f54b <getblk+0xc7>
		// 块既没有修改也没有锁定标志置位,则说明已为指定设备上的块取得对应的高速缓冲块,则退出循环.否则我们就继续执行本循环,看看能否找到一个BADNESS()
		// 最小的缓冲块.
		if (!bh || BADNESS(tmp) < BADNESS(bh)) {
			bh = tmp;
			if (!BADNESS(tmp))
				break;
    f54a:	90                   	nop
		}
	/* and repeat until we find something good */	/* 重复操作直到找到适合的缓冲块 */
	} while ((tmp = tmp->b_next_free) != free_list);
	// 如果循环检查发现所有缓冲块都正在被使用(所有缓冲块的状况引用计数者>0)中,则睡眠等待有空闲缓冲区可用.当有空闲缓冲块可用时本各会被明确地唤醒.然后
	// 我们就跳转到函数开始处重新查找空闲缓冲块.
	if (!bh) {
    f54b:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    f550:	75 15                	jne    f567 <getblk+0xe3>
		sleep_on(&buffer_wait);
    f552:	83 ec 0c             	sub    $0xc,%esp
    f555:	68 c8 10 03 00       	push   $0x310c8
    f55a:	e8 d7 7b ff ff       	call   7136 <sleep_on>
    f55f:	83 c4 10             	add    $0x10,%esp
		goto repeat;
    f562:	e9 20 ff ff ff       	jmp    f487 <getblk+0x3>
	}
	// 执行到这里,说明我们已经找到了一个比较适合的空闲缓冲块了.于是先等待该缓冲区解锁(如果已被上锁的话).如果在我们睡眠阶段该缓冲区又被其他任务使用的话,
	// 只好重复上述寻找过程.
	wait_on_buffer(bh);
    f567:	83 ec 0c             	sub    $0xc,%esp
    f56a:	ff 74 24 14          	pushl  0x14(%esp)
    f56e:	e8 68 f9 ff ff       	call   eedb <wait_on_buffer>
    f573:	83 c4 10             	add    $0x10,%esp
	if (bh->b_count)	// 又被占用??
    f576:	8b 44 24 08          	mov    0x8(%esp),%eax
    f57a:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
    f57e:	84 c0                	test   %al,%al
    f580:	74 3c                	je     f5be <getblk+0x13a>
		goto repeat;
    f582:	e9 00 ff ff ff       	jmp    f487 <getblk+0x3>
	// 如果该缓冲区已被修改,则将数据写盘,并再次等待缓冲区解锁.同样地,若该缓冲区又被其他任务使用的话,只好再重复上述寻找过程.
	while (bh->b_dirt) {
		sync_dev(bh->b_dev);
    f587:	8b 44 24 08          	mov    0x8(%esp),%eax
    f58b:	0f b7 40 08          	movzwl 0x8(%eax),%eax
    f58f:	0f b7 c0             	movzwl %ax,%eax
    f592:	83 ec 0c             	sub    $0xc,%esp
    f595:	50                   	push   %eax
    f596:	e8 d0 f9 ff ff       	call   ef6b <sync_dev>
    f59b:	83 c4 10             	add    $0x10,%esp
		wait_on_buffer(bh);
    f59e:	83 ec 0c             	sub    $0xc,%esp
    f5a1:	ff 74 24 14          	pushl  0x14(%esp)
    f5a5:	e8 31 f9 ff ff       	call   eedb <wait_on_buffer>
    f5aa:	83 c4 10             	add    $0x10,%esp
		if (bh->b_count)	// 又被占用??
    f5ad:	8b 44 24 08          	mov    0x8(%esp),%eax
    f5b1:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
    f5b5:	84 c0                	test   %al,%al
    f5b7:	74 05                	je     f5be <getblk+0x13a>
			goto repeat;
    f5b9:	e9 c9 fe ff ff       	jmp    f487 <getblk+0x3>
	// 只好重复上述寻找过程.
	wait_on_buffer(bh);
	if (bh->b_count)	// 又被占用??
		goto repeat;
	// 如果该缓冲区已被修改,则将数据写盘,并再次等待缓冲区解锁.同样地,若该缓冲区又被其他任务使用的话,只好再重复上述寻找过程.
	while (bh->b_dirt) {
    f5be:	8b 44 24 08          	mov    0x8(%esp),%eax
    f5c2:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
    f5c6:	84 c0                	test   %al,%al
    f5c8:	75 bd                	jne    f587 <getblk+0x103>
	}
	/* NOTE!! While we slept waiting for this block, somebody else might */
	/* already have added "this" block to the cache. check it */
	/* 注意!!当进程为了等待该缓冲块而睡眠时,其他进程可能已经将该缓冲块加入进高速缓冲中,所以我们也要对此进行检查. */
	// 在高速缓冲hash表中检查指定设备和块的缓冲块是否乘我们睡眠之即已经被加入进去.如果是的话就再次重复上述寻找过程.
	if (find_buffer(dev, block))
    f5ca:	83 ec 08             	sub    $0x8,%esp
    f5cd:	ff 74 24 2c          	pushl  0x2c(%esp)
    f5d1:	ff 74 24 2c          	pushl  0x2c(%esp)
    f5d5:	e8 b3 fd ff ff       	call   f38d <find_buffer>
    f5da:	83 c4 10             	add    $0x10,%esp
    f5dd:	85 c0                	test   %eax,%eax
    f5df:	74 05                	je     f5e6 <getblk+0x162>
		goto repeat;
    f5e1:	e9 a1 fe ff ff       	jmp    f487 <getblk+0x3>
	/* OK, FINALLY we know that this buffer is the only one of it's kind, */
	/* and that it's unused (b_count=0), unlocked (b_lock=0), and clean */
	/* OK,最终我们知道该缓冲块是指定参数的唯一一块,而且目前还没有被占用 */
	/* (b_count=0),也未被上锁(b_lock=0),并且是干净的(未被修改的) */
	// 于是让我们占用此缓冲块.置引用计数为1,复位修改标志和有效(更新)标志.
	bh->b_count = 1;
    f5e6:	8b 44 24 08          	mov    0x8(%esp),%eax
    f5ea:	c6 40 0c 01          	movb   $0x1,0xc(%eax)
	bh->b_dirt = 0;
    f5ee:	8b 44 24 08          	mov    0x8(%esp),%eax
    f5f2:	c6 40 0b 00          	movb   $0x0,0xb(%eax)
	bh->b_uptodate = 0;
    f5f6:	8b 44 24 08          	mov    0x8(%esp),%eax
    f5fa:	c6 40 0a 00          	movb   $0x0,0xa(%eax)
	// 从hash队列和空闲块链表中移出该缓冲头,让该缓冲区用于指定设备和其上的指定块.然后根据此新设备号和块号重新插入空闲链表和hash队列新位置处.并最终返回缓冲
	// 头指针.
	remove_from_queues(bh);
    f5fe:	83 ec 0c             	sub    $0xc,%esp
    f601:	ff 74 24 14          	pushl  0x14(%esp)
    f605:	e8 7d fb ff ff       	call   f187 <remove_from_queues>
    f60a:	83 c4 10             	add    $0x10,%esp
	bh->b_dev = dev;
    f60d:	8b 44 24 20          	mov    0x20(%esp),%eax
    f611:	89 c2                	mov    %eax,%edx
    f613:	8b 44 24 08          	mov    0x8(%esp),%eax
    f617:	66 89 50 08          	mov    %dx,0x8(%eax)
	bh->b_blocknr = block;
    f61b:	8b 54 24 24          	mov    0x24(%esp),%edx
    f61f:	8b 44 24 08          	mov    0x8(%esp),%eax
    f623:	89 50 04             	mov    %edx,0x4(%eax)
	insert_into_queues(bh);
    f626:	83 ec 0c             	sub    $0xc,%esp
    f629:	ff 74 24 14          	pushl  0x14(%esp)
    f62d:	e8 6b fc ff ff       	call   f29d <insert_into_queues>
    f632:	83 c4 10             	add    $0x10,%esp
	return bh;
    f635:	8b 44 24 08          	mov    0x8(%esp),%eax
}
    f639:	83 c4 1c             	add    $0x1c,%esp
    f63c:	c3                   	ret    

0000f63d <brelse>:

// 释放指定缓冲块.
// 等待该缓冲块解锁.然后引用计数递减1,并明确地唤醒等待空闲缓冲块的进程.
void brelse(struct buffer_head * buf)
{
    f63d:	83 ec 0c             	sub    $0xc,%esp
	if (!buf)						// 如果缓冲头指针无效则返回.
    f640:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
    f645:	74 47                	je     f68e <brelse+0x51>
		return;
	wait_on_buffer(buf);
    f647:	83 ec 0c             	sub    $0xc,%esp
    f64a:	ff 74 24 1c          	pushl  0x1c(%esp)
    f64e:	e8 88 f8 ff ff       	call   eedb <wait_on_buffer>
    f653:	83 c4 10             	add    $0x10,%esp
	if (!(buf->b_count--))
    f656:	8b 44 24 10          	mov    0x10(%esp),%eax
    f65a:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
    f65e:	8d 50 ff             	lea    -0x1(%eax),%edx
    f661:	8b 4c 24 10          	mov    0x10(%esp),%ecx
    f665:	88 51 0c             	mov    %dl,0xc(%ecx)
    f668:	84 c0                	test   %al,%al
    f66a:	75 10                	jne    f67c <brelse+0x3f>
		panic("Trying to free free buffer");
    f66c:	83 ec 0c             	sub    $0xc,%esp
    f66f:	68 d3 38 02 00       	push   $0x238d3
    f674:	e8 8f 95 ff ff       	call   8c08 <panic>
    f679:	83 c4 10             	add    $0x10,%esp
	wake_up(&buffer_wait);
    f67c:	83 ec 0c             	sub    $0xc,%esp
    f67f:	68 c8 10 03 00       	push   $0x310c8
    f684:	e8 c6 7a ff ff       	call   714f <wake_up>
    f689:	83 c4 10             	add    $0x10,%esp
    f68c:	eb 01                	jmp    f68f <brelse+0x52>
// 释放指定缓冲块.
// 等待该缓冲块解锁.然后引用计数递减1,并明确地唤醒等待空闲缓冲块的进程.
void brelse(struct buffer_head * buf)
{
	if (!buf)						// 如果缓冲头指针无效则返回.
		return;
    f68e:	90                   	nop
	wait_on_buffer(buf);
	if (!(buf->b_count--))
		panic("Trying to free free buffer");
	wake_up(&buffer_wait);
}
    f68f:	83 c4 0c             	add    $0xc,%esp
    f692:	c3                   	ret    

0000f693 <bread>:
 */
// 从设备上读取数据块.
// 该函数根据指定的设备号dev和数据块号block,首先在高速缓冲区中申请一块缓冲块.如果该缓冲块中经包含有有效的数据就直接返回该缓冲块指针,否则就从设备中
// 读取指定的数据块到该缓冲块中并返回缓冲块指针.
struct buffer_head * bread(int dev, int block)
{
    f693:	83 ec 1c             	sub    $0x1c,%esp
	struct buffer_head * bh;

	// 从高速缓冲区中申请一块缓冲块.如果返回值是NULL,则表示内核出错,停机.否则我们判断其中是否已有可用数据.
	if (!(bh = getblk(dev, block)))
    f696:	83 ec 08             	sub    $0x8,%esp
    f699:	ff 74 24 2c          	pushl  0x2c(%esp)
    f69d:	ff 74 24 2c          	pushl  0x2c(%esp)
    f6a1:	e8 de fd ff ff       	call   f484 <getblk>
    f6a6:	83 c4 10             	add    $0x10,%esp
    f6a9:	89 44 24 0c          	mov    %eax,0xc(%esp)
    f6ad:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    f6b2:	75 10                	jne    f6c4 <bread+0x31>
		panic("bread: getblk returned NULL\n");
    f6b4:	83 ec 0c             	sub    $0xc,%esp
    f6b7:	68 ee 38 02 00       	push   $0x238ee
    f6bc:	e8 47 95 ff ff       	call   8c08 <panic>
    f6c1:	83 c4 10             	add    $0x10,%esp
	// 如果该缓冲块中数据是有效的(已更新的)可以直接使用,则返回.
	if (bh->b_uptodate)
    f6c4:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f6c8:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
    f6cc:	84 c0                	test   %al,%al
    f6ce:	74 06                	je     f6d6 <bread+0x43>
		return bh;
    f6d0:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f6d4:	eb 46                	jmp    f71c <bread+0x89>
	// 否则我们就调用底层块设备读写ll_rw_block()函数,产生读设备块请求.然后等待指定数据块被读入,并等待缓冲区解锁.在睡眠醒来之后,如果该缓冲区已更新,则返回
	// 缓冲区头指针,退出.否则表明读设备操作失败,于是释放该缓冲区,返回NULL,退出.
	ll_rw_block(READ, bh);
    f6d6:	83 ec 08             	sub    $0x8,%esp
    f6d9:	ff 74 24 14          	pushl  0x14(%esp)
    f6dd:	6a 00                	push   $0x0
    f6df:	e8 24 72 00 00       	call   16908 <ll_rw_block>
    f6e4:	83 c4 10             	add    $0x10,%esp
	wait_on_buffer(bh);
    f6e7:	83 ec 0c             	sub    $0xc,%esp
    f6ea:	ff 74 24 18          	pushl  0x18(%esp)
    f6ee:	e8 e8 f7 ff ff       	call   eedb <wait_on_buffer>
    f6f3:	83 c4 10             	add    $0x10,%esp
	if (bh->b_uptodate)
    f6f6:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f6fa:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
    f6fe:	84 c0                	test   %al,%al
    f700:	74 06                	je     f708 <bread+0x75>
		return bh;
    f702:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f706:	eb 14                	jmp    f71c <bread+0x89>
	brelse(bh);
    f708:	83 ec 0c             	sub    $0xc,%esp
    f70b:	ff 74 24 18          	pushl  0x18(%esp)
    f70f:	e8 29 ff ff ff       	call   f63d <brelse>
    f714:	83 c4 10             	add    $0x10,%esp
	return NULL;
    f717:	b8 00 00 00 00       	mov    $0x0,%eax
}
    f71c:	83 c4 1c             	add    $0x1c,%esp
    f71f:	c3                   	ret    

0000f720 <bread_page>:
 */
// 读设备上一个页面(4个缓冲块)的内容到指定内存地址处.
// 参数address是保存页面数据的地址;dev是指定的设备号;b[4]是含有4个设备数据块号的数组.
// 该函数仅用于mm/memory.c文件的do_no_page()函数中.
void bread_page(unsigned long address, int dev, int b[4])
{
    f720:	57                   	push   %edi
    f721:	56                   	push   %esi
    f722:	53                   	push   %ebx
    f723:	83 ec 20             	sub    $0x20,%esp
	int i;

	// 该函数循环执行4次,根据放在数组b[]中的4个块号从设备dev中读取一页内容放到指定内存位置address处.对于参数b[i]给出的
	// 有效块号,函数首先从高速缓冲中取指定设备和块号的的缓冲块.如果缓冲块中数据无效(未更新)则产生读设备请求从设备上读取相
	// 应数据块.对于b[i]无效的块号则不用处理它了.因此本函数其实可以根据指定的b[]中的块号随意读取1-4个数据块.
	for (i = 0 ; i < 4 ; i++)
    f726:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
    f72d:	00 
    f72e:	e9 89 00 00 00       	jmp    f7bc <bread_page+0x9c>
		if (b[i]) {
    f733:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f737:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    f73e:	8b 44 24 38          	mov    0x38(%esp),%eax
    f742:	01 d0                	add    %edx,%eax
    f744:	8b 00                	mov    (%eax),%eax
    f746:	85 c0                	test   %eax,%eax
    f748:	74 61                	je     f7ab <bread_page+0x8b>
			// 先给该逻辑块号申请一个缓存块
			if (bh[i] = getblk(dev, b[i]))
    f74a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f74e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
    f755:	8b 44 24 38          	mov    0x38(%esp),%eax
    f759:	01 d0                	add    %edx,%eax
    f75b:	8b 00                	mov    (%eax),%eax
    f75d:	83 ec 08             	sub    $0x8,%esp
    f760:	50                   	push   %eax
    f761:	ff 74 24 40          	pushl  0x40(%esp)
    f765:	e8 1a fd ff ff       	call   f484 <getblk>
    f76a:	83 c4 10             	add    $0x10,%esp
    f76d:	89 c2                	mov    %eax,%edx
    f76f:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f773:	89 54 84 0c          	mov    %edx,0xc(%esp,%eax,4)
    f777:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f77b:	8b 44 84 0c          	mov    0xc(%esp,%eax,4),%eax
    f77f:	85 c0                	test   %eax,%eax
    f781:	74 34                	je     f7b7 <bread_page+0x97>
				// 如果该缓冲块没有更新,则从块设备中读取出来
				if (!bh[i]->b_uptodate)
    f783:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f787:	8b 44 84 0c          	mov    0xc(%esp,%eax,4),%eax
    f78b:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
    f78f:	84 c0                	test   %al,%al
    f791:	75 24                	jne    f7b7 <bread_page+0x97>
					ll_rw_block(READ, bh[i]);
    f793:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f797:	8b 44 84 0c          	mov    0xc(%esp,%eax,4),%eax
    f79b:	83 ec 08             	sub    $0x8,%esp
    f79e:	50                   	push   %eax
    f79f:	6a 00                	push   $0x0
    f7a1:	e8 62 71 00 00       	call   16908 <ll_rw_block>
    f7a6:	83 c4 10             	add    $0x10,%esp
    f7a9:	eb 0c                	jmp    f7b7 <bread_page+0x97>
		} else
			bh[i] = NULL;
    f7ab:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f7af:	c7 44 84 0c 00 00 00 	movl   $0x0,0xc(%esp,%eax,4)
    f7b6:	00 
	int i;

	// 该函数循环执行4次,根据放在数组b[]中的4个块号从设备dev中读取一页内容放到指定内存位置address处.对于参数b[i]给出的
	// 有效块号,函数首先从高速缓冲中取指定设备和块号的的缓冲块.如果缓冲块中数据无效(未更新)则产生读设备请求从设备上读取相
	// 应数据块.对于b[i]无效的块号则不用处理它了.因此本函数其实可以根据指定的b[]中的块号随意读取1-4个数据块.
	for (i = 0 ; i < 4 ; i++)
    f7b7:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
    f7bc:	83 7c 24 1c 03       	cmpl   $0x3,0x1c(%esp)
    f7c1:	0f 8e 6c ff ff ff    	jle    f733 <bread_page+0x13>
					ll_rw_block(READ, bh[i]);
		} else
			bh[i] = NULL;
	// 随后将4个缓冲块上的内容顺序复制到指定地址处.在进行复制(使用)缓冲块之前我们先要睡眠等待缓冲块解锁(若被上锁的话).另外,
	// 因为可能睡眠过了,所以我们还需要在复制之前再检查一下缓冲块中的数据是否是有效的.复制完后我们还需要释放缓冲块.
	for (i = 0 ; i < 4 ; i++, address += BLOCK_SIZE)
    f7c7:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
    f7ce:	00 
    f7cf:	eb 73                	jmp    f844 <bread_page+0x124>
		if (bh[i]) {
    f7d1:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f7d5:	8b 44 84 0c          	mov    0xc(%esp,%eax,4),%eax
    f7d9:	85 c0                	test   %eax,%eax
    f7db:	74 5a                	je     f837 <bread_page+0x117>
			wait_on_buffer(bh[i]);						// 等待缓冲块解锁(若被上锁的话).
    f7dd:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f7e1:	8b 44 84 0c          	mov    0xc(%esp,%eax,4),%eax
    f7e5:	83 ec 0c             	sub    $0xc,%esp
    f7e8:	50                   	push   %eax
    f7e9:	e8 ed f6 ff ff       	call   eedb <wait_on_buffer>
    f7ee:	83 c4 10             	add    $0x10,%esp
			if (bh[i]->b_uptodate)						// 若缓冲块中数据有效的话则复制.
    f7f1:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f7f5:	8b 44 84 0c          	mov    0xc(%esp,%eax,4),%eax
    f7f9:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
    f7fd:	84 c0                	test   %al,%al
    f7ff:	74 22                	je     f823 <bread_page+0x103>
				COPYBLK((unsigned long) bh[i]->b_data, address);
    f801:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f805:	8b 44 84 0c          	mov    0xc(%esp,%eax,4),%eax
    f809:	8b 00                	mov    (%eax),%eax
    f80b:	89 c3                	mov    %eax,%ebx
    f80d:	ba 00 01 00 00       	mov    $0x100,%edx
    f812:	8b 44 24 30          	mov    0x30(%esp),%eax
    f816:	89 d1                	mov    %edx,%ecx
    f818:	89 de                	mov    %ebx,%esi
    f81a:	89 c7                	mov    %eax,%edi
    f81c:	fc                   	cld    
    f81d:	57                   	push   %edi
    f81e:	56                   	push   %esi
    f81f:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
    f821:	5e                   	pop    %esi
    f822:	5f                   	pop    %edi
			brelse(bh[i]);								// 释放该缓冲区.
    f823:	8b 44 24 1c          	mov    0x1c(%esp),%eax
    f827:	8b 44 84 0c          	mov    0xc(%esp,%eax,4),%eax
    f82b:	83 ec 0c             	sub    $0xc,%esp
    f82e:	50                   	push   %eax
    f82f:	e8 09 fe ff ff       	call   f63d <brelse>
    f834:	83 c4 10             	add    $0x10,%esp
					ll_rw_block(READ, bh[i]);
		} else
			bh[i] = NULL;
	// 随后将4个缓冲块上的内容顺序复制到指定地址处.在进行复制(使用)缓冲块之前我们先要睡眠等待缓冲块解锁(若被上锁的话).另外,
	// 因为可能睡眠过了,所以我们还需要在复制之前再检查一下缓冲块中的数据是否是有效的.复制完后我们还需要释放缓冲块.
	for (i = 0 ; i < 4 ; i++, address += BLOCK_SIZE)
    f837:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
    f83c:	81 44 24 30 00 04 00 	addl   $0x400,0x30(%esp)
    f843:	00 
    f844:	83 7c 24 1c 03       	cmpl   $0x3,0x1c(%esp)
    f849:	7e 86                	jle    f7d1 <bread_page+0xb1>
			wait_on_buffer(bh[i]);						// 等待缓冲块解锁(若被上锁的话).
			if (bh[i]->b_uptodate)						// 若缓冲块中数据有效的话则复制.
				COPYBLK((unsigned long) bh[i]->b_data, address);
			brelse(bh[i]);								// 释放该缓冲区.
		}
}
    f84b:	90                   	nop
    f84c:	83 c4 20             	add    $0x20,%esp
    f84f:	5b                   	pop    %ebx
    f850:	5e                   	pop    %esi
    f851:	5f                   	pop    %edi
    f852:	c3                   	ret    

0000f853 <breada>:
 * OK,breada可以象bread一样使用,但会另外预读一些块.该函数参数列表需要使用一个负数来表明参数列表的结束.
 */
// 从指定设备读取指定的一些块.
// 函数参数个数可变,是一系列指定的块号.成功时返回第1块的缓冲块头指针,否则返回NULL.
struct buffer_head * breada(int dev, int first, ...)
{
    f853:	83 ec 1c             	sub    $0x1c,%esp
	va_list args;
	struct buffer_head * bh, *tmp;

	// 首先取可变参数表中第1个参数(块号).接着从调整缓冲区中取指定设备和块号的缓冲块.如果该缓冲块数据无效(更新标志未置位),则
	// 发出读设备数据块请求.
	va_start(args, first);
    f856:	8d 44 24 24          	lea    0x24(%esp),%eax
    f85a:	83 c0 04             	add    $0x4,%eax
    f85d:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if (!(bh = getblk(dev, first)))
    f861:	8b 44 24 24          	mov    0x24(%esp),%eax
    f865:	83 ec 08             	sub    $0x8,%esp
    f868:	50                   	push   %eax
    f869:	ff 74 24 2c          	pushl  0x2c(%esp)
    f86d:	e8 12 fc ff ff       	call   f484 <getblk>
    f872:	83 c4 10             	add    $0x10,%esp
    f875:	89 44 24 08          	mov    %eax,0x8(%esp)
    f879:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    f87e:	75 10                	jne    f890 <breada+0x3d>
		panic("bread: getblk returned NULL\n");
    f880:	83 ec 0c             	sub    $0xc,%esp
    f883:	68 ee 38 02 00       	push   $0x238ee
    f888:	e8 7b 93 ff ff       	call   8c08 <panic>
    f88d:	83 c4 10             	add    $0x10,%esp
	if (!bh->b_uptodate)
    f890:	8b 44 24 08          	mov    0x8(%esp),%eax
    f894:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
    f898:	84 c0                	test   %al,%al
    f89a:	75 61                	jne    f8fd <breada+0xaa>
		ll_rw_block(READ, bh);
    f89c:	83 ec 08             	sub    $0x8,%esp
    f89f:	ff 74 24 10          	pushl  0x10(%esp)
    f8a3:	6a 00                	push   $0x0
    f8a5:	e8 5e 70 00 00       	call   16908 <ll_rw_block>
    f8aa:	83 c4 10             	add    $0x10,%esp
	// 然后顺序取可变参数表中其他预读块号,并作与上面同样处理,但不引用.注意,336行上有一个bug.其中的bh应该是tmp.这个bug直到在0.96
	// 版的内核代码中才被纠正过来.另外,因为这里是预读随后的数据块,只需读进调整缓冲区但并不马上就使用,所以第337行语句需要将其引用计数
	// 递减释放掉该块(因为getblk()函数会增加缓冲块引用计数值).
	while ((first = va_arg(args, int)) >= 0) {
    f8ad:	eb 4e                	jmp    f8fd <breada+0xaa>
		tmp = getblk(dev, first);
    f8af:	8b 44 24 24          	mov    0x24(%esp),%eax
    f8b3:	83 ec 08             	sub    $0x8,%esp
    f8b6:	50                   	push   %eax
    f8b7:	ff 74 24 2c          	pushl  0x2c(%esp)
    f8bb:	e8 c4 fb ff ff       	call   f484 <getblk>
    f8c0:	83 c4 10             	add    $0x10,%esp
    f8c3:	89 44 24 04          	mov    %eax,0x4(%esp)
		if (tmp) {
    f8c7:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
    f8cc:	74 2f                	je     f8fd <breada+0xaa>
			if (!tmp->b_uptodate)
    f8ce:	8b 44 24 04          	mov    0x4(%esp),%eax
    f8d2:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
    f8d6:	84 c0                	test   %al,%al
    f8d8:	75 11                	jne    f8eb <breada+0x98>
				ll_rw_block(READA, tmp);
    f8da:	83 ec 08             	sub    $0x8,%esp
    f8dd:	ff 74 24 0c          	pushl  0xc(%esp)
    f8e1:	6a 02                	push   $0x2
    f8e3:	e8 20 70 00 00       	call   16908 <ll_rw_block>
    f8e8:	83 c4 10             	add    $0x10,%esp
			tmp->b_count--;					// 暂时释放掉该预读块.
    f8eb:	8b 44 24 04          	mov    0x4(%esp),%eax
    f8ef:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
    f8f3:	8d 50 ff             	lea    -0x1(%eax),%edx
    f8f6:	8b 44 24 04          	mov    0x4(%esp),%eax
    f8fa:	88 50 0c             	mov    %dl,0xc(%eax)
	if (!bh->b_uptodate)
		ll_rw_block(READ, bh);
	// 然后顺序取可变参数表中其他预读块号,并作与上面同样处理,但不引用.注意,336行上有一个bug.其中的bh应该是tmp.这个bug直到在0.96
	// 版的内核代码中才被纠正过来.另外,因为这里是预读随后的数据块,只需读进调整缓冲区但并不马上就使用,所以第337行语句需要将其引用计数
	// 递减释放掉该块(因为getblk()函数会增加缓冲块引用计数值).
	while ((first = va_arg(args, int)) >= 0) {
    f8fd:	83 44 24 0c 04       	addl   $0x4,0xc(%esp)
    f902:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f906:	8b 40 fc             	mov    -0x4(%eax),%eax
    f909:	89 44 24 24          	mov    %eax,0x24(%esp)
    f90d:	8b 44 24 24          	mov    0x24(%esp),%eax
    f911:	85 c0                	test   %eax,%eax
    f913:	79 9a                	jns    f8af <breada+0x5c>
		}
	}
	// 此时可变参数表中所有参数处理完毕.于是等待第1个缓冲区解锁(如果已被上锁).在等待退出之后如果缓冲区中数据仍然有效,则返回缓冲区头指针
	// 退出.否则释放该缓冲区返回NULL,退出.
	va_end(args);
	wait_on_buffer(bh);
    f915:	83 ec 0c             	sub    $0xc,%esp
    f918:	ff 74 24 14          	pushl  0x14(%esp)
    f91c:	e8 ba f5 ff ff       	call   eedb <wait_on_buffer>
    f921:	83 c4 10             	add    $0x10,%esp
	if (bh->b_uptodate)
    f924:	8b 44 24 08          	mov    0x8(%esp),%eax
    f928:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
    f92c:	84 c0                	test   %al,%al
    f92e:	74 06                	je     f936 <breada+0xe3>
		return bh;
    f930:	8b 44 24 08          	mov    0x8(%esp),%eax
    f934:	eb 14                	jmp    f94a <breada+0xf7>
	brelse(bh);
    f936:	83 ec 0c             	sub    $0xc,%esp
    f939:	ff 74 24 14          	pushl  0x14(%esp)
    f93d:	e8 fb fc ff ff       	call   f63d <brelse>
    f942:	83 c4 10             	add    $0x10,%esp
	return (NULL);
    f945:	b8 00 00 00 00       	mov    $0x0,%eax
}
    f94a:	83 c4 1c             	add    $0x1c,%esp
    f94d:	c3                   	ret    

0000f94e <buffer_init>:

// 缓冲区初始化函数
// 参数buffer_end是缓冲区内存末端.对于具有16M内存的系统,缓冲区末端被设置为4MB.对于有8MB内存的系统,缓冲区末端被设置2MB.该函数从缓冲区开始位置
// start_buffer处和缓冲区末端buffer_end处分别同时设置(初始化)缓冲块头结构和对应的数据块.直到缓冲区中所有内存被分配完毕.
void buffer_init(long buffer_end)
{
    f94e:	83 ec 10             	sub    $0x10,%esp
	struct buffer_head * h = start_buffer;
    f951:	a1 64 e3 02 00       	mov    0x2e364,%eax
    f956:	89 44 24 0c          	mov    %eax,0xc(%esp)
	void * b;
	int i;

	// 首先根据参数提供的缓冲区高端位置确定实际缓冲区高端位置b.如果缓冲区高端等于1MB,则因为从640KB-1MB被显示内存和BIOS占用,所以实际可用缓冲区内存
	// 高端位置应该是640KB.否则缓冲区内存高端一定大于1MB.
	if (buffer_end == 1 << 20)
    f95a:	81 7c 24 14 00 00 10 	cmpl   $0x100000,0x14(%esp)
    f961:	00 
    f962:	75 0d                	jne    f971 <buffer_init+0x23>
		b = (void *) (640 * 1024);
    f964:	c7 44 24 08 00 00 0a 	movl   $0xa0000,0x8(%esp)
    f96b:	00 
    f96c:	e9 a2 00 00 00       	jmp    fa13 <buffer_init+0xc5>
	else
		b = (void *) buffer_end;
    f971:	8b 44 24 14          	mov    0x14(%esp),%eax
    f975:	89 44 24 08          	mov    %eax,0x8(%esp)
	// 这段代码用于初始化缓冲区,建立空闲缓冲块循环链表,并获取系统中缓冲块数目.操作的过程是从缓冲区高端开始划分1KB大小的缓冲块,与此同时在缓冲区低端建立
	// 描述该缓冲块的结构buffer_head,并将这些buffer_head组成双向链表.
	// h是指向缓冲头结构的指针,而h+1是指向内存地址连续的下一个缓冲头地址,也可以说是指向h缓冲有头的末端外.为了保证有足够长度的内存来存储一个缓冲头结构,
	// 需要b所指向的内存块地址>=h缓冲头的末端,即要求>=h+1.
	while ( (b -= BLOCK_SIZE) >= ((void *) (h + 1)) ) {
    f979:	e9 95 00 00 00       	jmp    fa13 <buffer_init+0xc5>
		h->b_dev = 0;								// 使用该缓冲块的设备号.
    f97e:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f982:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		h->b_dirt = 0;								// 脏标志,即缓冲块修改标志.
    f988:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f98c:	c6 40 0b 00          	movb   $0x0,0xb(%eax)
		h->b_count = 0;								// 缓冲块引用计数.
    f990:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f994:	c6 40 0c 00          	movb   $0x0,0xc(%eax)
		h->b_lock = 0;								// 缓冲块锁定标志.
    f998:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f99c:	c6 40 0d 00          	movb   $0x0,0xd(%eax)
		h->b_uptodate = 0;							// 缓冲块更新标志(或称数据有效标志).
    f9a0:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f9a4:	c6 40 0a 00          	movb   $0x0,0xa(%eax)
		h->b_wait = NULL;							// 指向等待该缓冲块解锁的进程.
    f9a8:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f9ac:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
		h->b_next = NULL;							// 指向具有相同hash值的下一个缓冲头.
    f9b3:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f9b7:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
		h->b_prev = NULL;							// 指向具有相同hash值的前一个缓冲头.
    f9be:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f9c2:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)
		h->b_data = (char *) b;						// 指向对应缓冲块数据块(1024字节).
    f9c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f9cd:	8b 54 24 08          	mov    0x8(%esp),%edx
    f9d1:	89 10                	mov    %edx,(%eax)
		h->b_prev_free = h - 1;						// 指向链表中前一项.
    f9d3:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f9d7:	8d 50 dc             	lea    -0x24(%eax),%edx
    f9da:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f9de:	89 50 1c             	mov    %edx,0x1c(%eax)
		h->b_next_free = h + 1;						// 指向链表中下一项.
    f9e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f9e5:	8d 50 24             	lea    0x24(%eax),%edx
    f9e8:	8b 44 24 0c          	mov    0xc(%esp),%eax
    f9ec:	89 50 20             	mov    %edx,0x20(%eax)
		h++;										// h指向下一新缓冲头位置.
    f9ef:	83 44 24 0c 24       	addl   $0x24,0xc(%esp)
		NR_BUFFERS++;								// 缓冲区块数累加.
    f9f4:	a1 c0 10 03 00       	mov    0x310c0,%eax
    f9f9:	83 c0 01             	add    $0x1,%eax
    f9fc:	a3 c0 10 03 00       	mov    %eax,0x310c0
		if (b == (void *) 0x100000)					// 若b递减到等于1MB,则跳过384KB
    fa01:	81 7c 24 08 00 00 10 	cmpl   $0x100000,0x8(%esp)
    fa08:	00 
    fa09:	75 08                	jne    fa13 <buffer_init+0xc5>
			b = (void *) 0xA0000;					// 让b指向地址0xA0000(640KB)处.
    fa0b:	c7 44 24 08 00 00 0a 	movl   $0xa0000,0x8(%esp)
    fa12:	00 
		b = (void *) buffer_end;
	// 这段代码用于初始化缓冲区,建立空闲缓冲块循环链表,并获取系统中缓冲块数目.操作的过程是从缓冲区高端开始划分1KB大小的缓冲块,与此同时在缓冲区低端建立
	// 描述该缓冲块的结构buffer_head,并将这些buffer_head组成双向链表.
	// h是指向缓冲头结构的指针,而h+1是指向内存地址连续的下一个缓冲头地址,也可以说是指向h缓冲有头的末端外.为了保证有足够长度的内存来存储一个缓冲头结构,
	// 需要b所指向的内存块地址>=h缓冲头的末端,即要求>=h+1.
	while ( (b -= BLOCK_SIZE) >= ((void *) (h + 1)) ) {
    fa13:	81 6c 24 08 00 04 00 	subl   $0x400,0x8(%esp)
    fa1a:	00 
    fa1b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fa1f:	83 c0 24             	add    $0x24,%eax
    fa22:	39 44 24 08          	cmp    %eax,0x8(%esp)
    fa26:	0f 83 52 ff ff ff    	jae    f97e <buffer_init+0x30>
		h++;										// h指向下一新缓冲头位置.
		NR_BUFFERS++;								// 缓冲区块数累加.
		if (b == (void *) 0x100000)					// 若b递减到等于1MB,则跳过384KB
			b = (void *) 0xA0000;					// 让b指向地址0xA0000(640KB)处.
	}
	h--;											// 让h指向最后一个有效缓冲块头.
    fa2c:	83 6c 24 0c 24       	subl   $0x24,0xc(%esp)
	free_list = start_buffer;						// 让空闲链表头指向头一个缓冲块.
    fa31:	a1 64 e3 02 00       	mov    0x2e364,%eax
    fa36:	a3 c4 10 03 00       	mov    %eax,0x310c4
	free_list->b_prev_free = h;     				// 链表头的b_prev_free指向前一项（即最后一项）。
    fa3b:	a1 c4 10 03 00       	mov    0x310c4,%eax
    fa40:	8b 54 24 0c          	mov    0xc(%esp),%edx
    fa44:	89 50 1c             	mov    %edx,0x1c(%eax)
	h->b_next_free = free_list;     				// h的下一项指针指向第一项，形成一个环链。
    fa47:	8b 15 c4 10 03 00    	mov    0x310c4,%edx
    fa4d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fa51:	89 50 20             	mov    %edx,0x20(%eax)
	// 最后初始化hash表(哈希表、散列表),置表中所有指针为NULL。
	for (i = 0; i < NR_HASH; i++)
    fa54:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
    fa5b:	00 
    fa5c:	eb 14                	jmp    fa72 <buffer_init+0x124>
		hash_table[i] = NULL;
    fa5e:	8b 44 24 04          	mov    0x4(%esp),%eax
    fa62:	c7 04 85 40 07 04 00 	movl   $0x0,0x40740(,%eax,4)
    fa69:	00 00 00 00 
	h--;											// 让h指向最后一个有效缓冲块头.
	free_list = start_buffer;						// 让空闲链表头指向头一个缓冲块.
	free_list->b_prev_free = h;     				// 链表头的b_prev_free指向前一项（即最后一项）。
	h->b_next_free = free_list;     				// h的下一项指针指向第一项，形成一个环链。
	// 最后初始化hash表(哈希表、散列表),置表中所有指针为NULL。
	for (i = 0; i < NR_HASH; i++)
    fa6d:	83 44 24 04 01       	addl   $0x1,0x4(%esp)
    fa72:	81 7c 24 04 32 01 00 	cmpl   $0x132,0x4(%esp)
    fa79:	00 
    fa7a:	7e e2                	jle    fa5e <buffer_init+0x110>
		hash_table[i] = NULL;
}
    fa7c:	90                   	nop
    fa7d:	83 c4 10             	add    $0x10,%esp
    fa80:	c3                   	ret    

0000fa81 <lock_super>:
//　以下３个函数(lock_super(),free_super()和wait_on_super())的作用与inode.c文件中头３个函数的作用相同,只是这里操作的对象
//　换成了超级块.
//　锁定超级块.
//　如果超级块已被锁定,则将当前任务置为不可中断的等待状态,并添加到该超级块等待队列s_wait中.直到该超级块解锁并明确地唤醒本任务.然后对其上锁.
static void lock_super(struct super_block * sb)
{
    fa81:	83 ec 0c             	sub    $0xc,%esp
	cli();													//　关中断
    fa84:	fa                   	cli    
	while (sb->s_lock)										//　如果该超级块已经上锁,则睡眠等待.
    fa85:	eb 13                	jmp    fa9a <lock_super+0x19>
		sleep_on(&(sb->s_wait));
    fa87:	8b 44 24 10          	mov    0x10(%esp),%eax
    fa8b:	83 c0 64             	add    $0x64,%eax
    fa8e:	83 ec 0c             	sub    $0xc,%esp
    fa91:	50                   	push   %eax
    fa92:	e8 9f 76 ff ff       	call   7136 <sleep_on>
    fa97:	83 c4 10             	add    $0x10,%esp
//　锁定超级块.
//　如果超级块已被锁定,则将当前任务置为不可中断的等待状态,并添加到该超级块等待队列s_wait中.直到该超级块解锁并明确地唤醒本任务.然后对其上锁.
static void lock_super(struct super_block * sb)
{
	cli();													//　关中断
	while (sb->s_lock)										//　如果该超级块已经上锁,则睡眠等待.
    fa9a:	8b 44 24 10          	mov    0x10(%esp),%eax
    fa9e:	0f b6 40 68          	movzbl 0x68(%eax),%eax
    faa2:	84 c0                	test   %al,%al
    faa4:	75 e1                	jne    fa87 <lock_super+0x6>
		sleep_on(&(sb->s_wait));
	sb->s_lock = 1;											//　给该超级块加锁(置锁定标志)
    faa6:	8b 44 24 10          	mov    0x10(%esp),%eax
    faaa:	c6 40 68 01          	movb   $0x1,0x68(%eax)
	sti();													//　开中断.
    faae:	fb                   	sti    
}
    faaf:	90                   	nop
    fab0:	83 c4 0c             	add    $0xc,%esp
    fab3:	c3                   	ret    

0000fab4 <free_super>:

//　对指定超级块解锁
//　复位超级块的锁定标志,并明确地唤醒等待此超级块等待队列s_wait上的所有进程.
//　如果使用unlock_super这个名称则可能更妥帖.
static void free_super(struct super_block * sb)
{
    fab4:	83 ec 0c             	sub    $0xc,%esp
	cli();
    fab7:	fa                   	cli    
	sb->s_lock = 0;											// 复位锁定标志.
    fab8:	8b 44 24 10          	mov    0x10(%esp),%eax
    fabc:	c6 40 68 00          	movb   $0x0,0x68(%eax)
	wake_up(&(sb->s_wait));									// 唤醒等待该超级块的进程.
    fac0:	8b 44 24 10          	mov    0x10(%esp),%eax
    fac4:	83 c0 64             	add    $0x64,%eax
    fac7:	83 ec 0c             	sub    $0xc,%esp
    faca:	50                   	push   %eax
    facb:	e8 7f 76 ff ff       	call   714f <wake_up>
    fad0:	83 c4 10             	add    $0x10,%esp
	sti();													// wake_up()在kernel/sched.c
    fad3:	fb                   	sti    
}
    fad4:	90                   	nop
    fad5:	83 c4 0c             	add    $0xc,%esp
    fad8:	c3                   	ret    

0000fad9 <wait_on_super>:

// 睡眠等待超级块解锁.
// 如果超级块已被锁定,则将当前任务置为不可中断的等待状态,并添加到该超级块的等待队列s_wait中.直到该超级块解锁并明确地唤醒本任务.
static void wait_on_super(struct super_block * sb)
{
    fad9:	83 ec 0c             	sub    $0xc,%esp
	cli();
    fadc:	fa                   	cli    
	while (sb->s_lock)										// 如果超级块已经上锁,则睡眠等待.
    fadd:	eb 13                	jmp    faf2 <wait_on_super+0x19>
		sleep_on(&(sb->s_wait));
    fadf:	8b 44 24 10          	mov    0x10(%esp),%eax
    fae3:	83 c0 64             	add    $0x64,%eax
    fae6:	83 ec 0c             	sub    $0xc,%esp
    fae9:	50                   	push   %eax
    faea:	e8 47 76 ff ff       	call   7136 <sleep_on>
    faef:	83 c4 10             	add    $0x10,%esp
// 睡眠等待超级块解锁.
// 如果超级块已被锁定,则将当前任务置为不可中断的等待状态,并添加到该超级块的等待队列s_wait中.直到该超级块解锁并明确地唤醒本任务.
static void wait_on_super(struct super_block * sb)
{
	cli();
	while (sb->s_lock)										// 如果超级块已经上锁,则睡眠等待.
    faf2:	8b 44 24 10          	mov    0x10(%esp),%eax
    faf6:	0f b6 40 68          	movzbl 0x68(%eax),%eax
    fafa:	84 c0                	test   %al,%al
    fafc:	75 e1                	jne    fadf <wait_on_super+0x6>
		sleep_on(&(sb->s_wait));
	sti();
    fafe:	fb                   	sti    
}
    faff:	90                   	nop
    fb00:	83 c4 0c             	add    $0xc,%esp
    fb03:	c3                   	ret    

0000fb04 <get_super>:

// 取指定设备的超级块.
// 在超级块表(数组)中搜索指定设备dev的超级块结构信息.若找到则返回超级块的指针,否则返回空指针.
struct super_block * get_super(int dev)
{
    fb04:	83 ec 1c             	sub    $0x1c,%esp
	struct super_block * s;									// s是超级块数据结构指针.

	// 首先判断参数给出设备的有效性.若设备号为0则返回空指针.然后让s指向超级块数组起始处,开始搜索整个超级块数组,以寻找指定设备dev的超级块.
	// 第62行上的指针赋值语句"s = 0+super_block"等同于"s = super_block","s = &super_block[0]".
	if (!dev)
    fb07:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    fb0c:	75 07                	jne    fb15 <get_super+0x11>
		return NULL;
    fb0e:	b8 00 00 00 00       	mov    $0x0,%eax
    fb13:	eb 60                	jmp    fb75 <get_super+0x71>
	s = 0 + super_block;
    fb15:	c7 44 24 0c 20 0c 04 	movl   $0x40c20,0xc(%esp)
    fb1c:	00 
	while (s < NR_SUPER + super_block)
    fb1d:	eb 46                	jmp    fb65 <get_super+0x61>
		// 如果当前搜索项是指定设备的超级块,即该超级块的设备号字段值与函数参数指定的相同,则先等待该超级块解锁(若已被其他进程上锁的话).在等待期间,
		// 该超级块项有可能被其他设备使用,因此等待返回之后需再判断一次是否是指定设备的超级块,如果是则返回该超级块的指针.否则就重新对超级块数组再
		// 搜索一遍,因此此时s需重又指向超级块数组开始处.
		if (s->s_dev == dev) {
    fb1f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fb23:	0f b7 40 54          	movzwl 0x54(%eax),%eax
    fb27:	0f b7 c0             	movzwl %ax,%eax
    fb2a:	3b 44 24 20          	cmp    0x20(%esp),%eax
    fb2e:	75 30                	jne    fb60 <get_super+0x5c>
			wait_on_super(s);
    fb30:	83 ec 0c             	sub    $0xc,%esp
    fb33:	ff 74 24 18          	pushl  0x18(%esp)
    fb37:	e8 9d ff ff ff       	call   fad9 <wait_on_super>
    fb3c:	83 c4 10             	add    $0x10,%esp
			if (s->s_dev == dev)
    fb3f:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fb43:	0f b7 40 54          	movzwl 0x54(%eax),%eax
    fb47:	0f b7 c0             	movzwl %ax,%eax
    fb4a:	3b 44 24 20          	cmp    0x20(%esp),%eax
    fb4e:	75 06                	jne    fb56 <get_super+0x52>
				return s;
    fb50:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fb54:	eb 1f                	jmp    fb75 <get_super+0x71>
			s = 0 + super_block;
    fb56:	c7 44 24 0c 20 0c 04 	movl   $0x40c20,0xc(%esp)
    fb5d:	00 
    fb5e:	eb 05                	jmp    fb65 <get_super+0x61>
		// 如果当前搜索项不是,则检查下一项.如果没有找到指定的超级块,则返回空指针.
		} else
			s++;
    fb60:	83 44 24 0c 6c       	addl   $0x6c,0xc(%esp)
	// 首先判断参数给出设备的有效性.若设备号为0则返回空指针.然后让s指向超级块数组起始处,开始搜索整个超级块数组,以寻找指定设备dev的超级块.
	// 第62行上的指针赋值语句"s = 0+super_block"等同于"s = super_block","s = &super_block[0]".
	if (!dev)
		return NULL;
	s = 0 + super_block;
	while (s < NR_SUPER + super_block)
    fb65:	b8 80 0f 04 00       	mov    $0x40f80,%eax
    fb6a:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    fb6e:	72 af                	jb     fb1f <get_super+0x1b>
				return s;
			s = 0 + super_block;
		// 如果当前搜索项不是,则检查下一项.如果没有找到指定的超级块,则返回空指针.
		} else
			s++;
	return NULL;
    fb70:	b8 00 00 00 00       	mov    $0x0,%eax
}
    fb75:	83 c4 1c             	add    $0x1c,%esp
    fb78:	c3                   	ret    

0000fb79 <put_super>:

// 释放（放回）指定设备的超级块。
// 释放设备所使用的超级块数组项（置s_dev = 0），并释放该设备i节点位图和逻辑块位图所占用的高速缓冲块。如果超级块对应的
// 文件系统是根文件系统，或者其某个i节点上已经安装了其他的文件系统，则不能释放该超级块。
void put_super(int dev)
{
    fb79:	83 ec 1c             	sub    $0x1c,%esp

	// 首先判断参数的有效性和合法性。如果指定设备是根文件系统设备，则显示警告信息“根系统盘改变了，准备生死决战吧”，并返回。
	// 然后在超级块表中寻找指定设备号的文件系统超级块。如果找不到指定设备超级块，则返回。另外，如果该超级块指明该文件系统
	// 所安装到的i节点还没有被处理过，则显示警告信息并返回。在文件系统卸载（umount）操作中，s_imount会先被置成NULL以后
	// 才会调用本函数。
	if (dev == ROOT_DEV) {
    fb7c:	a1 cc 10 03 00       	mov    0x310cc,%eax
    fb81:	39 44 24 20          	cmp    %eax,0x20(%esp)
    fb85:	75 15                	jne    fb9c <put_super+0x23>
		printk("root diskette changed: prepare for armageddon\n\r");
    fb87:	83 ec 0c             	sub    $0xc,%esp
    fb8a:	68 0c 39 02 00       	push   $0x2390c
    fb8f:	e8 b3 90 ff ff       	call   8c47 <printk>
    fb94:	83 c4 10             	add    $0x10,%esp
		return;
    fb97:	e9 cc 00 00 00       	jmp    fc68 <put_super+0xef>
	}
	if (!(sb = get_super(dev)))
    fb9c:	83 ec 0c             	sub    $0xc,%esp
    fb9f:	ff 74 24 2c          	pushl  0x2c(%esp)
    fba3:	e8 5c ff ff ff       	call   fb04 <get_super>
    fba8:	83 c4 10             	add    $0x10,%esp
    fbab:	89 44 24 08          	mov    %eax,0x8(%esp)
    fbaf:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
    fbb4:	0f 84 ad 00 00 00    	je     fc67 <put_super+0xee>
		return;
	if (sb->s_imount) {
    fbba:	8b 44 24 08          	mov    0x8(%esp),%eax
    fbbe:	8b 40 5c             	mov    0x5c(%eax),%eax
    fbc1:	85 c0                	test   %eax,%eax
    fbc3:	74 15                	je     fbda <put_super+0x61>
		printk("Mounted disk changed - tssk, tssk\n\r");
    fbc5:	83 ec 0c             	sub    $0xc,%esp
    fbc8:	68 3c 39 02 00       	push   $0x2393c
    fbcd:	e8 75 90 ff ff       	call   8c47 <printk>
    fbd2:	83 c4 10             	add    $0x10,%esp
		return;
    fbd5:	e9 8e 00 00 00       	jmp    fc68 <put_super+0xef>
	}
	// 然后在找到指定设备的超级块之后，我们先锁定该超级块，再置该超级块对应的设备号字段s_dev为0，也即释放该设备上的文件系统
	// 超级块。然后释放该超级块占用的其他内核资源，即释放该设备上文件系统i节点位图和逻辑位图在缓冲区中所占用的缓冲块。下面
	// 常数符号I_MAP_SLOTS和Z_MAP_SLOTS均等于8，用于分别指明i节点位图和逻辑块位图占用的磁盘逻辑块数。注意，若这些缓冲块
	// 内容被修改过，则需要作同步操作才能把缓冲块中的数据写入设备中。函数最后对该超级块，并返回。
	lock_super(sb);
    fbda:	83 ec 0c             	sub    $0xc,%esp
    fbdd:	ff 74 24 14          	pushl  0x14(%esp)
    fbe1:	e8 9b fe ff ff       	call   fa81 <lock_super>
    fbe6:	83 c4 10             	add    $0x10,%esp
	sb->s_dev = 0;                          		// 置超级块空闲。
    fbe9:	8b 44 24 08          	mov    0x8(%esp),%eax
    fbed:	66 c7 40 54 00 00    	movw   $0x0,0x54(%eax)
	for(i = 0; i < I_MAP_SLOTS; i++)
    fbf3:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    fbfa:	00 
    fbfb:	eb 20                	jmp    fc1d <put_super+0xa4>
		brelse(sb->s_imap[i]);
    fbfd:	8b 44 24 08          	mov    0x8(%esp),%eax
    fc01:	8b 54 24 0c          	mov    0xc(%esp),%edx
    fc05:	83 c2 04             	add    $0x4,%edx
    fc08:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
    fc0c:	83 ec 0c             	sub    $0xc,%esp
    fc0f:	50                   	push   %eax
    fc10:	e8 28 fa ff ff       	call   f63d <brelse>
    fc15:	83 c4 10             	add    $0x10,%esp
	// 超级块。然后释放该超级块占用的其他内核资源，即释放该设备上文件系统i节点位图和逻辑位图在缓冲区中所占用的缓冲块。下面
	// 常数符号I_MAP_SLOTS和Z_MAP_SLOTS均等于8，用于分别指明i节点位图和逻辑块位图占用的磁盘逻辑块数。注意，若这些缓冲块
	// 内容被修改过，则需要作同步操作才能把缓冲块中的数据写入设备中。函数最后对该超级块，并返回。
	lock_super(sb);
	sb->s_dev = 0;                          		// 置超级块空闲。
	for(i = 0; i < I_MAP_SLOTS; i++)
    fc18:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    fc1d:	83 7c 24 0c 07       	cmpl   $0x7,0xc(%esp)
    fc22:	7e d9                	jle    fbfd <put_super+0x84>
		brelse(sb->s_imap[i]);
	for(i = 0; i < Z_MAP_SLOTS; i++)
    fc24:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
    fc2b:	00 
    fc2c:	eb 20                	jmp    fc4e <put_super+0xd5>
		brelse(sb->s_zmap[i]);
    fc2e:	8b 44 24 08          	mov    0x8(%esp),%eax
    fc32:	8b 54 24 0c          	mov    0xc(%esp),%edx
    fc36:	83 c2 0c             	add    $0xc,%edx
    fc39:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
    fc3d:	83 ec 0c             	sub    $0xc,%esp
    fc40:	50                   	push   %eax
    fc41:	e8 f7 f9 ff ff       	call   f63d <brelse>
    fc46:	83 c4 10             	add    $0x10,%esp
	// 内容被修改过，则需要作同步操作才能把缓冲块中的数据写入设备中。函数最后对该超级块，并返回。
	lock_super(sb);
	sb->s_dev = 0;                          		// 置超级块空闲。
	for(i = 0; i < I_MAP_SLOTS; i++)
		brelse(sb->s_imap[i]);
	for(i = 0; i < Z_MAP_SLOTS; i++)
    fc49:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
    fc4e:	83 7c 24 0c 07       	cmpl   $0x7,0xc(%esp)
    fc53:	7e d9                	jle    fc2e <put_super+0xb5>
		brelse(sb->s_zmap[i]);
	free_super(sb);
    fc55:	83 ec 0c             	sub    $0xc,%esp
    fc58:	ff 74 24 14          	pushl  0x14(%esp)
    fc5c:	e8 53 fe ff ff       	call   fab4 <free_super>
    fc61:	83 c4 10             	add    $0x10,%esp
	return;
    fc64:	90                   	nop
    fc65:	eb 01                	jmp    fc68 <put_super+0xef>
	if (dev == ROOT_DEV) {
		printk("root diskette changed: prepare for armageddon\n\r");
		return;
	}
	if (!(sb = get_super(dev)))
		return;
    fc67:	90                   	nop
		brelse(sb->s_imap[i]);
	for(i = 0; i < Z_MAP_SLOTS; i++)
		brelse(sb->s_zmap[i]);
	free_super(sb);
	return;
}
    fc68:	83 c4 1c             	add    $0x1c,%esp
    fc6b:	c3                   	ret    

0000fc6c <read_super>:

// 读取指定设备的超级块.
// 如果指定设备dev上的文件系统超级块已经在超级块表中,则直接返回该超级块项的指针.否则就从设备dev上读取超级块到缓冲块中,并复制到超级块表中.并
// 返回超级块指针.
static struct super_block * read_super(int dev)
{
    fc6c:	83 ec 1c             	sub    $0x1c,%esp
	struct buffer_head * bh;
	int i, block;

	// 首先判断参数的有效性.如果没有指明设备,则返回空指针.然后检查该设备是否可更换过盘片(也即是否是软盘设备).如果更换过盘,则高速缓冲区有关该设备的所有
	// 缓冲块均失效,需要进行失效处理,即释放原来加载的文件系统.
	if (!dev)
    fc6f:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
    fc74:	75 0a                	jne    fc80 <read_super+0x14>
		return NULL;
    fc76:	b8 00 00 00 00       	mov    $0x0,%eax
    fc7b:	e9 5a 03 00 00       	jmp    ffda <read_super+0x36e>
	check_disk_change(dev);
    fc80:	83 ec 0c             	sub    $0xc,%esp
    fc83:	ff 74 24 2c          	pushl  0x2c(%esp)
    fc87:	e8 5d f4 ff ff       	call   f0e9 <check_disk_change>
    fc8c:	83 c4 10             	add    $0x10,%esp
	// 如果设备的超级块已经在超级块表中,则直接返回该超级块的指针.否则,首先在超级块数组中找出一个空项(也即字段s_dev=0的项).如果数组已经占满则返回空指针.
	if (s = get_super(dev))
    fc8f:	83 ec 0c             	sub    $0xc,%esp
    fc92:	ff 74 24 2c          	pushl  0x2c(%esp)
    fc96:	e8 69 fe ff ff       	call   fb04 <get_super>
    fc9b:	83 c4 10             	add    $0x10,%esp
    fc9e:	89 44 24 0c          	mov    %eax,0xc(%esp)
    fca2:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    fca7:	74 09                	je     fcb2 <read_super+0x46>
		return s;
    fca9:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fcad:	e9 28 03 00 00       	jmp    ffda <read_super+0x36e>
	for (s = 0 + super_block ;; s++) {
    fcb2:	c7 44 24 0c 20 0c 04 	movl   $0x40c20,0xc(%esp)
    fcb9:	00 
		if (s >= NR_SUPER + super_block)
    fcba:	b8 80 0f 04 00       	mov    $0x40f80,%eax
    fcbf:	39 44 24 0c          	cmp    %eax,0xc(%esp)
    fcc3:	72 0a                	jb     fccf <read_super+0x63>
			return NULL;
    fcc5:	b8 00 00 00 00       	mov    $0x0,%eax
    fcca:	e9 0b 03 00 00       	jmp    ffda <read_super+0x36e>
		if (!s->s_dev)
    fccf:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fcd3:	0f b7 40 54          	movzwl 0x54(%eax),%eax
    fcd7:	66 85 c0             	test   %ax,%ax
    fcda:	74 07                	je     fce3 <read_super+0x77>
		return NULL;
	check_disk_change(dev);
	// 如果设备的超级块已经在超级块表中,则直接返回该超级块的指针.否则,首先在超级块数组中找出一个空项(也即字段s_dev=0的项).如果数组已经占满则返回空指针.
	if (s = get_super(dev))
		return s;
	for (s = 0 + super_block ;; s++) {
    fcdc:	83 44 24 0c 6c       	addl   $0x6c,0xc(%esp)
		if (s >= NR_SUPER + super_block)
			return NULL;
		if (!s->s_dev)
			break;
	}
    fce1:	eb d7                	jmp    fcba <read_super+0x4e>
		return s;
	for (s = 0 + super_block ;; s++) {
		if (s >= NR_SUPER + super_block)
			return NULL;
		if (!s->s_dev)
			break;
    fce3:	90                   	nop
	}
	// 在超级块数组中找到空项之后,就将该超级块项用于指定设备dev上的文件系统.于是对该超级块结构中的内存字段进行部分初始化处理.
	s->s_dev = dev;										// 用于dev设备上的文件系统.
    fce4:	8b 44 24 20          	mov    0x20(%esp),%eax
    fce8:	89 c2                	mov    %eax,%edx
    fcea:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fcee:	66 89 50 54          	mov    %dx,0x54(%eax)
	s->s_isup = NULL;
    fcf2:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fcf6:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)
	s->s_imount = NULL;
    fcfd:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fd01:	c7 40 5c 00 00 00 00 	movl   $0x0,0x5c(%eax)
	s->s_time = 0;
    fd08:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fd0c:	c7 40 60 00 00 00 00 	movl   $0x0,0x60(%eax)
	s->s_rd_only = 0;
    fd13:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fd17:	c6 40 69 00          	movb   $0x0,0x69(%eax)
	s->s_dirt = 0;
    fd1b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fd1f:	c6 40 6a 00          	movb   $0x0,0x6a(%eax)
	//　然后锁定该超级块,并从设备上读取超级块信息到bh指向的缓冲块中.超级块位于块设备的第２个逻辑块(１号块)中,(第１个是引导盘块).如果读超级块操作失败,则释放
	//　上面选定的超级块数组中的项(即置s_dev=0),并解锁该项,返回空指针退出.否则就将设备上读取的超级块信息从缓冲块数据区复制到超级块数组相应项结构中.并释放存放
	//　读取信息的高速缓冲块.
	lock_super(s);
    fd23:	83 ec 0c             	sub    $0xc,%esp
    fd26:	ff 74 24 18          	pushl  0x18(%esp)
    fd2a:	e8 52 fd ff ff       	call   fa81 <lock_super>
    fd2f:	83 c4 10             	add    $0x10,%esp
	if (!(bh = bread(dev, 1))) {
    fd32:	83 ec 08             	sub    $0x8,%esp
    fd35:	6a 01                	push   $0x1
    fd37:	ff 74 24 2c          	pushl  0x2c(%esp)
    fd3b:	e8 53 f9 ff ff       	call   f693 <bread>
    fd40:	83 c4 10             	add    $0x10,%esp
    fd43:	89 04 24             	mov    %eax,(%esp)
    fd46:	83 3c 24 00          	cmpl   $0x0,(%esp)
    fd4a:	75 23                	jne    fd6f <read_super+0x103>
		s->s_dev = 0;
    fd4c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fd50:	66 c7 40 54 00 00    	movw   $0x0,0x54(%eax)
		free_super(s);
    fd56:	83 ec 0c             	sub    $0xc,%esp
    fd59:	ff 74 24 18          	pushl  0x18(%esp)
    fd5d:	e8 52 fd ff ff       	call   fab4 <free_super>
    fd62:	83 c4 10             	add    $0x10,%esp
		return NULL;
    fd65:	b8 00 00 00 00       	mov    $0x0,%eax
    fd6a:	e9 6b 02 00 00       	jmp    ffda <read_super+0x36e>
	}
	*((struct d_super_block *) s) =
		*((struct d_super_block *) bh->b_data);
    fd6f:	8b 04 24             	mov    (%esp),%eax
    fd72:	8b 10                	mov    (%eax),%edx
	if (!(bh = bread(dev, 1))) {
		s->s_dev = 0;
		free_super(s);
		return NULL;
	}
	*((struct d_super_block *) s) =
    fd74:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fd78:	8b 0a                	mov    (%edx),%ecx
    fd7a:	89 08                	mov    %ecx,(%eax)
    fd7c:	8b 4a 04             	mov    0x4(%edx),%ecx
    fd7f:	89 48 04             	mov    %ecx,0x4(%eax)
    fd82:	8b 4a 08             	mov    0x8(%edx),%ecx
    fd85:	89 48 08             	mov    %ecx,0x8(%eax)
    fd88:	8b 4a 0c             	mov    0xc(%edx),%ecx
    fd8b:	89 48 0c             	mov    %ecx,0xc(%eax)
    fd8e:	8b 52 10             	mov    0x10(%edx),%edx
    fd91:	89 50 10             	mov    %edx,0x10(%eax)
		*((struct d_super_block *) bh->b_data);
	brelse(bh);
    fd94:	83 ec 0c             	sub    $0xc,%esp
    fd97:	ff 74 24 0c          	pushl  0xc(%esp)
    fd9b:	e8 9d f8 ff ff       	call   f63d <brelse>
    fda0:	83 c4 10             	add    $0x10,%esp
	// 现在我们从设备dev上得到了文件系统的超级块,于是开始检查这个超级块的有效性并从设备上读取i节点位图和逻辑块位图等信息.如果所读取的超级块的文件系统魔数字段不对,
	// 说明设备上不是正确的文件系统,因此向上面一样,释放上面选定的超级块数组中的项,并解锁该项,返回空指针退出.
	// 对于该版Linux内核,只支持MINIX文件系统1.0版本,其魔数是0x137f.
	if (s->s_magic != SUPER_MAGIC) {
    fda3:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fda7:	0f b7 40 10          	movzwl 0x10(%eax),%eax
    fdab:	66 3d 7f 13          	cmp    $0x137f,%ax
    fdaf:	74 23                	je     fdd4 <read_super+0x168>
		s->s_dev = 0;
    fdb1:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fdb5:	66 c7 40 54 00 00    	movw   $0x0,0x54(%eax)
		free_super(s);
    fdbb:	83 ec 0c             	sub    $0xc,%esp
    fdbe:	ff 74 24 18          	pushl  0x18(%esp)
    fdc2:	e8 ed fc ff ff       	call   fab4 <free_super>
    fdc7:	83 c4 10             	add    $0x10,%esp
		return NULL;
    fdca:	b8 00 00 00 00       	mov    $0x0,%eax
    fdcf:	e9 06 02 00 00       	jmp    ffda <read_super+0x36e>
	}
	// 下面开始读取设备上i节点位图和逻辑块位图数据.首先初始化内存超级块结构中位图空间.然后从设备上读取i节点位图和逻辑块位图信息,并存放在超级块对应字段中.i节点位图
	// 保存在设备上2号块开始的逻辑块中,共占用s_imap_blocks个块.逻辑块位图在i节点位图所在块的后续块中,共占用s_zmap_blocks个块.
	for (i = 0; i < I_MAP_SLOTS; i++)					// 初始化操作.
    fdd4:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    fddb:	00 
    fddc:	eb 18                	jmp    fdf6 <read_super+0x18a>
		s->s_imap[i] = NULL;
    fdde:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fde2:	8b 54 24 08          	mov    0x8(%esp),%edx
    fde6:	83 c2 04             	add    $0x4,%edx
    fde9:	c7 44 90 04 00 00 00 	movl   $0x0,0x4(%eax,%edx,4)
    fdf0:	00 
		free_super(s);
		return NULL;
	}
	// 下面开始读取设备上i节点位图和逻辑块位图数据.首先初始化内存超级块结构中位图空间.然后从设备上读取i节点位图和逻辑块位图信息,并存放在超级块对应字段中.i节点位图
	// 保存在设备上2号块开始的逻辑块中,共占用s_imap_blocks个块.逻辑块位图在i节点位图所在块的后续块中,共占用s_zmap_blocks个块.
	for (i = 0; i < I_MAP_SLOTS; i++)					// 初始化操作.
    fdf1:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    fdf6:	83 7c 24 08 07       	cmpl   $0x7,0x8(%esp)
    fdfb:	7e e1                	jle    fdde <read_super+0x172>
		s->s_imap[i] = NULL;
	for (i = 0; i < Z_MAP_SLOTS; i++)
    fdfd:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    fe04:	00 
    fe05:	eb 18                	jmp    fe1f <read_super+0x1b3>
		s->s_zmap[i] = NULL;
    fe07:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fe0b:	8b 54 24 08          	mov    0x8(%esp),%edx
    fe0f:	83 c2 0c             	add    $0xc,%edx
    fe12:	c7 44 90 04 00 00 00 	movl   $0x0,0x4(%eax,%edx,4)
    fe19:	00 
	}
	// 下面开始读取设备上i节点位图和逻辑块位图数据.首先初始化内存超级块结构中位图空间.然后从设备上读取i节点位图和逻辑块位图信息,并存放在超级块对应字段中.i节点位图
	// 保存在设备上2号块开始的逻辑块中,共占用s_imap_blocks个块.逻辑块位图在i节点位图所在块的后续块中,共占用s_zmap_blocks个块.
	for (i = 0; i < I_MAP_SLOTS; i++)					// 初始化操作.
		s->s_imap[i] = NULL;
	for (i = 0; i < Z_MAP_SLOTS; i++)
    fe1a:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    fe1f:	83 7c 24 08 07       	cmpl   $0x7,0x8(%esp)
    fe24:	7e e1                	jle    fe07 <read_super+0x19b>
		s->s_zmap[i] = NULL;
	block = 2;
    fe26:	c7 44 24 04 02 00 00 	movl   $0x2,0x4(%esp)
    fe2d:	00 
	// 从第二逻辑块号开始读取i节点位图
	for (i = 0 ; i < s->s_imap_blocks ; i++)			// 读取设备中i节点位图.
    fe2e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    fe35:	00 
    fe36:	eb 41                	jmp    fe79 <read_super+0x20d>
		if (s->s_imap[i] = bread(dev, block))
    fe38:	83 ec 08             	sub    $0x8,%esp
    fe3b:	ff 74 24 0c          	pushl  0xc(%esp)
    fe3f:	ff 74 24 2c          	pushl  0x2c(%esp)
    fe43:	e8 4b f8 ff ff       	call   f693 <bread>
    fe48:	83 c4 10             	add    $0x10,%esp
    fe4b:	89 c1                	mov    %eax,%ecx
    fe4d:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fe51:	8b 54 24 08          	mov    0x8(%esp),%edx
    fe55:	83 c2 04             	add    $0x4,%edx
    fe58:	89 4c 90 04          	mov    %ecx,0x4(%eax,%edx,4)
    fe5c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fe60:	8b 54 24 08          	mov    0x8(%esp),%edx
    fe64:	83 c2 04             	add    $0x4,%edx
    fe67:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
    fe6b:	85 c0                	test   %eax,%eax
    fe6d:	74 1d                	je     fe8c <read_super+0x220>
			block++;
    fe6f:	83 44 24 04 01       	addl   $0x1,0x4(%esp)
		s->s_imap[i] = NULL;
	for (i = 0; i < Z_MAP_SLOTS; i++)
		s->s_zmap[i] = NULL;
	block = 2;
	// 从第二逻辑块号开始读取i节点位图
	for (i = 0 ; i < s->s_imap_blocks ; i++)			// 读取设备中i节点位图.
    fe74:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    fe79:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fe7d:	0f b7 40 04          	movzwl 0x4(%eax),%eax
    fe81:	0f b7 c0             	movzwl %ax,%eax
    fe84:	3b 44 24 08          	cmp    0x8(%esp),%eax
    fe88:	7f ae                	jg     fe38 <read_super+0x1cc>
    fe8a:	eb 01                	jmp    fe8d <read_super+0x221>
		if (s->s_imap[i] = bread(dev, block))
			block++;
		else
			break;
    fe8c:	90                   	nop
	// 从i节点位图之后开始读取逻辑块位图
	for (i = 0 ; i < s->s_zmap_blocks ; i++)			// 读取设备中逻辑块位图.
    fe8d:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    fe94:	00 
    fe95:	eb 41                	jmp    fed8 <read_super+0x26c>
		if (s->s_zmap[i] = bread(dev, block))
    fe97:	83 ec 08             	sub    $0x8,%esp
    fe9a:	ff 74 24 0c          	pushl  0xc(%esp)
    fe9e:	ff 74 24 2c          	pushl  0x2c(%esp)
    fea2:	e8 ec f7 ff ff       	call   f693 <bread>
    fea7:	83 c4 10             	add    $0x10,%esp
    feaa:	89 c1                	mov    %eax,%ecx
    feac:	8b 44 24 0c          	mov    0xc(%esp),%eax
    feb0:	8b 54 24 08          	mov    0x8(%esp),%edx
    feb4:	83 c2 0c             	add    $0xc,%edx
    feb7:	89 4c 90 04          	mov    %ecx,0x4(%eax,%edx,4)
    febb:	8b 44 24 0c          	mov    0xc(%esp),%eax
    febf:	8b 54 24 08          	mov    0x8(%esp),%edx
    fec3:	83 c2 0c             	add    $0xc,%edx
    fec6:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
    feca:	85 c0                	test   %eax,%eax
    fecc:	74 1d                	je     feeb <read_super+0x27f>
			block++;
    fece:	83 44 24 04 01       	addl   $0x1,0x4(%esp)
		if (s->s_imap[i] = bread(dev, block))
			block++;
		else
			break;
	// 从i节点位图之后开始读取逻辑块位图
	for (i = 0 ; i < s->s_zmap_blocks ; i++)			// 读取设备中逻辑块位图.
    fed3:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    fed8:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fedc:	0f b7 40 06          	movzwl 0x6(%eax),%eax
    fee0:	0f b7 c0             	movzwl %ax,%eax
    fee3:	3b 44 24 08          	cmp    0x8(%esp),%eax
    fee7:	7f ae                	jg     fe97 <read_super+0x22b>
    fee9:	eb 01                	jmp    feec <read_super+0x280>
		if (s->s_zmap[i] = bread(dev, block))
			block++;
		else
			break;
    feeb:	90                   	nop
	// 如果读出的位图个数不等于位图应该占有的逻辑块数,说明文件系统位图信息有问题,超级块初始化失败.因此只能释放前面申请并占用的所有资源,即释放i节点位图和逻辑块位图占用
	// 的高速缓冲块,释放上面选定的超级块数组项,解锁该超级块项,并返回空指针退出.
	if (block != 2 + s->s_imap_blocks + s->s_zmap_blocks) {
    feec:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fef0:	0f b7 40 04          	movzwl 0x4(%eax),%eax
    fef4:	0f b7 c0             	movzwl %ax,%eax
    fef7:	8d 50 02             	lea    0x2(%eax),%edx
    fefa:	8b 44 24 0c          	mov    0xc(%esp),%eax
    fefe:	0f b7 40 06          	movzwl 0x6(%eax),%eax
    ff02:	0f b7 c0             	movzwl %ax,%eax
    ff05:	01 d0                	add    %edx,%eax
    ff07:	3b 44 24 04          	cmp    0x4(%esp),%eax
    ff0b:	0f 84 82 00 00 00    	je     ff93 <read_super+0x327>
		for(i = 0; i < I_MAP_SLOTS; i++)				// 释放位图占用的高速缓冲块.
    ff11:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    ff18:	00 
    ff19:	eb 20                	jmp    ff3b <read_super+0x2cf>
			brelse(s->s_imap[i]);
    ff1b:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ff1f:	8b 54 24 08          	mov    0x8(%esp),%edx
    ff23:	83 c2 04             	add    $0x4,%edx
    ff26:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
    ff2a:	83 ec 0c             	sub    $0xc,%esp
    ff2d:	50                   	push   %eax
    ff2e:	e8 0a f7 ff ff       	call   f63d <brelse>
    ff33:	83 c4 10             	add    $0x10,%esp
		else
			break;
	// 如果读出的位图个数不等于位图应该占有的逻辑块数,说明文件系统位图信息有问题,超级块初始化失败.因此只能释放前面申请并占用的所有资源,即释放i节点位图和逻辑块位图占用
	// 的高速缓冲块,释放上面选定的超级块数组项,解锁该超级块项,并返回空指针退出.
	if (block != 2 + s->s_imap_blocks + s->s_zmap_blocks) {
		for(i = 0; i < I_MAP_SLOTS; i++)				// 释放位图占用的高速缓冲块.
    ff36:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    ff3b:	83 7c 24 08 07       	cmpl   $0x7,0x8(%esp)
    ff40:	7e d9                	jle    ff1b <read_super+0x2af>
			brelse(s->s_imap[i]);
		for(i = 0; i < Z_MAP_SLOTS; i++)
    ff42:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
    ff49:	00 
    ff4a:	eb 20                	jmp    ff6c <read_super+0x300>
			brelse(s->s_zmap[i]);
    ff4c:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ff50:	8b 54 24 08          	mov    0x8(%esp),%edx
    ff54:	83 c2 0c             	add    $0xc,%edx
    ff57:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
    ff5b:	83 ec 0c             	sub    $0xc,%esp
    ff5e:	50                   	push   %eax
    ff5f:	e8 d9 f6 ff ff       	call   f63d <brelse>
    ff64:	83 c4 10             	add    $0x10,%esp
	// 如果读出的位图个数不等于位图应该占有的逻辑块数,说明文件系统位图信息有问题,超级块初始化失败.因此只能释放前面申请并占用的所有资源,即释放i节点位图和逻辑块位图占用
	// 的高速缓冲块,释放上面选定的超级块数组项,解锁该超级块项,并返回空指针退出.
	if (block != 2 + s->s_imap_blocks + s->s_zmap_blocks) {
		for(i = 0; i < I_MAP_SLOTS; i++)				// 释放位图占用的高速缓冲块.
			brelse(s->s_imap[i]);
		for(i = 0; i < Z_MAP_SLOTS; i++)
    ff67:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
    ff6c:	83 7c 24 08 07       	cmpl   $0x7,0x8(%esp)
    ff71:	7e d9                	jle    ff4c <read_super+0x2e0>
			brelse(s->s_zmap[i]);
		s->s_dev = 0;									// 释放选定的超级块数组项.
    ff73:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ff77:	66 c7 40 54 00 00    	movw   $0x0,0x54(%eax)
		free_super(s);									// 解锁该超级块项.
    ff7d:	83 ec 0c             	sub    $0xc,%esp
    ff80:	ff 74 24 18          	pushl  0x18(%esp)
    ff84:	e8 2b fb ff ff       	call   fab4 <free_super>
    ff89:	83 c4 10             	add    $0x10,%esp
		return NULL;
    ff8c:	b8 00 00 00 00       	mov    $0x0,%eax
    ff91:	eb 47                	jmp    ffda <read_super+0x36e>
	}
	// 否则一切成功.另外,由于对于申请空闲i节点的函数来讲,如果设备所有的i节点已经全被使用,则查找函数会返回0值.因此0号i节点是不能用的,所以这里将位图中第1块的最低位设置为
	// 1,以防止文件系统分配0号i节点.同样的道理,也将逻辑块位图的最低位设置为1.最后函数解锁该超级块,并返回超级块指针.
	s->s_imap[0]->b_data[0] |= 1;
    ff93:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ff97:	8b 40 14             	mov    0x14(%eax),%eax
    ff9a:	8b 00                	mov    (%eax),%eax
    ff9c:	8b 54 24 0c          	mov    0xc(%esp),%edx
    ffa0:	8b 52 14             	mov    0x14(%edx),%edx
    ffa3:	8b 12                	mov    (%edx),%edx
    ffa5:	0f b6 12             	movzbl (%edx),%edx
    ffa8:	83 ca 01             	or     $0x1,%edx
    ffab:	88 10                	mov    %dl,(%eax)
	s->s_zmap[0]->b_data[0] |= 1;
    ffad:	8b 44 24 0c          	mov    0xc(%esp),%eax
    ffb1:	8b 40 34             	mov    0x34(%eax),%eax
    ffb4:	8b 00                	mov    (%eax),%eax
    ffb6:	8b 54 24 0c          	mov    0xc(%esp),%edx
    ffba:	8b 52 34             	mov    0x34(%edx),%edx
    ffbd:	8b 12                	mov    (%edx),%edx
    ffbf:	0f b6 12             	movzbl (%edx),%edx
    ffc2:	83 ca 01             	or     $0x1,%edx
    ffc5:	88 10                	mov    %dl,(%eax)
	free_super(s);
    ffc7:	83 ec 0c             	sub    $0xc,%esp
    ffca:	ff 74 24 18          	pushl  0x18(%esp)
    ffce:	e8 e1 fa ff ff       	call   fab4 <free_super>
    ffd3:	83 c4 10             	add    $0x10,%esp
	return s;
    ffd6:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
    ffda:	83 c4 1c             	add    $0x1c,%esp
    ffdd:	c3                   	ret    

0000ffde <sys_umount>:
// 卸载文件系统（系统调用）。
// 参数dev_name是文件系统所在设备的设备文件名。
// 该函数首先根据参数给出的块设备文件名获得设备号，然后复位文件系统超级块中的相应字段，释放超级块和位图占用的缓冲块，最后对该
// 设备执行高速缓冲与设备上数据的同步操作。若卸载操作成功则返回0，否则返回出错码。
int sys_umount(char * dev_name)
{
    ffde:	83 ec 1c             	sub    $0x1c,%esp
	int dev;

	// 首先根据设备文件名找到对应的i节点，并取其中的设备号。设备文件所定义设备号是保存在其i节点的i_zone[0]中的。参见后面namei.c
	// 程序中系统调用sys_mknod()的代码第445行。另外，由于文件系统需要存放在块设备上，因此如果不是块设备文件，则放回刚申请的i节点
	// dev_i，返回出错码。
	if (!(inode = namei(dev_name)))
    ffe1:	83 ec 0c             	sub    $0xc,%esp
    ffe4:	ff 74 24 2c          	pushl  0x2c(%esp)
    ffe8:	e8 71 34 00 00       	call   1345e <namei>
    ffed:	83 c4 10             	add    $0x10,%esp
    fff0:	89 44 24 0c          	mov    %eax,0xc(%esp)
    fff4:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
    fff9:	75 0a                	jne    10005 <sys_umount+0x27>
		return -ENOENT;
    fffb:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   10000:	e9 59 01 00 00       	jmp    1015e <sys_umount+0x180>
	dev = inode->i_zone[0];
   10005:	8b 44 24 0c          	mov    0xc(%esp),%eax
   10009:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   1000d:	0f b7 c0             	movzwl %ax,%eax
   10010:	89 44 24 08          	mov    %eax,0x8(%esp)
	if (!S_ISBLK(inode->i_mode)) {
   10014:	8b 44 24 0c          	mov    0xc(%esp),%eax
   10018:	0f b7 00             	movzwl (%eax),%eax
   1001b:	0f b7 c0             	movzwl %ax,%eax
   1001e:	25 00 f0 00 00       	and    $0xf000,%eax
   10023:	3d 00 60 00 00       	cmp    $0x6000,%eax
   10028:	74 19                	je     10043 <sys_umount+0x65>
		iput(inode);                    				// fs/inode.c。
   1002a:	83 ec 0c             	sub    $0xc,%esp
   1002d:	ff 74 24 18          	pushl  0x18(%esp)
   10031:	e8 66 e6 ff ff       	call   e69c <iput>
   10036:	83 c4 10             	add    $0x10,%esp
		return -ENOTBLK;
   10039:	b8 f1 ff ff ff       	mov    $0xfffffff1,%eax
   1003e:	e9 1b 01 00 00       	jmp    1015e <sys_umount+0x180>
	}
	// OK，现在上面为了得到设备号而取得的i节点已完成了它的使命，因此这里放回该设备文件的i节点。接着我们来检查一下卸载该文件系统的
	// 条件是否满足。如果设备上是根文件系统，则不能卸载，返回忙出错号。
	iput(inode);
   10043:	83 ec 0c             	sub    $0xc,%esp
   10046:	ff 74 24 18          	pushl  0x18(%esp)
   1004a:	e8 4d e6 ff ff       	call   e69c <iput>
   1004f:	83 c4 10             	add    $0x10,%esp
	if (dev == ROOT_DEV)
   10052:	a1 cc 10 03 00       	mov    0x310cc,%eax
   10057:	39 44 24 08          	cmp    %eax,0x8(%esp)
   1005b:	75 0a                	jne    10067 <sys_umount+0x89>
		return -EBUSY;
   1005d:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
   10062:	e9 f7 00 00 00       	jmp    1015e <sys_umount+0x180>
	// 如果在超级块表中没有找到该设备上文件系统的超级块，或者已找到但是该设备上文件系统没有安装过，则返回出错码。如果超级块所指明
	// 被安装到的i节点并没有置位其安装标志i_mount，则显示警告信息。然后查找一下i节点表，看看是否有进程在使用该设备上的文件，如果
	// 有则返回忙出错码。
	if (!(sb = get_super(dev)) || !(sb->s_imount))
   10067:	83 ec 0c             	sub    $0xc,%esp
   1006a:	ff 74 24 14          	pushl  0x14(%esp)
   1006e:	e8 91 fa ff ff       	call   fb04 <get_super>
   10073:	83 c4 10             	add    $0x10,%esp
   10076:	89 44 24 04          	mov    %eax,0x4(%esp)
   1007a:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
   1007f:	74 0b                	je     1008c <sys_umount+0xae>
   10081:	8b 44 24 04          	mov    0x4(%esp),%eax
   10085:	8b 40 5c             	mov    0x5c(%eax),%eax
   10088:	85 c0                	test   %eax,%eax
   1008a:	75 0a                	jne    10096 <sys_umount+0xb8>
		return -ENOENT;
   1008c:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   10091:	e9 c8 00 00 00       	jmp    1015e <sys_umount+0x180>
	if (!sb->s_imount->i_mount)
   10096:	8b 44 24 04          	mov    0x4(%esp),%eax
   1009a:	8b 40 5c             	mov    0x5c(%eax),%eax
   1009d:	0f b6 40 39          	movzbl 0x39(%eax),%eax
   100a1:	84 c0                	test   %al,%al
   100a3:	75 10                	jne    100b5 <sys_umount+0xd7>
		printk("Mounted inode has i_mount=0\n");
   100a5:	83 ec 0c             	sub    $0xc,%esp
   100a8:	68 60 39 02 00       	push   $0x23960
   100ad:	e8 95 8b ff ff       	call   8c47 <printk>
   100b2:	83 c4 10             	add    $0x10,%esp
	for (inode = inode_table + 0 ; inode < inode_table + NR_INODE ; inode++)
   100b5:	c7 44 24 0c c0 01 03 	movl   $0x301c0,0xc(%esp)
   100bc:	00 
   100bd:	eb 2a                	jmp    100e9 <sys_umount+0x10b>
		if (inode->i_dev == dev && inode->i_count)
   100bf:	8b 44 24 0c          	mov    0xc(%esp),%eax
   100c3:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   100c7:	0f b7 c0             	movzwl %ax,%eax
   100ca:	3b 44 24 08          	cmp    0x8(%esp),%eax
   100ce:	75 14                	jne    100e4 <sys_umount+0x106>
   100d0:	8b 44 24 0c          	mov    0xc(%esp),%eax
   100d4:	0f b7 40 34          	movzwl 0x34(%eax),%eax
   100d8:	66 85 c0             	test   %ax,%ax
   100db:	74 07                	je     100e4 <sys_umount+0x106>
				return -EBUSY;
   100dd:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
   100e2:	eb 7a                	jmp    1015e <sys_umount+0x180>
	// 有则返回忙出错码。
	if (!(sb = get_super(dev)) || !(sb->s_imount))
		return -ENOENT;
	if (!sb->s_imount->i_mount)
		printk("Mounted inode has i_mount=0\n");
	for (inode = inode_table + 0 ; inode < inode_table + NR_INODE ; inode++)
   100e4:	83 44 24 0c 3c       	addl   $0x3c,0xc(%esp)
   100e9:	b8 c0 10 03 00       	mov    $0x310c0,%eax
   100ee:	39 44 24 0c          	cmp    %eax,0xc(%esp)
   100f2:	72 cb                	jb     100bf <sys_umount+0xe1>
		if (inode->i_dev == dev && inode->i_count)
				return -EBUSY;
	// 现在该设备上文件系统的卸载条件均得到满足，因此我们可以开始实施真正的卸载操作了。首先复位被安装到的i节点的安装标志，释放该
	// i节点。然后置超级块中被安装i节点字段为空，并放回设备文件系统的根i节点，接着置超级块中被安装系统根i节点指针为空。
	sb->s_imount->i_mount = 0;
   100f4:	8b 44 24 04          	mov    0x4(%esp),%eax
   100f8:	8b 40 5c             	mov    0x5c(%eax),%eax
   100fb:	c6 40 39 00          	movb   $0x0,0x39(%eax)
	iput(sb->s_imount);
   100ff:	8b 44 24 04          	mov    0x4(%esp),%eax
   10103:	8b 40 5c             	mov    0x5c(%eax),%eax
   10106:	83 ec 0c             	sub    $0xc,%esp
   10109:	50                   	push   %eax
   1010a:	e8 8d e5 ff ff       	call   e69c <iput>
   1010f:	83 c4 10             	add    $0x10,%esp
	sb->s_imount = NULL;
   10112:	8b 44 24 04          	mov    0x4(%esp),%eax
   10116:	c7 40 5c 00 00 00 00 	movl   $0x0,0x5c(%eax)
	iput(sb->s_isup);
   1011d:	8b 44 24 04          	mov    0x4(%esp),%eax
   10121:	8b 40 58             	mov    0x58(%eax),%eax
   10124:	83 ec 0c             	sub    $0xc,%esp
   10127:	50                   	push   %eax
   10128:	e8 6f e5 ff ff       	call   e69c <iput>
   1012d:	83 c4 10             	add    $0x10,%esp
	sb->s_isup = NULL;
   10130:	8b 44 24 04          	mov    0x4(%esp),%eax
   10134:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)
	// 最后我们释放该设备上的超级块以及位图占用的高速缓冲块，并对该设备执行高速缓冲与设备上数据的同步操作。然后返回0（卸载成功）。
	put_super(dev);
   1013b:	83 ec 0c             	sub    $0xc,%esp
   1013e:	ff 74 24 14          	pushl  0x14(%esp)
   10142:	e8 32 fa ff ff       	call   fb79 <put_super>
   10147:	83 c4 10             	add    $0x10,%esp
	sync_dev(dev);
   1014a:	83 ec 0c             	sub    $0xc,%esp
   1014d:	ff 74 24 14          	pushl  0x14(%esp)
   10151:	e8 15 ee ff ff       	call   ef6b <sync_dev>
   10156:	83 c4 10             	add    $0x10,%esp
	return 0;
   10159:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1015e:	83 c4 1c             	add    $0x1c,%esp
   10161:	c3                   	ret    

00010162 <sys_mount>:

// 安装文件系统（系统调用）。
// 参数dev_name是设备文件名，dir_name是安装到的目录名，rw_flag被安装文件系统的可读写标志。将被加载的地方必须是一
// 个目录名，并且对应的i节点没有被其他程序占用。若操作成功则返回0,否则返回出错号。
int sys_mount(char * dev_name, char * dir_name, int rw_flag)
{
   10162:	83 ec 1c             	sub    $0x1c,%esp
	struct super_block * sb;
	int dev;

	// 首先根据设备文件名找到对应的i节点，以取得其中的设备号。对于块特殊设备文件，设备号在其i节点的i_zone[0]中。另外，
	// 由于文件系统必须在块设备中，因此如果不是块设备文件，则放回刚得的i节点dev_i，返回出错码。
	if (!(dev_i = namei(dev_name)))
   10165:	83 ec 0c             	sub    $0xc,%esp
   10168:	ff 74 24 2c          	pushl  0x2c(%esp)
   1016c:	e8 ed 32 00 00       	call   1345e <namei>
   10171:	83 c4 10             	add    $0x10,%esp
   10174:	89 44 24 0c          	mov    %eax,0xc(%esp)
   10178:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   1017d:	75 0a                	jne    10189 <sys_mount+0x27>
		return -ENOENT;
   1017f:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   10184:	e9 64 01 00 00       	jmp    102ed <sys_mount+0x18b>
	dev = dev_i->i_zone[0];
   10189:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1018d:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   10191:	0f b7 c0             	movzwl %ax,%eax
   10194:	89 44 24 08          	mov    %eax,0x8(%esp)
	if (!S_ISBLK(dev_i->i_mode)) {
   10198:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1019c:	0f b7 00             	movzwl (%eax),%eax
   1019f:	0f b7 c0             	movzwl %ax,%eax
   101a2:	25 00 f0 00 00       	and    $0xf000,%eax
   101a7:	3d 00 60 00 00       	cmp    $0x6000,%eax
   101ac:	74 19                	je     101c7 <sys_mount+0x65>
		iput(dev_i);
   101ae:	83 ec 0c             	sub    $0xc,%esp
   101b1:	ff 74 24 18          	pushl  0x18(%esp)
   101b5:	e8 e2 e4 ff ff       	call   e69c <iput>
   101ba:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   101bd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   101c2:	e9 26 01 00 00       	jmp    102ed <sys_mount+0x18b>
	}
	// OK，现在上面为了得到设备号而取得的i节点dev_i已经完成了它的使命，因此这里放回该设备文件的i节点。接着我们来检查一
	// 下文件系统安装到的目录名是否有效。于是根据给定的目录文件名找到对应的i节点dir_i。如果该i节点的引用计数不为1（仅在
	// 这里引用），或者该i节点的节点号是根文件系统的节点号1,则放回该i节点返回出错码。另外，如果该节点不是一个目录文件节点，
	// 则也放回该i节点，返回出错码。因为文件系统只能安装在一个目录名上。
	iput(dev_i);
   101c7:	83 ec 0c             	sub    $0xc,%esp
   101ca:	ff 74 24 18          	pushl  0x18(%esp)
   101ce:	e8 c9 e4 ff ff       	call   e69c <iput>
   101d3:	83 c4 10             	add    $0x10,%esp
	if (!(dir_i = namei(dir_name)))
   101d6:	83 ec 0c             	sub    $0xc,%esp
   101d9:	ff 74 24 30          	pushl  0x30(%esp)
   101dd:	e8 7c 32 00 00       	call   1345e <namei>
   101e2:	83 c4 10             	add    $0x10,%esp
   101e5:	89 44 24 04          	mov    %eax,0x4(%esp)
   101e9:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
   101ee:	75 0a                	jne    101fa <sys_mount+0x98>
		return -ENOENT;
   101f0:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   101f5:	e9 f3 00 00 00       	jmp    102ed <sys_mount+0x18b>
	if (dir_i->i_count != 1 || dir_i->i_num == ROOT_INO) {
   101fa:	8b 44 24 04          	mov    0x4(%esp),%eax
   101fe:	0f b7 40 34          	movzwl 0x34(%eax),%eax
   10202:	66 83 f8 01          	cmp    $0x1,%ax
   10206:	75 0e                	jne    10216 <sys_mount+0xb4>
   10208:	8b 44 24 04          	mov    0x4(%esp),%eax
   1020c:	0f b7 40 32          	movzwl 0x32(%eax),%eax
   10210:	66 83 f8 01          	cmp    $0x1,%ax
   10214:	75 19                	jne    1022f <sys_mount+0xcd>
		iput(dir_i);
   10216:	83 ec 0c             	sub    $0xc,%esp
   10219:	ff 74 24 10          	pushl  0x10(%esp)
   1021d:	e8 7a e4 ff ff       	call   e69c <iput>
   10222:	83 c4 10             	add    $0x10,%esp
		return -EBUSY;
   10225:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
   1022a:	e9 be 00 00 00       	jmp    102ed <sys_mount+0x18b>
	}
	if (!S_ISDIR(dir_i->i_mode)) {          			// 安装点需要是一个目录名。
   1022f:	8b 44 24 04          	mov    0x4(%esp),%eax
   10233:	0f b7 00             	movzwl (%eax),%eax
   10236:	0f b7 c0             	movzwl %ax,%eax
   10239:	25 00 f0 00 00       	and    $0xf000,%eax
   1023e:	3d 00 40 00 00       	cmp    $0x4000,%eax
   10243:	74 19                	je     1025e <sys_mount+0xfc>
		iput(dir_i);
   10245:	83 ec 0c             	sub    $0xc,%esp
   10248:	ff 74 24 10          	pushl  0x10(%esp)
   1024c:	e8 4b e4 ff ff       	call   e69c <iput>
   10251:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   10254:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10259:	e9 8f 00 00 00       	jmp    102ed <sys_mount+0x18b>
	}
	// 现在安装点也检查完毕，我们开始读取要安装文件系统的超级块信息。如果读超级块操作失败，则放回该安装点i节点dir_i并返回
	// 出错码。一个文件系统的超级块会首先从超级块表中进行搜索，如果不在超级块表中就从设备上读取。
	if (!(sb = read_super(dev))) {
   1025e:	83 ec 0c             	sub    $0xc,%esp
   10261:	ff 74 24 14          	pushl  0x14(%esp)
   10265:	e8 02 fa ff ff       	call   fc6c <read_super>
   1026a:	83 c4 10             	add    $0x10,%esp
   1026d:	89 04 24             	mov    %eax,(%esp)
   10270:	83 3c 24 00          	cmpl   $0x0,(%esp)
   10274:	75 16                	jne    1028c <sys_mount+0x12a>
		iput(dir_i);
   10276:	83 ec 0c             	sub    $0xc,%esp
   10279:	ff 74 24 10          	pushl  0x10(%esp)
   1027d:	e8 1a e4 ff ff       	call   e69c <iput>
   10282:	83 c4 10             	add    $0x10,%esp
		return -EBUSY;
   10285:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
   1028a:	eb 61                	jmp    102ed <sys_mount+0x18b>
	}
	// 在等到了文件系统超级块之后，我们对它先进行检测一番。如果将要被安装的文件系统已经安装在其他地方，则放回该i节点，返回
	// 出错码。如果将要安装到的i节点已经安装了文件系统（安装标志已经置位），则放回该i节点，也返回出错码。
	if (sb->s_imount) {
   1028c:	8b 04 24             	mov    (%esp),%eax
   1028f:	8b 40 5c             	mov    0x5c(%eax),%eax
   10292:	85 c0                	test   %eax,%eax
   10294:	74 16                	je     102ac <sys_mount+0x14a>
		iput(dir_i);
   10296:	83 ec 0c             	sub    $0xc,%esp
   10299:	ff 74 24 10          	pushl  0x10(%esp)
   1029d:	e8 fa e3 ff ff       	call   e69c <iput>
   102a2:	83 c4 10             	add    $0x10,%esp
		return -EBUSY;
   102a5:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
   102aa:	eb 41                	jmp    102ed <sys_mount+0x18b>
	}
	if (dir_i->i_mount) {
   102ac:	8b 44 24 04          	mov    0x4(%esp),%eax
   102b0:	0f b6 40 39          	movzbl 0x39(%eax),%eax
   102b4:	84 c0                	test   %al,%al
   102b6:	74 16                	je     102ce <sys_mount+0x16c>
		iput(dir_i);
   102b8:	83 ec 0c             	sub    $0xc,%esp
   102bb:	ff 74 24 10          	pushl  0x10(%esp)
   102bf:	e8 d8 e3 ff ff       	call   e69c <iput>
   102c4:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   102c7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   102cc:	eb 1f                	jmp    102ed <sys_mount+0x18b>
	}
	// 最后设置被安装文件系统超级块的“被安装到i节点”字段指向安装到的目录名的i节点。并设置安装位置i节点的安装标志和节点已修改
	// 标志。然后返回0（安装成功）。
	sb->s_imount = dir_i;
   102ce:	8b 04 24             	mov    (%esp),%eax
   102d1:	8b 54 24 04          	mov    0x4(%esp),%edx
   102d5:	89 50 5c             	mov    %edx,0x5c(%eax)
	dir_i->i_mount = 1;
   102d8:	8b 44 24 04          	mov    0x4(%esp),%eax
   102dc:	c6 40 39 01          	movb   $0x1,0x39(%eax)
	dir_i->i_dirt = 1;									/* NOTE! we don't iput(dir_i) */        /* 注意！这里没有用iput(dir_i) */
   102e0:	8b 44 24 04          	mov    0x4(%esp),%eax
   102e4:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	return 0;											/* we do that in umount */      /* 这将在umount内操作 */
   102e8:	b8 00 00 00 00       	mov    $0x0,%eax
}
   102ed:	83 c4 1c             	add    $0x1c,%esp
   102f0:	c3                   	ret    

000102f1 <mount_root>:

// 安装根文件系统.
// 该函数属于系统初始化操作的一部分.函数首先初始化文件表数组file_table[]和超级块表(数组),然后读取根文件系统超级块,并取得文件系统根i
// 节点.最后统计并显示出根文件系统上的可用资源(空闲块数和空闲i节点数0.该函数会在系统开机进行初始化设置时(sys_setup())调用(blk_drv/hd.c)>
void mount_root(void)
{
   102f1:	53                   	push   %ebx
   102f2:	83 ec 18             	sub    $0x18,%esp
	// 若磁盘i节点结构不是32字节,则出错停机.该判断用于防止修改代码时出现不一致情况.
	if (32 != sizeof (struct d_inode))
		panic("bad i-node size");
	// 首先初始化文件表数组(共64项,即系统同时只能打开64个文件)和超级块表.这里将所有文件结构中的引用计数设置为0(表示空闲),并把超级块表中各项结构
	// 的设备字段初始化为0(也表示空闲).如果根文件系统所在设备是软盘的话,就提示"插入根文件系统盘,并按回车键",并等待按键.
	for(i = 0; i < NR_FILE; i++)									// 初始化文件表.
   102f5:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   102fc:	00 
   102fd:	eb 16                	jmp    10315 <mount_root+0x24>
		file_table[i].f_count = 0;
   102ff:	8b 44 24 0c          	mov    0xc(%esp),%eax
   10303:	c1 e0 04             	shl    $0x4,%eax
   10306:	05 84 0f 04 00       	add    $0x40f84,%eax
   1030b:	66 c7 00 00 00       	movw   $0x0,(%eax)
	// 若磁盘i节点结构不是32字节,则出错停机.该判断用于防止修改代码时出现不一致情况.
	if (32 != sizeof (struct d_inode))
		panic("bad i-node size");
	// 首先初始化文件表数组(共64项,即系统同时只能打开64个文件)和超级块表.这里将所有文件结构中的引用计数设置为0(表示空闲),并把超级块表中各项结构
	// 的设备字段初始化为0(也表示空闲).如果根文件系统所在设备是软盘的话,就提示"插入根文件系统盘,并按回车键",并等待按键.
	for(i = 0; i < NR_FILE; i++)									// 初始化文件表.
   10310:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   10315:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
   1031a:	7e e3                	jle    102ff <mount_root+0xe>
		file_table[i].f_count = 0;
	if (MAJOR(ROOT_DEV) == 2) {										// 提示插入根文件系统盘.
   1031c:	a1 cc 10 03 00       	mov    0x310cc,%eax
   10321:	c1 e8 08             	shr    $0x8,%eax
   10324:	83 f8 02             	cmp    $0x2,%eax
   10327:	75 15                	jne    1033e <mount_root+0x4d>
		printk("Insert root floppy and press ENTER\r\n");
   10329:	83 ec 0c             	sub    $0xc,%esp
   1032c:	68 80 39 02 00       	push   $0x23980
   10331:	e8 11 89 ff ff       	call   8c47 <printk>
   10336:	83 c4 10             	add    $0x10,%esp
		wait_for_keypress();
   10339:	e8 cc 87 00 00       	call   18b0a <wait_for_keypress>
	}
	for(p = &super_block[0] ; p < &super_block[NR_SUPER] ; p++) {
   1033e:	c7 44 24 04 20 0c 04 	movl   $0x40c20,0x4(%esp)
   10345:	00 
   10346:	eb 22                	jmp    1036a <mount_root+0x79>
		p->s_dev = 0;												// 初始化超级块表
   10348:	8b 44 24 04          	mov    0x4(%esp),%eax
   1034c:	66 c7 40 54 00 00    	movw   $0x0,0x54(%eax)
		p->s_lock = 0;
   10352:	8b 44 24 04          	mov    0x4(%esp),%eax
   10356:	c6 40 68 00          	movb   $0x0,0x68(%eax)
		p->s_wait = NULL;
   1035a:	8b 44 24 04          	mov    0x4(%esp),%eax
   1035e:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
		file_table[i].f_count = 0;
	if (MAJOR(ROOT_DEV) == 2) {										// 提示插入根文件系统盘.
		printk("Insert root floppy and press ENTER\r\n");
		wait_for_keypress();
	}
	for(p = &super_block[0] ; p < &super_block[NR_SUPER] ; p++) {
   10365:	83 44 24 04 6c       	addl   $0x6c,0x4(%esp)
   1036a:	81 7c 24 04 80 0f 04 	cmpl   $0x40f80,0x4(%esp)
   10371:	00 
   10372:	72 d4                	jb     10348 <mount_root+0x57>
		p->s_lock = 0;
		p->s_wait = NULL;
	}
	// 做好以上"份外"的初始化工作之后,我们开始安装根文件系统.于是从根设备上读取文件系统超级块,并取得文件系统的根i节点(1号节点)在内存i节点表中的指针.
	// 如果读根设备上超级块失败或取根节点失败,则都显示信息并停机.
	if (!(p = read_super(ROOT_DEV)))
   10374:	a1 cc 10 03 00       	mov    0x310cc,%eax
   10379:	83 ec 0c             	sub    $0xc,%esp
   1037c:	50                   	push   %eax
   1037d:	e8 ea f8 ff ff       	call   fc6c <read_super>
   10382:	83 c4 10             	add    $0x10,%esp
   10385:	89 44 24 04          	mov    %eax,0x4(%esp)
   10389:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
   1038e:	75 10                	jne    103a0 <mount_root+0xaf>
		panic("Unable to mount root");
   10390:	83 ec 0c             	sub    $0xc,%esp
   10393:	68 a5 39 02 00       	push   $0x239a5
   10398:	e8 6b 88 ff ff       	call   8c08 <panic>
   1039d:	83 c4 10             	add    $0x10,%esp
	if (!(mi = iget(ROOT_DEV, ROOT_INO)))							// 在fs.h中ROOT_INO定义为1.
   103a0:	a1 cc 10 03 00       	mov    0x310cc,%eax
   103a5:	83 ec 08             	sub    $0x8,%esp
   103a8:	6a 01                	push   $0x1
   103aa:	50                   	push   %eax
   103ab:	e8 7e e6 ff ff       	call   ea2e <iget>
   103b0:	83 c4 10             	add    $0x10,%esp
   103b3:	89 04 24             	mov    %eax,(%esp)
   103b6:	83 3c 24 00          	cmpl   $0x0,(%esp)
   103ba:	75 10                	jne    103cc <mount_root+0xdb>
		panic("Unable to read root i-node");
   103bc:	83 ec 0c             	sub    $0xc,%esp
   103bf:	68 ba 39 02 00       	push   $0x239ba
   103c4:	e8 3f 88 ff ff       	call   8c08 <panic>
   103c9:	83 c4 10             	add    $0x10,%esp
	// 现在我们对超级块和根i节点进行设置.把根i节点引用次数递增3次.因为下面266行上也引用了该i节点.另外,iget()函数中i节点引用计数已被设置为1.然后置该
	// 超级块的被安装文件系统i节点和被安装到i节点字段为该i节点.再设置当前进程的当前工作目录和根目录i节点.此时当前进程是1号进程(init进程).
	mi->i_count += 3 ;												/* NOTE! it is logically used 4 times, not 1 */
   103cc:	8b 04 24             	mov    (%esp),%eax
   103cf:	0f b7 40 34          	movzwl 0x34(%eax),%eax
   103d3:	8d 50 03             	lea    0x3(%eax),%edx
   103d6:	8b 04 24             	mov    (%esp),%eax
   103d9:	66 89 50 34          	mov    %dx,0x34(%eax)
                                									/* 注意!从逻辑上讲,它已被引用了4次,而不是1次 */
	p->s_isup = p->s_imount = mi;
   103dd:	8b 44 24 04          	mov    0x4(%esp),%eax
   103e1:	8b 14 24             	mov    (%esp),%edx
   103e4:	89 50 5c             	mov    %edx,0x5c(%eax)
   103e7:	8b 44 24 04          	mov    0x4(%esp),%eax
   103eb:	8b 50 5c             	mov    0x5c(%eax),%edx
   103ee:	8b 44 24 04          	mov    0x4(%esp),%eax
   103f2:	89 50 58             	mov    %edx,0x58(%eax)
	current->pwd = mi;
   103f5:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   103fa:	8b 14 24             	mov    (%esp),%edx
   103fd:	89 90 34 03 00 00    	mov    %edx,0x334(%eax)
	current->root = mi;
   10403:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   10408:	8b 14 24             	mov    (%esp),%edx
   1040b:	89 90 38 03 00 00    	mov    %edx,0x338(%eax)
	// 然后我们对根文件系统上的资源作统计工作.统计该设备上空闲块数和空闲i节点数.首先令i等于超级块中表明的设备逻辑块总数.然后根据逻辑块位图中相应位的占用情况统计出空闲块数.
	// 这里宏函数set_bit()只是在测试位,而非设置位."i&8191"用于取得i节点号在当前位图块中对应的位偏移值."i>>13"是将i除以8192,也即除一个磁盘块包含的位数.
	free = 0;
   10411:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
   10418:	00 
	i = p->s_nzones;
   10419:	8b 44 24 04          	mov    0x4(%esp),%eax
   1041d:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   10421:	0f b7 c0             	movzwl %ax,%eax
   10424:	89 44 24 0c          	mov    %eax,0xc(%esp)
	while (-- i >= 0)
   10428:	eb 39                	jmp    10463 <mount_root+0x172>
		if (!set_bit(i & 8191, p->s_zmap[i >> 13]->b_data))
   1042a:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1042e:	25 ff 1f 00 00       	and    $0x1fff,%eax
   10433:	89 c1                	mov    %eax,%ecx
   10435:	8b 44 24 0c          	mov    0xc(%esp),%eax
   10439:	c1 f8 0d             	sar    $0xd,%eax
   1043c:	89 c2                	mov    %eax,%edx
   1043e:	8b 44 24 04          	mov    0x4(%esp),%eax
   10442:	83 c2 0c             	add    $0xc,%edx
   10445:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   10449:	8b 10                	mov    (%eax),%edx
   1044b:	b8 00 00 00 00       	mov    $0x0,%eax
   10450:	0f a3 0a             	bt     %ecx,(%edx)
   10453:	0f 92 c0             	setb   %al
   10456:	89 c3                	mov    %eax,%ebx
   10458:	89 d8                	mov    %ebx,%eax
   1045a:	85 c0                	test   %eax,%eax
   1045c:	75 05                	jne    10463 <mount_root+0x172>
			free++;
   1045e:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
	current->root = mi;
	// 然后我们对根文件系统上的资源作统计工作.统计该设备上空闲块数和空闲i节点数.首先令i等于超级块中表明的设备逻辑块总数.然后根据逻辑块位图中相应位的占用情况统计出空闲块数.
	// 这里宏函数set_bit()只是在测试位,而非设置位."i&8191"用于取得i节点号在当前位图块中对应的位偏移值."i>>13"是将i除以8192,也即除一个磁盘块包含的位数.
	free = 0;
	i = p->s_nzones;
	while (-- i >= 0)
   10463:	83 6c 24 0c 01       	subl   $0x1,0xc(%esp)
   10468:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   1046d:	79 bb                	jns    1042a <mount_root+0x139>
		if (!set_bit(i & 8191, p->s_zmap[i >> 13]->b_data))
			free++;
	// 打印当前主设备上空闲和总的逻辑块数
	Log(LOG_INFO_TYPE, "<<<<< %d/%d free blocks >>>>>\n\r", free, p->s_nzones);
   1046f:	8b 44 24 04          	mov    0x4(%esp),%eax
   10473:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   10477:	0f b7 c0             	movzwl %ax,%eax
   1047a:	50                   	push   %eax
   1047b:	ff 74 24 0c          	pushl  0xc(%esp)
   1047f:	68 d8 39 02 00       	push   $0x239d8
   10484:	6a 00                	push   $0x0
   10486:	e8 7c 24 01 00       	call   22907 <Log>
   1048b:	83 c4 10             	add    $0x10,%esp
	// 在显示过设备上空闲逻辑块数/逻辑块总数之后.我们再统计设备上空闲i节点数.首先令i等于超级块中表明的设备上i中总数+1.加1是将0节点也统计进去.然后根据i节点位图中相应位的
	// 占用情况计算出空闲i节点数.最后再显示设备上可用空闲i节点数和i节点总数.
	free = 0;
   1048e:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
   10495:	00 
	i = p->s_ninodes + 1;
   10496:	8b 44 24 04          	mov    0x4(%esp),%eax
   1049a:	0f b7 00             	movzwl (%eax),%eax
   1049d:	0f b7 c0             	movzwl %ax,%eax
   104a0:	83 c0 01             	add    $0x1,%eax
   104a3:	89 44 24 0c          	mov    %eax,0xc(%esp)
	while (-- i >= 0)
   104a7:	eb 39                	jmp    104e2 <mount_root+0x1f1>
		if (!set_bit(i & 8191, p->s_imap[i >> 13]->b_data))
   104a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
   104ad:	25 ff 1f 00 00       	and    $0x1fff,%eax
   104b2:	89 c1                	mov    %eax,%ecx
   104b4:	8b 44 24 0c          	mov    0xc(%esp),%eax
   104b8:	c1 f8 0d             	sar    $0xd,%eax
   104bb:	89 c2                	mov    %eax,%edx
   104bd:	8b 44 24 04          	mov    0x4(%esp),%eax
   104c1:	83 c2 04             	add    $0x4,%edx
   104c4:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   104c8:	8b 10                	mov    (%eax),%edx
   104ca:	b8 00 00 00 00       	mov    $0x0,%eax
   104cf:	0f a3 0a             	bt     %ecx,(%edx)
   104d2:	0f 92 c0             	setb   %al
   104d5:	89 c3                	mov    %eax,%ebx
   104d7:	89 d8                	mov    %ebx,%eax
   104d9:	85 c0                	test   %eax,%eax
   104db:	75 05                	jne    104e2 <mount_root+0x1f1>
			free++;
   104dd:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
	Log(LOG_INFO_TYPE, "<<<<< %d/%d free blocks >>>>>\n\r", free, p->s_nzones);
	// 在显示过设备上空闲逻辑块数/逻辑块总数之后.我们再统计设备上空闲i节点数.首先令i等于超级块中表明的设备上i中总数+1.加1是将0节点也统计进去.然后根据i节点位图中相应位的
	// 占用情况计算出空闲i节点数.最后再显示设备上可用空闲i节点数和i节点总数.
	free = 0;
	i = p->s_ninodes + 1;
	while (-- i >= 0)
   104e2:	83 6c 24 0c 01       	subl   $0x1,0xc(%esp)
   104e7:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   104ec:	79 bb                	jns    104a9 <mount_root+0x1b8>
		if (!set_bit(i & 8191, p->s_imap[i >> 13]->b_data))
			free++;
	// 打印当前主设备上i节点空闲和总的数量
	Log(LOG_INFO_TYPE, "<<<<< %d/%d free inodes >>>>>\n\r", free, p->s_ninodes);
   104ee:	8b 44 24 04          	mov    0x4(%esp),%eax
   104f2:	0f b7 00             	movzwl (%eax),%eax
   104f5:	0f b7 c0             	movzwl %ax,%eax
   104f8:	50                   	push   %eax
   104f9:	ff 74 24 0c          	pushl  0xc(%esp)
   104fd:	68 f8 39 02 00       	push   $0x239f8
   10502:	6a 00                	push   $0x0
   10504:	e8 fe 23 01 00       	call   22907 <Log>
   10509:	83 c4 10             	add    $0x10,%esp
}
   1050c:	90                   	nop
   1050d:	83 c4 18             	add    $0x18,%esp
   10510:	5b                   	pop    %ebx
   10511:	c3                   	ret    

00010512 <get_fs_byte>:
//// 读取fs段中指定地址处的字节.
// 参数:addr - 指定的内存地址.
// %0 - (返回的字节_v);%1 - (内存地址addr)
// 返回:返回内存fs[addr]处的字节.
static inline unsigned char get_fs_byte(const char * addr)
{
   10512:	53                   	push   %ebx
	unsigned register char _v;

	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   10513:	8b 44 24 08          	mov    0x8(%esp),%eax
   10517:	64 8a 00             	mov    %fs:(%eax),%al
   1051a:	89 c3                	mov    %eax,%ebx
	return _v;
   1051c:	89 d8                	mov    %ebx,%eax
}
   1051e:	5b                   	pop    %ebx
   1051f:	c3                   	ret    

00010520 <put_fs_byte>:

//// 将一字节存放在fs段中指定内存地址处.
// 参数:val - 字节值;addr - 内存地址.
// %0 - 寄存器(字节值val);%1 - (内存地址addr).
static inline void put_fs_byte(char val,char *addr)
{
   10520:	83 ec 04             	sub    $0x4,%esp
   10523:	8b 44 24 08          	mov    0x8(%esp),%eax
   10527:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
   1052a:	0f b6 04 24          	movzbl (%esp),%eax
   1052e:	8b 54 24 0c          	mov    0xc(%esp),%edx
   10532:	64 88 02             	mov    %al,%fs:(%edx)
}
   10535:	90                   	nop
   10536:	83 c4 04             	add    $0x4,%esp
   10539:	c3                   	ret    

0001053a <block_write>:
// 返回已写入字节数。若没有写入任何字节或出错，则返回出错号。
// 对于内核来说，写操作是向高速缓冲区中写入数据。什么时候数据最终写入设备是高速缓冲管理程序决定并处理的。另外，因为
// 块设备是以块为单位进行读写，因此对于写开始位置不处于块起始处时，需要先将开始字节所在整个块读出，然后将需要写的数据
// 从开始处填写满该块，再将完整的一块数据写盘（即交由高速缓冲程序去处理）。
int block_write(int dev, long * pos, char * buf, int count)
{
   1053a:	56                   	push   %esi
   1053b:	53                   	push   %ebx
   1053c:	83 ec 24             	sub    $0x24,%esp
	// 首先由文件中位置pos换算成开始写盘块的块序号block，并求出需写第1字节在该块中的偏移位置offset。
	int block = *pos >> BLOCK_SIZE_BITS;            			// pos所在文件数据块号。
   1053f:	8b 44 24 34          	mov    0x34(%esp),%eax
   10543:	8b 00                	mov    (%eax),%eax
   10545:	c1 f8 0a             	sar    $0xa,%eax
   10548:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	int offset = *pos & (BLOCK_SIZE - 1);             			// pos在数据块中偏移值。
   1054c:	8b 44 24 34          	mov    0x34(%esp),%eax
   10550:	8b 00                	mov    (%eax),%eax
   10552:	25 ff 03 00 00       	and    $0x3ff,%eax
   10557:	89 44 24 18          	mov    %eax,0x18(%esp)
	int chars;
	int written = 0;
   1055b:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
   10562:	00 
	register char * p;               	       					// 局部寄存器变量，被存放在寄存器中。

	// 在写一个块设备文件时，要求写的总数据块数当然不能超过指定设备上容许的最大数据块总数。因此这里首先取出指定
	// 设备的块总数size来比较和限制函数参数给定的读入数据长度。如果系统中没有对设备指定长度，就使用默认长度
	// 0x7fffffff（2GB个块）。
	if (blk_size[MAJOR(dev)])
   10563:	8b 44 24 30          	mov    0x30(%esp),%eax
   10567:	c1 e8 08             	shr    $0x8,%eax
   1056a:	8b 04 85 38 11 03 00 	mov    0x31138(,%eax,4),%eax
   10571:	85 c0                	test   %eax,%eax
   10573:	74 25                	je     1059a <block_write+0x60>
		size = blk_size[MAJOR(dev)][MINOR(dev)];
   10575:	8b 44 24 30          	mov    0x30(%esp),%eax
   10579:	c1 e8 08             	shr    $0x8,%eax
   1057c:	8b 04 85 38 11 03 00 	mov    0x31138(,%eax,4),%eax
   10583:	8b 54 24 30          	mov    0x30(%esp),%edx
   10587:	0f b6 d2             	movzbl %dl,%edx
   1058a:	c1 e2 02             	shl    $0x2,%edx
   1058d:	01 d0                	add    %edx,%eax
   1058f:	8b 00                	mov    (%eax),%eax
   10591:	89 44 24 0c          	mov    %eax,0xc(%esp)
   10595:	e9 3f 01 00 00       	jmp    106d9 <block_write+0x19f>
	else
		size = 0x7fffffff;
   1059a:	c7 44 24 0c ff ff ff 	movl   $0x7fffffff,0xc(%esp)
   105a1:	7f 
	// 然后针对要写入的字节数count，循环执行以下操作，直到数据全部写入。在循环执行过程中，若当前写入数据的块号
	// 已经大于或等于指定设备的总块数，则返回已写字节数并退出。然后再计算在当前处理的数据块中可写入的字节数。如果
	// 需要写入的字节数填不满一块，那么就只需写count字节。如果正好写1块数据内容，则直接申请1块高速缓冲块，并把
	// 用户数据放入即可。否则就需要读入将被写入部分数据的数据块，并预读下两块数据。然后将块号递增1,为下次操作做好
	// 准备。如果缓冲块操作失败，则返回已写字节数，如果没有写入任何字节，则返回出错号（负数）。
	while (count > 0) {
   105a2:	e9 32 01 00 00       	jmp    106d9 <block_write+0x19f>
		if (block >= size)
   105a7:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   105ab:	3b 44 24 0c          	cmp    0xc(%esp),%eax
   105af:	7c 1a                	jl     105cb <block_write+0x91>
			return written ? written : -EIO;
   105b1:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   105b6:	74 09                	je     105c1 <block_write+0x87>
   105b8:	8b 44 24 10          	mov    0x10(%esp),%eax
   105bc:	e9 27 01 00 00       	jmp    106e8 <block_write+0x1ae>
   105c1:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   105c6:	e9 1d 01 00 00       	jmp    106e8 <block_write+0x1ae>
		chars = BLOCK_SIZE - offset;
   105cb:	b8 00 04 00 00       	mov    $0x400,%eax
   105d0:	2b 44 24 18          	sub    0x18(%esp),%eax
   105d4:	89 44 24 14          	mov    %eax,0x14(%esp)
		if (chars > count)
   105d8:	8b 44 24 14          	mov    0x14(%esp),%eax
   105dc:	3b 44 24 3c          	cmp    0x3c(%esp),%eax
   105e0:	7e 08                	jle    105ea <block_write+0xb0>
			chars = count;
   105e2:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   105e6:	89 44 24 14          	mov    %eax,0x14(%esp)
		if (chars == BLOCK_SIZE)
   105ea:	81 7c 24 14 00 04 00 	cmpl   $0x400,0x14(%esp)
   105f1:	00 
   105f2:	75 19                	jne    1060d <block_write+0xd3>
			bh = getblk(dev, block);
   105f4:	83 ec 08             	sub    $0x8,%esp
   105f7:	ff 74 24 24          	pushl  0x24(%esp)
   105fb:	ff 74 24 3c          	pushl  0x3c(%esp)
   105ff:	e8 80 ee ff ff       	call   f484 <getblk>
   10604:	83 c4 10             	add    $0x10,%esp
   10607:	89 44 24 08          	mov    %eax,0x8(%esp)
   1060b:	eb 29                	jmp    10636 <block_write+0xfc>
		else
			bh = breada(dev, block, block + 1, block + 2, -1);
   1060d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   10611:	8d 50 02             	lea    0x2(%eax),%edx
   10614:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   10618:	83 c0 01             	add    $0x1,%eax
   1061b:	83 ec 0c             	sub    $0xc,%esp
   1061e:	6a ff                	push   $0xffffffff
   10620:	52                   	push   %edx
   10621:	50                   	push   %eax
   10622:	ff 74 24 34          	pushl  0x34(%esp)
   10626:	ff 74 24 4c          	pushl  0x4c(%esp)
   1062a:	e8 24 f2 ff ff       	call   f853 <breada>
   1062f:	83 c4 20             	add    $0x20,%esp
   10632:	89 44 24 08          	mov    %eax,0x8(%esp)
		block++;
   10636:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
		if (!bh)
   1063b:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   10640:	75 1a                	jne    1065c <block_write+0x122>
			return written ? written : -EIO;
   10642:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   10647:	74 09                	je     10652 <block_write+0x118>
   10649:	8b 44 24 10          	mov    0x10(%esp),%eax
   1064d:	e9 96 00 00 00       	jmp    106e8 <block_write+0x1ae>
   10652:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   10657:	e9 8c 00 00 00       	jmp    106e8 <block_write+0x1ae>
		// 接着先把指针p指向读出数据的缓冲块中开始写入数据的位置处。若最后一次循环写入的数据不足一块，则需要从块开始
		// 处填写（修改）所需的字节，因此这里需预先设置offset为零。此后将文件中偏移指针pos前移此次将要写的字节数chars
		// 并累加这些要写的字节数到统计值written中。再把还需要写的计数值count减去此次要写的字节数chars。然后我们从
		// 用户缓冲区复制chars个字节到p指向的高速缓冲块中开始写入的位置处。复制完后就设置该缓冲区块已修改标志，并释放
		// 该缓冲区（即该缓冲区引用计数递减1）。
		p = offset + bh->b_data;
   1065c:	8b 44 24 08          	mov    0x8(%esp),%eax
   10660:	8b 10                	mov    (%eax),%edx
   10662:	8b 44 24 18          	mov    0x18(%esp),%eax
   10666:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
		offset = 0;
   10669:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   10670:	00 
		*pos += chars;
   10671:	8b 44 24 34          	mov    0x34(%esp),%eax
   10675:	8b 10                	mov    (%eax),%edx
   10677:	8b 44 24 14          	mov    0x14(%esp),%eax
   1067b:	01 c2                	add    %eax,%edx
   1067d:	8b 44 24 34          	mov    0x34(%esp),%eax
   10681:	89 10                	mov    %edx,(%eax)
		written += chars;               						// 累计写入字节数。
   10683:	8b 44 24 14          	mov    0x14(%esp),%eax
   10687:	01 44 24 10          	add    %eax,0x10(%esp)
		count -= chars;
   1068b:	8b 44 24 14          	mov    0x14(%esp),%eax
   1068f:	29 44 24 3c          	sub    %eax,0x3c(%esp)
		while (chars-- > 0)
   10693:	eb 1e                	jmp    106b3 <block_write+0x179>
			*(p++) = get_fs_byte(buf++);
   10695:	89 de                	mov    %ebx,%esi
   10697:	8d 5e 01             	lea    0x1(%esi),%ebx
   1069a:	8b 44 24 38          	mov    0x38(%esp),%eax
   1069e:	8d 50 01             	lea    0x1(%eax),%edx
   106a1:	89 54 24 38          	mov    %edx,0x38(%esp)
   106a5:	83 ec 0c             	sub    $0xc,%esp
   106a8:	50                   	push   %eax
   106a9:	e8 64 fe ff ff       	call   10512 <get_fs_byte>
   106ae:	83 c4 10             	add    $0x10,%esp
   106b1:	88 06                	mov    %al,(%esi)
		p = offset + bh->b_data;
		offset = 0;
		*pos += chars;
		written += chars;               						// 累计写入字节数。
		count -= chars;
		while (chars-- > 0)
   106b3:	8b 44 24 14          	mov    0x14(%esp),%eax
   106b7:	8d 50 ff             	lea    -0x1(%eax),%edx
   106ba:	89 54 24 14          	mov    %edx,0x14(%esp)
   106be:	85 c0                	test   %eax,%eax
   106c0:	7f d3                	jg     10695 <block_write+0x15b>
			*(p++) = get_fs_byte(buf++);
		bh->b_dirt = 1;
   106c2:	8b 44 24 08          	mov    0x8(%esp),%eax
   106c6:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
		brelse(bh);
   106ca:	83 ec 0c             	sub    $0xc,%esp
   106cd:	ff 74 24 14          	pushl  0x14(%esp)
   106d1:	e8 67 ef ff ff       	call   f63d <brelse>
   106d6:	83 c4 10             	add    $0x10,%esp
	// 然后针对要写入的字节数count，循环执行以下操作，直到数据全部写入。在循环执行过程中，若当前写入数据的块号
	// 已经大于或等于指定设备的总块数，则返回已写字节数并退出。然后再计算在当前处理的数据块中可写入的字节数。如果
	// 需要写入的字节数填不满一块，那么就只需写count字节。如果正好写1块数据内容，则直接申请1块高速缓冲块，并把
	// 用户数据放入即可。否则就需要读入将被写入部分数据的数据块，并预读下两块数据。然后将块号递增1,为下次操作做好
	// 准备。如果缓冲块操作失败，则返回已写字节数，如果没有写入任何字节，则返回出错号（负数）。
	while (count > 0) {
   106d9:	83 7c 24 3c 00       	cmpl   $0x0,0x3c(%esp)
   106de:	0f 8f c3 fe ff ff    	jg     105a7 <block_write+0x6d>
		while (chars-- > 0)
			*(p++) = get_fs_byte(buf++);
		bh->b_dirt = 1;
		brelse(bh);
	}
	return written;                         					// 返回已写入的字节数，正常退出。
   106e4:	8b 44 24 10          	mov    0x10(%esp),%eax
}
   106e8:	83 c4 24             	add    $0x24,%esp
   106eb:	5b                   	pop    %ebx
   106ec:	5e                   	pop    %esi
   106ed:	c3                   	ret    

000106ee <block_read>:

// 数据块读函数 - 从指定设备和位置处读入指定长度数据到用户缓冲区中。
// 参数：dev - 设备号；pos - 设备文件中领衔量指针；buf - 用户空间中缓冲区地址；count - 要传送的字节数。
// 返回已读入字节数。若没有读入任何字节或出错，则返回出错号。
int block_read(int dev, unsigned long * pos, char * buf, int count)
{
   106ee:	53                   	push   %ebx
   106ef:	83 ec 28             	sub    $0x28,%esp
	int block = *pos >> BLOCK_SIZE_BITS;
   106f2:	8b 44 24 34          	mov    0x34(%esp),%eax
   106f6:	8b 00                	mov    (%eax),%eax
   106f8:	c1 e8 0a             	shr    $0xa,%eax
   106fb:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	int offset = *pos & (BLOCK_SIZE - 1);
   106ff:	8b 44 24 34          	mov    0x34(%esp),%eax
   10703:	8b 00                	mov    (%eax),%eax
   10705:	25 ff 03 00 00       	and    $0x3ff,%eax
   1070a:	89 44 24 18          	mov    %eax,0x18(%esp)
	int chars;
	int size;
	int read = 0;
   1070e:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   10715:	00 
	register char * p;              							// 局部寄存器变量，被存放在寄存器中。

	// 在读一个块设备文件时，要求读的总数据块数当然不能超过指定设备上容许的最大数据块总数。因此这里首先取出指定
	// 设备的块总数size来比较和限制函数参数给定的读入数据长度。如果系统中没有对设备指定长度，就使用默认长度
	// 0x7fffffff（2GB个块）。
	if (blk_size[MAJOR(dev)])
   10716:	8b 44 24 30          	mov    0x30(%esp),%eax
   1071a:	c1 e8 08             	shr    $0x8,%eax
   1071d:	8b 04 85 38 11 03 00 	mov    0x31138(,%eax,4),%eax
   10724:	85 c0                	test   %eax,%eax
   10726:	74 25                	je     1074d <block_read+0x5f>
		size = blk_size[MAJOR(dev)][MINOR(dev)];
   10728:	8b 44 24 30          	mov    0x30(%esp),%eax
   1072c:	c1 e8 08             	shr    $0x8,%eax
   1072f:	8b 04 85 38 11 03 00 	mov    0x31138(,%eax,4),%eax
   10736:	8b 54 24 30          	mov    0x30(%esp),%edx
   1073a:	0f b6 d2             	movzbl %dl,%edx
   1073d:	c1 e2 02             	shl    $0x2,%edx
   10740:	01 d0                	add    %edx,%eax
   10742:	8b 00                	mov    (%eax),%eax
   10744:	89 44 24 10          	mov    %eax,0x10(%esp)
   10748:	e9 19 01 00 00       	jmp    10866 <block_read+0x178>
	else
		size = 0x7fffffff;
   1074d:	c7 44 24 10 ff ff ff 	movl   $0x7fffffff,0x10(%esp)
   10754:	7f 
	// 然后针对要读入的字节数count，循环执行以下操作，直到数据全部读入。在循环执行过程中，若当前读入数据的块号已经
	// 大于或等于指定设备的总块数，则返回已读字节数并退出。然后再计算在当前处理的数据块中需读入的字节数。如果需要读
	// 入的字节数还不满一块，那么就只需读count字节。然后调用读块函数breada()读入需要的数据块，并预读下两块数据，
	// 如果读操作出错，则返回已读字节数，如果没有读入任何字节，则返回出错号。然后将块号递增1。为下次操作做好准备。如
	// 果缓冲块担操失败，则返回已写字节数，如果没有读入任何字节，则返回出错号（负数）。
	while (count > 0) {
   10755:	e9 0c 01 00 00       	jmp    10866 <block_read+0x178>
		if (block >= size)
   1075a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1075e:	3b 44 24 10          	cmp    0x10(%esp),%eax
   10762:	7c 1a                	jl     1077e <block_read+0x90>
			return read ? read : -EIO;
   10764:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   10769:	74 09                	je     10774 <block_read+0x86>
   1076b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1076f:	e9 01 01 00 00       	jmp    10875 <block_read+0x187>
   10774:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   10779:	e9 f7 00 00 00       	jmp    10875 <block_read+0x187>
		chars = BLOCK_SIZE - offset;
   1077e:	b8 00 04 00 00       	mov    $0x400,%eax
   10783:	2b 44 24 18          	sub    0x18(%esp),%eax
   10787:	89 44 24 14          	mov    %eax,0x14(%esp)
		if (chars > count)
   1078b:	8b 44 24 14          	mov    0x14(%esp),%eax
   1078f:	3b 44 24 3c          	cmp    0x3c(%esp),%eax
   10793:	7e 08                	jle    1079d <block_read+0xaf>
			chars = count;
   10795:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   10799:	89 44 24 14          	mov    %eax,0x14(%esp)
		if (!(bh = breada(dev, block, block + 1, block + 2, -1)))
   1079d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   107a1:	8d 50 02             	lea    0x2(%eax),%edx
   107a4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   107a8:	83 c0 01             	add    $0x1,%eax
   107ab:	83 ec 0c             	sub    $0xc,%esp
   107ae:	6a ff                	push   $0xffffffff
   107b0:	52                   	push   %edx
   107b1:	50                   	push   %eax
   107b2:	ff 74 24 34          	pushl  0x34(%esp)
   107b6:	ff 74 24 4c          	pushl  0x4c(%esp)
   107ba:	e8 94 f0 ff ff       	call   f853 <breada>
   107bf:	83 c4 20             	add    $0x20,%esp
   107c2:	89 44 24 08          	mov    %eax,0x8(%esp)
   107c6:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   107cb:	75 1a                	jne    107e7 <block_read+0xf9>
			return read ? read : -EIO;
   107cd:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   107d2:	74 09                	je     107dd <block_read+0xef>
   107d4:	8b 44 24 0c          	mov    0xc(%esp),%eax
   107d8:	e9 98 00 00 00       	jmp    10875 <block_read+0x187>
   107dd:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   107e2:	e9 8e 00 00 00       	jmp    10875 <block_read+0x187>
		block++;
   107e7:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
		// 接着先把指针p指向读出盘块中开始读入数据的位置处。若最后一次循环读操作的数据不足一块，则需从块起始处读取所需字
		// 节，因此这里需预先设置offset为零。此后将文件中偏移指针pos前移此次将要读的字节数chars，并且累加这些要读的字节
		// 数到统计值read中。再把还需要读的计数值count减去此次要读的字节数chars。然后我们从高速缓冲块中p指向的开始读的
		// 位置处复制chars个字节到用户缓冲区中，同时把用户缓冲区指针前移。本次复制完后就释放该缓冲块。
		p = offset + bh->b_data;
   107ec:	8b 44 24 08          	mov    0x8(%esp),%eax
   107f0:	8b 10                	mov    (%eax),%edx
   107f2:	8b 44 24 18          	mov    0x18(%esp),%eax
   107f6:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
		offset = 0;
   107f9:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   10800:	00 
		*pos += chars;
   10801:	8b 44 24 34          	mov    0x34(%esp),%eax
   10805:	8b 10                	mov    (%eax),%edx
   10807:	8b 44 24 14          	mov    0x14(%esp),%eax
   1080b:	01 c2                	add    %eax,%edx
   1080d:	8b 44 24 34          	mov    0x34(%esp),%eax
   10811:	89 10                	mov    %edx,(%eax)
		read += chars;                  						// 累计读入字节数。
   10813:	8b 44 24 14          	mov    0x14(%esp),%eax
   10817:	01 44 24 0c          	add    %eax,0xc(%esp)
		count -= chars;
   1081b:	8b 44 24 14          	mov    0x14(%esp),%eax
   1081f:	29 44 24 3c          	sub    %eax,0x3c(%esp)
		while (chars-- > 0)
   10823:	eb 23                	jmp    10848 <block_read+0x15a>
			put_fs_byte(*(p++), buf++);
   10825:	8b 44 24 38          	mov    0x38(%esp),%eax
   10829:	8d 50 01             	lea    0x1(%eax),%edx
   1082c:	89 54 24 38          	mov    %edx,0x38(%esp)
   10830:	89 da                	mov    %ebx,%edx
   10832:	8d 5a 01             	lea    0x1(%edx),%ebx
   10835:	0f b6 12             	movzbl (%edx),%edx
   10838:	0f be d2             	movsbl %dl,%edx
   1083b:	83 ec 08             	sub    $0x8,%esp
   1083e:	50                   	push   %eax
   1083f:	52                   	push   %edx
   10840:	e8 db fc ff ff       	call   10520 <put_fs_byte>
   10845:	83 c4 10             	add    $0x10,%esp
		p = offset + bh->b_data;
		offset = 0;
		*pos += chars;
		read += chars;                  						// 累计读入字节数。
		count -= chars;
		while (chars-- > 0)
   10848:	8b 44 24 14          	mov    0x14(%esp),%eax
   1084c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1084f:	89 54 24 14          	mov    %edx,0x14(%esp)
   10853:	85 c0                	test   %eax,%eax
   10855:	7f ce                	jg     10825 <block_read+0x137>
			put_fs_byte(*(p++), buf++);
		brelse(bh);
   10857:	83 ec 0c             	sub    $0xc,%esp
   1085a:	ff 74 24 14          	pushl  0x14(%esp)
   1085e:	e8 da ed ff ff       	call   f63d <brelse>
   10863:	83 c4 10             	add    $0x10,%esp
	// 然后针对要读入的字节数count，循环执行以下操作，直到数据全部读入。在循环执行过程中，若当前读入数据的块号已经
	// 大于或等于指定设备的总块数，则返回已读字节数并退出。然后再计算在当前处理的数据块中需读入的字节数。如果需要读
	// 入的字节数还不满一块，那么就只需读count字节。然后调用读块函数breada()读入需要的数据块，并预读下两块数据，
	// 如果读操作出错，则返回已读字节数，如果没有读入任何字节，则返回出错号。然后将块号递增1。为下次操作做好准备。如
	// 果缓冲块担操失败，则返回已写字节数，如果没有读入任何字节，则返回出错号（负数）。
	while (count > 0) {
   10866:	83 7c 24 3c 00       	cmpl   $0x0,0x3c(%esp)
   1086b:	0f 8f e9 fe ff ff    	jg     1075a <block_read+0x6c>
		count -= chars;
		while (chars-- > 0)
			put_fs_byte(*(p++), buf++);
		brelse(bh);
	}
	return read;                            					// 返回已读取的字节数，正常退出。
   10871:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   10875:	83 c4 28             	add    $0x28,%esp
   10878:	5b                   	pop    %ebx
   10879:	c3                   	ret    

0001087a <get_fs_byte>:
//// 读取fs段中指定地址处的字节.
// 参数:addr - 指定的内存地址.
// %0 - (返回的字节_v);%1 - (内存地址addr)
// 返回:返回内存fs[addr]处的字节.
static inline unsigned char get_fs_byte(const char * addr)
{
   1087a:	53                   	push   %ebx
	unsigned register char _v;

	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   1087b:	8b 44 24 08          	mov    0x8(%esp),%eax
   1087f:	64 8a 00             	mov    %fs:(%eax),%al
   10882:	89 c3                	mov    %eax,%ebx
	return _v;
   10884:	89 d8                	mov    %ebx,%eax
}
   10886:	5b                   	pop    %ebx
   10887:	c3                   	ret    

00010888 <put_fs_byte>:

//// 将一字节存放在fs段中指定内存地址处.
// 参数:val - 字节值;addr - 内存地址.
// %0 - 寄存器(字节值val);%1 - (内存地址addr).
static inline void put_fs_byte(char val,char *addr)
{
   10888:	83 ec 04             	sub    $0x4,%esp
   1088b:	8b 44 24 08          	mov    0x8(%esp),%eax
   1088f:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
   10892:	0f b6 04 24          	movzbl (%esp),%eax
   10896:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1089a:	64 88 02             	mov    %al,%fs:(%edx)
}
   1089d:	90                   	nop
   1089e:	83 c4 04             	add    $0x4,%esp
   108a1:	c3                   	ret    

000108a2 <rw_ttyx>:

// 串口终端读写操作函数.
// 参数:rw - 读写命令;minor - 终端子设备号;buf - 缓冲区;count - 读写字节数;pos - 读写操作当前指针,对于终端操作,该指针无用.
// 返回:实际读写的字节数.若失败则返回出错码.
static int rw_ttyx(int rw, unsigned minor, char * buf, int count, off_t * pos)
{
   108a2:	83 ec 0c             	sub    $0xc,%esp
	return ((rw == READ) ? tty_read(minor, buf, count): tty_write(minor, buf, count));
   108a5:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   108aa:	75 19                	jne    108c5 <rw_ttyx+0x23>
   108ac:	83 ec 04             	sub    $0x4,%esp
   108af:	ff 74 24 20          	pushl  0x20(%esp)
   108b3:	ff 74 24 20          	pushl  0x20(%esp)
   108b7:	ff 74 24 20          	pushl  0x20(%esp)
   108bb:	e8 96 8a 00 00       	call   19356 <tty_read>
   108c0:	83 c4 10             	add    $0x10,%esp
   108c3:	eb 17                	jmp    108dc <rw_ttyx+0x3a>
   108c5:	83 ec 04             	sub    $0x4,%esp
   108c8:	ff 74 24 20          	pushl  0x20(%esp)
   108cc:	ff 74 24 20          	pushl  0x20(%esp)
   108d0:	ff 74 24 20          	pushl  0x20(%esp)
   108d4:	e8 b8 8e 00 00       	call   19791 <tty_write>
   108d9:	83 c4 10             	add    $0x10,%esp
}
   108dc:	83 c4 0c             	add    $0xc,%esp
   108df:	c3                   	ret    

000108e0 <rw_tty>:

// 终端读写操作函数。
// 同rw_ttyx()类似，只是增加了对进程是否有控制终端的检测。
static int rw_tty(int rw, unsigned minor, char * buf, int count, off_t * pos)
{
   108e0:	83 ec 0c             	sub    $0xc,%esp
	// 若进程没有对应的控制终端，则返回出错号。否则调用终端读写函数rw_ttyx()，并返回实际读写字节数。
	if (current->tty < 0)
   108e3:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   108e8:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
   108ee:	85 c0                	test   %eax,%eax
   108f0:	79 07                	jns    108f9 <rw_tty+0x19>
		return -EPERM;
   108f2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   108f7:	eb 27                	jmp    10920 <rw_tty+0x40>
	return rw_ttyx(rw, current->tty, buf, count, pos);
   108f9:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   108fe:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
   10904:	83 ec 0c             	sub    $0xc,%esp
   10907:	ff 74 24 2c          	pushl  0x2c(%esp)
   1090b:	ff 74 24 2c          	pushl  0x2c(%esp)
   1090f:	ff 74 24 2c          	pushl  0x2c(%esp)
   10913:	50                   	push   %eax
   10914:	ff 74 24 2c          	pushl  0x2c(%esp)
   10918:	e8 85 ff ff ff       	call   108a2 <rw_ttyx>
   1091d:	83 c4 20             	add    $0x20,%esp
}
   10920:	83 c4 0c             	add    $0xc,%esp
   10923:	c3                   	ret    

00010924 <rw_ram>:

// 内在数据读写。未实现。
static int rw_ram(int rw,char * buf, int count, off_t *pos)
{
	return -EIO;
   10924:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
}
   10929:	c3                   	ret    

0001092a <rw_mem>:

// 物理内存数据读写操作函数。未实现。
static int rw_mem(int rw,char * buf, int count, off_t * pos)
{
	return -EIO;
   1092a:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
}
   1092f:	c3                   	ret    

00010930 <rw_kmem>:

// 内核虚拟内存数据读写函数。未实现。
static int rw_kmem(int rw,char * buf, int count, off_t * pos)
{
	return -EIO;
   10930:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
}
   10935:	c3                   	ret    

00010936 <rw_port>:

// 端口读写操作函数。
// 参数：rw - 读写命令；buf - 缓冲区；count - 读写字节数；post - 端口地址。
// 返回：实际读写的字节数。
static int rw_port(int rw,char * buf, int count, off_t * pos)
{
   10936:	83 ec 10             	sub    $0x10,%esp
	int i = *pos;
   10939:	8b 44 24 20          	mov    0x20(%esp),%eax
   1093d:	8b 00                	mov    (%eax),%eax
   1093f:	89 44 24 0c          	mov    %eax,0xc(%esp)

	// 对于所要求读写的字节数，并且端口地址小于64k时，循环执行单个字节的读写操作。
	// 若是读命令，则从端口i中读取一字节内容并放到用户缓冲区中。若是写命令，则从用户数据缓冲区中取一字节输出到端口i。
	while (count-- > 0 && i < 65536) {
   10943:	eb 4f                	jmp    10994 <rw_port+0x5e>
		if (rw == READ)
   10945:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
   1094a:	75 2a                	jne    10976 <rw_port+0x40>
			put_fs_byte(inb(i), buf++);
   1094c:	8b 4c 24 18          	mov    0x18(%esp),%ecx
   10950:	8d 41 01             	lea    0x1(%ecx),%eax
   10953:	89 44 24 18          	mov    %eax,0x18(%esp)
   10957:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1095b:	89 c2                	mov    %eax,%edx
   1095d:	ec                   	in     (%dx),%al
   1095e:	88 44 24 0b          	mov    %al,0xb(%esp)
   10962:	0f b6 44 24 0b       	movzbl 0xb(%esp),%eax
   10967:	0f be c0             	movsbl %al,%eax
   1096a:	51                   	push   %ecx
   1096b:	50                   	push   %eax
   1096c:	e8 17 ff ff ff       	call   10888 <put_fs_byte>
   10971:	83 c4 08             	add    $0x8,%esp
   10974:	eb 19                	jmp    1098f <rw_port+0x59>
		else
			outb(get_fs_byte(buf++), i);
   10976:	8b 44 24 18          	mov    0x18(%esp),%eax
   1097a:	8d 50 01             	lea    0x1(%eax),%edx
   1097d:	89 54 24 18          	mov    %edx,0x18(%esp)
   10981:	50                   	push   %eax
   10982:	e8 f3 fe ff ff       	call   1087a <get_fs_byte>
   10987:	83 c4 04             	add    $0x4,%esp
   1098a:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1098e:	ee                   	out    %al,(%dx)
		i++;            						// 前移一个端口。[好奇怪，端口地址为什么会变化？]
   1098f:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
{
	int i = *pos;

	// 对于所要求读写的字节数，并且端口地址小于64k时，循环执行单个字节的读写操作。
	// 若是读命令，则从端口i中读取一字节内容并放到用户缓冲区中。若是写命令，则从用户数据缓冲区中取一字节输出到端口i。
	while (count-- > 0 && i < 65536) {
   10994:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   10998:	8d 50 ff             	lea    -0x1(%eax),%edx
   1099b:	89 54 24 1c          	mov    %edx,0x1c(%esp)
   1099f:	85 c0                	test   %eax,%eax
   109a1:	7e 0a                	jle    109ad <rw_port+0x77>
   109a3:	81 7c 24 0c ff ff 00 	cmpl   $0xffff,0xc(%esp)
   109aa:	00 
   109ab:	7e 98                	jle    10945 <rw_port+0xf>
		else
			outb(get_fs_byte(buf++), i);
		i++;            						// 前移一个端口。[好奇怪，端口地址为什么会变化？]
	}
	// 然后计算读/写的字节数，调整相应读写指针，并返回读/写的字节数。
	i -= *pos;
   109ad:	8b 44 24 20          	mov    0x20(%esp),%eax
   109b1:	8b 00                	mov    (%eax),%eax
   109b3:	29 44 24 0c          	sub    %eax,0xc(%esp)
	*pos += i;
   109b7:	8b 44 24 20          	mov    0x20(%esp),%eax
   109bb:	8b 10                	mov    (%eax),%edx
   109bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
   109c1:	01 c2                	add    %eax,%edx
   109c3:	8b 44 24 20          	mov    0x20(%esp),%eax
   109c7:	89 10                	mov    %edx,(%eax)
	return i;
   109c9:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   109cd:	83 c4 10             	add    $0x10,%esp
   109d0:	c3                   	ret    

000109d1 <rw_memory>:

// 内存读写操作函数。
static int rw_memory(int rw, unsigned minor, char * buf, int count, off_t * pos)
{
	// 根据内存设备子设备号，分别调用不同的内存读写函数。
	switch(minor) {
   109d1:	83 7c 24 08 04       	cmpl   $0x4,0x8(%esp)
   109d6:	0f 87 8c 00 00 00    	ja     10a68 <rw_memory+0x97>
   109dc:	8b 44 24 08          	mov    0x8(%esp),%eax
   109e0:	c1 e0 02             	shl    $0x2,%eax
   109e3:	05 18 3a 02 00       	add    $0x23a18,%eax
   109e8:	8b 00                	mov    (%eax),%eax
   109ea:	ff e0                	jmp    *%eax
		case 0:
			return rw_ram(rw, buf, count, pos);
   109ec:	ff 74 24 14          	pushl  0x14(%esp)
   109f0:	ff 74 24 14          	pushl  0x14(%esp)
   109f4:	ff 74 24 14          	pushl  0x14(%esp)
   109f8:	ff 74 24 10          	pushl  0x10(%esp)
   109fc:	e8 23 ff ff ff       	call   10924 <rw_ram>
   10a01:	83 c4 10             	add    $0x10,%esp
   10a04:	eb 67                	jmp    10a6d <rw_memory+0x9c>
		case 1:
			return rw_mem(rw, buf, count, pos);
   10a06:	ff 74 24 14          	pushl  0x14(%esp)
   10a0a:	ff 74 24 14          	pushl  0x14(%esp)
   10a0e:	ff 74 24 14          	pushl  0x14(%esp)
   10a12:	ff 74 24 10          	pushl  0x10(%esp)
   10a16:	e8 0f ff ff ff       	call   1092a <rw_mem>
   10a1b:	83 c4 10             	add    $0x10,%esp
   10a1e:	eb 4d                	jmp    10a6d <rw_memory+0x9c>
		case 2:
			return rw_kmem(rw, buf, count, pos);
   10a20:	ff 74 24 14          	pushl  0x14(%esp)
   10a24:	ff 74 24 14          	pushl  0x14(%esp)
   10a28:	ff 74 24 14          	pushl  0x14(%esp)
   10a2c:	ff 74 24 10          	pushl  0x10(%esp)
   10a30:	e8 fb fe ff ff       	call   10930 <rw_kmem>
   10a35:	83 c4 10             	add    $0x10,%esp
   10a38:	eb 33                	jmp    10a6d <rw_memory+0x9c>
		case 3:
			return (rw == READ) ? 0 : count;					/* rw_null */
   10a3a:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
   10a3f:	74 06                	je     10a47 <rw_memory+0x76>
   10a41:	8b 44 24 10          	mov    0x10(%esp),%eax
   10a45:	eb 26                	jmp    10a6d <rw_memory+0x9c>
   10a47:	b8 00 00 00 00       	mov    $0x0,%eax
   10a4c:	eb 1f                	jmp    10a6d <rw_memory+0x9c>
		case 4:
			return rw_port(rw, buf, count, pos);
   10a4e:	ff 74 24 14          	pushl  0x14(%esp)
   10a52:	ff 74 24 14          	pushl  0x14(%esp)
   10a56:	ff 74 24 14          	pushl  0x14(%esp)
   10a5a:	ff 74 24 10          	pushl  0x10(%esp)
   10a5e:	e8 d3 fe ff ff       	call   10936 <rw_port>
   10a63:	83 c4 10             	add    $0x10,%esp
   10a66:	eb 05                	jmp    10a6d <rw_memory+0x9c>
		default:
			return -EIO;
   10a68:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
	}
}
   10a6d:	c3                   	ret    

00010a6e <rw_char>:

// 字符设备读写操作函数
// 参数:rw - 读写命令;dev - 设备号;buf - 缓冲区;count - 读写字节数;pos - 读写指针.
// 返回:实际读/写字节数.
int rw_char(int rw, int dev, char * buf, int count, off_t * pos)
{
   10a6e:	83 ec 1c             	sub    $0x1c,%esp
	crw_ptr call_addr;

	// 如果设备号超出系统设备数,则返回出错码.如果该设备没有对应的读/写函数,也返回出错码.否则调用对应设备的读写操作函数,并返回实际读/写的字节数.
	if (MAJOR(dev) >= NRDEVS)
   10a71:	8b 44 24 24          	mov    0x24(%esp),%eax
   10a75:	c1 e8 08             	shr    $0x8,%eax
   10a78:	83 f8 07             	cmp    $0x7,%eax
   10a7b:	76 07                	jbe    10a84 <rw_char+0x16>
		return -ENODEV;
   10a7d:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
   10a82:	eb 44                	jmp    10ac8 <rw_char+0x5a>
	if (!(call_addr = crw_table[MAJOR(dev)]))
   10a84:	8b 44 24 24          	mov    0x24(%esp),%eax
   10a88:	c1 e8 08             	shr    $0x8,%eax
   10a8b:	8b 04 85 80 e3 02 00 	mov    0x2e380(,%eax,4),%eax
   10a92:	89 44 24 0c          	mov    %eax,0xc(%esp)
   10a96:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   10a9b:	75 07                	jne    10aa4 <rw_char+0x36>
		return -ENODEV;
   10a9d:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
   10aa2:	eb 24                	jmp    10ac8 <rw_char+0x5a>
	return call_addr(rw, MINOR(dev), buf, count, pos);
   10aa4:	8b 44 24 24          	mov    0x24(%esp),%eax
   10aa8:	0f b6 c0             	movzbl %al,%eax
   10aab:	83 ec 0c             	sub    $0xc,%esp
   10aae:	ff 74 24 3c          	pushl  0x3c(%esp)
   10ab2:	ff 74 24 3c          	pushl  0x3c(%esp)
   10ab6:	ff 74 24 3c          	pushl  0x3c(%esp)
   10aba:	50                   	push   %eax
   10abb:	ff 74 24 3c          	pushl  0x3c(%esp)
   10abf:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   10ac3:	ff d0                	call   *%eax
   10ac5:	83 c4 20             	add    $0x20,%esp
}
   10ac8:	83 c4 1c             	add    $0x1c,%esp
   10acb:	c3                   	ret    

00010acc <get_fs_byte>:
//// 读取fs段中指定地址处的字节.
// 参数:addr - 指定的内存地址.
// %0 - (返回的字节_v);%1 - (内存地址addr)
// 返回:返回内存fs[addr]处的字节.
static inline unsigned char get_fs_byte(const char * addr)
{
   10acc:	53                   	push   %ebx
	unsigned register char _v;

	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   10acd:	8b 44 24 08          	mov    0x8(%esp),%eax
   10ad1:	64 8a 00             	mov    %fs:(%eax),%al
   10ad4:	89 c3                	mov    %eax,%ebx
	return _v;
   10ad6:	89 d8                	mov    %ebx,%eax
}
   10ad8:	5b                   	pop    %ebx
   10ad9:	c3                   	ret    

00010ada <put_fs_byte>:

//// 将一字节存放在fs段中指定内存地址处.
// 参数:val - 字节值;addr - 内存地址.
// %0 - 寄存器(字节值val);%1 - (内存地址addr).
static inline void put_fs_byte(char val,char *addr)
{
   10ada:	83 ec 04             	sub    $0x4,%esp
   10add:	8b 44 24 08          	mov    0x8(%esp),%eax
   10ae1:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
   10ae4:	0f b6 04 24          	movzbl (%esp),%eax
   10ae8:	8b 54 24 0c          	mov    0xc(%esp),%edx
   10aec:	64 88 02             	mov    %al,%fs:(%edx)
}
   10aef:	90                   	nop
   10af0:	83 c4 04             	add    $0x4,%esp
   10af3:	c3                   	ret    

00010af4 <file_read>:

// 文件读函数 - 根据i节点和文件结构，读取文件中数据。
// 由i节点我们可以知道设备号，由filp结构可以知道文件中当前读写指针位置。buf指定用户空间中缓冲区的位置，count是需要读取的字节数。
// 返回值是实际读取的字节数，或出错号（小于0）。
int file_read(struct m_inode * inode, struct file * filp, char * buf, int count)
{
   10af4:	83 ec 2c             	sub    $0x2c,%esp

	// 首先判断参数的有效性。若需要读取的字节计数count小于等于零，则返回0.若还需要读取的字节数不等于0,就循环执行下面操作，直到数据全
	// 部读出或遇到问题。在读循环操作过程中，我们根据i节点和文件表结构信息，并利用bmap()得到包含文件当前读写位置的数据块在设备上对应
	// 的逻辑块号nr。若nr不为0,则从i节点指定的设备上读取该逻辑块。如果读操作失败则退出循环。若nr为0,表示指定的数据块不存在，置缓冲
	// 块指针为NULL。
	if ((left = count) <= 0)
   10af7:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   10afb:	89 44 24 1c          	mov    %eax,0x1c(%esp)
   10aff:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   10b04:	0f 8f 43 01 00 00    	jg     10c4d <file_read+0x159>
		return 0;
   10b0a:	b8 00 00 00 00       	mov    $0x0,%eax
   10b0f:	e9 83 01 00 00       	jmp    10c97 <file_read+0x1a3>
	while (left) {
		// 根据文件的读写偏移位置得到当前写位置对应的逻辑块号
		if (nr = bmap(inode, (filp->f_pos) / BLOCK_SIZE)) {
   10b14:	8b 44 24 34          	mov    0x34(%esp),%eax
   10b18:	8b 40 0c             	mov    0xc(%eax),%eax
   10b1b:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
   10b21:	85 c0                	test   %eax,%eax
   10b23:	0f 48 c2             	cmovs  %edx,%eax
   10b26:	c1 f8 0a             	sar    $0xa,%eax
   10b29:	83 ec 08             	sub    $0x8,%esp
   10b2c:	50                   	push   %eax
   10b2d:	ff 74 24 3c          	pushl  0x3c(%esp)
   10b31:	e8 2e db ff ff       	call   e664 <bmap>
   10b36:	83 c4 10             	add    $0x10,%esp
   10b39:	89 44 24 0c          	mov    %eax,0xc(%esp)
   10b3d:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   10b42:	74 2b                	je     10b6f <file_read+0x7b>
			// 得到该逻辑块号对应的高速缓冲区
			if (!(bh = bread(inode->i_dev, nr)))
   10b44:	8b 44 24 30          	mov    0x30(%esp),%eax
   10b48:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   10b4c:	0f b7 c0             	movzwl %ax,%eax
   10b4f:	83 ec 08             	sub    $0x8,%esp
   10b52:	ff 74 24 14          	pushl  0x14(%esp)
   10b56:	50                   	push   %eax
   10b57:	e8 37 eb ff ff       	call   f693 <bread>
   10b5c:	83 c4 10             	add    $0x10,%esp
   10b5f:	89 44 24 14          	mov    %eax,0x14(%esp)
   10b63:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
   10b68:	75 0d                	jne    10b77 <file_read+0x83>
				break;
   10b6a:	e9 e9 00 00 00       	jmp    10c58 <file_read+0x164>
		} else
			bh = NULL;
   10b6f:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
   10b76:	00 
		// 接着我们计算文件读写指针在数据块中的偏移值nr，则在该数据块中我们希望读取的字节数为（BLOCK_SIZE - nr）。然后和现在还需读取的
		// 字节数left作比较，其中小值即为本次操作需读取的字节数chars。如果（BLOCK_SIZE - nr）> left，则说明该块是需要读取的最后一块
		// 数据，反之还需要读取下一块数据。之后调整读写文件指针。指针前移此次将读取的字节数chars。剩余字节数left相应减去chars。
		nr = filp->f_pos % BLOCK_SIZE;
   10b77:	8b 44 24 34          	mov    0x34(%esp),%eax
   10b7b:	8b 40 0c             	mov    0xc(%eax),%eax
   10b7e:	99                   	cltd   
   10b7f:	c1 ea 16             	shr    $0x16,%edx
   10b82:	01 d0                	add    %edx,%eax
   10b84:	25 ff 03 00 00       	and    $0x3ff,%eax
   10b89:	29 d0                	sub    %edx,%eax
   10b8b:	89 44 24 0c          	mov    %eax,0xc(%esp)
		chars = MIN( BLOCK_SIZE - nr , left );
   10b8f:	b8 00 04 00 00       	mov    $0x400,%eax
   10b94:	2b 44 24 0c          	sub    0xc(%esp),%eax
   10b98:	89 c2                	mov    %eax,%edx
   10b9a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   10b9e:	39 c2                	cmp    %eax,%edx
   10ba0:	0f 4e c2             	cmovle %edx,%eax
   10ba3:	89 44 24 18          	mov    %eax,0x18(%esp)
		filp->f_pos += chars;
   10ba7:	8b 44 24 34          	mov    0x34(%esp),%eax
   10bab:	8b 50 0c             	mov    0xc(%eax),%edx
   10bae:	8b 44 24 18          	mov    0x18(%esp),%eax
   10bb2:	01 c2                	add    %eax,%edx
   10bb4:	8b 44 24 34          	mov    0x34(%esp),%eax
   10bb8:	89 50 0c             	mov    %edx,0xc(%eax)
		left -= chars;
   10bbb:	8b 44 24 18          	mov    0x18(%esp),%eax
   10bbf:	29 44 24 1c          	sub    %eax,0x1c(%esp)
		// 若上面从设备上读到了数据，则将p指向缓冲块中开始读取数据的位置，并且复制chars字节到用户缓冲区buf中。否则往用户缓冲区中填入chars
		// 个值字节。
		if (bh) {
   10bc3:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
   10bc8:	74 74                	je     10c3e <file_read+0x14a>
			char * p = nr + bh->b_data;
   10bca:	8b 44 24 14          	mov    0x14(%esp),%eax
   10bce:	8b 10                	mov    (%eax),%edx
   10bd0:	8b 44 24 0c          	mov    0xc(%esp),%eax
   10bd4:	01 d0                	add    %edx,%eax
   10bd6:	89 44 24 10          	mov    %eax,0x10(%esp)
			while (chars-- > 0)
   10bda:	eb 29                	jmp    10c05 <file_read+0x111>
				put_fs_byte(*(p++), buf++);
   10bdc:	8b 44 24 38          	mov    0x38(%esp),%eax
   10be0:	8d 50 01             	lea    0x1(%eax),%edx
   10be3:	89 54 24 38          	mov    %edx,0x38(%esp)
   10be7:	8b 54 24 10          	mov    0x10(%esp),%edx
   10beb:	8d 4a 01             	lea    0x1(%edx),%ecx
   10bee:	89 4c 24 10          	mov    %ecx,0x10(%esp)
   10bf2:	0f b6 12             	movzbl (%edx),%edx
   10bf5:	0f be d2             	movsbl %dl,%edx
   10bf8:	83 ec 08             	sub    $0x8,%esp
   10bfb:	50                   	push   %eax
   10bfc:	52                   	push   %edx
   10bfd:	e8 d8 fe ff ff       	call   10ada <put_fs_byte>
   10c02:	83 c4 10             	add    $0x10,%esp
		left -= chars;
		// 若上面从设备上读到了数据，则将p指向缓冲块中开始读取数据的位置，并且复制chars字节到用户缓冲区buf中。否则往用户缓冲区中填入chars
		// 个值字节。
		if (bh) {
			char * p = nr + bh->b_data;
			while (chars-- > 0)
   10c05:	8b 44 24 18          	mov    0x18(%esp),%eax
   10c09:	8d 50 ff             	lea    -0x1(%eax),%edx
   10c0c:	89 54 24 18          	mov    %edx,0x18(%esp)
   10c10:	85 c0                	test   %eax,%eax
   10c12:	7f c8                	jg     10bdc <file_read+0xe8>
				put_fs_byte(*(p++), buf++);
			brelse(bh);
   10c14:	83 ec 0c             	sub    $0xc,%esp
   10c17:	ff 74 24 20          	pushl  0x20(%esp)
   10c1b:	e8 1d ea ff ff       	call   f63d <brelse>
   10c20:	83 c4 10             	add    $0x10,%esp
   10c23:	eb 28                	jmp    10c4d <file_read+0x159>
		} else {
			while (chars-- > 0)
				put_fs_byte(0, buf++);
   10c25:	8b 44 24 38          	mov    0x38(%esp),%eax
   10c29:	8d 50 01             	lea    0x1(%eax),%edx
   10c2c:	89 54 24 38          	mov    %edx,0x38(%esp)
   10c30:	83 ec 08             	sub    $0x8,%esp
   10c33:	50                   	push   %eax
   10c34:	6a 00                	push   $0x0
   10c36:	e8 9f fe ff ff       	call   10ada <put_fs_byte>
   10c3b:	83 c4 10             	add    $0x10,%esp
			char * p = nr + bh->b_data;
			while (chars-- > 0)
				put_fs_byte(*(p++), buf++);
			brelse(bh);
		} else {
			while (chars-- > 0)
   10c3e:	8b 44 24 18          	mov    0x18(%esp),%eax
   10c42:	8d 50 ff             	lea    -0x1(%eax),%edx
   10c45:	89 54 24 18          	mov    %edx,0x18(%esp)
   10c49:	85 c0                	test   %eax,%eax
   10c4b:	7f d8                	jg     10c25 <file_read+0x131>
	// 部读出或遇到问题。在读循环操作过程中，我们根据i节点和文件表结构信息，并利用bmap()得到包含文件当前读写位置的数据块在设备上对应
	// 的逻辑块号nr。若nr不为0,则从i节点指定的设备上读取该逻辑块。如果读操作失败则退出循环。若nr为0,表示指定的数据块不存在，置缓冲
	// 块指针为NULL。
	if ((left = count) <= 0)
		return 0;
	while (left) {
   10c4d:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   10c52:	0f 85 bc fe ff ff    	jne    10b14 <file_read+0x20>
				put_fs_byte(0, buf++);
		}
	}
	// 修改该i节点的访问时间为当前时间。返回读取的字节数，若读取字节数为0,则返回出错号。
	// CURRENT_TIME是定义在include/linux/sched.h上的宏，用于计算UNIX时间。即从1970年1月1日0时0秒开始，到当前时间。单位是秒。
	inode->i_atime = CURRENT_TIME;
   10c58:	a1 00 eb 02 00       	mov    0x2eb00,%eax
   10c5d:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
   10c63:	01 d0                	add    %edx,%eax
   10c65:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   10c6a:	f7 e2                	mul    %edx
   10c6c:	c1 ea 05             	shr    $0x5,%edx
   10c6f:	a1 04 eb 02 00       	mov    0x2eb04,%eax
   10c74:	01 c2                	add    %eax,%edx
   10c76:	8b 44 24 30          	mov    0x30(%esp),%eax
   10c7a:	89 50 28             	mov    %edx,0x28(%eax)
	return (count - left) ? (count-left) : -ERROR;
   10c7d:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   10c81:	3b 44 24 1c          	cmp    0x1c(%esp),%eax
   10c85:	74 0a                	je     10c91 <file_read+0x19d>
   10c87:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   10c8b:	2b 44 24 1c          	sub    0x1c(%esp),%eax
   10c8f:	eb 05                	jmp    10c96 <file_read+0x1a2>
   10c91:	b8 9d ff ff ff       	mov    $0xffffff9d,%eax
   10c96:	90                   	nop
}
   10c97:	83 c4 2c             	add    $0x2c,%esp
   10c9a:	c3                   	ret    

00010c9b <file_write>:

// 文件写函数 - 根据i节点和文件结构信息，将用户数据写入文件中。
// 由i节点我们可以知道设备号，而由file结构可以知道文件中当前读写指针位置。buf指定用户态中缓冲区的位置，count为需要写入的字节数。
// 返回值是实际写入的字节数，或出错号（小于0).
int file_write(struct m_inode * inode, struct file * filp, char * buf, int count)
{
   10c9b:	53                   	push   %ebx
   10c9c:	83 ec 28             	sub    $0x28,%esp
	off_t pos;
	int block, c;
	struct buffer_head * bh;
	char * p;
	int i = 0;
   10c9f:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
   10ca6:	00 
	 */
	/*
	 * OK，当许多进程同时写时，append操作可能不行，但那又怎样。不管怎样那样做会导致混乱一团。
	 */
	// 首先确定数据写入文件的位置。如果是要向文件后添加数据，则将文件读写指针移到文件尾部。否则就将在文件当前读写指针处写入。
	if (filp->f_flags & O_APPEND)
   10ca7:	8b 44 24 34          	mov    0x34(%esp),%eax
   10cab:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   10caf:	0f b7 c0             	movzwl %ax,%eax
   10cb2:	25 00 04 00 00       	and    $0x400,%eax
   10cb7:	85 c0                	test   %eax,%eax
   10cb9:	74 10                	je     10ccb <file_write+0x30>
		pos = inode->i_size;
   10cbb:	8b 44 24 30          	mov    0x30(%esp),%eax
   10cbf:	8b 40 04             	mov    0x4(%eax),%eax
   10cc2:	89 44 24 1c          	mov    %eax,0x1c(%esp)
   10cc6:	e9 35 01 00 00       	jmp    10e00 <file_write+0x165>
	else
		pos = filp->f_pos;
   10ccb:	8b 44 24 34          	mov    0x34(%esp),%eax
   10ccf:	8b 40 0c             	mov    0xc(%eax),%eax
   10cd2:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	// 然后在已写入字节数i（刚开始时为0）小于指定写入字节数count时，循环执行以下操作。在循环操作过程中，我们先取文件数据块
	// 号（pos/BLOCK_SIZE）在设备上对应的逻辑块号block。如果对应的逻辑块不存在就创建一块。如果得到的逻辑块号 = 0,则表示
	// 创建失败，于是退出循环。否则我们根据该逻辑块号读取设备上的相应逻辑块，若出错也退出循环。
	while (i < count) {
   10cd6:	e9 25 01 00 00       	jmp    10e00 <file_write+0x165>
		if (!(block = create_block(inode, pos / BLOCK_SIZE)))
   10cdb:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   10cdf:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
   10ce5:	85 c0                	test   %eax,%eax
   10ce7:	0f 48 c2             	cmovs  %edx,%eax
   10cea:	c1 f8 0a             	sar    $0xa,%eax
   10ced:	83 ec 08             	sub    $0x8,%esp
   10cf0:	50                   	push   %eax
   10cf1:	ff 74 24 3c          	pushl  0x3c(%esp)
   10cf5:	e8 86 d9 ff ff       	call   e680 <create_block>
   10cfa:	83 c4 10             	add    $0x10,%esp
   10cfd:	89 44 24 0c          	mov    %eax,0xc(%esp)
   10d01:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   10d06:	0f 84 04 01 00 00    	je     10e10 <file_write+0x175>
			break;
		if (!(bh = bread(inode->i_dev, block)))
   10d0c:	8b 44 24 30          	mov    0x30(%esp),%eax
   10d10:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   10d14:	0f b7 c0             	movzwl %ax,%eax
   10d17:	83 ec 08             	sub    $0x8,%esp
   10d1a:	ff 74 24 14          	pushl  0x14(%esp)
   10d1e:	50                   	push   %eax
   10d1f:	e8 6f e9 ff ff       	call   f693 <bread>
   10d24:	83 c4 10             	add    $0x10,%esp
   10d27:	89 44 24 08          	mov    %eax,0x8(%esp)
   10d2b:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   10d30:	0f 84 dd 00 00 00    	je     10e13 <file_write+0x178>
			break;
		// 此时缓冲块指针bh正指向刚读入的文件数据块。现在再求出文件当前读写指针在该数据块中的偏移值c，并将指针p指向缓冲块中开始写入
		// 数据的位置，并置该缓冲块已修改标志。对于块中当前指针，从开始读写位置到块末共可写入c = (BLOCK_SIZE - c)个字节。若c大
		// 于剩余还需写入的字节数（count - i），则此次只需再定稿c = (count-i)个字节即可。
		c = pos % BLOCK_SIZE;
   10d36:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   10d3a:	99                   	cltd   
   10d3b:	c1 ea 16             	shr    $0x16,%edx
   10d3e:	01 d0                	add    %edx,%eax
   10d40:	25 ff 03 00 00       	and    $0x3ff,%eax
   10d45:	29 d0                	sub    %edx,%eax
   10d47:	89 44 24 18          	mov    %eax,0x18(%esp)
		p = c + bh->b_data;
   10d4b:	8b 44 24 08          	mov    0x8(%esp),%eax
   10d4f:	8b 10                	mov    (%eax),%edx
   10d51:	8b 44 24 18          	mov    0x18(%esp),%eax
   10d55:	01 d0                	add    %edx,%eax
   10d57:	89 44 24 14          	mov    %eax,0x14(%esp)
		bh->b_dirt = 1;
   10d5b:	8b 44 24 08          	mov    0x8(%esp),%eax
   10d5f:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
		c = BLOCK_SIZE - c;
   10d63:	b8 00 04 00 00       	mov    $0x400,%eax
   10d68:	2b 44 24 18          	sub    0x18(%esp),%eax
   10d6c:	89 44 24 18          	mov    %eax,0x18(%esp)
		if (c > count - i) c = count - i;
   10d70:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   10d74:	2b 44 24 10          	sub    0x10(%esp),%eax
   10d78:	3b 44 24 18          	cmp    0x18(%esp),%eax
   10d7c:	7d 0c                	jge    10d8a <file_write+0xef>
   10d7e:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   10d82:	2b 44 24 10          	sub    0x10(%esp),%eax
   10d86:	89 44 24 18          	mov    %eax,0x18(%esp)
		// 在写入数据之前，我们先预先设置好下一次循环操作要读写文件中的位置。因此我们把pos指针前移此次需要写入的字节数。如果此时pos
		// 位置值超过了文件当前长度，则修改i节点文件长度字段，并置i节点已修改标志。然后把此次要写入的字节数c累加到已写入字节计数值i中，
		// 供循环判断。使用接着双用户缓冲区buf中复制c个字节到调整缓冲块中p指向的开始位置处。复制完后就释放该缓冲块。
		pos += c;
   10d8a:	8b 44 24 18          	mov    0x18(%esp),%eax
   10d8e:	01 44 24 1c          	add    %eax,0x1c(%esp)
		if (pos > inode->i_size) {
   10d92:	8b 44 24 30          	mov    0x30(%esp),%eax
   10d96:	8b 50 04             	mov    0x4(%eax),%edx
   10d99:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   10d9d:	39 c2                	cmp    %eax,%edx
   10d9f:	73 13                	jae    10db4 <file_write+0x119>
			inode->i_size = pos;
   10da1:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   10da5:	8b 44 24 30          	mov    0x30(%esp),%eax
   10da9:	89 50 04             	mov    %edx,0x4(%eax)
			inode->i_dirt = 1;
   10dac:	8b 44 24 30          	mov    0x30(%esp),%eax
   10db0:	c6 40 37 01          	movb   $0x1,0x37(%eax)
		}
		i += c;
   10db4:	8b 44 24 18          	mov    0x18(%esp),%eax
   10db8:	01 44 24 10          	add    %eax,0x10(%esp)
		while (c-- > 0)
   10dbc:	eb 24                	jmp    10de2 <file_write+0x147>
			*(p++) = get_fs_byte(buf++);
   10dbe:	8b 5c 24 14          	mov    0x14(%esp),%ebx
   10dc2:	8d 43 01             	lea    0x1(%ebx),%eax
   10dc5:	89 44 24 14          	mov    %eax,0x14(%esp)
   10dc9:	8b 44 24 38          	mov    0x38(%esp),%eax
   10dcd:	8d 50 01             	lea    0x1(%eax),%edx
   10dd0:	89 54 24 38          	mov    %edx,0x38(%esp)
   10dd4:	83 ec 0c             	sub    $0xc,%esp
   10dd7:	50                   	push   %eax
   10dd8:	e8 ef fc ff ff       	call   10acc <get_fs_byte>
   10ddd:	83 c4 10             	add    $0x10,%esp
   10de0:	88 03                	mov    %al,(%ebx)
		if (pos > inode->i_size) {
			inode->i_size = pos;
			inode->i_dirt = 1;
		}
		i += c;
		while (c-- > 0)
   10de2:	8b 44 24 18          	mov    0x18(%esp),%eax
   10de6:	8d 50 ff             	lea    -0x1(%eax),%edx
   10de9:	89 54 24 18          	mov    %edx,0x18(%esp)
   10ded:	85 c0                	test   %eax,%eax
   10def:	7f cd                	jg     10dbe <file_write+0x123>
			*(p++) = get_fs_byte(buf++);
		brelse(bh);
   10df1:	83 ec 0c             	sub    $0xc,%esp
   10df4:	ff 74 24 14          	pushl  0x14(%esp)
   10df8:	e8 40 e8 ff ff       	call   f63d <brelse>
   10dfd:	83 c4 10             	add    $0x10,%esp
	else
		pos = filp->f_pos;
	// 然后在已写入字节数i（刚开始时为0）小于指定写入字节数count时，循环执行以下操作。在循环操作过程中，我们先取文件数据块
	// 号（pos/BLOCK_SIZE）在设备上对应的逻辑块号block。如果对应的逻辑块不存在就创建一块。如果得到的逻辑块号 = 0,则表示
	// 创建失败，于是退出循环。否则我们根据该逻辑块号读取设备上的相应逻辑块，若出错也退出循环。
	while (i < count) {
   10e00:	8b 44 24 10          	mov    0x10(%esp),%eax
   10e04:	3b 44 24 3c          	cmp    0x3c(%esp),%eax
   10e08:	0f 8c cd fe ff ff    	jl     10cdb <file_write+0x40>
   10e0e:	eb 04                	jmp    10e14 <file_write+0x179>
		if (!(block = create_block(inode, pos / BLOCK_SIZE)))
			break;
   10e10:	90                   	nop
   10e11:	eb 01                	jmp    10e14 <file_write+0x179>
		if (!(bh = bread(inode->i_dev, block)))
			break;
   10e13:	90                   	nop
		brelse(bh);
    }
	// 当数据已经全部写入文件或者在写操作过程中发生问题时就会退出循环。此时我们更改文件修改时间为当前时间，并调整文件读写指针。如果
	// 此次操作不是在文件尾添加数据，则把文件读写指针调整到当前读写位置pos处，并更改文件i节点的修改时间为当前时间。最后返回写入的
	// 字节数，若写入字节数为0,则返回出错号-1。
	inode->i_mtime = CURRENT_TIME;
   10e14:	a1 00 eb 02 00       	mov    0x2eb00,%eax
   10e19:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
   10e1f:	01 d0                	add    %edx,%eax
   10e21:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   10e26:	f7 e2                	mul    %edx
   10e28:	c1 ea 05             	shr    $0x5,%edx
   10e2b:	a1 04 eb 02 00       	mov    0x2eb04,%eax
   10e30:	01 c2                	add    %eax,%edx
   10e32:	8b 44 24 30          	mov    0x30(%esp),%eax
   10e36:	89 50 08             	mov    %edx,0x8(%eax)
	if (!(filp->f_flags & O_APPEND)) {
   10e39:	8b 44 24 34          	mov    0x34(%esp),%eax
   10e3d:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   10e41:	0f b7 c0             	movzwl %ax,%eax
   10e44:	25 00 04 00 00       	and    $0x400,%eax
   10e49:	85 c0                	test   %eax,%eax
   10e4b:	75 30                	jne    10e7d <file_write+0x1e2>
		filp->f_pos = pos;
   10e4d:	8b 44 24 34          	mov    0x34(%esp),%eax
   10e51:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   10e55:	89 50 0c             	mov    %edx,0xc(%eax)
		inode->i_ctime = CURRENT_TIME;
   10e58:	a1 00 eb 02 00       	mov    0x2eb00,%eax
   10e5d:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
   10e63:	01 d0                	add    %edx,%eax
   10e65:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   10e6a:	f7 e2                	mul    %edx
   10e6c:	c1 ea 05             	shr    $0x5,%edx
   10e6f:	a1 04 eb 02 00       	mov    0x2eb04,%eax
   10e74:	01 c2                	add    %eax,%edx
   10e76:	8b 44 24 30          	mov    0x30(%esp),%eax
   10e7a:	89 50 2c             	mov    %edx,0x2c(%eax)
	}
	return (i ? i : -1);
   10e7d:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   10e82:	74 06                	je     10e8a <file_write+0x1ef>
   10e84:	8b 44 24 10          	mov    0x10(%esp),%eax
   10e88:	eb 05                	jmp    10e8f <file_write+0x1f4>
   10e8a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10e8f:	83 c4 28             	add    $0x28,%esp
   10e92:	5b                   	pop    %ebx
   10e93:	c3                   	ret    

00010e94 <put_fs_byte>:

//// 将一字节存放在fs段中指定内存地址处.
// 参数:val - 字节值;addr - 内存地址.
// %0 - 寄存器(字节值val);%1 - (内存地址addr).
static inline void put_fs_byte(char val,char *addr)
{
   10e94:	83 ec 04             	sub    $0x4,%esp
   10e97:	8b 44 24 08          	mov    0x8(%esp),%eax
   10e9b:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
   10e9e:	0f b6 04 24          	movzbl (%esp),%eax
   10ea2:	8b 54 24 0c          	mov    0xc(%esp),%edx
   10ea6:	64 88 02             	mov    %al,%fs:(%edx)
}
   10ea9:	90                   	nop
   10eaa:	83 c4 04             	add    $0x4,%esp
   10ead:	c3                   	ret    

00010eae <cp_stat>:
#include <asm/segment.h>

// 复制文件状态信息。
// 参数inode是文件i节点，statbuf是用户数据空间中stat文件状态结构指针，用于存放取得的状态信息。
static void cp_stat(struct m_inode * inode, struct stat * statbuf)
{
   10eae:	83 ec 3c             	sub    $0x3c,%esp
	struct stat tmp;
	int i;

	// 首先验证（或分配）存放数据的内存空间。然后临时复制相应节点上的信息。
	verify_area(statbuf, sizeof (struct stat));
   10eb1:	83 ec 08             	sub    $0x8,%esp
   10eb4:	6a 20                	push   $0x20
   10eb6:	ff 74 24 50          	pushl  0x50(%esp)
   10eba:	e8 e4 74 ff ff       	call   83a3 <verify_area>
   10ebf:	83 c4 10             	add    $0x10,%esp
	tmp.st_dev = inode->i_dev;              						// 文件所在设备号。
   10ec2:	8b 44 24 40          	mov    0x40(%esp),%eax
   10ec6:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   10eca:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	tmp.st_ino = inode->i_num;              						// 文件i节点号。
   10ecf:	8b 44 24 40          	mov    0x40(%esp),%eax
   10ed3:	0f b7 40 32          	movzwl 0x32(%eax),%eax
   10ed7:	66 89 44 24 0e       	mov    %ax,0xe(%esp)
	tmp.st_mode = inode->i_mode;            						// 文件属性。
   10edc:	8b 44 24 40          	mov    0x40(%esp),%eax
   10ee0:	0f b7 00             	movzwl (%eax),%eax
   10ee3:	66 89 44 24 10       	mov    %ax,0x10(%esp)
	tmp.st_nlink = inode->i_nlinks;         						// 文件连接数。
   10ee8:	8b 44 24 40          	mov    0x40(%esp),%eax
   10eec:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   10ef0:	88 44 24 12          	mov    %al,0x12(%esp)
	tmp.st_uid = inode->i_uid;              						// 文件的用户ID。
   10ef4:	8b 44 24 40          	mov    0x40(%esp),%eax
   10ef8:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   10efc:	66 89 44 24 14       	mov    %ax,0x14(%esp)
	tmp.st_gid = inode->i_gid;              						// 文件的组ID。
   10f01:	8b 44 24 40          	mov    0x40(%esp),%eax
   10f05:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
   10f09:	0f b6 c0             	movzbl %al,%eax
   10f0c:	66 89 44 24 16       	mov    %ax,0x16(%esp)
	tmp.st_rdev = inode->i_zone[0];         						// 设备号（若是特殊字符文件或块设备文件)。
   10f11:	8b 44 24 40          	mov    0x40(%esp),%eax
   10f15:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   10f19:	66 89 44 24 18       	mov    %ax,0x18(%esp)
	tmp.st_size = inode->i_size;            						// 文件字节长度（如果文件是常规文件）。
   10f1e:	8b 44 24 40          	mov    0x40(%esp),%eax
   10f22:	8b 40 04             	mov    0x4(%eax),%eax
   10f25:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	tmp.st_atime = inode->i_atime;          						// 最后访问时间。
   10f29:	8b 44 24 40          	mov    0x40(%esp),%eax
   10f2d:	8b 40 28             	mov    0x28(%eax),%eax
   10f30:	89 44 24 20          	mov    %eax,0x20(%esp)
	tmp.st_mtime = inode->i_mtime;          						// 最后修改时间。
   10f34:	8b 44 24 40          	mov    0x40(%esp),%eax
   10f38:	8b 40 08             	mov    0x8(%eax),%eax
   10f3b:	89 44 24 24          	mov    %eax,0x24(%esp)
	tmp.st_ctime = inode->i_ctime;          						// 最后i节点修改时间。
   10f3f:	8b 44 24 40          	mov    0x40(%esp),%eax
   10f43:	8b 40 2c             	mov    0x2c(%eax),%eax
   10f46:	89 44 24 28          	mov    %eax,0x28(%esp)
	// 最后将这些状态信息复制到用户缓冲区中。
	for (i = 0 ; i<sizeof (tmp) ; i++)
   10f4a:	c7 44 24 2c 00 00 00 	movl   $0x0,0x2c(%esp)
   10f51:	00 
   10f52:	eb 2c                	jmp    10f80 <cp_stat+0xd2>
		put_fs_byte(((char *) &tmp)[i], i + (char *) statbuf);
   10f54:	8b 54 24 2c          	mov    0x2c(%esp),%edx
   10f58:	8b 44 24 44          	mov    0x44(%esp),%eax
   10f5c:	01 c2                	add    %eax,%edx
   10f5e:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   10f62:	8d 4c 24 0c          	lea    0xc(%esp),%ecx
   10f66:	01 c8                	add    %ecx,%eax
   10f68:	0f b6 00             	movzbl (%eax),%eax
   10f6b:	0f be c0             	movsbl %al,%eax
   10f6e:	83 ec 08             	sub    $0x8,%esp
   10f71:	52                   	push   %edx
   10f72:	50                   	push   %eax
   10f73:	e8 1c ff ff ff       	call   10e94 <put_fs_byte>
   10f78:	83 c4 10             	add    $0x10,%esp
	tmp.st_size = inode->i_size;            						// 文件字节长度（如果文件是常规文件）。
	tmp.st_atime = inode->i_atime;          						// 最后访问时间。
	tmp.st_mtime = inode->i_mtime;          						// 最后修改时间。
	tmp.st_ctime = inode->i_ctime;          						// 最后i节点修改时间。
	// 最后将这些状态信息复制到用户缓冲区中。
	for (i = 0 ; i<sizeof (tmp) ; i++)
   10f7b:	83 44 24 2c 01       	addl   $0x1,0x2c(%esp)
   10f80:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   10f84:	83 f8 1f             	cmp    $0x1f,%eax
   10f87:	76 cb                	jbe    10f54 <cp_stat+0xa6>
		put_fs_byte(((char *) &tmp)[i], i + (char *) statbuf);
}
   10f89:	90                   	nop
   10f8a:	83 c4 3c             	add    $0x3c,%esp
   10f8d:	c3                   	ret    

00010f8e <sys_stat>:
// 文件状态系统调用。
// 根据给定的文件名获取相关文件状态信息。
// 参数filename是指定的文件名，statbuf是存放状态信息的缓冲区指针。
// 返回：成功返回0,若出错则返回出错码。
int sys_stat(char * filename, struct stat * statbuf)
{
   10f8e:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * inode;

	// 首先根据文件名找出对应的i节点。然后将i节点上的文件状态信息复制到用户缓冲区中，并放回i节点。
	if (!(inode = namei(filename)))
   10f91:	83 ec 0c             	sub    $0xc,%esp
   10f94:	ff 74 24 2c          	pushl  0x2c(%esp)
   10f98:	e8 c1 24 00 00       	call   1345e <namei>
   10f9d:	83 c4 10             	add    $0x10,%esp
   10fa0:	89 44 24 0c          	mov    %eax,0xc(%esp)
   10fa4:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   10fa9:	75 07                	jne    10fb2 <sys_stat+0x24>
		return -ENOENT;
   10fab:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   10fb0:	eb 27                	jmp    10fd9 <sys_stat+0x4b>
	cp_stat(inode, statbuf);
   10fb2:	83 ec 08             	sub    $0x8,%esp
   10fb5:	ff 74 24 2c          	pushl  0x2c(%esp)
   10fb9:	ff 74 24 18          	pushl  0x18(%esp)
   10fbd:	e8 ec fe ff ff       	call   10eae <cp_stat>
   10fc2:	83 c4 10             	add    $0x10,%esp
	iput(inode);
   10fc5:	83 ec 0c             	sub    $0xc,%esp
   10fc8:	ff 74 24 18          	pushl  0x18(%esp)
   10fcc:	e8 cb d6 ff ff       	call   e69c <iput>
   10fd1:	83 c4 10             	add    $0x10,%esp
	return 0;
   10fd4:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10fd9:	83 c4 1c             	add    $0x1c,%esp
   10fdc:	c3                   	ret    

00010fdd <sys_lstat>:

// 文件状态系统调用。
// 根据给定的文件名获取相关文件状态信息。文件路径名中有符号链接文件名，则取符号文件的状态。
// 参数：filename是指定的文件名，statbuf是存放状态信息的缓冲区指针。
int sys_lstat(char * filename, struct stat * statbuf)
{
   10fdd:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * inode;

	// 首先根据文件名找出对应的i节点。然后将i节点上的文件状态信息复制到用户缓冲区中，并放回该i节点。
	if (!(inode = lnamei(filename)))        					// 取指定路径名i节点，不跟随符号链接。
   10fe0:	83 ec 0c             	sub    $0xc,%esp
   10fe3:	ff 74 24 2c          	pushl  0x2c(%esp)
   10fe7:	e8 58 24 00 00       	call   13444 <lnamei>
   10fec:	83 c4 10             	add    $0x10,%esp
   10fef:	89 44 24 0c          	mov    %eax,0xc(%esp)
   10ff3:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   10ff8:	75 07                	jne    11001 <sys_lstat+0x24>
		return -ENOENT;
   10ffa:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   10fff:	eb 27                	jmp    11028 <sys_lstat+0x4b>
	cp_stat(inode, statbuf);
   11001:	83 ec 08             	sub    $0x8,%esp
   11004:	ff 74 24 2c          	pushl  0x2c(%esp)
   11008:	ff 74 24 18          	pushl  0x18(%esp)
   1100c:	e8 9d fe ff ff       	call   10eae <cp_stat>
   11011:	83 c4 10             	add    $0x10,%esp
	iput(inode);
   11014:	83 ec 0c             	sub    $0xc,%esp
   11017:	ff 74 24 18          	pushl  0x18(%esp)
   1101b:	e8 7c d6 ff ff       	call   e69c <iput>
   11020:	83 c4 10             	add    $0x10,%esp
	return 0;
   11023:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11028:	83 c4 1c             	add    $0x1c,%esp
   1102b:	c3                   	ret    

0001102c <sys_fstat>:
// 文件状态系统调用。
// 根据给定的文件句柄获取相关文件状态信息。
// 参数fd是指定文件的句柄（描述符），statbuf是存放状态信息的缓冲区指针。
// 返回：成功返回0,若出错则返回出错码。
int sys_fstat(unsigned int fd, struct stat * statbuf)
{
   1102c:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * inode;

	// 首先取文件句柄对应的文件结构，然后从中得到文件的i节点。然后将i节点上的文件状态信息复制到用户缓冲区中。如果
	// 文件句柄值大于一个程序最多打开文件数NR_OPEN，或者该句柄的文件结构指针为空，或者对应文件结构的i节点字段为空，
	// 则出错，返回出错码并退出。
	if (fd >= NR_OPEN || !(f = current->filp[fd]) || !(inode = f->f_inode))
   1102f:	83 7c 24 20 13       	cmpl   $0x13,0x20(%esp)
   11034:	77 30                	ja     11066 <sys_fstat+0x3a>
   11036:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1103b:	8b 54 24 20          	mov    0x20(%esp),%edx
   1103f:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   11045:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   11049:	89 44 24 0c          	mov    %eax,0xc(%esp)
   1104d:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   11052:	74 12                	je     11066 <sys_fstat+0x3a>
   11054:	8b 44 24 0c          	mov    0xc(%esp),%eax
   11058:	8b 40 08             	mov    0x8(%eax),%eax
   1105b:	89 44 24 08          	mov    %eax,0x8(%esp)
   1105f:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   11064:	75 07                	jne    1106d <sys_fstat+0x41>
		return -EBADF;
   11066:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
   1106b:	eb 18                	jmp    11085 <sys_fstat+0x59>
	cp_stat(inode, statbuf);
   1106d:	83 ec 08             	sub    $0x8,%esp
   11070:	ff 74 24 2c          	pushl  0x2c(%esp)
   11074:	ff 74 24 14          	pushl  0x14(%esp)
   11078:	e8 31 fe ff ff       	call   10eae <cp_stat>
   1107d:	83 c4 10             	add    $0x10,%esp
	return 0;
   11080:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11085:	83 c4 1c             	add    $0x1c,%esp
   11088:	c3                   	ret    

00011089 <sys_readlink>:
// 该调用读取符号链接文件的内容（即该符号链接所指向文件的路径名字符串），并放到指定长度的用户缓冲区中。若缓冲区
// 太小，就会截断符号链接的内容。
// 参数：path -- 符号链接文件路径名；buf -- 用户缓冲区；bufsiz -- 缓冲区长度。
// 返回：成功则返回放入缓冲区中的字符数；若失败则返回出错码。
int sys_readlink(const char * path, char * buf, int bufsiz)
{
   11089:	83 ec 1c             	sub    $0x1c,%esp
	int i;
	char c;

	// 首先检查和验证函数参数的有效性，并对其进行调整。用户缓冲区字节长度bufsiz必须在1--1023之间。然后取得符号链接
	// 文件名的i节点，并读取该文件的第1块数据内容。之后放回i节点。
	if (bufsiz <= 0)
   1108c:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   11091:	7f 0a                	jg     1109d <sys_readlink+0x14>
		return -EBADF;
   11093:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
   11098:	e9 07 01 00 00       	jmp    111a4 <sys_readlink+0x11b>
	if (bufsiz > 1023)
   1109d:	81 7c 24 28 ff 03 00 	cmpl   $0x3ff,0x28(%esp)
   110a4:	00 
   110a5:	7e 08                	jle    110af <sys_readlink+0x26>
		bufsiz = 1023;
   110a7:	c7 44 24 28 ff 03 00 	movl   $0x3ff,0x28(%esp)
   110ae:	00 
	verify_area(buf, bufsiz);
   110af:	83 ec 08             	sub    $0x8,%esp
   110b2:	ff 74 24 30          	pushl  0x30(%esp)
   110b6:	ff 74 24 30          	pushl  0x30(%esp)
   110ba:	e8 e4 72 ff ff       	call   83a3 <verify_area>
   110bf:	83 c4 10             	add    $0x10,%esp
	if (!(inode = lnamei(path)))
   110c2:	83 ec 0c             	sub    $0xc,%esp
   110c5:	ff 74 24 2c          	pushl  0x2c(%esp)
   110c9:	e8 76 23 00 00       	call   13444 <lnamei>
   110ce:	83 c4 10             	add    $0x10,%esp
   110d1:	89 44 24 04          	mov    %eax,0x4(%esp)
   110d5:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
   110da:	75 0a                	jne    110e6 <sys_readlink+0x5d>
		return -ENOENT;
   110dc:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   110e1:	e9 be 00 00 00       	jmp    111a4 <sys_readlink+0x11b>
	if (inode->i_zone[0])
   110e6:	8b 44 24 04          	mov    0x4(%esp),%eax
   110ea:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   110ee:	66 85 c0             	test   %ax,%ax
   110f1:	74 29                	je     1111c <sys_readlink+0x93>
		bh = bread(inode->i_dev, inode->i_zone[0]);
   110f3:	8b 44 24 04          	mov    0x4(%esp),%eax
   110f7:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   110fb:	0f b7 d0             	movzwl %ax,%edx
   110fe:	8b 44 24 04          	mov    0x4(%esp),%eax
   11102:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   11106:	0f b7 c0             	movzwl %ax,%eax
   11109:	83 ec 08             	sub    $0x8,%esp
   1110c:	52                   	push   %edx
   1110d:	50                   	push   %eax
   1110e:	e8 80 e5 ff ff       	call   f693 <bread>
   11113:	83 c4 10             	add    $0x10,%esp
   11116:	89 44 24 0c          	mov    %eax,0xc(%esp)
   1111a:	eb 08                	jmp    11124 <sys_readlink+0x9b>
	else
		bh = NULL;
   1111c:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   11123:	00 
	iput(inode);
   11124:	83 ec 0c             	sub    $0xc,%esp
   11127:	ff 74 24 10          	pushl  0x10(%esp)
   1112b:	e8 6c d5 ff ff       	call   e69c <iput>
   11130:	83 c4 10             	add    $0x10,%esp
	// 如果读取文件数据内容成功，则从内容中复制最多bufsiz个字符到用户缓冲区中，不复制NULL字符。最后释放缓冲块，并返回
	// 复制的字节数。
	if (!bh)
   11133:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   11138:	75 07                	jne    11141 <sys_readlink+0xb8>
		return 0;
   1113a:	b8 00 00 00 00       	mov    $0x0,%eax
   1113f:	eb 63                	jmp    111a4 <sys_readlink+0x11b>
	i = 0;
   11141:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
   11148:	00 
	while (i < bufsiz && (c = bh->b_data[i])) {
   11149:	eb 22                	jmp    1116d <sys_readlink+0xe4>
		i++;
   1114b:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
		put_fs_byte(c, buf++);
   11150:	8b 44 24 24          	mov    0x24(%esp),%eax
   11154:	8d 50 01             	lea    0x1(%eax),%edx
   11157:	89 54 24 24          	mov    %edx,0x24(%esp)
   1115b:	0f be 54 24 03       	movsbl 0x3(%esp),%edx
   11160:	83 ec 08             	sub    $0x8,%esp
   11163:	50                   	push   %eax
   11164:	52                   	push   %edx
   11165:	e8 2a fd ff ff       	call   10e94 <put_fs_byte>
   1116a:	83 c4 10             	add    $0x10,%esp
	// 如果读取文件数据内容成功，则从内容中复制最多bufsiz个字符到用户缓冲区中，不复制NULL字符。最后释放缓冲块，并返回
	// 复制的字节数。
	if (!bh)
		return 0;
	i = 0;
	while (i < bufsiz && (c = bh->b_data[i])) {
   1116d:	8b 44 24 08          	mov    0x8(%esp),%eax
   11171:	3b 44 24 28          	cmp    0x28(%esp),%eax
   11175:	7d 1a                	jge    11191 <sys_readlink+0x108>
   11177:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1117b:	8b 10                	mov    (%eax),%edx
   1117d:	8b 44 24 08          	mov    0x8(%esp),%eax
   11181:	01 d0                	add    %edx,%eax
   11183:	0f b6 00             	movzbl (%eax),%eax
   11186:	88 44 24 03          	mov    %al,0x3(%esp)
   1118a:	80 7c 24 03 00       	cmpb   $0x0,0x3(%esp)
   1118f:	75 ba                	jne    1114b <sys_readlink+0xc2>
		i++;
		put_fs_byte(c, buf++);
	}
	brelse(bh);
   11191:	83 ec 0c             	sub    $0xc,%esp
   11194:	ff 74 24 18          	pushl  0x18(%esp)
   11198:	e8 a0 e4 ff ff       	call   f63d <brelse>
   1119d:	83 c4 10             	add    $0x10,%esp
	return i;
   111a0:	8b 44 24 08          	mov    0x8(%esp),%eax
}
   111a4:	83 c4 1c             	add    $0x1c,%esp
   111a7:	c3                   	ret    

000111a8 <strncpy>:
// 复制源字符串count个字节到目的字符串.
// 如果源串长度小于count个字节,就附加空字符(NULL)到目的字符串.
// 参数: dest - 目的字符串指针, src - 源字符串指针, count - 复制字节数.
// %0 - esi(src), %1 - edi(dest), %2 - ecx(count).
static inline char * strncpy(char * dest, const char *src, int count)
{
   111a8:	57                   	push   %edi
   111a9:	56                   	push   %esi
   111aa:	53                   	push   %ebx
__asm__(
   111ab:	8b 54 24 14          	mov    0x14(%esp),%edx
   111af:	8b 5c 24 10          	mov    0x10(%esp),%ebx
   111b3:	8b 4c 24 18          	mov    0x18(%esp),%ecx
   111b7:	89 d6                	mov    %edx,%esi
   111b9:	89 df                	mov    %ebx,%edi
   111bb:	fc                   	cld    
   111bc:	49                   	dec    %ecx
   111bd:	78 08                	js     111c7 <strncpy+0x1f>
   111bf:	ac                   	lods   %ds:(%esi),%al
   111c0:	aa                   	stos   %al,%es:(%edi)
   111c1:	84 c0                	test   %al,%al
   111c3:	75 f7                	jne    111bc <strncpy+0x14>
   111c5:	f3 aa                	rep stos %al,%es:(%edi)
	"jne 1b\n\t"											// 不是,则向前跳转到标号1处继续复制.
	"rep\n\t"												// 否则,在目的串中存放剩余个数的空字符.
	"stosb\n"
	"2:"
	::"S" (src), "D" (dest), "c" (count):"ax");
return dest;												// 返回目的字符串指针.
   111c7:	8b 44 24 10          	mov    0x10(%esp),%eax
}
   111cb:	5b                   	pop    %ebx
   111cc:	5e                   	pop    %esi
   111cd:	5f                   	pop    %edi
   111ce:	c3                   	ret    

000111cf <strchr>:
// 在字符串中寻找第一个匹配的字符。
// 参数：s - 字符串，c - 欲寻找的字符。
// %0 - eax（__res），%1 - esi（字符串指针s），%2 - eax（字符c）。
// 返回：返回字符串中第一次出现匹配字符的指针。若没有找到匹配的字符，则返回空指针。
static inline char * strchr(const char * s, char c)
{
   111cf:	56                   	push   %esi
   111d0:	83 ec 04             	sub    $0x4,%esp
   111d3:	8b 44 24 10          	mov    0x10(%esp),%eax
   111d7:	88 04 24             	mov    %al,(%esp)
register char * __res __asm__("ax");    					// __res是寄存器变量(eax).
__asm__(
   111da:	8b 54 24 0c          	mov    0xc(%esp),%edx
   111de:	0f b6 04 24          	movzbl (%esp),%eax
   111e2:	89 d6                	mov    %edx,%esi
   111e4:	fc                   	cld    
   111e5:	88 c4                	mov    %al,%ah
   111e7:	ac                   	lods   %ds:(%esi),%al
   111e8:	38 e0                	cmp    %ah,%al
   111ea:	74 09                	je     111f5 <strchr+0x26>
   111ec:	84 c0                	test   %al,%al
   111ee:	75 f7                	jne    111e7 <strchr+0x18>
   111f0:	be 01 00 00 00       	mov    $0x1,%esi
   111f5:	89 f0                	mov    %esi,%eax
   111f7:	48                   	dec    %eax
	"movl $1, %1\n"                  						// 是，则说明没有找到匹配字符，esi置1。
	"2:\tmovl %1, %0\n\t"            						// 将指向匹配字符后一个字节处的指针值放入eax
	"decl %0"                       						// 将指针调整为指向匹配的字符。
	:"=a" (__res):"S" (s), "0" (c):);
return __res;                           					// 返回指针。
}
   111f8:	83 c4 04             	add    $0x4,%esp
   111fb:	5e                   	pop    %esi
   111fc:	c3                   	ret    

000111fd <get_fs_byte>:
//// 读取fs段中指定地址处的字节.
// 参数:addr - 指定的内存地址.
// %0 - (返回的字节_v);%1 - (内存地址addr)
// 返回:返回内存fs[addr]处的字节.
static inline unsigned char get_fs_byte(const char * addr)
{
   111fd:	53                   	push   %ebx
	unsigned register char _v;

	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   111fe:	8b 44 24 08          	mov    0x8(%esp),%eax
   11202:	64 8a 00             	mov    %fs:(%eax),%al
   11205:	89 c3                	mov    %eax,%ebx
	return _v;
   11207:	89 d8                	mov    %ebx,%eax
}
   11209:	5b                   	pop    %ebx
   1120a:	c3                   	ret    

0001120b <get_fs_long>:
//// 读取fs段中指定地址处的长字(4字节).
// 参数:addr - 指定的内存地址.
// %0 - (返回的长字_v);%1 - (内存地址addr)
// 返回:返回内存fs:[addr]处的长字.
static inline unsigned long get_fs_long(const unsigned long *addr)
{
   1120b:	83 ec 10             	sub    $0x10,%esp
	unsigned long _v;

	__asm__ ("movl %%fs:%1,%0":"=q" (_v):"m" (*addr)); \
   1120e:	8b 44 24 14          	mov    0x14(%esp),%eax
   11212:	64 8b 00             	mov    %fs:(%eax),%eax
   11215:	89 44 24 0c          	mov    %eax,0xc(%esp)
	return _v;
   11219:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   1121d:	83 c4 10             	add    $0x10,%esp
   11220:	c3                   	ret    

00011221 <put_fs_long>:
//// 将一长字存放在fs段中指定内存地址处.
// 参数:val - 长字值;addr - 内存地址.
// %0 - 寄存器(长字值val);%1 - (内存地址addr).
static inline void put_fs_long(unsigned long val,unsigned long * addr)
{
__asm__ ("movl %0,%%fs:%1"::"q" (val),"m" (*addr));
   11221:	8b 44 24 04          	mov    0x4(%esp),%eax
   11225:	8b 54 24 08          	mov    0x8(%esp),%edx
   11229:	64 89 02             	mov    %eax,%fs:(%edx)
}
   1122c:	90                   	nop
   1122d:	c3                   	ret    

0001122e <get_fs>:
 */

//// 取fs段寄存器值(选择符).
// 返回:fs段寄存器值.
static inline unsigned long get_fs()
{
   1122e:	83 ec 10             	sub    $0x10,%esp
	unsigned short _v;
	__asm__("mov %%fs,%%ax":"=a" (_v):);
   11231:	66 8c e0             	mov    %fs,%ax
   11234:	66 89 44 24 0e       	mov    %ax,0xe(%esp)
	return _v;
   11239:	0f b7 44 24 0e       	movzwl 0xe(%esp),%eax
}
   1123e:	83 c4 10             	add    $0x10,%esp
   11241:	c3                   	ret    

00011242 <get_ds>:

//// 取ds面寄存器值.
// 返回:ds段寄存器值.
static inline unsigned long get_ds()
{
   11242:	83 ec 10             	sub    $0x10,%esp
	unsigned short _v;
	__asm__("mov %%ds,%%ax":"=a" (_v):);
   11245:	66 8c d8             	mov    %ds,%ax
   11248:	66 89 44 24 0e       	mov    %ax,0xe(%esp)
	return _v;
   1124d:	0f b7 44 24 0e       	movzwl 0xe(%esp),%eax
}
   11252:	83 c4 10             	add    $0x10,%esp
   11255:	c3                   	ret    

00011256 <set_fs>:

//// 设置fs段寄存器.
// 参数:val - 段值(选择符).
static inline void set_fs(unsigned long val)
{
	__asm__("mov %0,%%fs"::"a" ((unsigned short) val));
   11256:	8b 44 24 04          	mov    0x4(%esp),%eax
   1125a:	8e e0                	mov    %eax,%fs
}
   1125c:	90                   	nop
   1125d:	c3                   	ret    

0001125e <sys_uselib>:
// 参数：library - 库文件名。
// 为进程选择一个库文件，并替换进程当前库文件i节点字段值为这里指定库文件名的i节点指针。如果library指针为空，则把进程
// 当前的库文件释放掉。
// 返回：成功返回0，否则返回出错码。
int sys_uselib(const char * library)
{
   1125e:	53                   	push   %ebx
   1125f:	83 ec 18             	sub    $0x18,%esp
	unsigned long base;

	// 首先判断当前进程是否普通进程。这是通过查看当前进程的空间长度来做到的。因为普通进程的空间长度被设置为TASK_SIZE（64
	// MB）。因此若进程逻辑地址空间长度不等于TASK_SIZE则返回出错码（无效参数）。否则取库文件i节点inode。若库文件名指针
	// 空，则设置inode等于NULL。
	if (get_limit(0x17) != TASK_SIZE)
   11262:	b8 17 00 00 00       	mov    $0x17,%eax
   11267:	0f 03 c0             	lsl    %ax,%eax
   1126a:	40                   	inc    %eax
   1126b:	89 44 24 08          	mov    %eax,0x8(%esp)
   1126f:	8b 44 24 08          	mov    0x8(%esp),%eax
   11273:	3d 00 00 00 04       	cmp    $0x4000000,%eax
   11278:	74 0a                	je     11284 <sys_uselib+0x26>
		return -EINVAL;
   1127a:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1127f:	e9 ca 00 00 00       	jmp    1134e <sys_uselib+0xf0>
	if (library) {
   11284:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
   11289:	74 24                	je     112af <sys_uselib+0x51>
		if (!(inode = namei(library)))							/* get library inode */
   1128b:	83 ec 0c             	sub    $0xc,%esp
   1128e:	ff 74 24 2c          	pushl  0x2c(%esp)
   11292:	e8 c7 21 00 00       	call   1345e <namei>
   11297:	83 c4 10             	add    $0x10,%esp
   1129a:	89 44 24 0c          	mov    %eax,0xc(%esp)
   1129e:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   112a3:	75 12                	jne    112b7 <sys_uselib+0x59>
			return -ENOENT;                 					/* 取库文件i节点 */
   112a5:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   112aa:	e9 9f 00 00 00       	jmp    1134e <sys_uselib+0xf0>
	} else
		inode = NULL;
   112af:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   112b6:	00 
	/* we should check filetypes (headers etc), but we don't */
	/* 我们应该检查一下文件类型（如头部信息等），但是我们还没有这样做。*/
	// 然后放回进程原库文件i节点，并预置进程库i节点字段为空。接着取得进程的库代码所在位置，并释放原库代码的页表所占用的内存
	// 页面。最后让进程库i节点字段指向新库i节点，并返回0（成功）。
	iput(current->library);
   112b7:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   112bc:	8b 80 40 03 00 00    	mov    0x340(%eax),%eax
   112c2:	83 ec 0c             	sub    $0xc,%esp
   112c5:	50                   	push   %eax
   112c6:	e8 d1 d3 ff ff       	call   e69c <iput>
   112cb:	83 c4 10             	add    $0x10,%esp
	current->library = NULL;
   112ce:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   112d3:	c7 80 40 03 00 00 00 	movl   $0x0,0x340(%eax)
   112da:	00 00 00 
	base = get_base(current->ldt[2]);
   112dd:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   112e2:	05 a8 03 00 00       	add    $0x3a8,%eax
   112e7:	83 c0 02             	add    $0x2,%eax
   112ea:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   112f0:	81 c2 a8 03 00 00    	add    $0x3a8,%edx
   112f6:	8d 5a 04             	lea    0x4(%edx),%ebx
   112f9:	8b 0d a0 e1 02 00    	mov    0x2e1a0,%ecx
   112ff:	81 c1 a8 03 00 00    	add    $0x3a8,%ecx
   11305:	83 c1 07             	add    $0x7,%ecx
   11308:	8a 31                	mov    (%ecx),%dh
   1130a:	8a 13                	mov    (%ebx),%dl
   1130c:	c1 e2 10             	shl    $0x10,%edx
   1130f:	66 8b 10             	mov    (%eax),%dx
   11312:	89 d0                	mov    %edx,%eax
   11314:	89 44 24 04          	mov    %eax,0x4(%esp)
   11318:	8b 44 24 04          	mov    0x4(%esp),%eax
   1131c:	89 04 24             	mov    %eax,(%esp)
	base += LIBRARY_OFFSET;
   1131f:	81 04 24 00 00 c0 03 	addl   $0x3c00000,(%esp)
	free_page_tables(base, LIBRARY_SIZE);
   11326:	83 ec 08             	sub    $0x8,%esp
   11329:	68 00 00 40 00       	push   $0x400000
   1132e:	ff 74 24 0c          	pushl  0xc(%esp)
   11332:	e8 ef a9 ff ff       	call   bd26 <free_page_tables>
   11337:	83 c4 10             	add    $0x10,%esp
	current->library = inode;
   1133a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1133f:	8b 54 24 0c          	mov    0xc(%esp),%edx
   11343:	89 90 40 03 00 00    	mov    %edx,0x340(%eax)
	return 0;
   11349:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1134e:	83 c4 18             	add    $0x18,%esp
   11351:	5b                   	pop    %ebx
   11352:	c3                   	ret    

00011353 <create_tables>:
 */
// 在新任务中创建参数和环境变量指针表.
// 参数:p - 数据段中参数和环境信息偏移指针;argc - 参数个数;envc - 环境变量个数.
// 返回:栈指针值.
static unsigned long * create_tables(char * p, int argc, int envc)
{
   11353:	83 ec 10             	sub    $0x10,%esp
	// 栈指针是以4字节(1节)为边界进行寻址的,因此这里需让sp为4的整数倍值.此时sp位于参数环境表的末端.然后我们先把sp向下
	// (低地址方向)移动,在栈中空出环境变量指针占用的空间,并让环境变量指针envp指向该处.多空出的一个位置用于在最后存放一
	// 个NULL值.下面指针加1,sp将递增指针宽度字节值(4字节).再把sp向下移动,空出命令行参数指针占用的空间,并让argv指针
	// 指向该处.同样,多空处的一个位置用于存放一个NULL值.此时sp指向参数指针块的起始处,我们将环境参数块指针envp和命令行
	// 参数块指针以及命令行参数个数值分别压入栈中.
	sp = (unsigned long *) (0xfffffffc & (unsigned long) p);
   11356:	8b 44 24 14          	mov    0x14(%esp),%eax
   1135a:	83 e0 fc             	and    $0xfffffffc,%eax
   1135d:	89 44 24 04          	mov    %eax,0x4(%esp)
	sp -= envc + 1;
   11361:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   11365:	8d 50 01             	lea    0x1(%eax),%edx
   11368:	b8 00 00 00 00       	mov    $0x0,%eax
   1136d:	29 d0                	sub    %edx,%eax
   1136f:	c1 e0 02             	shl    $0x2,%eax
   11372:	01 44 24 04          	add    %eax,0x4(%esp)
	envp = sp;
   11376:	8b 44 24 04          	mov    0x4(%esp),%eax
   1137a:	89 44 24 08          	mov    %eax,0x8(%esp)
	sp -= argc + 1;
   1137e:	8b 44 24 18          	mov    0x18(%esp),%eax
   11382:	8d 50 01             	lea    0x1(%eax),%edx
   11385:	b8 00 00 00 00       	mov    $0x0,%eax
   1138a:	29 d0                	sub    %edx,%eax
   1138c:	c1 e0 02             	shl    $0x2,%eax
   1138f:	01 44 24 04          	add    %eax,0x4(%esp)
	argv = sp;
   11393:	8b 44 24 04          	mov    0x4(%esp),%eax
   11397:	89 44 24 0c          	mov    %eax,0xc(%esp)
	put_fs_long((unsigned long)envp, --sp);
   1139b:	83 6c 24 04 04       	subl   $0x4,0x4(%esp)
   113a0:	8b 44 24 08          	mov    0x8(%esp),%eax
   113a4:	ff 74 24 04          	pushl  0x4(%esp)
   113a8:	50                   	push   %eax
   113a9:	e8 73 fe ff ff       	call   11221 <put_fs_long>
   113ae:	83 c4 08             	add    $0x8,%esp
	put_fs_long((unsigned long)argv, --sp);
   113b1:	83 6c 24 04 04       	subl   $0x4,0x4(%esp)
   113b6:	8b 44 24 0c          	mov    0xc(%esp),%eax
   113ba:	ff 74 24 04          	pushl  0x4(%esp)
   113be:	50                   	push   %eax
   113bf:	e8 5d fe ff ff       	call   11221 <put_fs_long>
   113c4:	83 c4 08             	add    $0x8,%esp
	put_fs_long((unsigned long)argc, --sp);
   113c7:	83 6c 24 04 04       	subl   $0x4,0x4(%esp)
   113cc:	8b 44 24 18          	mov    0x18(%esp),%eax
   113d0:	ff 74 24 04          	pushl  0x4(%esp)
   113d4:	50                   	push   %eax
   113d5:	e8 47 fe ff ff       	call   11221 <put_fs_long>
   113da:	83 c4 08             	add    $0x8,%esp
	// 再将命令行各参数指针和环境变量各指针分别放入前面空出来的相应地方,最后分别放置一个NULL指针.
	while (argc-- > 0) {
   113dd:	eb 32                	jmp    11411 <create_tables+0xbe>
		put_fs_long((unsigned long) p, argv++);
   113df:	8b 44 24 0c          	mov    0xc(%esp),%eax
   113e3:	8d 50 04             	lea    0x4(%eax),%edx
   113e6:	89 54 24 0c          	mov    %edx,0xc(%esp)
   113ea:	8b 54 24 14          	mov    0x14(%esp),%edx
   113ee:	50                   	push   %eax
   113ef:	52                   	push   %edx
   113f0:	e8 2c fe ff ff       	call   11221 <put_fs_long>
   113f5:	83 c4 08             	add    $0x8,%esp
		while (get_fs_byte(p++)) /* nothing */ ;	// p指针指向下一个参数串.
   113f8:	90                   	nop
   113f9:	8b 44 24 14          	mov    0x14(%esp),%eax
   113fd:	8d 50 01             	lea    0x1(%eax),%edx
   11400:	89 54 24 14          	mov    %edx,0x14(%esp)
   11404:	50                   	push   %eax
   11405:	e8 f3 fd ff ff       	call   111fd <get_fs_byte>
   1140a:	83 c4 04             	add    $0x4,%esp
   1140d:	84 c0                	test   %al,%al
   1140f:	75 e8                	jne    113f9 <create_tables+0xa6>
	argv = sp;
	put_fs_long((unsigned long)envp, --sp);
	put_fs_long((unsigned long)argv, --sp);
	put_fs_long((unsigned long)argc, --sp);
	// 再将命令行各参数指针和环境变量各指针分别放入前面空出来的相应地方,最后分别放置一个NULL指针.
	while (argc-- > 0) {
   11411:	8b 44 24 18          	mov    0x18(%esp),%eax
   11415:	8d 50 ff             	lea    -0x1(%eax),%edx
   11418:	89 54 24 18          	mov    %edx,0x18(%esp)
   1141c:	85 c0                	test   %eax,%eax
   1141e:	7f bf                	jg     113df <create_tables+0x8c>
		put_fs_long((unsigned long) p, argv++);
		while (get_fs_byte(p++)) /* nothing */ ;	// p指针指向下一个参数串.
	}
	put_fs_long(0, argv);
   11420:	ff 74 24 0c          	pushl  0xc(%esp)
   11424:	6a 00                	push   $0x0
   11426:	e8 f6 fd ff ff       	call   11221 <put_fs_long>
   1142b:	83 c4 08             	add    $0x8,%esp
	while (envc-- > 0) {
   1142e:	eb 32                	jmp    11462 <create_tables+0x10f>
		put_fs_long((unsigned long) p, envp++);
   11430:	8b 44 24 08          	mov    0x8(%esp),%eax
   11434:	8d 50 04             	lea    0x4(%eax),%edx
   11437:	89 54 24 08          	mov    %edx,0x8(%esp)
   1143b:	8b 54 24 14          	mov    0x14(%esp),%edx
   1143f:	50                   	push   %eax
   11440:	52                   	push   %edx
   11441:	e8 db fd ff ff       	call   11221 <put_fs_long>
   11446:	83 c4 08             	add    $0x8,%esp
		while (get_fs_byte(p++)) /* nothing */ ;	// p指针指向下一个参数串.
   11449:	90                   	nop
   1144a:	8b 44 24 14          	mov    0x14(%esp),%eax
   1144e:	8d 50 01             	lea    0x1(%eax),%edx
   11451:	89 54 24 14          	mov    %edx,0x14(%esp)
   11455:	50                   	push   %eax
   11456:	e8 a2 fd ff ff       	call   111fd <get_fs_byte>
   1145b:	83 c4 04             	add    $0x4,%esp
   1145e:	84 c0                	test   %al,%al
   11460:	75 e8                	jne    1144a <create_tables+0xf7>
	while (argc-- > 0) {
		put_fs_long((unsigned long) p, argv++);
		while (get_fs_byte(p++)) /* nothing */ ;	// p指针指向下一个参数串.
	}
	put_fs_long(0, argv);
	while (envc-- > 0) {
   11462:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   11466:	8d 50 ff             	lea    -0x1(%eax),%edx
   11469:	89 54 24 1c          	mov    %edx,0x1c(%esp)
   1146d:	85 c0                	test   %eax,%eax
   1146f:	7f bf                	jg     11430 <create_tables+0xdd>
		put_fs_long((unsigned long) p, envp++);
		while (get_fs_byte(p++)) /* nothing */ ;	// p指针指向下一个参数串.
	}
	put_fs_long(0, envp);
   11471:	ff 74 24 08          	pushl  0x8(%esp)
   11475:	6a 00                	push   $0x0
   11477:	e8 a5 fd ff ff       	call   11221 <put_fs_long>
   1147c:	83 c4 08             	add    $0x8,%esp
	return sp;										// 返回构造的当前新栈指针.
   1147f:	8b 44 24 04          	mov    0x4(%esp),%eax
}
   11483:	83 c4 10             	add    $0x10,%esp
   11486:	c3                   	ret    

00011487 <count>:
// 计算参数个数.
// 参数:argv - 参数指针数组,最后一个指针项是NULL.
// 统计参数指针数组中指针的个数.
// 返回:参数个数.
static int count(char ** argv)
{
   11487:	83 ec 10             	sub    $0x10,%esp
	int i = 0;
   1148a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   11491:	00 
	char ** tmp;

	if (tmp = argv)
   11492:	8b 44 24 14          	mov    0x14(%esp),%eax
   11496:	89 44 24 08          	mov    %eax,0x8(%esp)
   1149a:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   1149f:	74 1f                	je     114c0 <count+0x39>
		while (get_fs_long((unsigned long *) (tmp++)))
   114a1:	eb 05                	jmp    114a8 <count+0x21>
			i++;
   114a3:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
{
	int i = 0;
	char ** tmp;

	if (tmp = argv)
		while (get_fs_long((unsigned long *) (tmp++)))
   114a8:	8b 44 24 08          	mov    0x8(%esp),%eax
   114ac:	8d 50 04             	lea    0x4(%eax),%edx
   114af:	89 54 24 08          	mov    %edx,0x8(%esp)
   114b3:	50                   	push   %eax
   114b4:	e8 52 fd ff ff       	call   1120b <get_fs_long>
   114b9:	83 c4 04             	add    $0x4,%esp
   114bc:	85 c0                	test   %eax,%eax
   114be:	75 e3                	jne    114a3 <count+0x1c>
			i++;

	return i;
   114c0:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   114c4:	83 c4 10             	add    $0x10,%esp
   114c7:	c3                   	ret    

000114c8 <copy_strings>:
// 并始终指向参数字符串的头部.字符串来源标志from_kmem应该是TYT为了给execve()增添执行脚本文件的功能而新加的参数.当没有运行
// 脚本文件的功能时,所有参数字符串都在用户数据空间中。
// 返回:参数和环境空间当前头部指针.若出错则返回0.
static unsigned long copy_strings(int argc, char ** argv, unsigned long *page,
		unsigned long p, int from_kmem)
{
   114c8:	53                   	push   %ebx
   114c9:	83 ec 28             	sub    $0x28,%esp
	char *tmp, *pag;
	int len, offset = 0;
   114cc:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
   114d3:	00 
	unsigned long old_fs, new_fs;

	if (!p)
   114d4:	83 7c 24 3c 00       	cmpl   $0x0,0x3c(%esp)
   114d9:	75 0a                	jne    114e5 <copy_strings+0x1d>
		return 0;												/* bullet-proofing */	/* 偏移指针验证 */
   114db:	b8 00 00 00 00       	mov    $0x0,%eax
   114e0:	e9 b6 01 00 00       	jmp    1169b <copy_strings+0x1d3>
	// 首先取当前段寄存器ds(指向内核数据段)和fs值,分别保存到变量new_fs和old_fs中.如果字符串和字符串数组(指针)来自内核空间,则设置fs段寄存器指向内核数据段.
	new_fs = get_ds();
   114e5:	e8 58 fd ff ff       	call   11242 <get_ds>
   114ea:	89 44 24 0c          	mov    %eax,0xc(%esp)
	old_fs = get_fs();
   114ee:	e8 3b fd ff ff       	call   1122e <get_fs>
   114f3:	89 44 24 08          	mov    %eax,0x8(%esp)
	if (from_kmem == 2)											// 若串指针在内核空间则设置fs指向内核空间.
   114f7:	83 7c 24 40 02       	cmpl   $0x2,0x40(%esp)
   114fc:	0f 85 6c 01 00 00    	jne    1166e <copy_strings+0x1a6>
		set_fs(new_fs);
   11502:	ff 74 24 0c          	pushl  0xc(%esp)
   11506:	e8 4b fd ff ff       	call   11256 <set_fs>
   1150b:	83 c4 04             	add    $0x4,%esp
	// 然后循环处理各个参数,从最后一个参数逆向开始复制,复制到指定偏移地址处.在循环中,首先取需要复制的当前字符串指针.如果字符串
	// 在用户空间而字符串数组(字符串指针)在内核空间,则设置fs段寄存器指向内核数据段(ds).并在内核数据空间中取了字符串指针tmp之
	// 后就立刻恢复fs段寄存器原值(fs再指回用户空间).否则不用修改fs值而直接从用户空间取字符串指针到tmp.
	while (argc-- > 0) {
   1150e:	e9 5b 01 00 00       	jmp    1166e <copy_strings+0x1a6>
		if (from_kmem == 1)										// 若串指针在内核空间,则fs指向内核空间.
   11513:	83 7c 24 40 01       	cmpl   $0x1,0x40(%esp)
   11518:	75 0c                	jne    11526 <copy_strings+0x5e>
			set_fs(new_fs);
   1151a:	ff 74 24 0c          	pushl  0xc(%esp)
   1151e:	e8 33 fd ff ff       	call   11256 <set_fs>
   11523:	83 c4 04             	add    $0x4,%esp
		if (!(tmp = (char *)get_fs_long(((unsigned long *)argv) + argc)))
   11526:	8b 44 24 30          	mov    0x30(%esp),%eax
   1152a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11531:	8b 44 24 34          	mov    0x34(%esp),%eax
   11535:	01 d0                	add    %edx,%eax
   11537:	50                   	push   %eax
   11538:	e8 ce fc ff ff       	call   1120b <get_fs_long>
   1153d:	83 c4 04             	add    $0x4,%esp
   11540:	89 44 24 1c          	mov    %eax,0x1c(%esp)
   11544:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   11549:	75 10                	jne    1155b <copy_strings+0x93>
			panic("argc is wrong");
   1154b:	83 ec 0c             	sub    $0xc,%esp
   1154e:	68 2c 3a 02 00       	push   $0x23a2c
   11553:	e8 b0 76 ff ff       	call   8c08 <panic>
   11558:	83 c4 10             	add    $0x10,%esp
		if (from_kmem == 1)										// 若串指针在内核空间,则fs指回用户空间.
   1155b:	83 7c 24 40 01       	cmpl   $0x1,0x40(%esp)
   11560:	75 0f                	jne    11571 <copy_strings+0xa9>
			set_fs(old_fs);
   11562:	83 ec 0c             	sub    $0xc,%esp
   11565:	ff 74 24 14          	pushl  0x14(%esp)
   11569:	e8 e8 fc ff ff       	call   11256 <set_fs>
   1156e:	83 c4 10             	add    $0x10,%esp
		// 然后从用户空间取该字符串,并计算参数字符串长度len.此后tmp指向该字符串末端.如果该字符串长度超过此时参数和环境空间中还剩余
		// 的空闲长度,则空间不够了.于是恢复fs段寄存器值(如果被改变的话)并返回0.不过因为参数和环境空间留128KB,所以通常不可能发生这
		// 种情况.
		len = 0;												/* remember zero-padding */
   11571:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
   11578:	00 
		do {													/* 我们知道串是以NULL字节结尾的 */
			len++;
   11579:	83 44 24 14 01       	addl   $0x1,0x14(%esp)
		} while (get_fs_byte(tmp++));
   1157e:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   11582:	8d 50 01             	lea    0x1(%eax),%edx
   11585:	89 54 24 1c          	mov    %edx,0x1c(%esp)
   11589:	83 ec 0c             	sub    $0xc,%esp
   1158c:	50                   	push   %eax
   1158d:	e8 6b fc ff ff       	call   111fd <get_fs_byte>
   11592:	83 c4 10             	add    $0x10,%esp
   11595:	84 c0                	test   %al,%al
   11597:	75 e0                	jne    11579 <copy_strings+0xb1>
			return 0;
		}
		// 接着我们逆向逐个字符地把字符串复制到参数和环境空间末端处.在循环复制字符串的字符过程中,我们首先要判断参数和环境空间中相应位
		// 置处是否已经有内存页面.如果还没有就先为其申请1页内存页面.偏移量offset被用途为在一个页面中的当前指针偏移值.因为刚开始执行
		// 本函数时,偏移变量offset被初始化为0,所以(offset-1 < 0)肯定成立而使得offset重新被设置为当前p指针在页面范围内的偏移值.
		while (len) {
   11599:	e9 c5 00 00 00       	jmp    11663 <copy_strings+0x19b>
			--p; --tmp; --len;
   1159e:	83 6c 24 3c 01       	subl   $0x1,0x3c(%esp)
   115a3:	83 6c 24 1c 01       	subl   $0x1,0x1c(%esp)
   115a8:	83 6c 24 14 01       	subl   $0x1,0x14(%esp)
			if (--offset < 0) {
   115ad:	83 6c 24 10 01       	subl   $0x1,0x10(%esp)
   115b2:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   115b7:	0f 89 8a 00 00 00    	jns    11647 <copy_strings+0x17f>
				offset = p % PAGE_SIZE;
   115bd:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   115c1:	25 ff 0f 00 00       	and    $0xfff,%eax
   115c6:	89 44 24 10          	mov    %eax,0x10(%esp)
				if (from_kmem == 2)								// 若串在内核空间则fs指回用户空间.
   115ca:	83 7c 24 40 02       	cmpl   $0x2,0x40(%esp)
   115cf:	75 0f                	jne    115e0 <copy_strings+0x118>
					set_fs(old_fs);
   115d1:	83 ec 0c             	sub    $0xc,%esp
   115d4:	ff 74 24 14          	pushl  0x14(%esp)
   115d8:	e8 79 fc ff ff       	call   11256 <set_fs>
   115dd:	83 c4 10             	add    $0x10,%esp
				// 如果当前偏移值p所在的串空间页面指针数组项page[p/PAGE_SIZE] == 0,表示此时p指针所处的空间内存页面还不存在,则需申请一空闲
				// 内存页,并将该页面指针填入指针数组,同时也使页面指针pag指向该新页面.若申请不到空闲页面则返回0.
				if (!(pag = (char *) page[p / PAGE_SIZE]) &&
   115e0:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   115e4:	c1 e8 0c             	shr    $0xc,%eax
   115e7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   115ee:	8b 44 24 38          	mov    0x38(%esp),%eax
   115f2:	01 d0                	add    %edx,%eax
   115f4:	8b 00                	mov    (%eax),%eax
   115f6:	89 44 24 18          	mov    %eax,0x18(%esp)
   115fa:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   115ff:	75 30                	jne    11631 <copy_strings+0x169>
				    !(pag = (char *) (page[p / PAGE_SIZE] =
   11601:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   11605:	c1 e8 0c             	shr    $0xc,%eax
   11608:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1160f:	8b 44 24 38          	mov    0x38(%esp),%eax
   11613:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
				      get_free_page())))
   11616:	e8 20 ba ff ff       	call   d03b <get_free_page>
				if (from_kmem == 2)								// 若串在内核空间则fs指回用户空间.
					set_fs(old_fs);
				// 如果当前偏移值p所在的串空间页面指针数组项page[p/PAGE_SIZE] == 0,表示此时p指针所处的空间内存页面还不存在,则需申请一空闲
				// 内存页,并将该页面指针填入指针数组,同时也使页面指针pag指向该新页面.若申请不到空闲页面则返回0.
				if (!(pag = (char *) page[p / PAGE_SIZE]) &&
				    !(pag = (char *) (page[p / PAGE_SIZE] =
   1161b:	89 03                	mov    %eax,(%ebx)
   1161d:	8b 03                	mov    (%ebx),%eax
   1161f:	89 44 24 18          	mov    %eax,0x18(%esp)
				offset = p % PAGE_SIZE;
				if (from_kmem == 2)								// 若串在内核空间则fs指回用户空间.
					set_fs(old_fs);
				// 如果当前偏移值p所在的串空间页面指针数组项page[p/PAGE_SIZE] == 0,表示此时p指针所处的空间内存页面还不存在,则需申请一空闲
				// 内存页,并将该页面指针填入指针数组,同时也使页面指针pag指向该新页面.若申请不到空闲页面则返回0.
				if (!(pag = (char *) page[p / PAGE_SIZE]) &&
   11623:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   11628:	75 07                	jne    11631 <copy_strings+0x169>
				    !(pag = (char *) (page[p / PAGE_SIZE] =
				      get_free_page())))
					return 0;
   1162a:	b8 00 00 00 00       	mov    $0x0,%eax
   1162f:	eb 6a                	jmp    1169b <copy_strings+0x1d3>
				if (from_kmem == 2)								// 若串在内核空间则fs指向内核空间.
   11631:	83 7c 24 40 02       	cmpl   $0x2,0x40(%esp)
   11636:	75 0f                	jne    11647 <copy_strings+0x17f>
					set_fs(new_fs);
   11638:	83 ec 0c             	sub    $0xc,%esp
   1163b:	ff 74 24 18          	pushl  0x18(%esp)
   1163f:	e8 12 fc ff ff       	call   11256 <set_fs>
   11644:	83 c4 10             	add    $0x10,%esp

			}
			// 然后从fs段中复制字符串的1字节到参数和环境空间内存页面pag的offset处.
			*(pag + offset) = get_fs_byte(tmp);
   11647:	8b 54 24 10          	mov    0x10(%esp),%edx
   1164b:	8b 44 24 18          	mov    0x18(%esp),%eax
   1164f:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
   11652:	83 ec 0c             	sub    $0xc,%esp
   11655:	ff 74 24 28          	pushl  0x28(%esp)
   11659:	e8 9f fb ff ff       	call   111fd <get_fs_byte>
   1165e:	83 c4 10             	add    $0x10,%esp
   11661:	88 03                	mov    %al,(%ebx)
			return 0;
		}
		// 接着我们逆向逐个字符地把字符串复制到参数和环境空间末端处.在循环复制字符串的字符过程中,我们首先要判断参数和环境空间中相应位
		// 置处是否已经有内存页面.如果还没有就先为其申请1页内存页面.偏移量offset被用途为在一个页面中的当前指针偏移值.因为刚开始执行
		// 本函数时,偏移变量offset被初始化为0,所以(offset-1 < 0)肯定成立而使得offset重新被设置为当前p指针在页面范围内的偏移值.
		while (len) {
   11663:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
   11668:	0f 85 30 ff ff ff    	jne    1159e <copy_strings+0xd6>
	if (from_kmem == 2)											// 若串指针在内核空间则设置fs指向内核空间.
		set_fs(new_fs);
	// 然后循环处理各个参数,从最后一个参数逆向开始复制,复制到指定偏移地址处.在循环中,首先取需要复制的当前字符串指针.如果字符串
	// 在用户空间而字符串数组(字符串指针)在内核空间,则设置fs段寄存器指向内核数据段(ds).并在内核数据空间中取了字符串指针tmp之
	// 后就立刻恢复fs段寄存器原值(fs再指回用户空间).否则不用修改fs值而直接从用户空间取字符串指针到tmp.
	while (argc-- > 0) {
   1166e:	8b 44 24 30          	mov    0x30(%esp),%eax
   11672:	8d 50 ff             	lea    -0x1(%eax),%edx
   11675:	89 54 24 30          	mov    %edx,0x30(%esp)
   11679:	85 c0                	test   %eax,%eax
   1167b:	0f 8f 92 fe ff ff    	jg     11513 <copy_strings+0x4b>
			// 然后从fs段中复制字符串的1字节到参数和环境空间内存页面pag的offset处.
			*(pag + offset) = get_fs_byte(tmp);
		}
	}
	// 如果字符串和字符串数组在内核空间,则恢复fs段寄存器原值.最后,返回参数和环境空间中已复制参数的头部偏移值.
	if (from_kmem == 2)
   11681:	83 7c 24 40 02       	cmpl   $0x2,0x40(%esp)
   11686:	75 0f                	jne    11697 <copy_strings+0x1cf>
		set_fs(old_fs);
   11688:	83 ec 0c             	sub    $0xc,%esp
   1168b:	ff 74 24 14          	pushl  0x14(%esp)
   1168f:	e8 c2 fb ff ff       	call   11256 <set_fs>
   11694:	83 c4 10             	add    $0x10,%esp
	return p;
   11697:	8b 44 24 3c          	mov    0x3c(%esp),%eax
}
   1169b:	83 c4 28             	add    $0x28,%esp
   1169e:	5b                   	pop    %ebx
   1169f:	c3                   	ret    

000116a0 <change_ldt>:
// 修改任务的局部描述符表内容.
// 修改局部描述符表LDT中描述符的段基址和段限长,并将参数和环境空间页面放置在数据段末端.
// 参数:text_size - 执行文件头部中a_text字段给出的代码段长度值;page - 参数和环境空间页面指针数组.
// 返回:数据段限长值(64MB)
static unsigned long change_ldt(unsigned long text_size, unsigned long * page)
{
   116a0:	56                   	push   %esi
   116a1:	53                   	push   %ebx
   116a2:	83 ec 24             	sub    $0x24,%esp
	int i;

	// 首先把代码和数据段长度均设置为64MB.然后取当前进程局部描述符表代码段描述符中代码段基址.代码段基址与数据段基址相同.
	// 再使用这些新值重新设置局部表中代码段和数据段描述符中的基址和段限长.这里请注意,由于被加载的新程序的代码和数据段基址
	// 与原程序的相同,因此没有必要再重复设置它们,即186和188行上的两条设置段基址的语句多余,可省略.
	code_limit = TASK_SIZE;
   116a5:	c7 44 24 14 00 00 00 	movl   $0x4000000,0x14(%esp)
   116ac:	04 
	data_limit = TASK_SIZE;
   116ad:	c7 44 24 10 00 00 00 	movl   $0x4000000,0x10(%esp)
   116b4:	04 
	code_base = get_base(current->ldt[1]);
   116b5:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   116ba:	05 a0 03 00 00       	add    $0x3a0,%eax
   116bf:	83 c0 02             	add    $0x2,%eax
   116c2:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   116c8:	81 c2 a0 03 00 00    	add    $0x3a0,%edx
   116ce:	8d 5a 04             	lea    0x4(%edx),%ebx
   116d1:	8b 0d a0 e1 02 00    	mov    0x2e1a0,%ecx
   116d7:	81 c1 a0 03 00 00    	add    $0x3a0,%ecx
   116dd:	83 c1 07             	add    $0x7,%ecx
   116e0:	8a 31                	mov    (%ecx),%dh
   116e2:	8a 13                	mov    (%ebx),%dl
   116e4:	c1 e2 10             	shl    $0x10,%edx
   116e7:	66 8b 10             	mov    (%eax),%dx
   116ea:	89 d0                	mov    %edx,%eax
   116ec:	89 44 24 0c          	mov    %eax,0xc(%esp)
   116f0:	8b 44 24 0c          	mov    0xc(%esp),%eax
   116f4:	89 44 24 08          	mov    %eax,0x8(%esp)
	data_base = code_base;
   116f8:	8b 44 24 08          	mov    0x8(%esp),%eax
   116fc:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	set_base(current->ldt[1], code_base);
   11700:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   11705:	05 a0 03 00 00       	add    $0x3a0,%eax
   1170a:	8d 48 02             	lea    0x2(%eax),%ecx
   1170d:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   11712:	05 a0 03 00 00       	add    $0x3a0,%eax
   11717:	8d 58 04             	lea    0x4(%eax),%ebx
   1171a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1171f:	05 a0 03 00 00       	add    $0x3a0,%eax
   11724:	8d 70 07             	lea    0x7(%eax),%esi
   11727:	8b 44 24 08          	mov    0x8(%esp),%eax
   1172b:	89 c2                	mov    %eax,%edx
   1172d:	66 89 11             	mov    %dx,(%ecx)
   11730:	c1 ca 10             	ror    $0x10,%edx
   11733:	88 13                	mov    %dl,(%ebx)
   11735:	88 36                	mov    %dh,(%esi)
   11737:	89 d0                	mov    %edx,%eax
   11739:	89 44 24 04          	mov    %eax,0x4(%esp)
	set_limit(current->ldt[1], code_limit);
   1173d:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   11742:	05 a0 03 00 00       	add    $0x3a0,%eax
   11747:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   1174d:	81 c2 a0 03 00 00    	add    $0x3a0,%edx
   11753:	8d 4a 06             	lea    0x6(%edx),%ecx
   11756:	8b 54 24 14          	mov    0x14(%esp),%edx
   1175a:	83 ea 01             	sub    $0x1,%edx
   1175d:	c1 ea 0c             	shr    $0xc,%edx
   11760:	66 89 10             	mov    %dx,(%eax)
   11763:	c1 ca 10             	ror    $0x10,%edx
   11766:	8a 31                	mov    (%ecx),%dh
   11768:	80 e6 f0             	and    $0xf0,%dh
   1176b:	08 f2                	or     %dh,%dl
   1176d:	88 11                	mov    %dl,(%ecx)
	set_base(current->ldt[2], data_base);
   1176f:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   11774:	05 a8 03 00 00       	add    $0x3a8,%eax
   11779:	8d 48 02             	lea    0x2(%eax),%ecx
   1177c:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   11781:	05 a8 03 00 00       	add    $0x3a8,%eax
   11786:	8d 58 04             	lea    0x4(%eax),%ebx
   11789:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1178e:	05 a8 03 00 00       	add    $0x3a8,%eax
   11793:	8d 70 07             	lea    0x7(%eax),%esi
   11796:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1179a:	89 c2                	mov    %eax,%edx
   1179c:	66 89 11             	mov    %dx,(%ecx)
   1179f:	c1 ca 10             	ror    $0x10,%edx
   117a2:	88 13                	mov    %dl,(%ebx)
   117a4:	88 36                	mov    %dh,(%esi)
   117a6:	89 d0                	mov    %edx,%eax
   117a8:	89 04 24             	mov    %eax,(%esp)
	set_limit(current->ldt[2], data_limit);
   117ab:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   117b0:	05 a8 03 00 00       	add    $0x3a8,%eax
   117b5:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   117bb:	81 c2 a8 03 00 00    	add    $0x3a8,%edx
   117c1:	8d 4a 06             	lea    0x6(%edx),%ecx
   117c4:	8b 54 24 10          	mov    0x10(%esp),%edx
   117c8:	83 ea 01             	sub    $0x1,%edx
   117cb:	c1 ea 0c             	shr    $0xc,%edx
   117ce:	66 89 10             	mov    %dx,(%eax)
   117d1:	c1 ca 10             	ror    $0x10,%edx
   117d4:	8a 31                	mov    (%ecx),%dh
   117d6:	80 e6 f0             	and    $0xf0,%dh
   117d9:	08 f2                	or     %dh,%dl
   117db:	88 11                	mov    %dl,(%ecx)
	/* make sure fs points to the NEW data segment */
	/* 要确信fs段寄存器已指向新的数据段 */
	// fs段寄存器中放入局部表数据段描述符的选择符(0x17).即默认情况下fs都指向任务数据段.
	__asm__("pushl $0x17\n\tpop %%fs"::);
   117dd:	6a 17                	push   $0x17
   117df:	0f a1                	pop    %fs
	// 然后将参数和环境空间已存放数据的页面(最多有MAX_ARG_PAGES页,128KB)放到数据段末端.方法是从进程空间库代码位置开始处
	// 逆向一页一页地放.库文件代码占用进程空间最后4MB.函数put_dirty_page()用于把物理页面映射到进程逻辑空间中.在mm/memory.c中.
	data_base += data_limit - LIBRARY_SIZE;
   117e1:	8b 54 24 10          	mov    0x10(%esp),%edx
   117e5:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   117e9:	01 d0                	add    %edx,%eax
   117eb:	2d 00 00 40 00       	sub    $0x400000,%eax
   117f0:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	for (i = MAX_ARG_PAGES - 1 ; i >= 0 ; i--) {
   117f4:	c7 44 24 18 1f 00 00 	movl   $0x1f,0x18(%esp)
   117fb:	00 
   117fc:	eb 47                	jmp    11845 <change_ldt+0x1a5>
		data_base -= PAGE_SIZE;
   117fe:	81 6c 24 1c 00 10 00 	subl   $0x1000,0x1c(%esp)
   11805:	00 
		if (page[i])									// 若该页面存在,就放置该页面.
   11806:	8b 44 24 18          	mov    0x18(%esp),%eax
   1180a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11811:	8b 44 24 34          	mov    0x34(%esp),%eax
   11815:	01 d0                	add    %edx,%eax
   11817:	8b 00                	mov    (%eax),%eax
   11819:	85 c0                	test   %eax,%eax
   1181b:	74 23                	je     11840 <change_ldt+0x1a0>
			put_dirty_page(page[i], data_base);
   1181d:	8b 44 24 18          	mov    0x18(%esp),%eax
   11821:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11828:	8b 44 24 34          	mov    0x34(%esp),%eax
   1182c:	01 d0                	add    %edx,%eax
   1182e:	8b 00                	mov    (%eax),%eax
   11830:	83 ec 08             	sub    $0x8,%esp
   11833:	ff 74 24 24          	pushl  0x24(%esp)
   11837:	50                   	push   %eax
   11838:	e8 f5 a8 ff ff       	call   c132 <put_dirty_page>
   1183d:	83 c4 10             	add    $0x10,%esp
	// fs段寄存器中放入局部表数据段描述符的选择符(0x17).即默认情况下fs都指向任务数据段.
	__asm__("pushl $0x17\n\tpop %%fs"::);
	// 然后将参数和环境空间已存放数据的页面(最多有MAX_ARG_PAGES页,128KB)放到数据段末端.方法是从进程空间库代码位置开始处
	// 逆向一页一页地放.库文件代码占用进程空间最后4MB.函数put_dirty_page()用于把物理页面映射到进程逻辑空间中.在mm/memory.c中.
	data_base += data_limit - LIBRARY_SIZE;
	for (i = MAX_ARG_PAGES - 1 ; i >= 0 ; i--) {
   11840:	83 6c 24 18 01       	subl   $0x1,0x18(%esp)
   11845:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   1184a:	79 b2                	jns    117fe <change_ldt+0x15e>
		data_base -= PAGE_SIZE;
		if (page[i])									// 若该页面存在,就放置该页面.
			put_dirty_page(page[i], data_base);
	}
	return data_limit;									// 最后返回数据段限长(64MB).
   1184c:	8b 44 24 10          	mov    0x10(%esp),%eax
}
   11850:	83 c4 24             	add    $0x24,%esp
   11853:	5b                   	pop    %ebx
   11854:	5e                   	pop    %esi
   11855:	c3                   	ret    

00011856 <do_execve>:
// argv - 命令行参数指针数组的指针;
// envp - 环境变更指针数组的指针.
// 返回:如果调用成功,则不返回;否则设置出错号,并返回-1.
int do_execve(unsigned long * eip, long tmp, char * filename,
	char ** argv, char ** envp)
{
   11856:	57                   	push   %edi
   11857:	56                   	push   %esi
   11858:	53                   	push   %ebx
   11859:	81 ec 70 01 00 00    	sub    $0x170,%esp
	struct exec ex;
	unsigned long page[MAX_ARG_PAGES];							// 参数和环境串空间页面指针数组.
	int i, argc, envc;
	int e_uid, e_gid;											// 有效用户ID和有效组ID.
	int retval;
	int sh_bang = 0;											// 控制是否需要执行脚本程序.
   1185f:	c7 84 24 5c 01 00 00 	movl   $0x0,0x15c(%esp)
   11866:	00 00 00 00 
	unsigned long p = PAGE_SIZE * MAX_ARG_PAGES - 4;			// p指向参数和环境空间的最后部.
   1186a:	c7 84 24 58 01 00 00 	movl   $0x1fffc,0x158(%esp)
   11871:	fc ff 01 00 
	// 上行把p初始设置成位于128KB空间的最后1个长字处.在初始参数和环境空间的操作过程中,p将用来指明在128KB空间中的当前位置.
	// 另外,参数eip[1]是调用本次系统调用的原用户程序代码段寄存器CS值,其中的段选择符当然必须是当前任务的代码段选择符(0x000f).
	// 若不是该值,那么CS只能会是内核代码段的选择符0x0008.但这是绝对不允许的,因为内核代码是常驻内存而不能被替换掉的.因此下面根据
	// eip[1]的值确认是否符合正常情况.然后再初始化128KB的参数和环境串空间,把所有字节清零,并取出执行文件的i节点.再根据函数参数
	// 分别计算出命令行参数和环境字符串的个数argc和envc.另外,执行文件必须是常规文件.
	if ((0xffff & eip[1]) != 0x000f)
   11875:	8b 84 24 80 01 00 00 	mov    0x180(%esp),%eax
   1187c:	83 c0 04             	add    $0x4,%eax
   1187f:	8b 00                	mov    (%eax),%eax
   11881:	0f b7 c0             	movzwl %ax,%eax
   11884:	83 f8 0f             	cmp    $0xf,%eax
   11887:	74 10                	je     11899 <do_execve+0x43>
		panic("execve called from supervisor mode");
   11889:	83 ec 0c             	sub    $0xc,%esp
   1188c:	68 3c 3a 02 00       	push   $0x23a3c
   11891:	e8 72 73 ff ff       	call   8c08 <panic>
   11896:	83 c4 10             	add    $0x10,%esp
	for (i = 0 ; i < MAX_ARG_PAGES ; i++)						/* clear page-table */
   11899:	c7 84 24 68 01 00 00 	movl   $0x0,0x168(%esp)
   118a0:	00 00 00 00 
   118a4:	eb 1a                	jmp    118c0 <do_execve+0x6a>
		page[i] = 0;
   118a6:	8b 84 24 68 01 00 00 	mov    0x168(%esp),%eax
   118ad:	c7 84 84 8c 00 00 00 	movl   $0x0,0x8c(%esp,%eax,4)
   118b4:	00 00 00 00 
	// 若不是该值,那么CS只能会是内核代码段的选择符0x0008.但这是绝对不允许的,因为内核代码是常驻内存而不能被替换掉的.因此下面根据
	// eip[1]的值确认是否符合正常情况.然后再初始化128KB的参数和环境串空间,把所有字节清零,并取出执行文件的i节点.再根据函数参数
	// 分别计算出命令行参数和环境字符串的个数argc和envc.另外,执行文件必须是常规文件.
	if ((0xffff & eip[1]) != 0x000f)
		panic("execve called from supervisor mode");
	for (i = 0 ; i < MAX_ARG_PAGES ; i++)						/* clear page-table */
   118b8:	83 84 24 68 01 00 00 	addl   $0x1,0x168(%esp)
   118bf:	01 
   118c0:	83 bc 24 68 01 00 00 	cmpl   $0x1f,0x168(%esp)
   118c7:	1f 
   118c8:	7e dc                	jle    118a6 <do_execve+0x50>
		page[i] = 0;
	if (!(inode = namei(filename)))								/* get executables inode */
   118ca:	8b 84 24 88 01 00 00 	mov    0x188(%esp),%eax
   118d1:	83 ec 0c             	sub    $0xc,%esp
   118d4:	50                   	push   %eax
   118d5:	e8 84 1b 00 00       	call   1345e <namei>
   118da:	83 c4 10             	add    $0x10,%esp
   118dd:	89 84 24 6c 01 00 00 	mov    %eax,0x16c(%esp)
   118e4:	83 bc 24 6c 01 00 00 	cmpl   $0x0,0x16c(%esp)
   118eb:	00 
   118ec:	75 0a                	jne    118f8 <do_execve+0xa2>
		return -ENOENT;
   118ee:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   118f3:	e9 94 0a 00 00       	jmp    1238c <do_execve+0xb36>
	argc = count(argv);											// 命令行参数个数.
   118f8:	83 ec 0c             	sub    $0xc,%esp
   118fb:	ff b4 24 98 01 00 00 	pushl  0x198(%esp)
   11902:	e8 80 fb ff ff       	call   11487 <count>
   11907:	83 c4 10             	add    $0x10,%esp
   1190a:	89 84 24 64 01 00 00 	mov    %eax,0x164(%esp)
	envc = count(envp);											// 环境字符串变量个数.
   11911:	83 ec 0c             	sub    $0xc,%esp
   11914:	ff b4 24 9c 01 00 00 	pushl  0x19c(%esp)
   1191b:	e8 67 fb ff ff       	call   11487 <count>
   11920:	83 c4 10             	add    $0x10,%esp
   11923:	89 84 24 50 01 00 00 	mov    %eax,0x150(%esp)

restart_interp:
	if (!S_ISREG(inode->i_mode)) {								/* must be regular file */
   1192a:	8b 84 24 6c 01 00 00 	mov    0x16c(%esp),%eax
   11931:	0f b7 00             	movzwl (%eax),%eax
   11934:	0f b7 c0             	movzwl %ax,%eax
   11937:	25 00 f0 00 00       	and    $0xf000,%eax
   1193c:	3d 00 80 00 00       	cmp    $0x8000,%eax
   11941:	74 10                	je     11953 <do_execve+0xfd>
		retval = -EACCES;
   11943:	c7 84 24 60 01 00 00 	movl   $0xfffffff3,0x160(%esp)
   1194a:	f3 ff ff ff 
		goto exec_error2;										// 若不是常规文件则置出错码,跳转到376行.
   1194e:	e9 e7 09 00 00       	jmp    1233a <do_execve+0xae4>
	// 字段值取到i中后,我们首先查看属性中是否设置了"设置-用户-ID"(set-user-ID)标志和"设置-组-ID)(set-group-id)标志.这两
	// 个标志主要是让一般用户能够执行特权用户(如超级用户root)的程序,例如改变密码的程序passwd等.如果set-user-ID标志置位,则
	// 后面执行进程的有效用户ID(euid)就设置成执行文件的用户ID,否则设置成当前进程的euid.如果执行文件set-group-id被置位的话,
	// 则执行进程的有效组ID(egid)就设置为执行执行文件的组ID.否则设置成当前进程的egid.这里暂把这两个判断出来的值保存在变量
	// e_uid和e_gid中.
	i = inode->i_mode;
   11953:	8b 84 24 6c 01 00 00 	mov    0x16c(%esp),%eax
   1195a:	0f b7 00             	movzwl (%eax),%eax
   1195d:	0f b7 c0             	movzwl %ax,%eax
   11960:	89 84 24 68 01 00 00 	mov    %eax,0x168(%esp)
	e_uid = (i & S_ISUID) ? inode->i_uid : current->euid;
   11967:	8b 84 24 68 01 00 00 	mov    0x168(%esp),%eax
   1196e:	25 00 08 00 00       	and    $0x800,%eax
   11973:	85 c0                	test   %eax,%eax
   11975:	74 10                	je     11987 <do_execve+0x131>
   11977:	8b 84 24 6c 01 00 00 	mov    0x16c(%esp),%eax
   1197e:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   11982:	0f b7 c0             	movzwl %ax,%eax
   11985:	eb 0f                	jmp    11996 <do_execve+0x140>
   11987:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1198c:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
   11993:	0f b7 c0             	movzwl %ax,%eax
   11996:	89 84 24 4c 01 00 00 	mov    %eax,0x14c(%esp)
	e_gid = (i & S_ISGID) ? inode->i_gid : current->egid;
   1199d:	8b 84 24 68 01 00 00 	mov    0x168(%esp),%eax
   119a4:	25 00 04 00 00       	and    $0x400,%eax
   119a9:	85 c0                	test   %eax,%eax
   119ab:	74 10                	je     119bd <do_execve+0x167>
   119ad:	8b 84 24 6c 01 00 00 	mov    0x16c(%esp),%eax
   119b4:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
   119b8:	0f b6 c0             	movzbl %al,%eax
   119bb:	eb 0f                	jmp    119cc <do_execve+0x176>
   119bd:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   119c2:	0f b7 80 d4 02 00 00 	movzwl 0x2d4(%eax),%eax
   119c9:	0f b7 c0             	movzwl %ax,%eax
   119cc:	89 84 24 48 01 00 00 	mov    %eax,0x148(%esp)
	// 现在根据进程的euid和egid和执行文件的访问属性进行比较.如果执行文件属于运行进程的用户,则把文件属性值i右移6位,此时其最低3
	// 位是文件宿主的访问权限标志.否则的话如果执行文件与当前进程的用户属于同组,则使属性最低3位是执行文件组用户的访问权限标志.否则
	// 此时属性字最低3位就是其他用户访问该执行文件的权限.然后我们根据属性字i的最低3位值来判断当前进程是否有权限运行这个执行文件.
	// 如果选出的相应用户没有运行该文件的权力(位0是执行权限),并且其他用户也没有任何权限或者当前进程用户不是超级用户,则表明当前进
	// 程没有权力运行这个执行文件.于是置不可执行出错码,并跳转到exec_error2处去作退出处理.
	if (current->euid == inode->i_uid)
   119d3:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   119d8:	0f b7 90 ce 02 00 00 	movzwl 0x2ce(%eax),%edx
   119df:	8b 84 24 6c 01 00 00 	mov    0x16c(%esp),%eax
   119e6:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   119ea:	66 39 c2             	cmp    %ax,%dx
   119ed:	75 0a                	jne    119f9 <do_execve+0x1a3>
		i >>= 6;
   119ef:	c1 bc 24 68 01 00 00 	sarl   $0x6,0x168(%esp)
   119f6:	06 
   119f7:	eb 26                	jmp    11a1f <do_execve+0x1c9>
	else if (in_group_p(inode->i_gid))
   119f9:	8b 84 24 6c 01 00 00 	mov    0x16c(%esp),%eax
   11a00:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
   11a04:	0f b6 c0             	movzbl %al,%eax
   11a07:	83 ec 0c             	sub    $0xc,%esp
   11a0a:	50                   	push   %eax
   11a0b:	e8 26 82 ff ff       	call   9c36 <in_group_p>
   11a10:	83 c4 10             	add    $0x10,%esp
   11a13:	85 c0                	test   %eax,%eax
   11a15:	74 08                	je     11a1f <do_execve+0x1c9>
		i >>= 3;
   11a17:	c1 bc 24 68 01 00 00 	sarl   $0x3,0x168(%esp)
   11a1e:	03 
	if (!(i & 1) &&
   11a1f:	8b 84 24 68 01 00 00 	mov    0x168(%esp),%eax
   11a26:	83 e0 01             	and    $0x1,%eax
   11a29:	85 c0                	test   %eax,%eax
   11a2b:	75 35                	jne    11a62 <do_execve+0x20c>
	    !((inode->i_mode & 0111) && suser())) {
   11a2d:	8b 84 24 6c 01 00 00 	mov    0x16c(%esp),%eax
   11a34:	0f b7 00             	movzwl (%eax),%eax
   11a37:	0f b7 c0             	movzwl %ax,%eax
   11a3a:	83 e0 49             	and    $0x49,%eax
	// 程没有权力运行这个执行文件.于是置不可执行出错码,并跳转到exec_error2处去作退出处理.
	if (current->euid == inode->i_uid)
		i >>= 6;
	else if (in_group_p(inode->i_gid))
		i >>= 3;
	if (!(i & 1) &&
   11a3d:	85 c0                	test   %eax,%eax
   11a3f:	74 11                	je     11a52 <do_execve+0x1fc>
	    !((inode->i_mode & 0111) && suser())) {
   11a41:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   11a46:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
   11a4d:	66 85 c0             	test   %ax,%ax
   11a50:	74 10                	je     11a62 <do_execve+0x20c>
		retval = -ENOEXEC;
   11a52:	c7 84 24 60 01 00 00 	movl   $0xfffffff8,0x160(%esp)
   11a59:	f8 ff ff ff 
		goto exec_error2;
   11a5d:	e9 d8 08 00 00       	jmp    1233a <do_execve+0xae4>
	// 的解释程序名及后面的参数(若有的话),然后将这些参数和脚本文件名放进执行文件(此时是解释程序)的命令行参数空间中.在这之前我们当然
	// 需要先把函数指定的原有命令行参数和环境字符串放到128KB空间中,而这里建立起来的命令行参数则放到它们前面位置处(因为是逆向放置).
	// 最后让内核执行脚本文件的解释程序.下面就是在设置好解释程序的脚本文件名等参数后,取出解释程序的i节点并跳转到229行支执行解释程序.
	// 由于我们需要跳转到执行过的代码229行支.因此在下面确认并处理了脚本文件之后需要设置一个禁止再次执行下面的脚本处理代码标志sh_bang.
	// 在后面的代码中该标志也用来表示我们已经设置好执行文件的命令行参数,不要重复设置.
	if (!(bh = bread(inode->i_dev, inode->i_zone[0]))) {
   11a62:	8b 84 24 6c 01 00 00 	mov    0x16c(%esp),%eax
   11a69:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   11a6d:	0f b7 d0             	movzwl %ax,%edx
   11a70:	8b 84 24 6c 01 00 00 	mov    0x16c(%esp),%eax
   11a77:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   11a7b:	0f b7 c0             	movzwl %ax,%eax
   11a7e:	83 ec 08             	sub    $0x8,%esp
   11a81:	52                   	push   %edx
   11a82:	50                   	push   %eax
   11a83:	e8 0b dc ff ff       	call   f693 <bread>
   11a88:	83 c4 10             	add    $0x10,%esp
   11a8b:	89 84 24 44 01 00 00 	mov    %eax,0x144(%esp)
   11a92:	83 bc 24 44 01 00 00 	cmpl   $0x0,0x144(%esp)
   11a99:	00 
   11a9a:	75 10                	jne    11aac <do_execve+0x256>
		retval = -EACCES;
   11a9c:	c7 84 24 60 01 00 00 	movl   $0xfffffff3,0x160(%esp)
   11aa3:	f3 ff ff ff 
		goto exec_error2;
   11aa7:	e9 8e 08 00 00       	jmp    1233a <do_execve+0xae4>
	}
	ex = *((struct exec *) bh->b_data);								/* read exec-header */
   11aac:	8b 84 24 44 01 00 00 	mov    0x144(%esp),%eax
   11ab3:	8b 00                	mov    (%eax),%eax
   11ab5:	8b 10                	mov    (%eax),%edx
   11ab7:	89 94 24 0c 01 00 00 	mov    %edx,0x10c(%esp)
   11abe:	8b 50 04             	mov    0x4(%eax),%edx
   11ac1:	89 94 24 10 01 00 00 	mov    %edx,0x110(%esp)
   11ac8:	8b 50 08             	mov    0x8(%eax),%edx
   11acb:	89 94 24 14 01 00 00 	mov    %edx,0x114(%esp)
   11ad2:	8b 50 0c             	mov    0xc(%eax),%edx
   11ad5:	89 94 24 18 01 00 00 	mov    %edx,0x118(%esp)
   11adc:	8b 50 10             	mov    0x10(%eax),%edx
   11adf:	89 94 24 1c 01 00 00 	mov    %edx,0x11c(%esp)
   11ae6:	8b 50 14             	mov    0x14(%eax),%edx
   11ae9:	89 94 24 20 01 00 00 	mov    %edx,0x120(%esp)
   11af0:	8b 50 18             	mov    0x18(%eax),%edx
   11af3:	89 94 24 24 01 00 00 	mov    %edx,0x124(%esp)
   11afa:	8b 40 1c             	mov    0x1c(%eax),%eax
   11afd:	89 84 24 28 01 00 00 	mov    %eax,0x128(%esp)
	if ((bh->b_data[0] == '#') && (bh->b_data[1] == '!') && (!sh_bang)) {
   11b04:	8b 84 24 44 01 00 00 	mov    0x144(%esp),%eax
   11b0b:	8b 00                	mov    (%eax),%eax
   11b0d:	0f b6 00             	movzbl (%eax),%eax
   11b10:	3c 23                	cmp    $0x23,%al
   11b12:	0f 85 61 03 00 00    	jne    11e79 <do_execve+0x623>
   11b18:	8b 84 24 44 01 00 00 	mov    0x144(%esp),%eax
   11b1f:	8b 00                	mov    (%eax),%eax
   11b21:	83 c0 01             	add    $0x1,%eax
   11b24:	0f b6 00             	movzbl (%eax),%eax
   11b27:	3c 21                	cmp    $0x21,%al
   11b29:	0f 85 4a 03 00 00    	jne    11e79 <do_execve+0x623>
   11b2f:	83 bc 24 5c 01 00 00 	cmpl   $0x0,0x15c(%esp)
   11b36:	00 
   11b37:	0f 85 3c 03 00 00    	jne    11e79 <do_execve+0x623>
		unsigned long old_fs;

		// 从这里开始，我们从脚本文件中提取解释程序名及其参数，并把解释程序名、解释程序的参数和脚本文件名组合放入环境参数块中。首先复制脚本
		// 文件头1行字符‘#!’后面的字符串到buf中，其中含有脚本解释程序名（例如/bin/sh），也可能还包含解释程序的几个参数。然后对buf中的内容
		// 进行处理。删除开始的空格、制表符。
		strncpy(buf, bh->b_data + 2, 127);
   11b3d:	8b 84 24 44 01 00 00 	mov    0x144(%esp),%eax
   11b44:	8b 00                	mov    (%eax),%eax
   11b46:	83 c0 02             	add    $0x2,%eax
   11b49:	83 ec 04             	sub    $0x4,%esp
   11b4c:	6a 7f                	push   $0x7f
   11b4e:	50                   	push   %eax
   11b4f:	8d 44 24 10          	lea    0x10(%esp),%eax
   11b53:	50                   	push   %eax
   11b54:	e8 4f f6 ff ff       	call   111a8 <strncpy>
   11b59:	83 c4 10             	add    $0x10,%esp
		brelse(bh);             									// 释放缓冲块并放回脚本文件i节点。
   11b5c:	83 ec 0c             	sub    $0xc,%esp
   11b5f:	ff b4 24 50 01 00 00 	pushl  0x150(%esp)
   11b66:	e8 d2 da ff ff       	call   f63d <brelse>
   11b6b:	83 c4 10             	add    $0x10,%esp
		iput(inode);
   11b6e:	83 ec 0c             	sub    $0xc,%esp
   11b71:	ff b4 24 78 01 00 00 	pushl  0x178(%esp)
   11b78:	e8 1f cb ff ff       	call   e69c <iput>
   11b7d:	83 c4 10             	add    $0x10,%esp
		buf[127] = '\0';
   11b80:	c6 84 24 83 00 00 00 	movb   $0x0,0x83(%esp)
   11b87:	00 
		if (cp = strchr(buf, '\n')) {
   11b88:	83 ec 08             	sub    $0x8,%esp
   11b8b:	6a 0a                	push   $0xa
   11b8d:	8d 44 24 10          	lea    0x10(%esp),%eax
   11b91:	50                   	push   %eax
   11b92:	e8 38 f6 ff ff       	call   111cf <strchr>
   11b97:	83 c4 10             	add    $0x10,%esp
   11b9a:	89 84 24 54 01 00 00 	mov    %eax,0x154(%esp)
   11ba1:	83 bc 24 54 01 00 00 	cmpl   $0x0,0x154(%esp)
   11ba8:	00 
   11ba9:	74 3b                	je     11be6 <do_execve+0x390>
			*cp = '\0';     										// 第1个换行符换成NULL并去掉行头空格制表符。
   11bab:	8b 84 24 54 01 00 00 	mov    0x154(%esp),%eax
   11bb2:	c6 00 00             	movb   $0x0,(%eax)
			for (cp = buf; (*cp == ' ') || (*cp == '\t'); cp++);
   11bb5:	8d 44 24 04          	lea    0x4(%esp),%eax
   11bb9:	89 84 24 54 01 00 00 	mov    %eax,0x154(%esp)
   11bc0:	eb 08                	jmp    11bca <do_execve+0x374>
   11bc2:	83 84 24 54 01 00 00 	addl   $0x1,0x154(%esp)
   11bc9:	01 
   11bca:	8b 84 24 54 01 00 00 	mov    0x154(%esp),%eax
   11bd1:	0f b6 00             	movzbl (%eax),%eax
   11bd4:	3c 20                	cmp    $0x20,%al
   11bd6:	74 ea                	je     11bc2 <do_execve+0x36c>
   11bd8:	8b 84 24 54 01 00 00 	mov    0x154(%esp),%eax
   11bdf:	0f b6 00             	movzbl (%eax),%eax
   11be2:	3c 09                	cmp    $0x9,%al
   11be4:	74 dc                	je     11bc2 <do_execve+0x36c>
		}
		if (!cp || *cp == '\0') {       							// 若该行没有其他内容，则出错。
   11be6:	83 bc 24 54 01 00 00 	cmpl   $0x0,0x154(%esp)
   11bed:	00 
   11bee:	74 0e                	je     11bfe <do_execve+0x3a8>
   11bf0:	8b 84 24 54 01 00 00 	mov    0x154(%esp),%eax
   11bf7:	0f b6 00             	movzbl (%eax),%eax
   11bfa:	84 c0                	test   %al,%al
   11bfc:	75 10                	jne    11c0e <do_execve+0x3b8>
			retval = -ENOEXEC; 										/* No interpreter name found */
   11bfe:	c7 84 24 60 01 00 00 	movl   $0xfffffff8,0x160(%esp)
   11c05:	f8 ff ff ff 
			goto exec_error1;       								/* 没有找到脚本解释程序名 */
   11c09:	e9 3e 07 00 00       	jmp    1234c <do_execve+0xaf6>
		}
		// 此时我们得到了开头是脚本解释程序名的一行内容（字符串）。下面分析该行。首先取第一个字符串，它应该是解释程序名，此时i_name指向该
		// 名称。若解释程序名后还有字符，则它们应该是解释程序的参数串，于是令i_arg指向该串。
		interp = i_name = cp;
   11c0e:	8b 84 24 54 01 00 00 	mov    0x154(%esp),%eax
   11c15:	89 84 24 88 00 00 00 	mov    %eax,0x88(%esp)
   11c1c:	8b 84 24 88 00 00 00 	mov    0x88(%esp),%eax
   11c23:	89 84 24 40 01 00 00 	mov    %eax,0x140(%esp)
		i_arg = 0;
   11c2a:	c7 84 24 84 00 00 00 	movl   $0x0,0x84(%esp)
   11c31:	00 00 00 00 
		for ( ; *cp && (*cp != ' ') && (*cp != '\t'); cp++) {
   11c35:	eb 27                	jmp    11c5e <do_execve+0x408>
 			if (*cp == '/')
   11c37:	8b 84 24 54 01 00 00 	mov    0x154(%esp),%eax
   11c3e:	0f b6 00             	movzbl (%eax),%eax
   11c41:	3c 2f                	cmp    $0x2f,%al
   11c43:	75 11                	jne    11c56 <do_execve+0x400>
				i_name = cp+1;
   11c45:	8b 84 24 54 01 00 00 	mov    0x154(%esp),%eax
   11c4c:	83 c0 01             	add    $0x1,%eax
   11c4f:	89 84 24 88 00 00 00 	mov    %eax,0x88(%esp)
		}
		// 此时我们得到了开头是脚本解释程序名的一行内容（字符串）。下面分析该行。首先取第一个字符串，它应该是解释程序名，此时i_name指向该
		// 名称。若解释程序名后还有字符，则它们应该是解释程序的参数串，于是令i_arg指向该串。
		interp = i_name = cp;
		i_arg = 0;
		for ( ; *cp && (*cp != ' ') && (*cp != '\t'); cp++) {
   11c56:	83 84 24 54 01 00 00 	addl   $0x1,0x154(%esp)
   11c5d:	01 
   11c5e:	8b 84 24 54 01 00 00 	mov    0x154(%esp),%eax
   11c65:	0f b6 00             	movzbl (%eax),%eax
   11c68:	84 c0                	test   %al,%al
   11c6a:	74 1c                	je     11c88 <do_execve+0x432>
   11c6c:	8b 84 24 54 01 00 00 	mov    0x154(%esp),%eax
   11c73:	0f b6 00             	movzbl (%eax),%eax
   11c76:	3c 20                	cmp    $0x20,%al
   11c78:	74 0e                	je     11c88 <do_execve+0x432>
   11c7a:	8b 84 24 54 01 00 00 	mov    0x154(%esp),%eax
   11c81:	0f b6 00             	movzbl (%eax),%eax
   11c84:	3c 09                	cmp    $0x9,%al
   11c86:	75 af                	jne    11c37 <do_execve+0x3e1>
 			if (*cp == '/')
				i_name = cp+1;
		}
		if (*cp) {
   11c88:	8b 84 24 54 01 00 00 	mov    0x154(%esp),%eax
   11c8f:	0f b6 00             	movzbl (%eax),%eax
   11c92:	84 c0                	test   %al,%al
   11c94:	74 22                	je     11cb8 <do_execve+0x462>
			*cp++ = '\0';           								// 解释程序名尾添加NULL字符。
   11c96:	8b 84 24 54 01 00 00 	mov    0x154(%esp),%eax
   11c9d:	8d 50 01             	lea    0x1(%eax),%edx
   11ca0:	89 94 24 54 01 00 00 	mov    %edx,0x154(%esp)
   11ca7:	c6 00 00             	movb   $0x0,(%eax)
			i_arg = cp;             								// i_arg指向解释程序参数。
   11caa:	8b 84 24 54 01 00 00 	mov    0x154(%esp),%eax
   11cb1:	89 84 24 84 00 00 00 	mov    %eax,0x84(%esp)
		// 这里我们把sh_bang标志置上，然后把函数参数提供的原有参数和环境字符串放入到空间中。环境字符串和参数个数分别是envc和
		// argc-1个。少复制的一个原有参数是原来的执行文件名，即这里的脚本文件名。[[?? 可以看出，实际上我们不需要去另行处理脚本
		// 文件名，即这里完全可以复制argc个参数，包括原来执行文件名（即现在的脚本文件名）。因为它位于同一个位置上]]。注意！这里
		// 指针p随着复制信息增加而逐渐向小地址方向移动，因此这两个复制串函数执行完后，环境参数串信息块位于程序命令行参数串信息块
		// 的上方，并且p指向程序的第1个参数串。copy_strings()最后一个参数（0）指明参数字符串在用户空间。
		if (sh_bang++ == 0) {
   11cb8:	8b 84 24 5c 01 00 00 	mov    0x15c(%esp),%eax
   11cbf:	8d 50 01             	lea    0x1(%eax),%edx
   11cc2:	89 94 24 5c 01 00 00 	mov    %edx,0x15c(%esp)
   11cc9:	85 c0                	test   %eax,%eax
   11ccb:	75 6e                	jne    11d3b <do_execve+0x4e5>
			p = copy_strings(envc, envp, page, p, 0);
   11ccd:	83 ec 0c             	sub    $0xc,%esp
   11cd0:	6a 00                	push   $0x0
   11cd2:	ff b4 24 68 01 00 00 	pushl  0x168(%esp)
   11cd9:	8d 84 24 a0 00 00 00 	lea    0xa0(%esp),%eax
   11ce0:	50                   	push   %eax
   11ce1:	ff b4 24 a8 01 00 00 	pushl  0x1a8(%esp)
   11ce8:	ff b4 24 6c 01 00 00 	pushl  0x16c(%esp)
   11cef:	e8 d4 f7 ff ff       	call   114c8 <copy_strings>
   11cf4:	83 c4 20             	add    $0x20,%esp
   11cf7:	89 84 24 58 01 00 00 	mov    %eax,0x158(%esp)
			p = copy_strings(--argc, argv + 1, page, p, 0);
   11cfe:	8b 84 24 8c 01 00 00 	mov    0x18c(%esp),%eax
   11d05:	8d 50 04             	lea    0x4(%eax),%edx
   11d08:	83 ac 24 64 01 00 00 	subl   $0x1,0x164(%esp)
   11d0f:	01 
   11d10:	83 ec 0c             	sub    $0xc,%esp
   11d13:	6a 00                	push   $0x0
   11d15:	ff b4 24 68 01 00 00 	pushl  0x168(%esp)
   11d1c:	8d 84 24 a0 00 00 00 	lea    0xa0(%esp),%eax
   11d23:	50                   	push   %eax
   11d24:	52                   	push   %edx
   11d25:	ff b4 24 80 01 00 00 	pushl  0x180(%esp)
   11d2c:	e8 97 f7 ff ff       	call   114c8 <copy_strings>
   11d31:	83 c4 20             	add    $0x20,%esp
   11d34:	89 84 24 58 01 00 00 	mov    %eax,0x158(%esp)
         */
		// 接着我们逆向复制脚本文件名、解释程序的参数和解释程序文件名到参数和环境空间中。若出错，则置出错吗，跳转到exec_error1。
		// 另外，由于本函数参数提供的脚本文件名filename在用户空间，但这里赋予copy_strings()的脚本文件名的指针在内核空间，因此
		// 这个复制字符串函数的最后一个参数（字符串来源标志）需要被设置成1。若字符串在内核空间，则copy_strings()的最后一个参数
		// 要设置成功，如下面。
		p = copy_strings(1, &filename, page, p, 1);
   11d3b:	83 ec 0c             	sub    $0xc,%esp
   11d3e:	6a 01                	push   $0x1
   11d40:	ff b4 24 68 01 00 00 	pushl  0x168(%esp)
   11d47:	8d 84 24 a0 00 00 00 	lea    0xa0(%esp),%eax
   11d4e:	50                   	push   %eax
   11d4f:	8d 84 24 a0 01 00 00 	lea    0x1a0(%esp),%eax
   11d56:	50                   	push   %eax
   11d57:	6a 01                	push   $0x1
   11d59:	e8 6a f7 ff ff       	call   114c8 <copy_strings>
   11d5e:	83 c4 20             	add    $0x20,%esp
   11d61:	89 84 24 58 01 00 00 	mov    %eax,0x158(%esp)
		argc++;
   11d68:	83 84 24 64 01 00 00 	addl   $0x1,0x164(%esp)
   11d6f:	01 
		if (i_arg) {            									// 复制解释程序的多个参数。
   11d70:	8b 84 24 84 00 00 00 	mov    0x84(%esp),%eax
   11d77:	85 c0                	test   %eax,%eax
   11d79:	74 35                	je     11db0 <do_execve+0x55a>
			p = copy_strings(1, &i_arg, page, p, 2);
   11d7b:	83 ec 0c             	sub    $0xc,%esp
   11d7e:	6a 02                	push   $0x2
   11d80:	ff b4 24 68 01 00 00 	pushl  0x168(%esp)
   11d87:	8d 84 24 a0 00 00 00 	lea    0xa0(%esp),%eax
   11d8e:	50                   	push   %eax
   11d8f:	8d 84 24 9c 00 00 00 	lea    0x9c(%esp),%eax
   11d96:	50                   	push   %eax
   11d97:	6a 01                	push   $0x1
   11d99:	e8 2a f7 ff ff       	call   114c8 <copy_strings>
   11d9e:	83 c4 20             	add    $0x20,%esp
   11da1:	89 84 24 58 01 00 00 	mov    %eax,0x158(%esp)
			argc++;
   11da8:	83 84 24 64 01 00 00 	addl   $0x1,0x164(%esp)
   11daf:	01 
		}
		p = copy_strings(1, &i_name, page, p, 2);
   11db0:	83 ec 0c             	sub    $0xc,%esp
   11db3:	6a 02                	push   $0x2
   11db5:	ff b4 24 68 01 00 00 	pushl  0x168(%esp)
   11dbc:	8d 84 24 a0 00 00 00 	lea    0xa0(%esp),%eax
   11dc3:	50                   	push   %eax
   11dc4:	8d 84 24 a0 00 00 00 	lea    0xa0(%esp),%eax
   11dcb:	50                   	push   %eax
   11dcc:	6a 01                	push   $0x1
   11dce:	e8 f5 f6 ff ff       	call   114c8 <copy_strings>
   11dd3:	83 c4 20             	add    $0x20,%esp
   11dd6:	89 84 24 58 01 00 00 	mov    %eax,0x158(%esp)
		argc++;
   11ddd:	83 84 24 64 01 00 00 	addl   $0x1,0x164(%esp)
   11de4:	01 
		if (!p) {
   11de5:	83 bc 24 58 01 00 00 	cmpl   $0x0,0x158(%esp)
   11dec:	00 
   11ded:	75 10                	jne    11dff <do_execve+0x5a9>
			retval = -ENOMEM;
   11def:	c7 84 24 60 01 00 00 	movl   $0xfffffff4,0x160(%esp)
   11df6:	f4 ff ff ff 
			goto exec_error1;
   11dfa:	e9 4d 05 00 00       	jmp    1234c <do_execve+0xaf6>
		// 最后我们取得解释程序的i节点指针，然后跳转到204行去执行解释程序。为了获得解释程序的i节点，我们需要使用namei()函数，但是该函数
		// 所使用的参数（文件名）是从用户数据空间得到的，即从段寄存器fs所指空间中取得。因此在调用namei()函数之前我们需要先临时让fs指向内
		// 核数据空间，以让函数能从内核空间得到解释程序名，并在namei()返回后恢复fs的默认设置。因此这里我们先临时保存原fs段寄存器（原指向
		// 用户数据段）的值，将其设置成指向内核数据段，然后取解释程序的i节点。之后再恢复fs的原值。并跳转到restart_interp（204行）处重新
		// 处理新的执行文件 -- 脚本文件的解释程序。
		old_fs = get_fs();
   11dff:	e8 2a f4 ff ff       	call   1122e <get_fs>
   11e04:	89 84 24 3c 01 00 00 	mov    %eax,0x13c(%esp)
		set_fs(get_ds());
   11e0b:	e8 32 f4 ff ff       	call   11242 <get_ds>
   11e10:	83 ec 0c             	sub    $0xc,%esp
   11e13:	50                   	push   %eax
   11e14:	e8 3d f4 ff ff       	call   11256 <set_fs>
   11e19:	83 c4 10             	add    $0x10,%esp
		if (!(inode = namei(interp))) { 						/* get executables inode */
   11e1c:	83 ec 0c             	sub    $0xc,%esp
   11e1f:	ff b4 24 4c 01 00 00 	pushl  0x14c(%esp)
   11e26:	e8 33 16 00 00       	call   1345e <namei>
   11e2b:	83 c4 10             	add    $0x10,%esp
   11e2e:	89 84 24 6c 01 00 00 	mov    %eax,0x16c(%esp)
   11e35:	83 bc 24 6c 01 00 00 	cmpl   $0x0,0x16c(%esp)
   11e3c:	00 
   11e3d:	75 23                	jne    11e62 <do_execve+0x60c>
			set_fs(old_fs);       								/* 取得解释程序的i节点 */
   11e3f:	83 ec 0c             	sub    $0xc,%esp
   11e42:	ff b4 24 48 01 00 00 	pushl  0x148(%esp)
   11e49:	e8 08 f4 ff ff       	call   11256 <set_fs>
   11e4e:	83 c4 10             	add    $0x10,%esp
			retval = -ENOENT;
   11e51:	c7 84 24 60 01 00 00 	movl   $0xfffffffe,0x160(%esp)
   11e58:	fe ff ff ff 
			goto exec_error1;
   11e5c:	90                   	nop
   11e5d:	e9 ea 04 00 00       	jmp    1234c <do_execve+0xaf6>
		}
		set_fs(old_fs);
   11e62:	83 ec 0c             	sub    $0xc,%esp
   11e65:	ff b4 24 48 01 00 00 	pushl  0x148(%esp)
   11e6c:	e8 e5 f3 ff ff       	call   11256 <set_fs>
   11e71:	83 c4 10             	add    $0x10,%esp
   11e74:	e9 b1 fa ff ff       	jmp    1192a <do_execve+0xd4>
	// 此时缓冲块中的执行文件头结构已经复制到了ex中.于是先释放该缓冲块,并开始对ex中的执行头信息进行判断处理.对于Linux0.12内核来说,
	// 它仅支持ZMAGIC执行格式,并且执行文件代码都从逻辑地址0开始执行,因此不支持含有代码或数据重定位信息的执行文件.当然,如果执行文件
	// 实在太大或者执行文件残缺不全,那么我们也不能运行它.因此对于下列情况将不执行程序:如果执行文件不是需求页可执行文件(ZMAGIC),或者
	// 代码和数据重定位部分长度不等于0,或者(代码段+数据段+堆)长度超过50MB,或者执行文件长度小于(代码段+数据段+符号表长度+执行头部分)
	// 长度的总和.
	brelse(bh);
   11e79:	83 ec 0c             	sub    $0xc,%esp
   11e7c:	ff b4 24 50 01 00 00 	pushl  0x150(%esp)
   11e83:	e8 b5 d7 ff ff       	call   f63d <brelse>
   11e88:	83 c4 10             	add    $0x10,%esp
	if (N_MAGIC(ex) != ZMAGIC || ex.a_trsize || ex.a_drsize ||
   11e8b:	8b 84 24 0c 01 00 00 	mov    0x10c(%esp),%eax
   11e92:	3d 0b 01 00 00       	cmp    $0x10b,%eax
   11e97:	75 7a                	jne    11f13 <do_execve+0x6bd>
   11e99:	8b 84 24 24 01 00 00 	mov    0x124(%esp),%eax
   11ea0:	85 c0                	test   %eax,%eax
   11ea2:	75 6f                	jne    11f13 <do_execve+0x6bd>
   11ea4:	8b 84 24 28 01 00 00 	mov    0x128(%esp),%eax
   11eab:	85 c0                	test   %eax,%eax
   11ead:	75 64                	jne    11f13 <do_execve+0x6bd>
		ex.a_text + ex.a_data + ex.a_bss > 0x3000000 ||
   11eaf:	8b 94 24 10 01 00 00 	mov    0x110(%esp),%edx
   11eb6:	8b 84 24 14 01 00 00 	mov    0x114(%esp),%eax
   11ebd:	01 c2                	add    %eax,%edx
   11ebf:	8b 84 24 18 01 00 00 	mov    0x118(%esp),%eax
   11ec6:	01 d0                	add    %edx,%eax
	// 它仅支持ZMAGIC执行格式,并且执行文件代码都从逻辑地址0开始执行,因此不支持含有代码或数据重定位信息的执行文件.当然,如果执行文件
	// 实在太大或者执行文件残缺不全,那么我们也不能运行它.因此对于下列情况将不执行程序:如果执行文件不是需求页可执行文件(ZMAGIC),或者
	// 代码和数据重定位部分长度不等于0,或者(代码段+数据段+堆)长度超过50MB,或者执行文件长度小于(代码段+数据段+符号表长度+执行头部分)
	// 长度的总和.
	brelse(bh);
	if (N_MAGIC(ex) != ZMAGIC || ex.a_trsize || ex.a_drsize ||
   11ec8:	3d 00 00 00 03       	cmp    $0x3000000,%eax
   11ecd:	77 44                	ja     11f13 <do_execve+0x6bd>
		ex.a_text + ex.a_data + ex.a_bss > 0x3000000 ||
		inode->i_size < ex.a_text + ex.a_data + ex.a_syms + N_TXTOFF(ex)) {
   11ecf:	8b 84 24 6c 01 00 00 	mov    0x16c(%esp),%eax
   11ed6:	8b 40 04             	mov    0x4(%eax),%eax
   11ed9:	8b 8c 24 10 01 00 00 	mov    0x110(%esp),%ecx
   11ee0:	8b 94 24 14 01 00 00 	mov    0x114(%esp),%edx
   11ee7:	01 d1                	add    %edx,%ecx
   11ee9:	8b 94 24 1c 01 00 00 	mov    0x11c(%esp),%edx
   11ef0:	01 d1                	add    %edx,%ecx
   11ef2:	8b 94 24 0c 01 00 00 	mov    0x10c(%esp),%edx
   11ef9:	81 fa 0b 01 00 00    	cmp    $0x10b,%edx
   11eff:	75 07                	jne    11f08 <do_execve+0x6b2>
   11f01:	ba 00 04 00 00       	mov    $0x400,%edx
   11f06:	eb 05                	jmp    11f0d <do_execve+0x6b7>
   11f08:	ba 20 00 00 00       	mov    $0x20,%edx
   11f0d:	01 ca                	add    %ecx,%edx
	// 实在太大或者执行文件残缺不全,那么我们也不能运行它.因此对于下列情况将不执行程序:如果执行文件不是需求页可执行文件(ZMAGIC),或者
	// 代码和数据重定位部分长度不等于0,或者(代码段+数据段+堆)长度超过50MB,或者执行文件长度小于(代码段+数据段+符号表长度+执行头部分)
	// 长度的总和.
	brelse(bh);
	if (N_MAGIC(ex) != ZMAGIC || ex.a_trsize || ex.a_drsize ||
		ex.a_text + ex.a_data + ex.a_bss > 0x3000000 ||
   11f0f:	39 d0                	cmp    %edx,%eax
   11f11:	73 10                	jae    11f23 <do_execve+0x6cd>
		inode->i_size < ex.a_text + ex.a_data + ex.a_syms + N_TXTOFF(ex)) {
		retval = -ENOEXEC;
   11f13:	c7 84 24 60 01 00 00 	movl   $0xfffffff8,0x160(%esp)
   11f1a:	f8 ff ff ff 
		goto exec_error2;
   11f1e:	e9 17 04 00 00       	jmp    1233a <do_execve+0xae4>
	}
	// 另外,如果执行文件中代码开始处没有位于1个页面(1024字节)边界处,则也不能执行.因为需求页(Demand paging)技术要求加载执行文件内容
	// 时以页面为单位,因此要求执行文件映像中代码和数据都从页面边界处开始.
	if (N_TXTOFF(ex) != BLOCK_SIZE) {
   11f23:	8b 84 24 0c 01 00 00 	mov    0x10c(%esp),%eax
   11f2a:	3d 0b 01 00 00       	cmp    $0x10b,%eax
   11f2f:	74 28                	je     11f59 <do_execve+0x703>
		printk("%s: N_TXTOFF != BLOCK_SIZE. See a.out.h.", filename);
   11f31:	8b 84 24 88 01 00 00 	mov    0x188(%esp),%eax
   11f38:	83 ec 08             	sub    $0x8,%esp
   11f3b:	50                   	push   %eax
   11f3c:	68 60 3a 02 00       	push   $0x23a60
   11f41:	e8 01 6d ff ff       	call   8c47 <printk>
   11f46:	83 c4 10             	add    $0x10,%esp
		retval = -ENOEXEC;
   11f49:	c7 84 24 60 01 00 00 	movl   $0xfffffff8,0x160(%esp)
   11f50:	f8 ff ff ff 
		goto exec_error2;
   11f54:	e9 e1 03 00 00       	jmp    1233a <do_execve+0xae4>
	}
	// 如果sh_bang标志没有设置,则复制指定个数的命令行参数和环境字符串到参数和环境空间中.若sh_bang标志已经设置,则表明将运行脚本解释程序,
	// 此时一环境变量页面已经复制,无须再复制.同样,若sh_bang没有置位而需要复制的话,那么此时指针p随着复制信息增加而逐渐向小地址方向移动,
	// 因此这两个复制串函数执行完后,环境参数串信息块位于程序参数串信息块的上方,并且p指向程序的第1个参数串.事实上,p是128KB参数和环境空间
	// 中的偏移值.因此如果p=0,则表示环境变量与参数空间页面已经被占满,容纳不下了.
	if (!sh_bang) {
   11f59:	83 bc 24 5c 01 00 00 	cmpl   $0x0,0x15c(%esp)
   11f60:	00 
   11f61:	75 7c                	jne    11fdf <do_execve+0x789>
		p = copy_strings(envc, envp, page, p, 0);
   11f63:	83 ec 0c             	sub    $0xc,%esp
   11f66:	6a 00                	push   $0x0
   11f68:	ff b4 24 68 01 00 00 	pushl  0x168(%esp)
   11f6f:	8d 84 24 a0 00 00 00 	lea    0xa0(%esp),%eax
   11f76:	50                   	push   %eax
   11f77:	ff b4 24 a8 01 00 00 	pushl  0x1a8(%esp)
   11f7e:	ff b4 24 6c 01 00 00 	pushl  0x16c(%esp)
   11f85:	e8 3e f5 ff ff       	call   114c8 <copy_strings>
   11f8a:	83 c4 20             	add    $0x20,%esp
   11f8d:	89 84 24 58 01 00 00 	mov    %eax,0x158(%esp)
		p = copy_strings(argc, argv, page, p, 0);
   11f94:	83 ec 0c             	sub    $0xc,%esp
   11f97:	6a 00                	push   $0x0
   11f99:	ff b4 24 68 01 00 00 	pushl  0x168(%esp)
   11fa0:	8d 84 24 a0 00 00 00 	lea    0xa0(%esp),%eax
   11fa7:	50                   	push   %eax
   11fa8:	ff b4 24 a4 01 00 00 	pushl  0x1a4(%esp)
   11faf:	ff b4 24 80 01 00 00 	pushl  0x180(%esp)
   11fb6:	e8 0d f5 ff ff       	call   114c8 <copy_strings>
   11fbb:	83 c4 20             	add    $0x20,%esp
   11fbe:	89 84 24 58 01 00 00 	mov    %eax,0x158(%esp)
		if (!p) {
   11fc5:	83 bc 24 58 01 00 00 	cmpl   $0x0,0x158(%esp)
   11fcc:	00 
   11fcd:	75 10                	jne    11fdf <do_execve+0x789>
			retval = -ENOMEM;
   11fcf:	c7 84 24 60 01 00 00 	movl   $0xfffffff4,0x160(%esp)
   11fd6:	f4 ff ff ff 
			goto exec_error2;
   11fda:	e9 5b 03 00 00       	jmp    1233a <do_execve+0xae4>
	// get_free_page()分配了物理内存页来保存数据,并在chang_ldt()函数中使用put_page()到了进程逻辑空间的末端处.另外,在create_tables()
	// 中也会由于在用户栈上存放参数和环境指针表而引起缺页异常,从而内存管理程序也会就此为用户栈空间映射物理内存页.
	//
	// 这里我们首先放回进程原执行程序的i节点,并且让进程executable字段指向新执行文件的i节点.然后复位原进程的所有信号处理句柄,但对于SIG_IGN
	// 句柄无须复位.
	if (current->executable)
   11fdf:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   11fe4:	8b 80 3c 03 00 00    	mov    0x33c(%eax),%eax
   11fea:	85 c0                	test   %eax,%eax
   11fec:	74 17                	je     12005 <do_execve+0x7af>
		iput(current->executable);
   11fee:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   11ff3:	8b 80 3c 03 00 00    	mov    0x33c(%eax),%eax
   11ff9:	83 ec 0c             	sub    $0xc,%esp
   11ffc:	50                   	push   %eax
   11ffd:	e8 9a c6 ff ff       	call   e69c <iput>
   12002:	83 c4 10             	add    $0x10,%esp
	current->executable = inode;
   12005:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1200a:	8b 94 24 6c 01 00 00 	mov    0x16c(%esp),%edx
   12011:	89 90 3c 03 00 00    	mov    %edx,0x33c(%eax)
	current->signal = 0;
   12017:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1201c:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	for (i = 0 ; i < 32 ; i++) {
   12023:	c7 84 24 68 01 00 00 	movl   $0x0,0x168(%esp)
   1202a:	00 00 00 00 
   1202e:	eb 77                	jmp    120a7 <do_execve+0x851>
		current->sigaction[i].sa_mask = 0;
   12030:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   12035:	8b 94 24 68 01 00 00 	mov    0x168(%esp),%edx
   1203c:	83 c2 01             	add    $0x1,%edx
   1203f:	c1 e2 04             	shl    $0x4,%edx
   12042:	01 d0                	add    %edx,%eax
   12044:	83 c0 04             	add    $0x4,%eax
   12047:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		current->sigaction[i].sa_flags = 0;
   1204d:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   12052:	8b 94 24 68 01 00 00 	mov    0x168(%esp),%edx
   12059:	83 c2 01             	add    $0x1,%edx
   1205c:	c1 e2 04             	shl    $0x4,%edx
   1205f:	01 d0                	add    %edx,%eax
   12061:	83 c0 08             	add    $0x8,%eax
   12064:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		if (current->sigaction[i].sa_handler != SIG_IGN)
   1206a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1206f:	8b 94 24 68 01 00 00 	mov    0x168(%esp),%edx
   12076:	83 c2 01             	add    $0x1,%edx
   12079:	c1 e2 04             	shl    $0x4,%edx
   1207c:	01 d0                	add    %edx,%eax
   1207e:	8b 00                	mov    (%eax),%eax
   12080:	83 f8 01             	cmp    $0x1,%eax
   12083:	74 1a                	je     1209f <do_execve+0x849>
			current->sigaction[i].sa_handler = NULL;
   12085:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1208a:	8b 94 24 68 01 00 00 	mov    0x168(%esp),%edx
   12091:	83 c2 01             	add    $0x1,%edx
   12094:	c1 e2 04             	shl    $0x4,%edx
   12097:	01 d0                	add    %edx,%eax
   12099:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	// 句柄无须复位.
	if (current->executable)
		iput(current->executable);
	current->executable = inode;
	current->signal = 0;
	for (i = 0 ; i < 32 ; i++) {
   1209f:	83 84 24 68 01 00 00 	addl   $0x1,0x168(%esp)
   120a6:	01 
   120a7:	83 bc 24 68 01 00 00 	cmpl   $0x1f,0x168(%esp)
   120ae:	1f 
   120af:	0f 8e 7b ff ff ff    	jle    12030 <do_execve+0x7da>
		current->sigaction[i].sa_flags = 0;
		if (current->sigaction[i].sa_handler != SIG_IGN)
			current->sigaction[i].sa_handler = NULL;
	}
	// 再根据设定的执行时关闭文件句柄(close_on_exec)位图标志,关闭指定的打开文件并复位该标志
	for (i = 0 ; i < NR_OPEN ; i++)
   120b5:	c7 84 24 68 01 00 00 	movl   $0x0,0x168(%esp)
   120bc:	00 00 00 00 
   120c0:	eb 39                	jmp    120fb <do_execve+0x8a5>
		if ((current->close_on_exec >> i) & 1)
   120c2:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   120c7:	8b 90 44 03 00 00    	mov    0x344(%eax),%edx
   120cd:	8b 84 24 68 01 00 00 	mov    0x168(%esp),%eax
   120d4:	89 c1                	mov    %eax,%ecx
   120d6:	d3 ea                	shr    %cl,%edx
   120d8:	89 d0                	mov    %edx,%eax
   120da:	83 e0 01             	and    $0x1,%eax
   120dd:	85 c0                	test   %eax,%eax
   120df:	74 12                	je     120f3 <do_execve+0x89d>
			sys_close(i);
   120e1:	83 ec 0c             	sub    $0xc,%esp
   120e4:	ff b4 24 74 01 00 00 	pushl  0x174(%esp)
   120eb:	e8 8d ba ff ff       	call   db7d <sys_close>
   120f0:	83 c4 10             	add    $0x10,%esp
		current->sigaction[i].sa_flags = 0;
		if (current->sigaction[i].sa_handler != SIG_IGN)
			current->sigaction[i].sa_handler = NULL;
	}
	// 再根据设定的执行时关闭文件句柄(close_on_exec)位图标志,关闭指定的打开文件并复位该标志
	for (i = 0 ; i < NR_OPEN ; i++)
   120f3:	83 84 24 68 01 00 00 	addl   $0x1,0x168(%esp)
   120fa:	01 
   120fb:	83 bc 24 68 01 00 00 	cmpl   $0x13,0x168(%esp)
   12102:	13 
   12103:	7e bd                	jle    120c2 <do_execve+0x86c>
		if ((current->close_on_exec >> i) & 1)
			sys_close(i);
	current->close_on_exec = 0;
   12105:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1210a:	c7 80 44 03 00 00 00 	movl   $0x0,0x344(%eax)
   12111:	00 00 00 
	// 然后根据当前进程指定的基地址和限长,释放原来程序的代码段和数据段所对应的内存页表指定的物理内存页面及页表本身.此时新执行文件并没有占用主
	// 内存区任何页面,因此在处理器真正运行新执行文件代码时就会引起缺页异常中断,此时内存管理程序即会执行缺页处理页为新执行文件申请内存页面和
	// 设置相关页表项,并且把相关执行文件页面读入内存中.如果"上次任务使用了协处理器"指向的是当前进程,则将其置空,并复位使用了协处理器的标志.
	free_page_tables(get_base(current->ldt[1]), get_limit(0x0f));
   12114:	b8 0f 00 00 00       	mov    $0xf,%eax
   12119:	0f 03 c0             	lsl    %ax,%eax
   1211c:	40                   	inc    %eax
   1211d:	89 84 24 38 01 00 00 	mov    %eax,0x138(%esp)
   12124:	8b 8c 24 38 01 00 00 	mov    0x138(%esp),%ecx
   1212b:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   12130:	05 a0 03 00 00       	add    $0x3a0,%eax
   12135:	83 c0 02             	add    $0x2,%eax
   12138:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   1213e:	81 c2 a0 03 00 00    	add    $0x3a0,%edx
   12144:	8d 72 04             	lea    0x4(%edx),%esi
   12147:	8b 1d a0 e1 02 00    	mov    0x2e1a0,%ebx
   1214d:	81 c3 a0 03 00 00    	add    $0x3a0,%ebx
   12153:	83 c3 07             	add    $0x7,%ebx
   12156:	8a 33                	mov    (%ebx),%dh
   12158:	8a 16                	mov    (%esi),%dl
   1215a:	c1 e2 10             	shl    $0x10,%edx
   1215d:	66 8b 10             	mov    (%eax),%dx
   12160:	89 d0                	mov    %edx,%eax
   12162:	89 84 24 34 01 00 00 	mov    %eax,0x134(%esp)
   12169:	8b 84 24 34 01 00 00 	mov    0x134(%esp),%eax
   12170:	83 ec 08             	sub    $0x8,%esp
   12173:	51                   	push   %ecx
   12174:	50                   	push   %eax
   12175:	e8 ac 9b ff ff       	call   bd26 <free_page_tables>
   1217a:	83 c4 10             	add    $0x10,%esp
	free_page_tables(get_base(current->ldt[2]), get_limit(0x17));
   1217d:	b8 17 00 00 00       	mov    $0x17,%eax
   12182:	0f 03 c0             	lsl    %ax,%eax
   12185:	40                   	inc    %eax
   12186:	89 84 24 30 01 00 00 	mov    %eax,0x130(%esp)
   1218d:	8b 8c 24 30 01 00 00 	mov    0x130(%esp),%ecx
   12194:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   12199:	05 a8 03 00 00       	add    $0x3a8,%eax
   1219e:	83 c0 02             	add    $0x2,%eax
   121a1:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   121a7:	81 c2 a8 03 00 00    	add    $0x3a8,%edx
   121ad:	8d 7a 04             	lea    0x4(%edx),%edi
   121b0:	8b 1d a0 e1 02 00    	mov    0x2e1a0,%ebx
   121b6:	81 c3 a8 03 00 00    	add    $0x3a8,%ebx
   121bc:	83 c3 07             	add    $0x7,%ebx
   121bf:	8a 33                	mov    (%ebx),%dh
   121c1:	8a 17                	mov    (%edi),%dl
   121c3:	c1 e2 10             	shl    $0x10,%edx
   121c6:	66 8b 10             	mov    (%eax),%dx
   121c9:	89 d0                	mov    %edx,%eax
   121cb:	89 84 24 2c 01 00 00 	mov    %eax,0x12c(%esp)
   121d2:	8b 84 24 2c 01 00 00 	mov    0x12c(%esp),%eax
   121d9:	83 ec 08             	sub    $0x8,%esp
   121dc:	51                   	push   %ecx
   121dd:	50                   	push   %eax
   121de:	e8 43 9b ff ff       	call   bd26 <free_page_tables>
   121e3:	83 c4 10             	add    $0x10,%esp
	if (last_task_used_math == current)
   121e6:	8b 15 0c eb 02 00    	mov    0x2eb0c,%edx
   121ec:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   121f1:	39 c2                	cmp    %eax,%edx
   121f3:	75 0a                	jne    121ff <do_execve+0x9a9>
		last_task_used_math = NULL;
   121f5:	c7 05 0c eb 02 00 00 	movl   $0x0,0x2eb0c
   121fc:	00 00 00 
	current->used_math = 0;
   121ff:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   12204:	66 c7 80 28 03 00 00 	movw   $0x0,0x328(%eax)
   1220b:	00 00 
	// 然后我们根据新执行文件头结构中的代码长度字段a_text的值修改局部表中描述符基址和段限长,并将128KB的参数和环境空间页面放置在数据段末端.
	// 执行下面语句之后,p此时更改成以数据段起始处为原点的偏移值,但仍指向参数和环境空间数据开始处,即已转换成栈指针值.然后调用内部函数create_tables()
	// 在栈空间中创建环境和参数变量指针表,供程序的main()作为参数使用,并返回该栈指针.
	p += change_ldt(ex.a_text, page);
   1220d:	8b 84 24 10 01 00 00 	mov    0x110(%esp),%eax
   12214:	83 ec 08             	sub    $0x8,%esp
   12217:	8d 94 24 94 00 00 00 	lea    0x94(%esp),%edx
   1221e:	52                   	push   %edx
   1221f:	50                   	push   %eax
   12220:	e8 7b f4 ff ff       	call   116a0 <change_ldt>
   12225:	83 c4 10             	add    $0x10,%esp
   12228:	01 84 24 58 01 00 00 	add    %eax,0x158(%esp)
	p -= LIBRARY_SIZE + MAX_ARG_PAGES * PAGE_SIZE;
   1222f:	81 ac 24 58 01 00 00 	subl   $0x420000,0x158(%esp)
   12236:	00 00 42 00 
	p = (unsigned long) create_tables((char *)p, argc, envc);
   1223a:	8b 84 24 58 01 00 00 	mov    0x158(%esp),%eax
   12241:	83 ec 04             	sub    $0x4,%esp
   12244:	ff b4 24 54 01 00 00 	pushl  0x154(%esp)
   1224b:	ff b4 24 6c 01 00 00 	pushl  0x16c(%esp)
   12252:	50                   	push   %eax
   12253:	e8 fb f0 ff ff       	call   11353 <create_tables>
   12258:	83 c4 10             	add    $0x10,%esp
   1225b:	89 84 24 58 01 00 00 	mov    %eax,0x158(%esp)
	// 接着再修改进程各字段值为新执行文件的信息.即令进程任务结构代码尾字段end_code等于执行文件的代码段长度a_text;数据尾字段end_data等于
	// 执行文件的代码段长度加数据段长度(a_data + a_text);并令进程堆结尾字段brk = a_text + a_data + a_bss.brk用于指明进程当前数据段
	// (包括未初始化数据部分)末端位置,供内核为进程分配内存时指定分配开始位置.然后设置进程栈开始字段为栈指针所在页面,并重新设置进程的有效用户
	// id和有效组id.
	current->brk = ex.a_bss +
   12262:	8b 0d a0 e1 02 00    	mov    0x2e1a0,%ecx
   12268:	8b b4 24 18 01 00 00 	mov    0x118(%esp),%esi
		(current->end_data = ex.a_data +
   1226f:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   12274:	8b bc 24 14 01 00 00 	mov    0x114(%esp),%edi
		(current->end_code = ex.a_text));
   1227b:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   12281:	8b 9c 24 10 01 00 00 	mov    0x110(%esp),%ebx
   12288:	89 9a 1c 02 00 00    	mov    %ebx,0x21c(%edx)
   1228e:	8b 92 1c 02 00 00    	mov    0x21c(%edx),%edx
	// 接着再修改进程各字段值为新执行文件的信息.即令进程任务结构代码尾字段end_code等于执行文件的代码段长度a_text;数据尾字段end_data等于
	// 执行文件的代码段长度加数据段长度(a_data + a_text);并令进程堆结尾字段brk = a_text + a_data + a_bss.brk用于指明进程当前数据段
	// (包括未初始化数据部分)末端位置,供内核为进程分配内存时指定分配开始位置.然后设置进程栈开始字段为栈指针所在页面,并重新设置进程的有效用户
	// id和有效组id.
	current->brk = ex.a_bss +
		(current->end_data = ex.a_data +
   12294:	01 fa                	add    %edi,%edx
   12296:	89 90 20 02 00 00    	mov    %edx,0x220(%eax)
   1229c:	8b 80 20 02 00 00    	mov    0x220(%eax),%eax
	p = (unsigned long) create_tables((char *)p, argc, envc);
	// 接着再修改进程各字段值为新执行文件的信息.即令进程任务结构代码尾字段end_code等于执行文件的代码段长度a_text;数据尾字段end_data等于
	// 执行文件的代码段长度加数据段长度(a_data + a_text);并令进程堆结尾字段brk = a_text + a_data + a_bss.brk用于指明进程当前数据段
	// (包括未初始化数据部分)末端位置,供内核为进程分配内存时指定分配开始位置.然后设置进程栈开始字段为栈指针所在页面,并重新设置进程的有效用户
	// id和有效组id.
	current->brk = ex.a_bss +
   122a2:	01 f0                	add    %esi,%eax
   122a4:	89 81 24 02 00 00    	mov    %eax,0x224(%ecx)
		(current->end_data = ex.a_data +
		(current->end_code = ex.a_text));
	current->start_stack = p & 0xfffff000;
   122aa:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   122af:	8b 94 24 58 01 00 00 	mov    0x158(%esp),%edx
   122b6:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
   122bc:	89 90 28 02 00 00    	mov    %edx,0x228(%eax)
	current->suid = current->euid = e_uid;
   122c2:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   122c8:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   122cd:	8b 8c 24 4c 01 00 00 	mov    0x14c(%esp),%ecx
   122d4:	66 89 88 ce 02 00 00 	mov    %cx,0x2ce(%eax)
   122db:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
   122e2:	66 89 82 d0 02 00 00 	mov    %ax,0x2d0(%edx)
	current->sgid = current->egid = e_gid;
   122e9:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   122ef:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   122f4:	8b 8c 24 48 01 00 00 	mov    0x148(%esp),%ecx
   122fb:	66 89 88 d4 02 00 00 	mov    %cx,0x2d4(%eax)
   12302:	0f b7 80 d4 02 00 00 	movzwl 0x2d4(%eax),%eax
   12309:	66 89 82 d6 02 00 00 	mov    %ax,0x2d6(%edx)
	// 最后将原调用系统中断的程序在堆栈上的代码指针替换为指向新执行程序的入口点,并将栈指针替换为新执行文件的栈指针.此后返回指令将弹出这些栈数
	// 据并使得CPU去执行新执行文件,因此不会返回到原调用系统中断的程序中去了.
	eip[0] = ex.a_entry;												/* eip, magic happens :-) */	/* eip,魔法起作用了 */
   12310:	8b 94 24 20 01 00 00 	mov    0x120(%esp),%edx
   12317:	8b 84 24 80 01 00 00 	mov    0x180(%esp),%eax
   1231e:	89 10                	mov    %edx,(%eax)
	eip[3] = p;															/* stack pointer */		/* esp,堆栈指针 */
   12320:	8b 84 24 80 01 00 00 	mov    0x180(%esp),%eax
   12327:	8d 50 0c             	lea    0xc(%eax),%edx
   1232a:	8b 84 24 58 01 00 00 	mov    0x158(%esp),%eax
   12331:	89 02                	mov    %eax,(%edx)
	return 0;
   12333:	b8 00 00 00 00       	mov    $0x0,%eax
   12338:	eb 52                	jmp    1238c <do_execve+0xb36>
exec_error2:
	iput(inode);														// 放回i节点.
   1233a:	83 ec 0c             	sub    $0xc,%esp
   1233d:	ff b4 24 78 01 00 00 	pushl  0x178(%esp)
   12344:	e8 53 c3 ff ff       	call   e69c <iput>
   12349:	83 c4 10             	add    $0x10,%esp
exec_error1:
	for (i = 0 ; i < MAX_ARG_PAGES ; i++)
   1234c:	c7 84 24 68 01 00 00 	movl   $0x0,0x168(%esp)
   12353:	00 00 00 00 
   12357:	eb 22                	jmp    1237b <do_execve+0xb25>
		free_page(page[i]);												// 释放存放参数和环境串的内存页面.
   12359:	8b 84 24 68 01 00 00 	mov    0x168(%esp),%eax
   12360:	8b 84 84 8c 00 00 00 	mov    0x8c(%esp,%eax,4),%eax
   12367:	83 ec 0c             	sub    $0xc,%esp
   1236a:	50                   	push   %eax
   1236b:	e8 3c 99 ff ff       	call   bcac <free_page>
   12370:	83 c4 10             	add    $0x10,%esp
	eip[3] = p;															/* stack pointer */		/* esp,堆栈指针 */
	return 0;
exec_error2:
	iput(inode);														// 放回i节点.
exec_error1:
	for (i = 0 ; i < MAX_ARG_PAGES ; i++)
   12373:	83 84 24 68 01 00 00 	addl   $0x1,0x168(%esp)
   1237a:	01 
   1237b:	83 bc 24 68 01 00 00 	cmpl   $0x1f,0x168(%esp)
   12382:	1f 
   12383:	7e d4                	jle    12359 <do_execve+0xb03>
		free_page(page[i]);												// 释放存放参数和环境串的内存页面.
	return(retval);														// 返回出错码.
   12385:	8b 84 24 60 01 00 00 	mov    0x160(%esp),%eax
}
   1238c:	81 c4 70 01 00 00    	add    $0x170,%esp
   12392:	5b                   	pop    %ebx
   12393:	5e                   	pop    %esi
   12394:	5f                   	pop    %edi
   12395:	c3                   	ret    

00012396 <get_fs_byte>:
//// 读取fs段中指定地址处的字节.
// 参数:addr - 指定的内存地址.
// %0 - (返回的字节_v);%1 - (内存地址addr)
// 返回:返回内存fs[addr]处的字节.
static inline unsigned char get_fs_byte(const char * addr)
{
   12396:	53                   	push   %ebx
	unsigned register char _v;

	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   12397:	8b 44 24 08          	mov    0x8(%esp),%eax
   1239b:	64 8a 00             	mov    %fs:(%eax),%al
   1239e:	89 c3                	mov    %eax,%ebx
	return _v;
   123a0:	89 d8                	mov    %ebx,%eax
}
   123a2:	5b                   	pop    %ebx
   123a3:	c3                   	ret    

000123a4 <put_fs_byte>:

//// 将一字节存放在fs段中指定内存地址处.
// 参数:val - 字节值;addr - 内存地址.
// %0 - 寄存器(字节值val);%1 - (内存地址addr).
static inline void put_fs_byte(char val,char *addr)
{
   123a4:	83 ec 04             	sub    $0x4,%esp
   123a7:	8b 44 24 08          	mov    0x8(%esp),%eax
   123ab:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
   123ae:	0f b6 04 24          	movzbl (%esp),%eax
   123b2:	8b 54 24 0c          	mov    0xc(%esp),%edx
   123b6:	64 88 02             	mov    %al,%fs:(%edx)
}
   123b9:	90                   	nop
   123ba:	83 c4 04             	add    $0x4,%esp
   123bd:	c3                   	ret    

000123be <put_fs_long>:
//// 将一长字存放在fs段中指定内存地址处.
// 参数:val - 长字值;addr - 内存地址.
// %0 - 寄存器(长字值val);%1 - (内存地址addr).
static inline void put_fs_long(unsigned long val,unsigned long * addr)
{
__asm__ ("movl %0,%%fs:%1"::"q" (val),"m" (*addr));
   123be:	8b 44 24 04          	mov    0x4(%esp),%eax
   123c2:	8b 54 24 08          	mov    0x8(%esp),%edx
   123c6:	64 89 02             	mov    %eax,%fs:(%edx)
}
   123c9:	90                   	nop
   123ca:	c3                   	ret    

000123cb <read_pipe>:
#include <linux/kernel.h>

// 读管道操作函数。
// 参数inode是管道对应的i节点，buf是用户数据缓冲区指针，count是读取的字节数。
int read_pipe(struct m_inode * inode, char * buf, int count)
{
   123cb:	83 ec 1c             	sub    $0x1c,%esp
	int chars, size, read = 0;
   123ce:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
   123d5:	00 
	// 如果需要读取的字节数count大于0,我们就循环执行以下操作。在循环读操作过程中，若当前管道中没有数据（size=0），
	// 则唤醒等待该节点的进程，这通常是写管道进程。如果已没有写管道者，即i节点引用计数小于2,则返回已读字节数退出。
	// 如果目前收到非阻塞信号，则立刻返回已读取字节数退出，若还没有收到任何数据，则返回重新启动系统调用号退出。
	// 否则就让进程在该管道上睡眠，用以等待信息的到来。宏PIPE_SIZE定义在include/linux/fs.h中。关于“重新启动
	// 系统调用号”，请参见kernel/signal.c程序。
	while (count > 0) {
   123d6:	e9 6c 01 00 00       	jmp    12547 <read_pipe+0x17c>
		while (!(size = PIPE_SIZE(*inode))) {     						// 取管道中数据长度值。
			// 唤醒等待向该管道写数据的进程
			wake_up(& PIPE_WRITE_WAIT(*inode));
   123db:	8b 44 24 20          	mov    0x20(%esp),%eax
   123df:	83 c0 24             	add    $0x24,%eax
   123e2:	83 ec 0c             	sub    $0xc,%esp
   123e5:	50                   	push   %eax
   123e6:	e8 64 4d ff ff       	call   714f <wake_up>
   123eb:	83 c4 10             	add    $0x10,%esp
			if (inode->i_count != 2) 									/* are there any writers? */
   123ee:	8b 44 24 20          	mov    0x20(%esp),%eax
   123f2:	0f b7 40 34          	movzwl 0x34(%eax),%eax
   123f6:	66 83 f8 02          	cmp    $0x2,%ax
   123fa:	74 09                	je     12405 <read_pipe+0x3a>
				return read;
   123fc:	8b 44 24 04          	mov    0x4(%esp),%eax
   12400:	e9 64 01 00 00       	jmp    12569 <read_pipe+0x19e>
			if (current->signal & ~current->blocked)
   12405:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1240a:	8b 50 0c             	mov    0xc(%eax),%edx
   1240d:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   12412:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
   12418:	f7 d0                	not    %eax
   1241a:	21 d0                	and    %edx,%eax
   1241c:	85 c0                	test   %eax,%eax
   1241e:	74 1a                	je     1243a <read_pipe+0x6f>
				return read ? read : -ERESTARTSYS;
   12420:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
   12425:	74 09                	je     12430 <read_pipe+0x65>
   12427:	8b 44 24 04          	mov    0x4(%esp),%eax
   1242b:	e9 39 01 00 00       	jmp    12569 <read_pipe+0x19e>
   12430:	b8 00 fe ff ff       	mov    $0xfffffe00,%eax
   12435:	e9 2f 01 00 00       	jmp    12569 <read_pipe+0x19e>
			// 当前进程没有数据可读则进入睡眠等待
			interruptible_sleep_on(& PIPE_READ_WAIT(*inode));
   1243a:	8b 44 24 20          	mov    0x20(%esp),%eax
   1243e:	83 c0 20             	add    $0x20,%eax
   12441:	83 ec 0c             	sub    $0xc,%esp
   12444:	50                   	push   %eax
   12445:	e8 d3 4c ff ff       	call   711d <interruptible_sleep_on>
   1244a:	83 c4 10             	add    $0x10,%esp
	// 则唤醒等待该节点的进程，这通常是写管道进程。如果已没有写管道者，即i节点引用计数小于2,则返回已读字节数退出。
	// 如果目前收到非阻塞信号，则立刻返回已读取字节数退出，若还没有收到任何数据，则返回重新启动系统调用号退出。
	// 否则就让进程在该管道上睡眠，用以等待信息的到来。宏PIPE_SIZE定义在include/linux/fs.h中。关于“重新启动
	// 系统调用号”，请参见kernel/signal.c程序。
	while (count > 0) {
		while (!(size = PIPE_SIZE(*inode))) {     						// 取管道中数据长度值。
   1244d:	8b 44 24 20          	mov    0x20(%esp),%eax
   12451:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   12455:	0f b7 d0             	movzwl %ax,%edx
   12458:	8b 44 24 20          	mov    0x20(%esp),%eax
   1245c:	0f b7 40 10          	movzwl 0x10(%eax),%eax
   12460:	0f b7 c0             	movzwl %ax,%eax
   12463:	29 c2                	sub    %eax,%edx
   12465:	89 d0                	mov    %edx,%eax
   12467:	25 ff 0f 00 00       	and    $0xfff,%eax
   1246c:	89 44 24 08          	mov    %eax,0x8(%esp)
   12470:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   12475:	0f 84 60 ff ff ff    	je     123db <read_pipe+0x10>
			interruptible_sleep_on(& PIPE_READ_WAIT(*inode));
		}
		// 此时说明管道（缓冲区）中有数据。于是我们取管道尾指针到缓冲区末端的字节数chars。如果其大于还需要读取的字节数
		// count，则令其等于count。如果chars大于当前管道中含有数据的长度size，则令其等于size。然后把需读字节数count
		// 减去可读的字节数chars，并累加已读字节数read。
		chars = PAGE_SIZE - PIPE_TAIL(*inode);
   1247b:	8b 44 24 20          	mov    0x20(%esp),%eax
   1247f:	0f b7 40 10          	movzwl 0x10(%eax),%eax
   12483:	0f b7 c0             	movzwl %ax,%eax
   12486:	ba 00 10 00 00       	mov    $0x1000,%edx
   1248b:	29 c2                	sub    %eax,%edx
   1248d:	89 d0                	mov    %edx,%eax
   1248f:	89 44 24 0c          	mov    %eax,0xc(%esp)
		if (chars > count)
   12493:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12497:	3b 44 24 28          	cmp    0x28(%esp),%eax
   1249b:	7e 08                	jle    124a5 <read_pipe+0xda>
			chars = count;
   1249d:	8b 44 24 28          	mov    0x28(%esp),%eax
   124a1:	89 44 24 0c          	mov    %eax,0xc(%esp)
		if (chars > size)
   124a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
   124a9:	3b 44 24 08          	cmp    0x8(%esp),%eax
   124ad:	7e 08                	jle    124b7 <read_pipe+0xec>
			chars = size;
   124af:	8b 44 24 08          	mov    0x8(%esp),%eax
   124b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
		count -= chars;
   124b7:	8b 44 24 0c          	mov    0xc(%esp),%eax
   124bb:	29 44 24 28          	sub    %eax,0x28(%esp)
		read += chars;
   124bf:	8b 44 24 0c          	mov    0xc(%esp),%eax
   124c3:	01 44 24 04          	add    %eax,0x4(%esp)
		// 再令size指向管道尾指针处，并调整当前管道尾指针（前移chars字节）。若尾指针超过管道末端则绕回。然后将管道中的
		// 数据复制到用户缓冲区中。对于管道i节点，其i_size字段中是管道缓冲块指针。
		size = PIPE_TAIL(*inode);
   124c7:	8b 44 24 20          	mov    0x20(%esp),%eax
   124cb:	0f b7 40 10          	movzwl 0x10(%eax),%eax
   124cf:	0f b7 c0             	movzwl %ax,%eax
   124d2:	89 44 24 08          	mov    %eax,0x8(%esp)
		PIPE_TAIL(*inode) += chars;
   124d6:	8b 44 24 20          	mov    0x20(%esp),%eax
   124da:	0f b7 40 10          	movzwl 0x10(%eax),%eax
   124de:	8b 54 24 0c          	mov    0xc(%esp),%edx
   124e2:	01 c2                	add    %eax,%edx
   124e4:	8b 44 24 20          	mov    0x20(%esp),%eax
   124e8:	66 89 50 10          	mov    %dx,0x10(%eax)
		PIPE_TAIL(*inode) &= (PAGE_SIZE - 1);
   124ec:	8b 44 24 20          	mov    0x20(%esp),%eax
   124f0:	0f b7 40 10          	movzwl 0x10(%eax),%eax
   124f4:	66 25 ff 0f          	and    $0xfff,%ax
   124f8:	89 c2                	mov    %eax,%edx
   124fa:	8b 44 24 20          	mov    0x20(%esp),%eax
   124fe:	66 89 50 10          	mov    %dx,0x10(%eax)
		while (chars-- > 0)
   12502:	eb 34                	jmp    12538 <read_pipe+0x16d>
			put_fs_byte(((char *)inode->i_size)[size++], buf++);
   12504:	8b 44 24 24          	mov    0x24(%esp),%eax
   12508:	8d 50 01             	lea    0x1(%eax),%edx
   1250b:	89 54 24 24          	mov    %edx,0x24(%esp)
   1250f:	8b 54 24 08          	mov    0x8(%esp),%edx
   12513:	8d 4a 01             	lea    0x1(%edx),%ecx
   12516:	89 4c 24 08          	mov    %ecx,0x8(%esp)
   1251a:	89 d1                	mov    %edx,%ecx
   1251c:	8b 54 24 20          	mov    0x20(%esp),%edx
   12520:	8b 52 04             	mov    0x4(%edx),%edx
   12523:	01 ca                	add    %ecx,%edx
   12525:	0f b6 12             	movzbl (%edx),%edx
   12528:	0f be d2             	movsbl %dl,%edx
   1252b:	83 ec 08             	sub    $0x8,%esp
   1252e:	50                   	push   %eax
   1252f:	52                   	push   %edx
   12530:	e8 6f fe ff ff       	call   123a4 <put_fs_byte>
   12535:	83 c4 10             	add    $0x10,%esp
		// 再令size指向管道尾指针处，并调整当前管道尾指针（前移chars字节）。若尾指针超过管道末端则绕回。然后将管道中的
		// 数据复制到用户缓冲区中。对于管道i节点，其i_size字段中是管道缓冲块指针。
		size = PIPE_TAIL(*inode);
		PIPE_TAIL(*inode) += chars;
		PIPE_TAIL(*inode) &= (PAGE_SIZE - 1);
		while (chars-- > 0)
   12538:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1253c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1253f:	89 54 24 0c          	mov    %edx,0xc(%esp)
   12543:	85 c0                	test   %eax,%eax
   12545:	7f bd                	jg     12504 <read_pipe+0x139>
	// 如果需要读取的字节数count大于0,我们就循环执行以下操作。在循环读操作过程中，若当前管道中没有数据（size=0），
	// 则唤醒等待该节点的进程，这通常是写管道进程。如果已没有写管道者，即i节点引用计数小于2,则返回已读字节数退出。
	// 如果目前收到非阻塞信号，则立刻返回已读取字节数退出，若还没有收到任何数据，则返回重新启动系统调用号退出。
	// 否则就让进程在该管道上睡眠，用以等待信息的到来。宏PIPE_SIZE定义在include/linux/fs.h中。关于“重新启动
	// 系统调用号”，请参见kernel/signal.c程序。
	while (count > 0) {
   12547:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   1254c:	0f 8f fb fe ff ff    	jg     1244d <read_pipe+0x82>
		PIPE_TAIL(*inode) &= (PAGE_SIZE - 1);
		while (chars-- > 0)
			put_fs_byte(((char *)inode->i_size)[size++], buf++);
	}
	// 当此次读管道操作结束，则唤醒等待该管道的进程，并返回读取的字节数。
	wake_up(& PIPE_WRITE_WAIT(*inode));
   12552:	8b 44 24 20          	mov    0x20(%esp),%eax
   12556:	83 c0 24             	add    $0x24,%eax
   12559:	83 ec 0c             	sub    $0xc,%esp
   1255c:	50                   	push   %eax
   1255d:	e8 ed 4b ff ff       	call   714f <wake_up>
   12562:	83 c4 10             	add    $0x10,%esp
	return read;
   12565:	8b 44 24 04          	mov    0x4(%esp),%eax
}
   12569:	83 c4 1c             	add    $0x1c,%esp
   1256c:	c3                   	ret    

0001256d <write_pipe>:

// 管道写操作函数。
// 参数inode是管道对应的i节点，buf是数据缓冲区指针，count是将写入管道的字节数。
int write_pipe(struct m_inode * inode, char * buf, int count)
{
   1256d:	53                   	push   %ebx
   1256e:	83 ec 18             	sub    $0x18,%esp
	int chars, size, written = 0;
   12571:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
   12578:	00 

	// 如果要写入的字节数count还大于0,那么我们就循环执行以下操作。在循环操作过程中，如果当前管道中已经满了（空闲空间
	// size = 0），则唤醒等待该管道的进程，通常唤醒的是读管道进程。如果已经没有读管道者，即i节点引用计数值小于2,则向
	// 当前进程发送SIGPIPE信号，并返回已写入的字节数退出；若写入0字节，则返回-1。否则让当前进程在该管道上睡眠，以等待
	// 读管道进程来读取数据，从而让管道腾出空间。宏PIPE_SIZE()、PIPE_HEAD()等定义在文件include/linux/fs.h中。
	while (count > 0) {
   12579:	e9 5b 01 00 00       	jmp    126d9 <write_pipe+0x16c>
		while (!(size = (PAGE_SIZE - 1) - PIPE_SIZE(*inode))) {
			wake_up(& PIPE_READ_WAIT(*inode));
   1257e:	8b 44 24 20          	mov    0x20(%esp),%eax
   12582:	83 c0 20             	add    $0x20,%eax
   12585:	83 ec 0c             	sub    $0xc,%esp
   12588:	50                   	push   %eax
   12589:	e8 c1 4b ff ff       	call   714f <wake_up>
   1258e:	83 c4 10             	add    $0x10,%esp
			if (inode->i_count != 2) { 								/* no readers */
   12591:	8b 44 24 20          	mov    0x20(%esp),%eax
   12595:	0f b7 40 34          	movzwl 0x34(%eax),%eax
   12599:	66 83 f8 02          	cmp    $0x2,%ax
   1259d:	74 2e                	je     125cd <write_pipe+0x60>
				current->signal |= (1 << (SIGPIPE - 1));
   1259f:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   125a4:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   125aa:	8b 52 0c             	mov    0xc(%edx),%edx
   125ad:	80 ce 10             	or     $0x10,%dh
   125b0:	89 50 0c             	mov    %edx,0xc(%eax)
				return written ? written : -1;
   125b3:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
   125b8:	74 09                	je     125c3 <write_pipe+0x56>
   125ba:	8b 44 24 04          	mov    0x4(%esp),%eax
   125be:	e9 38 01 00 00       	jmp    126fb <write_pipe+0x18e>
   125c3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   125c8:	e9 2e 01 00 00       	jmp    126fb <write_pipe+0x18e>
			}
			sleep_on(& PIPE_WRITE_WAIT(*inode));
   125cd:	8b 44 24 20          	mov    0x20(%esp),%eax
   125d1:	83 c0 24             	add    $0x24,%eax
   125d4:	83 ec 0c             	sub    $0xc,%esp
   125d7:	50                   	push   %eax
   125d8:	e8 59 4b ff ff       	call   7136 <sleep_on>
   125dd:	83 c4 10             	add    $0x10,%esp
	// 如果要写入的字节数count还大于0,那么我们就循环执行以下操作。在循环操作过程中，如果当前管道中已经满了（空闲空间
	// size = 0），则唤醒等待该管道的进程，通常唤醒的是读管道进程。如果已经没有读管道者，即i节点引用计数值小于2,则向
	// 当前进程发送SIGPIPE信号，并返回已写入的字节数退出；若写入0字节，则返回-1。否则让当前进程在该管道上睡眠，以等待
	// 读管道进程来读取数据，从而让管道腾出空间。宏PIPE_SIZE()、PIPE_HEAD()等定义在文件include/linux/fs.h中。
	while (count > 0) {
		while (!(size = (PAGE_SIZE - 1) - PIPE_SIZE(*inode))) {
   125e0:	8b 44 24 20          	mov    0x20(%esp),%eax
   125e4:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   125e8:	0f b7 d0             	movzwl %ax,%edx
   125eb:	8b 44 24 20          	mov    0x20(%esp),%eax
   125ef:	0f b7 40 10          	movzwl 0x10(%eax),%eax
   125f3:	0f b7 c0             	movzwl %ax,%eax
   125f6:	29 c2                	sub    %eax,%edx
   125f8:	89 d0                	mov    %edx,%eax
   125fa:	f7 d0                	not    %eax
   125fc:	25 ff 0f 00 00       	and    $0xfff,%eax
   12601:	89 44 24 08          	mov    %eax,0x8(%esp)
   12605:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   1260a:	0f 84 6e ff ff ff    	je     1257e <write_pipe+0x11>
			sleep_on(& PIPE_WRITE_WAIT(*inode));
		}
		// 程序执行到这里表示管道缓冲区中有可写空间size。于是我们取管道头指针到缓冲区末端空间字节数chars。写管道操作是从管道
		// 头指针处开始写的。如果chars大于还需要写入的字节数count，则令其等于count。如果chars大于当前管道中空闲空间长度size
		// 则令其等于size。然后把需要写入字节数count减去此次可写入的字节数chars，并把写入字节数累加到written中。
		chars = PAGE_SIZE - PIPE_HEAD(*inode);
   12610:	8b 44 24 20          	mov    0x20(%esp),%eax
   12614:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   12618:	0f b7 c0             	movzwl %ax,%eax
   1261b:	ba 00 10 00 00       	mov    $0x1000,%edx
   12620:	29 c2                	sub    %eax,%edx
   12622:	89 d0                	mov    %edx,%eax
   12624:	89 44 24 0c          	mov    %eax,0xc(%esp)
		if (chars > count)
   12628:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1262c:	3b 44 24 28          	cmp    0x28(%esp),%eax
   12630:	7e 08                	jle    1263a <write_pipe+0xcd>
			chars = count;
   12632:	8b 44 24 28          	mov    0x28(%esp),%eax
   12636:	89 44 24 0c          	mov    %eax,0xc(%esp)
		if (chars > size)
   1263a:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1263e:	3b 44 24 08          	cmp    0x8(%esp),%eax
   12642:	7e 08                	jle    1264c <write_pipe+0xdf>
			chars = size;
   12644:	8b 44 24 08          	mov    0x8(%esp),%eax
   12648:	89 44 24 0c          	mov    %eax,0xc(%esp)
		count -= chars;
   1264c:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12650:	29 44 24 28          	sub    %eax,0x28(%esp)
		written += chars;
   12654:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12658:	01 44 24 04          	add    %eax,0x4(%esp)
		// 再令size指向管道数据头指针处，并调整当前管道数据头部指针（前移chars字节）。若头指针超过管道末端则绕回。然后从用户缓冲
		// 区复制chars个字节到管道头指针开始处。对于管道i节点，其i_size字段中是管道缓冲块指针。
		size = PIPE_HEAD(*inode);
   1265c:	8b 44 24 20          	mov    0x20(%esp),%eax
   12660:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   12664:	0f b7 c0             	movzwl %ax,%eax
   12667:	89 44 24 08          	mov    %eax,0x8(%esp)
		PIPE_HEAD(*inode) += chars;
   1266b:	8b 44 24 20          	mov    0x20(%esp),%eax
   1266f:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   12673:	8b 54 24 0c          	mov    0xc(%esp),%edx
   12677:	01 c2                	add    %eax,%edx
   12679:	8b 44 24 20          	mov    0x20(%esp),%eax
   1267d:	66 89 50 0e          	mov    %dx,0xe(%eax)
		PIPE_HEAD(*inode) &= (PAGE_SIZE - 1);
   12681:	8b 44 24 20          	mov    0x20(%esp),%eax
   12685:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   12689:	66 25 ff 0f          	and    $0xfff,%ax
   1268d:	89 c2                	mov    %eax,%edx
   1268f:	8b 44 24 20          	mov    0x20(%esp),%eax
   12693:	66 89 50 0e          	mov    %dx,0xe(%eax)
		while (chars-- > 0)
   12697:	eb 31                	jmp    126ca <write_pipe+0x15d>
			((char *)inode->i_size)[size++] = get_fs_byte(buf++);
   12699:	8b 44 24 08          	mov    0x8(%esp),%eax
   1269d:	8d 50 01             	lea    0x1(%eax),%edx
   126a0:	89 54 24 08          	mov    %edx,0x8(%esp)
   126a4:	89 c2                	mov    %eax,%edx
   126a6:	8b 44 24 20          	mov    0x20(%esp),%eax
   126aa:	8b 40 04             	mov    0x4(%eax),%eax
   126ad:	01 d0                	add    %edx,%eax
   126af:	89 c3                	mov    %eax,%ebx
   126b1:	8b 44 24 24          	mov    0x24(%esp),%eax
   126b5:	8d 50 01             	lea    0x1(%eax),%edx
   126b8:	89 54 24 24          	mov    %edx,0x24(%esp)
   126bc:	83 ec 0c             	sub    $0xc,%esp
   126bf:	50                   	push   %eax
   126c0:	e8 d1 fc ff ff       	call   12396 <get_fs_byte>
   126c5:	83 c4 10             	add    $0x10,%esp
   126c8:	88 03                	mov    %al,(%ebx)
		// 再令size指向管道数据头指针处，并调整当前管道数据头部指针（前移chars字节）。若头指针超过管道末端则绕回。然后从用户缓冲
		// 区复制chars个字节到管道头指针开始处。对于管道i节点，其i_size字段中是管道缓冲块指针。
		size = PIPE_HEAD(*inode);
		PIPE_HEAD(*inode) += chars;
		PIPE_HEAD(*inode) &= (PAGE_SIZE - 1);
		while (chars-- > 0)
   126ca:	8b 44 24 0c          	mov    0xc(%esp),%eax
   126ce:	8d 50 ff             	lea    -0x1(%eax),%edx
   126d1:	89 54 24 0c          	mov    %edx,0xc(%esp)
   126d5:	85 c0                	test   %eax,%eax
   126d7:	7f c0                	jg     12699 <write_pipe+0x12c>

	// 如果要写入的字节数count还大于0,那么我们就循环执行以下操作。在循环操作过程中，如果当前管道中已经满了（空闲空间
	// size = 0），则唤醒等待该管道的进程，通常唤醒的是读管道进程。如果已经没有读管道者，即i节点引用计数值小于2,则向
	// 当前进程发送SIGPIPE信号，并返回已写入的字节数退出；若写入0字节，则返回-1。否则让当前进程在该管道上睡眠，以等待
	// 读管道进程来读取数据，从而让管道腾出空间。宏PIPE_SIZE()、PIPE_HEAD()等定义在文件include/linux/fs.h中。
	while (count > 0) {
   126d9:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   126de:	0f 8f fc fe ff ff    	jg     125e0 <write_pipe+0x73>
		PIPE_HEAD(*inode) &= (PAGE_SIZE - 1);
		while (chars-- > 0)
			((char *)inode->i_size)[size++] = get_fs_byte(buf++);
	}
	// 当此次写管道操作结束，则唤醒等待管道的进程，返回已写入的字节数，退出。
	wake_up(& PIPE_READ_WAIT(*inode));
   126e4:	8b 44 24 20          	mov    0x20(%esp),%eax
   126e8:	83 c0 20             	add    $0x20,%eax
   126eb:	83 ec 0c             	sub    $0xc,%esp
   126ee:	50                   	push   %eax
   126ef:	e8 5b 4a ff ff       	call   714f <wake_up>
   126f4:	83 c4 10             	add    $0x10,%esp
	return written;
   126f7:	8b 44 24 04          	mov    0x4(%esp),%eax
}
   126fb:	83 c4 18             	add    $0x18,%esp
   126fe:	5b                   	pop    %ebx
   126ff:	c3                   	ret    

00012700 <sys_pipe>:
// 创建管道系统调用。
// 在fildes所指的数组中创建一对句柄（描述符）。这对文件句柄指向一管道i节点。
// 参数：fildes - 文件句柄数组。fildes[0]用于读管道数据，fildes[1]向管道写入数据。
// 成功时返回0,出错时返回-1.
int sys_pipe(unsigned long * fildes)
{
   12700:	56                   	push   %esi
   12701:	53                   	push   %ebx
   12702:	83 ec 24             	sub    $0x24,%esp
	int fd[2];                      						// 文件句柄数组。
	int i, j;

	// 首先从系统文件表中取两个空闲项（引用计数字段为0的项），并分别设置引用计数为1.
	// 若只有1个空闲项，则释放该项（引用计数复位）。若没有找到两个空闲项，则返回-1。
	j = 0;
   12705:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   1270c:	00 
	for(i = 0; j < 2 && i < NR_FILE; i++)
   1270d:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   12714:	00 
   12715:	eb 44                	jmp    1275b <sys_pipe+0x5b>
		if (!file_table[i].f_count)
   12717:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1271b:	c1 e0 04             	shl    $0x4,%eax
   1271e:	05 84 0f 04 00       	add    $0x40f84,%eax
   12723:	0f b7 00             	movzwl (%eax),%eax
   12726:	66 85 c0             	test   %ax,%ax
   12729:	75 2b                	jne    12756 <sys_pipe+0x56>
			(f[j++] = i + file_table)->f_count++;
   1272b:	8b 44 24 18          	mov    0x18(%esp),%eax
   1272f:	8d 50 01             	lea    0x1(%eax),%edx
   12732:	89 54 24 18          	mov    %edx,0x18(%esp)
   12736:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1273a:	c1 e2 04             	shl    $0x4,%edx
   1273d:	81 c2 80 0f 04 00    	add    $0x40f80,%edx
   12743:	89 54 84 0c          	mov    %edx,0xc(%esp,%eax,4)
   12747:	8b 44 84 0c          	mov    0xc(%esp,%eax,4),%eax
   1274b:	0f b7 50 04          	movzwl 0x4(%eax),%edx
   1274f:	83 c2 01             	add    $0x1,%edx
   12752:	66 89 50 04          	mov    %dx,0x4(%eax)
	int i, j;

	// 首先从系统文件表中取两个空闲项（引用计数字段为0的项），并分别设置引用计数为1.
	// 若只有1个空闲项，则释放该项（引用计数复位）。若没有找到两个空闲项，则返回-1。
	j = 0;
	for(i = 0; j < 2 && i < NR_FILE; i++)
   12756:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   1275b:	83 7c 24 18 01       	cmpl   $0x1,0x18(%esp)
   12760:	7f 07                	jg     12769 <sys_pipe+0x69>
   12762:	83 7c 24 1c 3f       	cmpl   $0x3f,0x1c(%esp)
   12767:	7e ae                	jle    12717 <sys_pipe+0x17>
		if (!file_table[i].f_count)
			(f[j++] = i + file_table)->f_count++;
	if (j == 1)
   12769:	83 7c 24 18 01       	cmpl   $0x1,0x18(%esp)
   1276e:	75 0a                	jne    1277a <sys_pipe+0x7a>
		f[0]->f_count = 0;
   12770:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12774:	66 c7 40 04 00 00    	movw   $0x0,0x4(%eax)
	if (j < 2)
   1277a:	83 7c 24 18 01       	cmpl   $0x1,0x18(%esp)
   1277f:	7f 0a                	jg     1278b <sys_pipe+0x8b>
		return -1;
   12781:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12786:	e9 80 01 00 00       	jmp    1290b <sys_pipe+0x20b>
	// 针对上面取得的两个文件表结构项，分别分配一文件句柄号，并使进程文件结构指针数组的两项分别指向这两个文件
	// 结构。而文件句柄即是该数组的索引号。类似地，如果只有一个空闲文件句柄，则释放该句柄（置空相应数组项）。如
	// 果没有找到两个空闲句柄，则释放上面获取的两个文件结构项（复位引用计数值），并返回-1。
	j = 0;
   1278b:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   12792:	00 
	for(i = 0; j < 2 && i < NR_OPEN; i++)
   12793:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   1279a:	00 
   1279b:	eb 4c                	jmp    127e9 <sys_pipe+0xe9>
		if (!current->filp[i]) {
   1279d:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   127a2:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   127a6:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   127ac:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   127b0:	85 c0                	test   %eax,%eax
   127b2:	75 30                	jne    127e4 <sys_pipe+0xe4>
			current->filp[ fd[j] = i ] = f[j];
   127b4:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   127b9:	8b 54 24 18          	mov    0x18(%esp),%edx
   127bd:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
   127c1:	89 4c 94 04          	mov    %ecx,0x4(%esp,%edx,4)
   127c5:	8b 54 24 18          	mov    0x18(%esp),%edx
   127c9:	8b 4c 94 04          	mov    0x4(%esp,%edx,4),%ecx
   127cd:	8b 54 24 18          	mov    0x18(%esp),%edx
   127d1:	8b 54 94 0c          	mov    0xc(%esp,%edx,4),%edx
   127d5:	81 c1 d0 00 00 00    	add    $0xd0,%ecx
   127db:	89 54 88 08          	mov    %edx,0x8(%eax,%ecx,4)
			j++;
   127df:	83 44 24 18 01       	addl   $0x1,0x18(%esp)
		return -1;
	// 针对上面取得的两个文件表结构项，分别分配一文件句柄号，并使进程文件结构指针数组的两项分别指向这两个文件
	// 结构。而文件句柄即是该数组的索引号。类似地，如果只有一个空闲文件句柄，则释放该句柄（置空相应数组项）。如
	// 果没有找到两个空闲句柄，则释放上面获取的两个文件结构项（复位引用计数值），并返回-1。
	j = 0;
	for(i = 0; j < 2 && i < NR_OPEN; i++)
   127e4:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   127e9:	83 7c 24 18 01       	cmpl   $0x1,0x18(%esp)
   127ee:	7f 07                	jg     127f7 <sys_pipe+0xf7>
   127f0:	83 7c 24 1c 13       	cmpl   $0x13,0x1c(%esp)
   127f5:	7e a6                	jle    1279d <sys_pipe+0x9d>
		if (!current->filp[i]) {
			current->filp[ fd[j] = i ] = f[j];
			j++;
		}
	if (j == 1)
   127f7:	83 7c 24 18 01       	cmpl   $0x1,0x18(%esp)
   127fc:	75 17                	jne    12815 <sys_pipe+0x115>
		current->filp[fd[0]] = NULL;
   127fe:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   12803:	8b 54 24 04          	mov    0x4(%esp),%edx
   12807:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   1280d:	c7 44 90 08 00 00 00 	movl   $0x0,0x8(%eax,%edx,4)
   12814:	00 
	if (j < 2) {
   12815:	83 7c 24 18 01       	cmpl   $0x1,0x18(%esp)
   1281a:	7f 20                	jg     1283c <sys_pipe+0x13c>
		f[0]->f_count = f[1]->f_count = 0;
   1281c:	8b 54 24 0c          	mov    0xc(%esp),%edx
   12820:	8b 44 24 10          	mov    0x10(%esp),%eax
   12824:	66 c7 40 04 00 00    	movw   $0x0,0x4(%eax)
   1282a:	0f b7 40 04          	movzwl 0x4(%eax),%eax
   1282e:	66 89 42 04          	mov    %ax,0x4(%edx)
		return -1;
   12832:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12837:	e9 cf 00 00 00       	jmp    1290b <sys_pipe+0x20b>
	}
	// 然后利用函数get_pipe_inode()申请一个管道使用的i节点，并为管道分配一页内存作为缓冲区。如果不成功，则
	// 相应释放两个文件句柄和文件结构项，并返回-1.
	if (!(inode = get_pipe_inode())) {                		// fs/inode.c。
   1283c:	e8 75 c1 ff ff       	call   e9b6 <get_pipe_inode>
   12841:	89 44 24 14          	mov    %eax,0x14(%esp)
   12845:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
   1284a:	75 52                	jne    1289e <sys_pipe+0x19e>
		current->filp[fd[0]] =
   1284c:	8b 0d a0 e1 02 00    	mov    0x2e1a0,%ecx
   12852:	8b 74 24 04          	mov    0x4(%esp),%esi
			current->filp[fd[1]] = NULL;
   12856:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1285b:	8b 54 24 08          	mov    0x8(%esp),%edx
   1285f:	8d 9a d0 00 00 00    	lea    0xd0(%edx),%ebx
   12865:	c7 44 98 08 00 00 00 	movl   $0x0,0x8(%eax,%ebx,4)
   1286c:	00 
   1286d:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   12873:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
		return -1;
	}
	// 然后利用函数get_pipe_inode()申请一个管道使用的i节点，并为管道分配一页内存作为缓冲区。如果不成功，则
	// 相应释放两个文件句柄和文件结构项，并返回-1.
	if (!(inode = get_pipe_inode())) {                		// fs/inode.c。
		current->filp[fd[0]] =
   12877:	8d 96 d0 00 00 00    	lea    0xd0(%esi),%edx
   1287d:	89 44 91 08          	mov    %eax,0x8(%ecx,%edx,4)
			current->filp[fd[1]] = NULL;
		f[0]->f_count = f[1]->f_count = 0;
   12881:	8b 54 24 0c          	mov    0xc(%esp),%edx
   12885:	8b 44 24 10          	mov    0x10(%esp),%eax
   12889:	66 c7 40 04 00 00    	movw   $0x0,0x4(%eax)
   1288f:	0f b7 40 04          	movzwl 0x4(%eax),%eax
   12893:	66 89 42 04          	mov    %ax,0x4(%edx)
		return -1;
   12897:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1289c:	eb 6d                	jmp    1290b <sys_pipe+0x20b>
	}
	// 如果管道i节点申请成功，则对两个文件结构进行初始化操作，让它们都指向同一个管道i节点，并把读写指针都置零。
	// 第1个文件结构的文件模式为读，第2个文件结构的文件模式置为写。最后将文件句柄数组复制到对应的用户空间数组中，
	// 成功返回0,退出。
	f[0]->f_inode = f[1]->f_inode = inode;
   1289e:	8b 54 24 0c          	mov    0xc(%esp),%edx
   128a2:	8b 44 24 10          	mov    0x10(%esp),%eax
   128a6:	8b 4c 24 14          	mov    0x14(%esp),%ecx
   128aa:	89 48 08             	mov    %ecx,0x8(%eax)
   128ad:	8b 40 08             	mov    0x8(%eax),%eax
   128b0:	89 42 08             	mov    %eax,0x8(%edx)
	f[0]->f_pos = f[1]->f_pos = 0;
   128b3:	8b 54 24 0c          	mov    0xc(%esp),%edx
   128b7:	8b 44 24 10          	mov    0x10(%esp),%eax
   128bb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
   128c2:	8b 40 0c             	mov    0xc(%eax),%eax
   128c5:	89 42 0c             	mov    %eax,0xc(%edx)
	f[0]->f_mode = 1;										/* read */
   128c8:	8b 44 24 0c          	mov    0xc(%esp),%eax
   128cc:	66 c7 00 01 00       	movw   $0x1,(%eax)
	f[1]->f_mode = 2;										/* write */
   128d1:	8b 44 24 10          	mov    0x10(%esp),%eax
   128d5:	66 c7 00 02 00       	movw   $0x2,(%eax)
	put_fs_long(fd[0], 0 + fildes);
   128da:	8b 44 24 04          	mov    0x4(%esp),%eax
   128de:	83 ec 08             	sub    $0x8,%esp
   128e1:	ff 74 24 38          	pushl  0x38(%esp)
   128e5:	50                   	push   %eax
   128e6:	e8 d3 fa ff ff       	call   123be <put_fs_long>
   128eb:	83 c4 10             	add    $0x10,%esp
	put_fs_long(fd[1], 1 + fildes);
   128ee:	8b 44 24 30          	mov    0x30(%esp),%eax
   128f2:	83 c0 04             	add    $0x4,%eax
   128f5:	8b 54 24 08          	mov    0x8(%esp),%edx
   128f9:	83 ec 08             	sub    $0x8,%esp
   128fc:	50                   	push   %eax
   128fd:	52                   	push   %edx
   128fe:	e8 bb fa ff ff       	call   123be <put_fs_long>
   12903:	83 c4 10             	add    $0x10,%esp
	return 0;
   12906:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1290b:	83 c4 24             	add    $0x24,%esp
   1290e:	5b                   	pop    %ebx
   1290f:	5e                   	pop    %esi
   12910:	c3                   	ret    

00012911 <pipe_ioctl>:

// 管道io控制函数。
// 参数：pino - 管道i节点指针；cmd - 控制命令；arg - 参数。
// 函数返回0表示执行成功，否则返回出错码。
int pipe_ioctl(struct m_inode *pino, int cmd, int arg)
{
   12911:	83 ec 0c             	sub    $0xc,%esp
	// 如果命令是取管道中当前可读数据长度，则把管道数据长度值添入用户参数指定的位置处，并返回0。否则返回无效命令
	// 错误码。
	switch (cmd) {
   12914:	8b 44 24 14          	mov    0x14(%esp),%eax
   12918:	3d 1b 54 00 00       	cmp    $0x541b,%eax
   1291d:	75 4a                	jne    12969 <pipe_ioctl+0x58>
		case FIONREAD:
			verify_area((void *) arg, 4);
   1291f:	8b 44 24 18          	mov    0x18(%esp),%eax
   12923:	83 ec 08             	sub    $0x8,%esp
   12926:	6a 04                	push   $0x4
   12928:	50                   	push   %eax
   12929:	e8 75 5a ff ff       	call   83a3 <verify_area>
   1292e:	83 c4 10             	add    $0x10,%esp
			put_fs_long(PIPE_SIZE(*pino), (unsigned long *) arg);
   12931:	8b 44 24 18          	mov    0x18(%esp),%eax
   12935:	8b 54 24 10          	mov    0x10(%esp),%edx
   12939:	0f b7 52 0e          	movzwl 0xe(%edx),%edx
   1293d:	0f b7 ca             	movzwl %dx,%ecx
   12940:	8b 54 24 10          	mov    0x10(%esp),%edx
   12944:	0f b7 52 10          	movzwl 0x10(%edx),%edx
   12948:	0f b7 d2             	movzwl %dx,%edx
   1294b:	29 d1                	sub    %edx,%ecx
   1294d:	89 ca                	mov    %ecx,%edx
   1294f:	81 e2 ff 0f 00 00    	and    $0xfff,%edx
   12955:	83 ec 08             	sub    $0x8,%esp
   12958:	50                   	push   %eax
   12959:	52                   	push   %edx
   1295a:	e8 5f fa ff ff       	call   123be <put_fs_long>
   1295f:	83 c4 10             	add    $0x10,%esp
			return 0;
   12962:	b8 00 00 00 00       	mov    $0x0,%eax
   12967:	eb 05                	jmp    1296e <pipe_ioctl+0x5d>
		default:
			return -EINVAL;
   12969:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
	}
}
   1296e:	83 c4 0c             	add    $0xc,%esp
   12971:	c3                   	ret    

00012972 <get_fs_byte>:
//// 读取fs段中指定地址处的字节.
// 参数:addr - 指定的内存地址.
// %0 - (返回的字节_v);%1 - (内存地址addr)
// 返回:返回内存fs[addr]处的字节.
static inline unsigned char get_fs_byte(const char * addr)
{
   12972:	53                   	push   %ebx
	unsigned register char _v;

	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   12973:	8b 44 24 08          	mov    0x8(%esp),%eax
   12977:	64 8a 00             	mov    %fs:(%eax),%al
   1297a:	89 c3                	mov    %eax,%ebx
	return _v;
   1297c:	89 d8                	mov    %ebx,%eax
}
   1297e:	5b                   	pop    %ebx
   1297f:	c3                   	ret    

00012980 <strcpy>:

// 将一个字符串(src)复制到另一个字符串(dest),直到遇到NULL字符后停止.
// 参数: desc - 目的字符串指针, src - 源字符串指针.
// %0 - esi(src), %1 - edi(dest)
static inline char * strcpy(char * dest, const char *src)
{
   12980:	57                   	push   %edi
   12981:	56                   	push   %esi
__asm__(
   12982:	8b 54 24 10          	mov    0x10(%esp),%edx
   12986:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   1298a:	89 d6                	mov    %edx,%esi
   1298c:	89 cf                	mov    %ecx,%edi
   1298e:	fc                   	cld    
   1298f:	ac                   	lods   %ds:(%esi),%al
   12990:	aa                   	stos   %al,%es:(%edi)
   12991:	84 c0                	test   %al,%al
   12993:	75 fa                	jne    1298f <strcpy+0xf>
	"1:\tlodsb\n\t"											// 加载DS:[esi]处1字节->al, 并更新esi.
	"stosb\n\t"												// 存储字节al->ES:[edi], 并更新edi.
	"testb %%al, %%al\n\t"									// 刚存储的字节是0?
	"jne 1b"												// 不是则向后跳转到标号1处,否则结束.
	::"S" (src), "D" (dest):"ax");
return dest;												// 返回目的字符串指针.
   12995:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   12999:	5e                   	pop    %esi
   1299a:	5f                   	pop    %edi
   1299b:	c3                   	ret    

0001299c <strcmp>:
// 将一个字符串与另一个字符串进行比较
// 参数:cs - 字符串1,ct - 字符串2.
// %0 - eax(__res)返回值,%1 - edi(cs)字符串1指针,%2 - esi(ct)字符串2指针.
// 返回:如果串1>串2,则返回1;串1=串2,则返回0;串1<串2,则返回-1.
static inline int strcmp(const char * cs, const char * ct)
{
   1299c:	57                   	push   %edi
   1299d:	56                   	push   %esi
register int __res __asm__("ax");							// __res是寄存器变量(eax).
__asm__(
   1299e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   129a2:	8b 54 24 10          	mov    0x10(%esp),%edx
   129a6:	89 c7                	mov    %eax,%edi
   129a8:	89 d6                	mov    %edx,%esi
   129aa:	fc                   	cld    
   129ab:	ac                   	lods   %ds:(%esi),%al
   129ac:	ae                   	scas   %es:(%edi),%al
   129ad:	75 08                	jne    129b7 <strcmp+0x1b>
   129af:	84 c0                	test   %al,%al
   129b1:	75 f8                	jne    129ab <strcmp+0xf>
   129b3:	31 c0                	xor    %eax,%eax
   129b5:	eb 09                	jmp    129c0 <strcmp+0x24>
   129b7:	b8 01 00 00 00       	mov    $0x1,%eax
   129bc:	7c 02                	jl     129c0 <strcmp+0x24>
   129be:	f7 d8                	neg    %eax
	"jl 3f\n\t"												// 若前面比较中串2字符<串1字符,则返回正值结束.
	"negl %%eax\n"											// 否则eax=-eax,返回负值,结束.
	"3:"
	:"=a" (__res):"D" (cs), "S" (ct):);
return __res;												// 返回比较结果.
}
   129c0:	5e                   	pop    %esi
   129c1:	5f                   	pop    %edi
   129c2:	c3                   	ret    

000129c3 <permission>:
 */
// 检测文件访问许可权限.
// 参数:inode - 文件的i节点指针;mask - 访问属性屏蔽码.
// 返回:访问许可返回1,否则返回0.
static int permission(struct m_inode * inode, int mask)
{
   129c3:	83 ec 1c             	sub    $0x1c,%esp
	int mode = inode->i_mode;								// 文件访问属性.
   129c6:	8b 44 24 20          	mov    0x20(%esp),%eax
   129ca:	0f b7 00             	movzwl (%eax),%eax
   129cd:	0f b7 c0             	movzwl %ax,%eax
   129d0:	89 44 24 0c          	mov    %eax,0xc(%esp)

	/* special case: not even root can read/write a deleted file */
	/* 特殊情况:即使是超级用户(root)也不能读/写一个已被删除的文件. */
	// 如果i节点有对应的设备,但该i节点的链接计数值等于0,表示该文件已被删除,则返回.
	if (inode->i_dev && !inode->i_nlinks)
   129d4:	8b 44 24 20          	mov    0x20(%esp),%eax
   129d8:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   129dc:	66 85 c0             	test   %ax,%ax
   129df:	74 13                	je     129f4 <permission+0x31>
   129e1:	8b 44 24 20          	mov    0x20(%esp),%eax
   129e5:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   129e9:	84 c0                	test   %al,%al
   129eb:	75 07                	jne    129f4 <permission+0x31>
		return 0;
   129ed:	b8 00 00 00 00       	mov    $0x0,%eax
   129f2:	eb 6e                	jmp    12a62 <permission+0x9f>
	// 如果进程的有效用户id(euid)与i节点的用户id相同,则取文件宿主的访问权限
	else if (current->euid == inode->i_uid)
   129f4:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   129f9:	0f b7 90 ce 02 00 00 	movzwl 0x2ce(%eax),%edx
   12a00:	8b 44 24 20          	mov    0x20(%esp),%eax
   12a04:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   12a08:	66 39 c2             	cmp    %ax,%dx
   12a0b:	75 07                	jne    12a14 <permission+0x51>
		mode >>= 6;
   12a0d:	c1 7c 24 0c 06       	sarl   $0x6,0xc(%esp)
   12a12:	eb 20                	jmp    12a34 <permission+0x71>
	// 如果进程有效组id(egid)与i节点的组id相同,则取组用户的访问权限
	else if (in_group_p(inode->i_gid))
   12a14:	8b 44 24 20          	mov    0x20(%esp),%eax
   12a18:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
   12a1c:	0f b6 c0             	movzbl %al,%eax
   12a1f:	83 ec 0c             	sub    $0xc,%esp
   12a22:	50                   	push   %eax
   12a23:	e8 0e 72 ff ff       	call   9c36 <in_group_p>
   12a28:	83 c4 10             	add    $0x10,%esp
   12a2b:	85 c0                	test   %eax,%eax
   12a2d:	74 05                	je     12a34 <permission+0x71>
		mode >>= 3;
   12a2f:	c1 7c 24 0c 03       	sarl   $0x3,0xc(%esp)
	// 最后判断如果所取的的访问权限与屏蔽码相同,或者是超级用户,则返回1,否则返回0.
	if (((mode & mask & 0007) == mask) || suser())
   12a34:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12a38:	23 44 24 24          	and    0x24(%esp),%eax
   12a3c:	83 e0 07             	and    $0x7,%eax
   12a3f:	3b 44 24 24          	cmp    0x24(%esp),%eax
   12a43:	74 11                	je     12a56 <permission+0x93>
   12a45:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   12a4a:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
   12a51:	66 85 c0             	test   %ax,%ax
   12a54:	75 07                	jne    12a5d <permission+0x9a>
		return 1;
   12a56:	b8 01 00 00 00       	mov    $0x1,%eax
   12a5b:	eb 05                	jmp    12a62 <permission+0x9f>
	return 0;
   12a5d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12a62:	83 c4 1c             	add    $0x1c,%esp
   12a65:	c3                   	ret    

00012a66 <match>:
 */
// 指定长度字符串比较函数.
// 参数:len - 比较的字符串长度;name - 文件名指针;de - 目录项结构.
// 返回:相同返回1,不同返回0.
static int match(int len, const char * name, struct dir_entry * de)
{
   12a66:	57                   	push   %edi
   12a67:	56                   	push   %esi
   12a68:	53                   	push   %ebx
	register int same __asm__("ax");

	// 首先判断函数参数的有效性.如果目录项指针空,或者目录项i节点等于0,或者要比较的字符串长度超过文件名长度,则返回0(不匹配).
	if (!de || !de->inode || len > NAME_LEN)
   12a69:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   12a6e:	74 13                	je     12a83 <match+0x1d>
   12a70:	8b 44 24 18          	mov    0x18(%esp),%eax
   12a74:	0f b7 00             	movzwl (%eax),%eax
   12a77:	66 85 c0             	test   %ax,%ax
   12a7a:	74 07                	je     12a83 <match+0x1d>
   12a7c:	83 7c 24 10 0e       	cmpl   $0xe,0x10(%esp)
   12a81:	7e 07                	jle    12a8a <match+0x24>
		return 0;
   12a83:	b8 00 00 00 00       	mov    $0x0,%eax
   12a88:	eb 69                	jmp    12af3 <match+0x8d>
	/* "" means "." ---> so paths like "/usr/lib//libc.a" work */
    /* ""当作"."来看待 ---> 这样就能处理象"/usr/lib//libc.a"那样的路径名 */
    // 如果比较的长度len等于0并且目录项中文件名的第1个字符是'.',并且只有这么一个字符,那么我们就认为是相同的,因此返回1(匹配)
	if (!len && (de->name[0] == '.') && (de->name[1] == '\0'))
   12a8a:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   12a8f:	75 1f                	jne    12ab0 <match+0x4a>
   12a91:	8b 44 24 18          	mov    0x18(%esp),%eax
   12a95:	0f b6 40 02          	movzbl 0x2(%eax),%eax
   12a99:	3c 2e                	cmp    $0x2e,%al
   12a9b:	75 13                	jne    12ab0 <match+0x4a>
   12a9d:	8b 44 24 18          	mov    0x18(%esp),%eax
   12aa1:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   12aa5:	84 c0                	test   %al,%al
   12aa7:	75 07                	jne    12ab0 <match+0x4a>
		return 1;
   12aa9:	b8 01 00 00 00       	mov    $0x1,%eax
   12aae:	eb 43                	jmp    12af3 <match+0x8d>
	// 如果要比较的长度len小于NAME_LEN,但是目录项中文件名长度超过len,则也返回0(不匹配)
	// 第75行上对目录项中文件名长度是否超过len的判断方法是检测name[len]是否为NULL.若长度超过len,则name[len]处就是一个不是NULL的普通字符.而对于长度
	// 为len的字符串name,字符name[len]就应该是NULL.
	if (len < NAME_LEN && de->name[len])
   12ab0:	83 7c 24 10 0d       	cmpl   $0xd,0x10(%esp)
   12ab5:	7f 1b                	jg     12ad2 <match+0x6c>
   12ab7:	8b 54 24 18          	mov    0x18(%esp),%edx
   12abb:	8b 44 24 10          	mov    0x10(%esp),%eax
   12abf:	01 d0                	add    %edx,%eax
   12ac1:	83 c0 02             	add    $0x2,%eax
   12ac4:	0f b6 00             	movzbl (%eax),%eax
   12ac7:	84 c0                	test   %al,%al
   12ac9:	74 07                	je     12ad2 <match+0x6c>
		return 0;
   12acb:	b8 00 00 00 00       	mov    $0x0,%eax
   12ad0:	eb 21                	jmp    12af3 <match+0x8d>
	__asm__(\
		"cld\n\t"							// 清方向标志位.
		"fs ; repe ; cmpsb\n\t"				// 用户空间执行循环比较[esi++]和[edi++]操作.
		"setz %%al"							// 若比较结果一样(zf=0)则置al=1(same=eax).
		:"=a" (same)
		:"0" (0), "S" ((long) name), "D" ((long) de->name), "c" (len)
   12ad2:	8b 54 24 14          	mov    0x14(%esp),%edx
   12ad6:	8b 44 24 18          	mov    0x18(%esp),%eax
   12ada:	83 c0 02             	add    $0x2,%eax
   12add:	89 c3                	mov    %eax,%ebx
	// 为len的字符串name,字符name[len]就应该是NULL.
	if (len < NAME_LEN && de->name[len])
		return 0;
	// 然后使用嵌入汇编语句进行快速比较操作.它会在用户数据空间(fs段)执行字符串的比较操作.%0 - eax(比较结果same);%1 - eax(eax初值0);%2 - esi(名字指针);
	// %3 - edi(目录项名指针);%4 - ecs(比较的字节长度值len).
	__asm__(\
   12adf:	b8 00 00 00 00       	mov    $0x0,%eax
   12ae4:	8b 4c 24 10          	mov    0x10(%esp),%ecx
   12ae8:	89 d6                	mov    %edx,%esi
   12aea:	89 df                	mov    %ebx,%edi
   12aec:	fc                   	cld    
   12aed:	64 f3 a6             	repz cmpsb %es:(%edi),%fs:(%esi)
   12af0:	0f 94 c0             	sete   %al
		"setz %%al"							// 若比较结果一样(zf=0)则置al=1(same=eax).
		:"=a" (same)
		:"0" (0), "S" ((long) name), "D" ((long) de->name), "c" (len)
		:);
	return same;							// 返回比较结果.
}
   12af3:	5b                   	pop    %ebx
   12af4:	5e                   	pop    %esi
   12af5:	5f                   	pop    %edi
   12af6:	c3                   	ret    

00012af7 <find_entry>:
// 参数:*dir - 指定目录i节点的指针;name - 文件名;namelen - 文件名长度;该函数在指定目录的数据(文件)中搜索指定文件名的目录项.并对指定
// 文件名是'..'的情况根据当前进行的相关设置进行特殊处理.
// 返回:成功则返回高速缓冲区指针,并在*res_dir处返回的目录项结构指针.失败则返回空指针NULL.
static struct buffer_head * find_entry(struct m_inode ** dir,
	const char * name, int namelen, struct dir_entry ** res_dir)
{
   12af7:	83 ec 2c             	sub    $0x2c,%esp
	// 则不予处理.如果没有定义过NO_TRUNCATE,那么在文件名长度超过最大长度NAME_LEN时截短之.
#ifdef NO_TRUNCATE
	if (namelen > NAME_LEN)
		return NULL;
#else
	if (namelen > NAME_LEN)
   12afa:	83 7c 24 38 0e       	cmpl   $0xe,0x38(%esp)
   12aff:	7e 08                	jle    12b09 <find_entry+0x12>
		namelen = NAME_LEN;
   12b01:	c7 44 24 38 0e 00 00 	movl   $0xe,0x38(%esp)
   12b08:	00 
#endif
	// 首先计算本目录中目录项项数entries.目录i节点i_size字段中含有本目录包含的数据长度,因此其除以一个目录项的长度(16字节)即可得到该目录中目录项数.然后
	// 置空返回目录项结构指针.
	entries = (*dir)->i_size / (sizeof (struct dir_entry));
   12b09:	8b 44 24 30          	mov    0x30(%esp),%eax
   12b0d:	8b 00                	mov    (%eax),%eax
   12b0f:	8b 40 04             	mov    0x4(%eax),%eax
   12b12:	c1 e8 04             	shr    $0x4,%eax
   12b15:	89 44 24 10          	mov    %eax,0x10(%esp)
	*res_dir = NULL;
   12b19:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   12b1d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	// 只能访问该目录中的项而不能退到其父目录中去.也即对于该进程本目录就如同是文件系统的根目录.因此我们需要将文件名修改为'.'.
	// 否则,如果该目录的i节点号等于ROOT_INO(1号)的话,说明确实是文件系统的根i节点.则取文件系统的超级块.如果被安装到的i节点存在,则先放回原i节点,然后对被
	// 安装到的i节点进行处理.于是我们让*dir指向该被安装到的i节点;并且该i节点的引用数加1.即针对这种情况,我们悄悄进行了"偷梁换柱"工程:)
	/* check for '..', as we might have to do some "magic" for it */
	/* 检查目录项'..',因为我们可能需要对其进行特殊处理 */
	if (namelen == 2 && get_fs_byte(name) == '.' && get_fs_byte(name + 1) == '.') {
   12b23:	83 7c 24 38 02       	cmpl   $0x2,0x38(%esp)
   12b28:	0f 85 b3 00 00 00    	jne    12be1 <find_entry+0xea>
   12b2e:	ff 74 24 34          	pushl  0x34(%esp)
   12b32:	e8 3b fe ff ff       	call   12972 <get_fs_byte>
   12b37:	83 c4 04             	add    $0x4,%esp
   12b3a:	3c 2e                	cmp    $0x2e,%al
   12b3c:	0f 85 9f 00 00 00    	jne    12be1 <find_entry+0xea>
   12b42:	8b 44 24 34          	mov    0x34(%esp),%eax
   12b46:	83 c0 01             	add    $0x1,%eax
   12b49:	50                   	push   %eax
   12b4a:	e8 23 fe ff ff       	call   12972 <get_fs_byte>
   12b4f:	83 c4 04             	add    $0x4,%esp
   12b52:	3c 2e                	cmp    $0x2e,%al
   12b54:	0f 85 87 00 00 00    	jne    12be1 <find_entry+0xea>
		/* '..' in a pseudo-root results in a faked '.' (just change namelen) */
		/* 伪根中的'..'如同一个假'.'(只需改变名字长度) */
		if ((*dir) == current->root)
   12b5a:	8b 44 24 30          	mov    0x30(%esp),%eax
   12b5e:	8b 10                	mov    (%eax),%edx
   12b60:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   12b65:	8b 80 38 03 00 00    	mov    0x338(%eax),%eax
   12b6b:	39 c2                	cmp    %eax,%edx
   12b6d:	75 0a                	jne    12b79 <find_entry+0x82>
			namelen = 1;
   12b6f:	c7 44 24 38 01 00 00 	movl   $0x1,0x38(%esp)
   12b76:	00 
   12b77:	eb 68                	jmp    12be1 <find_entry+0xea>
		else if ((*dir)->i_num == ROOT_INO) {
   12b79:	8b 44 24 30          	mov    0x30(%esp),%eax
   12b7d:	8b 00                	mov    (%eax),%eax
   12b7f:	0f b7 40 32          	movzwl 0x32(%eax),%eax
   12b83:	66 83 f8 01          	cmp    $0x1,%ax
   12b87:	75 58                	jne    12be1 <find_entry+0xea>
			/* '..' over a mount-point results in 'dir' being exchanged for the mounted
			   directory-inode. NOTE! We set mounted, so that we can iput the new dir */
			/* 在一个安装点上的'..'将导致目录交换到被安装文件系统的目录i节点上.注意! 由于我们设置了mounted标志,因而我们能够放回该新目录 */
			sb = get_super((*dir)->i_dev);
   12b89:	8b 44 24 30          	mov    0x30(%esp),%eax
   12b8d:	8b 00                	mov    (%eax),%eax
   12b8f:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   12b93:	0f b7 c0             	movzwl %ax,%eax
   12b96:	83 ec 0c             	sub    $0xc,%esp
   12b99:	50                   	push   %eax
   12b9a:	e8 65 cf ff ff       	call   fb04 <get_super>
   12b9f:	83 c4 10             	add    $0x10,%esp
   12ba2:	89 44 24 0c          	mov    %eax,0xc(%esp)
			if (sb->s_imount) {
   12ba6:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12baa:	8b 40 5c             	mov    0x5c(%eax),%eax
   12bad:	85 c0                	test   %eax,%eax
   12baf:	74 30                	je     12be1 <find_entry+0xea>
				iput(*dir);
   12bb1:	8b 44 24 30          	mov    0x30(%esp),%eax
   12bb5:	8b 00                	mov    (%eax),%eax
   12bb7:	83 ec 0c             	sub    $0xc,%esp
   12bba:	50                   	push   %eax
   12bbb:	e8 dc ba ff ff       	call   e69c <iput>
   12bc0:	83 c4 10             	add    $0x10,%esp
				(*dir)=sb->s_imount;
   12bc3:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12bc7:	8b 50 5c             	mov    0x5c(%eax),%edx
   12bca:	8b 44 24 30          	mov    0x30(%esp),%eax
   12bce:	89 10                	mov    %edx,(%eax)
				(*dir)->i_count++;
   12bd0:	8b 44 24 30          	mov    0x30(%esp),%eax
   12bd4:	8b 00                	mov    (%eax),%eax
   12bd6:	0f b7 50 34          	movzwl 0x34(%eax),%edx
   12bda:	83 c2 01             	add    $0x1,%edx
   12bdd:	66 89 50 34          	mov    %dx,0x34(%eax)
		}
	}
	// 现在我们开始正常操作，查找指定文件名的目录项在什么地方。因此我们需要读取目录的数据，即取出目录i节点对应块设备数据区中的数据块（逻辑块）信息。这些逻辑块的
	// 块号保存在i节点结构的i_zone[9]数组中.我们先取其中第1个块号.如果目录i节点指向的第一个直接盘块号为0,则说明该目录竟然不含数据,这不正常.于是返回NULL退出.
	// 否则我们就从节点所在设备读取指定的目录项数据块.当然,如果不成功,则也返回NULL退出.
	if (!(block = (*dir)->i_zone[0]))
   12be1:	8b 44 24 30          	mov    0x30(%esp),%eax
   12be5:	8b 00                	mov    (%eax),%eax
   12be7:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   12beb:	0f b7 c0             	movzwl %ax,%eax
   12bee:	89 44 24 08          	mov    %eax,0x8(%esp)
   12bf2:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   12bf7:	75 0a                	jne    12c03 <find_entry+0x10c>
		return NULL;
   12bf9:	b8 00 00 00 00       	mov    $0x0,%eax
   12bfe:	e9 2e 01 00 00       	jmp    12d31 <find_entry+0x23a>
	if (!(bh = bread((*dir)->i_dev, block)))
   12c03:	8b 44 24 30          	mov    0x30(%esp),%eax
   12c07:	8b 00                	mov    (%eax),%eax
   12c09:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   12c0d:	0f b7 c0             	movzwl %ax,%eax
   12c10:	83 ec 08             	sub    $0x8,%esp
   12c13:	ff 74 24 10          	pushl  0x10(%esp)
   12c17:	50                   	push   %eax
   12c18:	e8 76 ca ff ff       	call   f693 <bread>
   12c1d:	83 c4 10             	add    $0x10,%esp
   12c20:	89 44 24 18          	mov    %eax,0x18(%esp)
   12c24:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   12c29:	75 0a                	jne    12c35 <find_entry+0x13e>
		return NULL;
   12c2b:	b8 00 00 00 00       	mov    $0x0,%eax
   12c30:	e9 fc 00 00 00       	jmp    12d31 <find_entry+0x23a>
	// 此时我们就在这个读取的目录i节点数据块中搜索匹配指定文件名的目录项.首先让de指向缓冲块中的数据块部分,并在不超过目录项数据的条件下,循环执行搜索.其中i是目录
	// 中的目录项索引号,在循环开始时初始化为0.
	i = 0;
   12c35:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   12c3c:	00 
	de = (struct dir_entry *) bh->b_data;
   12c3d:	8b 44 24 18          	mov    0x18(%esp),%eax
   12c41:	8b 00                	mov    (%eax),%eax
   12c43:	89 44 24 14          	mov    %eax,0x14(%esp)
	while (i < entries) {
   12c47:	e9 c3 00 00 00       	jmp    12d0f <find_entry+0x218>
		// 如果当前目录项数据块已经搜索完,还没有找到匹配的目录项,则释放当前目录项数据块.再读入目录的下一个逻辑块.若这块为空,则只要还没有搜索完目录中的所有目录项,就
		// 跳过该块,继续读目录的下一逻辑块.若该块不空,就让de指向该数据块,然后在其中继续搜索.其中141行上i/DIR_ENTRIES_PER_BLOCK可得到当前搜索的目录项所在目录文件中的
		// 块号,而bmap()函数(inode.c)则可计算出在设备上对应的逻辑块号.
		if ((char *)de >= BLOCK_SIZE + bh->b_data) {
   12c4c:	8b 44 24 18          	mov    0x18(%esp),%eax
   12c50:	8b 00                	mov    (%eax),%eax
   12c52:	05 00 04 00 00       	add    $0x400,%eax
   12c57:	3b 44 24 14          	cmp    0x14(%esp),%eax
   12c5b:	77 7d                	ja     12cda <find_entry+0x1e3>
			brelse(bh);
   12c5d:	83 ec 0c             	sub    $0xc,%esp
   12c60:	ff 74 24 24          	pushl  0x24(%esp)
   12c64:	e8 d4 c9 ff ff       	call   f63d <brelse>
   12c69:	83 c4 10             	add    $0x10,%esp
			bh = NULL;
   12c6c:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   12c73:	00 
			if (!(block = bmap(*dir, i / DIR_ENTRIES_PER_BLOCK)) ||
   12c74:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   12c78:	c1 e8 06             	shr    $0x6,%eax
   12c7b:	89 c2                	mov    %eax,%edx
   12c7d:	8b 44 24 30          	mov    0x30(%esp),%eax
   12c81:	8b 00                	mov    (%eax),%eax
   12c83:	83 ec 08             	sub    $0x8,%esp
   12c86:	52                   	push   %edx
   12c87:	50                   	push   %eax
   12c88:	e8 d7 b9 ff ff       	call   e664 <bmap>
   12c8d:	83 c4 10             	add    $0x10,%esp
   12c90:	89 44 24 08          	mov    %eax,0x8(%esp)
   12c94:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   12c99:	74 28                	je     12cc3 <find_entry+0x1cc>
			    !(bh = bread((*dir)->i_dev, block))) {
   12c9b:	8b 44 24 30          	mov    0x30(%esp),%eax
   12c9f:	8b 00                	mov    (%eax),%eax
   12ca1:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   12ca5:	0f b7 c0             	movzwl %ax,%eax
		// 跳过该块,继续读目录的下一逻辑块.若该块不空,就让de指向该数据块,然后在其中继续搜索.其中141行上i/DIR_ENTRIES_PER_BLOCK可得到当前搜索的目录项所在目录文件中的
		// 块号,而bmap()函数(inode.c)则可计算出在设备上对应的逻辑块号.
		if ((char *)de >= BLOCK_SIZE + bh->b_data) {
			brelse(bh);
			bh = NULL;
			if (!(block = bmap(*dir, i / DIR_ENTRIES_PER_BLOCK)) ||
   12ca8:	83 ec 08             	sub    $0x8,%esp
   12cab:	ff 74 24 10          	pushl  0x10(%esp)
   12caf:	50                   	push   %eax
   12cb0:	e8 de c9 ff ff       	call   f693 <bread>
   12cb5:	83 c4 10             	add    $0x10,%esp
   12cb8:	89 44 24 18          	mov    %eax,0x18(%esp)
   12cbc:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   12cc1:	75 0d                	jne    12cd0 <find_entry+0x1d9>
			    !(bh = bread((*dir)->i_dev, block))) {
				i += DIR_ENTRIES_PER_BLOCK;
   12cc3:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   12cc7:	83 c0 40             	add    $0x40,%eax
   12cca:	89 44 24 1c          	mov    %eax,0x1c(%esp)
				continue;
   12cce:	eb 3f                	jmp    12d0f <find_entry+0x218>
			}
			de = (struct dir_entry *) bh->b_data;
   12cd0:	8b 44 24 18          	mov    0x18(%esp),%eax
   12cd4:	8b 00                	mov    (%eax),%eax
   12cd6:	89 44 24 14          	mov    %eax,0x14(%esp)
		}
		// 如果找到匹配的目录项的话,则返回目录项结构指针de和该目录项i节点指针*dir以及该目录项数据块指针bh,并退出函数.否则继续在目录项数据块中比较下一个目录项.
		if (match(namelen, name, de)) {
   12cda:	83 ec 04             	sub    $0x4,%esp
   12cdd:	ff 74 24 18          	pushl  0x18(%esp)
   12ce1:	ff 74 24 3c          	pushl  0x3c(%esp)
   12ce5:	ff 74 24 44          	pushl  0x44(%esp)
   12ce9:	e8 78 fd ff ff       	call   12a66 <match>
   12cee:	83 c4 10             	add    $0x10,%esp
   12cf1:	85 c0                	test   %eax,%eax
   12cf3:	74 10                	je     12d05 <find_entry+0x20e>
			*res_dir = de;
   12cf5:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   12cf9:	8b 54 24 14          	mov    0x14(%esp),%edx
   12cfd:	89 10                	mov    %edx,(%eax)
			return bh;
   12cff:	8b 44 24 18          	mov    0x18(%esp),%eax
   12d03:	eb 2c                	jmp    12d31 <find_entry+0x23a>
		}
		de++;
   12d05:	83 44 24 14 10       	addl   $0x10,0x14(%esp)
		i++;
   12d0a:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
		return NULL;
	// 此时我们就在这个读取的目录i节点数据块中搜索匹配指定文件名的目录项.首先让de指向缓冲块中的数据块部分,并在不超过目录项数据的条件下,循环执行搜索.其中i是目录
	// 中的目录项索引号,在循环开始时初始化为0.
	i = 0;
	de = (struct dir_entry *) bh->b_data;
	while (i < entries) {
   12d0f:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   12d13:	3b 44 24 10          	cmp    0x10(%esp),%eax
   12d17:	0f 8c 2f ff ff ff    	jl     12c4c <find_entry+0x155>
		}
		de++;
		i++;
	}
	// 如果指定目录中的所有目录项都搜索赛后,还没有找到相应的目录项,则释放目录的数据块,最后返回NULL(失败).
	brelse(bh);
   12d1d:	83 ec 0c             	sub    $0xc,%esp
   12d20:	ff 74 24 24          	pushl  0x24(%esp)
   12d24:	e8 14 c9 ff ff       	call   f63d <brelse>
   12d29:	83 c4 10             	add    $0x10,%esp
	return NULL;
   12d2c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12d31:	83 c4 2c             	add    $0x2c,%esp
   12d34:	c3                   	ret    

00012d35 <add_entry>:
// 根据指定的目录和文件名添加目录项。
// 参数：dir - 指定目录的i节点；name - 文件名；namelen - 文件名长度；
// 返回：高速缓冲区指针；res_dir - 返回的目录项结构指针。
static struct buffer_head * add_entry(struct m_inode * dir,
	const char * name, int namelen, struct dir_entry ** res_dir)
{
   12d35:	83 ec 1c             	sub    $0x1c,%esp
	struct buffer_head * bh;
	struct dir_entry * de;

	// 同样，本函数一开始也需要对函数参数的有效性进行判断和验证。如果我们在前面定义了符号常数NO_TRUNCATE，那么如果文件
	// 名长度超过最大长度NAME_LEN，则不予处理。如果没有定义过NO_TRUNCATE，那么在文件长度超过最大长度NAME_LEN时截短之。
	*res_dir = NULL;                							// 用于返回目录项结构指针。
   12d38:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   12d3c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
#ifdef NO_TRUNCATE
	if (namelen > NAME_LEN)
		return NULL;
#else
	if (namelen > NAME_LEN)
   12d42:	83 7c 24 28 0e       	cmpl   $0xe,0x28(%esp)
   12d47:	7e 08                	jle    12d51 <add_entry+0x1c>
		namelen = NAME_LEN;
   12d49:	c7 44 24 28 0e 00 00 	movl   $0xe,0x28(%esp)
   12d50:	00 
#endif
	// 现在我们开始操作，向指定目录中添加一个指定文件名的目录项。因此我们需要先读取目录的数据，即取出目录i节点对应块设备
	// 数据区中的数据块（逻辑块）信息。这些逻辑块的块号保存在i节点结构的i_zone[9]数组中。我们先取其第1个块号。如果目录
	// i节点指向的第一个直接磁盘块号为0,则说明该目录竟然不含数据，这不正常。于是返回NULL退出。否则我们就从节点所在设备读取
	// 指定的目录项数据块。如果不成功，则也返回NULL退出。另外，如果参数提供的文件名长度等于0,则也返回NULL退出。
	if (!namelen)
   12d51:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   12d56:	75 0a                	jne    12d62 <add_entry+0x2d>
		return NULL;
   12d58:	b8 00 00 00 00       	mov    $0x0,%eax
   12d5d:	e9 fd 01 00 00       	jmp    12f5f <add_entry+0x22a>
	if (!(block = dir->i_zone[0]))
   12d62:	8b 44 24 20          	mov    0x20(%esp),%eax
   12d66:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   12d6a:	0f b7 c0             	movzwl %ax,%eax
   12d6d:	89 04 24             	mov    %eax,(%esp)
   12d70:	83 3c 24 00          	cmpl   $0x0,(%esp)
   12d74:	75 0a                	jne    12d80 <add_entry+0x4b>
		return NULL;
   12d76:	b8 00 00 00 00       	mov    $0x0,%eax
   12d7b:	e9 df 01 00 00       	jmp    12f5f <add_entry+0x22a>
	if (!(bh = bread(dir->i_dev, block)))
   12d80:	8b 44 24 20          	mov    0x20(%esp),%eax
   12d84:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   12d88:	0f b7 c0             	movzwl %ax,%eax
   12d8b:	83 ec 08             	sub    $0x8,%esp
   12d8e:	ff 74 24 08          	pushl  0x8(%esp)
   12d92:	50                   	push   %eax
   12d93:	e8 fb c8 ff ff       	call   f693 <bread>
   12d98:	83 c4 10             	add    $0x10,%esp
   12d9b:	89 44 24 08          	mov    %eax,0x8(%esp)
   12d9f:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   12da4:	75 0a                	jne    12db0 <add_entry+0x7b>
		return NULL;
   12da6:	b8 00 00 00 00       	mov    $0x0,%eax
   12dab:	e9 af 01 00 00       	jmp    12f5f <add_entry+0x22a>
	// 此时我们就在这个目录i节点数据块中循环查找最后未使用的空目录项。首先让目录项结构指针de指向缓冲块中的数据块部分，即第
	// 一个目录项处。其中i是目录中的目录项索引号，在循环开始时初始化为0。
	i = 0;
   12db0:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   12db7:	00 
	de = (struct dir_entry *) bh->b_data;
   12db8:	8b 44 24 08          	mov    0x8(%esp),%eax
   12dbc:	8b 00                	mov    (%eax),%eax
   12dbe:	89 44 24 04          	mov    %eax,0x4(%esp)
		// 对应的逻辑块不存在就创建一块。若读取或创建操作失败则返回空。如果此次读取的磁盘逻辑块数据返回的缓冲块指针为空，说明这
		// 块逻辑块可能是因为不存在而新创建的空块，则把目录项索引值加上一块逻辑块所能容纳的目录项数DIR_ENTRIES_PER_BLOCK，
		// 用以跳过该块并继续搜索。否则说明新读入的块上有目录项数据，于是让目录项结构指针de指向该块的缓冲块数据部分，然后在其中
		// 继续搜索。其中i/DIR_ENTRIES_PER_BLOCK可计算得到当前搜索的目录项i所在目录文件中的块号，而create_block()函数
		// （inode.c）则可读取或创建出在设备上对应的逻辑块。
		if ((char *)de >= BLOCK_SIZE + bh->b_data) {
   12dc2:	8b 44 24 08          	mov    0x8(%esp),%eax
   12dc6:	8b 00                	mov    (%eax),%eax
   12dc8:	05 00 04 00 00       	add    $0x400,%eax
   12dcd:	3b 44 24 04          	cmp    0x4(%esp),%eax
   12dd1:	0f 87 81 00 00 00    	ja     12e58 <add_entry+0x123>
			brelse(bh);
   12dd7:	83 ec 0c             	sub    $0xc,%esp
   12dda:	ff 74 24 14          	pushl  0x14(%esp)
   12dde:	e8 5a c8 ff ff       	call   f63d <brelse>
   12de3:	83 c4 10             	add    $0x10,%esp
			bh = NULL;
   12de6:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
   12ded:	00 
			block = create_block(dir, i / DIR_ENTRIES_PER_BLOCK);
   12dee:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12df2:	c1 e8 06             	shr    $0x6,%eax
   12df5:	83 ec 08             	sub    $0x8,%esp
   12df8:	50                   	push   %eax
   12df9:	ff 74 24 2c          	pushl  0x2c(%esp)
   12dfd:	e8 7e b8 ff ff       	call   e680 <create_block>
   12e02:	83 c4 10             	add    $0x10,%esp
   12e05:	89 04 24             	mov    %eax,(%esp)
			if (!block)
   12e08:	83 3c 24 00          	cmpl   $0x0,(%esp)
   12e0c:	75 0a                	jne    12e18 <add_entry+0xe3>
				return NULL;
   12e0e:	b8 00 00 00 00       	mov    $0x0,%eax
   12e13:	e9 47 01 00 00       	jmp    12f5f <add_entry+0x22a>
			if (!(bh = bread(dir->i_dev, block))) {          			// 若空则跳过该块继续。
   12e18:	8b 44 24 20          	mov    0x20(%esp),%eax
   12e1c:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   12e20:	0f b7 c0             	movzwl %ax,%eax
   12e23:	83 ec 08             	sub    $0x8,%esp
   12e26:	ff 74 24 08          	pushl  0x8(%esp)
   12e2a:	50                   	push   %eax
   12e2b:	e8 63 c8 ff ff       	call   f693 <bread>
   12e30:	83 c4 10             	add    $0x10,%esp
   12e33:	89 44 24 08          	mov    %eax,0x8(%esp)
   12e37:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   12e3c:	75 10                	jne    12e4e <add_entry+0x119>
				i += DIR_ENTRIES_PER_BLOCK;
   12e3e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12e42:	83 c0 40             	add    $0x40,%eax
   12e45:	89 44 24 0c          	mov    %eax,0xc(%esp)
				continue;
   12e49:	e9 0c 01 00 00       	jmp    12f5a <add_entry+0x225>
			}
			de = (struct dir_entry *) bh->b_data;
   12e4e:	8b 44 24 08          	mov    0x8(%esp),%eax
   12e52:	8b 00                	mov    (%eax),%eax
   12e54:	89 44 24 04          	mov    %eax,0x4(%esp)
		}
		// 如果当前所操作的目录项序号i乘上结构大小所得长度值已经超过目录i节点信息所指出的目录数据长度值i_size，则说明整个目录
		// 文件数据中没有由于删除文件留下的空目录项，因此我们只能把需要添加的新目录项附加到目录文件数据的末端处。于是对该处目录
		// 项进行设置（置该目录项的i节点指针为空），并更新该目录文件的长度值（加上一个目录项的长度），然后设置目录的i节点已修改
		// 标志，再更新该目录的改变时间为当前时间。
		if (i * sizeof(struct dir_entry) >= dir->i_size) {
   12e58:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12e5c:	c1 e0 04             	shl    $0x4,%eax
   12e5f:	89 c2                	mov    %eax,%edx
   12e61:	8b 44 24 20          	mov    0x20(%esp),%eax
   12e65:	8b 40 04             	mov    0x4(%eax),%eax
   12e68:	39 c2                	cmp    %eax,%edx
   12e6a:	72 49                	jb     12eb5 <add_entry+0x180>
			de->inode = 0;
   12e6c:	8b 44 24 04          	mov    0x4(%esp),%eax
   12e70:	66 c7 00 00 00       	movw   $0x0,(%eax)
			dir->i_size = (i + 1) * sizeof(struct dir_entry);
   12e75:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12e79:	83 c0 01             	add    $0x1,%eax
   12e7c:	c1 e0 04             	shl    $0x4,%eax
   12e7f:	89 c2                	mov    %eax,%edx
   12e81:	8b 44 24 20          	mov    0x20(%esp),%eax
   12e85:	89 50 04             	mov    %edx,0x4(%eax)
			dir->i_dirt = 1;
   12e88:	8b 44 24 20          	mov    0x20(%esp),%eax
   12e8c:	c6 40 37 01          	movb   $0x1,0x37(%eax)
			dir->i_ctime = CURRENT_TIME;
   12e90:	a1 00 eb 02 00       	mov    0x2eb00,%eax
   12e95:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
   12e9b:	01 d0                	add    %edx,%eax
   12e9d:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   12ea2:	f7 e2                	mul    %edx
   12ea4:	c1 ea 05             	shr    $0x5,%edx
   12ea7:	a1 04 eb 02 00       	mov    0x2eb04,%eax
   12eac:	01 c2                	add    %eax,%edx
   12eae:	8b 44 24 20          	mov    0x20(%esp),%eax
   12eb2:	89 50 2c             	mov    %edx,0x2c(%eax)
		}
		// 若当前搜索的目录项de的i节点为空，则表示找到一个还未使用的空闲目录项或是添加的新目录项。于是更新目录的修改时间为当前
		// 时间，并从用户数据区复制文件名到该目录项的文件名字段，置含有本目录项的相应高速缓冲块已修改标志。返回该目录项的指针以及
		// 该高速缓冲块的指针，退出。
		if (!de->inode) {
   12eb5:	8b 44 24 04          	mov    0x4(%esp),%eax
   12eb9:	0f b7 00             	movzwl (%eax),%eax
   12ebc:	66 85 c0             	test   %ax,%ax
   12ebf:	0f 85 8b 00 00 00    	jne    12f50 <add_entry+0x21b>
			dir->i_mtime = CURRENT_TIME;
   12ec5:	a1 00 eb 02 00       	mov    0x2eb00,%eax
   12eca:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
   12ed0:	01 d0                	add    %edx,%eax
   12ed2:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   12ed7:	f7 e2                	mul    %edx
   12ed9:	c1 ea 05             	shr    $0x5,%edx
   12edc:	a1 04 eb 02 00       	mov    0x2eb04,%eax
   12ee1:	01 c2                	add    %eax,%edx
   12ee3:	8b 44 24 20          	mov    0x20(%esp),%eax
   12ee7:	89 50 08             	mov    %edx,0x8(%eax)
			for (i = 0; i < NAME_LEN ; i++)
   12eea:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   12ef1:	00 
   12ef2:	eb 3d                	jmp    12f31 <add_entry+0x1fc>
				de->name[i] = (i < namelen) ? get_fs_byte(name + i) : 0;
   12ef4:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12ef8:	3b 44 24 28          	cmp    0x28(%esp),%eax
   12efc:	7d 1a                	jge    12f18 <add_entry+0x1e3>
   12efe:	8b 54 24 0c          	mov    0xc(%esp),%edx
   12f02:	8b 44 24 24          	mov    0x24(%esp),%eax
   12f06:	01 d0                	add    %edx,%eax
   12f08:	83 ec 0c             	sub    $0xc,%esp
   12f0b:	50                   	push   %eax
   12f0c:	e8 61 fa ff ff       	call   12972 <get_fs_byte>
   12f11:	83 c4 10             	add    $0x10,%esp
   12f14:	89 c1                	mov    %eax,%ecx
   12f16:	eb 05                	jmp    12f1d <add_entry+0x1e8>
   12f18:	b9 00 00 00 00       	mov    $0x0,%ecx
   12f1d:	8b 54 24 04          	mov    0x4(%esp),%edx
   12f21:	8b 44 24 0c          	mov    0xc(%esp),%eax
   12f25:	01 d0                	add    %edx,%eax
   12f27:	83 c0 02             	add    $0x2,%eax
   12f2a:	88 08                	mov    %cl,(%eax)
		// 若当前搜索的目录项de的i节点为空，则表示找到一个还未使用的空闲目录项或是添加的新目录项。于是更新目录的修改时间为当前
		// 时间，并从用户数据区复制文件名到该目录项的文件名字段，置含有本目录项的相应高速缓冲块已修改标志。返回该目录项的指针以及
		// 该高速缓冲块的指针，退出。
		if (!de->inode) {
			dir->i_mtime = CURRENT_TIME;
			for (i = 0; i < NAME_LEN ; i++)
   12f2c:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   12f31:	83 7c 24 0c 0d       	cmpl   $0xd,0xc(%esp)
   12f36:	7e bc                	jle    12ef4 <add_entry+0x1bf>
				de->name[i] = (i < namelen) ? get_fs_byte(name + i) : 0;
			bh->b_dirt = 1;
   12f38:	8b 44 24 08          	mov    0x8(%esp),%eax
   12f3c:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
			*res_dir = de;
   12f40:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   12f44:	8b 54 24 04          	mov    0x4(%esp),%edx
   12f48:	89 10                	mov    %edx,(%eax)
			return bh;
   12f4a:	8b 44 24 08          	mov    0x8(%esp),%eax
   12f4e:	eb 0f                	jmp    12f5f <add_entry+0x22a>
		}
		de++;           												// 如果该目录项已经被使用，则继续检测下一个目录项。
   12f50:	83 44 24 04 10       	addl   $0x10,0x4(%esp)
		i++;
   12f55:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
	}
   12f5a:	e9 63 fe ff ff       	jmp    12dc2 <add_entry+0x8d>
	// 本函数执行不到这里。这也许是Linus在写这段代码时，先复制了上面find_entry()函数的代码，而后修改成本函数的。
	brelse(bh);
	return NULL;
}
   12f5f:	83 c4 1c             	add    $0x1c,%esp
   12f62:	c3                   	ret    

00012f63 <follow_link>:

// 查找符号链接的i节点.
// 参数:dir - 目录i节点;inode - 目录项i节点.
// 返回:返回符号链接到文件的i节点指针.出错返回NULL.
static struct m_inode * follow_link(struct m_inode * dir, struct m_inode * inode)
{
   12f63:	83 ec 1c             	sub    $0x1c,%esp
	unsigned short fs;													// 用于临时保存fs段寄存器值.
	struct buffer_head * bh;

	// 首先判断函数参数的有效性.如果没有给出目录i节点,我们就使用进程任务结构中设置的根i节点,并把链接数增1.如果没有给出目录
	// 项i节点,则放回目录i节点后返回NULL.如果指定目录项不是一个符号链接,就直接返回目录项对应的i节点inode.
	if (!dir) {
   12f66:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
   12f6b:	75 22                	jne    12f8f <follow_link+0x2c>
		dir = current->root;
   12f6d:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   12f72:	8b 80 38 03 00 00    	mov    0x338(%eax),%eax
   12f78:	89 44 24 20          	mov    %eax,0x20(%esp)
		dir->i_count++;
   12f7c:	8b 44 24 20          	mov    0x20(%esp),%eax
   12f80:	0f b7 40 34          	movzwl 0x34(%eax),%eax
   12f84:	8d 50 01             	lea    0x1(%eax),%edx
   12f87:	8b 44 24 20          	mov    0x20(%esp),%eax
   12f8b:	66 89 50 34          	mov    %dx,0x34(%eax)
	}
	if (!inode) {
   12f8f:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
   12f94:	75 19                	jne    12faf <follow_link+0x4c>
		iput(dir);
   12f96:	83 ec 0c             	sub    $0xc,%esp
   12f99:	ff 74 24 2c          	pushl  0x2c(%esp)
   12f9d:	e8 fa b6 ff ff       	call   e69c <iput>
   12fa2:	83 c4 10             	add    $0x10,%esp
		return NULL;
   12fa5:	b8 00 00 00 00       	mov    $0x0,%eax
   12faa:	e9 ea 00 00 00       	jmp    13099 <follow_link+0x136>
	}
	if (!S_ISLNK(inode->i_mode)) {
   12faf:	8b 44 24 24          	mov    0x24(%esp),%eax
   12fb3:	0f b7 00             	movzwl (%eax),%eax
   12fb6:	0f b7 c0             	movzwl %ax,%eax
   12fb9:	25 00 f0 00 00       	and    $0xf000,%eax
   12fbe:	3d 00 a0 00 00       	cmp    $0xa000,%eax
   12fc3:	74 18                	je     12fdd <follow_link+0x7a>
		iput(dir);
   12fc5:	83 ec 0c             	sub    $0xc,%esp
   12fc8:	ff 74 24 2c          	pushl  0x2c(%esp)
   12fcc:	e8 cb b6 ff ff       	call   e69c <iput>
   12fd1:	83 c4 10             	add    $0x10,%esp
		return inode;
   12fd4:	8b 44 24 24          	mov    0x24(%esp),%eax
   12fd8:	e9 bc 00 00 00       	jmp    13099 <follow_link+0x136>
	}
	// 然后取fs段寄存器值.fs通常保存着指向任务数据段的选择符0x17.如果fs没有指向用户数据段,或者给出的目录项i节点第1个直接块
	// 块号等于0,或者是读取第1个直接块出错,则放回dir和inode两个i节点并返回NULL退出.否则说明现在fs正指向用户数据段,并且我
	// 们已经成功地读取了符号链接目录项的文件内容,并且文件内容已经在bh指向的缓冲块数据区中.实际上,这个缓冲块数据区中仅包含一
	// 个链接指向的文件路径名字符串.
	__asm__("mov %%fs, %0":"=r" (fs));
   12fdd:	66 8c e0             	mov    %fs,%ax
   12fe0:	66 89 44 24 0e       	mov    %ax,0xe(%esp)
	if (fs != 0x17 || !inode->i_zone[0] ||
   12fe5:	66 83 7c 24 0e 17    	cmpw   $0x17,0xe(%esp)
   12feb:	75 3b                	jne    13028 <follow_link+0xc5>
   12fed:	8b 44 24 24          	mov    0x24(%esp),%eax
   12ff1:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   12ff5:	66 85 c0             	test   %ax,%ax
   12ff8:	74 2e                	je     13028 <follow_link+0xc5>
	   !(bh = bread(inode->i_dev, inode->i_zone[0]))) {
   12ffa:	8b 44 24 24          	mov    0x24(%esp),%eax
   12ffe:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   13002:	0f b7 d0             	movzwl %ax,%edx
   13005:	8b 44 24 24          	mov    0x24(%esp),%eax
   13009:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   1300d:	0f b7 c0             	movzwl %ax,%eax
	// 然后取fs段寄存器值.fs通常保存着指向任务数据段的选择符0x17.如果fs没有指向用户数据段,或者给出的目录项i节点第1个直接块
	// 块号等于0,或者是读取第1个直接块出错,则放回dir和inode两个i节点并返回NULL退出.否则说明现在fs正指向用户数据段,并且我
	// 们已经成功地读取了符号链接目录项的文件内容,并且文件内容已经在bh指向的缓冲块数据区中.实际上,这个缓冲块数据区中仅包含一
	// 个链接指向的文件路径名字符串.
	__asm__("mov %%fs, %0":"=r" (fs));
	if (fs != 0x17 || !inode->i_zone[0] ||
   13010:	83 ec 08             	sub    $0x8,%esp
   13013:	52                   	push   %edx
   13014:	50                   	push   %eax
   13015:	e8 79 c6 ff ff       	call   f693 <bread>
   1301a:	83 c4 10             	add    $0x10,%esp
   1301d:	89 44 24 08          	mov    %eax,0x8(%esp)
   13021:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   13026:	75 25                	jne    1304d <follow_link+0xea>
	   !(bh = bread(inode->i_dev, inode->i_zone[0]))) {
		iput(dir);
   13028:	83 ec 0c             	sub    $0xc,%esp
   1302b:	ff 74 24 2c          	pushl  0x2c(%esp)
   1302f:	e8 68 b6 ff ff       	call   e69c <iput>
   13034:	83 c4 10             	add    $0x10,%esp
		iput(inode);
   13037:	83 ec 0c             	sub    $0xc,%esp
   1303a:	ff 74 24 30          	pushl  0x30(%esp)
   1303e:	e8 59 b6 ff ff       	call   e69c <iput>
   13043:	83 c4 10             	add    $0x10,%esp
		return NULL;
   13046:	b8 00 00 00 00       	mov    $0x0,%eax
   1304b:	eb 4c                	jmp    13099 <follow_link+0x136>
	}
	// 此时我们已经不需要符号链接目录项的i节点了,于是把它放回.现在遇到一个问题,那就是内核函数处理的用户数据都是存放在用户数据
	// 空间中的,并使用了fs段寄存器来从用户空间传递数据到内核空间中.而这里需要处理的数据却在内核空间中.因此为了正确地处理位于
	// 内核中的用户数据,我们需要让fs段寄存器临时指向内核空间,即让fs=0x10.并在调用函数处理完后再恢复原fs的值.最后释放相应缓冲
	// 块,并返回_namei()解析得到符号链接指向的文件i节点.
	iput(inode);
   1304d:	83 ec 0c             	sub    $0xc,%esp
   13050:	ff 74 24 30          	pushl  0x30(%esp)
   13054:	e8 43 b6 ff ff       	call   e69c <iput>
   13059:	83 c4 10             	add    $0x10,%esp
	__asm__("mov %0, %%fs"::"r" ((unsigned short) 0x10));
   1305c:	b8 10 00 00 00       	mov    $0x10,%eax
   13061:	8e e0                	mov    %eax,%fs
	inode = _namei(bh->b_data,dir,0);
   13063:	8b 44 24 08          	mov    0x8(%esp),%eax
   13067:	8b 00                	mov    (%eax),%eax
   13069:	83 ec 04             	sub    $0x4,%esp
   1306c:	6a 00                	push   $0x0
   1306e:	ff 74 24 28          	pushl  0x28(%esp)
   13072:	50                   	push   %eax
   13073:	e8 86 02 00 00       	call   132fe <_namei>
   13078:	83 c4 10             	add    $0x10,%esp
   1307b:	89 44 24 24          	mov    %eax,0x24(%esp)
	__asm__("mov %0, %%fs"::"r" (fs));
   1307f:	0f b7 44 24 0e       	movzwl 0xe(%esp),%eax
   13084:	8e e0                	mov    %eax,%fs
	brelse(bh);
   13086:	83 ec 0c             	sub    $0xc,%esp
   13089:	ff 74 24 14          	pushl  0x14(%esp)
   1308d:	e8 ab c5 ff ff       	call   f63d <brelse>
   13092:	83 c4 10             	add    $0x10,%esp
	return inode;
   13095:	8b 44 24 24          	mov    0x24(%esp),%eax
}
   13099:	83 c4 1c             	add    $0x1c,%esp
   1309c:	c3                   	ret    

0001309d <get_dir>:
 */
// 从指定目录开始搜寻指定路径名的目录(或文件名)的i节点.
// 参数:pathname - 路径名;inode - 指定起始目录的i节点.
// 返回:目录或文件的i节点指针.失败时返回NULL.
static struct m_inode * get_dir(const char * pathname, struct m_inode * inode)
{
   1309d:	83 ec 2c             	sub    $0x2c,%esp
	int namelen, inr;
	struct dir_entry * de;
	struct m_inode * dir;

	// 首先判断参数有效性.如果给出的指定目录的i节点指针inode为空,则使用当前进程的工作目录i节点.
	if (!inode) {
   130a0:	8b 44 24 34          	mov    0x34(%esp),%eax
   130a4:	85 c0                	test   %eax,%eax
   130a6:	75 1e                	jne    130c6 <get_dir+0x29>
		inode = current->pwd;									// 进程的当前工作目录i节点.
   130a8:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   130ad:	8b 80 34 03 00 00    	mov    0x334(%eax),%eax
   130b3:	89 44 24 34          	mov    %eax,0x34(%esp)
		inode->i_count++;
   130b7:	8b 44 24 34          	mov    0x34(%esp),%eax
   130bb:	0f b7 50 34          	movzwl 0x34(%eax),%edx
   130bf:	83 c2 01             	add    $0x1,%edx
   130c2:	66 89 50 34          	mov    %dx,0x34(%eax)
	}
	// 如果用户指定路径名的第1个字符是'/',则说明路径名是绝对路径名.则应该从当前进程任务结构中设置的根(或伪根)i节点开始操作.
	// 于是我们需要先放回参数指定的或者设定的目录i节点,并取得进程使用的根i节点.然后把该i节点的引用计数加1,
	// 并删除路径名的第1个字符'/'.这样就可以保证进程只能以其设定的根i节点作为搜索的起点.
	if ((c = get_fs_byte(pathname)) == '/') {
   130c6:	ff 74 24 30          	pushl  0x30(%esp)
   130ca:	e8 a3 f8 ff ff       	call   12972 <get_fs_byte>
   130cf:	83 c4 04             	add    $0x4,%esp
   130d2:	88 44 24 1b          	mov    %al,0x1b(%esp)
   130d6:	80 7c 24 1b 2f       	cmpb   $0x2f,0x1b(%esp)
   130db:	75 33                	jne    13110 <get_dir+0x73>
		iput(inode);											// 放回原i节点.
   130dd:	8b 44 24 34          	mov    0x34(%esp),%eax
   130e1:	83 ec 0c             	sub    $0xc,%esp
   130e4:	50                   	push   %eax
   130e5:	e8 b2 b5 ff ff       	call   e69c <iput>
   130ea:	83 c4 10             	add    $0x10,%esp
		inode = current->root;									// 为进程指定的根i节点.
   130ed:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   130f2:	8b 80 38 03 00 00    	mov    0x338(%eax),%eax
   130f8:	89 44 24 34          	mov    %eax,0x34(%esp)
		pathname++;
   130fc:	83 44 24 30 01       	addl   $0x1,0x30(%esp)
		inode->i_count++;
   13101:	8b 44 24 34          	mov    0x34(%esp),%eax
   13105:	0f b7 50 34          	movzwl 0x34(%eax),%edx
   13109:	83 c2 01             	add    $0x1,%edx
   1310c:	66 89 50 34          	mov    %dx,0x34(%eax)
	}
	// 然后针对路径名中的各个目录名部分和文件名进行循环处理。在循环处理过程中，我们先要对当前正在处理的目录名部分的i节点进行有效性判断，并且把
	// 变量thisname指向当前正在处理的目录名部分。如果该i节点表明当前处理的目录名部分不是目录类型，或者没有可进入该目录的访问许可，则放回该i节点
	// 并返回NULL退出。当然在刚进入循环时，当前目录的ｉ节点inode就是进程根i节点或者是当前工作目录的i节点，或者是参数指定的某个搜索起始目录的i节点。
	while (1) {
		thisname = pathname;
   13110:	8b 44 24 30          	mov    0x30(%esp),%eax
   13114:	89 44 24 14          	mov    %eax,0x14(%esp)
		if (!S_ISDIR(inode->i_mode) || !permission(inode, MAY_EXEC)) {
   13118:	8b 44 24 34          	mov    0x34(%esp),%eax
   1311c:	0f b7 00             	movzwl (%eax),%eax
   1311f:	0f b7 c0             	movzwl %ax,%eax
   13122:	25 00 f0 00 00       	and    $0xf000,%eax
   13127:	3d 00 40 00 00       	cmp    $0x4000,%eax
   1312c:	75 16                	jne    13144 <get_dir+0xa7>
   1312e:	8b 44 24 34          	mov    0x34(%esp),%eax
   13132:	83 ec 08             	sub    $0x8,%esp
   13135:	6a 01                	push   $0x1
   13137:	50                   	push   %eax
   13138:	e8 86 f8 ff ff       	call   129c3 <permission>
   1313d:	83 c4 10             	add    $0x10,%esp
   13140:	85 c0                	test   %eax,%eax
   13142:	75 1a                	jne    1315e <get_dir+0xc1>
			iput(inode);
   13144:	8b 44 24 34          	mov    0x34(%esp),%eax
   13148:	83 ec 0c             	sub    $0xc,%esp
   1314b:	50                   	push   %eax
   1314c:	e8 4b b5 ff ff       	call   e69c <iput>
   13151:	83 c4 10             	add    $0x10,%esp
			return NULL;
   13154:	b8 00 00 00 00       	mov    $0x0,%eax
   13159:	e9 12 01 00 00       	jmp    13270 <get_dir+0x1d3>
		// 每次循环我们处理路径名中一个目录名(或文件名)部分.因此在每次循环中我们都要从路径名字符串中分离出一个目录名(或文件名).方法是从当前路径名指针
		// pathname开始处搜索检测字符,直到字符是一个结尾符(NULL)或者是一个'/'字符.此时变量namelen正好是当前处理目录名部分的长度,而变量thisname正指向
		// 该目录名部分的开始处.此时如果字符是结尾符NULL,则表明已经搜索到路径名末尾,并已到达最后指定目录名或文件名,则返回该i节点指针退出.
		// 注意!如果路径名中最后一个名称也是一个目录名,但其后面没有加上'/'字符,则函数不会返回该最后目录名的i节点!例如:对于路径/usr/src/linux,该函数将
		// 只返回src/目录名的i节点.
		for(namelen = 0; (c = get_fs_byte(pathname++)) && (c != '/'); namelen++)
   1315e:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   13165:	00 
   13166:	eb 05                	jmp    1316d <get_dir+0xd0>
   13168:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   1316d:	8b 44 24 30          	mov    0x30(%esp),%eax
   13171:	8d 50 01             	lea    0x1(%eax),%edx
   13174:	89 54 24 30          	mov    %edx,0x30(%esp)
   13178:	83 ec 0c             	sub    $0xc,%esp
   1317b:	50                   	push   %eax
   1317c:	e8 f1 f7 ff ff       	call   12972 <get_fs_byte>
   13181:	83 c4 10             	add    $0x10,%esp
   13184:	88 44 24 1b          	mov    %al,0x1b(%esp)
   13188:	80 7c 24 1b 00       	cmpb   $0x0,0x1b(%esp)
   1318d:	74 07                	je     13196 <get_dir+0xf9>
   1318f:	80 7c 24 1b 2f       	cmpb   $0x2f,0x1b(%esp)
   13194:	75 d2                	jne    13168 <get_dir+0xcb>
			/* nothing */ ;
		if (!c)
   13196:	80 7c 24 1b 00       	cmpb   $0x0,0x1b(%esp)
   1319b:	75 09                	jne    131a6 <get_dir+0x109>
			return inode;
   1319d:	8b 44 24 34          	mov    0x34(%esp),%eax
   131a1:	e9 ca 00 00 00       	jmp    13270 <get_dir+0x1d3>
		// 在得到当前目录名部分(或文件名)后,我们调用查找目录项函数find_entry()在当前处理的目录中寻找指定名称的目录项.如果没有找到,则放回该i节点,并返回
		// NULL退出.然后在找到的目录项中取出其i节点号inr和设备号idev,释放包含该目录项的高速缓冲块并放回该i节点.然后取节点号inr的i节点inode,并以该目录
		// 项为当前目录继续循环处理路径名中的下一目录名部分(或文件名).如果当前处理的目录项是一个符号链接名,则使用follow_link()就可以得到其指向的目录项名i节点.
		if (!(bh = find_entry(&inode, thisname, namelen, &de))) {
   131a6:	8d 44 24 04          	lea    0x4(%esp),%eax
   131aa:	50                   	push   %eax
   131ab:	ff 74 24 20          	pushl  0x20(%esp)
   131af:	ff 74 24 1c          	pushl  0x1c(%esp)
   131b3:	8d 44 24 40          	lea    0x40(%esp),%eax
   131b7:	50                   	push   %eax
   131b8:	e8 3a f9 ff ff       	call   12af7 <find_entry>
   131bd:	83 c4 10             	add    $0x10,%esp
   131c0:	89 44 24 10          	mov    %eax,0x10(%esp)
   131c4:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   131c9:	75 1a                	jne    131e5 <get_dir+0x148>
			iput(inode);
   131cb:	8b 44 24 34          	mov    0x34(%esp),%eax
   131cf:	83 ec 0c             	sub    $0xc,%esp
   131d2:	50                   	push   %eax
   131d3:	e8 c4 b4 ff ff       	call   e69c <iput>
   131d8:	83 c4 10             	add    $0x10,%esp
			return NULL;
   131db:	b8 00 00 00 00       	mov    $0x0,%eax
   131e0:	e9 8b 00 00 00       	jmp    13270 <get_dir+0x1d3>
		}
		inr = de->inode;										// 当前目录名部分的i节点号.
   131e5:	8b 44 24 04          	mov    0x4(%esp),%eax
   131e9:	0f b7 00             	movzwl (%eax),%eax
   131ec:	0f b7 c0             	movzwl %ax,%eax
   131ef:	89 44 24 0c          	mov    %eax,0xc(%esp)
		brelse(bh);
   131f3:	83 ec 0c             	sub    $0xc,%esp
   131f6:	ff 74 24 1c          	pushl  0x1c(%esp)
   131fa:	e8 3e c4 ff ff       	call   f63d <brelse>
   131ff:	83 c4 10             	add    $0x10,%esp
		dir = inode;
   13202:	8b 44 24 34          	mov    0x34(%esp),%eax
   13206:	89 44 24 08          	mov    %eax,0x8(%esp)
		if (!(inode = iget(dir->i_dev, inr))) {					// 取i节点内容.
   1320a:	8b 44 24 08          	mov    0x8(%esp),%eax
   1320e:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   13212:	0f b7 c0             	movzwl %ax,%eax
   13215:	83 ec 08             	sub    $0x8,%esp
   13218:	ff 74 24 14          	pushl  0x14(%esp)
   1321c:	50                   	push   %eax
   1321d:	e8 0c b8 ff ff       	call   ea2e <iget>
   13222:	83 c4 10             	add    $0x10,%esp
   13225:	89 44 24 34          	mov    %eax,0x34(%esp)
   13229:	8b 44 24 34          	mov    0x34(%esp),%eax
   1322d:	85 c0                	test   %eax,%eax
   1322f:	75 16                	jne    13247 <get_dir+0x1aa>
			iput(dir);
   13231:	83 ec 0c             	sub    $0xc,%esp
   13234:	ff 74 24 14          	pushl  0x14(%esp)
   13238:	e8 5f b4 ff ff       	call   e69c <iput>
   1323d:	83 c4 10             	add    $0x10,%esp
			return NULL;
   13240:	b8 00 00 00 00       	mov    $0x0,%eax
   13245:	eb 29                	jmp    13270 <get_dir+0x1d3>
		}
		if (!(inode = follow_link(dir, inode)))
   13247:	8b 44 24 34          	mov    0x34(%esp),%eax
   1324b:	83 ec 08             	sub    $0x8,%esp
   1324e:	50                   	push   %eax
   1324f:	ff 74 24 14          	pushl  0x14(%esp)
   13253:	e8 0b fd ff ff       	call   12f63 <follow_link>
   13258:	83 c4 10             	add    $0x10,%esp
   1325b:	89 44 24 34          	mov    %eax,0x34(%esp)
   1325f:	8b 44 24 34          	mov    0x34(%esp),%eax
   13263:	85 c0                	test   %eax,%eax
   13265:	0f 85 a5 fe ff ff    	jne    13110 <get_dir+0x73>
			return NULL;
   1326b:	b8 00 00 00 00       	mov    $0x0,%eax
        }
}
   13270:	83 c4 2c             	add    $0x2c,%esp
   13273:	c3                   	ret    

00013274 <dir_namei>:
// base - 搜索起始目录的i节点.
// 返回:指定目录名最顶层的i节点指针和最顶层目录名称及长度.出错时返回NULL.
// 注意!!这里"最顶层目录"是指路径名中最靠近末端的目录.
static struct m_inode * dir_namei(const char * pathname,
	int * namelen, const char ** name, struct m_inode * base)
{
   13274:	83 ec 1c             	sub    $0x1c,%esp
	struct m_inode * dir;

	// 首先取得指定路径名最顶层目录的i节点.然后对路径名pathname进行搜索检测,查出最后一个'/'字符后面的名字字符串,计算其长度,并且
	// 返回最顶层目录的i节点指针.注意!如果路径名最后一个字符是斜杠字符'/',那么返回的目录名为空,并且长度为0.但返回的i节点指针仍然
	// 指向最后一个'/'字符前目录名的i节点.
	if (!(dir = get_dir(pathname, base)))					// base是指定的起始目录i节点.
   13277:	83 ec 08             	sub    $0x8,%esp
   1327a:	ff 74 24 34          	pushl  0x34(%esp)
   1327e:	ff 74 24 2c          	pushl  0x2c(%esp)
   13282:	e8 16 fe ff ff       	call   1309d <get_dir>
   13287:	83 c4 10             	add    $0x10,%esp
   1328a:	89 44 24 08          	mov    %eax,0x8(%esp)
   1328e:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   13293:	75 07                	jne    1329c <dir_namei+0x28>
		return NULL;
   13295:	b8 00 00 00 00       	mov    $0x0,%eax
   1329a:	eb 5e                	jmp    132fa <dir_namei+0x86>
	basename = pathname;
   1329c:	8b 44 24 20          	mov    0x20(%esp),%eax
   132a0:	89 44 24 0c          	mov    %eax,0xc(%esp)
	while (c = get_fs_byte(pathname++))
   132a4:	eb 0f                	jmp    132b5 <dir_namei+0x41>
		if (c == '/')
   132a6:	80 7c 24 07 2f       	cmpb   $0x2f,0x7(%esp)
   132ab:	75 08                	jne    132b5 <dir_namei+0x41>
			basename = pathname;
   132ad:	8b 44 24 20          	mov    0x20(%esp),%eax
   132b1:	89 44 24 0c          	mov    %eax,0xc(%esp)
	// 返回最顶层目录的i节点指针.注意!如果路径名最后一个字符是斜杠字符'/',那么返回的目录名为空,并且长度为0.但返回的i节点指针仍然
	// 指向最后一个'/'字符前目录名的i节点.
	if (!(dir = get_dir(pathname, base)))					// base是指定的起始目录i节点.
		return NULL;
	basename = pathname;
	while (c = get_fs_byte(pathname++))
   132b5:	8b 44 24 20          	mov    0x20(%esp),%eax
   132b9:	8d 50 01             	lea    0x1(%eax),%edx
   132bc:	89 54 24 20          	mov    %edx,0x20(%esp)
   132c0:	83 ec 0c             	sub    $0xc,%esp
   132c3:	50                   	push   %eax
   132c4:	e8 a9 f6 ff ff       	call   12972 <get_fs_byte>
   132c9:	83 c4 10             	add    $0x10,%esp
   132cc:	88 44 24 07          	mov    %al,0x7(%esp)
   132d0:	80 7c 24 07 00       	cmpb   $0x0,0x7(%esp)
   132d5:	75 cf                	jne    132a6 <dir_namei+0x32>
		if (c == '/')
			basename = pathname;
	*namelen = pathname - basename - 1;
   132d7:	8b 54 24 20          	mov    0x20(%esp),%edx
   132db:	8b 44 24 0c          	mov    0xc(%esp),%eax
   132df:	29 c2                	sub    %eax,%edx
   132e1:	89 d0                	mov    %edx,%eax
   132e3:	8d 50 ff             	lea    -0x1(%eax),%edx
   132e6:	8b 44 24 24          	mov    0x24(%esp),%eax
   132ea:	89 10                	mov    %edx,(%eax)
	*name = basename;
   132ec:	8b 44 24 28          	mov    0x28(%esp),%eax
   132f0:	8b 54 24 0c          	mov    0xc(%esp),%edx
   132f4:	89 10                	mov    %edx,(%eax)
	return dir;
   132f6:	8b 44 24 08          	mov    0x8(%esp),%eax
}
   132fa:	83 c4 1c             	add    $0x1c,%esp
   132fd:	c3                   	ret    

000132fe <_namei>:

// 取指定路径名的i节点内部函数.
// 参数:pathname - 路径名;base - 搜索起点目录i节点;follow_links - 是否跟随符号链接的标志,1 - 需要,0 不需要.
struct m_inode * _namei(const char * pathname, struct m_inode * base,
	int follow_links)
{
   132fe:	83 ec 2c             	sub    $0x2c,%esp
	struct buffer_head * bh;
	struct dir_entry * de;

	// 首先查找指定路径名中最顶层目录的目录名并得到其i节点.若不存在,则返回NULL退出.如果返回的最顶层名字的长度是0,则表示该路径名以一个目录名为
	// 最后一项.因此说明我们已经找到对应目录的i节点,可以直接返回该i节点退出.
	if (!(base = dir_namei(pathname, &namelen, &basename, base)))
   13301:	8b 44 24 34          	mov    0x34(%esp),%eax
   13305:	50                   	push   %eax
   13306:	8d 44 24 14          	lea    0x14(%esp),%eax
   1330a:	50                   	push   %eax
   1330b:	8d 44 24 14          	lea    0x14(%esp),%eax
   1330f:	50                   	push   %eax
   13310:	ff 74 24 3c          	pushl  0x3c(%esp)
   13314:	e8 5b ff ff ff       	call   13274 <dir_namei>
   13319:	83 c4 10             	add    $0x10,%esp
   1331c:	89 44 24 34          	mov    %eax,0x34(%esp)
   13320:	8b 44 24 34          	mov    0x34(%esp),%eax
   13324:	85 c0                	test   %eax,%eax
   13326:	75 0a                	jne    13332 <_namei+0x34>
		return NULL;
   13328:	b8 00 00 00 00       	mov    $0x0,%eax
   1332d:	e9 0e 01 00 00       	jmp    13440 <_namei+0x142>
	if (!namelen)										/* special case: '/usr/' etc */
   13332:	8b 44 24 0c          	mov    0xc(%esp),%eax
   13336:	85 c0                	test   %eax,%eax
   13338:	75 09                	jne    13343 <_namei+0x45>
		return base;									/* 对应于'/usr/'等情况 */
   1333a:	8b 44 24 34          	mov    0x34(%esp),%eax
   1333e:	e9 fd 00 00 00       	jmp    13440 <_namei+0x142>
	// 然后在返回的顶层目录中寻找指定文件名目录项的i节点.注意!因为如果最后也是一个目录名,但其后没有加'/',则不会返回该最后目录的i节点!例如:/usr/src/linux,
	// 将只返回src/目录名的i节点.因为函数dir_namei()将不以'/'结束的最后一个名字当作一个文件名来看待,因此这里需要单独对这种情况使用寻找目录项i节点函数
	// find_entry()进行处理.此时de中含有寻找到的目录项指针,而base是包含该目录项的目录的i节点指针.
	bh = find_entry(&base, basename, namelen, &de);
   13343:	8b 54 24 0c          	mov    0xc(%esp),%edx
   13347:	8b 44 24 10          	mov    0x10(%esp),%eax
   1334b:	8d 4c 24 08          	lea    0x8(%esp),%ecx
   1334f:	51                   	push   %ecx
   13350:	52                   	push   %edx
   13351:	50                   	push   %eax
   13352:	8d 44 24 40          	lea    0x40(%esp),%eax
   13356:	50                   	push   %eax
   13357:	e8 9b f7 ff ff       	call   12af7 <find_entry>
   1335c:	83 c4 10             	add    $0x10,%esp
   1335f:	89 44 24 18          	mov    %eax,0x18(%esp)
	if (!bh) {
   13363:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   13368:	75 1a                	jne    13384 <_namei+0x86>
		iput(base);
   1336a:	8b 44 24 34          	mov    0x34(%esp),%eax
   1336e:	83 ec 0c             	sub    $0xc,%esp
   13371:	50                   	push   %eax
   13372:	e8 25 b3 ff ff       	call   e69c <iput>
   13377:	83 c4 10             	add    $0x10,%esp
		return NULL;
   1337a:	b8 00 00 00 00       	mov    $0x0,%eax
   1337f:	e9 bc 00 00 00       	jmp    13440 <_namei+0x142>
	}
	// 接着取该目录项的i节点号,并释放包含该目录项的高速缓冲块并放回目录i节点.然后取对应节点号的i节点,修改其被访问时间为当前时间,并置已修改标志.最后返回
	// 该i节点指针inode.如果当前处理的目录项是一个符号链接名,则使用follow_link()得到其指向的目录项名的i节点.
	inr = de->inode;
   13384:	8b 44 24 08          	mov    0x8(%esp),%eax
   13388:	0f b7 00             	movzwl (%eax),%eax
   1338b:	0f b7 c0             	movzwl %ax,%eax
   1338e:	89 44 24 14          	mov    %eax,0x14(%esp)
	brelse(bh);
   13392:	83 ec 0c             	sub    $0xc,%esp
   13395:	ff 74 24 24          	pushl  0x24(%esp)
   13399:	e8 9f c2 ff ff       	call   f63d <brelse>
   1339e:	83 c4 10             	add    $0x10,%esp
	if (!(inode = iget(base->i_dev, inr))) {
   133a1:	8b 44 24 34          	mov    0x34(%esp),%eax
   133a5:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   133a9:	0f b7 c0             	movzwl %ax,%eax
   133ac:	83 ec 08             	sub    $0x8,%esp
   133af:	ff 74 24 1c          	pushl  0x1c(%esp)
   133b3:	50                   	push   %eax
   133b4:	e8 75 b6 ff ff       	call   ea2e <iget>
   133b9:	83 c4 10             	add    $0x10,%esp
   133bc:	89 44 24 1c          	mov    %eax,0x1c(%esp)
   133c0:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   133c5:	75 17                	jne    133de <_namei+0xe0>
		iput(base);
   133c7:	8b 44 24 34          	mov    0x34(%esp),%eax
   133cb:	83 ec 0c             	sub    $0xc,%esp
   133ce:	50                   	push   %eax
   133cf:	e8 c8 b2 ff ff       	call   e69c <iput>
   133d4:	83 c4 10             	add    $0x10,%esp
		return NULL;
   133d7:	b8 00 00 00 00       	mov    $0x0,%eax
   133dc:	eb 62                	jmp    13440 <_namei+0x142>
	}
	if (follow_links)
   133de:	83 7c 24 38 00       	cmpl   $0x0,0x38(%esp)
   133e3:	74 1a                	je     133ff <_namei+0x101>
		inode = follow_link(base, inode);
   133e5:	8b 44 24 34          	mov    0x34(%esp),%eax
   133e9:	83 ec 08             	sub    $0x8,%esp
   133ec:	ff 74 24 24          	pushl  0x24(%esp)
   133f0:	50                   	push   %eax
   133f1:	e8 6d fb ff ff       	call   12f63 <follow_link>
   133f6:	83 c4 10             	add    $0x10,%esp
   133f9:	89 44 24 1c          	mov    %eax,0x1c(%esp)
   133fd:	eb 10                	jmp    1340f <_namei+0x111>
	else
		iput(base);
   133ff:	8b 44 24 34          	mov    0x34(%esp),%eax
   13403:	83 ec 0c             	sub    $0xc,%esp
   13406:	50                   	push   %eax
   13407:	e8 90 b2 ff ff       	call   e69c <iput>
   1340c:	83 c4 10             	add    $0x10,%esp
	inode->i_atime = CURRENT_TIME;
   1340f:	a1 00 eb 02 00       	mov    0x2eb00,%eax
   13414:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
   1341a:	01 d0                	add    %edx,%eax
   1341c:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   13421:	f7 e2                	mul    %edx
   13423:	c1 ea 05             	shr    $0x5,%edx
   13426:	a1 04 eb 02 00       	mov    0x2eb04,%eax
   1342b:	01 c2                	add    %eax,%edx
   1342d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   13431:	89 50 28             	mov    %edx,0x28(%eax)
	inode->i_dirt = 1;
   13434:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   13438:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	return inode;
   1343c:	8b 44 24 1c          	mov    0x1c(%esp),%eax
}
   13440:	83 c4 2c             	add    $0x2c,%esp
   13443:	c3                   	ret    

00013444 <lnamei>:

// 取指定路径名的i节点，不跟随符号链接。
// 参数：pathname - 路径名。
// 返回：对应的i节点。
struct m_inode * lnamei(const char * pathname)
{
   13444:	83 ec 0c             	sub    $0xc,%esp
	return _namei(pathname, NULL, 0);
   13447:	83 ec 04             	sub    $0x4,%esp
   1344a:	6a 00                	push   $0x0
   1344c:	6a 00                	push   $0x0
   1344e:	ff 74 24 1c          	pushl  0x1c(%esp)
   13452:	e8 a7 fe ff ff       	call   132fe <_namei>
   13457:	83 c4 10             	add    $0x10,%esp
}
   1345a:	83 c4 0c             	add    $0xc,%esp
   1345d:	c3                   	ret    

0001345e <namei>:
 */
// 取指定路径名的i节点,跟随符号链接.
// 参数:pathname - 路径名.
// 返回:对应的i节点.
struct m_inode * namei(const char * pathname)
{
   1345e:	83 ec 0c             	sub    $0xc,%esp
	return _namei(pathname, NULL, 1);
   13461:	83 ec 04             	sub    $0x4,%esp
   13464:	6a 01                	push   $0x1
   13466:	6a 00                	push   $0x0
   13468:	ff 74 24 1c          	pushl  0x1c(%esp)
   1346c:	e8 8d fe ff ff       	call   132fe <_namei>
   13471:	83 c4 10             	add    $0x10,%esp
}
   13474:	83 c4 0c             	add    $0xc,%esp
   13477:	c3                   	ret    

00013478 <open_namei>:
// 执行)等等.对于新创建的文件,这些属性只应用于将来对文件的访问,创建了只读文件的打开调用也将返回一个读写的文件句柄.如果调用
// 操作成功,则返回文件句柄(文件描述符),否则返回出错码.参见sys/stat.h,fcntl.h.
// 返回:成功返回0,否则返回出错码;res_inode - 返回对应文件路径名的i节点指针.
int open_namei(const char * pathname, int flag, int mode,
	struct m_inode ** res_inode)
{
   13478:	53                   	push   %ebx
   13479:	83 ec 28             	sub    $0x28,%esp
	struct buffer_head * bh;
	struct dir_entry * de;

	// 首先对函数参数进行合理的处理.如果文件访问模式标志是只读(O),但是文件截零标志O_TRUNC却置位了,则在文件打开标志中添加只写标志
	// O_WRONLY.这样做的原因是由于截零标志O_TRUNC必须在文件可写情况下有效.
	if ((flag & O_TRUNC) && !(flag & O_ACCMODE))
   1347c:	8b 44 24 34          	mov    0x34(%esp),%eax
   13480:	25 00 02 00 00       	and    $0x200,%eax
   13485:	85 c0                	test   %eax,%eax
   13487:	74 10                	je     13499 <open_namei+0x21>
   13489:	8b 44 24 34          	mov    0x34(%esp),%eax
   1348d:	83 e0 03             	and    $0x3,%eax
   13490:	85 c0                	test   %eax,%eax
   13492:	75 05                	jne    13499 <open_namei+0x21>
		flag |= O_WRONLY;
   13494:	83 4c 24 34 01       	orl    $0x1,0x34(%esp)
	// 使用当前进程的文件访问许可屏蔽码,屏蔽掉给定模式中的相应位,并添上普通文件标志I_REGULAR.
	// 该标志将用于打开的文件不存在而需要创建文件时,作为新文件的默认属性
	mode &= 0777 & ~current->umask;
   13499:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1349e:	0f b7 80 30 03 00 00 	movzwl 0x330(%eax),%eax
   134a5:	0f b7 c0             	movzwl %ax,%eax
   134a8:	f7 d0                	not    %eax
   134aa:	25 ff 01 00 00       	and    $0x1ff,%eax
   134af:	21 44 24 38          	and    %eax,0x38(%esp)
	mode |= I_REGULAR;													// 常规文件标志.见参见include/const.h文件.
   134b3:	81 4c 24 38 00 80 00 	orl    $0x8000,0x38(%esp)
   134ba:	00 
	// 然后根据指定的路径名寻找到对应的i节点,以及最顶端目录名及其长度.此时如果最顶端目录名长度为0(例如'/usr/'这种路径名的情况),那么
	// 若操作不是读写,创建和文件长度截0,则表示是在打开一个目录名文件操作.于是直接返回该目录的i节点并返回0退出.否则说明进程操作非法,于是
	// 放回该i节点,返回出错码.
	if (!(dir = dir_namei(pathname, &namelen, &basename, NULL)))
   134bb:	6a 00                	push   $0x0
   134bd:	8d 44 24 10          	lea    0x10(%esp),%eax
   134c1:	50                   	push   %eax
   134c2:	8d 44 24 10          	lea    0x10(%esp),%eax
   134c6:	50                   	push   %eax
   134c7:	ff 74 24 3c          	pushl  0x3c(%esp)
   134cb:	e8 a4 fd ff ff       	call   13274 <dir_namei>
   134d0:	83 c4 10             	add    $0x10,%esp
   134d3:	89 44 24 04          	mov    %eax,0x4(%esp)
   134d7:	8b 44 24 04          	mov    0x4(%esp),%eax
   134db:	85 c0                	test   %eax,%eax
   134dd:	75 0a                	jne    134e9 <open_namei+0x71>
		return -ENOENT;
   134df:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   134e4:	e9 08 03 00 00       	jmp    137f1 <open_namei+0x379>
	// 文件名字为空，则返回
	if (!namelen) {														/* special case: '/usr/' etc */
   134e9:	8b 44 24 08          	mov    0x8(%esp),%eax
   134ed:	85 c0                	test   %eax,%eax
   134ef:	75 3b                	jne    1352c <open_namei+0xb4>
		if (!(flag & (O_ACCMODE | O_CREAT | O_TRUNC))) {
   134f1:	8b 44 24 34          	mov    0x34(%esp),%eax
   134f5:	25 43 02 00 00       	and    $0x243,%eax
   134fa:	85 c0                	test   %eax,%eax
   134fc:	75 14                	jne    13512 <open_namei+0x9a>
			*res_inode = dir;
   134fe:	8b 54 24 04          	mov    0x4(%esp),%edx
   13502:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   13506:	89 10                	mov    %edx,(%eax)
			return 0;
   13508:	b8 00 00 00 00       	mov    $0x0,%eax
   1350d:	e9 df 02 00 00       	jmp    137f1 <open_namei+0x379>
		}
		iput(dir);
   13512:	8b 44 24 04          	mov    0x4(%esp),%eax
   13516:	83 ec 0c             	sub    $0xc,%esp
   13519:	50                   	push   %eax
   1351a:	e8 7d b1 ff ff       	call   e69c <iput>
   1351f:	83 c4 10             	add    $0x10,%esp
		return -EISDIR;
   13522:	b8 eb ff ff ff       	mov    $0xffffffeb,%eax
   13527:	e9 c5 02 00 00       	jmp    137f1 <open_namei+0x379>
	}
	// 接着根据上面得到的最顶层目录名的i节点dir,在其中查找取得路径名字符串中最后的文件名对应的目录项结构de,并同时得到该目录项所在的高速缓冲
	// 区指针.如果该高速缓冲指针为NULL,则表示没有找到对应文件名的目录项,因此只可能是创建文件操作.此时如果不是创建文件,则放回该目录的i节点,返回
	// 出错号退出.如果用户在该目录没有写的权力,则放回该目录的i节点,返回出错号退出.
	bh = find_entry(&dir, basename, namelen, &de);
   1352c:	8b 54 24 08          	mov    0x8(%esp),%edx
   13530:	8b 44 24 0c          	mov    0xc(%esp),%eax
   13534:	89 e1                	mov    %esp,%ecx
   13536:	51                   	push   %ecx
   13537:	52                   	push   %edx
   13538:	50                   	push   %eax
   13539:	8d 44 24 10          	lea    0x10(%esp),%eax
   1353d:	50                   	push   %eax
   1353e:	e8 b4 f5 ff ff       	call   12af7 <find_entry>
   13543:	83 c4 10             	add    $0x10,%esp
   13546:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (!bh) {
   1354a:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   1354f:	0f 85 63 01 00 00    	jne    136b8 <open_namei+0x240>
		if (!(flag & O_CREAT)) {                						// 不是创建文件，放回i节点
   13555:	8b 44 24 34          	mov    0x34(%esp),%eax
   13559:	83 e0 40             	and    $0x40,%eax
   1355c:	85 c0                	test   %eax,%eax
   1355e:	75 1a                	jne    1357a <open_namei+0x102>
			iput(dir);
   13560:	8b 44 24 04          	mov    0x4(%esp),%eax
   13564:	83 ec 0c             	sub    $0xc,%esp
   13567:	50                   	push   %eax
   13568:	e8 2f b1 ff ff       	call   e69c <iput>
   1356d:	83 c4 10             	add    $0x10,%esp
			return -ENOENT;
   13570:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   13575:	e9 77 02 00 00       	jmp    137f1 <open_namei+0x379>
		}
		if (!permission(dir, MAY_WRITE)) {       						// 没有写权限，放回i节点
   1357a:	8b 44 24 04          	mov    0x4(%esp),%eax
   1357e:	83 ec 08             	sub    $0x8,%esp
   13581:	6a 02                	push   $0x2
   13583:	50                   	push   %eax
   13584:	e8 3a f4 ff ff       	call   129c3 <permission>
   13589:	83 c4 10             	add    $0x10,%esp
   1358c:	85 c0                	test   %eax,%eax
   1358e:	75 1a                	jne    135aa <open_namei+0x132>
			iput(dir);
   13590:	8b 44 24 04          	mov    0x4(%esp),%eax
   13594:	83 ec 0c             	sub    $0xc,%esp
   13597:	50                   	push   %eax
   13598:	e8 ff b0 ff ff       	call   e69c <iput>
   1359d:	83 c4 10             	add    $0x10,%esp
			return -EACCES;
   135a0:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
   135a5:	e9 47 02 00 00       	jmp    137f1 <open_namei+0x379>
		}
		// 现在我们确定了是创建操作并且有写操作许可。因此我们就在目录i节点对应设备上申请一个新的i节点给路径名上指定的文件使用。
		// 若失败则放回目录的i节点，并返回没有空间出错码。否则使用该新i节点，对其进行初始设置：置节点的用户id；对应节点访问模式；
		// 置已修改标志。然后并在指定目录dir中添加一个新目录项。
		inode = new_inode(dir->i_dev);
   135aa:	8b 44 24 04          	mov    0x4(%esp),%eax
   135ae:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   135b2:	0f b7 c0             	movzwl %ax,%eax
   135b5:	83 ec 0c             	sub    $0xc,%esp
   135b8:	50                   	push   %eax
   135b9:	e8 1a 1b 00 00       	call   150d8 <new_inode>
   135be:	83 c4 10             	add    $0x10,%esp
   135c1:	89 44 24 18          	mov    %eax,0x18(%esp)
		if (!inode) {
   135c5:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   135ca:	75 1a                	jne    135e6 <open_namei+0x16e>
			iput(dir);
   135cc:	8b 44 24 04          	mov    0x4(%esp),%eax
   135d0:	83 ec 0c             	sub    $0xc,%esp
   135d3:	50                   	push   %eax
   135d4:	e8 c3 b0 ff ff       	call   e69c <iput>
   135d9:	83 c4 10             	add    $0x10,%esp
			return -ENOSPC;
   135dc:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   135e1:	e9 0b 02 00 00       	jmp    137f1 <open_namei+0x379>
		}
		inode->i_uid = current->euid;
   135e6:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   135eb:	0f b7 90 ce 02 00 00 	movzwl 0x2ce(%eax),%edx
   135f2:	8b 44 24 18          	mov    0x18(%esp),%eax
   135f6:	66 89 50 02          	mov    %dx,0x2(%eax)
		inode->i_mode = mode;
   135fa:	8b 44 24 38          	mov    0x38(%esp),%eax
   135fe:	89 c2                	mov    %eax,%edx
   13600:	8b 44 24 18          	mov    0x18(%esp),%eax
   13604:	66 89 10             	mov    %dx,(%eax)
		inode->i_dirt = 1;
   13607:	8b 44 24 18          	mov    0x18(%esp),%eax
   1360b:	c6 40 37 01          	movb   $0x1,0x37(%eax)
		bh = add_entry(dir, basename, namelen, &de);
   1360f:	8b 4c 24 08          	mov    0x8(%esp),%ecx
   13613:	8b 54 24 0c          	mov    0xc(%esp),%edx
   13617:	8b 44 24 04          	mov    0x4(%esp),%eax
   1361b:	89 e3                	mov    %esp,%ebx
   1361d:	53                   	push   %ebx
   1361e:	51                   	push   %ecx
   1361f:	52                   	push   %edx
   13620:	50                   	push   %eax
   13621:	e8 0f f7 ff ff       	call   12d35 <add_entry>
   13626:	83 c4 10             	add    $0x10,%esp
   13629:	89 44 24 1c          	mov    %eax,0x1c(%esp)
		// 如果返回的应该含有新目录项的调整缓冲区指针为NULL，则表示添加目录项操作失败。于是将该新i节点的引用连接计数减1,放回该
		// i节点与目录的i节点并返回出错码退出。否则说明添加目录项操作成功。于是我们来设置该新目录项的一些初始值：置i节点号为新申
		// 请到的i节点的号码；并置高速缓冲区修改标志。然后释放该高速缓冲区，放回目录的i节点。返回新目录项的i节点指针，并成功退出。
		if (!bh) {
   1362d:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   13632:	75 3b                	jne    1366f <open_namei+0x1f7>
			inode->i_nlinks--;
   13634:	8b 44 24 18          	mov    0x18(%esp),%eax
   13638:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   1363c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1363f:	8b 44 24 18          	mov    0x18(%esp),%eax
   13643:	88 50 0d             	mov    %dl,0xd(%eax)
			iput(inode);
   13646:	83 ec 0c             	sub    $0xc,%esp
   13649:	ff 74 24 24          	pushl  0x24(%esp)
   1364d:	e8 4a b0 ff ff       	call   e69c <iput>
   13652:	83 c4 10             	add    $0x10,%esp
			iput(dir);
   13655:	8b 44 24 04          	mov    0x4(%esp),%eax
   13659:	83 ec 0c             	sub    $0xc,%esp
   1365c:	50                   	push   %eax
   1365d:	e8 3a b0 ff ff       	call   e69c <iput>
   13662:	83 c4 10             	add    $0x10,%esp
			return -ENOSPC;
   13665:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   1366a:	e9 82 01 00 00       	jmp    137f1 <open_namei+0x379>
		}
		de->inode = inode->i_num;
   1366f:	8b 04 24             	mov    (%esp),%eax
   13672:	8b 54 24 18          	mov    0x18(%esp),%edx
   13676:	0f b7 52 32          	movzwl 0x32(%edx),%edx
   1367a:	66 89 10             	mov    %dx,(%eax)
		bh->b_dirt = 1;
   1367d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   13681:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
		brelse(bh);
   13685:	83 ec 0c             	sub    $0xc,%esp
   13688:	ff 74 24 28          	pushl  0x28(%esp)
   1368c:	e8 ac bf ff ff       	call   f63d <brelse>
   13691:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   13694:	8b 44 24 04          	mov    0x4(%esp),%eax
   13698:	83 ec 0c             	sub    $0xc,%esp
   1369b:	50                   	push   %eax
   1369c:	e8 fb af ff ff       	call   e69c <iput>
   136a1:	83 c4 10             	add    $0x10,%esp
		*res_inode = inode;
   136a4:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   136a8:	8b 54 24 18          	mov    0x18(%esp),%edx
   136ac:	89 10                	mov    %edx,(%eax)
		return 0;
   136ae:	b8 00 00 00 00       	mov    $0x0,%eax
   136b3:	e9 39 01 00 00       	jmp    137f1 <open_namei+0x379>
    }
	// 若上面(411行)在目录中取文件名对应目录项结构的操作成功(即bh不为NULL),则说明指定打开的文件已经存在.于是取出该目录项的i节点和其所在设备号,并释放
	// 该高速缓冲区以及放回目录的i节点.如果此时独占操作标志O_EXCL置位,但现在文件已经存在,则返回文件已存在出错码退出.
	inr = de->inode;
   136b8:	8b 04 24             	mov    (%esp),%eax
   136bb:	0f b7 00             	movzwl (%eax),%eax
   136be:	0f b7 c0             	movzwl %ax,%eax
   136c1:	89 44 24 14          	mov    %eax,0x14(%esp)
	dev = dir->i_dev;
   136c5:	8b 44 24 04          	mov    0x4(%esp),%eax
   136c9:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   136cd:	0f b7 c0             	movzwl %ax,%eax
   136d0:	89 44 24 10          	mov    %eax,0x10(%esp)
	brelse(bh);
   136d4:	83 ec 0c             	sub    $0xc,%esp
   136d7:	ff 74 24 28          	pushl  0x28(%esp)
   136db:	e8 5d bf ff ff       	call   f63d <brelse>
   136e0:	83 c4 10             	add    $0x10,%esp
	if (flag & O_EXCL) {
   136e3:	8b 44 24 34          	mov    0x34(%esp),%eax
   136e7:	25 80 00 00 00       	and    $0x80,%eax
   136ec:	85 c0                	test   %eax,%eax
   136ee:	74 1a                	je     1370a <open_namei+0x292>
		iput(dir);
   136f0:	8b 44 24 04          	mov    0x4(%esp),%eax
   136f4:	83 ec 0c             	sub    $0xc,%esp
   136f7:	50                   	push   %eax
   136f8:	e8 9f af ff ff       	call   e69c <iput>
   136fd:	83 c4 10             	add    $0x10,%esp
		return -EEXIST;
   13700:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
   13705:	e9 e7 00 00 00       	jmp    137f1 <open_namei+0x379>
	}
	// 然后我们读取该目录项的i节点内容.若该i节点是一个目录的i节点并且访问模式是只写或读写,或者没有访问的许可权限,则放回该i节点,返回访问权限出错码退出.
	if (!(inode = follow_link(dir, iget(dev, inr))))
   1370a:	83 ec 08             	sub    $0x8,%esp
   1370d:	ff 74 24 1c          	pushl  0x1c(%esp)
   13711:	ff 74 24 1c          	pushl  0x1c(%esp)
   13715:	e8 14 b3 ff ff       	call   ea2e <iget>
   1371a:	83 c4 10             	add    $0x10,%esp
   1371d:	89 c2                	mov    %eax,%edx
   1371f:	8b 44 24 04          	mov    0x4(%esp),%eax
   13723:	83 ec 08             	sub    $0x8,%esp
   13726:	52                   	push   %edx
   13727:	50                   	push   %eax
   13728:	e8 36 f8 ff ff       	call   12f63 <follow_link>
   1372d:	83 c4 10             	add    $0x10,%esp
   13730:	89 44 24 18          	mov    %eax,0x18(%esp)
   13734:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   13739:	75 0a                	jne    13745 <open_namei+0x2cd>
		return -EACCES;
   1373b:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
   13740:	e9 ac 00 00 00       	jmp    137f1 <open_namei+0x379>
	if ((S_ISDIR(inode->i_mode) && (flag & O_ACCMODE)) ||
   13745:	8b 44 24 18          	mov    0x18(%esp),%eax
   13749:	0f b7 00             	movzwl (%eax),%eax
   1374c:	0f b7 c0             	movzwl %ax,%eax
   1374f:	25 00 f0 00 00       	and    $0xf000,%eax
   13754:	3d 00 40 00 00       	cmp    $0x4000,%eax
   13759:	75 0b                	jne    13766 <open_namei+0x2ee>
   1375b:	8b 44 24 34          	mov    0x34(%esp),%eax
   1375f:	83 e0 03             	and    $0x3,%eax
   13762:	85 c0                	test   %eax,%eax
   13764:	75 25                	jne    1378b <open_namei+0x313>
	    !permission(inode, ACC_MODE(flag))) {
   13766:	8b 44 24 34          	mov    0x34(%esp),%eax
   1376a:	83 e0 03             	and    $0x3,%eax
   1376d:	0f b6 80 8c 3a 02 00 	movzbl 0x23a8c(%eax),%eax
   13774:	0f be c0             	movsbl %al,%eax
   13777:	83 ec 08             	sub    $0x8,%esp
   1377a:	50                   	push   %eax
   1377b:	ff 74 24 24          	pushl  0x24(%esp)
   1377f:	e8 3f f2 ff ff       	call   129c3 <permission>
   13784:	83 c4 10             	add    $0x10,%esp
		return -EEXIST;
	}
	// 然后我们读取该目录项的i节点内容.若该i节点是一个目录的i节点并且访问模式是只写或读写,或者没有访问的许可权限,则放回该i节点,返回访问权限出错码退出.
	if (!(inode = follow_link(dir, iget(dev, inr))))
		return -EACCES;
	if ((S_ISDIR(inode->i_mode) && (flag & O_ACCMODE)) ||
   13787:	85 c0                	test   %eax,%eax
   13789:	75 16                	jne    137a1 <open_namei+0x329>
	    !permission(inode, ACC_MODE(flag))) {
		iput(inode);
   1378b:	83 ec 0c             	sub    $0xc,%esp
   1378e:	ff 74 24 24          	pushl  0x24(%esp)
   13792:	e8 05 af ff ff       	call   e69c <iput>
   13797:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   1379a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1379f:	eb 50                	jmp    137f1 <open_namei+0x379>
	}
	// 接着我们更新该i节点的访问时间字段值为当前时间.如果设立了截0标志,则将该i节点的文件长度截为0.最后返回该目录项i节点的指针.并返回0(成功).
	inode->i_atime = CURRENT_TIME;
   137a1:	a1 00 eb 02 00       	mov    0x2eb00,%eax
   137a6:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
   137ac:	01 d0                	add    %edx,%eax
   137ae:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   137b3:	f7 e2                	mul    %edx
   137b5:	c1 ea 05             	shr    $0x5,%edx
   137b8:	a1 04 eb 02 00       	mov    0x2eb04,%eax
   137bd:	01 c2                	add    %eax,%edx
   137bf:	8b 44 24 18          	mov    0x18(%esp),%eax
   137c3:	89 50 28             	mov    %edx,0x28(%eax)
	if (flag & O_TRUNC)
   137c6:	8b 44 24 34          	mov    0x34(%esp),%eax
   137ca:	25 00 02 00 00       	and    $0x200,%eax
   137cf:	85 c0                	test   %eax,%eax
   137d1:	74 0f                	je     137e2 <open_namei+0x36a>
		truncate(inode);
   137d3:	83 ec 0c             	sub    $0xc,%esp
   137d6:	ff 74 24 24          	pushl  0x24(%esp)
   137da:	e8 03 20 00 00       	call   157e2 <truncate>
   137df:	83 c4 10             	add    $0x10,%esp
	*res_inode = inode;
   137e2:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   137e6:	8b 54 24 18          	mov    0x18(%esp),%edx
   137ea:	89 10                	mov    %edx,(%eax)
	return 0;
   137ec:	b8 00 00 00 00       	mov    $0x0,%eax
}
   137f1:	83 c4 28             	add    $0x28,%esp
   137f4:	5b                   	pop    %ebx
   137f5:	c3                   	ret    

000137f6 <sys_mknod>:

// 创建一个设备特殊文件或普通文件节点（node）。
// 该函数创建名称为filename，由mode和dev指定的文件系统节点（普通文件、设备特殊文件或命名管道）。
// 参数：filename - 路径名；mode - 指定使用许可以及所创建节点的类型；dev - 设备号。
int sys_mknod(const char * filename, int mode, int dev)
{
   137f6:	53                   	push   %ebx
   137f7:	83 ec 28             	sub    $0x28,%esp
	struct buffer_head * bh;
	struct dir_entry * de;

	// 首先检查操作许可和参数的有效性并取路径名中顶层目录的i节点。如果不是超级用户，则返回访问许可出错码。
	// 如果不是超级用户，则返回访问许可出错码。
	if (!suser())
   137fa:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   137ff:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
   13806:	66 85 c0             	test   %ax,%ax
   13809:	74 0a                	je     13815 <sys_mknod+0x1f>
		return -EPERM;
   1380b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   13810:	e9 21 02 00 00       	jmp    13a36 <sys_mknod+0x240>
	// 如果找不到对应路径名中顶层目录的i节点，则返回出错码。
	if (!(dir = dir_namei(filename, &namelen, &basename, NULL)))
   13815:	6a 00                	push   $0x0
   13817:	8d 44 24 18          	lea    0x18(%esp),%eax
   1381b:	50                   	push   %eax
   1381c:	8d 44 24 18          	lea    0x18(%esp),%eax
   13820:	50                   	push   %eax
   13821:	ff 74 24 3c          	pushl  0x3c(%esp)
   13825:	e8 4a fa ff ff       	call   13274 <dir_namei>
   1382a:	83 c4 10             	add    $0x10,%esp
   1382d:	89 44 24 0c          	mov    %eax,0xc(%esp)
   13831:	8b 44 24 0c          	mov    0xc(%esp),%eax
   13835:	85 c0                	test   %eax,%eax
   13837:	75 0a                	jne    13843 <sys_mknod+0x4d>
		return -ENOENT;
   13839:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   1383e:	e9 f3 01 00 00       	jmp    13a36 <sys_mknod+0x240>
	// 如果最顶端的文件名长度为0，则说明给出的路径名最后没有指定文件名，放回该目录i节点，返回出错码退出。
	if (!namelen) {
   13843:	8b 44 24 10          	mov    0x10(%esp),%eax
   13847:	85 c0                	test   %eax,%eax
   13849:	75 1a                	jne    13865 <sys_mknod+0x6f>
		iput(dir);
   1384b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1384f:	83 ec 0c             	sub    $0xc,%esp
   13852:	50                   	push   %eax
   13853:	e8 44 ae ff ff       	call   e69c <iput>
   13858:	83 c4 10             	add    $0x10,%esp
		return -ENOENT;
   1385b:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   13860:	e9 d1 01 00 00       	jmp    13a36 <sys_mknod+0x240>
	}
	// 如果在该目录中没有写的权限，则放回该目录的i节点，返回访问许可出错码退出。
	if (!permission(dir, MAY_WRITE)) {
   13865:	8b 44 24 0c          	mov    0xc(%esp),%eax
   13869:	83 ec 08             	sub    $0x8,%esp
   1386c:	6a 02                	push   $0x2
   1386e:	50                   	push   %eax
   1386f:	e8 4f f1 ff ff       	call   129c3 <permission>
   13874:	83 c4 10             	add    $0x10,%esp
   13877:	85 c0                	test   %eax,%eax
   13879:	75 1a                	jne    13895 <sys_mknod+0x9f>
		iput(dir);
   1387b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1387f:	83 ec 0c             	sub    $0xc,%esp
   13882:	50                   	push   %eax
   13883:	e8 14 ae ff ff       	call   e69c <iput>
   13888:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   1388b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   13890:	e9 a1 01 00 00       	jmp    13a36 <sys_mknod+0x240>
	}
	// 然后我们搜索一下路径名指定的文件是否已经存在。若已经存在则不能创建同名文件节点。如果对应路径名上最后的文件名的
	// 目录项已经存在，则释放包含该目录项的缓冲区块并放回目录的i节点，返回文件已经存在的出错退出。
	bh = find_entry(&dir, basename, namelen, &de);
   13895:	8b 54 24 10          	mov    0x10(%esp),%edx
   13899:	8b 44 24 14          	mov    0x14(%esp),%eax
   1389d:	8d 4c 24 08          	lea    0x8(%esp),%ecx
   138a1:	51                   	push   %ecx
   138a2:	52                   	push   %edx
   138a3:	50                   	push   %eax
   138a4:	8d 44 24 18          	lea    0x18(%esp),%eax
   138a8:	50                   	push   %eax
   138a9:	e8 49 f2 ff ff       	call   12af7 <find_entry>
   138ae:	83 c4 10             	add    $0x10,%esp
   138b1:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (bh) {
   138b5:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   138ba:	74 29                	je     138e5 <sys_mknod+0xef>
		brelse(bh);
   138bc:	83 ec 0c             	sub    $0xc,%esp
   138bf:	ff 74 24 28          	pushl  0x28(%esp)
   138c3:	e8 75 bd ff ff       	call   f63d <brelse>
   138c8:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   138cb:	8b 44 24 0c          	mov    0xc(%esp),%eax
   138cf:	83 ec 0c             	sub    $0xc,%esp
   138d2:	50                   	push   %eax
   138d3:	e8 c4 ad ff ff       	call   e69c <iput>
   138d8:	83 c4 10             	add    $0x10,%esp
		return -EEXIST;
   138db:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
   138e0:	e9 51 01 00 00       	jmp    13a36 <sys_mknod+0x240>
	}
	// 否则我们就申请一个新的i节点，并设置该i节点的属性模式。
	inode = new_inode(dir->i_dev);
   138e5:	8b 44 24 0c          	mov    0xc(%esp),%eax
   138e9:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   138ed:	0f b7 c0             	movzwl %ax,%eax
   138f0:	83 ec 0c             	sub    $0xc,%esp
   138f3:	50                   	push   %eax
   138f4:	e8 df 17 00 00       	call   150d8 <new_inode>
   138f9:	83 c4 10             	add    $0x10,%esp
   138fc:	89 44 24 18          	mov    %eax,0x18(%esp)
	if (!inode) {
   13900:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   13905:	75 1a                	jne    13921 <sys_mknod+0x12b>
		iput(dir);
   13907:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1390b:	83 ec 0c             	sub    $0xc,%esp
   1390e:	50                   	push   %eax
   1390f:	e8 88 ad ff ff       	call   e69c <iput>
   13914:	83 c4 10             	add    $0x10,%esp
		return -ENOSPC;
   13917:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   1391c:	e9 15 01 00 00       	jmp    13a36 <sys_mknod+0x240>
	}
	inode->i_mode = mode;
   13921:	8b 44 24 34          	mov    0x34(%esp),%eax
   13925:	89 c2                	mov    %eax,%edx
   13927:	8b 44 24 18          	mov    0x18(%esp),%eax
   1392b:	66 89 10             	mov    %dx,(%eax)
	// 如果要创建的是块设备文件或者是字符设备文件，则令i节点的直接逻辑块指针0等于设备号。即对于设备文件来说，
	// 其i节点的i_zone[0]中存放的是该设备文件所定义设备的设备号。
	if (S_ISBLK(mode) || S_ISCHR(mode))
   1392e:	8b 44 24 34          	mov    0x34(%esp),%eax
   13932:	25 00 f0 00 00       	and    $0xf000,%eax
   13937:	3d 00 60 00 00       	cmp    $0x6000,%eax
   1393c:	74 10                	je     1394e <sys_mknod+0x158>
   1393e:	8b 44 24 34          	mov    0x34(%esp),%eax
   13942:	25 00 f0 00 00       	and    $0xf000,%eax
   13947:	3d 00 20 00 00       	cmp    $0x2000,%eax
   1394c:	75 0e                	jne    1395c <sys_mknod+0x166>
		inode->i_zone[0] = dev;
   1394e:	8b 44 24 38          	mov    0x38(%esp),%eax
   13952:	89 c2                	mov    %eax,%edx
   13954:	8b 44 24 18          	mov    0x18(%esp),%eax
   13958:	66 89 50 0e          	mov    %dx,0xe(%eax)
	// 设置该i节点的修改时间、访问时间为当前时间，并设置i节点已修改标志。
	inode->i_mtime = inode->i_atime = CURRENT_TIME;
   1395c:	a1 00 eb 02 00       	mov    0x2eb00,%eax
   13961:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
   13967:	01 d0                	add    %edx,%eax
   13969:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   1396e:	f7 e2                	mul    %edx
   13970:	c1 ea 05             	shr    $0x5,%edx
   13973:	a1 04 eb 02 00       	mov    0x2eb04,%eax
   13978:	01 c2                	add    %eax,%edx
   1397a:	8b 44 24 18          	mov    0x18(%esp),%eax
   1397e:	89 50 28             	mov    %edx,0x28(%eax)
   13981:	8b 44 24 18          	mov    0x18(%esp),%eax
   13985:	8b 50 28             	mov    0x28(%eax),%edx
   13988:	8b 44 24 18          	mov    0x18(%esp),%eax
   1398c:	89 50 08             	mov    %edx,0x8(%eax)
	inode->i_dirt = 1;
   1398f:	8b 44 24 18          	mov    0x18(%esp),%eax
   13993:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	// 接着为这个新的i节点在目录中新添加一个目录项。如果失败（包含该目录项的高速缓冲块指针为NULL），则放回目录的i节点；
	// 把所申请的i节点引用连接计数复位，并放回该i节点，返回出错码退出。
	bh = add_entry(dir, basename, namelen, &de);
   13997:	8b 4c 24 10          	mov    0x10(%esp),%ecx
   1399b:	8b 54 24 14          	mov    0x14(%esp),%edx
   1399f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   139a3:	8d 5c 24 08          	lea    0x8(%esp),%ebx
   139a7:	53                   	push   %ebx
   139a8:	51                   	push   %ecx
   139a9:	52                   	push   %edx
   139aa:	50                   	push   %eax
   139ab:	e8 85 f3 ff ff       	call   12d35 <add_entry>
   139b0:	83 c4 10             	add    $0x10,%esp
   139b3:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (!bh) {
   139b7:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   139bc:	75 2e                	jne    139ec <sys_mknod+0x1f6>
		iput(dir);
   139be:	8b 44 24 0c          	mov    0xc(%esp),%eax
   139c2:	83 ec 0c             	sub    $0xc,%esp
   139c5:	50                   	push   %eax
   139c6:	e8 d1 ac ff ff       	call   e69c <iput>
   139cb:	83 c4 10             	add    $0x10,%esp
		inode->i_nlinks = 0;
   139ce:	8b 44 24 18          	mov    0x18(%esp),%eax
   139d2:	c6 40 0d 00          	movb   $0x0,0xd(%eax)
		iput(inode);
   139d6:	83 ec 0c             	sub    $0xc,%esp
   139d9:	ff 74 24 24          	pushl  0x24(%esp)
   139dd:	e8 ba ac ff ff       	call   e69c <iput>
   139e2:	83 c4 10             	add    $0x10,%esp
		return -ENOSPC;
   139e5:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   139ea:	eb 4a                	jmp    13a36 <sys_mknod+0x240>
	}
	// 现在添加目录项操作也成功了，于是我们来设置这个目录项内容。令该目录项的i节点字段等于新i节点号，并置高速缓冲区已修
	// 改标志，放回目录和新的i节点，释放高速缓冲区，最后返回0（成功）。
	de->inode = inode->i_num;
   139ec:	8b 44 24 08          	mov    0x8(%esp),%eax
   139f0:	8b 54 24 18          	mov    0x18(%esp),%edx
   139f4:	0f b7 52 32          	movzwl 0x32(%edx),%edx
   139f8:	66 89 10             	mov    %dx,(%eax)
	bh->b_dirt = 1;
   139fb:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   139ff:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	iput(dir);
   13a03:	8b 44 24 0c          	mov    0xc(%esp),%eax
   13a07:	83 ec 0c             	sub    $0xc,%esp
   13a0a:	50                   	push   %eax
   13a0b:	e8 8c ac ff ff       	call   e69c <iput>
   13a10:	83 c4 10             	add    $0x10,%esp
	iput(inode);
   13a13:	83 ec 0c             	sub    $0xc,%esp
   13a16:	ff 74 24 24          	pushl  0x24(%esp)
   13a1a:	e8 7d ac ff ff       	call   e69c <iput>
   13a1f:	83 c4 10             	add    $0x10,%esp
	brelse(bh);
   13a22:	83 ec 0c             	sub    $0xc,%esp
   13a25:	ff 74 24 28          	pushl  0x28(%esp)
   13a29:	e8 0f bc ff ff       	call   f63d <brelse>
   13a2e:	83 c4 10             	add    $0x10,%esp
	return 0;
   13a31:	b8 00 00 00 00       	mov    $0x0,%eax
}
   13a36:	83 c4 28             	add    $0x28,%esp
   13a39:	5b                   	pop    %ebx
   13a3a:	c3                   	ret    

00013a3b <sys_mkdir>:

// 创建一个目录。
// 参数：pathname - 路径名；mode - 目录使用的权限属性。
// 返回：成功则返回0,否则返回出错码。
int sys_mkdir(const char * pathname, int mode)
{
   13a3b:	53                   	push   %ebx
   13a3c:	83 ec 28             	sub    $0x28,%esp
	struct m_inode * dir, * inode;
	struct buffer_head * bh, *dir_block;
	struct dir_entry * de;

	// 首先检查参数的有效性并取路径名中顶层目录的i节点。如果找不到对应路径名中顶层目录的i节点，则返回出错码。
	if (!(dir = dir_namei(pathname,&namelen,&basename, NULL)))
   13a3f:	6a 00                	push   $0x0
   13a41:	8d 44 24 14          	lea    0x14(%esp),%eax
   13a45:	50                   	push   %eax
   13a46:	8d 44 24 14          	lea    0x14(%esp),%eax
   13a4a:	50                   	push   %eax
   13a4b:	ff 74 24 3c          	pushl  0x3c(%esp)
   13a4f:	e8 20 f8 ff ff       	call   13274 <dir_namei>
   13a54:	83 c4 10             	add    $0x10,%esp
   13a57:	89 44 24 08          	mov    %eax,0x8(%esp)
   13a5b:	8b 44 24 08          	mov    0x8(%esp),%eax
   13a5f:	85 c0                	test   %eax,%eax
   13a61:	75 0a                	jne    13a6d <sys_mkdir+0x32>
		return -ENOENT;
   13a63:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   13a68:	e9 63 03 00 00       	jmp    13dd0 <sys_mkdir+0x395>
	// 如果最顶端文件名长度为0,则说明给出的路径名最后没有指定文件名，放回该目录i节点，返回出错码退出。
	if (!namelen) {
   13a6d:	8b 44 24 0c          	mov    0xc(%esp),%eax
   13a71:	85 c0                	test   %eax,%eax
   13a73:	75 1a                	jne    13a8f <sys_mkdir+0x54>
		iput(dir);
   13a75:	8b 44 24 08          	mov    0x8(%esp),%eax
   13a79:	83 ec 0c             	sub    $0xc,%esp
   13a7c:	50                   	push   %eax
   13a7d:	e8 1a ac ff ff       	call   e69c <iput>
   13a82:	83 c4 10             	add    $0x10,%esp
		return -ENOENT;
   13a85:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   13a8a:	e9 41 03 00 00       	jmp    13dd0 <sys_mkdir+0x395>
	}
	// 如果在该目录中没有写的权限，则放回该目录i节点，返回访问许可出错码退出。
	// 如果不是超级用户，则返回访问许可出错码。
	if (!permission(dir, MAY_WRITE)) {
   13a8f:	8b 44 24 08          	mov    0x8(%esp),%eax
   13a93:	83 ec 08             	sub    $0x8,%esp
   13a96:	6a 02                	push   $0x2
   13a98:	50                   	push   %eax
   13a99:	e8 25 ef ff ff       	call   129c3 <permission>
   13a9e:	83 c4 10             	add    $0x10,%esp
   13aa1:	85 c0                	test   %eax,%eax
   13aa3:	75 1a                	jne    13abf <sys_mkdir+0x84>
		iput(dir);
   13aa5:	8b 44 24 08          	mov    0x8(%esp),%eax
   13aa9:	83 ec 0c             	sub    $0xc,%esp
   13aac:	50                   	push   %eax
   13aad:	e8 ea ab ff ff       	call   e69c <iput>
   13ab2:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   13ab5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   13aba:	e9 11 03 00 00       	jmp    13dd0 <sys_mkdir+0x395>
	}
	// 然后我们搜索一下路径名指定的目录名是否已经存在。若已经存在则不能创建同名目录节点。如果对应路径名上最后的目录名的目录
	// 项已经存在，则释放包含该目录项的缓冲区块并放回目录的i节点，返回文件已经存在 的出错码退出。否则我们就申请一个新的i节
	// 点，并设置该i节点的属性模式：置该新i节点对应的文件长度为32字节（2个目录项的大小）、置节点已修改标志，以及节点的修改
	// 时间和访问时间。2个目录项分别用于'.'和'..'目录。
	bh = find_entry(&dir, basename, namelen, &de);
   13abf:	8b 54 24 0c          	mov    0xc(%esp),%edx
   13ac3:	8b 44 24 10          	mov    0x10(%esp),%eax
   13ac7:	8d 4c 24 04          	lea    0x4(%esp),%ecx
   13acb:	51                   	push   %ecx
   13acc:	52                   	push   %edx
   13acd:	50                   	push   %eax
   13ace:	8d 44 24 14          	lea    0x14(%esp),%eax
   13ad2:	50                   	push   %eax
   13ad3:	e8 1f f0 ff ff       	call   12af7 <find_entry>
   13ad8:	83 c4 10             	add    $0x10,%esp
   13adb:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (bh) {
   13adf:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   13ae4:	74 29                	je     13b0f <sys_mkdir+0xd4>
		brelse(bh);
   13ae6:	83 ec 0c             	sub    $0xc,%esp
   13ae9:	ff 74 24 28          	pushl  0x28(%esp)
   13aed:	e8 4b bb ff ff       	call   f63d <brelse>
   13af2:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   13af5:	8b 44 24 08          	mov    0x8(%esp),%eax
   13af9:	83 ec 0c             	sub    $0xc,%esp
   13afc:	50                   	push   %eax
   13afd:	e8 9a ab ff ff       	call   e69c <iput>
   13b02:	83 c4 10             	add    $0x10,%esp
		return -EEXIST;
   13b05:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
   13b0a:	e9 c1 02 00 00       	jmp    13dd0 <sys_mkdir+0x395>
	}
	inode = new_inode(dir->i_dev);
   13b0f:	8b 44 24 08          	mov    0x8(%esp),%eax
   13b13:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   13b17:	0f b7 c0             	movzwl %ax,%eax
   13b1a:	83 ec 0c             	sub    $0xc,%esp
   13b1d:	50                   	push   %eax
   13b1e:	e8 b5 15 00 00       	call   150d8 <new_inode>
   13b23:	83 c4 10             	add    $0x10,%esp
   13b26:	89 44 24 18          	mov    %eax,0x18(%esp)
	if (!inode) {           						// 若不成功则放回目录的i节点，返回无空间出错码。
   13b2a:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   13b2f:	75 1a                	jne    13b4b <sys_mkdir+0x110>
		iput(dir);
   13b31:	8b 44 24 08          	mov    0x8(%esp),%eax
   13b35:	83 ec 0c             	sub    $0xc,%esp
   13b38:	50                   	push   %eax
   13b39:	e8 5e ab ff ff       	call   e69c <iput>
   13b3e:	83 c4 10             	add    $0x10,%esp
		return -ENOSPC;
   13b41:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   13b46:	e9 85 02 00 00       	jmp    13dd0 <sys_mkdir+0x395>
	}
	inode->i_size = 32;
   13b4b:	8b 44 24 18          	mov    0x18(%esp),%eax
   13b4f:	c7 40 04 20 00 00 00 	movl   $0x20,0x4(%eax)
	inode->i_dirt = 1;
   13b56:	8b 44 24 18          	mov    0x18(%esp),%eax
   13b5a:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	inode->i_mtime = inode->i_atime = CURRENT_TIME;
   13b5e:	a1 00 eb 02 00       	mov    0x2eb00,%eax
   13b63:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
   13b69:	01 d0                	add    %edx,%eax
   13b6b:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   13b70:	f7 e2                	mul    %edx
   13b72:	c1 ea 05             	shr    $0x5,%edx
   13b75:	a1 04 eb 02 00       	mov    0x2eb04,%eax
   13b7a:	01 c2                	add    %eax,%edx
   13b7c:	8b 44 24 18          	mov    0x18(%esp),%eax
   13b80:	89 50 28             	mov    %edx,0x28(%eax)
   13b83:	8b 44 24 18          	mov    0x18(%esp),%eax
   13b87:	8b 50 28             	mov    0x28(%eax),%edx
   13b8a:	8b 44 24 18          	mov    0x18(%esp),%eax
   13b8e:	89 50 08             	mov    %edx,0x8(%eax)
	// 接着为该新i节点申请一用于保存目录项数据的磁盘块，并令i节点的第一个直接块指针等于该块号。如果申请失败则放回对应目录
	// 的i节点；复位新申请的i节点连接计数；放回该新的i节点，返回没有空间出错码退出。否则置该新的i节点已修改标志。
	if (!(inode->i_zone[0] = new_block(inode->i_dev))) {
   13b91:	8b 44 24 18          	mov    0x18(%esp),%eax
   13b95:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   13b99:	0f b7 c0             	movzwl %ax,%eax
   13b9c:	83 ec 0c             	sub    $0xc,%esp
   13b9f:	50                   	push   %eax
   13ba0:	e8 fe 11 00 00       	call   14da3 <new_block>
   13ba5:	83 c4 10             	add    $0x10,%esp
   13ba8:	89 c2                	mov    %eax,%edx
   13baa:	8b 44 24 18          	mov    0x18(%esp),%eax
   13bae:	66 89 50 0e          	mov    %dx,0xe(%eax)
   13bb2:	8b 44 24 18          	mov    0x18(%esp),%eax
   13bb6:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   13bba:	66 85 c0             	test   %ax,%ax
   13bbd:	75 3b                	jne    13bfa <sys_mkdir+0x1bf>
		iput(dir);
   13bbf:	8b 44 24 08          	mov    0x8(%esp),%eax
   13bc3:	83 ec 0c             	sub    $0xc,%esp
   13bc6:	50                   	push   %eax
   13bc7:	e8 d0 aa ff ff       	call   e69c <iput>
   13bcc:	83 c4 10             	add    $0x10,%esp
		inode->i_nlinks--;
   13bcf:	8b 44 24 18          	mov    0x18(%esp),%eax
   13bd3:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   13bd7:	8d 50 ff             	lea    -0x1(%eax),%edx
   13bda:	8b 44 24 18          	mov    0x18(%esp),%eax
   13bde:	88 50 0d             	mov    %dl,0xd(%eax)
		iput(inode);
   13be1:	83 ec 0c             	sub    $0xc,%esp
   13be4:	ff 74 24 24          	pushl  0x24(%esp)
   13be8:	e8 af aa ff ff       	call   e69c <iput>
   13bed:	83 c4 10             	add    $0x10,%esp
		return -ENOSPC;
   13bf0:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   13bf5:	e9 d6 01 00 00       	jmp    13dd0 <sys_mkdir+0x395>
	}
	inode->i_dirt = 1;
   13bfa:	8b 44 24 18          	mov    0x18(%esp),%eax
   13bfe:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	// 从设备上读取新申请的磁盘块（目的是把对应块放到高速缓冲区中）。若出错，则放回对应目录的i节点；释放申请的磁盘块；复位新
	// 申请的i节点连接计数；放回该新的i节点，返回没有空间出错码退出。
	if (!(dir_block = bread(inode->i_dev, inode->i_zone[0]))) {
   13c02:	8b 44 24 18          	mov    0x18(%esp),%eax
   13c06:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   13c0a:	0f b7 d0             	movzwl %ax,%edx
   13c0d:	8b 44 24 18          	mov    0x18(%esp),%eax
   13c11:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   13c15:	0f b7 c0             	movzwl %ax,%eax
   13c18:	83 ec 08             	sub    $0x8,%esp
   13c1b:	52                   	push   %edx
   13c1c:	50                   	push   %eax
   13c1d:	e8 71 ba ff ff       	call   f693 <bread>
   13c22:	83 c4 10             	add    $0x10,%esp
   13c25:	89 44 24 14          	mov    %eax,0x14(%esp)
   13c29:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
   13c2e:	75 3b                	jne    13c6b <sys_mkdir+0x230>
		iput(dir);
   13c30:	8b 44 24 08          	mov    0x8(%esp),%eax
   13c34:	83 ec 0c             	sub    $0xc,%esp
   13c37:	50                   	push   %eax
   13c38:	e8 5f aa ff ff       	call   e69c <iput>
   13c3d:	83 c4 10             	add    $0x10,%esp
		inode->i_nlinks--;
   13c40:	8b 44 24 18          	mov    0x18(%esp),%eax
   13c44:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   13c48:	8d 50 ff             	lea    -0x1(%eax),%edx
   13c4b:	8b 44 24 18          	mov    0x18(%esp),%eax
   13c4f:	88 50 0d             	mov    %dl,0xd(%eax)
		iput(inode);
   13c52:	83 ec 0c             	sub    $0xc,%esp
   13c55:	ff 74 24 24          	pushl  0x24(%esp)
   13c59:	e8 3e aa ff ff       	call   e69c <iput>
   13c5e:	83 c4 10             	add    $0x10,%esp
		return -ERROR;
   13c61:	b8 9d ff ff ff       	mov    $0xffffff9d,%eax
   13c66:	e9 65 01 00 00       	jmp    13dd0 <sys_mkdir+0x395>
	}
	// 然后我们在缓冲块中建立起所创建目录文件中的2个默认的新目录项（'.'和'..'）结构数据。首先令de指向存放目录项的数据块，然
	// 后置该目录项的i节点号字段等于新申请的i节点号，名字字段等于“.”。然后de指向下一个目录项结构，并在该结构中存放上级目录的
	// i节点号和名字“..”。然后设置该高速缓冲块已修改标志，并释放该缓冲区块。再初始化设置新i节点的模式字段，并置该i节点已修改
	// 标志。
	de = (struct dir_entry *) dir_block->b_data;
   13c6b:	8b 44 24 14          	mov    0x14(%esp),%eax
   13c6f:	8b 00                	mov    (%eax),%eax
   13c71:	89 44 24 04          	mov    %eax,0x4(%esp)
	de->inode = inode->i_num;         				// 设置'.'目录项。
   13c75:	8b 44 24 04          	mov    0x4(%esp),%eax
   13c79:	8b 54 24 18          	mov    0x18(%esp),%edx
   13c7d:	0f b7 52 32          	movzwl 0x32(%edx),%edx
   13c81:	66 89 10             	mov    %dx,(%eax)
	strcpy(de->name, ".");
   13c84:	8b 44 24 04          	mov    0x4(%esp),%eax
   13c88:	83 c0 02             	add    $0x2,%eax
   13c8b:	83 ec 08             	sub    $0x8,%esp
   13c8e:	68 91 3a 02 00       	push   $0x23a91
   13c93:	50                   	push   %eax
   13c94:	e8 e7 ec ff ff       	call   12980 <strcpy>
   13c99:	83 c4 10             	add    $0x10,%esp
	de++;
   13c9c:	8b 44 24 04          	mov    0x4(%esp),%eax
   13ca0:	83 c0 10             	add    $0x10,%eax
   13ca3:	89 44 24 04          	mov    %eax,0x4(%esp)
	de->inode = dir->i_num;         				// 设置'..'目录项。
   13ca7:	8b 44 24 04          	mov    0x4(%esp),%eax
   13cab:	8b 54 24 08          	mov    0x8(%esp),%edx
   13caf:	0f b7 52 32          	movzwl 0x32(%edx),%edx
   13cb3:	66 89 10             	mov    %dx,(%eax)
	strcpy(de->name, "..");
   13cb6:	8b 44 24 04          	mov    0x4(%esp),%eax
   13cba:	83 c0 02             	add    $0x2,%eax
   13cbd:	83 ec 08             	sub    $0x8,%esp
   13cc0:	68 93 3a 02 00       	push   $0x23a93
   13cc5:	50                   	push   %eax
   13cc6:	e8 b5 ec ff ff       	call   12980 <strcpy>
   13ccb:	83 c4 10             	add    $0x10,%esp
	inode->i_nlinks = 2;
   13cce:	8b 44 24 18          	mov    0x18(%esp),%eax
   13cd2:	c6 40 0d 02          	movb   $0x2,0xd(%eax)
	dir_block->b_dirt = 1;
   13cd6:	8b 44 24 14          	mov    0x14(%esp),%eax
   13cda:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	brelse(dir_block);
   13cde:	83 ec 0c             	sub    $0xc,%esp
   13ce1:	ff 74 24 20          	pushl  0x20(%esp)
   13ce5:	e8 53 b9 ff ff       	call   f63d <brelse>
   13cea:	83 c4 10             	add    $0x10,%esp
	inode->i_mode = I_DIRECTORY | (mode & 0777 & ~current->umask);
   13ced:	8b 44 24 34          	mov    0x34(%esp),%eax
   13cf1:	66 25 ff 01          	and    $0x1ff,%ax
   13cf5:	89 c2                	mov    %eax,%edx
   13cf7:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   13cfc:	0f b7 80 30 03 00 00 	movzwl 0x330(%eax),%eax
   13d03:	f7 d0                	not    %eax
   13d05:	21 d0                	and    %edx,%eax
   13d07:	80 cc 40             	or     $0x40,%ah
   13d0a:	89 c2                	mov    %eax,%edx
   13d0c:	8b 44 24 18          	mov    0x18(%esp),%eax
   13d10:	66 89 10             	mov    %dx,(%eax)
	inode->i_dirt = 1;
   13d13:	8b 44 24 18          	mov    0x18(%esp),%eax
   13d17:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	// 现在我们在指定目录中新添加一个目录项，用于存放新建目录的i节点和目录名。如果失败（包含该目录项的高速缓冲区指针为NULL），
	// 则放回目录的i节点；所申请的i节点引用连接计数复位，并放回该i节点。返回出错码退出。
	bh = add_entry(dir, basename, namelen, &de);
   13d1b:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   13d1f:	8b 54 24 10          	mov    0x10(%esp),%edx
   13d23:	8b 44 24 08          	mov    0x8(%esp),%eax
   13d27:	8d 5c 24 04          	lea    0x4(%esp),%ebx
   13d2b:	53                   	push   %ebx
   13d2c:	51                   	push   %ecx
   13d2d:	52                   	push   %edx
   13d2e:	50                   	push   %eax
   13d2f:	e8 01 f0 ff ff       	call   12d35 <add_entry>
   13d34:	83 c4 10             	add    $0x10,%esp
   13d37:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (!bh) {
   13d3b:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   13d40:	75 2e                	jne    13d70 <sys_mkdir+0x335>
		iput(dir);
   13d42:	8b 44 24 08          	mov    0x8(%esp),%eax
   13d46:	83 ec 0c             	sub    $0xc,%esp
   13d49:	50                   	push   %eax
   13d4a:	e8 4d a9 ff ff       	call   e69c <iput>
   13d4f:	83 c4 10             	add    $0x10,%esp
		inode->i_nlinks = 0;
   13d52:	8b 44 24 18          	mov    0x18(%esp),%eax
   13d56:	c6 40 0d 00          	movb   $0x0,0xd(%eax)
		iput(inode);
   13d5a:	83 ec 0c             	sub    $0xc,%esp
   13d5d:	ff 74 24 24          	pushl  0x24(%esp)
   13d61:	e8 36 a9 ff ff       	call   e69c <iput>
   13d66:	83 c4 10             	add    $0x10,%esp
		return -ENOSPC;
   13d69:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   13d6e:	eb 60                	jmp    13dd0 <sys_mkdir+0x395>
	}
	// 最后令该新目录项的i节点字段等于新i节点号，并置高速缓冲块已修改标志，放回目录和新的i节点，释放高速缓冲区，最后返回0（成功）。
	de->inode = inode->i_num;
   13d70:	8b 44 24 04          	mov    0x4(%esp),%eax
   13d74:	8b 54 24 18          	mov    0x18(%esp),%edx
   13d78:	0f b7 52 32          	movzwl 0x32(%edx),%edx
   13d7c:	66 89 10             	mov    %dx,(%eax)
	bh->b_dirt = 1;
   13d7f:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   13d83:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	dir->i_nlinks++;
   13d87:	8b 44 24 08          	mov    0x8(%esp),%eax
   13d8b:	0f b6 50 0d          	movzbl 0xd(%eax),%edx
   13d8f:	83 c2 01             	add    $0x1,%edx
   13d92:	88 50 0d             	mov    %dl,0xd(%eax)
	dir->i_dirt = 1;
   13d95:	8b 44 24 08          	mov    0x8(%esp),%eax
   13d99:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	iput(dir);
   13d9d:	8b 44 24 08          	mov    0x8(%esp),%eax
   13da1:	83 ec 0c             	sub    $0xc,%esp
   13da4:	50                   	push   %eax
   13da5:	e8 f2 a8 ff ff       	call   e69c <iput>
   13daa:	83 c4 10             	add    $0x10,%esp
	iput(inode);
   13dad:	83 ec 0c             	sub    $0xc,%esp
   13db0:	ff 74 24 24          	pushl  0x24(%esp)
   13db4:	e8 e3 a8 ff ff       	call   e69c <iput>
   13db9:	83 c4 10             	add    $0x10,%esp
	brelse(bh);
   13dbc:	83 ec 0c             	sub    $0xc,%esp
   13dbf:	ff 74 24 28          	pushl  0x28(%esp)
   13dc3:	e8 75 b8 ff ff       	call   f63d <brelse>
   13dc8:	83 c4 10             	add    $0x10,%esp
	return 0;
   13dcb:	b8 00 00 00 00       	mov    $0x0,%eax
}
   13dd0:	83 c4 28             	add    $0x28,%esp
   13dd3:	5b                   	pop    %ebx
   13dd4:	c3                   	ret    

00013dd5 <empty_dir>:
 */
// 检查指定目录是否为空。
// 参数：inode - 指定目录的i节点指针。
// 返回：1 - 目录中是空的；0 - 不空。
static int empty_dir(struct m_inode * inode)
{
   13dd5:	83 ec 2c             	sub    $0x2c,%esp
	struct dir_entry * de;

	// 首先计算指定目录中现有目录项个数并检查开始两个特定目录项中信息是否正确。一个目录中应该起码有2个目录项：即“.”和“..”。
	// 如果目录项个数少于2个或者该目录i节点的第1个直接块没有指向任何磁盘块号，或者该直接块读不出，则显示警告信息“设备dev上
	// 目录错”，返回0（失败）。
	len = inode->i_size / sizeof (struct dir_entry);        		// 目录中目录项个数。
   13dd8:	8b 44 24 30          	mov    0x30(%esp),%eax
   13ddc:	8b 40 04             	mov    0x4(%eax),%eax
   13ddf:	c1 e8 04             	shr    $0x4,%eax
   13de2:	89 44 24 10          	mov    %eax,0x10(%esp)
	if (len < 2 || !inode->i_zone[0] ||
   13de6:	83 7c 24 10 01       	cmpl   $0x1,0x10(%esp)
   13deb:	7e 3b                	jle    13e28 <empty_dir+0x53>
   13ded:	8b 44 24 30          	mov    0x30(%esp),%eax
   13df1:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   13df5:	66 85 c0             	test   %ax,%ax
   13df8:	74 2e                	je     13e28 <empty_dir+0x53>
	    !(bh = bread(inode->i_dev, inode->i_zone[0]))) {
   13dfa:	8b 44 24 30          	mov    0x30(%esp),%eax
   13dfe:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   13e02:	0f b7 d0             	movzwl %ax,%edx
   13e05:	8b 44 24 30          	mov    0x30(%esp),%eax
   13e09:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   13e0d:	0f b7 c0             	movzwl %ax,%eax

	// 首先计算指定目录中现有目录项个数并检查开始两个特定目录项中信息是否正确。一个目录中应该起码有2个目录项：即“.”和“..”。
	// 如果目录项个数少于2个或者该目录i节点的第1个直接块没有指向任何磁盘块号，或者该直接块读不出，则显示警告信息“设备dev上
	// 目录错”，返回0（失败）。
	len = inode->i_size / sizeof (struct dir_entry);        		// 目录中目录项个数。
	if (len < 2 || !inode->i_zone[0] ||
   13e10:	83 ec 08             	sub    $0x8,%esp
   13e13:	52                   	push   %edx
   13e14:	50                   	push   %eax
   13e15:	e8 79 b8 ff ff       	call   f693 <bread>
   13e1a:	83 c4 10             	add    $0x10,%esp
   13e1d:	89 44 24 18          	mov    %eax,0x18(%esp)
   13e21:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   13e26:	75 26                	jne    13e4e <empty_dir+0x79>
	    !(bh = bread(inode->i_dev, inode->i_zone[0]))) {
	    	printk("warning - bad directory on dev %04x\n", inode->i_dev);
   13e28:	8b 44 24 30          	mov    0x30(%esp),%eax
   13e2c:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   13e30:	0f b7 c0             	movzwl %ax,%eax
   13e33:	83 ec 08             	sub    $0x8,%esp
   13e36:	50                   	push   %eax
   13e37:	68 98 3a 02 00       	push   $0x23a98
   13e3c:	e8 06 4e ff ff       	call   8c47 <printk>
   13e41:	83 c4 10             	add    $0x10,%esp
		return 0;
   13e44:	b8 00 00 00 00       	mov    $0x0,%eax
   13e49:	e9 74 01 00 00       	jmp    13fc2 <empty_dir+0x1ed>
	}
	// 此时bh所指缓冲块中含有目录项数据。我们让目录项指针de指向缓冲块中第1个目录项。对于第1个目录项（“.”），它的i节点号字段
	// inode应该等于当前目录的i节点号。对于第2个目录项（“..”），节点号字段inode应该等于上一层目录的i节点号，不会为0.因此，
	// 如果第1个目录项的i节点号字段值不等于该目录的i节点号，或者第2个目录项的i节点号字段为零，或者两个目录项的名字字段不分别
	// 等于“.”和“..”，则显示出错警告信息“设备dev上目录错”，并返回0。
	de = (struct dir_entry *) bh->b_data;
   13e4e:	8b 44 24 18          	mov    0x18(%esp),%eax
   13e52:	8b 00                	mov    (%eax),%eax
   13e54:	89 44 24 14          	mov    %eax,0x14(%esp)
	if (de[0].inode != inode->i_num || !de[1].inode ||
   13e58:	8b 44 24 14          	mov    0x14(%esp),%eax
   13e5c:	0f b7 10             	movzwl (%eax),%edx
   13e5f:	8b 44 24 30          	mov    0x30(%esp),%eax
   13e63:	0f b7 40 32          	movzwl 0x32(%eax),%eax
   13e67:	66 39 c2             	cmp    %ax,%dx
   13e6a:	75 4a                	jne    13eb6 <empty_dir+0xe1>
   13e6c:	8b 44 24 14          	mov    0x14(%esp),%eax
   13e70:	83 c0 10             	add    $0x10,%eax
   13e73:	0f b7 00             	movzwl (%eax),%eax
   13e76:	66 85 c0             	test   %ax,%ax
   13e79:	74 3b                	je     13eb6 <empty_dir+0xe1>
	    strcmp(".", de[0].name) || strcmp("..", de[1].name)) {
   13e7b:	8b 44 24 14          	mov    0x14(%esp),%eax
   13e7f:	83 c0 02             	add    $0x2,%eax
   13e82:	83 ec 08             	sub    $0x8,%esp
   13e85:	50                   	push   %eax
   13e86:	68 91 3a 02 00       	push   $0x23a91
   13e8b:	e8 0c eb ff ff       	call   1299c <strcmp>
   13e90:	83 c4 10             	add    $0x10,%esp
	// 此时bh所指缓冲块中含有目录项数据。我们让目录项指针de指向缓冲块中第1个目录项。对于第1个目录项（“.”），它的i节点号字段
	// inode应该等于当前目录的i节点号。对于第2个目录项（“..”），节点号字段inode应该等于上一层目录的i节点号，不会为0.因此，
	// 如果第1个目录项的i节点号字段值不等于该目录的i节点号，或者第2个目录项的i节点号字段为零，或者两个目录项的名字字段不分别
	// 等于“.”和“..”，则显示出错警告信息“设备dev上目录错”，并返回0。
	de = (struct dir_entry *) bh->b_data;
	if (de[0].inode != inode->i_num || !de[1].inode ||
   13e93:	85 c0                	test   %eax,%eax
   13e95:	75 1f                	jne    13eb6 <empty_dir+0xe1>
	    strcmp(".", de[0].name) || strcmp("..", de[1].name)) {
   13e97:	8b 44 24 14          	mov    0x14(%esp),%eax
   13e9b:	83 c0 10             	add    $0x10,%eax
   13e9e:	83 c0 02             	add    $0x2,%eax
   13ea1:	83 ec 08             	sub    $0x8,%esp
   13ea4:	50                   	push   %eax
   13ea5:	68 93 3a 02 00       	push   $0x23a93
   13eaa:	e8 ed ea ff ff       	call   1299c <strcmp>
   13eaf:	83 c4 10             	add    $0x10,%esp
   13eb2:	85 c0                	test   %eax,%eax
   13eb4:	74 26                	je     13edc <empty_dir+0x107>
	    	printk("warning - bad directory on dev %04x\n", inode->i_dev);
   13eb6:	8b 44 24 30          	mov    0x30(%esp),%eax
   13eba:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   13ebe:	0f b7 c0             	movzwl %ax,%eax
   13ec1:	83 ec 08             	sub    $0x8,%esp
   13ec4:	50                   	push   %eax
   13ec5:	68 98 3a 02 00       	push   $0x23a98
   13eca:	e8 78 4d ff ff       	call   8c47 <printk>
   13ecf:	83 c4 10             	add    $0x10,%esp
		return 0;
   13ed2:	b8 00 00 00 00       	mov    $0x0,%eax
   13ed7:	e9 e6 00 00 00       	jmp    13fc2 <empty_dir+0x1ed>
	}
	// 然后我们令nr等于目录项序号（从0开始计）；de指向第三个目录项。并循环检测该目录中其余所有的（len - 2）个目录项，看有没有
	// 目录项的i节点号字段不为0（被使用）。
	nr = 2;
   13edc:	c7 44 24 1c 02 00 00 	movl   $0x2,0x1c(%esp)
   13ee3:	00 
	de += 2;
   13ee4:	83 44 24 14 20       	addl   $0x20,0x14(%esp)
	while (nr < len) {
   13ee9:	e9 b2 00 00 00       	jmp    13fa0 <empty_dir+0x1cb>
		// 如果该块磁盘块中的目录项已经全部检测完毕，则释放该磁盘块的缓冲块，并读取目录数据文件中下一块含有目录项的磁盘块。读取的方
		// 法是根据当前检测的目录项序号nr计算出对应目录项在目录数据文件中的数据块号（nr/DIR_ENTRIES_PER_BLOCK），然后使用bmap()
		// 函数取得对应的盘块号block，再使用读设备块函数bread()把相应盘块读入缓冲块中，并返回该缓冲块的指针。若所读取的相应盘块没有
		// 使用（或已经不用，如文件已经删除等），则继续读下一块，若读不出，则出错返回0.否则让de指向读出块的第1个目录项。
		if ((void *) de >= (void *) (bh->b_data + BLOCK_SIZE)) {
   13eee:	8b 44 24 18          	mov    0x18(%esp),%eax
   13ef2:	8b 00                	mov    (%eax),%eax
   13ef4:	05 00 04 00 00       	add    $0x400,%eax
   13ef9:	3b 44 24 14          	cmp    0x14(%esp),%eax
   13efd:	77 75                	ja     13f74 <empty_dir+0x19f>
			brelse(bh);
   13eff:	83 ec 0c             	sub    $0xc,%esp
   13f02:	ff 74 24 24          	pushl  0x24(%esp)
   13f06:	e8 32 b7 ff ff       	call   f63d <brelse>
   13f0b:	83 c4 10             	add    $0x10,%esp
			block = bmap(inode, nr / DIR_ENTRIES_PER_BLOCK);
   13f0e:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   13f12:	c1 e8 06             	shr    $0x6,%eax
   13f15:	83 ec 08             	sub    $0x8,%esp
   13f18:	50                   	push   %eax
   13f19:	ff 74 24 3c          	pushl  0x3c(%esp)
   13f1d:	e8 42 a7 ff ff       	call   e664 <bmap>
   13f22:	83 c4 10             	add    $0x10,%esp
   13f25:	89 44 24 0c          	mov    %eax,0xc(%esp)
			if (!block) {
   13f29:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   13f2e:	75 0d                	jne    13f3d <empty_dir+0x168>
				nr += DIR_ENTRIES_PER_BLOCK;
   13f30:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   13f34:	83 c0 40             	add    $0x40,%eax
   13f37:	89 44 24 1c          	mov    %eax,0x1c(%esp)
				continue;
   13f3b:	eb 63                	jmp    13fa0 <empty_dir+0x1cb>
			}
			if (!(bh = bread(inode->i_dev, block)))
   13f3d:	8b 44 24 30          	mov    0x30(%esp),%eax
   13f41:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   13f45:	0f b7 c0             	movzwl %ax,%eax
   13f48:	83 ec 08             	sub    $0x8,%esp
   13f4b:	ff 74 24 14          	pushl  0x14(%esp)
   13f4f:	50                   	push   %eax
   13f50:	e8 3e b7 ff ff       	call   f693 <bread>
   13f55:	83 c4 10             	add    $0x10,%esp
   13f58:	89 44 24 18          	mov    %eax,0x18(%esp)
   13f5c:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   13f61:	75 07                	jne    13f6a <empty_dir+0x195>
				return 0;
   13f63:	b8 00 00 00 00       	mov    $0x0,%eax
   13f68:	eb 58                	jmp    13fc2 <empty_dir+0x1ed>
			de = (struct dir_entry *) bh->b_data;
   13f6a:	8b 44 24 18          	mov    0x18(%esp),%eax
   13f6e:	8b 00                	mov    (%eax),%eax
   13f70:	89 44 24 14          	mov    %eax,0x14(%esp)
		}
		// 对于de指向的当前目录项，如果该目录项的i节点号字段不等于0,则表示该目录项目前正被使用，则释放该高速缓冲区，返回0退出。否则，
		// 若还没有查询完该目录中的所有目录项，则把目录项序号nr增1、de指向下一个目录项，继续检测。
		if (de->inode) {
   13f74:	8b 44 24 14          	mov    0x14(%esp),%eax
   13f78:	0f b7 00             	movzwl (%eax),%eax
   13f7b:	66 85 c0             	test   %ax,%ax
   13f7e:	74 16                	je     13f96 <empty_dir+0x1c1>
			brelse(bh);
   13f80:	83 ec 0c             	sub    $0xc,%esp
   13f83:	ff 74 24 24          	pushl  0x24(%esp)
   13f87:	e8 b1 b6 ff ff       	call   f63d <brelse>
   13f8c:	83 c4 10             	add    $0x10,%esp
			return 0;
   13f8f:	b8 00 00 00 00       	mov    $0x0,%eax
   13f94:	eb 2c                	jmp    13fc2 <empty_dir+0x1ed>
		}
		de++;
   13f96:	83 44 24 14 10       	addl   $0x10,0x14(%esp)
		nr++;
   13f9b:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
	}
	// 然后我们令nr等于目录项序号（从0开始计）；de指向第三个目录项。并循环检测该目录中其余所有的（len - 2）个目录项，看有没有
	// 目录项的i节点号字段不为0（被使用）。
	nr = 2;
	de += 2;
	while (nr < len) {
   13fa0:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   13fa4:	3b 44 24 10          	cmp    0x10(%esp),%eax
   13fa8:	0f 8c 40 ff ff ff    	jl     13eee <empty_dir+0x119>
		}
		de++;
		nr++;
	}
	// 执行到这里说明该目录中没有找到已用的目录项（当然除了头两个以外），则释放缓冲块返回1。
	brelse(bh);
   13fae:	83 ec 0c             	sub    $0xc,%esp
   13fb1:	ff 74 24 24          	pushl  0x24(%esp)
   13fb5:	e8 83 b6 ff ff       	call   f63d <brelse>
   13fba:	83 c4 10             	add    $0x10,%esp
	return 1;
   13fbd:	b8 01 00 00 00       	mov    $0x1,%eax
}
   13fc2:	83 c4 2c             	add    $0x2c,%esp
   13fc5:	c3                   	ret    

00013fc6 <sys_rmdir>:

// 删除目录。
// 参数：name - 目录名（路径名）。
// 返回：返回0表示成功，否则返回出错号。
int sys_rmdir(const char * name)
{
   13fc6:	53                   	push   %ebx
   13fc7:	83 ec 28             	sub    $0x28,%esp
	struct dir_entry * de;

	// 首先检查参数的有效性并取路径名中顶层目录的i节点。如果找不到对应路径名中顶层目录的i节点，则返回出错码。如果最顶端
	// 文件名长度为0,则说明给出的路径名最后没有指定文件名，放回该目录i节点，返回出错码退出。如果在该目录中没有写的权限，
	// 则放回该目录i节点，返回访问许可出错码退出。如果不是超级用户，则返回访问许可出错码。
	if (!(dir = dir_namei(name, &namelen, &basename, NULL)))
   13fca:	6a 00                	push   $0x0
   13fcc:	8d 44 24 18          	lea    0x18(%esp),%eax
   13fd0:	50                   	push   %eax
   13fd1:	8d 44 24 18          	lea    0x18(%esp),%eax
   13fd5:	50                   	push   %eax
   13fd6:	ff 74 24 3c          	pushl  0x3c(%esp)
   13fda:	e8 95 f2 ff ff       	call   13274 <dir_namei>
   13fdf:	83 c4 10             	add    $0x10,%esp
   13fe2:	89 44 24 0c          	mov    %eax,0xc(%esp)
   13fe6:	8b 44 24 0c          	mov    0xc(%esp),%eax
   13fea:	85 c0                	test   %eax,%eax
   13fec:	75 0a                	jne    13ff8 <sys_rmdir+0x32>
		return -ENOENT;
   13fee:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   13ff3:	e9 55 03 00 00       	jmp    1434d <sys_rmdir+0x387>
	if (!namelen) {
   13ff8:	8b 44 24 10          	mov    0x10(%esp),%eax
   13ffc:	85 c0                	test   %eax,%eax
   13ffe:	75 1a                	jne    1401a <sys_rmdir+0x54>
		iput(dir);
   14000:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14004:	83 ec 0c             	sub    $0xc,%esp
   14007:	50                   	push   %eax
   14008:	e8 8f a6 ff ff       	call   e69c <iput>
   1400d:	83 c4 10             	add    $0x10,%esp
		return -ENOENT;
   14010:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   14015:	e9 33 03 00 00       	jmp    1434d <sys_rmdir+0x387>
	}
	if (!permission(dir,MAY_WRITE)) {
   1401a:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1401e:	83 ec 08             	sub    $0x8,%esp
   14021:	6a 02                	push   $0x2
   14023:	50                   	push   %eax
   14024:	e8 9a e9 ff ff       	call   129c3 <permission>
   14029:	83 c4 10             	add    $0x10,%esp
   1402c:	85 c0                	test   %eax,%eax
   1402e:	75 1a                	jne    1404a <sys_rmdir+0x84>
		iput(dir);
   14030:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14034:	83 ec 0c             	sub    $0xc,%esp
   14037:	50                   	push   %eax
   14038:	e8 5f a6 ff ff       	call   e69c <iput>
   1403d:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   14040:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14045:	e9 03 03 00 00       	jmp    1434d <sys_rmdir+0x387>
	}
	// 然后根据指定目录的i节点和目录名利用函数find_entry()寻找对应目录项，并返回包含该目录项的缓冲块指针bh、包含该目录
	// 项的目录的i节点指针dir和该目录项指针de。再根据该目录项de中的i节点号利用iget()函数得到对应的i节点inode。如果对应
	// 路径名上最后目录的名的目录项不存在，则释放包含该目录项的高速缓冲区，放回目录的i节点，返回文件不存在出错码，并退出。
	// 如果取目录项的i节点出错，则放回目录的i节点，并释放含有目录项的高速缓冲区，返回出错号。
	bh = find_entry(&dir, basename, namelen, &de);
   1404a:	8b 54 24 10          	mov    0x10(%esp),%edx
   1404e:	8b 44 24 14          	mov    0x14(%esp),%eax
   14052:	8d 4c 24 08          	lea    0x8(%esp),%ecx
   14056:	51                   	push   %ecx
   14057:	52                   	push   %edx
   14058:	50                   	push   %eax
   14059:	8d 44 24 18          	lea    0x18(%esp),%eax
   1405d:	50                   	push   %eax
   1405e:	e8 94 ea ff ff       	call   12af7 <find_entry>
   14063:	83 c4 10             	add    $0x10,%esp
   14066:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (!bh) {
   1406a:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   1406f:	75 1a                	jne    1408b <sys_rmdir+0xc5>
		iput(dir);
   14071:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14075:	83 ec 0c             	sub    $0xc,%esp
   14078:	50                   	push   %eax
   14079:	e8 1e a6 ff ff       	call   e69c <iput>
   1407e:	83 c4 10             	add    $0x10,%esp
		return -ENOENT;
   14081:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   14086:	e9 c2 02 00 00       	jmp    1434d <sys_rmdir+0x387>
	}
	if (!(inode = iget(dir->i_dev, de->inode))) {
   1408b:	8b 44 24 08          	mov    0x8(%esp),%eax
   1408f:	0f b7 00             	movzwl (%eax),%eax
   14092:	0f b7 d0             	movzwl %ax,%edx
   14095:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14099:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   1409d:	0f b7 c0             	movzwl %ax,%eax
   140a0:	83 ec 08             	sub    $0x8,%esp
   140a3:	52                   	push   %edx
   140a4:	50                   	push   %eax
   140a5:	e8 84 a9 ff ff       	call   ea2e <iget>
   140aa:	83 c4 10             	add    $0x10,%esp
   140ad:	89 44 24 18          	mov    %eax,0x18(%esp)
   140b1:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   140b6:	75 29                	jne    140e1 <sys_rmdir+0x11b>
		iput(dir);
   140b8:	8b 44 24 0c          	mov    0xc(%esp),%eax
   140bc:	83 ec 0c             	sub    $0xc,%esp
   140bf:	50                   	push   %eax
   140c0:	e8 d7 a5 ff ff       	call   e69c <iput>
   140c5:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   140c8:	83 ec 0c             	sub    $0xc,%esp
   140cb:	ff 74 24 28          	pushl  0x28(%esp)
   140cf:	e8 69 b5 ff ff       	call   f63d <brelse>
   140d4:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   140d7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   140dc:	e9 6c 02 00 00       	jmp    1434d <sys_rmdir+0x387>
	// 此时我们已有包含要被删除目录项的目录i节点dir、要被删除目录项的i节点inode和要被删除目录项指针de。下面我们通过对这3
	// 个对象中信息的检查来验证删除操作的可行性。
	// 若该目录设置了受限删除标志并且进程的有效用户id（euid）不是root，并且进程的有效用户id（euid）不等于该i节点的用户
	// id，则表示当前进程没有权限删除该目录，于是放回包含要删除目录名的目录i节点和该要删除目录的i节点，然后释放高速缓冲区，
	// 返回出错码。
	if ((dir->i_mode & S_ISVTX) && current->euid &&
   140e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
   140e5:	0f b7 00             	movzwl (%eax),%eax
   140e8:	0f b7 c0             	movzwl %ax,%eax
   140eb:	25 00 02 00 00       	and    $0x200,%eax
   140f0:	85 c0                	test   %eax,%eax
   140f2:	74 62                	je     14156 <sys_rmdir+0x190>
   140f4:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   140f9:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
   14100:	66 85 c0             	test   %ax,%ax
   14103:	74 51                	je     14156 <sys_rmdir+0x190>
	    inode->i_uid != current->euid) {
   14105:	8b 44 24 18          	mov    0x18(%esp),%eax
   14109:	0f b7 50 02          	movzwl 0x2(%eax),%edx
   1410d:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   14112:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
	// 此时我们已有包含要被删除目录项的目录i节点dir、要被删除目录项的i节点inode和要被删除目录项指针de。下面我们通过对这3
	// 个对象中信息的检查来验证删除操作的可行性。
	// 若该目录设置了受限删除标志并且进程的有效用户id（euid）不是root，并且进程的有效用户id（euid）不等于该i节点的用户
	// id，则表示当前进程没有权限删除该目录，于是放回包含要删除目录名的目录i节点和该要删除目录的i节点，然后释放高速缓冲区，
	// 返回出错码。
	if ((dir->i_mode & S_ISVTX) && current->euid &&
   14119:	66 39 c2             	cmp    %ax,%dx
   1411c:	74 38                	je     14156 <sys_rmdir+0x190>
	    inode->i_uid != current->euid) {
		iput(dir);
   1411e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14122:	83 ec 0c             	sub    $0xc,%esp
   14125:	50                   	push   %eax
   14126:	e8 71 a5 ff ff       	call   e69c <iput>
   1412b:	83 c4 10             	add    $0x10,%esp
		iput(inode);
   1412e:	83 ec 0c             	sub    $0xc,%esp
   14131:	ff 74 24 24          	pushl  0x24(%esp)
   14135:	e8 62 a5 ff ff       	call   e69c <iput>
   1413a:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   1413d:	83 ec 0c             	sub    $0xc,%esp
   14140:	ff 74 24 28          	pushl  0x28(%esp)
   14144:	e8 f4 b4 ff ff       	call   f63d <brelse>
   14149:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   1414c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14151:	e9 f7 01 00 00       	jmp    1434d <sys_rmdir+0x387>
	}
	// 如果要被删除的目录项i节点的设备号不等于包含该目录项的目录的设备号，或者该被删除目录的引用连接计数大于1（表示有符号连
	// 接等），则不能删除该目录。于是释放包含要删除目录名的目录i节点和该要删除目录的i节点，释放高速缓冲块，返回出错码。
	if (inode->i_dev != dir->i_dev || inode->i_count > 1) {
   14156:	8b 44 24 18          	mov    0x18(%esp),%eax
   1415a:	0f b7 50 30          	movzwl 0x30(%eax),%edx
   1415e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14162:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   14166:	66 39 c2             	cmp    %ax,%dx
   14169:	75 0e                	jne    14179 <sys_rmdir+0x1b3>
   1416b:	8b 44 24 18          	mov    0x18(%esp),%eax
   1416f:	0f b7 40 34          	movzwl 0x34(%eax),%eax
   14173:	66 83 f8 01          	cmp    $0x1,%ax
   14177:	76 38                	jbe    141b1 <sys_rmdir+0x1eb>
		iput(dir);
   14179:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1417d:	83 ec 0c             	sub    $0xc,%esp
   14180:	50                   	push   %eax
   14181:	e8 16 a5 ff ff       	call   e69c <iput>
   14186:	83 c4 10             	add    $0x10,%esp
		iput(inode);
   14189:	83 ec 0c             	sub    $0xc,%esp
   1418c:	ff 74 24 24          	pushl  0x24(%esp)
   14190:	e8 07 a5 ff ff       	call   e69c <iput>
   14195:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   14198:	83 ec 0c             	sub    $0xc,%esp
   1419b:	ff 74 24 28          	pushl  0x28(%esp)
   1419f:	e8 99 b4 ff ff       	call   f63d <brelse>
   141a4:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   141a7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   141ac:	e9 9c 01 00 00       	jmp    1434d <sys_rmdir+0x387>
	}
	// 如果要被删除目录的目录项i节点就等于包含该需删除目录的目录i节点，则表示试图删除“.”目录，这是不允许的。于是放回包含要删
	// 除目录名的目录i节点和要删除目录的i节点，释放高速缓冲块，返回出错码。
	if (inode == dir) {						/* we may not delete ".", but "../dir" is ok */
   141b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
   141b5:	39 44 24 18          	cmp    %eax,0x18(%esp)
   141b9:	75 38                	jne    141f3 <sys_rmdir+0x22d>
		iput(inode);
   141bb:	83 ec 0c             	sub    $0xc,%esp
   141be:	ff 74 24 24          	pushl  0x24(%esp)
   141c2:	e8 d5 a4 ff ff       	call   e69c <iput>
   141c7:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   141ca:	8b 44 24 0c          	mov    0xc(%esp),%eax
   141ce:	83 ec 0c             	sub    $0xc,%esp
   141d1:	50                   	push   %eax
   141d2:	e8 c5 a4 ff ff       	call   e69c <iput>
   141d7:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   141da:	83 ec 0c             	sub    $0xc,%esp
   141dd:	ff 74 24 28          	pushl  0x28(%esp)
   141e1:	e8 57 b4 ff ff       	call   f63d <brelse>
   141e6:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   141e9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   141ee:	e9 5a 01 00 00       	jmp    1434d <sys_rmdir+0x387>
	}
	// 若要被删除目录i节点的属性表明这不是一个目录，则本删除操作的前提完全不存在。于是放回包含删除目录名的目录i节点和该要删除
	// 目录的i节点，释放高速缓冲块，返回出错码。
	if (!S_ISDIR(inode->i_mode)) {
   141f3:	8b 44 24 18          	mov    0x18(%esp),%eax
   141f7:	0f b7 00             	movzwl (%eax),%eax
   141fa:	0f b7 c0             	movzwl %ax,%eax
   141fd:	25 00 f0 00 00       	and    $0xf000,%eax
   14202:	3d 00 40 00 00       	cmp    $0x4000,%eax
   14207:	74 38                	je     14241 <sys_rmdir+0x27b>
		iput(inode);
   14209:	83 ec 0c             	sub    $0xc,%esp
   1420c:	ff 74 24 24          	pushl  0x24(%esp)
   14210:	e8 87 a4 ff ff       	call   e69c <iput>
   14215:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   14218:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1421c:	83 ec 0c             	sub    $0xc,%esp
   1421f:	50                   	push   %eax
   14220:	e8 77 a4 ff ff       	call   e69c <iput>
   14225:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   14228:	83 ec 0c             	sub    $0xc,%esp
   1422b:	ff 74 24 28          	pushl  0x28(%esp)
   1422f:	e8 09 b4 ff ff       	call   f63d <brelse>
   14234:	83 c4 10             	add    $0x10,%esp
		return -ENOTDIR;
   14237:	b8 ec ff ff ff       	mov    $0xffffffec,%eax
   1423c:	e9 0c 01 00 00       	jmp    1434d <sys_rmdir+0x387>
	}
	// 若该需要被删除的目录不空，则也不能删除。于是放回包含要删除目录名的目录i节点和该要删除目录的i节点，释放高速缓冲块，返回
	// 出错码。
	if (!empty_dir(inode)) {
   14241:	83 ec 0c             	sub    $0xc,%esp
   14244:	ff 74 24 24          	pushl  0x24(%esp)
   14248:	e8 88 fb ff ff       	call   13dd5 <empty_dir>
   1424d:	83 c4 10             	add    $0x10,%esp
   14250:	85 c0                	test   %eax,%eax
   14252:	75 38                	jne    1428c <sys_rmdir+0x2c6>
		iput(inode);
   14254:	83 ec 0c             	sub    $0xc,%esp
   14257:	ff 74 24 24          	pushl  0x24(%esp)
   1425b:	e8 3c a4 ff ff       	call   e69c <iput>
   14260:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   14263:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14267:	83 ec 0c             	sub    $0xc,%esp
   1426a:	50                   	push   %eax
   1426b:	e8 2c a4 ff ff       	call   e69c <iput>
   14270:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   14273:	83 ec 0c             	sub    $0xc,%esp
   14276:	ff 74 24 28          	pushl  0x28(%esp)
   1427a:	e8 be b3 ff ff       	call   f63d <brelse>
   1427f:	83 c4 10             	add    $0x10,%esp
		return -ENOTEMPTY;
   14282:	b8 d9 ff ff ff       	mov    $0xffffffd9,%eax
   14287:	e9 c1 00 00 00       	jmp    1434d <sys_rmdir+0x387>
	}
	// 对于一个空目录，其目录项链接数应该为2（链接到上层目录和本目录）。若该需被删除目录的i节点的连接数不等于2,则显示警告信息，
	// 但删除操作仍然执行。于是置该需删除目录的目录项的i节点号字段为0,表示该目录项不再使用，并置含有该目录项的调整缓冲块已修改
	// 标志，并释放该缓冲块。然后再置被删除目录i节点的链接数为0（表示空闲），并置i节点已修改标志。
	if (inode->i_nlinks != 2)
   1428c:	8b 44 24 18          	mov    0x18(%esp),%eax
   14290:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   14294:	3c 02                	cmp    $0x2,%al
   14296:	74 1c                	je     142b4 <sys_rmdir+0x2ee>
		printk("empty directory has nlink!=2 (%d)", inode->i_nlinks);
   14298:	8b 44 24 18          	mov    0x18(%esp),%eax
   1429c:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   142a0:	0f b6 c0             	movzbl %al,%eax
   142a3:	83 ec 08             	sub    $0x8,%esp
   142a6:	50                   	push   %eax
   142a7:	68 c0 3a 02 00       	push   $0x23ac0
   142ac:	e8 96 49 ff ff       	call   8c47 <printk>
   142b1:	83 c4 10             	add    $0x10,%esp
	de->inode = 0;
   142b4:	8b 44 24 08          	mov    0x8(%esp),%eax
   142b8:	66 c7 00 00 00       	movw   $0x0,(%eax)
	bh->b_dirt = 1;
   142bd:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   142c1:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	brelse(bh);
   142c5:	83 ec 0c             	sub    $0xc,%esp
   142c8:	ff 74 24 28          	pushl  0x28(%esp)
   142cc:	e8 6c b3 ff ff       	call   f63d <brelse>
   142d1:	83 c4 10             	add    $0x10,%esp
	inode->i_nlinks = 0;
   142d4:	8b 44 24 18          	mov    0x18(%esp),%eax
   142d8:	c6 40 0d 00          	movb   $0x0,0xd(%eax)
	inode->i_dirt = 1;
   142dc:	8b 44 24 18          	mov    0x18(%esp),%eax
   142e0:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	// 再将包含被删除目录名的目录的i节点链接计数减1,修改其改变时间和修改时间为当前时间，并置该节点已修改标志。最后放回包含要删除
	// 目录名的目录i节点和该要删除目录的i节点，返回0（删除操作成功）。
	dir->i_nlinks--;
   142e4:	8b 44 24 0c          	mov    0xc(%esp),%eax
   142e8:	0f b6 50 0d          	movzbl 0xd(%eax),%edx
   142ec:	83 ea 01             	sub    $0x1,%edx
   142ef:	88 50 0d             	mov    %dl,0xd(%eax)
	dir->i_ctime = dir->i_mtime = CURRENT_TIME;
   142f2:	8b 5c 24 0c          	mov    0xc(%esp),%ebx
   142f6:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   142fa:	a1 00 eb 02 00       	mov    0x2eb00,%eax
   142ff:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
   14305:	01 d0                	add    %edx,%eax
   14307:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   1430c:	f7 e2                	mul    %edx
   1430e:	c1 ea 05             	shr    $0x5,%edx
   14311:	a1 04 eb 02 00       	mov    0x2eb04,%eax
   14316:	01 d0                	add    %edx,%eax
   14318:	89 41 08             	mov    %eax,0x8(%ecx)
   1431b:	8b 41 08             	mov    0x8(%ecx),%eax
   1431e:	89 43 2c             	mov    %eax,0x2c(%ebx)
	dir->i_dirt = 1;
   14321:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14325:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	iput(dir);
   14329:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1432d:	83 ec 0c             	sub    $0xc,%esp
   14330:	50                   	push   %eax
   14331:	e8 66 a3 ff ff       	call   e69c <iput>
   14336:	83 c4 10             	add    $0x10,%esp
	iput(inode);
   14339:	83 ec 0c             	sub    $0xc,%esp
   1433c:	ff 74 24 24          	pushl  0x24(%esp)
   14340:	e8 57 a3 ff ff       	call   e69c <iput>
   14345:	83 c4 10             	add    $0x10,%esp
	return 0;
   14348:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1434d:	83 c4 28             	add    $0x28,%esp
   14350:	5b                   	pop    %ebx
   14351:	c3                   	ret    

00014352 <sys_unlink>:
// 删除（释放）文件名对应的目录项。
// 从文件系统删除一个名字。如果是文件的最后一个链接，并且没有进程正打开该文件，则该文件也将被删除，并释放所占用的设备空间。
// 参数：name - 文件名（路径名）。
// 返回：成功则返回0,否则返回出错号。
int sys_unlink(const char * name)
{
   14352:	83 ec 2c             	sub    $0x2c,%esp
	struct dir_entry * de;

	// 首先检查参数的有效性并取路径名中顶层目录的i节点。如果找不到对应路径名中顶层目录的i节点，则返回出错码。如果最顶端
	// 文件名长度为0,则说明给出的路径名最后没有指定文件名，放回该目录i节点，返回出错码退出。如果在该目录中没有写的权限，
	// 则放回该目录i节点，返回访问许可出错码退出。如果不是超级用户，则返回访问许可出错码。
	if (!(dir = dir_namei(name, &namelen, &basename, NULL)))
   14355:	6a 00                	push   $0x0
   14357:	8d 44 24 18          	lea    0x18(%esp),%eax
   1435b:	50                   	push   %eax
   1435c:	8d 44 24 18          	lea    0x18(%esp),%eax
   14360:	50                   	push   %eax
   14361:	ff 74 24 3c          	pushl  0x3c(%esp)
   14365:	e8 0a ef ff ff       	call   13274 <dir_namei>
   1436a:	83 c4 10             	add    $0x10,%esp
   1436d:	89 44 24 0c          	mov    %eax,0xc(%esp)
   14371:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14375:	85 c0                	test   %eax,%eax
   14377:	75 0a                	jne    14383 <sys_unlink+0x31>
		return -ENOENT;
   14379:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   1437e:	e9 8d 02 00 00       	jmp    14610 <sys_unlink+0x2be>
	if (!namelen) {
   14383:	8b 44 24 10          	mov    0x10(%esp),%eax
   14387:	85 c0                	test   %eax,%eax
   14389:	75 1a                	jne    143a5 <sys_unlink+0x53>
		iput(dir);
   1438b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1438f:	83 ec 0c             	sub    $0xc,%esp
   14392:	50                   	push   %eax
   14393:	e8 04 a3 ff ff       	call   e69c <iput>
   14398:	83 c4 10             	add    $0x10,%esp
		return -ENOENT;
   1439b:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   143a0:	e9 6b 02 00 00       	jmp    14610 <sys_unlink+0x2be>
	}
	if (!permission(dir, MAY_WRITE)) {
   143a5:	8b 44 24 0c          	mov    0xc(%esp),%eax
   143a9:	83 ec 08             	sub    $0x8,%esp
   143ac:	6a 02                	push   $0x2
   143ae:	50                   	push   %eax
   143af:	e8 0f e6 ff ff       	call   129c3 <permission>
   143b4:	83 c4 10             	add    $0x10,%esp
   143b7:	85 c0                	test   %eax,%eax
   143b9:	75 1a                	jne    143d5 <sys_unlink+0x83>
		iput(dir);
   143bb:	8b 44 24 0c          	mov    0xc(%esp),%eax
   143bf:	83 ec 0c             	sub    $0xc,%esp
   143c2:	50                   	push   %eax
   143c3:	e8 d4 a2 ff ff       	call   e69c <iput>
   143c8:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   143cb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   143d0:	e9 3b 02 00 00       	jmp    14610 <sys_unlink+0x2be>
	}
	// 然后根据指定目录的i节点和目录名利用函数find_entry()寻找对应目录项，并返回包含该目录项的缓冲块指针bh、包含该目录
	// 项的目录的i节点指针dir和该目录项指针de。再根据该目录项de中的i节点号利用iget()函数得到对应的i节点inode。如果对应
	// 路径名上最后目录的名的目录项不存在，则释放包含该目录项的高速缓冲区，放回目录的i节点，返回文件不存在出错码，并退出。
	// 如果取目录项的i节点出错，则放回目录的i节点，并释放含有目录项的高速缓冲区，返回出错号。
	bh = find_entry(&dir, basename, namelen, &de);
   143d5:	8b 54 24 10          	mov    0x10(%esp),%edx
   143d9:	8b 44 24 14          	mov    0x14(%esp),%eax
   143dd:	8d 4c 24 08          	lea    0x8(%esp),%ecx
   143e1:	51                   	push   %ecx
   143e2:	52                   	push   %edx
   143e3:	50                   	push   %eax
   143e4:	8d 44 24 18          	lea    0x18(%esp),%eax
   143e8:	50                   	push   %eax
   143e9:	e8 09 e7 ff ff       	call   12af7 <find_entry>
   143ee:	83 c4 10             	add    $0x10,%esp
   143f1:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (!bh) {
   143f5:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   143fa:	75 1a                	jne    14416 <sys_unlink+0xc4>
		iput(dir);
   143fc:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14400:	83 ec 0c             	sub    $0xc,%esp
   14403:	50                   	push   %eax
   14404:	e8 93 a2 ff ff       	call   e69c <iput>
   14409:	83 c4 10             	add    $0x10,%esp
		return -ENOENT;
   1440c:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   14411:	e9 fa 01 00 00       	jmp    14610 <sys_unlink+0x2be>
	}
	if (!(inode = iget(dir->i_dev, de->inode))) {
   14416:	8b 44 24 08          	mov    0x8(%esp),%eax
   1441a:	0f b7 00             	movzwl (%eax),%eax
   1441d:	0f b7 d0             	movzwl %ax,%edx
   14420:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14424:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   14428:	0f b7 c0             	movzwl %ax,%eax
   1442b:	83 ec 08             	sub    $0x8,%esp
   1442e:	52                   	push   %edx
   1442f:	50                   	push   %eax
   14430:	e8 f9 a5 ff ff       	call   ea2e <iget>
   14435:	83 c4 10             	add    $0x10,%esp
   14438:	89 44 24 18          	mov    %eax,0x18(%esp)
   1443c:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   14441:	75 29                	jne    1446c <sys_unlink+0x11a>
		iput(dir);
   14443:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14447:	83 ec 0c             	sub    $0xc,%esp
   1444a:	50                   	push   %eax
   1444b:	e8 4c a2 ff ff       	call   e69c <iput>
   14450:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   14453:	83 ec 0c             	sub    $0xc,%esp
   14456:	ff 74 24 28          	pushl  0x28(%esp)
   1445a:	e8 de b1 ff ff       	call   f63d <brelse>
   1445f:	83 c4 10             	add    $0x10,%esp
		return -ENOENT;
   14462:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   14467:	e9 a4 01 00 00       	jmp    14610 <sys_unlink+0x2be>
	// 此时我们已有包含要被删除目录项的目录i节点dir、要被删除目录项的i节点inode和要被删除目录项指针de。下面我们通过对这3
	// 个对象中信息的检查来验证删除操作的可行性。
	// 若该目录设置了受限删除标志并且进程的有效用户id（euid）不是root，并且进程的有效用户id（euid）不等于该i节点的用户
	// id，并且进程的euid也不等于目录i节点的用户id，则表示当前进程没有权限删除该目录，于是放回包含要删除目录名的目录i节点
	// 和该要删除目录的i节点，然后释放高速缓冲区，返回出错码。
	if ((dir->i_mode & S_ISVTX) && !suser() &&
   1446c:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14470:	0f b7 00             	movzwl (%eax),%eax
   14473:	0f b7 c0             	movzwl %ax,%eax
   14476:	25 00 02 00 00       	and    $0x200,%eax
   1447b:	85 c0                	test   %eax,%eax
   1447d:	74 7b                	je     144fa <sys_unlink+0x1a8>
   1447f:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   14484:	0f b7 80 ce 02 00 00 	movzwl 0x2ce(%eax),%eax
   1448b:	66 85 c0             	test   %ax,%ax
   1448e:	74 6a                	je     144fa <sys_unlink+0x1a8>
	    current->euid != inode->i_uid &&
   14490:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   14495:	0f b7 90 ce 02 00 00 	movzwl 0x2ce(%eax),%edx
   1449c:	8b 44 24 18          	mov    0x18(%esp),%eax
   144a0:	0f b7 40 02          	movzwl 0x2(%eax),%eax
	// 此时我们已有包含要被删除目录项的目录i节点dir、要被删除目录项的i节点inode和要被删除目录项指针de。下面我们通过对这3
	// 个对象中信息的检查来验证删除操作的可行性。
	// 若该目录设置了受限删除标志并且进程的有效用户id（euid）不是root，并且进程的有效用户id（euid）不等于该i节点的用户
	// id，并且进程的euid也不等于目录i节点的用户id，则表示当前进程没有权限删除该目录，于是放回包含要删除目录名的目录i节点
	// 和该要删除目录的i节点，然后释放高速缓冲区，返回出错码。
	if ((dir->i_mode & S_ISVTX) && !suser() &&
   144a4:	66 39 c2             	cmp    %ax,%dx
   144a7:	74 51                	je     144fa <sys_unlink+0x1a8>
	    current->euid != inode->i_uid &&
	    current->euid != dir->i_uid) {
   144a9:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   144ae:	0f b7 90 ce 02 00 00 	movzwl 0x2ce(%eax),%edx
   144b5:	8b 44 24 0c          	mov    0xc(%esp),%eax
   144b9:	0f b7 40 02          	movzwl 0x2(%eax),%eax
	// 个对象中信息的检查来验证删除操作的可行性。
	// 若该目录设置了受限删除标志并且进程的有效用户id（euid）不是root，并且进程的有效用户id（euid）不等于该i节点的用户
	// id，并且进程的euid也不等于目录i节点的用户id，则表示当前进程没有权限删除该目录，于是放回包含要删除目录名的目录i节点
	// 和该要删除目录的i节点，然后释放高速缓冲区，返回出错码。
	if ((dir->i_mode & S_ISVTX) && !suser() &&
	    current->euid != inode->i_uid &&
   144bd:	66 39 c2             	cmp    %ax,%dx
   144c0:	74 38                	je     144fa <sys_unlink+0x1a8>
	    current->euid != dir->i_uid) {
		iput(dir);
   144c2:	8b 44 24 0c          	mov    0xc(%esp),%eax
   144c6:	83 ec 0c             	sub    $0xc,%esp
   144c9:	50                   	push   %eax
   144ca:	e8 cd a1 ff ff       	call   e69c <iput>
   144cf:	83 c4 10             	add    $0x10,%esp
		iput(inode);
   144d2:	83 ec 0c             	sub    $0xc,%esp
   144d5:	ff 74 24 24          	pushl  0x24(%esp)
   144d9:	e8 be a1 ff ff       	call   e69c <iput>
   144de:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   144e1:	83 ec 0c             	sub    $0xc,%esp
   144e4:	ff 74 24 28          	pushl  0x28(%esp)
   144e8:	e8 50 b1 ff ff       	call   f63d <brelse>
   144ed:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   144f0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   144f5:	e9 16 01 00 00       	jmp    14610 <sys_unlink+0x2be>
	}
	// 如果该指定文件名是一个目录，则也不能删除。放回该目录i节点和该文件名目录项的i节点，释放包含该目录项的缓冲块，返回出错号。
	if (S_ISDIR(inode->i_mode)) {
   144fa:	8b 44 24 18          	mov    0x18(%esp),%eax
   144fe:	0f b7 00             	movzwl (%eax),%eax
   14501:	0f b7 c0             	movzwl %ax,%eax
   14504:	25 00 f0 00 00       	and    $0xf000,%eax
   14509:	3d 00 40 00 00       	cmp    $0x4000,%eax
   1450e:	75 38                	jne    14548 <sys_unlink+0x1f6>
		iput(inode);
   14510:	83 ec 0c             	sub    $0xc,%esp
   14513:	ff 74 24 24          	pushl  0x24(%esp)
   14517:	e8 80 a1 ff ff       	call   e69c <iput>
   1451c:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   1451f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14523:	83 ec 0c             	sub    $0xc,%esp
   14526:	50                   	push   %eax
   14527:	e8 70 a1 ff ff       	call   e69c <iput>
   1452c:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   1452f:	83 ec 0c             	sub    $0xc,%esp
   14532:	ff 74 24 28          	pushl  0x28(%esp)
   14536:	e8 02 b1 ff ff       	call   f63d <brelse>
   1453b:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   1453e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14543:	e9 c8 00 00 00       	jmp    14610 <sys_unlink+0x2be>
	}
	// 如果该i节点的链接计数值已经为0,则显示警告信息，并修正其为1。
	if (!inode->i_nlinks) {
   14548:	8b 44 24 18          	mov    0x18(%esp),%eax
   1454c:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   14550:	84 c0                	test   %al,%al
   14552:	75 39                	jne    1458d <sys_unlink+0x23b>
		printk("Deleting nonexistent file (%04x:%d), %d\n",
			inode->i_dev, inode->i_num, inode->i_nlinks);
   14554:	8b 44 24 18          	mov    0x18(%esp),%eax
   14558:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
		brelse(bh);
		return -EPERM;
	}
	// 如果该i节点的链接计数值已经为0,则显示警告信息，并修正其为1。
	if (!inode->i_nlinks) {
		printk("Deleting nonexistent file (%04x:%d), %d\n",
   1455c:	0f b6 c8             	movzbl %al,%ecx
			inode->i_dev, inode->i_num, inode->i_nlinks);
   1455f:	8b 44 24 18          	mov    0x18(%esp),%eax
   14563:	0f b7 40 32          	movzwl 0x32(%eax),%eax
		brelse(bh);
		return -EPERM;
	}
	// 如果该i节点的链接计数值已经为0,则显示警告信息，并修正其为1。
	if (!inode->i_nlinks) {
		printk("Deleting nonexistent file (%04x:%d), %d\n",
   14567:	0f b7 d0             	movzwl %ax,%edx
			inode->i_dev, inode->i_num, inode->i_nlinks);
   1456a:	8b 44 24 18          	mov    0x18(%esp),%eax
   1456e:	0f b7 40 30          	movzwl 0x30(%eax),%eax
		brelse(bh);
		return -EPERM;
	}
	// 如果该i节点的链接计数值已经为0,则显示警告信息，并修正其为1。
	if (!inode->i_nlinks) {
		printk("Deleting nonexistent file (%04x:%d), %d\n",
   14572:	0f b7 c0             	movzwl %ax,%eax
   14575:	51                   	push   %ecx
   14576:	52                   	push   %edx
   14577:	50                   	push   %eax
   14578:	68 e4 3a 02 00       	push   $0x23ae4
   1457d:	e8 c5 46 ff ff       	call   8c47 <printk>
   14582:	83 c4 10             	add    $0x10,%esp
			inode->i_dev, inode->i_num, inode->i_nlinks);
		inode->i_nlinks = 1;
   14585:	8b 44 24 18          	mov    0x18(%esp),%eax
   14589:	c6 40 0d 01          	movb   $0x1,0xd(%eax)
	}
	// 现在我们可以删除文件名对应的目录项了。于是将该文件名目录项中的i节点号字段置为0,表示释放该目录项，并设置包含该目录项的缓
	// 冲块已修改标志，释放该高速缓冲块。
	de->inode = 0;
   1458d:	8b 44 24 08          	mov    0x8(%esp),%eax
   14591:	66 c7 00 00 00       	movw   $0x0,(%eax)
	bh->b_dirt = 1;
   14596:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1459a:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	brelse(bh);
   1459e:	83 ec 0c             	sub    $0xc,%esp
   145a1:	ff 74 24 28          	pushl  0x28(%esp)
   145a5:	e8 93 b0 ff ff       	call   f63d <brelse>
   145aa:	83 c4 10             	add    $0x10,%esp
	// 然后把文件名对应i节点的链接数减1,置已修改标志，更新改变时间为当前时间。最后放回该i节点和目录的i节点，返回0（成功）。如果
	// 是文件的最后一个链接，即i节点链接数减1后等于0,并且此时没有进程正打开该文件，那么在调用iput()放回i节点时，该文件也将被删除
	// 并释放所占用的设备空间。参见fs/inode.c。
	inode->i_nlinks--;
   145ad:	8b 44 24 18          	mov    0x18(%esp),%eax
   145b1:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   145b5:	8d 50 ff             	lea    -0x1(%eax),%edx
   145b8:	8b 44 24 18          	mov    0x18(%esp),%eax
   145bc:	88 50 0d             	mov    %dl,0xd(%eax)
	inode->i_dirt = 1;
   145bf:	8b 44 24 18          	mov    0x18(%esp),%eax
   145c3:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	inode->i_ctime = CURRENT_TIME;
   145c7:	a1 00 eb 02 00       	mov    0x2eb00,%eax
   145cc:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
   145d2:	01 d0                	add    %edx,%eax
   145d4:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   145d9:	f7 e2                	mul    %edx
   145db:	c1 ea 05             	shr    $0x5,%edx
   145de:	a1 04 eb 02 00       	mov    0x2eb04,%eax
   145e3:	01 c2                	add    %eax,%edx
   145e5:	8b 44 24 18          	mov    0x18(%esp),%eax
   145e9:	89 50 2c             	mov    %edx,0x2c(%eax)
	iput(inode);
   145ec:	83 ec 0c             	sub    $0xc,%esp
   145ef:	ff 74 24 24          	pushl  0x24(%esp)
   145f3:	e8 a4 a0 ff ff       	call   e69c <iput>
   145f8:	83 c4 10             	add    $0x10,%esp
	iput(dir);
   145fb:	8b 44 24 0c          	mov    0xc(%esp),%eax
   145ff:	83 ec 0c             	sub    $0xc,%esp
   14602:	50                   	push   %eax
   14603:	e8 94 a0 ff ff       	call   e69c <iput>
   14608:	83 c4 10             	add    $0x10,%esp
	return 0;
   1460b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14610:	83 c4 2c             	add    $0x2c,%esp
   14613:	c3                   	ret    

00014614 <sys_symlink>:
// 建立符号链接。
// 为一个已存在文件创建一个符号链接（也称为软连接 - hard link）。
// 参数：oldname - 原路径名；newname - 新的路径名。
// 返回：若成功则返回0，否则返回出错号。
int sys_symlink(const char * oldname, const char * newname)
{
   14614:	53                   	push   %ebx
   14615:	83 ec 38             	sub    $0x38,%esp
	char c;

	// 首先查找新路径名的最顶层目录的i节点dir，并返回最后的文件名及其长度。如果目录的i节点没有找到，则返回出错号。如果新路径名
	// 中不包括文件名，则放回新路径名目录的i节点，返回出错号。另外，如果用户没有在新目录中写的权限，则也不能建立连接，于是放回
	// 新路径名目录的i节点，返回出错号。
	dir = dir_namei(newname, &namelen, &basename, NULL);
   14618:	6a 00                	push   $0x0
   1461a:	8d 44 24 14          	lea    0x14(%esp),%eax
   1461e:	50                   	push   %eax
   1461f:	8d 44 24 14          	lea    0x14(%esp),%eax
   14623:	50                   	push   %eax
   14624:	ff 74 24 50          	pushl  0x50(%esp)
   14628:	e8 47 ec ff ff       	call   13274 <dir_namei>
   1462d:	83 c4 10             	add    $0x10,%esp
   14630:	89 44 24 14          	mov    %eax,0x14(%esp)
	if (!dir)
   14634:	8b 44 24 14          	mov    0x14(%esp),%eax
   14638:	85 c0                	test   %eax,%eax
   1463a:	75 0a                	jne    14646 <sys_symlink+0x32>
		return -EACCES;
   1463c:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
   14641:	e9 33 03 00 00       	jmp    14979 <sys_symlink+0x365>
	if (!namelen) {
   14646:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1464a:	85 c0                	test   %eax,%eax
   1464c:	75 1a                	jne    14668 <sys_symlink+0x54>
		iput(dir);
   1464e:	8b 44 24 14          	mov    0x14(%esp),%eax
   14652:	83 ec 0c             	sub    $0xc,%esp
   14655:	50                   	push   %eax
   14656:	e8 41 a0 ff ff       	call   e69c <iput>
   1465b:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   1465e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14663:	e9 11 03 00 00       	jmp    14979 <sys_symlink+0x365>
	}
	if (!permission(dir, MAY_WRITE)) {
   14668:	8b 44 24 14          	mov    0x14(%esp),%eax
   1466c:	83 ec 08             	sub    $0x8,%esp
   1466f:	6a 02                	push   $0x2
   14671:	50                   	push   %eax
   14672:	e8 4c e3 ff ff       	call   129c3 <permission>
   14677:	83 c4 10             	add    $0x10,%esp
   1467a:	85 c0                	test   %eax,%eax
   1467c:	75 1a                	jne    14698 <sys_symlink+0x84>
		iput(dir);
   1467e:	8b 44 24 14          	mov    0x14(%esp),%eax
   14682:	83 ec 0c             	sub    $0xc,%esp
   14685:	50                   	push   %eax
   14686:	e8 11 a0 ff ff       	call   e69c <iput>
   1468b:	83 c4 10             	add    $0x10,%esp
		return -EACCES;
   1468e:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
   14693:	e9 e1 02 00 00       	jmp    14979 <sys_symlink+0x365>
	}
	// 现在我们在目录指定设备上申请一个新的i节点，并设置该i节点模式为符号链接类型以及进程规定的模式屏蔽码。并且设置该i节点已修
	// 改标志。
	if (!(inode = new_inode(dir->i_dev))) {
   14698:	8b 44 24 14          	mov    0x14(%esp),%eax
   1469c:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   146a0:	0f b7 c0             	movzwl %ax,%eax
   146a3:	83 ec 0c             	sub    $0xc,%esp
   146a6:	50                   	push   %eax
   146a7:	e8 2c 0a 00 00       	call   150d8 <new_inode>
   146ac:	83 c4 10             	add    $0x10,%esp
   146af:	89 44 24 28          	mov    %eax,0x28(%esp)
   146b3:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   146b8:	75 1a                	jne    146d4 <sys_symlink+0xc0>
		iput(dir);
   146ba:	8b 44 24 14          	mov    0x14(%esp),%eax
   146be:	83 ec 0c             	sub    $0xc,%esp
   146c1:	50                   	push   %eax
   146c2:	e8 d5 9f ff ff       	call   e69c <iput>
   146c7:	83 c4 10             	add    $0x10,%esp
		return -ENOSPC;
   146ca:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   146cf:	e9 a5 02 00 00       	jmp    14979 <sys_symlink+0x365>
	}
	inode->i_mode = S_IFLNK | (0777 & ~current->umask);
   146d4:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   146d9:	0f b7 80 30 03 00 00 	movzwl 0x330(%eax),%eax
   146e0:	f7 d0                	not    %eax
   146e2:	66 25 ff 01          	and    $0x1ff,%ax
   146e6:	66 0d 00 a0          	or     $0xa000,%ax
   146ea:	89 c2                	mov    %eax,%edx
   146ec:	8b 44 24 28          	mov    0x28(%esp),%eax
   146f0:	66 89 10             	mov    %dx,(%eax)
	inode->i_dirt = 1;
   146f3:	8b 44 24 28          	mov    0x28(%esp),%eax
   146f7:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	// 为了保存符号链接路径名字符串信息，我们需要为该i节点申请一个磁盘块，并让i节点的第1个直接块号i_zone[0]等于得到的逻辑块号。
	// 然后置i节点已修改标志。如果申请失败则放回对应目录的i节点；复位新申请的i节点链接计数；放回该新的i节点，返回没有空间出错码
	// 退出。
	if (!(inode->i_zone[0] = new_block(inode->i_dev))) {
   146fb:	8b 44 24 28          	mov    0x28(%esp),%eax
   146ff:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   14703:	0f b7 c0             	movzwl %ax,%eax
   14706:	83 ec 0c             	sub    $0xc,%esp
   14709:	50                   	push   %eax
   1470a:	e8 94 06 00 00       	call   14da3 <new_block>
   1470f:	83 c4 10             	add    $0x10,%esp
   14712:	89 c2                	mov    %eax,%edx
   14714:	8b 44 24 28          	mov    0x28(%esp),%eax
   14718:	66 89 50 0e          	mov    %dx,0xe(%eax)
   1471c:	8b 44 24 28          	mov    0x28(%esp),%eax
   14720:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   14724:	66 85 c0             	test   %ax,%ax
   14727:	75 3b                	jne    14764 <sys_symlink+0x150>
		iput(dir);
   14729:	8b 44 24 14          	mov    0x14(%esp),%eax
   1472d:	83 ec 0c             	sub    $0xc,%esp
   14730:	50                   	push   %eax
   14731:	e8 66 9f ff ff       	call   e69c <iput>
   14736:	83 c4 10             	add    $0x10,%esp
		inode->i_nlinks--;
   14739:	8b 44 24 28          	mov    0x28(%esp),%eax
   1473d:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   14741:	8d 50 ff             	lea    -0x1(%eax),%edx
   14744:	8b 44 24 28          	mov    0x28(%esp),%eax
   14748:	88 50 0d             	mov    %dl,0xd(%eax)
		iput(inode);
   1474b:	83 ec 0c             	sub    $0xc,%esp
   1474e:	ff 74 24 34          	pushl  0x34(%esp)
   14752:	e8 45 9f ff ff       	call   e69c <iput>
   14757:	83 c4 10             	add    $0x10,%esp
		return -ENOSPC;
   1475a:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   1475f:	e9 15 02 00 00       	jmp    14979 <sys_symlink+0x365>
	}
	inode->i_dirt = 1;
   14764:	8b 44 24 28          	mov    0x28(%esp),%eax
   14768:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	// 然后从设备上读取新申请的磁盘块（目的是把对应块放到高速缓冲区中）。若出错，则放回对应目录的i节点；复位新申请的i节点链接计数；
	// 放回该新的i节点，返回没有空间出错码退出。
	if (!(name_block = bread(inode->i_dev, inode->i_zone[0]))) {
   1476c:	8b 44 24 28          	mov    0x28(%esp),%eax
   14770:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   14774:	0f b7 d0             	movzwl %ax,%edx
   14777:	8b 44 24 28          	mov    0x28(%esp),%eax
   1477b:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   1477f:	0f b7 c0             	movzwl %ax,%eax
   14782:	83 ec 08             	sub    $0x8,%esp
   14785:	52                   	push   %edx
   14786:	50                   	push   %eax
   14787:	e8 07 af ff ff       	call   f693 <bread>
   1478c:	83 c4 10             	add    $0x10,%esp
   1478f:	89 44 24 24          	mov    %eax,0x24(%esp)
   14793:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
   14798:	75 3b                	jne    147d5 <sys_symlink+0x1c1>
		iput(dir);
   1479a:	8b 44 24 14          	mov    0x14(%esp),%eax
   1479e:	83 ec 0c             	sub    $0xc,%esp
   147a1:	50                   	push   %eax
   147a2:	e8 f5 9e ff ff       	call   e69c <iput>
   147a7:	83 c4 10             	add    $0x10,%esp
		inode->i_nlinks--;
   147aa:	8b 44 24 28          	mov    0x28(%esp),%eax
   147ae:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   147b2:	8d 50 ff             	lea    -0x1(%eax),%edx
   147b5:	8b 44 24 28          	mov    0x28(%esp),%eax
   147b9:	88 50 0d             	mov    %dl,0xd(%eax)
		iput(inode);
   147bc:	83 ec 0c             	sub    $0xc,%esp
   147bf:	ff 74 24 34          	pushl  0x34(%esp)
   147c3:	e8 d4 9e ff ff       	call   e69c <iput>
   147c8:	83 c4 10             	add    $0x10,%esp
		return -ERROR;
   147cb:	b8 9d ff ff ff       	mov    $0xffffff9d,%eax
   147d0:	e9 a4 01 00 00       	jmp    14979 <sys_symlink+0x365>
	}
	// 现在我们可以把符号链接名字字符串放入这个盘块中了。盘块长度为1024字节，因此默认符号链接名长度最大也只能是1024字节。我们把用
	// 户空间中的符号链接名字符串复制到盘块所在的缓冲块中，并置缓冲块已修改标志。为防止用户提供的字符串没有以NULL结尾，我们在缓冲块
	// 数据区最后一个字节处放上一个NULL。然后释放该缓冲块，并设置i节点对应文件中数据长度等于符号链接名字符串长度，并置i节点已修改
	// 标志。
	i = 0;
   147d5:	c7 44 24 2c 00 00 00 	movl   $0x0,0x2c(%esp)
   147dc:	00 
	while (i < 1023 && (c = get_fs_byte(oldname++)))
   147dd:	eb 1b                	jmp    147fa <sys_symlink+0x1e6>
		name_block->b_data[i++] = c;
   147df:	8b 44 24 24          	mov    0x24(%esp),%eax
   147e3:	8b 08                	mov    (%eax),%ecx
   147e5:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   147e9:	8d 50 01             	lea    0x1(%eax),%edx
   147ec:	89 54 24 2c          	mov    %edx,0x2c(%esp)
   147f0:	8d 14 01             	lea    (%ecx,%eax,1),%edx
   147f3:	0f b6 44 24 23       	movzbl 0x23(%esp),%eax
   147f8:	88 02                	mov    %al,(%edx)
	// 现在我们可以把符号链接名字字符串放入这个盘块中了。盘块长度为1024字节，因此默认符号链接名长度最大也只能是1024字节。我们把用
	// 户空间中的符号链接名字符串复制到盘块所在的缓冲块中，并置缓冲块已修改标志。为防止用户提供的字符串没有以NULL结尾，我们在缓冲块
	// 数据区最后一个字节处放上一个NULL。然后释放该缓冲块，并设置i节点对应文件中数据长度等于符号链接名字符串长度，并置i节点已修改
	// 标志。
	i = 0;
	while (i < 1023 && (c = get_fs_byte(oldname++)))
   147fa:	81 7c 24 2c fe 03 00 	cmpl   $0x3fe,0x2c(%esp)
   14801:	00 
   14802:	7f 22                	jg     14826 <sys_symlink+0x212>
   14804:	8b 44 24 40          	mov    0x40(%esp),%eax
   14808:	8d 50 01             	lea    0x1(%eax),%edx
   1480b:	89 54 24 40          	mov    %edx,0x40(%esp)
   1480f:	83 ec 0c             	sub    $0xc,%esp
   14812:	50                   	push   %eax
   14813:	e8 5a e1 ff ff       	call   12972 <get_fs_byte>
   14818:	83 c4 10             	add    $0x10,%esp
   1481b:	88 44 24 23          	mov    %al,0x23(%esp)
   1481f:	80 7c 24 23 00       	cmpb   $0x0,0x23(%esp)
   14824:	75 b9                	jne    147df <sys_symlink+0x1cb>
		name_block->b_data[i++] = c;
	name_block->b_data[i] = 0;
   14826:	8b 44 24 24          	mov    0x24(%esp),%eax
   1482a:	8b 10                	mov    (%eax),%edx
   1482c:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   14830:	01 d0                	add    %edx,%eax
   14832:	c6 00 00             	movb   $0x0,(%eax)
	name_block->b_dirt = 1;
   14835:	8b 44 24 24          	mov    0x24(%esp),%eax
   14839:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	brelse(name_block);
   1483d:	83 ec 0c             	sub    $0xc,%esp
   14840:	ff 74 24 30          	pushl  0x30(%esp)
   14844:	e8 f4 ad ff ff       	call   f63d <brelse>
   14849:	83 c4 10             	add    $0x10,%esp
	inode->i_size = i;
   1484c:	8b 54 24 2c          	mov    0x2c(%esp),%edx
   14850:	8b 44 24 28          	mov    0x28(%esp),%eax
   14854:	89 50 04             	mov    %edx,0x4(%eax)
	inode->i_dirt = 1;
   14857:	8b 44 24 28          	mov    0x28(%esp),%eax
   1485b:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	// 然后我们搜索一下路径名指定的符号链接名是否已经存在。若已经存在则不能创建同名目录项i节点。如果对应符号链接文件名已经存在，则
	// 释放包含该目录项的缓冲区块，复位新申请的i节点连接计数，并施加目录的i节点，返回文件已经存在的出错码退出。
	bh = find_entry(&dir, basename, namelen, &de);
   1485f:	8b 54 24 0c          	mov    0xc(%esp),%edx
   14863:	8b 44 24 10          	mov    0x10(%esp),%eax
   14867:	8d 4c 24 18          	lea    0x18(%esp),%ecx
   1486b:	51                   	push   %ecx
   1486c:	52                   	push   %edx
   1486d:	50                   	push   %eax
   1486e:	8d 44 24 20          	lea    0x20(%esp),%eax
   14872:	50                   	push   %eax
   14873:	e8 7f e2 ff ff       	call   12af7 <find_entry>
   14878:	83 c4 10             	add    $0x10,%esp
   1487b:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (bh) {
   1487f:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   14884:	74 4a                	je     148d0 <sys_symlink+0x2bc>
		inode->i_nlinks--;
   14886:	8b 44 24 28          	mov    0x28(%esp),%eax
   1488a:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   1488e:	8d 50 ff             	lea    -0x1(%eax),%edx
   14891:	8b 44 24 28          	mov    0x28(%esp),%eax
   14895:	88 50 0d             	mov    %dl,0xd(%eax)
		iput(inode);
   14898:	83 ec 0c             	sub    $0xc,%esp
   1489b:	ff 74 24 34          	pushl  0x34(%esp)
   1489f:	e8 f8 9d ff ff       	call   e69c <iput>
   148a4:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   148a7:	83 ec 0c             	sub    $0xc,%esp
   148aa:	ff 74 24 28          	pushl  0x28(%esp)
   148ae:	e8 8a ad ff ff       	call   f63d <brelse>
   148b3:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   148b6:	8b 44 24 14          	mov    0x14(%esp),%eax
   148ba:	83 ec 0c             	sub    $0xc,%esp
   148bd:	50                   	push   %eax
   148be:	e8 d9 9d ff ff       	call   e69c <iput>
   148c3:	83 c4 10             	add    $0x10,%esp
		return -EEXIST;
   148c6:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
   148cb:	e9 a9 00 00 00       	jmp    14979 <sys_symlink+0x365>
	}
	// 现在我们在指定目录中新添加一个目录项，用于存放新建符号链接文件名的i节点号和目录名。如果失败（包含该目录项的高速缓冲区指针为
	// NULL），则放回目录的i节点；所申请的i节点引用链接计数复位，并放回该i节点。返回出错码退出。
	bh = add_entry(dir, basename, namelen, &de);
   148d0:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   148d4:	8b 54 24 10          	mov    0x10(%esp),%edx
   148d8:	8b 44 24 14          	mov    0x14(%esp),%eax
   148dc:	8d 5c 24 18          	lea    0x18(%esp),%ebx
   148e0:	53                   	push   %ebx
   148e1:	51                   	push   %ecx
   148e2:	52                   	push   %edx
   148e3:	50                   	push   %eax
   148e4:	e8 4c e4 ff ff       	call   12d35 <add_entry>
   148e9:	83 c4 10             	add    $0x10,%esp
   148ec:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (!bh) {
   148f0:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   148f5:	75 38                	jne    1492f <sys_symlink+0x31b>
		inode->i_nlinks--;
   148f7:	8b 44 24 28          	mov    0x28(%esp),%eax
   148fb:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   148ff:	8d 50 ff             	lea    -0x1(%eax),%edx
   14902:	8b 44 24 28          	mov    0x28(%esp),%eax
   14906:	88 50 0d             	mov    %dl,0xd(%eax)
		iput(inode);
   14909:	83 ec 0c             	sub    $0xc,%esp
   1490c:	ff 74 24 34          	pushl  0x34(%esp)
   14910:	e8 87 9d ff ff       	call   e69c <iput>
   14915:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   14918:	8b 44 24 14          	mov    0x14(%esp),%eax
   1491c:	83 ec 0c             	sub    $0xc,%esp
   1491f:	50                   	push   %eax
   14920:	e8 77 9d ff ff       	call   e69c <iput>
   14925:	83 c4 10             	add    $0x10,%esp
		return -ENOSPC;
   14928:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   1492d:	eb 4a                	jmp    14979 <sys_symlink+0x365>
	}
	// 最后令该新目录项的i节点字段等于新i节点号，并置高速缓冲块已修改标志，释放高速缓冲块，放回目录和新的i节点，最后返回0（成功）。
	de->inode = inode->i_num;
   1492f:	8b 44 24 18          	mov    0x18(%esp),%eax
   14933:	8b 54 24 28          	mov    0x28(%esp),%edx
   14937:	0f b7 52 32          	movzwl 0x32(%edx),%edx
   1493b:	66 89 10             	mov    %dx,(%eax)
	bh->b_dirt = 1;
   1493e:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14942:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	brelse(bh);
   14946:	83 ec 0c             	sub    $0xc,%esp
   14949:	ff 74 24 28          	pushl  0x28(%esp)
   1494d:	e8 eb ac ff ff       	call   f63d <brelse>
   14952:	83 c4 10             	add    $0x10,%esp
	iput(dir);
   14955:	8b 44 24 14          	mov    0x14(%esp),%eax
   14959:	83 ec 0c             	sub    $0xc,%esp
   1495c:	50                   	push   %eax
   1495d:	e8 3a 9d ff ff       	call   e69c <iput>
   14962:	83 c4 10             	add    $0x10,%esp
	iput(inode);
   14965:	83 ec 0c             	sub    $0xc,%esp
   14968:	ff 74 24 34          	pushl  0x34(%esp)
   1496c:	e8 2b 9d ff ff       	call   e69c <iput>
   14971:	83 c4 10             	add    $0x10,%esp
	return 0;
   14974:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14979:	83 c4 38             	add    $0x38,%esp
   1497c:	5b                   	pop    %ebx
   1497d:	c3                   	ret    

0001497e <sys_link>:
// 为文件建立一个文件名目录项。
// 为一个已存在的文件创建一个新链接（也称为硬连接 - hard link）。
// 参数：oldname - 原路径名；newname - 新的路径名。
// 返回：若成功则返回0,否则返回出错号。
int sys_link(const char * oldname, const char * newname)
{
   1497e:	53                   	push   %ebx
   1497f:	83 ec 28             	sub    $0x28,%esp
	const char * basename;
	int namelen;

	// 首先对原文件名进行有效性验证，它应该存在并且不是一个目录名。所以我们先取原文件路径名对应的i节点oldinode。如果为0，则
	// 表示出错，返回出错号。如果原路径名对应的是一个目录名，则放回该i节点，也返回出错号。
	oldinode = namei(oldname);
   14982:	83 ec 0c             	sub    $0xc,%esp
   14985:	ff 74 24 3c          	pushl  0x3c(%esp)
   14989:	e8 d0 ea ff ff       	call   1345e <namei>
   1498e:	83 c4 10             	add    $0x10,%esp
   14991:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	if (!oldinode)
   14995:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   1499a:	75 0a                	jne    149a6 <sys_link+0x28>
		return -ENOENT;
   1499c:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
   149a1:	e9 52 02 00 00       	jmp    14bf8 <sys_link+0x27a>
	if (S_ISDIR(oldinode->i_mode)) {
   149a6:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   149aa:	0f b7 00             	movzwl (%eax),%eax
   149ad:	0f b7 c0             	movzwl %ax,%eax
   149b0:	25 00 f0 00 00       	and    $0xf000,%eax
   149b5:	3d 00 40 00 00       	cmp    $0x4000,%eax
   149ba:	75 19                	jne    149d5 <sys_link+0x57>
		iput(oldinode);
   149bc:	83 ec 0c             	sub    $0xc,%esp
   149bf:	ff 74 24 28          	pushl  0x28(%esp)
   149c3:	e8 d4 9c ff ff       	call   e69c <iput>
   149c8:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   149cb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   149d0:	e9 23 02 00 00       	jmp    14bf8 <sys_link+0x27a>
	}
	// 然后查找新路径名的最顶层目录的i节点dir，并返回最后的文件名及其长度。如果目录的i节点没有找到，则放回原路径名的i节点，返
	// 回出错号。如果新路径名中不包括文件名，则放回原路径名i节点和新路径名目录的i节点，返回出错号。
	dir = dir_namei(newname, &namelen, &basename, NULL);
   149d5:	6a 00                	push   $0x0
   149d7:	8d 44 24 10          	lea    0x10(%esp),%eax
   149db:	50                   	push   %eax
   149dc:	8d 44 24 10          	lea    0x10(%esp),%eax
   149e0:	50                   	push   %eax
   149e1:	ff 74 24 40          	pushl  0x40(%esp)
   149e5:	e8 8a e8 ff ff       	call   13274 <dir_namei>
   149ea:	83 c4 10             	add    $0x10,%esp
   149ed:	89 44 24 10          	mov    %eax,0x10(%esp)
	if (!dir) {
   149f1:	8b 44 24 10          	mov    0x10(%esp),%eax
   149f5:	85 c0                	test   %eax,%eax
   149f7:	75 19                	jne    14a12 <sys_link+0x94>
		iput(oldinode);
   149f9:	83 ec 0c             	sub    $0xc,%esp
   149fc:	ff 74 24 28          	pushl  0x28(%esp)
   14a00:	e8 97 9c ff ff       	call   e69c <iput>
   14a05:	83 c4 10             	add    $0x10,%esp
		return -EACCES;
   14a08:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
   14a0d:	e9 e6 01 00 00       	jmp    14bf8 <sys_link+0x27a>
	}
	if (!namelen) {
   14a12:	8b 44 24 08          	mov    0x8(%esp),%eax
   14a16:	85 c0                	test   %eax,%eax
   14a18:	75 29                	jne    14a43 <sys_link+0xc5>
		iput(oldinode);
   14a1a:	83 ec 0c             	sub    $0xc,%esp
   14a1d:	ff 74 24 28          	pushl  0x28(%esp)
   14a21:	e8 76 9c ff ff       	call   e69c <iput>
   14a26:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   14a29:	8b 44 24 10          	mov    0x10(%esp),%eax
   14a2d:	83 ec 0c             	sub    $0xc,%esp
   14a30:	50                   	push   %eax
   14a31:	e8 66 9c ff ff       	call   e69c <iput>
   14a36:	83 c4 10             	add    $0x10,%esp
		return -EPERM;
   14a39:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14a3e:	e9 b5 01 00 00       	jmp    14bf8 <sys_link+0x27a>
	}
	// 我们不能跨设备建立硬链接。因此如果新路径名顶层目录的设备号与原路径名的设备号不一样，则放回新路径名目录的i节点和原路径名
	// 的i节点，返回出错号。另外，如果用户没有在新目录中写的权限，则也不能建立连接，于是放回新路径名目录的i节点和原路径名的i节点
	// 返回出错号。
	if (dir->i_dev != oldinode->i_dev) {
   14a43:	8b 44 24 10          	mov    0x10(%esp),%eax
   14a47:	0f b7 50 30          	movzwl 0x30(%eax),%edx
   14a4b:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14a4f:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   14a53:	66 39 c2             	cmp    %ax,%dx
   14a56:	74 29                	je     14a81 <sys_link+0x103>
		iput(dir);
   14a58:	8b 44 24 10          	mov    0x10(%esp),%eax
   14a5c:	83 ec 0c             	sub    $0xc,%esp
   14a5f:	50                   	push   %eax
   14a60:	e8 37 9c ff ff       	call   e69c <iput>
   14a65:	83 c4 10             	add    $0x10,%esp
		iput(oldinode);
   14a68:	83 ec 0c             	sub    $0xc,%esp
   14a6b:	ff 74 24 28          	pushl  0x28(%esp)
   14a6f:	e8 28 9c ff ff       	call   e69c <iput>
   14a74:	83 c4 10             	add    $0x10,%esp
		return -EXDEV;
   14a77:	b8 ee ff ff ff       	mov    $0xffffffee,%eax
   14a7c:	e9 77 01 00 00       	jmp    14bf8 <sys_link+0x27a>
	}
	if (!permission(dir, MAY_WRITE)) {
   14a81:	8b 44 24 10          	mov    0x10(%esp),%eax
   14a85:	83 ec 08             	sub    $0x8,%esp
   14a88:	6a 02                	push   $0x2
   14a8a:	50                   	push   %eax
   14a8b:	e8 33 df ff ff       	call   129c3 <permission>
   14a90:	83 c4 10             	add    $0x10,%esp
   14a93:	85 c0                	test   %eax,%eax
   14a95:	75 29                	jne    14ac0 <sys_link+0x142>
		iput(dir);
   14a97:	8b 44 24 10          	mov    0x10(%esp),%eax
   14a9b:	83 ec 0c             	sub    $0xc,%esp
   14a9e:	50                   	push   %eax
   14a9f:	e8 f8 9b ff ff       	call   e69c <iput>
   14aa4:	83 c4 10             	add    $0x10,%esp
		iput(oldinode);
   14aa7:	83 ec 0c             	sub    $0xc,%esp
   14aaa:	ff 74 24 28          	pushl  0x28(%esp)
   14aae:	e8 e9 9b ff ff       	call   e69c <iput>
   14ab3:	83 c4 10             	add    $0x10,%esp
		return -EACCES;
   14ab6:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
   14abb:	e9 38 01 00 00       	jmp    14bf8 <sys_link+0x27a>
	}
	// 现在查询该新路径名是否已经存在，如果存在则也不能建立链接。于是释放包含该已存在目录项的高速缓冲块，放回新路径名目录的i节点
	// 和原路径名的i节点，返回出错号。
	bh = find_entry(&dir, basename, namelen, &de);
   14ac0:	8b 54 24 08          	mov    0x8(%esp),%edx
   14ac4:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14ac8:	8d 4c 24 14          	lea    0x14(%esp),%ecx
   14acc:	51                   	push   %ecx
   14acd:	52                   	push   %edx
   14ace:	50                   	push   %eax
   14acf:	8d 44 24 1c          	lea    0x1c(%esp),%eax
   14ad3:	50                   	push   %eax
   14ad4:	e8 1e e0 ff ff       	call   12af7 <find_entry>
   14ad9:	83 c4 10             	add    $0x10,%esp
   14adc:	89 44 24 18          	mov    %eax,0x18(%esp)
	if (bh) {
   14ae0:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   14ae5:	74 38                	je     14b1f <sys_link+0x1a1>
		brelse(bh);
   14ae7:	83 ec 0c             	sub    $0xc,%esp
   14aea:	ff 74 24 24          	pushl  0x24(%esp)
   14aee:	e8 4a ab ff ff       	call   f63d <brelse>
   14af3:	83 c4 10             	add    $0x10,%esp
		iput(dir);
   14af6:	8b 44 24 10          	mov    0x10(%esp),%eax
   14afa:	83 ec 0c             	sub    $0xc,%esp
   14afd:	50                   	push   %eax
   14afe:	e8 99 9b ff ff       	call   e69c <iput>
   14b03:	83 c4 10             	add    $0x10,%esp
		iput(oldinode);
   14b06:	83 ec 0c             	sub    $0xc,%esp
   14b09:	ff 74 24 28          	pushl  0x28(%esp)
   14b0d:	e8 8a 9b ff ff       	call   e69c <iput>
   14b12:	83 c4 10             	add    $0x10,%esp
		return -EEXIST;
   14b15:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
   14b1a:	e9 d9 00 00 00       	jmp    14bf8 <sys_link+0x27a>
	}
	// 现在所有条件都满足了，于是我们在新目录中添加一个目录项。若失败则放回该目录的i节点和原路径名的i节点，返回出错号。否则初始
	// 设置该目录项的i节点号等于原路径名的i节点号，并置包含该新添目录的缓冲块已修改标志，释放该缓冲块，放回目录的i节点。
	bh = add_entry(dir, basename, namelen, &de);
   14b1f:	8b 4c 24 08          	mov    0x8(%esp),%ecx
   14b23:	8b 54 24 0c          	mov    0xc(%esp),%edx
   14b27:	8b 44 24 10          	mov    0x10(%esp),%eax
   14b2b:	8d 5c 24 14          	lea    0x14(%esp),%ebx
   14b2f:	53                   	push   %ebx
   14b30:	51                   	push   %ecx
   14b31:	52                   	push   %edx
   14b32:	50                   	push   %eax
   14b33:	e8 fd e1 ff ff       	call   12d35 <add_entry>
   14b38:	83 c4 10             	add    $0x10,%esp
   14b3b:	89 44 24 18          	mov    %eax,0x18(%esp)
	if (!bh) {
   14b3f:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   14b44:	75 29                	jne    14b6f <sys_link+0x1f1>
		iput(dir);
   14b46:	8b 44 24 10          	mov    0x10(%esp),%eax
   14b4a:	83 ec 0c             	sub    $0xc,%esp
   14b4d:	50                   	push   %eax
   14b4e:	e8 49 9b ff ff       	call   e69c <iput>
   14b53:	83 c4 10             	add    $0x10,%esp
		iput(oldinode);
   14b56:	83 ec 0c             	sub    $0xc,%esp
   14b59:	ff 74 24 28          	pushl  0x28(%esp)
   14b5d:	e8 3a 9b ff ff       	call   e69c <iput>
   14b62:	83 c4 10             	add    $0x10,%esp
		return -ENOSPC;
   14b65:	b8 e4 ff ff ff       	mov    $0xffffffe4,%eax
   14b6a:	e9 89 00 00 00       	jmp    14bf8 <sys_link+0x27a>
	}
	de->inode = oldinode->i_num;
   14b6f:	8b 44 24 14          	mov    0x14(%esp),%eax
   14b73:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   14b77:	0f b7 52 32          	movzwl 0x32(%edx),%edx
   14b7b:	66 89 10             	mov    %dx,(%eax)
	bh->b_dirt = 1;
   14b7e:	8b 44 24 18          	mov    0x18(%esp),%eax
   14b82:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	brelse(bh);
   14b86:	83 ec 0c             	sub    $0xc,%esp
   14b89:	ff 74 24 24          	pushl  0x24(%esp)
   14b8d:	e8 ab aa ff ff       	call   f63d <brelse>
   14b92:	83 c4 10             	add    $0x10,%esp
	iput(dir);
   14b95:	8b 44 24 10          	mov    0x10(%esp),%eax
   14b99:	83 ec 0c             	sub    $0xc,%esp
   14b9c:	50                   	push   %eax
   14b9d:	e8 fa 9a ff ff       	call   e69c <iput>
   14ba2:	83 c4 10             	add    $0x10,%esp
	// 再将原节点的链接计数加1,修改其改变时间为当前时间，并设置i节点已修改标志。最后放回原路径名的i节点，并返回0（成功）。
	oldinode->i_nlinks++;
   14ba5:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14ba9:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   14bad:	8d 50 01             	lea    0x1(%eax),%edx
   14bb0:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14bb4:	88 50 0d             	mov    %dl,0xd(%eax)
	oldinode->i_ctime = CURRENT_TIME;
   14bb7:	a1 00 eb 02 00       	mov    0x2eb00,%eax
   14bbc:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
   14bc2:	01 d0                	add    %edx,%eax
   14bc4:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   14bc9:	f7 e2                	mul    %edx
   14bcb:	c1 ea 05             	shr    $0x5,%edx
   14bce:	a1 04 eb 02 00       	mov    0x2eb04,%eax
   14bd3:	01 c2                	add    %eax,%edx
   14bd5:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14bd9:	89 50 2c             	mov    %edx,0x2c(%eax)
	oldinode->i_dirt = 1;
   14bdc:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14be0:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	iput(oldinode);
   14be4:	83 ec 0c             	sub    $0xc,%esp
   14be7:	ff 74 24 28          	pushl  0x28(%esp)
   14beb:	e8 ac 9a ff ff       	call   e69c <iput>
   14bf0:	83 c4 10             	add    $0x10,%esp
	return 0;
   14bf3:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14bf8:	83 c4 28             	add    $0x28,%esp
   14bfb:	5b                   	pop    %ebx
   14bfc:	c3                   	ret    

00014bfd <memset>:

// 用字符填写指定长度内存块.
// 用字符c填写s指向的内存区域,共填count字节.
// %0 - eax(字符c),%1 - edi(内存地址),%2 - ecx(字节数count).
static inline void * memset(void * s, char c, int count)
{
   14bfd:	57                   	push   %edi
   14bfe:	83 ec 04             	sub    $0x4,%esp
   14c01:	8b 44 24 10          	mov    0x10(%esp),%eax
   14c05:	88 04 24             	mov    %al,(%esp)
__asm__(
   14c08:	0f b6 04 24          	movzbl (%esp),%eax
   14c0c:	8b 54 24 0c          	mov    0xc(%esp),%edx
   14c10:	8b 4c 24 14          	mov    0x14(%esp),%ecx
   14c14:	89 d7                	mov    %edx,%edi
   14c16:	fc                   	cld    
   14c17:	57                   	push   %edi
   14c18:	f3 aa                	rep stos %al,%es:(%edi)
   14c1a:	5f                   	pop    %edi
		"rep\n\t"											// 重复ecx指定的次数,执行.
		"stosb\n\t"											// 将al中字符存入es:[edi]中,并且edi++.
		"popl %%edi"
		::"a" (c), "D" (s), "c" (count)
		:);
return s;
   14c1b:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   14c1f:	83 c4 04             	add    $0x4,%esp
   14c22:	5f                   	pop    %edi
   14c23:	c3                   	ret    

00014c24 <free_block>:

// 释放设备dev上数据区中的逻辑块block。
// 复位指定逻辑块block对应的逻辑块位图位。成功则返回1,否则返回0.
// 参数：dev是设备号，block是逻辑块号（盘块号）。
int free_block(int dev, int block)
{
   14c24:	83 ec 1c             	sub    $0x1c,%esp
	struct buffer_head * bh;

	// 首先取设备dev上文件系统的超级块信息，根据其中数据区开始逻辑块号和文件系统中逻辑块总数信息判断参数block的有效
	// 性。如果指定设备超级块不存在，则出错停机。若逻辑块号小于盘上数据区第1个逻辑块号或者大于设备上总逻辑块数，也出
	// 错停机。
	if (!(sb = get_super(dev)))             						// fs/super.c
   14c27:	83 ec 0c             	sub    $0xc,%esp
   14c2a:	ff 74 24 2c          	pushl  0x2c(%esp)
   14c2e:	e8 d1 ae ff ff       	call   fb04 <get_super>
   14c33:	83 c4 10             	add    $0x10,%esp
   14c36:	89 44 24 0c          	mov    %eax,0xc(%esp)
   14c3a:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   14c3f:	75 10                	jne    14c51 <free_block+0x2d>
		panic("trying to free block on nonexistent device");
   14c41:	83 ec 0c             	sub    $0xc,%esp
   14c44:	68 10 3b 02 00       	push   $0x23b10
   14c49:	e8 ba 3f ff ff       	call   8c08 <panic>
   14c4e:	83 c4 10             	add    $0x10,%esp
	if (block < sb->s_firstdatazone || block >= sb->s_nzones)
   14c51:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14c55:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   14c59:	0f b7 c0             	movzwl %ax,%eax
   14c5c:	3b 44 24 24          	cmp    0x24(%esp),%eax
   14c60:	7f 11                	jg     14c73 <free_block+0x4f>
   14c62:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14c66:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   14c6a:	0f b7 c0             	movzwl %ax,%eax
   14c6d:	3b 44 24 24          	cmp    0x24(%esp),%eax
   14c71:	7f 10                	jg     14c83 <free_block+0x5f>
		panic("trying to free block not in datazone");
   14c73:	83 ec 0c             	sub    $0xc,%esp
   14c76:	68 3c 3b 02 00       	push   $0x23b3c
   14c7b:	e8 88 3f ff ff       	call   8c08 <panic>
   14c80:	83 c4 10             	add    $0x10,%esp
	bh = get_hash_table(dev, block);
   14c83:	83 ec 08             	sub    $0x8,%esp
   14c86:	ff 74 24 2c          	pushl  0x2c(%esp)
   14c8a:	ff 74 24 2c          	pushl  0x2c(%esp)
   14c8e:	e8 6d a7 ff ff       	call   f400 <get_hash_table>
   14c93:	83 c4 10             	add    $0x10,%esp
   14c96:	89 44 24 08          	mov    %eax,0x8(%esp)
	// 然后从hash表中寻找该块数据。若找到了则判断其有效性，并清已修改和更新标志，释放该数据块。该段代码的主要用途是如果
	// 该逻辑块目前存在于高速缓冲区中，就释放对应的缓冲块。
	if (bh) {
   14c9a:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   14c9f:	74 50                	je     14cf1 <free_block+0xcd>
		if (bh->b_count > 1) {          							// 如果引用次数大于1,则调用brelse()。
   14ca1:	8b 44 24 08          	mov    0x8(%esp),%eax
   14ca5:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
   14ca9:	3c 01                	cmp    $0x1,%al
   14cab:	76 19                	jbe    14cc6 <free_block+0xa2>
			brelse(bh);             								// b_count--后退出，该块还有人用。
   14cad:	83 ec 0c             	sub    $0xc,%esp
   14cb0:	ff 74 24 14          	pushl  0x14(%esp)
   14cb4:	e8 84 a9 ff ff       	call   f63d <brelse>
   14cb9:	83 c4 10             	add    $0x10,%esp
			return 0;
   14cbc:	b8 00 00 00 00       	mov    $0x0,%eax
   14cc1:	e9 d9 00 00 00       	jmp    14d9f <free_block+0x17b>
		}
		bh->b_dirt = 0;                   							// 否则复位已修改和已更新标志。
   14cc6:	8b 44 24 08          	mov    0x8(%esp),%eax
   14cca:	c6 40 0b 00          	movb   $0x0,0xb(%eax)
		bh->b_uptodate = 0;
   14cce:	8b 44 24 08          	mov    0x8(%esp),%eax
   14cd2:	c6 40 0a 00          	movb   $0x0,0xa(%eax)
		if (bh->b_count)                							// 若此时b_count为1,则调用brelse()释放之。
   14cd6:	8b 44 24 08          	mov    0x8(%esp),%eax
   14cda:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
   14cde:	84 c0                	test   %al,%al
   14ce0:	74 0f                	je     14cf1 <free_block+0xcd>
			brelse(bh);
   14ce2:	83 ec 0c             	sub    $0xc,%esp
   14ce5:	ff 74 24 14          	pushl  0x14(%esp)
   14ce9:	e8 4f a9 ff ff       	call   f63d <brelse>
   14cee:	83 c4 10             	add    $0x10,%esp
	}
	// 接着我们复位block在逻辑块位图中的位（置0）。先计算block在数据区开始算起的数据逻辑块号（从1开始计数）。然后对逻辑
	// 块（区块）位图进行操作，复位对应的位。如果对应位原来就是0,则出错停机。由于1个缓冲块有1024字节，即8192位，因此
	// block/8192即可计算出指定块block在逻辑位图中的哪个块上。而block&8191可以得到block在逻辑块位图当前块中的位偏移
	// 位置。
	block -= sb->s_firstdatazone - 1 ;
   14cf1:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14cf5:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   14cf9:	0f b7 c0             	movzwl %ax,%eax
   14cfc:	83 e8 01             	sub    $0x1,%eax
   14cff:	29 44 24 24          	sub    %eax,0x24(%esp)
	if (clear_bit(block & 8191, sb->s_zmap[block / 8192]->b_data)) {
   14d03:	8b 44 24 24          	mov    0x24(%esp),%eax
   14d07:	25 ff 1f 00 00       	and    $0x1fff,%eax
   14d0c:	89 c1                	mov    %eax,%ecx
   14d0e:	8b 44 24 24          	mov    0x24(%esp),%eax
   14d12:	8d 90 ff 1f 00 00    	lea    0x1fff(%eax),%edx
   14d18:	85 c0                	test   %eax,%eax
   14d1a:	0f 48 c2             	cmovs  %edx,%eax
   14d1d:	c1 f8 0d             	sar    $0xd,%eax
   14d20:	89 c2                	mov    %eax,%edx
   14d22:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14d26:	83 c2 0c             	add    $0xc,%edx
   14d29:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   14d2d:	8b 10                	mov    (%eax),%edx
   14d2f:	b8 00 00 00 00       	mov    $0x0,%eax
   14d34:	0f b3 0a             	btr    %ecx,(%edx)
   14d37:	0f 93 c0             	setae  %al
   14d3a:	85 c0                	test   %eax,%eax
   14d3c:	74 39                	je     14d77 <free_block+0x153>
		printk("block (%04x:%d) ", dev, block + sb->s_firstdatazone - 1);
   14d3e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14d42:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   14d46:	0f b7 d0             	movzwl %ax,%edx
   14d49:	8b 44 24 24          	mov    0x24(%esp),%eax
   14d4d:	01 d0                	add    %edx,%eax
   14d4f:	83 e8 01             	sub    $0x1,%eax
   14d52:	83 ec 04             	sub    $0x4,%esp
   14d55:	50                   	push   %eax
   14d56:	ff 74 24 28          	pushl  0x28(%esp)
   14d5a:	68 61 3b 02 00       	push   $0x23b61
   14d5f:	e8 e3 3e ff ff       	call   8c47 <printk>
   14d64:	83 c4 10             	add    $0x10,%esp
		printk("free_block: bit already cleared\n");
   14d67:	83 ec 0c             	sub    $0xc,%esp
   14d6a:	68 74 3b 02 00       	push   $0x23b74
   14d6f:	e8 d3 3e ff ff       	call   8c47 <printk>
   14d74:	83 c4 10             	add    $0x10,%esp
	}
	// 最后置相应逻辑块位图所在缓冲区已修改标志。
	sb->s_zmap[block / 8192]->b_dirt = 1;
   14d77:	8b 44 24 24          	mov    0x24(%esp),%eax
   14d7b:	8d 90 ff 1f 00 00    	lea    0x1fff(%eax),%edx
   14d81:	85 c0                	test   %eax,%eax
   14d83:	0f 48 c2             	cmovs  %edx,%eax
   14d86:	c1 f8 0d             	sar    $0xd,%eax
   14d89:	89 c2                	mov    %eax,%edx
   14d8b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14d8f:	83 c2 0c             	add    $0xc,%edx
   14d92:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   14d96:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	return 1;
   14d9a:	b8 01 00 00 00       	mov    $0x1,%eax
}
   14d9f:	83 c4 1c             	add    $0x1c,%esp
   14da2:	c3                   	ret    

00014da3 <new_block>:
// 向设备申请一个逻辑块(盘块,区块).
// 函数首先取得设备的超级块,并在超级块中的逻辑块位图中寻找第一个0值位(代表一个空闲逻辑块).然后置位对应逻辑块在逻辑位图
// 中的位.接着为该逻辑块在缓冲区中取得一块对应缓冲块.最后将该缓冲块清零,并设置其已更新标志和已修改标志.并返回逻辑块号.
// 函数执行成功则返回逻辑块号(盘块号),否则返回0.
int new_block(int dev)
{
   14da3:	57                   	push   %edi
   14da4:	56                   	push   %esi
   14da5:	53                   	push   %ebx
   14da6:	83 ec 20             	sub    $0x20,%esp
	int i,j;

	// 首先获取设备dev的超级块.如果指定设备的超级块不存在,则出错停机.然后扫描文件系统的8块逻辑块位图,寻找首个0值位,以寻找
	// 空闲逻辑块,获取设置该逻辑块的块号.如果全部扫描完8块逻辑块位图的所有位(i >=8 或 j >= 8192)还没有找到0值位或者位图
	// 所在的缓冲块指针无效(bn = NULL)则返回0退出(没有空闲逻辑块).
	if (!(sb = get_super(dev)))
   14da9:	83 ec 0c             	sub    $0xc,%esp
   14dac:	ff 74 24 3c          	pushl  0x3c(%esp)
   14db0:	e8 4f ad ff ff       	call   fb04 <get_super>
   14db5:	83 c4 10             	add    $0x10,%esp
   14db8:	89 44 24 10          	mov    %eax,0x10(%esp)
   14dbc:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   14dc1:	75 10                	jne    14dd3 <new_block+0x30>
		panic("trying to get new block from nonexistant device");
   14dc3:	83 ec 0c             	sub    $0xc,%esp
   14dc6:	68 98 3b 02 00       	push   $0x23b98
   14dcb:	e8 38 3e ff ff       	call   8c08 <panic>
   14dd0:	83 c4 10             	add    $0x10,%esp
	j = 8192;
   14dd3:	c7 44 24 14 00 20 00 	movl   $0x2000,0x14(%esp)
   14dda:	00 
	for (i = 0 ; i < 8 ; i++)
   14ddb:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   14de2:	00 
   14de3:	eb 5a                	jmp    14e3f <new_block+0x9c>
		if (bh = sb->s_zmap[i])
   14de5:	8b 44 24 10          	mov    0x10(%esp),%eax
   14de9:	8b 54 24 18          	mov    0x18(%esp),%edx
   14ded:	83 c2 0c             	add    $0xc,%edx
   14df0:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   14df4:	89 44 24 1c          	mov    %eax,0x1c(%esp)
   14df8:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   14dfd:	74 3b                	je     14e3a <new_block+0x97>
			if ((j = find_first_zero(bh->b_data)) < 8192)
   14dff:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14e03:	8b 18                	mov    (%eax),%ebx
   14e05:	b9 00 00 00 00       	mov    $0x0,%ecx
   14e0a:	89 de                	mov    %ebx,%esi
   14e0c:	fc                   	cld    
   14e0d:	ad                   	lods   %ds:(%esi),%eax
   14e0e:	f7 d0                	not    %eax
   14e10:	0f bc d0             	bsf    %eax,%edx
   14e13:	74 04                	je     14e19 <new_block+0x76>
   14e15:	01 d1                	add    %edx,%ecx
   14e17:	eb 0b                	jmp    14e24 <new_block+0x81>
   14e19:	83 c1 20             	add    $0x20,%ecx
   14e1c:	81 f9 00 20 00 00    	cmp    $0x2000,%ecx
   14e22:	7c e9                	jl     14e0d <new_block+0x6a>
   14e24:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
   14e28:	8b 44 24 0c          	mov    0xc(%esp),%eax
   14e2c:	89 44 24 14          	mov    %eax,0x14(%esp)
   14e30:	81 7c 24 14 ff 1f 00 	cmpl   $0x1fff,0x14(%esp)
   14e37:	00 
   14e38:	7e 0e                	jle    14e48 <new_block+0xa5>
	// 空闲逻辑块,获取设置该逻辑块的块号.如果全部扫描完8块逻辑块位图的所有位(i >=8 或 j >= 8192)还没有找到0值位或者位图
	// 所在的缓冲块指针无效(bn = NULL)则返回0退出(没有空闲逻辑块).
	if (!(sb = get_super(dev)))
		panic("trying to get new block from nonexistant device");
	j = 8192;
	for (i = 0 ; i < 8 ; i++)
   14e3a:	83 44 24 18 01       	addl   $0x1,0x18(%esp)
   14e3f:	83 7c 24 18 07       	cmpl   $0x7,0x18(%esp)
   14e44:	7e 9f                	jle    14de5 <new_block+0x42>
   14e46:	eb 01                	jmp    14e49 <new_block+0xa6>
		if (bh = sb->s_zmap[i])
			if ((j = find_first_zero(bh->b_data)) < 8192)
				break;
   14e48:	90                   	nop
	if (i >= 8 || !bh || j >= 8192)
   14e49:	83 7c 24 18 07       	cmpl   $0x7,0x18(%esp)
   14e4e:	7f 11                	jg     14e61 <new_block+0xbe>
   14e50:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   14e55:	74 0a                	je     14e61 <new_block+0xbe>
   14e57:	81 7c 24 14 ff 1f 00 	cmpl   $0x1fff,0x14(%esp)
   14e5e:	00 
   14e5f:	7e 0a                	jle    14e6b <new_block+0xc8>
		return 0;
   14e61:	b8 00 00 00 00       	mov    $0x0,%eax
   14e66:	e9 ef 00 00 00       	jmp    14f5a <new_block+0x1b7>
	// 接着设置找到的新逻辑块j对应逻辑块位图中的位.若对应位已经置位,则出错停机.否则置存在位图的对应缓冲区块已修改标志.因为
	// 逻辑块位图仅表示盘上数据区中逻辑块的占用情况,即逻辑块位图中位偏移值表示从数据区开始处算起的块号,因此这里需要加上数据
	// 区第1个逻辑块的块号,把j转换成逻辑块号.此时如果新逻辑块大于该设备上的总逻辑块数,则说明指定逻辑块在对应设备上不存在.
	// 申请失败,返回0退出.
	if (set_bit(j, bh->b_data))
   14e6b:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14e6f:	8b 08                	mov    (%eax),%ecx
   14e71:	b8 00 00 00 00       	mov    $0x0,%eax
   14e76:	8b 54 24 14          	mov    0x14(%esp),%edx
   14e7a:	0f ab 11             	bts    %edx,(%ecx)
   14e7d:	0f 92 c0             	setb   %al
   14e80:	85 c0                	test   %eax,%eax
   14e82:	74 10                	je     14e94 <new_block+0xf1>
		panic("new_block: bit already set");
   14e84:	83 ec 0c             	sub    $0xc,%esp
   14e87:	68 c8 3b 02 00       	push   $0x23bc8
   14e8c:	e8 77 3d ff ff       	call   8c08 <panic>
   14e91:	83 c4 10             	add    $0x10,%esp
	bh->b_dirt = 1;
   14e94:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14e98:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	j += i * 8192 + sb->s_firstdatazone - 1;
   14e9c:	8b 44 24 18          	mov    0x18(%esp),%eax
   14ea0:	c1 e0 0d             	shl    $0xd,%eax
   14ea3:	89 c2                	mov    %eax,%edx
   14ea5:	8b 44 24 10          	mov    0x10(%esp),%eax
   14ea9:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   14ead:	0f b7 c0             	movzwl %ax,%eax
   14eb0:	01 d0                	add    %edx,%eax
   14eb2:	83 e8 01             	sub    $0x1,%eax
   14eb5:	01 44 24 14          	add    %eax,0x14(%esp)
	if (j >= sb->s_nzones)
   14eb9:	8b 44 24 10          	mov    0x10(%esp),%eax
   14ebd:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   14ec1:	0f b7 c0             	movzwl %ax,%eax
   14ec4:	3b 44 24 14          	cmp    0x14(%esp),%eax
   14ec8:	7f 0a                	jg     14ed4 <new_block+0x131>
		return 0;
   14eca:	b8 00 00 00 00       	mov    $0x0,%eax
   14ecf:	e9 86 00 00 00       	jmp    14f5a <new_block+0x1b7>
	// 然后在高速缓冲区中为该设备上指定的逻辑块号取得一个缓冲块,并返回缓冲块头指针.
	// 因为刚取得的逻辑块其引用次数一定为1(getblk()中会设置),因此若不为1则停机.最后将新逻辑块清零,并设置其已更新标志和已
	// 修改标志.然后释放对应缓冲块,返回逻辑块号.
	if (!(bh = getblk(dev, j)))
   14ed4:	83 ec 08             	sub    $0x8,%esp
   14ed7:	ff 74 24 1c          	pushl  0x1c(%esp)
   14edb:	ff 74 24 3c          	pushl  0x3c(%esp)
   14edf:	e8 a0 a5 ff ff       	call   f484 <getblk>
   14ee4:	83 c4 10             	add    $0x10,%esp
   14ee7:	89 44 24 1c          	mov    %eax,0x1c(%esp)
   14eeb:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   14ef0:	75 10                	jne    14f02 <new_block+0x15f>
		panic("new_block: cannot get block");
   14ef2:	83 ec 0c             	sub    $0xc,%esp
   14ef5:	68 e3 3b 02 00       	push   $0x23be3
   14efa:	e8 09 3d ff ff       	call   8c08 <panic>
   14eff:	83 c4 10             	add    $0x10,%esp
	if (bh->b_count != 1)
   14f02:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14f06:	0f b6 40 0c          	movzbl 0xc(%eax),%eax
   14f0a:	3c 01                	cmp    $0x1,%al
   14f0c:	74 10                	je     14f1e <new_block+0x17b>
		panic("new block: count is != 1");
   14f0e:	83 ec 0c             	sub    $0xc,%esp
   14f11:	68 ff 3b 02 00       	push   $0x23bff
   14f16:	e8 ed 3c ff ff       	call   8c08 <panic>
   14f1b:	83 c4 10             	add    $0x10,%esp
	clear_block(bh->b_data);
   14f1e:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14f22:	8b 00                	mov    (%eax),%eax
   14f24:	89 c3                	mov    %eax,%ebx
   14f26:	b8 00 00 00 00       	mov    $0x0,%eax
   14f2b:	ba 00 01 00 00       	mov    $0x100,%edx
   14f30:	89 d1                	mov    %edx,%ecx
   14f32:	89 df                	mov    %ebx,%edi
   14f34:	fc                   	cld    
   14f35:	f3 ab                	rep stos %eax,%es:(%edi)
	bh->b_uptodate = 1;
   14f37:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14f3b:	c6 40 0a 01          	movb   $0x1,0xa(%eax)
	bh->b_dirt = 1;
   14f3f:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   14f43:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	brelse(bh);
   14f47:	83 ec 0c             	sub    $0xc,%esp
   14f4a:	ff 74 24 28          	pushl  0x28(%esp)
   14f4e:	e8 ea a6 ff ff       	call   f63d <brelse>
   14f53:	83 c4 10             	add    $0x10,%esp
	return j;
   14f56:	8b 44 24 14          	mov    0x14(%esp),%eax
}
   14f5a:	83 c4 20             	add    $0x20,%esp
   14f5d:	5b                   	pop    %ebx
   14f5e:	5e                   	pop    %esi
   14f5f:	5f                   	pop    %edi
   14f60:	c3                   	ret    

00014f61 <free_inode>:

// 释放指定的i节点。
// 该函数首先判断参数给出的i节点号的有效性和可释放性。若i节点仍然在使用中则不能被释放。然后利用超级块信息对i节点位图进行
// 操作，复位i节点号对应的i节点位图中位，并清空i节点结构。
void free_inode(struct m_inode * inode)
{
   14f61:	83 ec 1c             	sub    $0x1c,%esp
	struct buffer_head * bh;

	// 首先判断参数给出的需要释放的i节点有效性或合法性。如果i节点指针=NULL，则退出。
	// 如果i节点上的设备号字段为0,说明该节点没有使用。于是用0清空对应i节点所占内存区并返回memset()定义在include/string.h
	// 处。这里表示用0填写inode指针指定处、长度是sizeof(*inode)的内存块。
	if (!inode)
   14f64:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
   14f69:	0f 84 64 01 00 00    	je     150d3 <free_inode+0x172>
		return;
	if (!inode->i_dev) {
   14f6f:	8b 44 24 20          	mov    0x20(%esp),%eax
   14f73:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   14f77:	66 85 c0             	test   %ax,%ax
   14f7a:	75 15                	jne    14f91 <free_inode+0x30>
		memset(inode, 0, sizeof(*inode));
   14f7c:	6a 3c                	push   $0x3c
   14f7e:	6a 00                	push   $0x0
   14f80:	ff 74 24 28          	pushl  0x28(%esp)
   14f84:	e8 74 fc ff ff       	call   14bfd <memset>
   14f89:	83 c4 0c             	add    $0xc,%esp
		return;
   14f8c:	e9 43 01 00 00       	jmp    150d4 <free_inode+0x173>
	}
	// 如果此i节点还有其他程序引用，则不释放，说明内核有问题，停机。如果文件连接数不为0,则表示还有其他文件目录项在使用该节点，
	// 因此也不应释放，而应该放回等。
	if (inode->i_count > 1) {
   14f91:	8b 44 24 20          	mov    0x20(%esp),%eax
   14f95:	0f b7 40 34          	movzwl 0x34(%eax),%eax
   14f99:	66 83 f8 01          	cmp    $0x1,%ax
   14f9d:	76 2c                	jbe    14fcb <free_inode+0x6a>
		printk("trying to free inode with count=%d\n", inode->i_count);
   14f9f:	8b 44 24 20          	mov    0x20(%esp),%eax
   14fa3:	0f b7 40 34          	movzwl 0x34(%eax),%eax
   14fa7:	0f b7 c0             	movzwl %ax,%eax
   14faa:	83 ec 08             	sub    $0x8,%esp
   14fad:	50                   	push   %eax
   14fae:	68 18 3c 02 00       	push   $0x23c18
   14fb3:	e8 8f 3c ff ff       	call   8c47 <printk>
   14fb8:	83 c4 10             	add    $0x10,%esp
		panic("free_inode");
   14fbb:	83 ec 0c             	sub    $0xc,%esp
   14fbe:	68 3c 3c 02 00       	push   $0x23c3c
   14fc3:	e8 40 3c ff ff       	call   8c08 <panic>
   14fc8:	83 c4 10             	add    $0x10,%esp
	}
	if (inode->i_nlinks)
   14fcb:	8b 44 24 20          	mov    0x20(%esp),%eax
   14fcf:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   14fd3:	84 c0                	test   %al,%al
   14fd5:	74 10                	je     14fe7 <free_inode+0x86>
		panic("trying to free inode with links");
   14fd7:	83 ec 0c             	sub    $0xc,%esp
   14fda:	68 48 3c 02 00       	push   $0x23c48
   14fdf:	e8 24 3c ff ff       	call   8c08 <panic>
   14fe4:	83 c4 10             	add    $0x10,%esp
	// 在判断完i节点的合理性之后，我们开始利用其超级块信息对其i节点位图进行操作。首先取i节点所在设备的超级块，测试设备是否存在。
	// 然后判断i节点号的范围是否正确，如果i节点号等于0或大于该设备上i节点总数，则出错（0号i节点保留没有使用）。如果该i节点对应
	// 的节点位图不存在，则出错。因为一个缓冲块的i节点位图有8192比特位。因此i_num>>13（即i_num/8192）可以得到当前i节点号所
	// 在的s_imap[]项，即所在盘块。
	if (!(sb = get_super(inode->i_dev)))
   14fe7:	8b 44 24 20          	mov    0x20(%esp),%eax
   14feb:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   14fef:	0f b7 c0             	movzwl %ax,%eax
   14ff2:	83 ec 0c             	sub    $0xc,%esp
   14ff5:	50                   	push   %eax
   14ff6:	e8 09 ab ff ff       	call   fb04 <get_super>
   14ffb:	83 c4 10             	add    $0x10,%esp
   14ffe:	89 44 24 0c          	mov    %eax,0xc(%esp)
   15002:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   15007:	75 10                	jne    15019 <free_inode+0xb8>
		panic("trying to free inode on nonexistent device");
   15009:	83 ec 0c             	sub    $0xc,%esp
   1500c:	68 68 3c 02 00       	push   $0x23c68
   15011:	e8 f2 3b ff ff       	call   8c08 <panic>
   15016:	83 c4 10             	add    $0x10,%esp
	if (inode->i_num < 1 || inode->i_num > sb->s_ninodes)
   15019:	8b 44 24 20          	mov    0x20(%esp),%eax
   1501d:	0f b7 40 32          	movzwl 0x32(%eax),%eax
   15021:	66 85 c0             	test   %ax,%ax
   15024:	74 14                	je     1503a <free_inode+0xd9>
   15026:	8b 44 24 20          	mov    0x20(%esp),%eax
   1502a:	0f b7 50 32          	movzwl 0x32(%eax),%edx
   1502e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15032:	0f b7 00             	movzwl (%eax),%eax
   15035:	66 39 c2             	cmp    %ax,%dx
   15038:	76 10                	jbe    1504a <free_inode+0xe9>
		panic("trying to free inode 0 or nonexistant inode");
   1503a:	83 ec 0c             	sub    $0xc,%esp
   1503d:	68 94 3c 02 00       	push   $0x23c94
   15042:	e8 c1 3b ff ff       	call   8c08 <panic>
   15047:	83 c4 10             	add    $0x10,%esp
	if (!(bh = sb->s_imap[inode->i_num >> 13]))
   1504a:	8b 44 24 20          	mov    0x20(%esp),%eax
   1504e:	0f b7 40 32          	movzwl 0x32(%eax),%eax
   15052:	66 c1 e8 0d          	shr    $0xd,%ax
   15056:	0f b7 d0             	movzwl %ax,%edx
   15059:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1505d:	83 c2 04             	add    $0x4,%edx
   15060:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   15064:	89 44 24 08          	mov    %eax,0x8(%esp)
   15068:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   1506d:	75 10                	jne    1507f <free_inode+0x11e>
		panic("nonexistent imap in superblock");
   1506f:	83 ec 0c             	sub    $0xc,%esp
   15072:	68 c0 3c 02 00       	push   $0x23cc0
   15077:	e8 8c 3b ff ff       	call   8c08 <panic>
   1507c:	83 c4 10             	add    $0x10,%esp
	// 现在我们复位i节点对应的节点位图中的位。如果该位已经等于0,则显示出错警告信息。最后置i节点位图所在缓冲区已修改标志，并清空
	// 该i节点结构所占内存区。
	if (clear_bit(inode->i_num & 8191, bh->b_data))
   1507f:	8b 44 24 20          	mov    0x20(%esp),%eax
   15083:	0f b7 40 32          	movzwl 0x32(%eax),%eax
   15087:	0f b7 c0             	movzwl %ax,%eax
   1508a:	25 ff 1f 00 00       	and    $0x1fff,%eax
   1508f:	89 c1                	mov    %eax,%ecx
   15091:	8b 44 24 08          	mov    0x8(%esp),%eax
   15095:	8b 10                	mov    (%eax),%edx
   15097:	b8 00 00 00 00       	mov    $0x0,%eax
   1509c:	0f b3 0a             	btr    %ecx,(%edx)
   1509f:	0f 93 c0             	setae  %al
   150a2:	85 c0                	test   %eax,%eax
   150a4:	74 10                	je     150b6 <free_inode+0x155>
		printk("free_inode: bit already cleared.\n\r");
   150a6:	83 ec 0c             	sub    $0xc,%esp
   150a9:	68 e0 3c 02 00       	push   $0x23ce0
   150ae:	e8 94 3b ff ff       	call   8c47 <printk>
   150b3:	83 c4 10             	add    $0x10,%esp
	bh->b_dirt = 1;
   150b6:	8b 44 24 08          	mov    0x8(%esp),%eax
   150ba:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	memset(inode, 0, sizeof(*inode));
   150be:	83 ec 04             	sub    $0x4,%esp
   150c1:	6a 3c                	push   $0x3c
   150c3:	6a 00                	push   $0x0
   150c5:	ff 74 24 2c          	pushl  0x2c(%esp)
   150c9:	e8 2f fb ff ff       	call   14bfd <memset>
   150ce:	83 c4 10             	add    $0x10,%esp
   150d1:	eb 01                	jmp    150d4 <free_inode+0x173>

	// 首先判断参数给出的需要释放的i节点有效性或合法性。如果i节点指针=NULL，则退出。
	// 如果i节点上的设备号字段为0,说明该节点没有使用。于是用0清空对应i节点所占内存区并返回memset()定义在include/string.h
	// 处。这里表示用0填写inode指针指定处、长度是sizeof(*inode)的内存块。
	if (!inode)
		return;
   150d3:	90                   	nop
	// 该i节点结构所占内存区。
	if (clear_bit(inode->i_num & 8191, bh->b_data))
		printk("free_inode: bit already cleared.\n\r");
	bh->b_dirt = 1;
	memset(inode, 0, sizeof(*inode));
}
   150d4:	83 c4 1c             	add    $0x1c,%esp
   150d7:	c3                   	ret    

000150d8 <new_inode>:

// 为设备dev建立一个新i节点。初始化并返回该新i节点的指针。
// 在内存i节点表中获取一个空闲i节点表项，并从i节点位图中找一个空闲i节点。
struct m_inode * new_inode(int dev)
{
   150d8:	56                   	push   %esi
   150d9:	53                   	push   %ebx
   150da:	83 ec 24             	sub    $0x24,%esp
	int i, j;

	// 首先从内在i节点表（inode_table）中获取一个空闲i节点项，并读取指定设备的超级块结构。然后扫描超级块中8块i节点位图，
	// 寻找第1个0位，寻找空闲节点，获取放置该i节点的节点号。如果全部扫描完还没找到，或者位图所在的缓冲块无效（bh = NULL）
	// 则放回先前申请的i节点表中的i节点，并返回空指针退出（没有空闲i节点）。
	if (!(inode = get_empty_inode()))
   150dd:	e8 76 97 ff ff       	call   e858 <get_empty_inode>
   150e2:	89 44 24 10          	mov    %eax,0x10(%esp)
   150e6:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   150eb:	75 0a                	jne    150f7 <new_inode+0x1f>
		return NULL;
   150ed:	b8 00 00 00 00       	mov    $0x0,%eax
   150f2:	e9 c5 01 00 00       	jmp    152bc <new_inode+0x1e4>
	if (!(sb = get_super(dev)))
   150f7:	83 ec 0c             	sub    $0xc,%esp
   150fa:	ff 74 24 3c          	pushl  0x3c(%esp)
   150fe:	e8 01 aa ff ff       	call   fb04 <get_super>
   15103:	83 c4 10             	add    $0x10,%esp
   15106:	89 44 24 0c          	mov    %eax,0xc(%esp)
   1510a:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   1510f:	75 10                	jne    15121 <new_inode+0x49>
		panic("new_inode with unknown device");
   15111:	83 ec 0c             	sub    $0xc,%esp
   15114:	68 03 3d 02 00       	push   $0x23d03
   15119:	e8 ea 3a ff ff       	call   8c08 <panic>
   1511e:	83 c4 10             	add    $0x10,%esp
	j = 8192;
   15121:	c7 44 24 14 00 20 00 	movl   $0x2000,0x14(%esp)
   15128:	00 
	for (i = 0 ; i < 8 ; i++)
   15129:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   15130:	00 
   15131:	eb 5a                	jmp    1518d <new_inode+0xb5>
		if (bh = sb->s_imap[i])
   15133:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15137:	8b 54 24 18          	mov    0x18(%esp),%edx
   1513b:	83 c2 04             	add    $0x4,%edx
   1513e:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   15142:	89 44 24 1c          	mov    %eax,0x1c(%esp)
   15146:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   1514b:	74 3b                	je     15188 <new_inode+0xb0>
			if ((j = find_first_zero(bh->b_data)) < 8192)
   1514d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   15151:	8b 18                	mov    (%eax),%ebx
   15153:	b9 00 00 00 00       	mov    $0x0,%ecx
   15158:	89 de                	mov    %ebx,%esi
   1515a:	fc                   	cld    
   1515b:	ad                   	lods   %ds:(%esi),%eax
   1515c:	f7 d0                	not    %eax
   1515e:	0f bc d0             	bsf    %eax,%edx
   15161:	74 04                	je     15167 <new_inode+0x8f>
   15163:	01 d1                	add    %edx,%ecx
   15165:	eb 0b                	jmp    15172 <new_inode+0x9a>
   15167:	83 c1 20             	add    $0x20,%ecx
   1516a:	81 f9 00 20 00 00    	cmp    $0x2000,%ecx
   15170:	7c e9                	jl     1515b <new_inode+0x83>
   15172:	89 4c 24 08          	mov    %ecx,0x8(%esp)
   15176:	8b 44 24 08          	mov    0x8(%esp),%eax
   1517a:	89 44 24 14          	mov    %eax,0x14(%esp)
   1517e:	81 7c 24 14 ff 1f 00 	cmpl   $0x1fff,0x14(%esp)
   15185:	00 
   15186:	7e 0e                	jle    15196 <new_inode+0xbe>
	if (!(inode = get_empty_inode()))
		return NULL;
	if (!(sb = get_super(dev)))
		panic("new_inode with unknown device");
	j = 8192;
	for (i = 0 ; i < 8 ; i++)
   15188:	83 44 24 18 01       	addl   $0x1,0x18(%esp)
   1518d:	83 7c 24 18 07       	cmpl   $0x7,0x18(%esp)
   15192:	7e 9f                	jle    15133 <new_inode+0x5b>
   15194:	eb 01                	jmp    15197 <new_inode+0xbf>
		if (bh = sb->s_imap[i])
			if ((j = find_first_zero(bh->b_data)) < 8192)
				break;
   15196:	90                   	nop
	if (!bh || j >= 8192 || j + i * 8192 > sb->s_ninodes) {
   15197:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   1519c:	74 27                	je     151c5 <new_inode+0xed>
   1519e:	81 7c 24 14 ff 1f 00 	cmpl   $0x1fff,0x14(%esp)
   151a5:	00 
   151a6:	7f 1d                	jg     151c5 <new_inode+0xed>
   151a8:	8b 44 24 18          	mov    0x18(%esp),%eax
   151ac:	c1 e0 0d             	shl    $0xd,%eax
   151af:	89 c2                	mov    %eax,%edx
   151b1:	8b 44 24 14          	mov    0x14(%esp),%eax
   151b5:	01 c2                	add    %eax,%edx
   151b7:	8b 44 24 0c          	mov    0xc(%esp),%eax
   151bb:	0f b7 00             	movzwl (%eax),%eax
   151be:	0f b7 c0             	movzwl %ax,%eax
   151c1:	39 c2                	cmp    %eax,%edx
   151c3:	7e 19                	jle    151de <new_inode+0x106>
		iput(inode);
   151c5:	83 ec 0c             	sub    $0xc,%esp
   151c8:	ff 74 24 1c          	pushl  0x1c(%esp)
   151cc:	e8 cb 94 ff ff       	call   e69c <iput>
   151d1:	83 c4 10             	add    $0x10,%esp
		return NULL;
   151d4:	b8 00 00 00 00       	mov    $0x0,%eax
   151d9:	e9 de 00 00 00       	jmp    152bc <new_inode+0x1e4>
	}
	// 现在我们已经找到了还未使用的i节点号j。于是置位i节点j对应的i节点位图相应比特位（如果已经置位，则出错）。然后置i节点
	// 位图所在缓冲块已修改标志。最后初始化该i节点结构（i_ctime是i节点内容改变时间）。
	if (set_bit(j, bh->b_data))
   151de:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   151e2:	8b 08                	mov    (%eax),%ecx
   151e4:	b8 00 00 00 00       	mov    $0x0,%eax
   151e9:	8b 54 24 14          	mov    0x14(%esp),%edx
   151ed:	0f ab 11             	bts    %edx,(%ecx)
   151f0:	0f 92 c0             	setb   %al
   151f3:	85 c0                	test   %eax,%eax
   151f5:	74 10                	je     15207 <new_inode+0x12f>
		panic("new_inode: bit already set");
   151f7:	83 ec 0c             	sub    $0xc,%esp
   151fa:	68 21 3d 02 00       	push   $0x23d21
   151ff:	e8 04 3a ff ff       	call   8c08 <panic>
   15204:	83 c4 10             	add    $0x10,%esp
	bh->b_dirt = 1;
   15207:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1520b:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
	inode->i_count = 1;               										// 引用计数。
   1520f:	8b 44 24 10          	mov    0x10(%esp),%eax
   15213:	66 c7 40 34 01 00    	movw   $0x1,0x34(%eax)
	inode->i_nlinks = 1;              										// 文件目录项链接数。
   15219:	8b 44 24 10          	mov    0x10(%esp),%eax
   1521d:	c6 40 0d 01          	movb   $0x1,0xd(%eax)
	inode->i_dev = dev;               										// i节点所在的设备号。
   15221:	8b 44 24 30          	mov    0x30(%esp),%eax
   15225:	89 c2                	mov    %eax,%edx
   15227:	8b 44 24 10          	mov    0x10(%esp),%eax
   1522b:	66 89 50 30          	mov    %dx,0x30(%eax)
	inode->i_uid = current->euid;     										// i节点所属用户id。
   1522f:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   15234:	0f b7 90 ce 02 00 00 	movzwl 0x2ce(%eax),%edx
   1523b:	8b 44 24 10          	mov    0x10(%esp),%eax
   1523f:	66 89 50 02          	mov    %dx,0x2(%eax)
	inode->i_gid = current->egid;     										// 组id。
   15243:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   15248:	0f b7 80 d4 02 00 00 	movzwl 0x2d4(%eax),%eax
   1524f:	89 c2                	mov    %eax,%edx
   15251:	8b 44 24 10          	mov    0x10(%esp),%eax
   15255:	88 50 0c             	mov    %dl,0xc(%eax)
	inode->i_dirt = 1;                										// 已修改标志置位。
   15258:	8b 44 24 10          	mov    0x10(%esp),%eax
   1525c:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	inode->i_num = j + i * 8192;      										// 对应设备中的i节点号。
   15260:	8b 44 24 18          	mov    0x18(%esp),%eax
   15264:	c1 e0 0d             	shl    $0xd,%eax
   15267:	89 c2                	mov    %eax,%edx
   15269:	8b 44 24 14          	mov    0x14(%esp),%eax
   1526d:	01 c2                	add    %eax,%edx
   1526f:	8b 44 24 10          	mov    0x10(%esp),%eax
   15273:	66 89 50 32          	mov    %dx,0x32(%eax)
	inode->i_mtime = inode->i_atime = inode->i_ctime = CURRENT_TIME;        // 设置时间。
   15277:	a1 00 eb 02 00       	mov    0x2eb00,%eax
   1527c:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
   15282:	01 d0                	add    %edx,%eax
   15284:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   15289:	f7 e2                	mul    %edx
   1528b:	c1 ea 05             	shr    $0x5,%edx
   1528e:	a1 04 eb 02 00       	mov    0x2eb04,%eax
   15293:	01 c2                	add    %eax,%edx
   15295:	8b 44 24 10          	mov    0x10(%esp),%eax
   15299:	89 50 2c             	mov    %edx,0x2c(%eax)
   1529c:	8b 44 24 10          	mov    0x10(%esp),%eax
   152a0:	8b 50 2c             	mov    0x2c(%eax),%edx
   152a3:	8b 44 24 10          	mov    0x10(%esp),%eax
   152a7:	89 50 28             	mov    %edx,0x28(%eax)
   152aa:	8b 44 24 10          	mov    0x10(%esp),%eax
   152ae:	8b 50 28             	mov    0x28(%eax),%edx
   152b1:	8b 44 24 10          	mov    0x10(%esp),%eax
   152b5:	89 50 08             	mov    %edx,0x8(%eax)
	return inode;                   										// 返回该i节点指针。
   152b8:	8b 44 24 10          	mov    0x10(%esp),%eax
}
   152bc:	83 c4 24             	add    $0x24,%esp
   152bf:	5b                   	pop    %ebx
   152c0:	5e                   	pop    %esi
   152c1:	c3                   	ret    

000152c2 <dupfd>:

// 复制文件句柄(文件描述符).
// 参数fd是欲复制的文件句柄,arg指定新文件句柄的最小数值.
// 返回新文件句柄或出错码.
static int dupfd(unsigned int fd, unsigned int arg)
{
   152c2:	56                   	push   %esi
   152c3:	53                   	push   %ebx
	// 首先检查函数参数的有效性.如果文件句柄值大于一个程序最多打开文件数NR_OPEN,或者该句柄的文件结构不存在,则返回出错码并退出.如果指定的新
	// 句柄值arg大于最多打开文件数,也返回出错码并退出.注意,实际上文件句柄就是进程文件结构指针数组项索引号.
	if (fd >= NR_OPEN || !current->filp[fd])
   152c4:	83 7c 24 0c 13       	cmpl   $0x13,0xc(%esp)
   152c9:	77 17                	ja     152e2 <dupfd+0x20>
   152cb:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   152d0:	8b 54 24 0c          	mov    0xc(%esp),%edx
   152d4:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   152da:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   152de:	85 c0                	test   %eax,%eax
   152e0:	75 0a                	jne    152ec <dupfd+0x2a>
		return -EBADF;
   152e2:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
   152e7:	e9 b3 00 00 00       	jmp    1539f <dupfd+0xdd>
	if (arg >= NR_OPEN)
   152ec:	83 7c 24 10 13       	cmpl   $0x13,0x10(%esp)
   152f1:	76 26                	jbe    15319 <dupfd+0x57>
		return -EINVAL;
   152f3:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   152f8:	e9 a2 00 00 00       	jmp    1539f <dupfd+0xdd>
	// 然后在当前进程的文件结构指针数组中寻找索引号等于或大于arg,但还没有使用的项.若找到的新句柄值arg大于最多打开文件数(即没有空闲项),则返回
	// 出错码并退出.
	while (arg < NR_OPEN)
		if (current->filp[arg])
   152fd:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   15302:	8b 54 24 10          	mov    0x10(%esp),%edx
   15306:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   1530c:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   15310:	85 c0                	test   %eax,%eax
   15312:	74 0e                	je     15322 <dupfd+0x60>
			arg++;
   15314:	83 44 24 10 01       	addl   $0x1,0x10(%esp)
		return -EBADF;
	if (arg >= NR_OPEN)
		return -EINVAL;
	// 然后在当前进程的文件结构指针数组中寻找索引号等于或大于arg,但还没有使用的项.若找到的新句柄值arg大于最多打开文件数(即没有空闲项),则返回
	// 出错码并退出.
	while (arg < NR_OPEN)
   15319:	83 7c 24 10 13       	cmpl   $0x13,0x10(%esp)
   1531e:	76 dd                	jbe    152fd <dupfd+0x3b>
   15320:	eb 01                	jmp    15323 <dupfd+0x61>
		if (current->filp[arg])
			arg++;
		else
			break;
   15322:	90                   	nop
	if (arg >= NR_OPEN)
   15323:	83 7c 24 10 13       	cmpl   $0x13,0x10(%esp)
   15328:	76 07                	jbe    15331 <dupfd+0x6f>
		return -EMFILE;
   1532a:	b8 e8 ff ff ff       	mov    $0xffffffe8,%eax
   1532f:	eb 6e                	jmp    1539f <dupfd+0xdd>
	// 否则针对找到的空闲项(句柄),在执行时关闭标志位图close_on_exec中复位该句柄位.即在运行exec()类函数时,不会关闭用dup()创建的的句柄.并令该
	// 文件结构指针等于原句柄fd的指针,并且将文件引用数增1.最后返回新的文件句柄arg.
	current->close_on_exec &= ~(1 << arg);
   15331:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   15336:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   1533c:	8b 9a 44 03 00 00    	mov    0x344(%edx),%ebx
   15342:	8b 54 24 10          	mov    0x10(%esp),%edx
   15346:	be 01 00 00 00       	mov    $0x1,%esi
   1534b:	89 d1                	mov    %edx,%ecx
   1534d:	d3 e6                	shl    %cl,%esi
   1534f:	89 f2                	mov    %esi,%edx
   15351:	f7 d2                	not    %edx
   15353:	21 da                	and    %ebx,%edx
   15355:	89 90 44 03 00 00    	mov    %edx,0x344(%eax)
	(current->filp[arg] = current->filp[fd])->f_count++;
   1535b:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   15360:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   15366:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   1536a:	81 c1 d0 00 00 00    	add    $0xd0,%ecx
   15370:	8b 54 8a 08          	mov    0x8(%edx,%ecx,4),%edx
   15374:	8b 4c 24 10          	mov    0x10(%esp),%ecx
   15378:	81 c1 d0 00 00 00    	add    $0xd0,%ecx
   1537e:	89 54 88 08          	mov    %edx,0x8(%eax,%ecx,4)
   15382:	8b 54 24 10          	mov    0x10(%esp),%edx
   15386:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   1538c:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   15390:	0f b7 50 04          	movzwl 0x4(%eax),%edx
   15394:	83 c2 01             	add    $0x1,%edx
   15397:	66 89 50 04          	mov    %dx,0x4(%eax)
	return arg;
   1539b:	8b 44 24 10          	mov    0x10(%esp),%eax
}
   1539f:	5b                   	pop    %ebx
   153a0:	5e                   	pop    %esi
   153a1:	c3                   	ret    

000153a2 <sys_dup2>:
// 复制文件句柄系统调用。
// 复制指定文件句柄oldfd，新文件句柄值等于newfd。如果newfd已打开，则首先关闭之。
// 参数：oldfd -- 原文件句柄；newfd - 新文件句柄。
// 返回新文件句柄值。
int sys_dup2(unsigned int oldfd, unsigned int newfd)
{
   153a2:	83 ec 0c             	sub    $0xc,%esp
	sys_close(newfd);               						// 若句柄newfd已经打开，则首先关闭之。
   153a5:	8b 44 24 14          	mov    0x14(%esp),%eax
   153a9:	83 ec 0c             	sub    $0xc,%esp
   153ac:	50                   	push   %eax
   153ad:	e8 cb 87 ff ff       	call   db7d <sys_close>
   153b2:	83 c4 10             	add    $0x10,%esp
	return dupfd(oldfd, newfd);      						// 复制并返回新句柄。
   153b5:	83 ec 08             	sub    $0x8,%esp
   153b8:	ff 74 24 1c          	pushl  0x1c(%esp)
   153bc:	ff 74 24 1c          	pushl  0x1c(%esp)
   153c0:	e8 fd fe ff ff       	call   152c2 <dupfd>
   153c5:	83 c4 10             	add    $0x10,%esp
}
   153c8:	83 c4 0c             	add    $0xc,%esp
   153cb:	c3                   	ret    

000153cc <sys_dup>:
// 复制指定文件句柄oldfd,新句柄的值是当前最小的未用句柄值.
// 参数:fildes -- 被复制的文件句柄.
// 返回新文件句柄值.
int sys_dup(unsigned int fildes)
{
	return dupfd(fildes, 0);
   153cc:	6a 00                	push   $0x0
   153ce:	ff 74 24 08          	pushl  0x8(%esp)
   153d2:	e8 eb fe ff ff       	call   152c2 <dupfd>
   153d7:	83 c4 08             	add    $0x8,%esp
}
   153da:	c3                   	ret    

000153db <sys_fcntl>:
// arg是新文件句可取的最小值；对于设置文件操作和访问标志命令F_SETFL，arg是新的文件操作和访问模式。对于文件上锁命令
// F_GETLK、F_SETLK和F_SETLKW，arg是指向flock结构的指针。但本内核中没有实现文件上锁功能。
// 返回：若出错，则所有操作都返回-1.若成功，那么F_DUPFD返回新文件句柄；F_GETFD返回文件句柄的当前执行时关闭标志
// close_on_exec；F_GETFL返回文件操作和访问标志。
int sys_fcntl(unsigned int fd, unsigned int cmd, unsigned long arg)
{
   153db:	56                   	push   %esi
   153dc:	53                   	push   %ebx
   153dd:	83 ec 10             	sub    $0x10,%esp
	struct file * filp;

	// 首先检查给出的文件句柄有效性。然后根据不同命令cmd进行分别处理。如果文件句柄值大于一个进程最多打开文件数NR_OPEN，或者
	// 该句柄的文件结构指针为空，则返回出错码并退出。
	if (fd >= NR_OPEN || !(filp = current->filp[fd]))
   153e0:	83 7c 24 1c 13       	cmpl   $0x13,0x1c(%esp)
   153e5:	77 1e                	ja     15405 <sys_fcntl+0x2a>
   153e7:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   153ec:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   153f0:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   153f6:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   153fa:	89 44 24 0c          	mov    %eax,0xc(%esp)
   153fe:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   15403:	75 0a                	jne    1540f <sys_fcntl+0x34>
		return -EBADF;
   15405:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
   1540a:	e9 03 01 00 00       	jmp    15512 <sys_fcntl+0x137>
	switch (cmd) {
   1540f:	83 7c 24 20 07       	cmpl   $0x7,0x20(%esp)
   15414:	0f 87 f3 00 00 00    	ja     1550d <sys_fcntl+0x132>
   1541a:	8b 44 24 20          	mov    0x20(%esp),%eax
   1541e:	c1 e0 02             	shl    $0x2,%eax
   15421:	05 3c 3d 02 00       	add    $0x23d3c,%eax
   15426:	8b 00                	mov    (%eax),%eax
   15428:	ff e0                	jmp    *%eax
		case F_DUPFD:   										// 复制文件句柄。
			return dupfd(fd,arg);
   1542a:	ff 74 24 24          	pushl  0x24(%esp)
   1542e:	ff 74 24 20          	pushl  0x20(%esp)
   15432:	e8 8b fe ff ff       	call   152c2 <dupfd>
   15437:	83 c4 08             	add    $0x8,%esp
   1543a:	e9 d3 00 00 00       	jmp    15512 <sys_fcntl+0x137>
		case F_GETFD:   										// 取文件句柄的执行时关闭标志。
			return (current->close_on_exec >> fd) & 1;
   1543f:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   15444:	8b 90 44 03 00 00    	mov    0x344(%eax),%edx
   1544a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1544e:	89 c1                	mov    %eax,%ecx
   15450:	d3 ea                	shr    %cl,%edx
   15452:	89 d0                	mov    %edx,%eax
   15454:	83 e0 01             	and    $0x1,%eax
   15457:	e9 b6 00 00 00       	jmp    15512 <sys_fcntl+0x137>
		case F_SETFD:   										// 设置执行时关闭标志。arg位0置位是设置，否则关闭。
			if (arg & 1)
   1545c:	8b 44 24 24          	mov    0x24(%esp),%eax
   15460:	83 e0 01             	and    $0x1,%eax
   15463:	85 c0                	test   %eax,%eax
   15465:	74 2a                	je     15491 <sys_fcntl+0xb6>
				current->close_on_exec |= (1 << fd);
   15467:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1546c:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   15472:	8b 9a 44 03 00 00    	mov    0x344(%edx),%ebx
   15478:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1547c:	be 01 00 00 00       	mov    $0x1,%esi
   15481:	89 d1                	mov    %edx,%ecx
   15483:	d3 e6                	shl    %cl,%esi
   15485:	89 f2                	mov    %esi,%edx
   15487:	09 da                	or     %ebx,%edx
   15489:	89 90 44 03 00 00    	mov    %edx,0x344(%eax)
   1548f:	eb 2a                	jmp    154bb <sys_fcntl+0xe0>
			else
				current->close_on_exec &= ~(1 << fd);
   15491:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   15496:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   1549c:	8b 9a 44 03 00 00    	mov    0x344(%edx),%ebx
   154a2:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   154a6:	be 01 00 00 00       	mov    $0x1,%esi
   154ab:	89 d1                	mov    %edx,%ecx
   154ad:	d3 e6                	shl    %cl,%esi
   154af:	89 f2                	mov    %esi,%edx
   154b1:	f7 d2                	not    %edx
   154b3:	21 da                	and    %ebx,%edx
   154b5:	89 90 44 03 00 00    	mov    %edx,0x344(%eax)
			return 0;
   154bb:	b8 00 00 00 00       	mov    $0x0,%eax
   154c0:	eb 50                	jmp    15512 <sys_fcntl+0x137>
		case F_GETFL:   										// 取文件状态标志和访问模式。
			return filp->f_flags;
   154c2:	8b 44 24 0c          	mov    0xc(%esp),%eax
   154c6:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   154ca:	0f b7 c0             	movzwl %ax,%eax
   154cd:	eb 43                	jmp    15512 <sys_fcntl+0x137>
		case F_SETFL:   										// 设置文件状态和访问模式（根据arg设置添加、非阻塞标志）。
			filp->f_flags &= ~(O_APPEND | O_NONBLOCK);
   154cf:	8b 44 24 0c          	mov    0xc(%esp),%eax
   154d3:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   154d7:	80 e4 f3             	and    $0xf3,%ah
   154da:	89 c2                	mov    %eax,%edx
   154dc:	8b 44 24 0c          	mov    0xc(%esp),%eax
   154e0:	66 89 50 02          	mov    %dx,0x2(%eax)
			filp->f_flags |= arg & (O_APPEND | O_NONBLOCK);
   154e4:	8b 44 24 0c          	mov    0xc(%esp),%eax
   154e8:	0f b7 40 02          	movzwl 0x2(%eax),%eax
   154ec:	8b 54 24 24          	mov    0x24(%esp),%edx
   154f0:	66 81 e2 00 0c       	and    $0xc00,%dx
   154f5:	09 c2                	or     %eax,%edx
   154f7:	8b 44 24 0c          	mov    0xc(%esp),%eax
   154fb:	66 89 50 02          	mov    %dx,0x2(%eax)
			return 0;
   154ff:	b8 00 00 00 00       	mov    $0x0,%eax
   15504:	eb 0c                	jmp    15512 <sys_fcntl+0x137>
		case F_GETLK:	case F_SETLK:	case F_SETLKW:  		// 未实现。
			return -1;
   15506:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1550b:	eb 05                	jmp    15512 <sys_fcntl+0x137>
		default:
			return -1;
   1550d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	}
}
   15512:	83 c4 10             	add    $0x10,%esp
   15515:	5b                   	pop    %ebx
   15516:	5e                   	pop    %esi
   15517:	c3                   	ret    

00015518 <sys_ioctl>:
// 该函数首先判断参数给出的文件描述符是否有效。然后根据对应i节点中文件属性判断文件类型，并根据具体文件类型调用相关
// 的处理函数。
// 参数：fd - 文件描述符； cmd - 命令码； arg - 参数。
// 返回：成功则返回0,否则返回出错码。
int sys_ioctl(unsigned int fd, unsigned int cmd, unsigned long arg)
{
   15518:	83 ec 1c             	sub    $0x1c,%esp
	struct file * filp;
	int dev, mode;

	// 首先判断给出的文件描述符的有效性。如果文件描述符超出可打开的文件数，或者对应描述符的文件结构指针为空，则返回出错
	// 码退出。
	if (fd >= NR_OPEN || !(filp = current->filp[fd]))
   1551b:	83 7c 24 20 13       	cmpl   $0x13,0x20(%esp)
   15520:	77 1e                	ja     15540 <sys_ioctl+0x28>
   15522:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   15527:	8b 54 24 20          	mov    0x20(%esp),%edx
   1552b:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   15531:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   15535:	89 44 24 0c          	mov    %eax,0xc(%esp)
   15539:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   1553e:	75 0a                	jne    1554a <sys_ioctl+0x32>
		return -EBADF;
   15540:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
   15545:	e9 e6 00 00 00       	jmp    15630 <sys_ioctl+0x118>
	// 如果文件结构对应的是管道i节点，则根据进程是否有权操作该管道确定是否执行管道IO控制操作。若有权执行则调用pipe_ioctl()，
	// 否则返回无效文件错误码。
	if (filp->f_inode->i_pipe)
   1554a:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1554e:	8b 40 08             	mov    0x8(%eax),%eax
   15551:	0f b6 40 38          	movzbl 0x38(%eax),%eax
   15555:	84 c0                	test   %al,%al
   15557:	74 3d                	je     15596 <sys_ioctl+0x7e>
		return (filp->f_mode & 1) ? pipe_ioctl(filp->f_inode, cmd, arg) : -EBADF;
   15559:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1555d:	0f b7 00             	movzwl (%eax),%eax
   15560:	0f b7 c0             	movzwl %ax,%eax
   15563:	83 e0 01             	and    $0x1,%eax
   15566:	85 c0                	test   %eax,%eax
   15568:	74 22                	je     1558c <sys_ioctl+0x74>
   1556a:	8b 4c 24 28          	mov    0x28(%esp),%ecx
   1556e:	8b 54 24 24          	mov    0x24(%esp),%edx
   15572:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15576:	8b 40 08             	mov    0x8(%eax),%eax
   15579:	83 ec 04             	sub    $0x4,%esp
   1557c:	51                   	push   %ecx
   1557d:	52                   	push   %edx
   1557e:	50                   	push   %eax
   1557f:	e8 8d d3 ff ff       	call   12911 <pipe_ioctl>
   15584:	83 c4 10             	add    $0x10,%esp
   15587:	e9 a4 00 00 00       	jmp    15630 <sys_ioctl+0x118>
   1558c:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
   15591:	e9 9a 00 00 00       	jmp    15630 <sys_ioctl+0x118>
	// 对于其他类型文件，取对应文件的属性，并据此判断文件的类型。如果该文件即不是字符设备文件，也不是块设备文件，则返回
	// 出错码退出。若是字符或块设备文件，则从文件的i节点中取设备号。如果设备号大于系统现有的设备数，则返回出错号。
	mode = filp->f_inode->i_mode;
   15596:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1559a:	8b 40 08             	mov    0x8(%eax),%eax
   1559d:	0f b7 00             	movzwl (%eax),%eax
   155a0:	0f b7 c0             	movzwl %ax,%eax
   155a3:	89 44 24 08          	mov    %eax,0x8(%esp)
	if (!S_ISCHR(mode) && !S_ISBLK(mode))
   155a7:	8b 44 24 08          	mov    0x8(%esp),%eax
   155ab:	25 00 f0 00 00       	and    $0xf000,%eax
   155b0:	3d 00 20 00 00       	cmp    $0x2000,%eax
   155b5:	74 17                	je     155ce <sys_ioctl+0xb6>
   155b7:	8b 44 24 08          	mov    0x8(%esp),%eax
   155bb:	25 00 f0 00 00       	and    $0xf000,%eax
   155c0:	3d 00 60 00 00       	cmp    $0x6000,%eax
   155c5:	74 07                	je     155ce <sys_ioctl+0xb6>
		return -EINVAL;
   155c7:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   155cc:	eb 62                	jmp    15630 <sys_ioctl+0x118>
	dev = filp->f_inode->i_zone[0];
   155ce:	8b 44 24 0c          	mov    0xc(%esp),%eax
   155d2:	8b 40 08             	mov    0x8(%eax),%eax
   155d5:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   155d9:	0f b7 c0             	movzwl %ax,%eax
   155dc:	89 44 24 04          	mov    %eax,0x4(%esp)
	if (MAJOR(dev) >= NRDEVS)
   155e0:	8b 44 24 04          	mov    0x4(%esp),%eax
   155e4:	c1 e8 08             	shr    $0x8,%eax
   155e7:	83 f8 07             	cmp    $0x7,%eax
   155ea:	76 07                	jbe    155f3 <sys_ioctl+0xdb>
		return -ENODEV;
   155ec:	b8 ed ff ff ff       	mov    $0xffffffed,%eax
   155f1:	eb 3d                	jmp    15630 <sys_ioctl+0x118>
	// 然后根据IO控制表ioctl_table查得对应设备的ioctl函数指针，并调用该函数。如果该设备在ioctl函数指针表中没有对应函数，
	// 则返回出错码。
	if (!ioctl_table[MAJOR(dev)])
   155f3:	8b 44 24 04          	mov    0x4(%esp),%eax
   155f7:	c1 e8 08             	shr    $0x8,%eax
   155fa:	8b 04 85 a0 e3 02 00 	mov    0x2e3a0(,%eax,4),%eax
   15601:	85 c0                	test   %eax,%eax
   15603:	75 07                	jne    1560c <sys_ioctl+0xf4>
		return -ENOTTY;
   15605:	b8 e7 ff ff ff       	mov    $0xffffffe7,%eax
   1560a:	eb 24                	jmp    15630 <sys_ioctl+0x118>
	return ioctl_table[MAJOR(dev)](dev, cmd, arg);
   1560c:	8b 44 24 04          	mov    0x4(%esp),%eax
   15610:	c1 e8 08             	shr    $0x8,%eax
   15613:	8b 04 85 a0 e3 02 00 	mov    0x2e3a0(,%eax,4),%eax
   1561a:	8b 4c 24 28          	mov    0x28(%esp),%ecx
   1561e:	8b 54 24 24          	mov    0x24(%esp),%edx
   15622:	83 ec 04             	sub    $0x4,%esp
   15625:	51                   	push   %ecx
   15626:	52                   	push   %edx
   15627:	ff 74 24 10          	pushl  0x10(%esp)
   1562b:	ff d0                	call   *%eax
   1562d:	83 c4 10             	add    $0x10,%esp
}
   15630:	83 c4 1c             	add    $0x1c,%esp
   15633:	c3                   	ret    

00015634 <free_ind>:
#include <sys/stat.h>           								// 文件状态头文件。含有文件或文件系统状态结构stat{}和常量。

// 释放所有一次间接块。（内部函数）
// 参数dev是文件系统所有设备的设备号；block是逻辑块号。成功则返回1，否则返回0。
static int free_ind(int dev, int block)
{
   15634:	83 ec 1c             	sub    $0x1c,%esp
	int i;
	int block_busy;

	// 首先判断参数的有效性。如果逻辑块号为0,则返回。然后读取一次间接块，并释放其上表明使用的所有逻辑块，然后
	// 释放该一次间接块的缓冲块。函数free_block()用于释放设备上指定逻辑块号的磁盘块（fs/bitmap.c）。
	if (!block)
   15637:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
   1563c:	75 0a                	jne    15648 <free_ind+0x14>
		return 1;
   1563e:	b8 01 00 00 00       	mov    $0x1,%eax
   15643:	e9 bf 00 00 00       	jmp    15707 <free_ind+0xd3>
	block_busy = 0;
   15648:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
   1564f:	00 
	if (bh = bread(dev, block)) {
   15650:	83 ec 08             	sub    $0x8,%esp
   15653:	ff 74 24 2c          	pushl  0x2c(%esp)
   15657:	ff 74 24 2c          	pushl  0x2c(%esp)
   1565b:	e8 33 a0 ff ff       	call   f693 <bread>
   15660:	83 c4 10             	add    $0x10,%esp
   15663:	89 04 24             	mov    %eax,(%esp)
   15666:	83 3c 24 00          	cmpl   $0x0,(%esp)
   1566a:	74 7a                	je     156e6 <free_ind+0xb2>
		p = (unsigned short *) bh->b_data;              		// 指向缓冲块数据区。
   1566c:	8b 04 24             	mov    (%esp),%eax
   1566f:	8b 00                	mov    (%eax),%eax
   15671:	89 44 24 0c          	mov    %eax,0xc(%esp)
		for (i = 0; i < 512; i++, p++)                         	// 每个逻辑块上可有512个块号。
   15675:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
   1567c:	00 
   1567d:	eb 4e                	jmp    156cd <free_ind+0x99>
			if (*p)
   1567f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15683:	0f b7 00             	movzwl (%eax),%eax
   15686:	66 85 c0             	test   %ax,%ax
   15689:	74 38                	je     156c3 <free_ind+0x8f>
				if (free_block(dev, *p)) {       				// 释放指定的设备逻辑块。
   1568b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1568f:	0f b7 00             	movzwl (%eax),%eax
   15692:	0f b7 c0             	movzwl %ax,%eax
   15695:	83 ec 08             	sub    $0x8,%esp
   15698:	50                   	push   %eax
   15699:	ff 74 24 2c          	pushl  0x2c(%esp)
   1569d:	e8 82 f5 ff ff       	call   14c24 <free_block>
   156a2:	83 c4 10             	add    $0x10,%esp
   156a5:	85 c0                	test   %eax,%eax
   156a7:	74 12                	je     156bb <free_ind+0x87>
					*p = 0;                 					// 清零。
   156a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
   156ad:	66 c7 00 00 00       	movw   $0x0,(%eax)
					bh->b_dirt = 1;         					// 设置已修改标志。
   156b2:	8b 04 24             	mov    (%esp),%eax
   156b5:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
   156b9:	eb 08                	jmp    156c3 <free_ind+0x8f>
				} else
					block_busy = 1;         					// 设置逻辑块没有释放标志。
   156bb:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
   156c2:	00 
	if (!block)
		return 1;
	block_busy = 0;
	if (bh = bread(dev, block)) {
		p = (unsigned short *) bh->b_data;              		// 指向缓冲块数据区。
		for (i = 0; i < 512; i++, p++)                         	// 每个逻辑块上可有512个块号。
   156c3:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
   156c8:	83 44 24 0c 02       	addl   $0x2,0xc(%esp)
   156cd:	81 7c 24 08 ff 01 00 	cmpl   $0x1ff,0x8(%esp)
   156d4:	00 
   156d5:	7e a8                	jle    1567f <free_ind+0x4b>
				if (free_block(dev, *p)) {       				// 释放指定的设备逻辑块。
					*p = 0;                 					// 清零。
					bh->b_dirt = 1;         					// 设置已修改标志。
				} else
					block_busy = 1;         					// 设置逻辑块没有释放标志。
		brelse(bh);                                     		// 然后释放间接块占用的缓冲块。
   156d7:	83 ec 0c             	sub    $0xc,%esp
   156da:	ff 74 24 0c          	pushl  0xc(%esp)
   156de:	e8 5a 9f ff ff       	call   f63d <brelse>
   156e3:	83 c4 10             	add    $0x10,%esp
	}
	// 最后释放设备上的一次间接块。但如果其中有逻辑块没有被释放，则返回0（失败）。
	if (block_busy)
   156e6:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
   156eb:	74 07                	je     156f4 <free_ind+0xc0>
		return 0;
   156ed:	b8 00 00 00 00       	mov    $0x0,%eax
   156f2:	eb 13                	jmp    15707 <free_ind+0xd3>
	else
		return free_block(dev, block);                   		// 成功则返回1,否则返回0.
   156f4:	83 ec 08             	sub    $0x8,%esp
   156f7:	ff 74 24 2c          	pushl  0x2c(%esp)
   156fb:	ff 74 24 2c          	pushl  0x2c(%esp)
   156ff:	e8 20 f5 ff ff       	call   14c24 <free_block>
   15704:	83 c4 10             	add    $0x10,%esp
}
   15707:	83 c4 1c             	add    $0x1c,%esp
   1570a:	c3                   	ret    

0001570b <free_dind>:

// 释放所有二次间接块。
// 参数dev是文件系统所在设备的设备号；block是逻辑块号。
static int free_dind(int dev, int block)
{
   1570b:	83 ec 1c             	sub    $0x1c,%esp
	int i;
	int block_busy;                                         	// 在逻辑块没有被释放的标志。

	// 首先判断参数的有效性。如果逻辑块号为0,则返回。然后读取二次间接块的一级块，并释放其上表明使用的所有逻辑块，
	// 然后释放该一级块的缓冲块。
	if (!block)
   1570e:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
   15713:	75 0a                	jne    1571f <free_dind+0x14>
		return 1;
   15715:	b8 01 00 00 00       	mov    $0x1,%eax
   1571a:	e9 bf 00 00 00       	jmp    157de <free_dind+0xd3>
	block_busy = 0;
   1571f:	c7 44 24 04 00 00 00 	movl   $0x0,0x4(%esp)
   15726:	00 
	if (bh = bread(dev, block)) {
   15727:	83 ec 08             	sub    $0x8,%esp
   1572a:	ff 74 24 2c          	pushl  0x2c(%esp)
   1572e:	ff 74 24 2c          	pushl  0x2c(%esp)
   15732:	e8 5c 9f ff ff       	call   f693 <bread>
   15737:	83 c4 10             	add    $0x10,%esp
   1573a:	89 04 24             	mov    %eax,(%esp)
   1573d:	83 3c 24 00          	cmpl   $0x0,(%esp)
   15741:	74 7a                	je     157bd <free_dind+0xb2>
		p = (unsigned short *) bh->b_data;              		// 指向缓冲块数据区。
   15743:	8b 04 24             	mov    (%esp),%eax
   15746:	8b 00                	mov    (%eax),%eax
   15748:	89 44 24 0c          	mov    %eax,0xc(%esp)
		for (i = 0; i < 512; i++, p++)                         	// 每个逻辑块上可连接512个二级块。
   1574c:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
   15753:	00 
   15754:	eb 4e                	jmp    157a4 <free_dind+0x99>
			if (*p)
   15756:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1575a:	0f b7 00             	movzwl (%eax),%eax
   1575d:	66 85 c0             	test   %ax,%ax
   15760:	74 38                	je     1579a <free_dind+0x8f>
				if (free_ind(dev, *p)) {         				// 释放所有一次间接块。
   15762:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15766:	0f b7 00             	movzwl (%eax),%eax
   15769:	0f b7 c0             	movzwl %ax,%eax
   1576c:	83 ec 08             	sub    $0x8,%esp
   1576f:	50                   	push   %eax
   15770:	ff 74 24 2c          	pushl  0x2c(%esp)
   15774:	e8 bb fe ff ff       	call   15634 <free_ind>
   15779:	83 c4 10             	add    $0x10,%esp
   1577c:	85 c0                	test   %eax,%eax
   1577e:	74 12                	je     15792 <free_dind+0x87>
					*p = 0;                 					// 清零。
   15780:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15784:	66 c7 00 00 00       	movw   $0x0,(%eax)
					bh->b_dirt = 1;         					// 设置已修改标志。
   15789:	8b 04 24             	mov    (%esp),%eax
   1578c:	c6 40 0b 01          	movb   $0x1,0xb(%eax)
   15790:	eb 08                	jmp    1579a <free_dind+0x8f>
				} else
					block_busy = 1;         					// 设置逻辑块没有释放标志。
   15792:	c7 44 24 04 01 00 00 	movl   $0x1,0x4(%esp)
   15799:	00 
	if (!block)
		return 1;
	block_busy = 0;
	if (bh = bread(dev, block)) {
		p = (unsigned short *) bh->b_data;              		// 指向缓冲块数据区。
		for (i = 0; i < 512; i++, p++)                         	// 每个逻辑块上可连接512个二级块。
   1579a:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
   1579f:	83 44 24 0c 02       	addl   $0x2,0xc(%esp)
   157a4:	81 7c 24 08 ff 01 00 	cmpl   $0x1ff,0x8(%esp)
   157ab:	00 
   157ac:	7e a8                	jle    15756 <free_dind+0x4b>
				if (free_ind(dev, *p)) {         				// 释放所有一次间接块。
					*p = 0;                 					// 清零。
					bh->b_dirt = 1;         					// 设置已修改标志。
				} else
					block_busy = 1;         					// 设置逻辑块没有释放标志。
		brelse(bh);                                     		// 释放二次间接块占用的缓冲块。
   157ae:	83 ec 0c             	sub    $0xc,%esp
   157b1:	ff 74 24 0c          	pushl  0xc(%esp)
   157b5:	e8 83 9e ff ff       	call   f63d <brelse>
   157ba:	83 c4 10             	add    $0x10,%esp
	}
	// 最后释放设备上的二次间接块。但如果其中有逻辑块没有被释放，则返回0（失败）。
	if (block_busy)
   157bd:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
   157c2:	74 07                	je     157cb <free_dind+0xc0>
		return 0;
   157c4:	b8 00 00 00 00       	mov    $0x0,%eax
   157c9:	eb 13                	jmp    157de <free_dind+0xd3>
	else
		return free_block(dev, block);							// 最后释放存放第一间接块的逻辑块
   157cb:	83 ec 08             	sub    $0x8,%esp
   157ce:	ff 74 24 2c          	pushl  0x2c(%esp)
   157d2:	ff 74 24 2c          	pushl  0x2c(%esp)
   157d6:	e8 49 f4 ff ff       	call   14c24 <free_block>
   157db:	83 c4 10             	add    $0x10,%esp
}
   157de:	83 c4 1c             	add    $0x1c,%esp
   157e1:	c3                   	ret    

000157e2 <truncate>:

// 截断文件数据函数。
// 将节点对应的文件长度减0,并释放战胜的设备空间。
void truncate(struct m_inode * inode)
{
   157e2:	83 ec 1c             	sub    $0x1c,%esp
	int i;
	int block_busy;                 							// 有逻辑块没有被释放的标志。

	// 首先判断指定i节点有效性。如果不是常规文件、目录文件或链接项，则返回。
	if (!(S_ISREG(inode->i_mode) || S_ISDIR(inode->i_mode) ||
   157e5:	8b 44 24 20          	mov    0x20(%esp),%eax
   157e9:	0f b7 00             	movzwl (%eax),%eax
   157ec:	0f b7 c0             	movzwl %ax,%eax
   157ef:	25 00 f0 00 00       	and    $0xf000,%eax
   157f4:	3d 00 80 00 00       	cmp    $0x8000,%eax
   157f9:	74 30                	je     1582b <truncate+0x49>
   157fb:	8b 44 24 20          	mov    0x20(%esp),%eax
   157ff:	0f b7 00             	movzwl (%eax),%eax
   15802:	0f b7 c0             	movzwl %ax,%eax
   15805:	25 00 f0 00 00       	and    $0xf000,%eax
   1580a:	3d 00 40 00 00       	cmp    $0x4000,%eax
   1580f:	74 1a                	je     1582b <truncate+0x49>
	     S_ISLNK(inode->i_mode)))
   15811:	8b 44 24 20          	mov    0x20(%esp),%eax
   15815:	0f b7 00             	movzwl (%eax),%eax
   15818:	0f b7 c0             	movzwl %ax,%eax
   1581b:	25 00 f0 00 00       	and    $0xf000,%eax
{
	int i;
	int block_busy;                 							// 有逻辑块没有被释放的标志。

	// 首先判断指定i节点有效性。如果不是常规文件、目录文件或链接项，则返回。
	if (!(S_ISREG(inode->i_mode) || S_ISDIR(inode->i_mode) ||
   15820:	3d 00 a0 00 00       	cmp    $0xa000,%eax
   15825:	0f 85 50 01 00 00    	jne    1597b <truncate+0x199>
	     S_ISLNK(inode->i_mode)))
		return;
	// 然后释放i节点的7个直接逻辑块，并将这7个逻辑块项全置零。函数free_block()用于释放设备上指定逻辑块的磁盘块
	// （fs/bitmap.c）。若有逻辑块忙而没有被释放则置块忙标志block_busy。
repeat:
	block_busy = 0;
   1582b:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
   15832:	00 
	for (i = 0; i < 7; i++)
   15833:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   1583a:	00 
   1583b:	eb 5c                	jmp    15899 <truncate+0xb7>
		if (inode->i_zone[i]) {                 				// 如果块号不为0，则释放之。
   1583d:	8b 44 24 20          	mov    0x20(%esp),%eax
   15841:	8b 54 24 0c          	mov    0xc(%esp),%edx
   15845:	0f b7 44 50 0e       	movzwl 0xe(%eax,%edx,2),%eax
   1584a:	66 85 c0             	test   %ax,%ax
   1584d:	74 45                	je     15894 <truncate+0xb2>
			if (free_block(inode->i_dev, inode->i_zone[i]))
   1584f:	8b 44 24 20          	mov    0x20(%esp),%eax
   15853:	8b 54 24 0c          	mov    0xc(%esp),%edx
   15857:	0f b7 44 50 0e       	movzwl 0xe(%eax,%edx,2),%eax
   1585c:	0f b7 d0             	movzwl %ax,%edx
   1585f:	8b 44 24 20          	mov    0x20(%esp),%eax
   15863:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   15867:	0f b7 c0             	movzwl %ax,%eax
   1586a:	83 ec 08             	sub    $0x8,%esp
   1586d:	52                   	push   %edx
   1586e:	50                   	push   %eax
   1586f:	e8 b0 f3 ff ff       	call   14c24 <free_block>
   15874:	83 c4 10             	add    $0x10,%esp
   15877:	85 c0                	test   %eax,%eax
   15879:	74 11                	je     1588c <truncate+0xaa>
				inode->i_zone[i] = 0;     						// 块指针置0。
   1587b:	8b 44 24 20          	mov    0x20(%esp),%eax
   1587f:	8b 54 24 0c          	mov    0xc(%esp),%edx
   15883:	66 c7 44 50 0e 00 00 	movw   $0x0,0xe(%eax,%edx,2)
   1588a:	eb 08                	jmp    15894 <truncate+0xb2>
			else
				block_busy = 1;         						// 若没有释放掉则置标志。
   1588c:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
   15893:	00 
		return;
	// 然后释放i节点的7个直接逻辑块，并将这7个逻辑块项全置零。函数free_block()用于释放设备上指定逻辑块的磁盘块
	// （fs/bitmap.c）。若有逻辑块忙而没有被释放则置块忙标志block_busy。
repeat:
	block_busy = 0;
	for (i = 0; i < 7; i++)
   15894:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   15899:	83 7c 24 0c 06       	cmpl   $0x6,0xc(%esp)
   1589e:	7e 9d                	jle    1583d <truncate+0x5b>
			if (free_block(inode->i_dev, inode->i_zone[i]))
				inode->i_zone[i] = 0;     						// 块指针置0。
			else
				block_busy = 1;         						// 若没有释放掉则置标志。
		}
	if (free_ind(inode->i_dev, inode->i_zone[7]))    			// 释放所有一次间接块。
   158a0:	8b 44 24 20          	mov    0x20(%esp),%eax
   158a4:	0f b7 40 1c          	movzwl 0x1c(%eax),%eax
   158a8:	0f b7 d0             	movzwl %ax,%edx
   158ab:	8b 44 24 20          	mov    0x20(%esp),%eax
   158af:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   158b3:	0f b7 c0             	movzwl %ax,%eax
   158b6:	83 ec 08             	sub    $0x8,%esp
   158b9:	52                   	push   %edx
   158ba:	50                   	push   %eax
   158bb:	e8 74 fd ff ff       	call   15634 <free_ind>
   158c0:	83 c4 10             	add    $0x10,%esp
   158c3:	85 c0                	test   %eax,%eax
   158c5:	74 0c                	je     158d3 <truncate+0xf1>
		inode->i_zone[7] = 0;                   				// 块指针置0。
   158c7:	8b 44 24 20          	mov    0x20(%esp),%eax
   158cb:	66 c7 40 1c 00 00    	movw   $0x0,0x1c(%eax)
   158d1:	eb 08                	jmp    158db <truncate+0xf9>
	else
		block_busy = 1;                         				// 若没有释放掉则置标志。
   158d3:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
   158da:	00 
	if (free_dind(inode->i_dev, inode->i_zone[8]))   			// 释放所有二次间接块。
   158db:	8b 44 24 20          	mov    0x20(%esp),%eax
   158df:	0f b7 40 1e          	movzwl 0x1e(%eax),%eax
   158e3:	0f b7 d0             	movzwl %ax,%edx
   158e6:	8b 44 24 20          	mov    0x20(%esp),%eax
   158ea:	0f b7 40 30          	movzwl 0x30(%eax),%eax
   158ee:	0f b7 c0             	movzwl %ax,%eax
   158f1:	83 ec 08             	sub    $0x8,%esp
   158f4:	52                   	push   %edx
   158f5:	50                   	push   %eax
   158f6:	e8 10 fe ff ff       	call   1570b <free_dind>
   158fb:	83 c4 10             	add    $0x10,%esp
   158fe:	85 c0                	test   %eax,%eax
   15900:	74 0c                	je     1590e <truncate+0x12c>
		inode->i_zone[8] = 0;                   				// 块指针置0。
   15902:	8b 44 24 20          	mov    0x20(%esp),%eax
   15906:	66 c7 40 1e 00 00    	movw   $0x0,0x1e(%eax)
   1590c:	eb 08                	jmp    15916 <truncate+0x134>
	else
		block_busy = 1;                         				// 若没有释放掉则置标志。
   1590e:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
   15915:	00 
	// 此后设置i节点已修改标志，并且如果还有逻辑块由于 “忙”而没有被释放，则把当前进程运行时间片置0,以让当前进程先被
	// 切换去运行其他进程，稍等一会再重新执行释放操作。
	inode->i_dirt = 1;
   15916:	8b 44 24 20          	mov    0x20(%esp),%eax
   1591a:	c6 40 37 01          	movb   $0x1,0x37(%eax)
	if (block_busy) {
   1591e:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   15923:	74 16                	je     1593b <truncate+0x159>
		current->counter = 0;           						// 当前进程时间片置0。
   15925:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1592a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
		schedule();
   15931:	e8 0f 15 ff ff       	call   6e45 <schedule>
		goto repeat;
   15936:	e9 f0 fe ff ff       	jmp    1582b <truncate+0x49>
	}
	inode->i_size = 0;                      					// 文件大小置零。
   1593b:	8b 44 24 20          	mov    0x20(%esp),%eax
   1593f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	// 最后重新置文件修改时间和i节点改变时间为当前时间。宏CURRENT_TIME定义在头文件include/linux/sched.h中，定义
	// 为（startup_time+jiffies/HZ）。用于取得从1970:0:0:0开始到现在为止经过的秒数。
	inode->i_mtime = inode->i_ctime = CURRENT_TIME;
   15946:	a1 00 eb 02 00       	mov    0x2eb00,%eax
   1594b:	8b 15 08 eb 02 00    	mov    0x2eb08,%edx
   15951:	01 d0                	add    %edx,%eax
   15953:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   15958:	f7 e2                	mul    %edx
   1595a:	c1 ea 05             	shr    $0x5,%edx
   1595d:	a1 04 eb 02 00       	mov    0x2eb04,%eax
   15962:	01 c2                	add    %eax,%edx
   15964:	8b 44 24 20          	mov    0x20(%esp),%eax
   15968:	89 50 2c             	mov    %edx,0x2c(%eax)
   1596b:	8b 44 24 20          	mov    0x20(%esp),%eax
   1596f:	8b 50 2c             	mov    0x2c(%eax),%edx
   15972:	8b 44 24 20          	mov    0x20(%esp),%eax
   15976:	89 50 08             	mov    %edx,0x8(%eax)
   15979:	eb 01                	jmp    1597c <truncate+0x19a>
	int block_busy;                 							// 有逻辑块没有被释放的标志。

	// 首先判断指定i节点有效性。如果不是常规文件、目录文件或链接项，则返回。
	if (!(S_ISREG(inode->i_mode) || S_ISDIR(inode->i_mode) ||
	     S_ISLNK(inode->i_mode)))
		return;
   1597b:	90                   	nop
	}
	inode->i_size = 0;                      					// 文件大小置零。
	// 最后重新置文件修改时间和i节点改变时间为当前时间。宏CURRENT_TIME定义在头文件include/linux/sched.h中，定义
	// 为（startup_time+jiffies/HZ）。用于取得从1970:0:0:0开始到现在为止经过的秒数。
	inode->i_mtime = inode->i_ctime = CURRENT_TIME;
}
   1597c:	83 c4 1c             	add    $0x1c,%esp
   1597f:	c3                   	ret    

00015980 <get_fs_long>:
//// 读取fs段中指定地址处的长字(4字节).
// 参数:addr - 指定的内存地址.
// %0 - (返回的长字_v);%1 - (内存地址addr)
// 返回:返回内存fs:[addr]处的长字.
static inline unsigned long get_fs_long(const unsigned long *addr)
{
   15980:	83 ec 10             	sub    $0x10,%esp
	unsigned long _v;

	__asm__ ("movl %%fs:%1,%0":"=q" (_v):"m" (*addr)); \
   15983:	8b 44 24 14          	mov    0x14(%esp),%eax
   15987:	64 8b 00             	mov    %fs:(%eax),%eax
   1598a:	89 44 24 0c          	mov    %eax,0xc(%esp)
	return _v;
   1598e:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   15992:	83 c4 10             	add    $0x10,%esp
   15995:	c3                   	ret    

00015996 <put_fs_long>:
//// 将一长字存放在fs段中指定内存地址处.
// 参数:val - 长字值;addr - 内存地址.
// %0 - 寄存器(长字值val);%1 - (内存地址addr).
static inline void put_fs_long(unsigned long val,unsigned long * addr)
{
__asm__ ("movl %0,%%fs:%1"::"q" (val),"m" (*addr));
   15996:	8b 44 24 04          	mov    0x4(%esp),%eax
   1599a:	8b 54 24 08          	mov    0x8(%esp),%edx
   1599e:	64 89 02             	mov    %eax,%fs:(%edx)
}
   159a1:	90                   	nop
   159a2:	c3                   	ret    

000159a3 <add_wait>:
} select_table;

// 把未准备好描述符的等待队列指针加入等待表wait_table中。参数*wait_address是与描述符相关的等待队列头指针。例如tty读缓冲队
// 列secondary的等待队列头指针是proc_list。参数p是do_select()中定义的等待表结构指针。
static void add_wait(struct task_struct ** wait_address, select_table * p)
{
   159a3:	83 ec 10             	sub    $0x10,%esp
	int i;

	// 首先判断描述符是否有对应的等待队列，若无则返回。然后在等待表中搜索参数指定的等待队列指针是否已经在等待表中设置过，若设置过也
	// 立刻返回。这个判断主要是针对管道文件描述符。例如若一个管道在等待可以进行读操作，那么其必定可以立刻进行写操作。
	if (!wait_address)
   159a6:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
   159ab:	74 70                	je     15a1d <add_wait+0x7a>
		return;
	for (i = 0 ; i < p->nr ; i++)
   159ad:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   159b4:	00 
   159b5:	eb 17                	jmp    159ce <add_wait+0x2b>
		if (p->entry[i].wait_address == wait_address)
   159b7:	8b 44 24 18          	mov    0x18(%esp),%eax
   159bb:	8b 54 24 0c          	mov    0xc(%esp),%edx
   159bf:	8b 44 d0 08          	mov    0x8(%eax,%edx,8),%eax
   159c3:	3b 44 24 14          	cmp    0x14(%esp),%eax
   159c7:	74 57                	je     15a20 <add_wait+0x7d>

	// 首先判断描述符是否有对应的等待队列，若无则返回。然后在等待表中搜索参数指定的等待队列指针是否已经在等待表中设置过，若设置过也
	// 立刻返回。这个判断主要是针对管道文件描述符。例如若一个管道在等待可以进行读操作，那么其必定可以立刻进行写操作。
	if (!wait_address)
		return;
	for (i = 0 ; i < p->nr ; i++)
   159c9:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   159ce:	8b 44 24 18          	mov    0x18(%esp),%eax
   159d2:	8b 00                	mov    (%eax),%eax
   159d4:	3b 44 24 0c          	cmp    0xc(%esp),%eax
   159d8:	7f dd                	jg     159b7 <add_wait+0x14>
		if (p->entry[i].wait_address == wait_address)
			return;
	// 然后我们把描述符对应等待队列的头指针保存在等待表wait_table中，同时让等待表项的old_task字段指向等待队列头指针指向的任务（若
	// 无则为NULL），在让等待队列头指针指向当前任务。最后把等待表有效项计数值nr增1（其在第179行初始化为0）。
	p->entry[p->nr].wait_address = wait_address;
   159da:	8b 44 24 18          	mov    0x18(%esp),%eax
   159de:	8b 10                	mov    (%eax),%edx
   159e0:	8b 44 24 18          	mov    0x18(%esp),%eax
   159e4:	8b 4c 24 14          	mov    0x14(%esp),%ecx
   159e8:	89 4c d0 08          	mov    %ecx,0x8(%eax,%edx,8)
	p->entry[p->nr].old_task = * wait_address;
   159ec:	8b 44 24 18          	mov    0x18(%esp),%eax
   159f0:	8b 10                	mov    (%eax),%edx
   159f2:	8b 44 24 14          	mov    0x14(%esp),%eax
   159f6:	8b 08                	mov    (%eax),%ecx
   159f8:	8b 44 24 18          	mov    0x18(%esp),%eax
   159fc:	89 4c d0 04          	mov    %ecx,0x4(%eax,%edx,8)
	*wait_address = current;
   15a00:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   15a06:	8b 44 24 14          	mov    0x14(%esp),%eax
   15a0a:	89 10                	mov    %edx,(%eax)
	p->nr++;
   15a0c:	8b 44 24 18          	mov    0x18(%esp),%eax
   15a10:	8b 00                	mov    (%eax),%eax
   15a12:	8d 50 01             	lea    0x1(%eax),%edx
   15a15:	8b 44 24 18          	mov    0x18(%esp),%eax
   15a19:	89 10                	mov    %edx,(%eax)
   15a1b:	eb 04                	jmp    15a21 <add_wait+0x7e>
	int i;

	// 首先判断描述符是否有对应的等待队列，若无则返回。然后在等待表中搜索参数指定的等待队列指针是否已经在等待表中设置过，若设置过也
	// 立刻返回。这个判断主要是针对管道文件描述符。例如若一个管道在等待可以进行读操作，那么其必定可以立刻进行写操作。
	if (!wait_address)
		return;
   15a1d:	90                   	nop
   15a1e:	eb 01                	jmp    15a21 <add_wait+0x7e>
	for (i = 0 ; i < p->nr ; i++)
		if (p->entry[i].wait_address == wait_address)
			return;
   15a20:	90                   	nop
	// 无则为NULL），在让等待队列头指针指向当前任务。最后把等待表有效项计数值nr增1（其在第179行初始化为0）。
	p->entry[p->nr].wait_address = wait_address;
	p->entry[p->nr].old_task = * wait_address;
	*wait_address = current;
	p->nr++;
}
   15a21:	83 c4 10             	add    $0x10,%esp
   15a24:	c3                   	ret    

00015a25 <free_wait>:

// 清空等待表。参数是等待表结构指针。本函数在do_select()函数中睡眠后被唤醒返回时被调用，用于唤醒等待表中处于各个等待队列上的其他
// 任务，它与kernel/sched.c中sleep_on()函数的后半部分代码几乎完全相同，请参考对sleep_on()函数的说明。
static void free_wait(select_table * p)
{
   15a25:	83 ec 1c             	sub    $0x1c,%esp
	struct task_struct ** tpp;

	// 如果等待表中各项（共nr个有效项）记录的等待队列头指针表明还有其他后来添加进的等待任务（例如其他进程调用sleep_on()函数而睡眠在该
	// 等待队列上），则此时等待队列头指针指向的不是当前进程，那么我们就需要先唤醒这些任务。操作方法是将等待队列头所指任务先置为就绪状态
	// （state = 0），并把自己设置为不可中断等待状态，即自己要等待这些后续进队列的任务被唤醒而执行时来唤醒本任务。然后重新执行调度程序。
	for (i = 0; i < p->nr ; i++) {
   15a28:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   15a2f:	00 
   15a30:	e9 8e 00 00 00       	jmp    15ac3 <free_wait+0x9e>
		tpp = p->entry[i].wait_address;
   15a35:	8b 44 24 20          	mov    0x20(%esp),%eax
   15a39:	8b 54 24 0c          	mov    0xc(%esp),%edx
   15a3d:	8b 44 d0 08          	mov    0x8(%eax,%edx,8),%eax
   15a41:	89 44 24 08          	mov    %eax,0x8(%esp)
		while (*tpp && *tpp != current) {
   15a45:	eb 1c                	jmp    15a63 <free_wait+0x3e>
			(*tpp)->state = 0;
   15a47:	8b 44 24 08          	mov    0x8(%esp),%eax
   15a4b:	8b 00                	mov    (%eax),%eax
   15a4d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			current->state = TASK_UNINTERRUPTIBLE;
   15a53:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   15a58:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
			schedule();
   15a5e:	e8 e2 13 ff ff       	call   6e45 <schedule>
	// 如果等待表中各项（共nr个有效项）记录的等待队列头指针表明还有其他后来添加进的等待任务（例如其他进程调用sleep_on()函数而睡眠在该
	// 等待队列上），则此时等待队列头指针指向的不是当前进程，那么我们就需要先唤醒这些任务。操作方法是将等待队列头所指任务先置为就绪状态
	// （state = 0），并把自己设置为不可中断等待状态，即自己要等待这些后续进队列的任务被唤醒而执行时来唤醒本任务。然后重新执行调度程序。
	for (i = 0; i < p->nr ; i++) {
		tpp = p->entry[i].wait_address;
		while (*tpp && *tpp != current) {
   15a63:	8b 44 24 08          	mov    0x8(%esp),%eax
   15a67:	8b 00                	mov    (%eax),%eax
   15a69:	85 c0                	test   %eax,%eax
   15a6b:	74 0f                	je     15a7c <free_wait+0x57>
   15a6d:	8b 44 24 08          	mov    0x8(%esp),%eax
   15a71:	8b 10                	mov    (%eax),%edx
   15a73:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   15a78:	39 c2                	cmp    %eax,%edx
   15a7a:	75 cb                	jne    15a47 <free_wait+0x22>
			schedule();
		}
		// 执行到这里，说明等待表当前处理项中的等待队列头指针字段wait_address指向当前任务，若它为空，则表明调度有问题，于是显示警告信息。
		// 然后我们让等待队列头指针指向在我们前面进入队列的任务（第76行）。若此时该头指针确实指向一个任务而不是NULL，则说明队列中还有任务（
		// *tpp不为空），于是将该任务设置成就绪状态，唤醒之。最后把等待表的有效表项计数字段nr清零。
		if (!*tpp)
   15a7c:	8b 44 24 08          	mov    0x8(%esp),%eax
   15a80:	8b 00                	mov    (%eax),%eax
   15a82:	85 c0                	test   %eax,%eax
   15a84:	75 10                	jne    15a96 <free_wait+0x71>
			printk("free_wait: NULL");
   15a86:	83 ec 0c             	sub    $0xc,%esp
   15a89:	68 5c 3d 02 00       	push   $0x23d5c
   15a8e:	e8 b4 31 ff ff       	call   8c47 <printk>
   15a93:	83 c4 10             	add    $0x10,%esp
		if (*tpp = p->entry[i].old_task)
   15a96:	8b 44 24 20          	mov    0x20(%esp),%eax
   15a9a:	8b 54 24 0c          	mov    0xc(%esp),%edx
   15a9e:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   15aa2:	8b 44 24 08          	mov    0x8(%esp),%eax
   15aa6:	89 10                	mov    %edx,(%eax)
   15aa8:	8b 44 24 08          	mov    0x8(%esp),%eax
   15aac:	8b 00                	mov    (%eax),%eax
   15aae:	85 c0                	test   %eax,%eax
   15ab0:	74 0c                	je     15abe <free_wait+0x99>
			(**tpp).state = 0;
   15ab2:	8b 44 24 08          	mov    0x8(%esp),%eax
   15ab6:	8b 00                	mov    (%eax),%eax
   15ab8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	struct task_struct ** tpp;

	// 如果等待表中各项（共nr个有效项）记录的等待队列头指针表明还有其他后来添加进的等待任务（例如其他进程调用sleep_on()函数而睡眠在该
	// 等待队列上），则此时等待队列头指针指向的不是当前进程，那么我们就需要先唤醒这些任务。操作方法是将等待队列头所指任务先置为就绪状态
	// （state = 0），并把自己设置为不可中断等待状态，即自己要等待这些后续进队列的任务被唤醒而执行时来唤醒本任务。然后重新执行调度程序。
	for (i = 0; i < p->nr ; i++) {
   15abe:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   15ac3:	8b 44 24 20          	mov    0x20(%esp),%eax
   15ac7:	8b 00                	mov    (%eax),%eax
   15ac9:	3b 44 24 0c          	cmp    0xc(%esp),%eax
   15acd:	0f 8f 62 ff ff ff    	jg     15a35 <free_wait+0x10>
		if (!*tpp)
			printk("free_wait: NULL");
		if (*tpp = p->entry[i].old_task)
			(**tpp).state = 0;
	}
	p->nr = 0;
   15ad3:	8b 44 24 20          	mov    0x20(%esp),%eax
   15ad7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   15add:	90                   	nop
   15ade:	83 c4 1c             	add    $0x1c,%esp
   15ae1:	c3                   	ret    

00015ae2 <get_tty>:

// 根据文件i节点判断文件是不是字符终端设备文件。若是则返回其tty结构指针，否则返回NULL。
static struct tty_struct * get_tty(struct m_inode * inode)
{
   15ae2:	83 ec 10             	sub    $0x10,%esp
	int major, minor;

	// 如果不是字符设备文件则返回NULL。如果主设备号不是5（控制终端）或4，则返回NULL。
	if (!S_ISCHR(inode->i_mode))
   15ae5:	8b 44 24 14          	mov    0x14(%esp),%eax
   15ae9:	0f b7 00             	movzwl (%eax),%eax
   15aec:	0f b7 c0             	movzwl %ax,%eax
   15aef:	25 00 f0 00 00       	and    $0xf000,%eax
   15af4:	3d 00 20 00 00       	cmp    $0x2000,%eax
   15af9:	74 0a                	je     15b05 <get_tty+0x23>
		return NULL;
   15afb:	b8 00 00 00 00       	mov    $0x0,%eax
   15b00:	e9 9d 00 00 00       	jmp    15ba2 <get_tty+0xc0>
	if ((major = MAJOR(inode->i_zone[0])) != 5 && major != 4)
   15b05:	8b 44 24 14          	mov    0x14(%esp),%eax
   15b09:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   15b0d:	66 c1 e8 08          	shr    $0x8,%ax
   15b11:	0f b7 c0             	movzwl %ax,%eax
   15b14:	89 44 24 08          	mov    %eax,0x8(%esp)
   15b18:	83 7c 24 08 05       	cmpl   $0x5,0x8(%esp)
   15b1d:	74 0e                	je     15b2d <get_tty+0x4b>
   15b1f:	83 7c 24 08 04       	cmpl   $0x4,0x8(%esp)
   15b24:	74 07                	je     15b2d <get_tty+0x4b>
		return NULL;
   15b26:	b8 00 00 00 00       	mov    $0x0,%eax
   15b2b:	eb 75                	jmp    15ba2 <get_tty+0xc0>
	// 如果主设备号是5，那么其终端设备号等于进程的tty字段值，否则就等于字符设备文件次设备号。如果终端设备号小于0,表示进程没有
	// 控制终端或没有使用终端，于是返回NULL。否则返回对应的tty结构指针。
	if (major == 5)
   15b2d:	83 7c 24 08 05       	cmpl   $0x5,0x8(%esp)
   15b32:	75 11                	jne    15b45 <get_tty+0x63>
		minor = current->tty;
   15b34:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   15b39:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
   15b3f:	89 44 24 0c          	mov    %eax,0xc(%esp)
   15b43:	eb 14                	jmp    15b59 <get_tty+0x77>
	else
		minor = MINOR(inode->i_zone[0]);
   15b45:	8b 44 24 14          	mov    0x14(%esp),%eax
   15b49:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   15b4d:	0f b7 c0             	movzwl %ax,%eax
   15b50:	25 ff 00 00 00       	and    $0xff,%eax
   15b55:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if (minor < 0)
   15b59:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   15b5e:	79 07                	jns    15b67 <get_tty+0x85>
		return NULL;
   15b60:	b8 00 00 00 00       	mov    $0x0,%eax
   15b65:	eb 3b                	jmp    15ba2 <get_tty+0xc0>
	return TTY_TABLE(minor);
   15b67:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   15b6c:	74 26                	je     15b94 <get_tty+0xb2>
   15b6e:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
   15b73:	7f 11                	jg     15b86 <get_tty+0xa4>
   15b75:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15b79:	83 e8 01             	sub    $0x1,%eax
   15b7c:	c1 e0 06             	shl    $0x6,%eax
   15b7f:	05 20 18 04 00       	add    $0x41820,%eax
   15b84:	eb 1b                	jmp    15ba1 <get_tty+0xbf>
   15b86:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15b8a:	c1 e0 06             	shl    $0x6,%eax
   15b8d:	05 20 18 04 00       	add    $0x41820,%eax
   15b92:	eb 0d                	jmp    15ba1 <get_tty+0xbf>
   15b94:	a1 80 12 03 00       	mov    0x31280,%eax
   15b99:	c1 e0 06             	shl    $0x6,%eax
   15b9c:	05 20 18 04 00       	add    $0x41820,%eax
   15ba1:	90                   	nop
}
   15ba2:	83 c4 10             	add    $0x10,%esp
   15ba5:	c3                   	ret    

00015ba6 <check_in>:
 * check_XX函数用于检查一个文件。我们知道该文件要么是管道文件、要么是字符设备文件，或者要么是一个FIFO（FIFO）还未实现。
 */
// 检查读文件操作是否准备好，即终端读缓冲队列secondary是否有字符可读，或者管道文件是否不空。参数wait是等待表指针；inode
// 是文件i节点指针。若描述符可进行读操作则返回1,否则返回0。
static int check_in(select_table * wait, struct m_inode * inode)
{
   15ba6:	83 ec 10             	sub    $0x10,%esp

	// 首先根据文件i节点调用get_tty()检测文件是不是一个tty终端（字符）设备文件，如果是则检查该终端读缓冲队列secondary中是否有
	// 字符可供读取，若有则返回1，若此时secondary为空则把当前任务添加到secondary的等待队列proc_list上并返回0。如果是管道文件
	// 则判断目前管道中是否有字符可读，若有则返回1，若没有（管道空）则把当前任务添加到管道i节点的等待队列上并返回0。注意，PIPE_-
	// EMPTY()宏使用管道当前头尾指针位置来判断管道是否为空。管道i节点的i_zone[0]和i_zone[1]字段分别存放着管道当前的头尾指针。
	if (tty = get_tty(inode))
   15ba9:	ff 74 24 18          	pushl  0x18(%esp)
   15bad:	e8 30 ff ff ff       	call   15ae2 <get_tty>
   15bb2:	83 c4 04             	add    $0x4,%esp
   15bb5:	89 44 24 0c          	mov    %eax,0xc(%esp)
   15bb9:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   15bbe:	74 38                	je     15bf8 <check_in+0x52>
		if (!EMPTY(tty->secondary))
   15bc0:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15bc4:	8b 40 3c             	mov    0x3c(%eax),%eax
   15bc7:	8b 50 04             	mov    0x4(%eax),%edx
   15bca:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15bce:	8b 40 3c             	mov    0x3c(%eax),%eax
   15bd1:	8b 40 08             	mov    0x8(%eax),%eax
   15bd4:	39 c2                	cmp    %eax,%edx
   15bd6:	74 07                	je     15bdf <check_in+0x39>
			return 1;
   15bd8:	b8 01 00 00 00       	mov    $0x1,%eax
   15bdd:	eb 5a                	jmp    15c39 <check_in+0x93>
		else
			add_wait(&tty->secondary->proc_list, wait);
   15bdf:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15be3:	8b 40 3c             	mov    0x3c(%eax),%eax
   15be6:	83 c0 0c             	add    $0xc,%eax
   15be9:	ff 74 24 14          	pushl  0x14(%esp)
   15bed:	50                   	push   %eax
   15bee:	e8 b0 fd ff ff       	call   159a3 <add_wait>
   15bf3:	83 c4 08             	add    $0x8,%esp
   15bf6:	eb 3c                	jmp    15c34 <check_in+0x8e>
	else if (inode->i_pipe)
   15bf8:	8b 44 24 18          	mov    0x18(%esp),%eax
   15bfc:	0f b6 40 38          	movzbl 0x38(%eax),%eax
   15c00:	84 c0                	test   %al,%al
   15c02:	74 30                	je     15c34 <check_in+0x8e>
		if (!PIPE_EMPTY(*inode))
   15c04:	8b 44 24 18          	mov    0x18(%esp),%eax
   15c08:	0f b7 50 0e          	movzwl 0xe(%eax),%edx
   15c0c:	8b 44 24 18          	mov    0x18(%esp),%eax
   15c10:	0f b7 40 10          	movzwl 0x10(%eax),%eax
   15c14:	66 39 c2             	cmp    %ax,%dx
   15c17:	74 07                	je     15c20 <check_in+0x7a>
			return 1;
   15c19:	b8 01 00 00 00       	mov    $0x1,%eax
   15c1e:	eb 19                	jmp    15c39 <check_in+0x93>
		else
			add_wait(&inode->i_wait, wait);
   15c20:	8b 44 24 18          	mov    0x18(%esp),%eax
   15c24:	83 c0 20             	add    $0x20,%eax
   15c27:	ff 74 24 14          	pushl  0x14(%esp)
   15c2b:	50                   	push   %eax
   15c2c:	e8 72 fd ff ff       	call   159a3 <add_wait>
   15c31:	83 c4 08             	add    $0x8,%esp
	return 0;
   15c34:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15c39:	83 c4 10             	add    $0x10,%esp
   15c3c:	c3                   	ret    

00015c3d <check_out>:

// 检查文件写操作是否准备好，即终端写缓冲队列write_q中是否还有空闲位置可写，或者此时管道文件是否不满。参数wait是等待表指针；
// inode是文件i节点指针。若描述符可进行写操作则返回1，否则返回0。
static int check_out(select_table * wait, struct m_inode * inode)
{
   15c3d:	83 ec 10             	sub    $0x10,%esp
	struct tty_struct * tty;

	// 首先根据文件i节点调用get_tty()检测文件是不是一个tty终端（字符）设备文件，如果是则检查该终端写缓冲队列write_q中是否有空间
	// 可写入，若有则返回1,若没有空间则把当前任务添加到write_q等待队列proc_list上并返回0。如果是管道文件则判断目前管道中是否有
	// 空闲空间可写入字符，若有则返回1，若没有（管道满）则把当前任务添加到管道i节点的等待队列上并返回0。
	if (tty = get_tty(inode))
   15c40:	ff 74 24 18          	pushl  0x18(%esp)
   15c44:	e8 99 fe ff ff       	call   15ae2 <get_tty>
   15c49:	83 c4 04             	add    $0x4,%esp
   15c4c:	89 44 24 0c          	mov    %eax,0xc(%esp)
   15c50:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   15c55:	74 44                	je     15c9b <check_out+0x5e>
		if (!FULL(tty->write_q))
   15c57:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15c5b:	8b 40 38             	mov    0x38(%eax),%eax
   15c5e:	8b 50 08             	mov    0x8(%eax),%edx
   15c61:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15c65:	8b 40 38             	mov    0x38(%eax),%eax
   15c68:	8b 40 04             	mov    0x4(%eax),%eax
   15c6b:	29 c2                	sub    %eax,%edx
   15c6d:	89 d0                	mov    %edx,%eax
   15c6f:	83 e8 01             	sub    $0x1,%eax
   15c72:	25 ff 03 00 00       	and    $0x3ff,%eax
   15c77:	85 c0                	test   %eax,%eax
   15c79:	74 07                	je     15c82 <check_out+0x45>
			return 1;
   15c7b:	b8 01 00 00 00       	mov    $0x1,%eax
   15c80:	eb 6b                	jmp    15ced <check_out+0xb0>
		else
			add_wait(&tty->write_q->proc_list, wait);
   15c82:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15c86:	8b 40 38             	mov    0x38(%eax),%eax
   15c89:	83 c0 0c             	add    $0xc,%eax
   15c8c:	ff 74 24 14          	pushl  0x14(%esp)
   15c90:	50                   	push   %eax
   15c91:	e8 0d fd ff ff       	call   159a3 <add_wait>
   15c96:	83 c4 08             	add    $0x8,%esp
   15c99:	eb 4d                	jmp    15ce8 <check_out+0xab>
	else if (inode->i_pipe)
   15c9b:	8b 44 24 18          	mov    0x18(%esp),%eax
   15c9f:	0f b6 40 38          	movzbl 0x38(%eax),%eax
   15ca3:	84 c0                	test   %al,%al
   15ca5:	74 41                	je     15ce8 <check_out+0xab>
		if (!PIPE_FULL(*inode))
   15ca7:	8b 44 24 18          	mov    0x18(%esp),%eax
   15cab:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   15caf:	0f b7 d0             	movzwl %ax,%edx
   15cb2:	8b 44 24 18          	mov    0x18(%esp),%eax
   15cb6:	0f b7 40 10          	movzwl 0x10(%eax),%eax
   15cba:	0f b7 c0             	movzwl %ax,%eax
   15cbd:	29 c2                	sub    %eax,%edx
   15cbf:	89 d0                	mov    %edx,%eax
   15cc1:	25 ff 0f 00 00       	and    $0xfff,%eax
   15cc6:	3d ff 0f 00 00       	cmp    $0xfff,%eax
   15ccb:	74 07                	je     15cd4 <check_out+0x97>
			return 1;
   15ccd:	b8 01 00 00 00       	mov    $0x1,%eax
   15cd2:	eb 19                	jmp    15ced <check_out+0xb0>
		else
			add_wait(&inode->i_wait, wait);
   15cd4:	8b 44 24 18          	mov    0x18(%esp),%eax
   15cd8:	83 c0 20             	add    $0x20,%eax
   15cdb:	ff 74 24 14          	pushl  0x14(%esp)
   15cdf:	50                   	push   %eax
   15ce0:	e8 be fc ff ff       	call   159a3 <add_wait>
   15ce5:	83 c4 08             	add    $0x8,%esp
	return 0;
   15ce8:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15ced:	83 c4 10             	add    $0x10,%esp
   15cf0:	c3                   	ret    

00015cf1 <check_ex>:

// 检查文件是否处于异常状态。对于终端设备文件，目前内核总是返回0。对于管道文件，如果此时两个管道描述符中有一个或都已被关闭，则
// 返回1，否则就把当前任务添加到管道i节点的等待队列上并返回0。返回0。参数wait等待表指针；inode是文件i节点指针。若出现异常条件
// 则返回1，否则返回0。
static int check_ex(select_table * wait, struct m_inode * inode)
{
   15cf1:	83 ec 10             	sub    $0x10,%esp
	struct tty_struct * tty;

	if (tty = get_tty(inode))
   15cf4:	ff 74 24 18          	pushl  0x18(%esp)
   15cf8:	e8 e5 fd ff ff       	call   15ae2 <get_tty>
   15cfd:	83 c4 04             	add    $0x4,%esp
   15d00:	89 44 24 0c          	mov    %eax,0xc(%esp)
   15d04:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   15d09:	74 32                	je     15d3d <check_ex+0x4c>
		if (!FULL(tty->write_q))
   15d0b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15d0f:	8b 40 38             	mov    0x38(%eax),%eax
   15d12:	8b 50 08             	mov    0x8(%eax),%edx
   15d15:	8b 44 24 0c          	mov    0xc(%esp),%eax
   15d19:	8b 40 38             	mov    0x38(%eax),%eax
   15d1c:	8b 40 04             	mov    0x4(%eax),%eax
   15d1f:	29 c2                	sub    %eax,%edx
   15d21:	89 d0                	mov    %edx,%eax
   15d23:	83 e8 01             	sub    $0x1,%eax
   15d26:	25 ff 03 00 00       	and    $0x3ff,%eax
   15d2b:	85 c0                	test   %eax,%eax
   15d2d:	74 07                	je     15d36 <check_ex+0x45>
			return 0;
   15d2f:	b8 00 00 00 00       	mov    $0x0,%eax
   15d34:	eb 41                	jmp    15d77 <check_ex+0x86>
		else
			return 0;
   15d36:	b8 00 00 00 00       	mov    $0x0,%eax
   15d3b:	eb 3a                	jmp    15d77 <check_ex+0x86>
	else if (inode->i_pipe)
   15d3d:	8b 44 24 18          	mov    0x18(%esp),%eax
   15d41:	0f b6 40 38          	movzbl 0x38(%eax),%eax
   15d45:	84 c0                	test   %al,%al
   15d47:	74 29                	je     15d72 <check_ex+0x81>
		if (inode->i_count < 2)
   15d49:	8b 44 24 18          	mov    0x18(%esp),%eax
   15d4d:	0f b7 40 34          	movzwl 0x34(%eax),%eax
   15d51:	66 83 f8 01          	cmp    $0x1,%ax
   15d55:	77 07                	ja     15d5e <check_ex+0x6d>
			return 1;
   15d57:	b8 01 00 00 00       	mov    $0x1,%eax
   15d5c:	eb 19                	jmp    15d77 <check_ex+0x86>
		else
			add_wait(&inode->i_wait, wait);
   15d5e:	8b 44 24 18          	mov    0x18(%esp),%eax
   15d62:	83 c0 20             	add    $0x20,%eax
   15d65:	ff 74 24 14          	pushl  0x14(%esp)
   15d69:	50                   	push   %eax
   15d6a:	e8 34 fc ff ff       	call   159a3 <add_wait>
   15d6f:	83 c4 08             	add    $0x8,%esp
	return 0;
   15d72:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15d77:	83 c4 10             	add    $0x10,%esp
   15d7a:	c3                   	ret    

00015d7b <do_select>:
// 集描述符检查函数check_XX()对每个描述符进行检查，同时统计描述符集中当前已经准备好的描述符个数。若有任何一个描述符已经准备好，
// 本函数就会立刻返回，否则进程就会在本函数中进入睡眠状态，并在过了超时时间或者由于某个描述符所在等待队列上的进程被唤醒而使本
// 进程继续运行。
int do_select(fd_set in, fd_set out, fd_set ex,
	fd_set *inp, fd_set *outp, fd_set *exp)
{
   15d7b:	81 ec fc 01 00 00    	sub    $0x1fc,%esp

	// 首先把3个描述符集进行或操作，在mask中得到描述符集中有效符位屏蔽码。然后循环判断当前进程各个描述符是否有效并且包含在描述符集内。
	// 在循环中，每判断完一个描述符就会把mask右移1位，因此根据mask的最低有效位我们就可以判断相应描述符是否在用户给定的描述符集中。有
	// 效的描述符应该是一个管道文件描述符，或者是一个字符设备文件描述符，或者是一个FIFO描述符，其余类型的都作为无效描述符而返回EBADF
	// 错误。
	mask = in | out | ex;
   15d81:	8b 84 24 00 02 00 00 	mov    0x200(%esp),%eax
   15d88:	0b 84 24 04 02 00 00 	or     0x204(%esp),%eax
   15d8f:	0b 84 24 08 02 00 00 	or     0x208(%esp),%eax
   15d96:	89 84 24 e4 01 00 00 	mov    %eax,0x1e4(%esp)
	for (i = 0 ; i < NR_OPEN ; i++, mask >>= 1) {
   15d9d:	c7 84 24 e8 01 00 00 	movl   $0x0,0x1e8(%esp)
   15da4:	00 00 00 00 
   15da8:	e9 f7 00 00 00       	jmp    15ea4 <do_select+0x129>
		if (!(mask & 1))                                        // 若不在描述符集中则继续判断下一个。
   15dad:	8b 84 24 e4 01 00 00 	mov    0x1e4(%esp),%eax
   15db4:	83 e0 01             	and    $0x1,%eax
   15db7:	85 c0                	test   %eax,%eax
   15db9:	0f 84 cc 00 00 00    	je     15e8b <do_select+0x110>
			continue;
		if (!current->filp[i])                                  // 若文件未打开，则返回描述符值。
   15dbf:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   15dc4:	8b 94 24 e8 01 00 00 	mov    0x1e8(%esp),%edx
   15dcb:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   15dd1:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   15dd5:	85 c0                	test   %eax,%eax
   15dd7:	75 0a                	jne    15de3 <do_select+0x68>
			return -EBADF;
   15dd9:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
   15dde:	e9 ea 02 00 00       	jmp    160cd <do_select+0x352>
		if (!current->filp[i]->f_inode)                         // 若文件i节点指针为空，则返回错误号。
   15de3:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   15de8:	8b 94 24 e8 01 00 00 	mov    0x1e8(%esp),%edx
   15def:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   15df5:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   15df9:	8b 40 08             	mov    0x8(%eax),%eax
   15dfc:	85 c0                	test   %eax,%eax
   15dfe:	75 0a                	jne    15e0a <do_select+0x8f>
			return -EBADF;
   15e00:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
   15e05:	e9 c3 02 00 00       	jmp    160cd <do_select+0x352>
		if (current->filp[i]->f_inode->i_pipe)                  // 若是管道文件描述符，则有效。
   15e0a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   15e0f:	8b 94 24 e8 01 00 00 	mov    0x1e8(%esp),%edx
   15e16:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   15e1c:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   15e20:	8b 40 08             	mov    0x8(%eax),%eax
   15e23:	0f b6 40 38          	movzbl 0x38(%eax),%eax
   15e27:	84 c0                	test   %al,%al
   15e29:	75 63                	jne    15e8e <do_select+0x113>
			continue;
		if (S_ISCHR(current->filp[i]->f_inode->i_mode))         // 字符设备文件有效。
   15e2b:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   15e30:	8b 94 24 e8 01 00 00 	mov    0x1e8(%esp),%edx
   15e37:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   15e3d:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   15e41:	8b 40 08             	mov    0x8(%eax),%eax
   15e44:	0f b7 00             	movzwl (%eax),%eax
   15e47:	0f b7 c0             	movzwl %ax,%eax
   15e4a:	25 00 f0 00 00       	and    $0xf000,%eax
   15e4f:	3d 00 20 00 00       	cmp    $0x2000,%eax
   15e54:	74 3b                	je     15e91 <do_select+0x116>
			continue;
		if (S_ISFIFO(current->filp[i]->f_inode->i_mode))        // FIFO也有效。
   15e56:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   15e5b:	8b 94 24 e8 01 00 00 	mov    0x1e8(%esp),%edx
   15e62:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   15e68:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   15e6c:	8b 40 08             	mov    0x8(%eax),%eax
   15e6f:	0f b7 00             	movzwl (%eax),%eax
   15e72:	0f b7 c0             	movzwl %ax,%eax
   15e75:	25 00 f0 00 00       	and    $0xf000,%eax
   15e7a:	3d 00 10 00 00       	cmp    $0x1000,%eax
   15e7f:	74 13                	je     15e94 <do_select+0x119>
			continue;
		return -EBADF;                  						// 其余都作为无效描述符而返回。
   15e81:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
   15e86:	e9 42 02 00 00       	jmp    160cd <do_select+0x352>
	// 效的描述符应该是一个管道文件描述符，或者是一个字符设备文件描述符，或者是一个FIFO描述符，其余类型的都作为无效描述符而返回EBADF
	// 错误。
	mask = in | out | ex;
	for (i = 0 ; i < NR_OPEN ; i++, mask >>= 1) {
		if (!(mask & 1))                                        // 若不在描述符集中则继续判断下一个。
			continue;
   15e8b:	90                   	nop
   15e8c:	eb 07                	jmp    15e95 <do_select+0x11a>
		if (!current->filp[i])                                  // 若文件未打开，则返回描述符值。
			return -EBADF;
		if (!current->filp[i]->f_inode)                         // 若文件i节点指针为空，则返回错误号。
			return -EBADF;
		if (current->filp[i]->f_inode->i_pipe)                  // 若是管道文件描述符，则有效。
			continue;
   15e8e:	90                   	nop
   15e8f:	eb 04                	jmp    15e95 <do_select+0x11a>
		if (S_ISCHR(current->filp[i]->f_inode->i_mode))         // 字符设备文件有效。
			continue;
   15e91:	90                   	nop
   15e92:	eb 01                	jmp    15e95 <do_select+0x11a>
		if (S_ISFIFO(current->filp[i]->f_inode->i_mode))        // FIFO也有效。
			continue;
   15e94:	90                   	nop
	// 首先把3个描述符集进行或操作，在mask中得到描述符集中有效符位屏蔽码。然后循环判断当前进程各个描述符是否有效并且包含在描述符集内。
	// 在循环中，每判断完一个描述符就会把mask右移1位，因此根据mask的最低有效位我们就可以判断相应描述符是否在用户给定的描述符集中。有
	// 效的描述符应该是一个管道文件描述符，或者是一个字符设备文件描述符，或者是一个FIFO描述符，其余类型的都作为无效描述符而返回EBADF
	// 错误。
	mask = in | out | ex;
	for (i = 0 ; i < NR_OPEN ; i++, mask >>= 1) {
   15e95:	83 84 24 e8 01 00 00 	addl   $0x1,0x1e8(%esp)
   15e9c:	01 
   15e9d:	d1 ac 24 e4 01 00 00 	shrl   0x1e4(%esp)
   15ea4:	83 bc 24 e8 01 00 00 	cmpl   $0x13,0x1e8(%esp)
   15eab:	13 
   15eac:	0f 8e fb fe ff ff    	jle    15dad <do_select+0x32>
	}
	// 下面循环检查3个描述符集中的各个描述符是否准备好（可以操作）。此时mask用作当前正在处理描述符的屏蔽码。循环中的3个函数check_in()、
	// check_out()和check_ex()分别用来判断描述符是否已经准备好。若一个描述符已经准备好，则在相关描述符集中设置对应位，并且把已准备
	// 好描述符个数计数值count增1。第186行for循环语句中的mask+= mask行将于mask<<1。
repeat:
	wait_table.nr = 0;
   15eb2:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
	*inp = *outp = *exp = 0;
   15eb9:	8b 84 24 14 02 00 00 	mov    0x214(%esp),%eax
   15ec0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   15ec6:	8b 84 24 14 02 00 00 	mov    0x214(%esp),%eax
   15ecd:	8b 10                	mov    (%eax),%edx
   15ecf:	8b 84 24 10 02 00 00 	mov    0x210(%esp),%eax
   15ed6:	89 10                	mov    %edx,(%eax)
   15ed8:	8b 84 24 10 02 00 00 	mov    0x210(%esp),%eax
   15edf:	8b 10                	mov    (%eax),%edx
   15ee1:	8b 84 24 0c 02 00 00 	mov    0x20c(%esp),%eax
   15ee8:	89 10                	mov    %edx,(%eax)
	count = 0;
   15eea:	c7 84 24 ec 01 00 00 	movl   $0x0,0x1ec(%esp)
   15ef1:	00 00 00 00 
	mask = 1;
   15ef5:	c7 84 24 e4 01 00 00 	movl   $0x1,0x1e4(%esp)
   15efc:	01 00 00 00 
	for (i = 0 ; i < NR_OPEN ; i++, mask += mask) {
   15f00:	c7 84 24 e8 01 00 00 	movl   $0x0,0x1e8(%esp)
   15f07:	00 00 00 00 
   15f0b:	e9 38 01 00 00       	jmp    16048 <do_select+0x2cd>
		// 如果此时判断的描述符在读操作描述符集中，并且该描述符已经准备好可以进行读操作，则把该描述符在描述符集in中对应位置为1,同时把已准备
		// 好描述符个数计数值count增1。
		if (mask & in)
   15f10:	8b 84 24 e4 01 00 00 	mov    0x1e4(%esp),%eax
   15f17:	23 84 24 00 02 00 00 	and    0x200(%esp),%eax
   15f1e:	85 c0                	test   %eax,%eax
   15f20:	74 4e                	je     15f70 <do_select+0x1f5>
			if (check_in(&wait_table, current->filp[i]->f_inode)) {
   15f22:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   15f27:	8b 94 24 e8 01 00 00 	mov    0x1e8(%esp),%edx
   15f2e:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   15f34:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   15f38:	8b 40 08             	mov    0x8(%eax),%eax
   15f3b:	50                   	push   %eax
   15f3c:	8d 44 24 04          	lea    0x4(%esp),%eax
   15f40:	50                   	push   %eax
   15f41:	e8 60 fc ff ff       	call   15ba6 <check_in>
   15f46:	83 c4 08             	add    $0x8,%esp
   15f49:	85 c0                	test   %eax,%eax
   15f4b:	74 23                	je     15f70 <do_select+0x1f5>
				*inp |= mask;   								// 描述符集中设置对应位。
   15f4d:	8b 84 24 0c 02 00 00 	mov    0x20c(%esp),%eax
   15f54:	8b 00                	mov    (%eax),%eax
   15f56:	0b 84 24 e4 01 00 00 	or     0x1e4(%esp),%eax
   15f5d:	89 c2                	mov    %eax,%edx
   15f5f:	8b 84 24 0c 02 00 00 	mov    0x20c(%esp),%eax
   15f66:	89 10                	mov    %edx,(%eax)
				count++;        								// 已准备好描述符个数计数。
   15f68:	83 84 24 ec 01 00 00 	addl   $0x1,0x1ec(%esp)
   15f6f:	01 
			}
		// 如果此时判断的描述符在写操作描述符集中，并且该描述符已经准备好可以进行写操作，则把该描述符在描述符集out中对应位置为1,同时把已准备
		// 好描述符个数计数值count增1。
		if (mask & out)
   15f70:	8b 84 24 e4 01 00 00 	mov    0x1e4(%esp),%eax
   15f77:	23 84 24 04 02 00 00 	and    0x204(%esp),%eax
   15f7e:	85 c0                	test   %eax,%eax
   15f80:	74 4e                	je     15fd0 <do_select+0x255>
			if (check_out(&wait_table, current->filp[i]->f_inode)) {
   15f82:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   15f87:	8b 94 24 e8 01 00 00 	mov    0x1e8(%esp),%edx
   15f8e:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   15f94:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   15f98:	8b 40 08             	mov    0x8(%eax),%eax
   15f9b:	50                   	push   %eax
   15f9c:	8d 44 24 04          	lea    0x4(%esp),%eax
   15fa0:	50                   	push   %eax
   15fa1:	e8 97 fc ff ff       	call   15c3d <check_out>
   15fa6:	83 c4 08             	add    $0x8,%esp
   15fa9:	85 c0                	test   %eax,%eax
   15fab:	74 23                	je     15fd0 <do_select+0x255>
				*outp |= mask;
   15fad:	8b 84 24 10 02 00 00 	mov    0x210(%esp),%eax
   15fb4:	8b 00                	mov    (%eax),%eax
   15fb6:	0b 84 24 e4 01 00 00 	or     0x1e4(%esp),%eax
   15fbd:	89 c2                	mov    %eax,%edx
   15fbf:	8b 84 24 10 02 00 00 	mov    0x210(%esp),%eax
   15fc6:	89 10                	mov    %edx,(%eax)
				count++;
   15fc8:	83 84 24 ec 01 00 00 	addl   $0x1,0x1ec(%esp)
   15fcf:	01 
			}
		// 如果此时判断的描述符在异常描述符集中，并且该描述符已经有异常出现，则把该描述符在描述符集ex中对应位置为1,同时把已准备好描述符个数计
		// 数值count增1。
		if (mask & ex)
   15fd0:	8b 84 24 e4 01 00 00 	mov    0x1e4(%esp),%eax
   15fd7:	23 84 24 08 02 00 00 	and    0x208(%esp),%eax
   15fde:	85 c0                	test   %eax,%eax
   15fe0:	74 4e                	je     16030 <do_select+0x2b5>
			if (check_ex(&wait_table, current->filp[i]->f_inode)) {
   15fe2:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   15fe7:	8b 94 24 e8 01 00 00 	mov    0x1e8(%esp),%edx
   15fee:	81 c2 d0 00 00 00    	add    $0xd0,%edx
   15ff4:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   15ff8:	8b 40 08             	mov    0x8(%eax),%eax
   15ffb:	50                   	push   %eax
   15ffc:	8d 44 24 04          	lea    0x4(%esp),%eax
   16000:	50                   	push   %eax
   16001:	e8 eb fc ff ff       	call   15cf1 <check_ex>
   16006:	83 c4 08             	add    $0x8,%esp
   16009:	85 c0                	test   %eax,%eax
   1600b:	74 23                	je     16030 <do_select+0x2b5>
				*exp |= mask;
   1600d:	8b 84 24 14 02 00 00 	mov    0x214(%esp),%eax
   16014:	8b 00                	mov    (%eax),%eax
   16016:	0b 84 24 e4 01 00 00 	or     0x1e4(%esp),%eax
   1601d:	89 c2                	mov    %eax,%edx
   1601f:	8b 84 24 14 02 00 00 	mov    0x214(%esp),%eax
   16026:	89 10                	mov    %edx,(%eax)
				count++;
   16028:	83 84 24 ec 01 00 00 	addl   $0x1,0x1ec(%esp)
   1602f:	01 
repeat:
	wait_table.nr = 0;
	*inp = *outp = *exp = 0;
	count = 0;
	mask = 1;
	for (i = 0 ; i < NR_OPEN ; i++, mask += mask) {
   16030:	83 84 24 e8 01 00 00 	addl   $0x1,0x1e8(%esp)
   16037:	01 
   16038:	8b 84 24 e4 01 00 00 	mov    0x1e4(%esp),%eax
   1603f:	01 c0                	add    %eax,%eax
   16041:	89 84 24 e4 01 00 00 	mov    %eax,0x1e4(%esp)
   16048:	83 bc 24 e8 01 00 00 	cmpl   $0x13,0x1e8(%esp)
   1604f:	13 
   16050:	0f 8e ba fe ff ff    	jle    15f10 <do_select+0x195>
	}
	// 在对进程所有描述符判断处理后，若没有发现有已准备好的描述符（count==0），并且此时进程没有收到任何非阻塞信号，并且此时有等待着描述符
	// 或者等待时间还没有超时，那么我们就把当前进程状态设置成可中断睡眠状态，然后执行调度函数去执行其他任务。当内核又一次调度执行本任务时就
	// 调用free_wait()唤醒相关等待队列上本任务前后的任务,然后跳转到repeat标号处再次重新检测是否有我们关心的（描述符集中的）描述符已准备
	// 好。
	if (!(current->signal & ~current->blocked) &&
   16056:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1605b:	8b 50 0c             	mov    0xc(%eax),%edx
   1605e:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   16063:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
   16069:	f7 d0                	not    %eax
   1606b:	21 d0                	and    %edx,%eax
   1606d:	85 c0                	test   %eax,%eax
   1606f:	75 45                	jne    160b6 <do_select+0x33b>
	    (wait_table.nr || current->timeout) && !count) {
   16071:	8b 04 24             	mov    (%esp),%eax
	}
	// 在对进程所有描述符判断处理后，若没有发现有已准备好的描述符（count==0），并且此时进程没有收到任何非阻塞信号，并且此时有等待着描述符
	// 或者等待时间还没有超时，那么我们就把当前进程状态设置成可中断睡眠状态，然后执行调度函数去执行其他任务。当内核又一次调度执行本任务时就
	// 调用free_wait()唤醒相关等待队列上本任务前后的任务,然后跳转到repeat标号处再次重新检测是否有我们关心的（描述符集中的）描述符已准备
	// 好。
	if (!(current->signal & ~current->blocked) &&
   16074:	85 c0                	test   %eax,%eax
   16076:	75 0f                	jne    16087 <do_select+0x30c>
	    (wait_table.nr || current->timeout) && !count) {
   16078:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1607d:	8b 80 d8 02 00 00    	mov    0x2d8(%eax),%eax
   16083:	85 c0                	test   %eax,%eax
   16085:	74 2f                	je     160b6 <do_select+0x33b>
   16087:	83 bc 24 ec 01 00 00 	cmpl   $0x0,0x1ec(%esp)
   1608e:	00 
   1608f:	75 25                	jne    160b6 <do_select+0x33b>
		current->state = TASK_INTERRUPTIBLE;
   16091:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   16096:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
		schedule();
   1609c:	e8 a4 0d ff ff       	call   6e45 <schedule>
		free_wait(&wait_table);         						// 本任务被唤醒返回后从这里开始执行。
   160a1:	83 ec 0c             	sub    $0xc,%esp
   160a4:	8d 44 24 0c          	lea    0xc(%esp),%eax
   160a8:	50                   	push   %eax
   160a9:	e8 77 f9 ff ff       	call   15a25 <free_wait>
   160ae:	83 c4 10             	add    $0x10,%esp
		goto repeat;
   160b1:	e9 fc fd ff ff       	jmp    15eb2 <do_select+0x137>
	}
	// 如果此时count不等于0，或者接收到了信号，或者等待时间到并且没有需要等待的描述符，那么我们就调用free_wait()唤醒等待队列上
	// 的任务，然后返回已准备好的描述符个数。
	free_wait(&wait_table);
   160b6:	83 ec 0c             	sub    $0xc,%esp
   160b9:	8d 44 24 0c          	lea    0xc(%esp),%eax
   160bd:	50                   	push   %eax
   160be:	e8 62 f9 ff ff       	call   15a25 <free_wait>
   160c3:	83 c4 10             	add    $0x10,%esp
	return count;
   160c6:	8b 84 24 ec 01 00 00 	mov    0x1ec(%esp),%eax
}
   160cd:	81 c4 fc 01 00 00    	add    $0x1fc,%esp
   160d3:	c3                   	ret    

000160d4 <sys_select>:
// 函数来完成。sys_select()会首先根据参数传递来的缓冲区指针从用户数据空间把select()函数调用的参数分解复制到内核空间，然后
// 设置需要等待的超时时间值timeout，接着调用do_select()执行select功能，返回后就把处理结果再复制回用户空间中。
// 参数buffer指向用户数据区中select()函数的第1个参数处。如果返回值小于0表示执行时出现错误；如果返回值等于0,则表示在规定等
// 待时间内没有描述符准备好操作；如果返回值大于0,则表示已准备好的描述符数量。
int sys_select( unsigned long *buffer )
{
   160d4:	83 ec 4c             	sub    $0x4c,%esp
	/* Perform the select(nd, in, out, ex, tv) system call. */
	/* 执行select(nd, in, out, ex, tv)系统调用 */
	// 首先定义几个局部变量，用于把指针参数传递来的select()函数参数分解开来。
	int i;
	fd_set res_in, in = 0, *inp;            						// 读操作描述符集。
   160d7:	c7 44 24 3c 00 00 00 	movl   $0x0,0x3c(%esp)
   160de:	00 
	fd_set res_out, out = 0, *outp;         						// 写操作描述符集。
   160df:	c7 44 24 38 00 00 00 	movl   $0x0,0x38(%esp)
   160e6:	00 
	fd_set res_ex, ex = 0, *exp;            						// 异常条件描述符集。
   160e7:	c7 44 24 34 00 00 00 	movl   $0x0,0x34(%esp)
   160ee:	00 
	unsigned long timeout;

	// 然后从用户数据区把参数分别隔离复制到局部指针变量中，并根据描述符集指针是否有效分别取得3个描述符集in（读）、out（写）和ex
	// （异常）。其中mask也是一个描述符集变量，根据3个描述符集中最大描述符值+1（即第1个参数nd的值），它被设置成用户程序关心的所有
	// 描述符的屏蔽码。例如，若nd = 4,则mask = 0b00001111（共32位）。
	mask = ~((~0) << get_fs_long(buffer++));
   160ef:	8b 44 24 50          	mov    0x50(%esp),%eax
   160f3:	8d 50 04             	lea    0x4(%eax),%edx
   160f6:	89 54 24 50          	mov    %edx,0x50(%esp)
   160fa:	50                   	push   %eax
   160fb:	e8 80 f8 ff ff       	call   15980 <get_fs_long>
   16100:	83 c4 04             	add    $0x4,%esp
   16103:	ba ff ff ff ff       	mov    $0xffffffff,%edx
   16108:	89 c1                	mov    %eax,%ecx
   1610a:	d3 e2                	shl    %cl,%edx
   1610c:	89 d0                	mov    %edx,%eax
   1610e:	f7 d0                	not    %eax
   16110:	89 44 24 2c          	mov    %eax,0x2c(%esp)
	inp = (fd_set *) get_fs_long(buffer++);
   16114:	8b 44 24 50          	mov    0x50(%esp),%eax
   16118:	8d 50 04             	lea    0x4(%eax),%edx
   1611b:	89 54 24 50          	mov    %edx,0x50(%esp)
   1611f:	50                   	push   %eax
   16120:	e8 5b f8 ff ff       	call   15980 <get_fs_long>
   16125:	83 c4 04             	add    $0x4,%esp
   16128:	89 44 24 28          	mov    %eax,0x28(%esp)
	outp = (fd_set *) get_fs_long(buffer++);
   1612c:	8b 44 24 50          	mov    0x50(%esp),%eax
   16130:	8d 50 04             	lea    0x4(%eax),%edx
   16133:	89 54 24 50          	mov    %edx,0x50(%esp)
   16137:	50                   	push   %eax
   16138:	e8 43 f8 ff ff       	call   15980 <get_fs_long>
   1613d:	83 c4 04             	add    $0x4,%esp
   16140:	89 44 24 24          	mov    %eax,0x24(%esp)
	exp = (fd_set *) get_fs_long(buffer++);
   16144:	8b 44 24 50          	mov    0x50(%esp),%eax
   16148:	8d 50 04             	lea    0x4(%eax),%edx
   1614b:	89 54 24 50          	mov    %edx,0x50(%esp)
   1614f:	50                   	push   %eax
   16150:	e8 2b f8 ff ff       	call   15980 <get_fs_long>
   16155:	83 c4 04             	add    $0x4,%esp
   16158:	89 44 24 20          	mov    %eax,0x20(%esp)
	tvp = (struct timeval *) get_fs_long(buffer);
   1615c:	ff 74 24 50          	pushl  0x50(%esp)
   16160:	e8 1b f8 ff ff       	call   15980 <get_fs_long>
   16165:	83 c4 04             	add    $0x4,%esp
   16168:	89 44 24 1c          	mov    %eax,0x1c(%esp)

	if (inp)                                						// 若指针有效，则取读操作描述符集。
   1616c:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   16171:	74 14                	je     16187 <sys_select+0xb3>
		in = mask & get_fs_long(inp);
   16173:	ff 74 24 28          	pushl  0x28(%esp)
   16177:	e8 04 f8 ff ff       	call   15980 <get_fs_long>
   1617c:	83 c4 04             	add    $0x4,%esp
   1617f:	23 44 24 2c          	and    0x2c(%esp),%eax
   16183:	89 44 24 3c          	mov    %eax,0x3c(%esp)
	if (outp)                               						// 若指针有效，则取写操作描述符集。
   16187:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
   1618c:	74 14                	je     161a2 <sys_select+0xce>
		out = mask & get_fs_long(outp);
   1618e:	ff 74 24 24          	pushl  0x24(%esp)
   16192:	e8 e9 f7 ff ff       	call   15980 <get_fs_long>
   16197:	83 c4 04             	add    $0x4,%esp
   1619a:	23 44 24 2c          	and    0x2c(%esp),%eax
   1619e:	89 44 24 38          	mov    %eax,0x38(%esp)
	if (exp)                                						// 若指针有效，则取异常描述符集。
   161a2:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
   161a7:	74 14                	je     161bd <sys_select+0xe9>
		ex = mask & get_fs_long(exp);
   161a9:	ff 74 24 20          	pushl  0x20(%esp)
   161ad:	e8 ce f7 ff ff       	call   15980 <get_fs_long>
   161b2:	83 c4 04             	add    $0x4,%esp
   161b5:	23 44 24 2c          	and    0x2c(%esp),%eax
   161b9:	89 44 24 34          	mov    %eax,0x34(%esp)
	// 接下来我们尝试从时间结构中取出等待（睡眠）时间值timeout。首先把timeout初始化成最大（无限）值，然后从用户数据空间取得该时间
	// 结构中设置的时间值，经转换和加上系统当前嘀嗒值jiffies，最后得到需要等待的时间嘀嗒数值timeout。我们用此值来设置当前进程应该
	// 等待的延时。另外，第241行上tv_usec字段是微秒值，把它除以1000000后可得到对应秒数，再乘以系统每秒嘀嗒数HZ，即把tv_usec转换
	// 成嘀嗒值。
	timeout = 0xffffffff;
   161bd:	c7 44 24 30 ff ff ff 	movl   $0xffffffff,0x30(%esp)
   161c4:	ff 
	if (tvp) {
   161c5:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   161ca:	74 3d                	je     16209 <sys_select+0x135>
		timeout = get_fs_long((unsigned long *) & tvp->tv_usec) / (1000000 / HZ);
   161cc:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   161d0:	83 c0 04             	add    $0x4,%eax
   161d3:	50                   	push   %eax
   161d4:	e8 a7 f7 ff ff       	call   15980 <get_fs_long>
   161d9:	83 c4 04             	add    $0x4,%esp
   161dc:	ba 59 17 b7 d1       	mov    $0xd1b71759,%edx
   161e1:	f7 e2                	mul    %edx
   161e3:	89 d0                	mov    %edx,%eax
   161e5:	c1 e8 0d             	shr    $0xd,%eax
   161e8:	89 44 24 30          	mov    %eax,0x30(%esp)
		timeout += get_fs_long((unsigned long *) & tvp->tv_sec) * HZ;
   161ec:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   161f0:	50                   	push   %eax
   161f1:	e8 8a f7 ff ff       	call   15980 <get_fs_long>
   161f6:	83 c4 04             	add    $0x4,%esp
   161f9:	6b c0 64             	imul   $0x64,%eax,%eax
   161fc:	01 44 24 30          	add    %eax,0x30(%esp)
		timeout += jiffies;
   16200:	a1 00 eb 02 00       	mov    0x2eb00,%eax
   16205:	01 44 24 30          	add    %eax,0x30(%esp)
	}
	current->timeout = timeout;             						// 设置当前进程应该延时的嘀嗒值。
   16209:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1620e:	8b 54 24 30          	mov    0x30(%esp),%edx
   16212:	89 90 d8 02 00 00    	mov    %edx,0x2d8(%eax)
	// select()函数的主要工作在do_select()中完成。在调用该函数之后的代码用于把处理结果复制到用户数据区中，返回给用户。为了避免出现
	// 竞争条件，在调用do_select()前需要禁止中断，并在该函数返回后再开启中断。
	// 如果在do_select()返回之后进程的等待延时字段timeout还大于当前系统计时嘀嗒值jiffies，说明在超时之前已经有描述准备好，于是这里
	// 我们先记下到超时还剩余的时间值，随后我们会把这个值返回给用户。如果进程的等待延时字段timeout已经小于或等于当前系统jiffies，表示
	// do_select()可能是由于超时而返回，因此把剩余时间值设置为0。
	cli();                  										// 禁止响应中断。
   16218:	fa                   	cli    
	i = do_select(in, out, ex, &res_in, &res_out, &res_ex);
   16219:	83 ec 08             	sub    $0x8,%esp
   1621c:	8d 44 24 14          	lea    0x14(%esp),%eax
   16220:	50                   	push   %eax
   16221:	8d 44 24 1c          	lea    0x1c(%esp),%eax
   16225:	50                   	push   %eax
   16226:	8d 44 24 24          	lea    0x24(%esp),%eax
   1622a:	50                   	push   %eax
   1622b:	ff 74 24 48          	pushl  0x48(%esp)
   1622f:	ff 74 24 50          	pushl  0x50(%esp)
   16233:	ff 74 24 58          	pushl  0x58(%esp)
   16237:	e8 3f fb ff ff       	call   15d7b <do_select>
   1623c:	83 c4 20             	add    $0x20,%esp
   1623f:	89 44 24 18          	mov    %eax,0x18(%esp)
	if (current->timeout > jiffies)
   16243:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   16248:	8b 90 d8 02 00 00    	mov    0x2d8(%eax),%edx
   1624e:	a1 00 eb 02 00       	mov    0x2eb00,%eax
   16253:	39 c2                	cmp    %eax,%edx
   16255:	76 1a                	jbe    16271 <sys_select+0x19d>
		timeout = current->timeout - jiffies;
   16257:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1625c:	8b 90 d8 02 00 00    	mov    0x2d8(%eax),%edx
   16262:	a1 00 eb 02 00       	mov    0x2eb00,%eax
   16267:	29 c2                	sub    %eax,%edx
   16269:	89 d0                	mov    %edx,%eax
   1626b:	89 44 24 30          	mov    %eax,0x30(%esp)
   1626f:	eb 08                	jmp    16279 <sys_select+0x1a5>
	else
		timeout = 0;
   16271:	c7 44 24 30 00 00 00 	movl   $0x0,0x30(%esp)
   16278:	00 
	sti();                  										// 开启中断响应。
   16279:	fb                   	sti    
	// 接下来我们把进程的超时字段清零。如果do_select()返回的已准备好描述符个数小于0，表示执行出错，于是返回这个错误号。然后我们把处理过
	// 的描述符集内容和延迟时间结构内容写回到用户数据缓冲空间。在时间结构内容时还需要先将嘀嗒时间单位表示的剩余延迟时间转换成秒和微秒值。
	current->timeout = 0;
   1627a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1627f:	c7 80 d8 02 00 00 00 	movl   $0x0,0x2d8(%eax)
   16286:	00 00 00 
	if (i < 0)
   16289:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   1628e:	79 09                	jns    16299 <sys_select+0x1c5>
		return i;
   16290:	8b 44 24 18          	mov    0x18(%esp),%eax
   16294:	e9 2c 01 00 00       	jmp    163c5 <sys_select+0x2f1>
	if (inp) {
   16299:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   1629e:	74 25                	je     162c5 <sys_select+0x1f1>
		verify_area(inp, 4);
   162a0:	83 ec 08             	sub    $0x8,%esp
   162a3:	6a 04                	push   $0x4
   162a5:	ff 74 24 34          	pushl  0x34(%esp)
   162a9:	e8 f5 20 ff ff       	call   83a3 <verify_area>
   162ae:	83 c4 10             	add    $0x10,%esp
		put_fs_long(res_in, inp);        							// 可读描述符值。
   162b1:	8b 44 24 14          	mov    0x14(%esp),%eax
   162b5:	83 ec 08             	sub    $0x8,%esp
   162b8:	ff 74 24 30          	pushl  0x30(%esp)
   162bc:	50                   	push   %eax
   162bd:	e8 d4 f6 ff ff       	call   15996 <put_fs_long>
   162c2:	83 c4 10             	add    $0x10,%esp
	}
	if (outp) {
   162c5:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
   162ca:	74 25                	je     162f1 <sys_select+0x21d>
		verify_area(outp, 4);
   162cc:	83 ec 08             	sub    $0x8,%esp
   162cf:	6a 04                	push   $0x4
   162d1:	ff 74 24 30          	pushl  0x30(%esp)
   162d5:	e8 c9 20 ff ff       	call   83a3 <verify_area>
   162da:	83 c4 10             	add    $0x10,%esp
		put_fs_long(res_out, outp);      							// 可写描述符值。
   162dd:	8b 44 24 10          	mov    0x10(%esp),%eax
   162e1:	83 ec 08             	sub    $0x8,%esp
   162e4:	ff 74 24 2c          	pushl  0x2c(%esp)
   162e8:	50                   	push   %eax
   162e9:	e8 a8 f6 ff ff       	call   15996 <put_fs_long>
   162ee:	83 c4 10             	add    $0x10,%esp
	}
	if (exp) {
   162f1:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
   162f6:	74 25                	je     1631d <sys_select+0x249>
		verify_area(exp, 4);
   162f8:	83 ec 08             	sub    $0x8,%esp
   162fb:	6a 04                	push   $0x4
   162fd:	ff 74 24 2c          	pushl  0x2c(%esp)
   16301:	e8 9d 20 ff ff       	call   83a3 <verify_area>
   16306:	83 c4 10             	add    $0x10,%esp
		put_fs_long(res_ex, exp);        							// 出现异常条件描述符集。
   16309:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1630d:	83 ec 08             	sub    $0x8,%esp
   16310:	ff 74 24 28          	pushl  0x28(%esp)
   16314:	50                   	push   %eax
   16315:	e8 7c f6 ff ff       	call   15996 <put_fs_long>
   1631a:	83 c4 10             	add    $0x10,%esp
	}
	if (tvp) {
   1631d:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   16322:	74 74                	je     16398 <sys_select+0x2c4>
		verify_area(tvp, sizeof(*tvp));
   16324:	83 ec 08             	sub    $0x8,%esp
   16327:	6a 08                	push   $0x8
   16329:	ff 74 24 28          	pushl  0x28(%esp)
   1632d:	e8 71 20 ff ff       	call   83a3 <verify_area>
   16332:	83 c4 10             	add    $0x10,%esp
		put_fs_long(timeout / HZ, (unsigned long *) &tvp->tv_sec);  // 秒。
   16335:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
   16339:	8b 44 24 30          	mov    0x30(%esp),%eax
   1633d:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   16342:	f7 e2                	mul    %edx
   16344:	89 d0                	mov    %edx,%eax
   16346:	c1 e8 05             	shr    $0x5,%eax
   16349:	83 ec 08             	sub    $0x8,%esp
   1634c:	51                   	push   %ecx
   1634d:	50                   	push   %eax
   1634e:	e8 43 f6 ff ff       	call   15996 <put_fs_long>
   16353:	83 c4 10             	add    $0x10,%esp
		timeout %= HZ;
   16356:	8b 4c 24 30          	mov    0x30(%esp),%ecx
   1635a:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
   1635f:	89 c8                	mov    %ecx,%eax
   16361:	f7 e2                	mul    %edx
   16363:	89 d0                	mov    %edx,%eax
   16365:	c1 e8 05             	shr    $0x5,%eax
   16368:	6b c0 64             	imul   $0x64,%eax,%eax
   1636b:	29 c1                	sub    %eax,%ecx
   1636d:	89 c8                	mov    %ecx,%eax
   1636f:	89 44 24 30          	mov    %eax,0x30(%esp)
		timeout *= (1000000 / HZ);
   16373:	8b 44 24 30          	mov    0x30(%esp),%eax
   16377:	69 c0 10 27 00 00    	imul   $0x2710,%eax,%eax
   1637d:	89 44 24 30          	mov    %eax,0x30(%esp)
		put_fs_long(timeout, (unsigned long *) &tvp->tv_usec);      // 微秒。
   16381:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   16385:	83 c0 04             	add    $0x4,%eax
   16388:	83 ec 08             	sub    $0x8,%esp
   1638b:	50                   	push   %eax
   1638c:	ff 74 24 3c          	pushl  0x3c(%esp)
   16390:	e8 01 f6 ff ff       	call   15996 <put_fs_long>
   16395:	83 c4 10             	add    $0x10,%esp
	}
	// 如果此时并没有已准备好的描述符，并且收到了某个非阻塞信号，则返回被中断错误号。否则返回已准备好的描述符个数值。
	if (!i && (current->signal & ~current->blocked))
   16398:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   1639d:	75 22                	jne    163c1 <sys_select+0x2ed>
   1639f:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   163a4:	8b 50 0c             	mov    0xc(%eax),%edx
   163a7:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   163ac:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
   163b2:	f7 d0                	not    %eax
   163b4:	21 d0                	and    %edx,%eax
   163b6:	85 c0                	test   %eax,%eax
   163b8:	74 07                	je     163c1 <sys_select+0x2ed>
		return -EINTR;
   163ba:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
   163bf:	eb 04                	jmp    163c5 <sys_select+0x2f1>
	return i;
   163c1:	8b 44 24 18          	mov    0x18(%esp),%eax
}
   163c5:	83 c4 4c             	add    $0x4c,%esp
   163c8:	c3                   	ret    

000163c9 <lock_buffer>:
int * blk_size[NR_BLK_DEV] = { NULL, NULL, };

// 锁定指定缓冲块.
// 如果指定的缓冲块已经被其他任务锁定,则使自己睡眠(不可中断的等待),直到被执行解锁缓冲块的任务明确地唤醒
static inline void lock_buffer(struct buffer_head * bh)
{
   163c9:	83 ec 0c             	sub    $0xc,%esp
	cli();							// 清中断许可.
   163cc:	fa                   	cli    
	while (bh->b_lock)				// 如果缓冲区已被锁定则睡眠,直到缓冲区解锁.
   163cd:	eb 13                	jmp    163e2 <lock_buffer+0x19>
		sleep_on(&bh->b_wait);
   163cf:	8b 44 24 10          	mov    0x10(%esp),%eax
   163d3:	83 c0 10             	add    $0x10,%eax
   163d6:	83 ec 0c             	sub    $0xc,%esp
   163d9:	50                   	push   %eax
   163da:	e8 57 0d ff ff       	call   7136 <sleep_on>
   163df:	83 c4 10             	add    $0x10,%esp
// 锁定指定缓冲块.
// 如果指定的缓冲块已经被其他任务锁定,则使自己睡眠(不可中断的等待),直到被执行解锁缓冲块的任务明确地唤醒
static inline void lock_buffer(struct buffer_head * bh)
{
	cli();							// 清中断许可.
	while (bh->b_lock)				// 如果缓冲区已被锁定则睡眠,直到缓冲区解锁.
   163e2:	8b 44 24 10          	mov    0x10(%esp),%eax
   163e6:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   163ea:	84 c0                	test   %al,%al
   163ec:	75 e1                	jne    163cf <lock_buffer+0x6>
		sleep_on(&bh->b_wait);
	bh->b_lock = 1;					// 立刻锁定缓冲区.
   163ee:	8b 44 24 10          	mov    0x10(%esp),%eax
   163f2:	c6 40 0d 01          	movb   $0x1,0xd(%eax)
	sti();							// 开中断.
   163f6:	fb                   	sti    
}
   163f7:	90                   	nop
   163f8:	83 c4 0c             	add    $0xc,%esp
   163fb:	c3                   	ret    

000163fc <unlock_buffer>:

// 释放(解锁)锁定的缓冲区.
// 该函数与hlk.h文件中的同名函数完全一样.
static inline void unlock_buffer(struct buffer_head * bh)
{
   163fc:	83 ec 0c             	sub    $0xc,%esp
	if (!bh->b_lock)				// 如果该缓冲区没有被锁定,则打印出错信息.
   163ff:	8b 44 24 10          	mov    0x10(%esp),%eax
   16403:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   16407:	84 c0                	test   %al,%al
   16409:	75 10                	jne    1641b <unlock_buffer+0x1f>
		printk("ll_rw_block.c: buffer not locked\n\r");
   1640b:	83 ec 0c             	sub    $0xc,%esp
   1640e:	68 6c 3d 02 00       	push   $0x23d6c
   16413:	e8 2f 28 ff ff       	call   8c47 <printk>
   16418:	83 c4 10             	add    $0x10,%esp
	bh->b_lock = 0;					// 清锁定标志.
   1641b:	8b 44 24 10          	mov    0x10(%esp),%eax
   1641f:	c6 40 0d 00          	movb   $0x0,0xd(%eax)
	wake_up(&bh->b_wait);			// 唤醒等待该缓冲区的任务.
   16423:	8b 44 24 10          	mov    0x10(%esp),%eax
   16427:	83 c0 10             	add    $0x10,%eax
   1642a:	83 ec 0c             	sub    $0xc,%esp
   1642d:	50                   	push   %eax
   1642e:	e8 1c 0d ff ff       	call   714f <wake_up>
   16433:	83 c4 10             	add    $0x10,%esp
}
   16436:	90                   	nop
   16437:	83 c4 0c             	add    $0xc,%esp
   1643a:	c3                   	ret    

0001643b <add_request>:
// 参数dev是指定块设备结构指针,该结构中有处理请求项函数指针和当前正在请求项指针;
// req是已设置好内容的请求项结构指针.
// 本函数把已经设置好的请求项req添加到指定设备的请求项链表中.如果该设备在当前请求项指针为空,则可以设置req为当前请求项并立刻调用设备请求
// 项处理函数.否则就把req请求项插入到该请求项链表中.
static void add_request(struct blk_dev_struct * dev, struct request * req)
{
   1643b:	83 ec 1c             	sub    $0x1c,%esp
	// 首先对参数提供的请求项的指针和标志作初始设置.置空请求项中的下一请求项指针,关中断并清除请求项相关缓冲区脏标志.
	struct request * tmp;

	req->next = NULL;
   1643e:	8b 44 24 24          	mov    0x24(%esp),%eax
   16442:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
	cli();								// 关中断
   16449:	fa                   	cli    
	if (req->bh)
   1644a:	8b 44 24 24          	mov    0x24(%esp),%eax
   1644e:	8b 40 1c             	mov    0x1c(%eax),%eax
   16451:	85 c0                	test   %eax,%eax
   16453:	74 0b                	je     16460 <add_request+0x25>
		req->bh->b_dirt = 0;			// 清缓冲区"脏"标志.
   16455:	8b 44 24 24          	mov    0x24(%esp),%eax
   16459:	8b 40 1c             	mov    0x1c(%eax),%eax
   1645c:	c6 40 0b 00          	movb   $0x0,0xb(%eax)
	// 然后查看指定设备是否有当前请求项,即查看设备是否正忙.如果指定设备dev当前请求项(current_equest)字段为空,则表示目前该设备没有请求项,本次是
	// 第1个请求项,也是唯一的一个.因此可将块设备当前请求指针直接指向该请求项,并立刻执行相应设备的请求函数.
	if (!(tmp = dev->current_request)) {
   16460:	8b 44 24 20          	mov    0x20(%esp),%eax
   16464:	8b 40 04             	mov    0x4(%eax),%eax
   16467:	89 44 24 0c          	mov    %eax,0xc(%esp)
   1646b:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   16470:	0f 85 79 01 00 00    	jne    165ef <add_request+0x1b4>
		dev->current_request = req;
   16476:	8b 44 24 20          	mov    0x20(%esp),%eax
   1647a:	8b 54 24 24          	mov    0x24(%esp),%edx
   1647e:	89 50 04             	mov    %edx,0x4(%eax)
		sti();							// 开中断.
   16481:	fb                   	sti    
		(dev->request_fn)();			// 执行请求函数,对于硬盘是do_hd_request().
   16482:	8b 44 24 20          	mov    0x20(%esp),%eax
   16486:	8b 00                	mov    (%eax),%eax
   16488:	ff d0                	call   *%eax
		return;
   1648a:	e9 89 01 00 00       	jmp    16618 <add_request+0x1dd>
	// 如果目前该设备已经有当前请求项在处理,则首先利用电梯算法搜索最佳插入位置,然后将当前请求项插入到请求链表中.在搜索过程中,如果判断出欲插入
	// 请求项的缓冲块头指针空,即没有缓冲块,那么就需要找一个项,其已经有可用的缓冲块.因此若当前插入位置(tmp之后)处的空闲项缓冲块头指针不空,就选择这个位置
	// 于是退出循环并把请求项插入此处.最后开中断并退出函数.电梯算法的作用是让磁盘磁头的移动距离最小,从而改善(减少)硬盘访问时间.
	// 下面for循环中if语句用于把req所指请求项与请求队列(链表)中已有的请求项作比较,找出req插入该队列的正确位置顺序.然后中断循环,并把req插入到该队列正确位置处.
	for ( ; tmp->next ; tmp = tmp->next) {
		if (!req->bh)
   1648f:	8b 44 24 24          	mov    0x24(%esp),%eax
   16493:	8b 40 1c             	mov    0x1c(%eax),%eax
   16496:	85 c0                	test   %eax,%eax
   16498:	75 17                	jne    164b1 <add_request+0x76>
			if (tmp->next->bh)
   1649a:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1649e:	8b 40 20             	mov    0x20(%eax),%eax
   164a1:	8b 40 1c             	mov    0x1c(%eax),%eax
   164a4:	85 c0                	test   %eax,%eax
   164a6:	0f 84 37 01 00 00    	je     165e3 <add_request+0x1a8>
				break;
   164ac:	e9 4d 01 00 00       	jmp    165fe <add_request+0x1c3>
			else
				continue;
		if ((IN_ORDER(tmp, req) ||
   164b1:	8b 44 24 0c          	mov    0xc(%esp),%eax
   164b5:	8b 50 04             	mov    0x4(%eax),%edx
   164b8:	8b 44 24 24          	mov    0x24(%esp),%eax
   164bc:	8b 40 04             	mov    0x4(%eax),%eax
   164bf:	39 c2                	cmp    %eax,%edx
   164c1:	0f 8c b5 00 00 00    	jl     1657c <add_request+0x141>
   164c7:	8b 44 24 0c          	mov    0xc(%esp),%eax
   164cb:	8b 50 04             	mov    0x4(%eax),%edx
   164ce:	8b 44 24 24          	mov    0x24(%esp),%eax
   164d2:	8b 40 04             	mov    0x4(%eax),%eax
   164d5:	39 c2                	cmp    %eax,%edx
   164d7:	75 36                	jne    1650f <add_request+0xd4>
   164d9:	8b 44 24 0c          	mov    0xc(%esp),%eax
   164dd:	8b 10                	mov    (%eax),%edx
   164df:	8b 44 24 24          	mov    0x24(%esp),%eax
   164e3:	8b 00                	mov    (%eax),%eax
   164e5:	39 c2                	cmp    %eax,%edx
   164e7:	0f 8c 8f 00 00 00    	jl     1657c <add_request+0x141>
   164ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
   164f1:	8b 10                	mov    (%eax),%edx
   164f3:	8b 44 24 24          	mov    0x24(%esp),%eax
   164f7:	8b 00                	mov    (%eax),%eax
   164f9:	39 c2                	cmp    %eax,%edx
   164fb:	75 12                	jne    1650f <add_request+0xd4>
   164fd:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16501:	8b 50 0c             	mov    0xc(%eax),%edx
   16504:	8b 44 24 24          	mov    0x24(%esp),%eax
   16508:	8b 40 0c             	mov    0xc(%eax),%eax
   1650b:	39 c2                	cmp    %eax,%edx
   1650d:	72 6d                	jb     1657c <add_request+0x141>
		    !IN_ORDER(tmp, tmp->next)) &&
   1650f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16513:	8b 50 04             	mov    0x4(%eax),%edx
   16516:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1651a:	8b 40 20             	mov    0x20(%eax),%eax
   1651d:	8b 40 04             	mov    0x4(%eax),%eax
		if (!req->bh)
			if (tmp->next->bh)
				break;
			else
				continue;
		if ((IN_ORDER(tmp, req) ||
   16520:	39 c2                	cmp    %eax,%edx
   16522:	0f 8c bc 00 00 00    	jl     165e4 <add_request+0x1a9>
		    !IN_ORDER(tmp, tmp->next)) &&
   16528:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1652c:	8b 50 04             	mov    0x4(%eax),%edx
   1652f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16533:	8b 40 20             	mov    0x20(%eax),%eax
   16536:	8b 40 04             	mov    0x4(%eax),%eax
   16539:	39 c2                	cmp    %eax,%edx
   1653b:	75 3f                	jne    1657c <add_request+0x141>
   1653d:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16541:	8b 10                	mov    (%eax),%edx
   16543:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16547:	8b 40 20             	mov    0x20(%eax),%eax
   1654a:	8b 00                	mov    (%eax),%eax
   1654c:	39 c2                	cmp    %eax,%edx
   1654e:	0f 8c 90 00 00 00    	jl     165e4 <add_request+0x1a9>
   16554:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16558:	8b 10                	mov    (%eax),%edx
   1655a:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1655e:	8b 40 20             	mov    0x20(%eax),%eax
   16561:	8b 00                	mov    (%eax),%eax
   16563:	39 c2                	cmp    %eax,%edx
   16565:	75 15                	jne    1657c <add_request+0x141>
   16567:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1656b:	8b 50 0c             	mov    0xc(%eax),%edx
   1656e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16572:	8b 40 20             	mov    0x20(%eax),%eax
   16575:	8b 40 0c             	mov    0xc(%eax),%eax
   16578:	39 c2                	cmp    %eax,%edx
   1657a:	72 68                	jb     165e4 <add_request+0x1a9>
		    IN_ORDER(req, tmp->next))
   1657c:	8b 44 24 24          	mov    0x24(%esp),%eax
   16580:	8b 50 04             	mov    0x4(%eax),%edx
   16583:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16587:	8b 40 20             	mov    0x20(%eax),%eax
   1658a:	8b 40 04             	mov    0x4(%eax),%eax
			if (tmp->next->bh)
				break;
			else
				continue;
		if ((IN_ORDER(tmp, req) ||
		    !IN_ORDER(tmp, tmp->next)) &&
   1658d:	39 c2                	cmp    %eax,%edx
   1658f:	7c 6d                	jl     165fe <add_request+0x1c3>
		    IN_ORDER(req, tmp->next))
   16591:	8b 44 24 24          	mov    0x24(%esp),%eax
   16595:	8b 50 04             	mov    0x4(%eax),%edx
   16598:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1659c:	8b 40 20             	mov    0x20(%eax),%eax
   1659f:	8b 40 04             	mov    0x4(%eax),%eax
   165a2:	39 c2                	cmp    %eax,%edx
   165a4:	75 3e                	jne    165e4 <add_request+0x1a9>
   165a6:	8b 44 24 24          	mov    0x24(%esp),%eax
   165aa:	8b 10                	mov    (%eax),%edx
   165ac:	8b 44 24 0c          	mov    0xc(%esp),%eax
   165b0:	8b 40 20             	mov    0x20(%eax),%eax
   165b3:	8b 00                	mov    (%eax),%eax
   165b5:	39 c2                	cmp    %eax,%edx
   165b7:	7c 45                	jl     165fe <add_request+0x1c3>
   165b9:	8b 44 24 24          	mov    0x24(%esp),%eax
   165bd:	8b 10                	mov    (%eax),%edx
   165bf:	8b 44 24 0c          	mov    0xc(%esp),%eax
   165c3:	8b 40 20             	mov    0x20(%eax),%eax
   165c6:	8b 00                	mov    (%eax),%eax
   165c8:	39 c2                	cmp    %eax,%edx
   165ca:	75 18                	jne    165e4 <add_request+0x1a9>
   165cc:	8b 44 24 24          	mov    0x24(%esp),%eax
   165d0:	8b 50 0c             	mov    0xc(%eax),%edx
   165d3:	8b 44 24 0c          	mov    0xc(%esp),%eax
   165d7:	8b 40 20             	mov    0x20(%eax),%eax
   165da:	8b 40 0c             	mov    0xc(%eax),%eax
   165dd:	39 c2                	cmp    %eax,%edx
   165df:	72 1d                	jb     165fe <add_request+0x1c3>
   165e1:	eb 01                	jmp    165e4 <add_request+0x1a9>
	for ( ; tmp->next ; tmp = tmp->next) {
		if (!req->bh)
			if (tmp->next->bh)
				break;
			else
				continue;
   165e3:	90                   	nop
	}
	// 如果目前该设备已经有当前请求项在处理,则首先利用电梯算法搜索最佳插入位置,然后将当前请求项插入到请求链表中.在搜索过程中,如果判断出欲插入
	// 请求项的缓冲块头指针空,即没有缓冲块,那么就需要找一个项,其已经有可用的缓冲块.因此若当前插入位置(tmp之后)处的空闲项缓冲块头指针不空,就选择这个位置
	// 于是退出循环并把请求项插入此处.最后开中断并退出函数.电梯算法的作用是让磁盘磁头的移动距离最小,从而改善(减少)硬盘访问时间.
	// 下面for循环中if语句用于把req所指请求项与请求队列(链表)中已有的请求项作比较,找出req插入该队列的正确位置顺序.然后中断循环,并把req插入到该队列正确位置处.
	for ( ; tmp->next ; tmp = tmp->next) {
   165e4:	8b 44 24 0c          	mov    0xc(%esp),%eax
   165e8:	8b 40 20             	mov    0x20(%eax),%eax
   165eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
   165ef:	8b 44 24 0c          	mov    0xc(%esp),%eax
   165f3:	8b 40 20             	mov    0x20(%eax),%eax
   165f6:	85 c0                	test   %eax,%eax
   165f8:	0f 85 91 fe ff ff    	jne    1648f <add_request+0x54>
		if ((IN_ORDER(tmp, req) ||
		    !IN_ORDER(tmp, tmp->next)) &&
		    IN_ORDER(req, tmp->next))
			break;
	}
	req->next = tmp->next;
   165fe:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16602:	8b 50 20             	mov    0x20(%eax),%edx
   16605:	8b 44 24 24          	mov    0x24(%esp),%eax
   16609:	89 50 20             	mov    %edx,0x20(%eax)
	tmp->next = req;
   1660c:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16610:	8b 54 24 24          	mov    0x24(%esp),%edx
   16614:	89 50 20             	mov    %edx,0x20(%eax)
	sti();
   16617:	fb                   	sti    
}
   16618:	83 c4 1c             	add    $0x1c,%esp
   1661b:	c3                   	ret    

0001661c <make_request>:

// 创建请求项并插入请求队列中.
// 参数major是主设备号;rw是指定命令;bh是存放数据的缓冲区头指针.
static void make_request(int major, int rw, struct buffer_head * bh)
{
   1661c:	83 ec 1c             	sub    $0x1c,%esp
	/* WRITEA/READA是一种特殊情况 - 它们并非必要,所以如果缓冲区已经上锁,我们就不用管它,否则它只是一个一般的读操作. */
	// 这里'READ'和'WRITE'后面的'A'字符代表英文单词Ahead,表示预读/写数据块的意思.
	// 该函数首先对命令READA/WRITEA的情况进行一些处理.对于这两个命令,当指定的缓冲区正在使用而已被上锁时,就放弃预读/写请求.否则就作为普通
	// READ/WRITE命令进行操作.另外,如果参数给出的命令既不是READ也不是WRITE,则表示内核程序有错,显示出错信息并停机.注意,在修改命令之前这里
	// 已为参数是否为预读/写命令设置了标志rw_ahead.
	if (rw_ahead = (rw == READA || rw == WRITEA)) {
   1661f:	83 7c 24 24 02       	cmpl   $0x2,0x24(%esp)
   16624:	74 07                	je     1662d <make_request+0x11>
   16626:	83 7c 24 24 03       	cmpl   $0x3,0x24(%esp)
   1662b:	75 07                	jne    16634 <make_request+0x18>
   1662d:	b8 01 00 00 00       	mov    $0x1,%eax
   16632:	eb 05                	jmp    16639 <make_request+0x1d>
   16634:	b8 00 00 00 00       	mov    $0x0,%eax
   16639:	89 44 24 08          	mov    %eax,0x8(%esp)
   1663d:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   16642:	74 29                	je     1666d <make_request+0x51>
		if (bh->b_lock)
   16644:	8b 44 24 28          	mov    0x28(%esp),%eax
   16648:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   1664c:	84 c0                	test   %al,%al
   1664e:	0f 85 7d 01 00 00    	jne    167d1 <make_request+0x1b5>
			return;
		if (rw == READA)
   16654:	83 7c 24 24 02       	cmpl   $0x2,0x24(%esp)
   16659:	75 0a                	jne    16665 <make_request+0x49>
			rw = READ;
   1665b:	c7 44 24 24 00 00 00 	movl   $0x0,0x24(%esp)
   16662:	00 
   16663:	eb 08                	jmp    1666d <make_request+0x51>
		else
			rw = WRITE;
   16665:	c7 44 24 24 01 00 00 	movl   $0x1,0x24(%esp)
   1666c:	00 
	}
	if (rw != READ && rw != WRITE)
   1666d:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
   16672:	74 17                	je     1668b <make_request+0x6f>
   16674:	83 7c 24 24 01       	cmpl   $0x1,0x24(%esp)
   16679:	74 10                	je     1668b <make_request+0x6f>
		panic("Bad block dev command, must be R/W/RA/WA");
   1667b:	83 ec 0c             	sub    $0xc,%esp
   1667e:	68 90 3d 02 00       	push   $0x23d90
   16683:	e8 80 25 ff ff       	call   8c08 <panic>
   16688:	83 c4 10             	add    $0x10,%esp
	lock_buffer(bh);                				// 锁定缓冲块
   1668b:	83 ec 0c             	sub    $0xc,%esp
   1668e:	ff 74 24 34          	pushl  0x34(%esp)
   16692:	e8 32 fd ff ff       	call   163c9 <lock_buffer>
   16697:	83 c4 10             	add    $0x10,%esp
	// 如果是WRITE操作并且缓冲块未修改，或是READ操作并且缓冲块已更新，则直接返回缓冲区块。
	if ((rw == WRITE && !bh->b_dirt) || (rw == READ && bh->b_uptodate)) {
   1669a:	83 7c 24 24 01       	cmpl   $0x1,0x24(%esp)
   1669f:	75 0c                	jne    166ad <make_request+0x91>
   166a1:	8b 44 24 28          	mov    0x28(%esp),%eax
   166a5:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
   166a9:	84 c0                	test   %al,%al
   166ab:	74 13                	je     166c0 <make_request+0xa4>
   166ad:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
   166b2:	75 20                	jne    166d4 <make_request+0xb8>
   166b4:	8b 44 24 28          	mov    0x28(%esp),%eax
   166b8:	0f b6 40 0a          	movzbl 0xa(%eax),%eax
   166bc:	84 c0                	test   %al,%al
   166be:	74 14                	je     166d4 <make_request+0xb8>
		unlock_buffer(bh);
   166c0:	83 ec 0c             	sub    $0xc,%esp
   166c3:	ff 74 24 34          	pushl  0x34(%esp)
   166c7:	e8 30 fd ff ff       	call   163fc <unlock_buffer>
   166cc:	83 c4 10             	add    $0x10,%esp
		return;
   166cf:	e9 fe 00 00 00       	jmp    167d2 <make_request+0x1b6>
	 */
	// 好,现在我们必须为本函数生成并添加读/写请求项了.首先我们需要在请求数组中寻找到一个空闲项(糟)来存放新请求项.搜索过程从请求数组末端开始.
	// 根据上述要求,对于读命令请求,我们直接从队列末尾开始搜索,而对于写请求就只能从队列2/3处向队列头处搜索空项填入.于是我们开始从后向前搜索,
	// 当请求结构request的设备字段dev值=-1时,表示该项未被占用(空闲).如果没有一项是空闲的(此时请求项数组指针已经搜索越过头部),则查看此次请求
	// 是否是提前读/写(READA或WRITEA),如果是则放弃此次请求操作.否则让本次请求操作先睡眠(以等待请求队列腾出空项),过一会儿再来搜索请求队列.
	if (rw == READ)
   166d4:	83 7c 24 24 00       	cmpl   $0x0,0x24(%esp)
   166d9:	75 0a                	jne    166e5 <make_request+0xc9>
		req = request + NR_REQUEST;						// 对于读请求,将指针指向队列尾部.
   166db:	c7 44 24 0c 00 18 04 	movl   $0x41800,0xc(%esp)
   166e2:	00 
   166e3:	eb 14                	jmp    166f9 <make_request+0xdd>
	else
		req = request + ((NR_REQUEST * 2) / 3);			// 对于写请求,指针指向队列2/3处.
   166e5:	c7 44 24 0c 74 16 04 	movl   $0x41674,0xc(%esp)
   166ec:	00 
	/* find an empty request */
	/* 搜索一个空请求项 */
	while (--req >= request)
   166ed:	eb 0a                	jmp    166f9 <make_request+0xdd>
		if (req->dev < 0)
   166ef:	8b 44 24 0c          	mov    0xc(%esp),%eax
   166f3:	8b 00                	mov    (%eax),%eax
   166f5:	85 c0                	test   %eax,%eax
   166f7:	78 11                	js     1670a <make_request+0xee>
		req = request + NR_REQUEST;						// 对于读请求,将指针指向队列尾部.
	else
		req = request + ((NR_REQUEST * 2) / 3);			// 对于写请求,指针指向队列2/3处.
	/* find an empty request */
	/* 搜索一个空请求项 */
	while (--req >= request)
   166f9:	83 6c 24 0c 24       	subl   $0x24,0xc(%esp)
   166fe:	81 7c 24 0c 80 13 04 	cmpl   $0x41380,0xc(%esp)
   16705:	00 
   16706:	73 e7                	jae    166ef <make_request+0xd3>
   16708:	eb 01                	jmp    1670b <make_request+0xef>
		if (req->dev < 0)
			break;
   1670a:	90                   	nop
	/* if none found, sleep on new requests: check for rw_ahead */
	/* 如果没有找到空闲项,则让该次请求操作睡眠:需检查是否提前读/写 */
	if (req < request) {								// 如果已搜索到头(队列无空项)
   1670b:	81 7c 24 0c 80 13 04 	cmpl   $0x41380,0xc(%esp)
   16712:	00 
   16713:	73 2d                	jae    16742 <make_request+0x126>
		if (rw_ahead) {									// 则若是提前读/写请求,则退出.
   16715:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   1671a:	74 14                	je     16730 <make_request+0x114>
			unlock_buffer(bh);
   1671c:	83 ec 0c             	sub    $0xc,%esp
   1671f:	ff 74 24 34          	pushl  0x34(%esp)
   16723:	e8 d4 fc ff ff       	call   163fc <unlock_buffer>
   16728:	83 c4 10             	add    $0x10,%esp
			return;
   1672b:	e9 a2 00 00 00       	jmp    167d2 <make_request+0x1b6>
		}
		sleep_on(&wait_for_request);					// 否则就睡眠,过会再查看请求队列.
   16730:	83 ec 0c             	sub    $0xc,%esp
   16733:	68 e0 10 03 00       	push   $0x310e0
   16738:	e8 f9 09 ff ff       	call   7136 <sleep_on>
   1673d:	83 c4 10             	add    $0x10,%esp
		goto repeat;
   16740:	eb 92                	jmp    166d4 <make_request+0xb8>
	}
	/* fill up the request-info, and add it to the queue */
	/* 向空闲请求项中填写请求信息,并将其加入队列中 */
	// OK,程序执行到这里表示已找到一个空闲请求项.于是我们在设置好的新请求项后就调用add_request()把它添加到请求队列中,立刻退出.请求结构请参见blk_drv/blk.h.
	// req->sector是读写操作的起始扇区号,req->buffer是请求项存放数据的缓冲区.
	req->dev = bh->b_dev;								// 设备号.
   16742:	8b 44 24 28          	mov    0x28(%esp),%eax
   16746:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   1674a:	0f b7 d0             	movzwl %ax,%edx
   1674d:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16751:	89 10                	mov    %edx,(%eax)
	req->cmd = rw;										// 命令(READ/WRITE).
   16753:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16757:	8b 54 24 24          	mov    0x24(%esp),%edx
   1675b:	89 50 04             	mov    %edx,0x4(%eax)
	req->errors = 0;									// 操作时产生的错误次数.
   1675e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16762:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	req->sector = bh->b_blocknr << 1;					// 起始扇区.块号转换成扇区号(1块=2扇区).
   16769:	8b 44 24 28          	mov    0x28(%esp),%eax
   1676d:	8b 40 04             	mov    0x4(%eax),%eax
   16770:	8d 14 00             	lea    (%eax,%eax,1),%edx
   16773:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16777:	89 50 0c             	mov    %edx,0xc(%eax)
	req->nr_sectors = 2;								// 本请求项需要读写的扇区数.
   1677a:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1677e:	c7 40 10 02 00 00 00 	movl   $0x2,0x10(%eax)
	req->buffer = bh->b_data;							// 请求项缓冲区指针指向需读写的数据缓冲区.
   16785:	8b 44 24 28          	mov    0x28(%esp),%eax
   16789:	8b 10                	mov    (%eax),%edx
   1678b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1678f:	89 50 14             	mov    %edx,0x14(%eax)
	req->waiting = NULL;								// 任务等待操作执行完成的地方.
   16792:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16796:	c7 40 18 00 00 00 00 	movl   $0x0,0x18(%eax)
	req->bh = bh;										// 缓冲块头指针.
   1679d:	8b 44 24 0c          	mov    0xc(%esp),%eax
   167a1:	8b 54 24 28          	mov    0x28(%esp),%edx
   167a5:	89 50 1c             	mov    %edx,0x1c(%eax)
	req->next = NULL;									// 指向下一请求项.
   167a8:	8b 44 24 0c          	mov    0xc(%esp),%eax
   167ac:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
	add_request(major + blk_dev, req);					// 将请求项加入队列中(blk_dev[major],reg).
   167b3:	8b 44 24 20          	mov    0x20(%esp),%eax
   167b7:	c1 e0 03             	shl    $0x3,%eax
   167ba:	05 00 11 03 00       	add    $0x31100,%eax
   167bf:	83 ec 08             	sub    $0x8,%esp
   167c2:	ff 74 24 14          	pushl  0x14(%esp)
   167c6:	50                   	push   %eax
   167c7:	e8 6f fc ff ff       	call   1643b <add_request>
   167cc:	83 c4 10             	add    $0x10,%esp
   167cf:	eb 01                	jmp    167d2 <make_request+0x1b6>
	// 该函数首先对命令READA/WRITEA的情况进行一些处理.对于这两个命令,当指定的缓冲区正在使用而已被上锁时,就放弃预读/写请求.否则就作为普通
	// READ/WRITE命令进行操作.另外,如果参数给出的命令既不是READ也不是WRITE,则表示内核程序有错,显示出错信息并停机.注意,在修改命令之前这里
	// 已为参数是否为预读/写命令设置了标志rw_ahead.
	if (rw_ahead = (rw == READA || rw == WRITEA)) {
		if (bh->b_lock)
			return;
   167d1:	90                   	nop
	req->buffer = bh->b_data;							// 请求项缓冲区指针指向需读写的数据缓冲区.
	req->waiting = NULL;								// 任务等待操作执行完成的地方.
	req->bh = bh;										// 缓冲块头指针.
	req->next = NULL;									// 指向下一请求项.
	add_request(major + blk_dev, req);					// 将请求项加入队列中(blk_dev[major],reg).
}
   167d2:	83 c4 1c             	add    $0x1c,%esp
   167d5:	c3                   	ret    

000167d6 <ll_rw_page>:

// 低级页面读写函数(Low Level Read Write Pagk).
// 以页面(4K)为单位访问设备数据,即每次读/写8个扇区.参见下面ll_rw_blk()函数.
void ll_rw_page(int rw, int dev, int page, char * buffer)
{
   167d6:	83 ec 1c             	sub    $0x1c,%esp
	struct request * req;
	unsigned int major = MAJOR(dev);
   167d9:	8b 44 24 24          	mov    0x24(%esp),%eax
   167dd:	c1 e8 08             	shr    $0x8,%eax
   167e0:	89 44 24 08          	mov    %eax,0x8(%esp)

	// 首先对函数参数的合法性进行检测.如果设备主设备号不存在或者该设备的请求操作函数不存在,则显示出错信息,并返回.如果参数给出的命令既不是
	// READ也不是WRITE,则表示内核程序有错,显示出错信息并停机.
	if (major >= NR_BLK_DEV || !(blk_dev[major].request_fn)) {
   167e4:	83 7c 24 08 06       	cmpl   $0x6,0x8(%esp)
   167e9:	77 0f                	ja     167fa <ll_rw_page+0x24>
   167eb:	8b 44 24 08          	mov    0x8(%esp),%eax
   167ef:	8b 04 c5 00 11 03 00 	mov    0x31100(,%eax,8),%eax
   167f6:	85 c0                	test   %eax,%eax
   167f8:	75 15                	jne    1680f <ll_rw_page+0x39>
		printk("Trying to read nonexistent block-device\n\r");
   167fa:	83 ec 0c             	sub    $0xc,%esp
   167fd:	68 bc 3d 02 00       	push   $0x23dbc
   16802:	e8 40 24 ff ff       	call   8c47 <printk>
   16807:	83 c4 10             	add    $0x10,%esp
		return;
   1680a:	e9 f5 00 00 00       	jmp    16904 <ll_rw_page+0x12e>
	}
	if (rw != READ && rw != WRITE)
   1680f:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
   16814:	74 17                	je     1682d <ll_rw_page+0x57>
   16816:	83 7c 24 20 01       	cmpl   $0x1,0x20(%esp)
   1681b:	74 10                	je     1682d <ll_rw_page+0x57>
		panic("Bad block dev command, must be R/W");
   1681d:	83 ec 0c             	sub    $0xc,%esp
   16820:	68 e8 3d 02 00       	push   $0x23de8
   16825:	e8 de 23 ff ff       	call   8c08 <panic>
   1682a:	83 c4 10             	add    $0x10,%esp
	// 在参数检测操作完成后,我们现在需要为本次操作建立请求项.首先我们需要在请求数组中寻找到一个空闲项(糟)来存放新请求项.搜索过程从请求数组末端
	// 开始.于是我们开始从后向前搜索,当请求结构request的设备字段值<0时,表示该项未被占用(空闲).如果没有一项是空闲的(此时请求项数组指针已经搜索越过
	// 头部),则让本次请求操作先睡眠(以等待请求队列腾出空项),过一会再来搜索请求队列.
repeat:
	req = request + NR_REQUEST;							// 将指针指向队列尾部.
   1682d:	c7 44 24 0c 00 18 04 	movl   $0x41800,0xc(%esp)
   16834:	00 
	while (--req >= request)
   16835:	eb 0a                	jmp    16841 <ll_rw_page+0x6b>
		if (req->dev < 0)
   16837:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1683b:	8b 00                	mov    (%eax),%eax
   1683d:	85 c0                	test   %eax,%eax
   1683f:	78 11                	js     16852 <ll_rw_page+0x7c>
	// 在参数检测操作完成后,我们现在需要为本次操作建立请求项.首先我们需要在请求数组中寻找到一个空闲项(糟)来存放新请求项.搜索过程从请求数组末端
	// 开始.于是我们开始从后向前搜索,当请求结构request的设备字段值<0时,表示该项未被占用(空闲).如果没有一项是空闲的(此时请求项数组指针已经搜索越过
	// 头部),则让本次请求操作先睡眠(以等待请求队列腾出空项),过一会再来搜索请求队列.
repeat:
	req = request + NR_REQUEST;							// 将指针指向队列尾部.
	while (--req >= request)
   16841:	83 6c 24 0c 24       	subl   $0x24,0xc(%esp)
   16846:	81 7c 24 0c 80 13 04 	cmpl   $0x41380,0xc(%esp)
   1684d:	00 
   1684e:	73 e7                	jae    16837 <ll_rw_page+0x61>
   16850:	eb 01                	jmp    16853 <ll_rw_page+0x7d>
		if (req->dev < 0)
			break;
   16852:	90                   	nop
	if (req < request) {
   16853:	81 7c 24 0c 80 13 04 	cmpl   $0x41380,0xc(%esp)
   1685a:	00 
   1685b:	73 12                	jae    1686f <ll_rw_page+0x99>
		sleep_on(&wait_for_request);					// 睡眠,过会再查看请求队列.
   1685d:	83 ec 0c             	sub    $0xc,%esp
   16860:	68 e0 10 03 00       	push   $0x310e0
   16865:	e8 cc 08 ff ff       	call   7136 <sleep_on>
   1686a:	83 c4 10             	add    $0x10,%esp
		goto repeat;
   1686d:	eb be                	jmp    1682d <ll_rw_page+0x57>
	/* 向空闲请求项中填写请求信息,并将其加入队列中 */
	// OK,程序执行到这里表示已找到一个空闲请求项.于是我们设置好新请求项,把当前进程置为不可中断睡眠中断后,就去调用add_request()把它添加到请求队列中,
	// 然后直接调用调度函数让当前进程睡眠等待页面从交换设备中读入.这里不像make_request()函数那样直接退出函数而调用了schedule(),是因为make_request()
	// 函数仅读2个扇区数据.而这里需要对交换设备读/写8个扇区,需要花较长的时间.因此当前进程肯定需要等待而睡眠.因此这里直接就让进程去睡眠了,省得在程序其他地方
	// 还要进行这些判断操作.
	req->dev = dev;										// 设备号
   1686f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16873:	8b 54 24 24          	mov    0x24(%esp),%edx
   16877:	89 10                	mov    %edx,(%eax)
	req->cmd = rw;										// 命令(READ/WRITE)start_code
   16879:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1687d:	8b 54 24 20          	mov    0x20(%esp),%edx
   16881:	89 50 04             	mov    %edx,0x4(%eax)
	req->errors = 0;									// 读写操作错误计数
   16884:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16888:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	req->sector = page << 3;							// 起始读写扇区
   1688f:	8b 44 24 28          	mov    0x28(%esp),%eax
   16893:	c1 e0 03             	shl    $0x3,%eax
   16896:	89 c2                	mov    %eax,%edx
   16898:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1689c:	89 50 0c             	mov    %edx,0xc(%eax)
	req->nr_sectors = 8;								// 读写扇区数
   1689f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   168a3:	c7 40 10 08 00 00 00 	movl   $0x8,0x10(%eax)
	req->buffer = buffer;								// 数据缓冲区
   168aa:	8b 44 24 0c          	mov    0xc(%esp),%eax
   168ae:	8b 54 24 2c          	mov    0x2c(%esp),%edx
   168b2:	89 50 14             	mov    %edx,0x14(%eax)
	req->waiting = current;								// 当前进程进入该请求等待队列
   168b5:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   168bb:	8b 44 24 0c          	mov    0xc(%esp),%eax
   168bf:	89 50 18             	mov    %edx,0x18(%eax)
	req->bh = NULL;										// 无缓冲块头指针(不用高速缓冲)
   168c2:	8b 44 24 0c          	mov    0xc(%esp),%eax
   168c6:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
	req->next = NULL;									// 下一个请求项指针
   168cd:	8b 44 24 0c          	mov    0xc(%esp),%eax
   168d1:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
	current->state = TASK_UNINTERRUPTIBLE;				// 置为不可中断状态
   168d8:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   168dd:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
	add_request(major + blk_dev, req);					// 将请求项加入队列中.
   168e3:	8b 44 24 08          	mov    0x8(%esp),%eax
   168e7:	c1 e0 03             	shl    $0x3,%eax
   168ea:	05 00 11 03 00       	add    $0x31100,%eax
   168ef:	83 ec 08             	sub    $0x8,%esp
   168f2:	ff 74 24 14          	pushl  0x14(%esp)
   168f6:	50                   	push   %eax
   168f7:	e8 3f fb ff ff       	call   1643b <add_request>
   168fc:	83 c4 10             	add    $0x10,%esp
	// 当前进程需要读取8个扇区的数据因此需要睡眠，因此调用调度程序选择进程运行
	schedule();
   168ff:	e8 41 05 ff ff       	call   6e45 <schedule>
}
   16904:	83 c4 1c             	add    $0x1c,%esp
   16907:	c3                   	ret    

00016908 <ll_rw_block>:
// 该函数是块设备驱动程序与系统其他部分的接口函数.通常在fs/buffer.c程序中被调用.
// 主要功能是创建块设备读写请求项并插入到指定块设备请求队列.实际的读写操作则是由设备的request_fn()函数完成.对于硬盘操作,该函数是do_hd_request();对于软盘操作
// 该函数是do_fd_request();对于虚拟盘则是do_rd_request().另外,在调用该函数之前,调用者需要首先把读/写块设备的信息保存在缓冲块头结构中,如设备号,块号.
// 参数:rw - READ,READA,WRITE或WRITEA是命令;bh - 数据缓冲块头指针.
void ll_rw_block(int rw, struct buffer_head * bh)
{
   16908:	83 ec 1c             	sub    $0x1c,%esp
	unsigned int major;									// 主设备号(对于硬盘是3)

	// 如果设备主设备号不存在或者该设备的请求操作函数不存在,则显示出错信息,并返回.否则创建请求项并插入请求队列.
	if ((major = MAJOR(bh->b_dev)) >= NR_BLK_DEV ||
   1690b:	8b 44 24 24          	mov    0x24(%esp),%eax
   1690f:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   16913:	66 c1 e8 08          	shr    $0x8,%ax
   16917:	0f b7 c0             	movzwl %ax,%eax
   1691a:	89 44 24 0c          	mov    %eax,0xc(%esp)
   1691e:	83 7c 24 0c 06       	cmpl   $0x6,0xc(%esp)
   16923:	77 0f                	ja     16934 <ll_rw_block+0x2c>
	!(blk_dev[major].request_fn)) {
   16925:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16929:	8b 04 c5 00 11 03 00 	mov    0x31100(,%eax,8),%eax
void ll_rw_block(int rw, struct buffer_head * bh)
{
	unsigned int major;									// 主设备号(对于硬盘是3)

	// 如果设备主设备号不存在或者该设备的请求操作函数不存在,则显示出错信息,并返回.否则创建请求项并插入请求队列.
	if ((major = MAJOR(bh->b_dev)) >= NR_BLK_DEV ||
   16930:	85 c0                	test   %eax,%eax
   16932:	75 12                	jne    16946 <ll_rw_block+0x3e>
	!(blk_dev[major].request_fn)) {
		printk("Trying to read nonexistent block-device\n\r");
   16934:	83 ec 0c             	sub    $0xc,%esp
   16937:	68 bc 3d 02 00       	push   $0x23dbc
   1693c:	e8 06 23 ff ff       	call   8c47 <printk>
   16941:	83 c4 10             	add    $0x10,%esp
		return;
   16944:	eb 18                	jmp    1695e <ll_rw_block+0x56>
	}
	make_request(major, rw, bh);
   16946:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1694a:	83 ec 04             	sub    $0x4,%esp
   1694d:	ff 74 24 28          	pushl  0x28(%esp)
   16951:	ff 74 24 28          	pushl  0x28(%esp)
   16955:	50                   	push   %eax
   16956:	e8 c1 fc ff ff       	call   1661c <make_request>
   1695b:	83 c4 10             	add    $0x10,%esp
}
   1695e:	83 c4 1c             	add    $0x1c,%esp
   16961:	c3                   	ret    

00016962 <blk_dev_init>:

// 块设备初始化函数,由初始化程序main.c调用.
// 初始化请求数组,将所有请求项置为空闲项(dev = -1).有32项(NR_REQUEST = 32).
void blk_dev_init(void)
{
   16962:	83 ec 10             	sub    $0x10,%esp
	int i;

	for (i = 0; i < NR_REQUEST; i++) {
   16965:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   1696c:	00 
   1696d:	eb 37                	jmp    169a6 <blk_dev_init+0x44>
		request[i].dev = -1;
   1696f:	8b 54 24 0c          	mov    0xc(%esp),%edx
   16973:	89 d0                	mov    %edx,%eax
   16975:	c1 e0 03             	shl    $0x3,%eax
   16978:	01 d0                	add    %edx,%eax
   1697a:	c1 e0 02             	shl    $0x2,%eax
   1697d:	05 80 13 04 00       	add    $0x41380,%eax
   16982:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
		request[i].next = NULL;
   16988:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1698c:	89 d0                	mov    %edx,%eax
   1698e:	c1 e0 03             	shl    $0x3,%eax
   16991:	01 d0                	add    %edx,%eax
   16993:	c1 e0 02             	shl    $0x2,%eax
   16996:	05 a0 13 04 00       	add    $0x413a0,%eax
   1699b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
// 初始化请求数组,将所有请求项置为空闲项(dev = -1).有32项(NR_REQUEST = 32).
void blk_dev_init(void)
{
	int i;

	for (i = 0; i < NR_REQUEST; i++) {
   169a1:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   169a6:	83 7c 24 0c 1f       	cmpl   $0x1f,0xc(%esp)
   169ab:	7e c2                	jle    1696f <blk_dev_init+0xd>
		request[i].dev = -1;
		request[i].next = NULL;
	}
}
   169ad:	90                   	nop
   169ae:	83 c4 10             	add    $0x10,%esp
   169b1:	c3                   	ret    

000169b2 <unlock_buffer>:
static void (DEVICE_REQUEST)(void);

// 解锁指定的缓冲块.
// 如果指定缓冲块bh并没有被上锁,则显示警告信息.否则将该缓冲块解锁,并唤醒等待该缓冲块的进程.此为内嵌函数.参数是缓冲块头指针.
static inline void unlock_buffer(struct buffer_head * bh)
{
   169b2:	83 ec 0c             	sub    $0xc,%esp
	if (!bh->b_lock)
   169b5:	8b 44 24 10          	mov    0x10(%esp),%eax
   169b9:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   169bd:	84 c0                	test   %al,%al
   169bf:	75 10                	jne    169d1 <unlock_buffer+0x1f>
		printk(DEVICE_NAME ": free buffer being unlocked\n");
   169c1:	83 ec 0c             	sub    $0xc,%esp
   169c4:	68 0c 3e 02 00       	push   $0x23e0c
   169c9:	e8 79 22 ff ff       	call   8c47 <printk>
   169ce:	83 c4 10             	add    $0x10,%esp
	bh->b_lock = 0;
   169d1:	8b 44 24 10          	mov    0x10(%esp),%eax
   169d5:	c6 40 0d 00          	movb   $0x0,0xd(%eax)
	wake_up(&bh->b_wait);
   169d9:	8b 44 24 10          	mov    0x10(%esp),%eax
   169dd:	83 c0 10             	add    $0x10,%eax
   169e0:	83 ec 0c             	sub    $0xc,%esp
   169e3:	50                   	push   %eax
   169e4:	e8 66 07 ff ff       	call   714f <wake_up>
   169e9:	83 c4 10             	add    $0x10,%esp
}
   169ec:	90                   	nop
   169ed:	83 c4 0c             	add    $0xc,%esp
   169f0:	c3                   	ret    

000169f1 <end_request>:
// 参数uptodate是更新标志.
// 首先关闭指定块设备,然后检查此次读写缓冲区是否有效.如果有效则根据参数值设置缓冲区数据更新标志,并解锁该缓冲区.如果更新标志参数值是0,
// 表示此次请求项的操作失败,因此显示相关块设备IO错误信息.最后,唤醒等待该请求项的进程以及等待空闲请求项出现的进程,释放并从请求链表
// 中删除本请求项,并把当前请求项指针指向下一请求项.
static inline void end_request(int uptodate)
{
   169f1:	83 ec 0c             	sub    $0xc,%esp
	DEVICE_OFF(CURRENT->dev);							// 关闭设备
   169f4:	a1 14 11 03 00       	mov    0x31114,%eax
   169f9:	8b 00                	mov    (%eax),%eax
   169fb:	83 e0 03             	and    $0x3,%eax
   169fe:	83 ec 0c             	sub    $0xc,%esp
   16a01:	50                   	push   %eax
   16a02:	e8 b7 08 ff ff       	call   72be <floppy_off>
   16a07:	83 c4 10             	add    $0x10,%esp
	if (CURRENT->bh) {									// CURRENT为当前请求结构项指针
   16a0a:	a1 14 11 03 00       	mov    0x31114,%eax
   16a0f:	8b 40 1c             	mov    0x1c(%eax),%eax
   16a12:	85 c0                	test   %eax,%eax
   16a14:	74 23                	je     16a39 <end_request+0x48>
		CURRENT->bh->b_uptodate = uptodate;				// 置更新标志.
   16a16:	a1 14 11 03 00       	mov    0x31114,%eax
   16a1b:	8b 40 1c             	mov    0x1c(%eax),%eax
   16a1e:	8b 54 24 10          	mov    0x10(%esp),%edx
   16a22:	88 50 0a             	mov    %dl,0xa(%eax)
		unlock_buffer(CURRENT->bh);						// 解锁缓冲区.
   16a25:	a1 14 11 03 00       	mov    0x31114,%eax
   16a2a:	8b 40 1c             	mov    0x1c(%eax),%eax
   16a2d:	83 ec 0c             	sub    $0xc,%esp
   16a30:	50                   	push   %eax
   16a31:	e8 7c ff ff ff       	call   169b2 <unlock_buffer>
   16a36:	83 c4 10             	add    $0x10,%esp
	}
	if (!uptodate) {									// 若更新标志为0则显示出错信息.
   16a39:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   16a3e:	75 34                	jne    16a74 <end_request+0x83>
		printk(DEVICE_NAME " I/O error\n\r");
   16a40:	83 ec 0c             	sub    $0xc,%esp
   16a43:	68 30 3e 02 00       	push   $0x23e30
   16a48:	e8 fa 21 ff ff       	call   8c47 <printk>
   16a4d:	83 c4 10             	add    $0x10,%esp
		printk("dev %04x, block %d\n\r",CURRENT->dev,
			CURRENT->bh->b_blocknr);
   16a50:	a1 14 11 03 00       	mov    0x31114,%eax
   16a55:	8b 40 1c             	mov    0x1c(%eax),%eax
		CURRENT->bh->b_uptodate = uptodate;				// 置更新标志.
		unlock_buffer(CURRENT->bh);						// 解锁缓冲区.
	}
	if (!uptodate) {									// 若更新标志为0则显示出错信息.
		printk(DEVICE_NAME " I/O error\n\r");
		printk("dev %04x, block %d\n\r",CURRENT->dev,
   16a58:	8b 50 04             	mov    0x4(%eax),%edx
   16a5b:	a1 14 11 03 00       	mov    0x31114,%eax
   16a60:	8b 00                	mov    (%eax),%eax
   16a62:	83 ec 04             	sub    $0x4,%esp
   16a65:	52                   	push   %edx
   16a66:	50                   	push   %eax
   16a67:	68 43 3e 02 00       	push   $0x23e43
   16a6c:	e8 d6 21 ff ff       	call   8c47 <printk>
   16a71:	83 c4 10             	add    $0x10,%esp
			CURRENT->bh->b_blocknr);
	}
	wake_up(&CURRENT->waiting);							// 唤醒等待该请求项的进程.
   16a74:	a1 14 11 03 00       	mov    0x31114,%eax
   16a79:	83 c0 18             	add    $0x18,%eax
   16a7c:	83 ec 0c             	sub    $0xc,%esp
   16a7f:	50                   	push   %eax
   16a80:	e8 ca 06 ff ff       	call   714f <wake_up>
   16a85:	83 c4 10             	add    $0x10,%esp
	wake_up(&wait_for_request);							// 唤醒等待空闲请求项的进程.
   16a88:	83 ec 0c             	sub    $0xc,%esp
   16a8b:	68 e0 10 03 00       	push   $0x310e0
   16a90:	e8 ba 06 ff ff       	call   714f <wake_up>
   16a95:	83 c4 10             	add    $0x10,%esp
	CURRENT->dev = -1;									// 释放该请求项.
   16a98:	a1 14 11 03 00       	mov    0x31114,%eax
   16a9d:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
	CURRENT = CURRENT->next;							// 指向下一请求项.
   16aa3:	a1 14 11 03 00       	mov    0x31114,%eax
   16aa8:	8b 40 20             	mov    0x20(%eax),%eax
   16aab:	a3 14 11 03 00       	mov    %eax,0x31114
}
   16ab0:	90                   	nop
   16ab1:	83 c4 0c             	add    $0xc,%esp
   16ab4:	c3                   	ret    

00016ab5 <floppy_deselect>:

// 取消选定软驱.
// 如果函数参数指定的软驱nr当前并没有被选定,则显示警告信息.然后复位软驱已选定标志selected,并唤醒等待选择该软驱的任务.数字输出
// 寄存器(DOR)的低2位用于指定选择的软驱(0-3对应A-D).
void floppy_deselect(unsigned int nr)
{
   16ab5:	83 ec 0c             	sub    $0xc,%esp
	if (nr != (current_DOR & 3))
   16ab8:	0f b6 05 c8 e2 02 00 	movzbl 0x2e2c8,%eax
   16abf:	0f b6 c0             	movzbl %al,%eax
   16ac2:	83 e0 03             	and    $0x3,%eax
   16ac5:	3b 44 24 10          	cmp    0x10(%esp),%eax
   16ac9:	74 10                	je     16adb <floppy_deselect+0x26>
		printk("floppy_deselect: drive not selected\n\r");
   16acb:	83 ec 0c             	sub    $0xc,%esp
   16ace:	68 58 3e 02 00       	push   $0x23e58
   16ad3:	e8 6f 21 ff ff       	call   8c47 <printk>
   16ad8:	83 c4 10             	add    $0x10,%esp
	selected = 0;											// 复位软驱已选定标志.
   16adb:	c6 05 58 11 03 00 00 	movb   $0x0,0x31158
	wake_up(&wait_on_floppy_select);						// 唤醒等待的任务.
   16ae2:	83 ec 0c             	sub    $0xc,%esp
   16ae5:	68 5c 11 03 00       	push   $0x3115c
   16aea:	e8 60 06 ff ff       	call   714f <wake_up>
   16aef:	83 c4 10             	add    $0x10,%esp
}
   16af2:	90                   	nop
   16af3:	83 c4 0c             	add    $0xc,%esp
   16af6:	c3                   	ret    

00016af7 <floppy_change>:
// 检测指定软驱中软盘更换情况.
// 参数nr是软驱号.如果软盘更换了则返回1,否则返回0.
// 该函数首先选定参数指定的软驱nr,然后测试软盘控制器的数字输入寄存器DIR的值,以判断驱动器中的软盘是否被更换过.该函数由程序
// fs/buffer.c中的check_disk_change()函数调用.
int floppy_change(unsigned int nr)
{
   16af7:	83 ec 1c             	sub    $0x1c,%esp
	// 首先要让软驱中软盘旋转起来并达到正常工作转速.这需要花费一定时间.采用的方法是利用kernel/sched.c中软盘定时函数do_floppy_timer()
	// 进行一定的延时处理.floppy_on()函数则用于判断延时是否到(mon_timer[nr]==0?),若没有到则让当前进程继续睡眠等待.若延时到则
	// do_floppy_timer()会唤醒当前进程.
repeat:
	floppy_on(nr);										// 启动并等待指定软驱nr(kernel/sched.c)
   16afa:	83 ec 0c             	sub    $0xc,%esp
   16afd:	ff 74 24 2c          	pushl  0x2c(%esp)
   16b01:	e8 81 07 ff ff       	call   7287 <floppy_on>
   16b06:	83 c4 10             	add    $0x10,%esp
	// 在软盘启动(旋转)之后,我们来查看一下当前选择的软驱是不是函数参数指定的软驱nr.
	// 如果当前选择的软驱不是指定的软驱nr,并且已经选定了其他软驱,则让当前任务进入可中断等待状态,以等待其他软驱被取消选定.参见上面
	// floppy_deselect().如果当前没有选择其他软驱或者其他软驱被取消选定而使当前任务被唤醒时,当前软驱仍然不是指定的软驱nr,则跳转到
	// 函数开始处重新循环等待.
	while ((current_DOR & 3) != nr && selected)
   16b09:	eb 10                	jmp    16b1b <floppy_change+0x24>
		sleep_on(&wait_on_floppy_select);
   16b0b:	83 ec 0c             	sub    $0xc,%esp
   16b0e:	68 5c 11 03 00       	push   $0x3115c
   16b13:	e8 1e 06 ff ff       	call   7136 <sleep_on>
   16b18:	83 c4 10             	add    $0x10,%esp
	floppy_on(nr);										// 启动并等待指定软驱nr(kernel/sched.c)
	// 在软盘启动(旋转)之后,我们来查看一下当前选择的软驱是不是函数参数指定的软驱nr.
	// 如果当前选择的软驱不是指定的软驱nr,并且已经选定了其他软驱,则让当前任务进入可中断等待状态,以等待其他软驱被取消选定.参见上面
	// floppy_deselect().如果当前没有选择其他软驱或者其他软驱被取消选定而使当前任务被唤醒时,当前软驱仍然不是指定的软驱nr,则跳转到
	// 函数开始处重新循环等待.
	while ((current_DOR & 3) != nr && selected)
   16b1b:	0f b6 05 c8 e2 02 00 	movzbl 0x2e2c8,%eax
   16b22:	0f b6 c0             	movzbl %al,%eax
   16b25:	83 e0 03             	and    $0x3,%eax
   16b28:	3b 44 24 20          	cmp    0x20(%esp),%eax
   16b2c:	74 0b                	je     16b39 <floppy_change+0x42>
   16b2e:	0f b6 05 58 11 03 00 	movzbl 0x31158,%eax
   16b35:	84 c0                	test   %al,%al
   16b37:	75 d2                	jne    16b0b <floppy_change+0x14>
		sleep_on(&wait_on_floppy_select);
	if ((current_DOR & 3) != nr)
   16b39:	0f b6 05 c8 e2 02 00 	movzbl 0x2e2c8,%eax
   16b40:	0f b6 c0             	movzbl %al,%eax
   16b43:	83 e0 03             	and    $0x3,%eax
   16b46:	3b 44 24 20          	cmp    0x20(%esp),%eax
   16b4a:	74 02                	je     16b4e <floppy_change+0x57>
		goto repeat;
   16b4c:	eb ac                	jmp    16afa <floppy_change+0x3>
	// 现在软盘控制器已经选定我们指定的软驱nr.于是取数字输入寄存器DIR的值,如果其最高位(位7)置位,则表示软盘已更换,此时即可关闭马达并
	// 返回1退出.否则关闭马达返回0退出.表示磁盘没有被更换.
	if (inb(FD_DIR) & 0x80) {
   16b4e:	b8 f7 03 00 00       	mov    $0x3f7,%eax
   16b53:	89 c2                	mov    %eax,%edx
   16b55:	ec                   	in     (%dx),%al
   16b56:	88 44 24 0f          	mov    %al,0xf(%esp)
   16b5a:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   16b5f:	84 c0                	test   %al,%al
   16b61:	79 16                	jns    16b79 <floppy_change+0x82>
		floppy_off(nr);
   16b63:	83 ec 0c             	sub    $0xc,%esp
   16b66:	ff 74 24 2c          	pushl  0x2c(%esp)
   16b6a:	e8 4f 07 ff ff       	call   72be <floppy_off>
   16b6f:	83 c4 10             	add    $0x10,%esp
		return 1;
   16b72:	b8 01 00 00 00       	mov    $0x1,%eax
   16b77:	eb 14                	jmp    16b8d <floppy_change+0x96>
	}
	floppy_off(nr);
   16b79:	83 ec 0c             	sub    $0xc,%esp
   16b7c:	ff 74 24 2c          	pushl  0x2c(%esp)
   16b80:	e8 39 07 ff ff       	call   72be <floppy_off>
   16b85:	83 c4 10             	add    $0x10,%esp
	return 0;
   16b88:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16b8d:	83 c4 1c             	add    $0x1c,%esp
   16b90:	c3                   	ret    

00016b91 <setup_DMA>:
	:)

// 设置(初始化)软盘DMA通道.
// 软盘中数据读写操作是使用DMA进行的.因此在每次进行数据传输之前需要设置DMA芯片专门上用于软驱的通道2.
static void setup_DMA(void)
{
   16b91:	57                   	push   %edi
   16b92:	56                   	push   %esi
   16b93:	53                   	push   %ebx
   16b94:	83 ec 10             	sub    $0x10,%esp
	long addr = (long) CURRENT->buffer;				// 当前请求项缓冲区所处内存地址.
   16b97:	a1 14 11 03 00       	mov    0x31114,%eax
   16b9c:	8b 40 14             	mov    0x14(%eax),%eax
   16b9f:	89 44 24 0c          	mov    %eax,0xc(%esp)

	// 首先检测请求项的缓冲区所在位置.如果缓冲区处于内存1MB以上的某个地方,则需要将DMA缓冲区设在临时缓冲区域(tmp_floppy_area)处.因为
	// 8237A芯片只能在1MB地址范围内寻址.如果是写盘命令,则还需要把数据从请求项缓冲区复制到该临时区域.
	cli();
   16ba3:	fa                   	cli    
	if (addr >= 0x100000) {
   16ba4:	81 7c 24 0c ff ff 0f 	cmpl   $0xfffff,0xc(%esp)
   16bab:	00 
   16bac:	7e 30                	jle    16bde <setup_DMA+0x4d>
		addr = (long) tmp_floppy_area;
   16bae:	c7 44 24 0c 00 50 00 	movl   $0x5000,0xc(%esp)
   16bb5:	00 
		if (command == FD_WRITE)
   16bb6:	0f b6 05 78 11 03 00 	movzbl 0x31178,%eax
   16bbd:	3c c5                	cmp    $0xc5,%al
   16bbf:	75 1d                	jne    16bde <setup_DMA+0x4d>
			copy_buffer(CURRENT->buffer,tmp_floppy_area);
   16bc1:	a1 14 11 03 00       	mov    0x31114,%eax
   16bc6:	8b 40 14             	mov    0x14(%eax),%eax
   16bc9:	89 c2                	mov    %eax,%edx
   16bcb:	bb 00 50 00 00       	mov    $0x5000,%ebx
   16bd0:	b8 00 01 00 00       	mov    $0x100,%eax
   16bd5:	89 c1                	mov    %eax,%ecx
   16bd7:	89 d6                	mov    %edx,%esi
   16bd9:	89 df                	mov    %ebx,%edi
   16bdb:	fc                   	cld    
   16bdc:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	}
	// 接下来我们开始设置DMA通道2.在开始设置之前需要先屏蔽该通道.单通道屏蔽寄存器端口为0x0A.位0-1指定DMA通道(0--3),位2:1表示屏蔽,0
	// 表示允许请求.然后向DMA控制器端口D12和11写入方式字(读盘是0x46,写盘是0x4A).再写入传输使用缓冲区地址addr和需要传输的字节数0x3ff
	// (0--1023).最后复位对DMA通道2的屏蔽,开放DMA2请求DREQ信号.
	/* mask DMA 2 */	/* 屏蔽DMA通道2 */
	immoutb_p(4 | 2,10);
   16bde:	b8 06 00 00 00       	mov    $0x6,%eax
   16be3:	e6 0a                	out    %al,$0xa
   16be5:	eb 00                	jmp    16be7 <setup_DMA+0x56>
   16be7:	eb 00                	jmp    16be9 <setup_DMA+0x58>
	// 由于各通道的地址和计数寄存器都是16位的,因此在设置他们时都需要分2次进行操作.一次访问低字节,另一次访问高字节.而实际在写哪个字节则
	// 由先后触发器的状态一.当触发器为0时,则访问低字节;当字节触发器为1时,则访问高字节.每访问一次,该触发器的状态就变化一次.而写端口12就可
	// 以将触发顺置成0状态,从而对16位寄存器的设置从低字节开始.
 	__asm__("outb %%al,$12\n\tjmp 1f\n1:\tjmp 1f\n1:\t"
	"outb %%al,$11\n\tjmp 1f\n1:\tjmp 1f\n1:"::
	"a" ((char) ((command == FD_READ)?DMA_READ:DMA_WRITE)));
   16be9:	0f b6 05 78 11 03 00 	movzbl 0x31178,%eax
   16bf0:	3c e6                	cmp    $0xe6,%al
   16bf2:	75 07                	jne    16bfb <setup_DMA+0x6a>
   16bf4:	b8 46 00 00 00       	mov    $0x46,%eax
   16bf9:	eb 05                	jmp    16c00 <setup_DMA+0x6f>
   16bfb:	b8 4a 00 00 00       	mov    $0x4a,%eax
	/* sanches和canton)都输出两次,首先是12口,然后是11口 */
	// 下面嵌入汇编代码向DMA控制器的"清除先后触发器"端口12和方式寄存器端口11写入方式字(读盘时是0x46,写盘是0x4A).
	// 由于各通道的地址和计数寄存器都是16位的,因此在设置他们时都需要分2次进行操作.一次访问低字节,另一次访问高字节.而实际在写哪个字节则
	// 由先后触发器的状态一.当触发器为0时,则访问低字节;当字节触发器为1时,则访问高字节.每访问一次,该触发器的状态就变化一次.而写端口12就可
	// 以将触发顺置成0状态,从而对16位寄存器的设置从低字节开始.
 	__asm__("outb %%al,$12\n\tjmp 1f\n1:\tjmp 1f\n1:\t"
   16c00:	e6 0c                	out    %al,$0xc
   16c02:	eb 00                	jmp    16c04 <setup_DMA+0x73>
   16c04:	eb 00                	jmp    16c06 <setup_DMA+0x75>
   16c06:	e6 0b                	out    %al,$0xb
   16c08:	eb 00                	jmp    16c0a <setup_DMA+0x79>
   16c0a:	eb 00                	jmp    16c0c <setup_DMA+0x7b>
	"outb %%al,$11\n\tjmp 1f\n1:\tjmp 1f\n1:"::
	"a" ((char) ((command == FD_READ)?DMA_READ:DMA_WRITE)));
	/* 8 low bits of addr */	/* 地址氏0-7位 */
	// 向DMA通道2写入基/当前地址寄存器(端口4).
	immoutb_p(addr, 4);
   16c0c:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16c10:	e6 04                	out    %al,$0x4
   16c12:	eb 00                	jmp    16c14 <setup_DMA+0x83>
   16c14:	eb 00                	jmp    16c16 <setup_DMA+0x85>
	addr >>= 8;
   16c16:	c1 7c 24 0c 08       	sarl   $0x8,0xc(%esp)
	/* bits 8-15 of addr */		/* 地址高8-15位 */
	immoutb_p(addr, 4);
   16c1b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16c1f:	e6 04                	out    %al,$0x4
   16c21:	eb 00                	jmp    16c23 <setup_DMA+0x92>
   16c23:	eb 00                	jmp    16c25 <setup_DMA+0x94>
	addr >>= 8;
   16c25:	c1 7c 24 0c 08       	sarl   $0x8,0xc(%esp)
	/* bits 16-19 of addr */	/* 地址16-19位 */
	// DMA只可以在1MB内存空间内寻址,基高16-19位地址需放入页面寄存器(端口0x81).
	immoutb_p(addr, 0x81);
   16c2a:	8b 44 24 0c          	mov    0xc(%esp),%eax
   16c2e:	e6 81                	out    %al,$0x81
   16c30:	eb 00                	jmp    16c32 <setup_DMA+0xa1>
   16c32:	eb 00                	jmp    16c34 <setup_DMA+0xa3>
	/* low 8 bits of count-1 (1024-1=0x3ff) */	/* 计数器低8位(1024-1 = 0x3ff) */
	// 向DMA通道2写入基/当前字节计数值(端口5).
	immoutb_p(0xff, 5);
   16c34:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16c39:	e6 05                	out    %al,$0x5
   16c3b:	eb 00                	jmp    16c3d <setup_DMA+0xac>
   16c3d:	eb 00                	jmp    16c3f <setup_DMA+0xae>
	/* high 8 bits of count-1 */	/* 计数器高8位 */
	// 一次共传输1024字节(两个扇区).
	immoutb_p(3, 5);
   16c3f:	b8 03 00 00 00       	mov    $0x3,%eax
   16c44:	e6 05                	out    %al,$0x5
   16c46:	eb 00                	jmp    16c48 <setup_DMA+0xb7>
   16c48:	eb 00                	jmp    16c4a <setup_DMA+0xb9>
	/* activate DMA 2 */	/* 开启DMA通道2的请求 */
	immoutb_p(0 | 2, 10);
   16c4a:	b8 02 00 00 00       	mov    $0x2,%eax
   16c4f:	e6 0a                	out    %al,$0xa
   16c51:	eb 00                	jmp    16c53 <setup_DMA+0xc2>
   16c53:	eb 00                	jmp    16c55 <setup_DMA+0xc4>
	sti();
   16c55:	fb                   	sti    
}
   16c56:	90                   	nop
   16c57:	83 c4 10             	add    $0x10,%esp
   16c5a:	5b                   	pop    %ebx
   16c5b:	5e                   	pop    %esi
   16c5c:	5f                   	pop    %edi
   16c5d:	c3                   	ret    

00016c5e <output_byte>:

// 向软驱控制器输出一个字节命令或参数.
// 在向控制器发送一个字节之前,控制器需要处于准备好状态,并且数据传输方向必须设置成从CPU到FDC,因此函数需要首先读取控制器状态信息.
// 这里使用了循环查询方式,以作适当延时.若出错,则会设置复位标志reset.
static void output_byte(char byte)
{
   16c5e:	83 ec 2c             	sub    $0x2c,%esp
   16c61:	8b 44 24 30          	mov    0x30(%esp),%eax
   16c65:	88 44 24 0c          	mov    %al,0xc(%esp)
	int counter;
	unsigned char status;

	// 循环读取主状态控制器FD_STATUS(0x3f4)的状态.如果所读状态是STATUS_READY并且方向位STATUS_DIR = 0(CPU ->FDC),则向数据端口输出
	// 指定字节.
	if (reset)
   16c69:	a1 64 11 03 00       	mov    0x31164,%eax
   16c6e:	85 c0                	test   %eax,%eax
   16c70:	75 65                	jne    16cd7 <output_byte+0x79>
		return;
	for(counter = 0 ; counter < 10000 ; counter++) {
   16c72:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   16c79:	00 
   16c7a:	eb 35                	jmp    16cb1 <output_byte+0x53>
		status = inb_p(FD_STATUS) & (STATUS_READY | STATUS_DIR);
   16c7c:	b8 f4 03 00 00       	mov    $0x3f4,%eax
   16c81:	89 c2                	mov    %eax,%edx
   16c83:	ec                   	in     (%dx),%al
   16c84:	eb 00                	jmp    16c86 <output_byte+0x28>
   16c86:	eb 00                	jmp    16c88 <output_byte+0x2a>
   16c88:	88 44 24 1b          	mov    %al,0x1b(%esp)
   16c8c:	0f b6 44 24 1b       	movzbl 0x1b(%esp),%eax
   16c91:	83 e0 c0             	and    $0xffffffc0,%eax
   16c94:	88 44 24 1a          	mov    %al,0x1a(%esp)
		if (status == STATUS_READY) {
   16c98:	80 7c 24 1a 80       	cmpb   $0x80,0x1a(%esp)
   16c9d:	75 0d                	jne    16cac <output_byte+0x4e>
			outb(byte,FD_DATA);
   16c9f:	0f b6 44 24 0c       	movzbl 0xc(%esp),%eax
   16ca4:	ba f5 03 00 00       	mov    $0x3f5,%edx
   16ca9:	ee                   	out    %al,(%dx)
			return;
   16caa:	eb 2c                	jmp    16cd8 <output_byte+0x7a>

	// 循环读取主状态控制器FD_STATUS(0x3f4)的状态.如果所读状态是STATUS_READY并且方向位STATUS_DIR = 0(CPU ->FDC),则向数据端口输出
	// 指定字节.
	if (reset)
		return;
	for(counter = 0 ; counter < 10000 ; counter++) {
   16cac:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   16cb1:	81 7c 24 1c 0f 27 00 	cmpl   $0x270f,0x1c(%esp)
   16cb8:	00 
   16cb9:	7e c1                	jle    16c7c <output_byte+0x1e>
			outb(byte,FD_DATA);
			return;
		}
	}
	// 如果到循环1万次结束还不能发送,则置复位标志,并打印出错信息.
	reset = 1;
   16cbb:	c7 05 64 11 03 00 01 	movl   $0x1,0x31164
   16cc2:	00 00 00 
	printk("Unable to send byte to FDC\n\r");
   16cc5:	83 ec 0c             	sub    $0xc,%esp
   16cc8:	68 7e 3e 02 00       	push   $0x23e7e
   16ccd:	e8 75 1f ff ff       	call   8c47 <printk>
   16cd2:	83 c4 10             	add    $0x10,%esp
   16cd5:	eb 01                	jmp    16cd8 <output_byte+0x7a>
	unsigned char status;

	// 循环读取主状态控制器FD_STATUS(0x3f4)的状态.如果所读状态是STATUS_READY并且方向位STATUS_DIR = 0(CPU ->FDC),则向数据端口输出
	// 指定字节.
	if (reset)
		return;
   16cd7:	90                   	nop
		}
	}
	// 如果到循环1万次结束还不能发送,则置复位标志,并打印出错信息.
	reset = 1;
	printk("Unable to send byte to FDC\n\r");
}
   16cd8:	83 c4 2c             	add    $0x2c,%esp
   16cdb:	c3                   	ret    

00016cdc <result>:

// 读取FDC执行的结果信息.
// 结果信息最多7个字节,存放在数组reply_buffer[]中.返回读入的结果字节数,若返回值=-1,则表示出错.程序处理方式与上面函数类似.
static int result(void)
{
   16cdc:	83 ec 2c             	sub    $0x2c,%esp
	int i = 0, counter, status;
   16cdf:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   16ce6:	00 

	// 若复位标志已置位,则立刻退出.去执行后续程序中的复位操作.否则循环读取主状态控制器FD_STATUS(0x3f4)的状态.如果读取的控制器状态
	// 是READY,表示已经没有数据可取,则返回已读取的字节数i.如果控制器状态是方向标志置位(CPU <-FDC),已准备好,忙,表示有数据可读取.
	// 于是把控制器中的结果数据读入到应答结果数组中.最多读取MAX_REPLIES(7)个字节.
	if (reset)
   16ce7:	a1 64 11 03 00       	mov    0x31164,%eax
   16cec:	85 c0                	test   %eax,%eax
   16cee:	74 0a                	je     16cfa <result+0x1e>
		return -1;
   16cf0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16cf5:	e9 a3 00 00 00       	jmp    16d9d <result+0xc1>
	for (counter = 0 ; counter < 10000 ; counter++) {
   16cfa:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   16d01:	00 
   16d02:	eb 6d                	jmp    16d71 <result+0x95>
		status = inb_p(FD_STATUS)&(STATUS_DIR|STATUS_READY|STATUS_BUSY);
   16d04:	b8 f4 03 00 00       	mov    $0x3f4,%eax
   16d09:	89 c2                	mov    %eax,%edx
   16d0b:	ec                   	in     (%dx),%al
   16d0c:	eb 00                	jmp    16d0e <result+0x32>
   16d0e:	eb 00                	jmp    16d10 <result+0x34>
   16d10:	88 44 24 17          	mov    %al,0x17(%esp)
   16d14:	0f b6 44 24 17       	movzbl 0x17(%esp),%eax
   16d19:	0f b6 c0             	movzbl %al,%eax
   16d1c:	25 d0 00 00 00       	and    $0xd0,%eax
   16d21:	89 44 24 10          	mov    %eax,0x10(%esp)
		if (status == STATUS_READY)
   16d25:	81 7c 24 10 80 00 00 	cmpl   $0x80,0x10(%esp)
   16d2c:	00 
   16d2d:	75 06                	jne    16d35 <result+0x59>
			return i;
   16d2f:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   16d33:	eb 68                	jmp    16d9d <result+0xc1>
		if (status == (STATUS_DIR|STATUS_READY|STATUS_BUSY)) {
   16d35:	81 7c 24 10 d0 00 00 	cmpl   $0xd0,0x10(%esp)
   16d3c:	00 
   16d3d:	75 2d                	jne    16d6c <result+0x90>
			if (i >= MAX_REPLIES)
   16d3f:	83 7c 24 1c 06       	cmpl   $0x6,0x1c(%esp)
   16d44:	7f 37                	jg     16d7d <result+0xa1>
				break;
			reply_buffer[i++] = inb_p(FD_DATA);
   16d46:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
   16d4a:	8d 41 01             	lea    0x1(%ecx),%eax
   16d4d:	89 44 24 1c          	mov    %eax,0x1c(%esp)
   16d51:	b8 f5 03 00 00       	mov    $0x3f5,%eax
   16d56:	89 c2                	mov    %eax,%edx
   16d58:	ec                   	in     (%dx),%al
   16d59:	eb 00                	jmp    16d5b <result+0x7f>
   16d5b:	eb 00                	jmp    16d5d <result+0x81>
   16d5d:	88 44 24 0f          	mov    %al,0xf(%esp)
   16d61:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   16d66:	88 81 6c 11 03 00    	mov    %al,0x3116c(%ecx)
	// 若复位标志已置位,则立刻退出.去执行后续程序中的复位操作.否则循环读取主状态控制器FD_STATUS(0x3f4)的状态.如果读取的控制器状态
	// 是READY,表示已经没有数据可取,则返回已读取的字节数i.如果控制器状态是方向标志置位(CPU <-FDC),已准备好,忙,表示有数据可读取.
	// 于是把控制器中的结果数据读入到应答结果数组中.最多读取MAX_REPLIES(7)个字节.
	if (reset)
		return -1;
	for (counter = 0 ; counter < 10000 ; counter++) {
   16d6c:	83 44 24 18 01       	addl   $0x1,0x18(%esp)
   16d71:	81 7c 24 18 0f 27 00 	cmpl   $0x270f,0x18(%esp)
   16d78:	00 
   16d79:	7e 89                	jle    16d04 <result+0x28>
   16d7b:	eb 01                	jmp    16d7e <result+0xa2>
		status = inb_p(FD_STATUS)&(STATUS_DIR|STATUS_READY|STATUS_BUSY);
		if (status == STATUS_READY)
			return i;
		if (status == (STATUS_DIR|STATUS_READY|STATUS_BUSY)) {
			if (i >= MAX_REPLIES)
				break;
   16d7d:	90                   	nop
			reply_buffer[i++] = inb_p(FD_DATA);
		}
	}
	// 如果到循环1万次结束还不能发送,则置复位标志,并打印出错信息.
	reset = 1;
   16d7e:	c7 05 64 11 03 00 01 	movl   $0x1,0x31164
   16d85:	00 00 00 
	printk("Getstatus times out\n\r");
   16d88:	83 ec 0c             	sub    $0xc,%esp
   16d8b:	68 9b 3e 02 00       	push   $0x23e9b
   16d90:	e8 b2 1e ff ff       	call   8c47 <printk>
   16d95:	83 c4 10             	add    $0x10,%esp
	return -1;
   16d98:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   16d9d:	83 c4 2c             	add    $0x2c,%esp
   16da0:	c3                   	ret    

00016da1 <bad_flp_intr>:
// 该函数根据软盘读写出错次数来确定需要采取的进一步行动.如果当前处理的请求项出错次数大于规定的最大出错次数MAX_ERRORS(8次),则
// 不再对当前请求项作进一步的操作尝试.如果读/写出错次数已经超过MAX_ERRORS/2,则需要对软驱作复位处理,于是设置复位标志reset.否则
// 若出错次数还不到最大值的一半,则只需重新校正一下磁头位置,于是设置重新校正标志recalibrate.真正的复位和重新校正处理会在后续的
// 程序中进行.
static void bad_flp_intr(void)
{
   16da1:	83 ec 0c             	sub    $0xc,%esp
	// 首先把当前请求项出错次数增1.如果当前请求项出错次数大于最大允许出错次数,则取消选定当前软驱,并结束该请求项(缓冲区内容没有被更新).
	CURRENT->errors++;
   16da4:	a1 14 11 03 00       	mov    0x31114,%eax
   16da9:	8b 50 08             	mov    0x8(%eax),%edx
   16dac:	83 c2 01             	add    $0x1,%edx
   16daf:	89 50 08             	mov    %edx,0x8(%eax)
	if (CURRENT->errors > MAX_ERRORS) {
   16db2:	a1 14 11 03 00       	mov    0x31114,%eax
   16db7:	8b 40 08             	mov    0x8(%eax),%eax
   16dba:	83 f8 08             	cmp    $0x8,%eax
   16dbd:	7e 23                	jle    16de2 <bad_flp_intr+0x41>
		floppy_deselect(current_drive);
   16dbf:	0f b6 05 73 11 03 00 	movzbl 0x31173,%eax
   16dc6:	0f b6 c0             	movzbl %al,%eax
   16dc9:	83 ec 0c             	sub    $0xc,%esp
   16dcc:	50                   	push   %eax
   16dcd:	e8 e3 fc ff ff       	call   16ab5 <floppy_deselect>
   16dd2:	83 c4 10             	add    $0x10,%esp
		end_request(0);
   16dd5:	83 ec 0c             	sub    $0xc,%esp
   16dd8:	6a 00                	push   $0x0
   16dda:	e8 12 fc ff ff       	call   169f1 <end_request>
   16ddf:	83 c4 10             	add    $0x10,%esp
	}
	// 如果当前请求项出错次数大于在允许出错次数的一半,则置复位标志,需对软驱进行复位操作,然后再试.否则软驱需重新校正一下再试.
	if (CURRENT->errors > MAX_ERRORS / 2)
   16de2:	a1 14 11 03 00       	mov    0x31114,%eax
   16de7:	8b 40 08             	mov    0x8(%eax),%eax
   16dea:	83 f8 04             	cmp    $0x4,%eax
   16ded:	7e 0c                	jle    16dfb <bad_flp_intr+0x5a>
		reset = 1;
   16def:	c7 05 64 11 03 00 01 	movl   $0x1,0x31164
   16df6:	00 00 00 
	else
		recalibrate = 1;
}
   16df9:	eb 0a                	jmp    16e05 <bad_flp_intr+0x64>
	}
	// 如果当前请求项出错次数大于在允许出错次数的一半,则置复位标志,需对软驱进行复位操作,然后再试.否则软驱需重新校正一下再试.
	if (CURRENT->errors > MAX_ERRORS / 2)
		reset = 1;
	else
		recalibrate = 1;
   16dfb:	c7 05 60 11 03 00 01 	movl   $0x1,0x31160
   16e02:	00 00 00 
}
   16e05:	90                   	nop
   16e06:	83 c4 0c             	add    $0xc,%esp
   16e09:	c3                   	ret    

00016e0a <rw_interrupt>:
 */
// 软盘读写中断调用函数.
// 该函数在软驱控制器操作结束后引发的中断处理过程中被调用.函数首先读取操作结果状态信息,据此判断操作是否出现问题并作相应处理.如果
// 读/写操作成功,那么若请求项是读操作并且其缓冲区在内存1MB以上位置,则需要把数据从软盘临时缓冲区复制到请求项的缓冲区.
static void rw_interrupt(void)
{
   16e0a:	57                   	push   %edi
   16e0b:	56                   	push   %esi
   16e0c:	53                   	push   %ebx
	// 读取FDC执行的结果信息.如果返回字节数不等于7,或者状态字节0,1或2中存在出错标志,那么若是写保护就显示出错信息,释放当前驱动器,并
	// 结束当前请求项.否则就执行出错计数处理.然后继续执行软盘请求项操作.以下状态的含义参见fdreg.h文件.
	if (result() != 7 || (ST0 & 0xd8) || (ST1 & 0xbf) || (ST2 & 0x73)) {    // 把0xf8修改0xd8
   16e0d:	e8 ca fe ff ff       	call   16cdc <result>
   16e12:	83 f8 07             	cmp    $0x7,%eax
   16e15:	75 37                	jne    16e4e <rw_interrupt+0x44>
   16e17:	0f b6 05 6c 11 03 00 	movzbl 0x3116c,%eax
   16e1e:	0f b6 c0             	movzbl %al,%eax
   16e21:	25 d8 00 00 00       	and    $0xd8,%eax
   16e26:	85 c0                	test   %eax,%eax
   16e28:	75 24                	jne    16e4e <rw_interrupt+0x44>
   16e2a:	0f b6 05 6d 11 03 00 	movzbl 0x3116d,%eax
   16e31:	0f b6 c0             	movzbl %al,%eax
   16e34:	25 bf 00 00 00       	and    $0xbf,%eax
   16e39:	85 c0                	test   %eax,%eax
   16e3b:	75 11                	jne    16e4e <rw_interrupt+0x44>
   16e3d:	0f b6 05 6e 11 03 00 	movzbl 0x3116e,%eax
   16e44:	0f b6 c0             	movzbl %al,%eax
   16e47:	83 e0 73             	and    $0x73,%eax
   16e4a:	85 c0                	test   %eax,%eax
   16e4c:	74 5d                	je     16eab <rw_interrupt+0xa1>
		if (ST1 & 0x02) {
   16e4e:	0f b6 05 6d 11 03 00 	movzbl 0x3116d,%eax
   16e55:	0f b6 c0             	movzbl %al,%eax
   16e58:	83 e0 02             	and    $0x2,%eax
   16e5b:	85 c0                	test   %eax,%eax
   16e5d:	74 40                	je     16e9f <rw_interrupt+0x95>
			printk("Drive %d is write protected\n\r",current_drive);
   16e5f:	0f b6 05 73 11 03 00 	movzbl 0x31173,%eax
   16e66:	0f b6 c0             	movzbl %al,%eax
   16e69:	83 ec 08             	sub    $0x8,%esp
   16e6c:	50                   	push   %eax
   16e6d:	68 b1 3e 02 00       	push   $0x23eb1
   16e72:	e8 d0 1d ff ff       	call   8c47 <printk>
   16e77:	83 c4 10             	add    $0x10,%esp
			floppy_deselect(current_drive);
   16e7a:	0f b6 05 73 11 03 00 	movzbl 0x31173,%eax
   16e81:	0f b6 c0             	movzbl %al,%eax
   16e84:	83 ec 0c             	sub    $0xc,%esp
   16e87:	50                   	push   %eax
   16e88:	e8 28 fc ff ff       	call   16ab5 <floppy_deselect>
   16e8d:	83 c4 10             	add    $0x10,%esp
			end_request(0);
   16e90:	83 ec 0c             	sub    $0xc,%esp
   16e93:	6a 00                	push   $0x0
   16e95:	e8 57 fb ff ff       	call   169f1 <end_request>
   16e9a:	83 c4 10             	add    $0x10,%esp
   16e9d:	eb 05                	jmp    16ea4 <rw_interrupt+0x9a>
		} else
			bad_flp_intr();
   16e9f:	e8 fd fe ff ff       	call   16da1 <bad_flp_intr>
		do_fd_request();
   16ea4:	e8 50 05 00 00       	call   173f9 <do_fd_request>
		return;
   16ea9:	eb 5f                	jmp    16f0a <rw_interrupt+0x100>
	}
	// 如果当前请求项的缓冲区位于1MB地址以上,则说明此次软盘读操作的内容还放在临时缓冲区内,需要复制到当前请求项的缓冲区中(因为DMA只能在
	// 1MB地址范围寻址).最后释放当前软驱(取消选定),执行当前请求项结束处理:唤醒等待该请求项的进程,唤醒等待空闲请求项的进程(若有的话),从软驱
	// 设备请求项链表中删除本请求项.再继续执行其他软盘请求项操作.
	if (command == FD_READ && (unsigned long)(CURRENT->buffer) >= 0x100000)
   16eab:	0f b6 05 78 11 03 00 	movzbl 0x31178,%eax
   16eb2:	3c e6                	cmp    $0xe6,%al
   16eb4:	75 2c                	jne    16ee2 <rw_interrupt+0xd8>
   16eb6:	a1 14 11 03 00       	mov    0x31114,%eax
   16ebb:	8b 40 14             	mov    0x14(%eax),%eax
   16ebe:	3d ff ff 0f 00       	cmp    $0xfffff,%eax
   16ec3:	76 1d                	jbe    16ee2 <rw_interrupt+0xd8>
		copy_buffer(tmp_floppy_area,CURRENT->buffer);
   16ec5:	ba 00 50 00 00       	mov    $0x5000,%edx
   16eca:	a1 14 11 03 00       	mov    0x31114,%eax
   16ecf:	8b 40 14             	mov    0x14(%eax),%eax
   16ed2:	89 c3                	mov    %eax,%ebx
   16ed4:	b8 00 01 00 00       	mov    $0x100,%eax
   16ed9:	89 c1                	mov    %eax,%ecx
   16edb:	89 d6                	mov    %edx,%esi
   16edd:	89 df                	mov    %ebx,%edi
   16edf:	fc                   	cld    
   16ee0:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	floppy_deselect(current_drive);
   16ee2:	0f b6 05 73 11 03 00 	movzbl 0x31173,%eax
   16ee9:	0f b6 c0             	movzbl %al,%eax
   16eec:	83 ec 0c             	sub    $0xc,%esp
   16eef:	50                   	push   %eax
   16ef0:	e8 c0 fb ff ff       	call   16ab5 <floppy_deselect>
   16ef5:	83 c4 10             	add    $0x10,%esp
	end_request(1);
   16ef8:	83 ec 0c             	sub    $0xc,%esp
   16efb:	6a 01                	push   $0x1
   16efd:	e8 ef fa ff ff       	call   169f1 <end_request>
   16f02:	83 c4 10             	add    $0x10,%esp
	do_fd_request();
   16f05:	e8 ef 04 00 00       	call   173f9 <do_fd_request>
}
   16f0a:	5b                   	pop    %ebx
   16f0b:	5e                   	pop    %esi
   16f0c:	5f                   	pop    %edi
   16f0d:	c3                   	ret    

00016f0e <setup_rw_floppy>:

// 设置DMA通道2并向软盘控制器输出命令和参数(输出1字节命令+0~7字节参数).
// 若reset标志没有置位,那么在该函数退出并且软盘控制器执行完相应读/写操作后就会产生一个软盘中断请求,并开始执行软盘中断处理程序.
void setup_rw_floppy(void)
{
   16f0e:	83 ec 0c             	sub    $0xc,%esp
	setup_DMA();										// 初始化软盘DMA通道.
   16f11:	e8 7b fc ff ff       	call   16b91 <setup_DMA>
	do_floppy = rw_interrupt;							// 置软盘中断调用函数指针.
   16f16:	c7 05 54 11 03 00 0a 	movl   $0x16e0a,0x31154
   16f1d:	6e 01 00 
	output_byte(command);								// 发送命令字节.
   16f20:	0f b6 05 78 11 03 00 	movzbl 0x31178,%eax
   16f27:	0f be c0             	movsbl %al,%eax
   16f2a:	83 ec 0c             	sub    $0xc,%esp
   16f2d:	50                   	push   %eax
   16f2e:	e8 2b fd ff ff       	call   16c5e <output_byte>
   16f33:	83 c4 10             	add    $0x10,%esp
	output_byte(head<<2 | current_drive);				// 参数:磁头号 + 驱动器号.
   16f36:	0f b6 05 75 11 03 00 	movzbl 0x31175,%eax
   16f3d:	0f b6 c0             	movzbl %al,%eax
   16f40:	c1 e0 02             	shl    $0x2,%eax
   16f43:	89 c2                	mov    %eax,%edx
   16f45:	0f b6 05 73 11 03 00 	movzbl 0x31173,%eax
   16f4c:	09 d0                	or     %edx,%eax
   16f4e:	0f be c0             	movsbl %al,%eax
   16f51:	83 ec 0c             	sub    $0xc,%esp
   16f54:	50                   	push   %eax
   16f55:	e8 04 fd ff ff       	call   16c5e <output_byte>
   16f5a:	83 c4 10             	add    $0x10,%esp
	output_byte(track);									// 参数:磁道号.
   16f5d:	0f b6 05 76 11 03 00 	movzbl 0x31176,%eax
   16f64:	0f be c0             	movsbl %al,%eax
   16f67:	83 ec 0c             	sub    $0xc,%esp
   16f6a:	50                   	push   %eax
   16f6b:	e8 ee fc ff ff       	call   16c5e <output_byte>
   16f70:	83 c4 10             	add    $0x10,%esp
	output_byte(head);									// 参数:磁头号.
   16f73:	0f b6 05 75 11 03 00 	movzbl 0x31175,%eax
   16f7a:	0f be c0             	movsbl %al,%eax
   16f7d:	83 ec 0c             	sub    $0xc,%esp
   16f80:	50                   	push   %eax
   16f81:	e8 d8 fc ff ff       	call   16c5e <output_byte>
   16f86:	83 c4 10             	add    $0x10,%esp
	output_byte(sector);								// 参数:起始扇区号.
   16f89:	0f b6 05 74 11 03 00 	movzbl 0x31174,%eax
   16f90:	0f be c0             	movsbl %al,%eax
   16f93:	83 ec 0c             	sub    $0xc,%esp
   16f96:	50                   	push   %eax
   16f97:	e8 c2 fc ff ff       	call   16c5e <output_byte>
   16f9c:	83 c4 10             	add    $0x10,%esp
	output_byte(2);										/* sector size = 512 */	// 参数:(N=2)512字节.
   16f9f:	83 ec 0c             	sub    $0xc,%esp
   16fa2:	6a 02                	push   $0x2
   16fa4:	e8 b5 fc ff ff       	call   16c5e <output_byte>
   16fa9:	83 c4 10             	add    $0x10,%esp
	output_byte(floppy->sect);							// 参数:每磁道扇区数.
   16fac:	a1 88 e4 02 00       	mov    0x2e488,%eax
   16fb1:	8b 40 04             	mov    0x4(%eax),%eax
   16fb4:	0f be c0             	movsbl %al,%eax
   16fb7:	83 ec 0c             	sub    $0xc,%esp
   16fba:	50                   	push   %eax
   16fbb:	e8 9e fc ff ff       	call   16c5e <output_byte>
   16fc0:	83 c4 10             	add    $0x10,%esp
	output_byte(floppy->gap);							// 参数:扇区间隔长度.
   16fc3:	a1 88 e4 02 00       	mov    0x2e488,%eax
   16fc8:	0f b6 40 14          	movzbl 0x14(%eax),%eax
   16fcc:	0f be c0             	movsbl %al,%eax
   16fcf:	83 ec 0c             	sub    $0xc,%esp
   16fd2:	50                   	push   %eax
   16fd3:	e8 86 fc ff ff       	call   16c5e <output_byte>
   16fd8:	83 c4 10             	add    $0x10,%esp
	output_byte(0xFF);									/* sector size (0xff when n!=0 ?) */ // 参数:当N=0时,扇区定义的字节长度,这里无用.
   16fdb:	83 ec 0c             	sub    $0xc,%esp
   16fde:	6a ff                	push   $0xffffffff
   16fe0:	e8 79 fc ff ff       	call   16c5e <output_byte>
   16fe5:	83 c4 10             	add    $0x10,%esp
	// 若上述任何一个output_byte()操作出错,则会设置复位标志reset.此时即会立刻去执行do_fd_request()中的复位处理代码.
	if (reset)
   16fe8:	a1 64 11 03 00       	mov    0x31164,%eax
   16fed:	85 c0                	test   %eax,%eax
   16fef:	74 05                	je     16ff6 <setup_rw_floppy+0xe8>
		do_fd_request();
   16ff1:	e8 03 04 00 00       	call   173f9 <do_fd_request>
}
   16ff6:	90                   	nop
   16ff7:	83 c4 0c             	add    $0xc,%esp
   16ffa:	c3                   	ret    

00016ffb <seek_interrupt>:
 */
// 寻道处理结束后中断过程中调用的C函数.
// 首先发送检测中断状态命令,获得状态信息ST0和磁头所在磁道信息.若出错则执行错误计数检测处理或取消本次软盘操作请求项.否则根据
// 状态信息设置当前磁道变量,然后调用函数setup_rw_floppy()设置DMA并输出软盘读写命令和参数.
static void seek_interrupt(void)
{
   16ffb:	83 ec 0c             	sub    $0xc,%esp
	// 首先发送检测中断状态命令,以获取寻道操作执行的结果.该命令不带参数.返回结果信息是两个字节:ST0和磁头当前磁道号.一读取FDC执行的
	// 结果信息.如果返回结果字节数不等于2,或者ST0不为寻道结束,或者磁头所在磁道(ST1)不等于设定磁道,则说明发生了错误.于是执行检测错误
	// 计数处理,然后继续执行软盘请求项或执行复位处理.
	/* sense drive status */	/* 检测驱动器状态 */
	output_byte(FD_SENSEI);
   16ffe:	83 ec 0c             	sub    $0xc,%esp
   17001:	6a 08                	push   $0x8
   17003:	e8 56 fc ff ff       	call   16c5e <output_byte>
   17008:	83 c4 10             	add    $0x10,%esp
	if (result() != 2 || (ST0 & 0xF8) != 0x20 || ST1 != seek_track) {
   1700b:	e8 cc fc ff ff       	call   16cdc <result>
   17010:	83 f8 02             	cmp    $0x2,%eax
   17013:	75 26                	jne    1703b <seek_interrupt+0x40>
   17015:	0f b6 05 6c 11 03 00 	movzbl 0x3116c,%eax
   1701c:	0f b6 c0             	movzbl %al,%eax
   1701f:	25 f8 00 00 00       	and    $0xf8,%eax
   17024:	83 f8 20             	cmp    $0x20,%eax
   17027:	75 12                	jne    1703b <seek_interrupt+0x40>
   17029:	0f b6 15 6d 11 03 00 	movzbl 0x3116d,%edx
   17030:	0f b6 05 77 11 03 00 	movzbl 0x31177,%eax
   17037:	38 c2                	cmp    %al,%dl
   17039:	74 0c                	je     17047 <seek_interrupt+0x4c>
		bad_flp_intr();
   1703b:	e8 61 fd ff ff       	call   16da1 <bad_flp_intr>
		do_fd_request();
   17040:	e8 b4 03 00 00       	call   173f9 <do_fd_request>
		return;
   17045:	eb 11                	jmp    17058 <seek_interrupt+0x5d>
	}
	// 若寻道操作成功,则继续执行当前请求项的软盘操作,即向软盘控制器发送命令和参数.
	current_track = ST1;							// 设置当前磁道.
   17047:	0f b6 05 6d 11 03 00 	movzbl 0x3116d,%eax
   1704e:	a2 8c e4 02 00       	mov    %al,0x2e48c
	setup_rw_floppy();								// 设置DMA并输出软盘操作命令和参数.
   17053:	e8 b6 fe ff ff       	call   16f0e <setup_rw_floppy>
}
   17058:	83 c4 0c             	add    $0xc,%esp
   1705b:	c3                   	ret    

0001705c <transfer>:
/*
 * 该函数是在传输操作的所有信息都正确设置好后被调用的(即软驱马达已开启并且已选择了正确的软盘(软驱).
 */
// 读写数据传输函数.
static void transfer(void)
{
   1705c:	83 ec 0c             	sub    $0xc,%esp
	// 首先检查当前驱动器参数是否就是指定驱动器的参数.若不是就发送设置驱动器参数命令及相应参数(参数1:高4位步进速率,低4位磁头卸载时间;
	// 参数2:磁头加载时间).然后判断当前数据传输速率是否与指定驱动器的一致,若不是就发送指定软驱的速率值到数据传输速率控制寄存器(FD_DCR).
	if (cur_spec1 != floppy->spec1) {				// 检测当前参数.
   1705f:	a1 88 e4 02 00       	mov    0x2e488,%eax
   17064:	0f b6 40 16          	movzbl 0x16(%eax),%eax
   17068:	0f b6 d0             	movzbl %al,%edx
   1706b:	a1 80 e4 02 00       	mov    0x2e480,%eax
   17070:	39 c2                	cmp    %eax,%edx
   17072:	74 3f                	je     170b3 <transfer+0x57>
		cur_spec1 = floppy->spec1;
   17074:	a1 88 e4 02 00       	mov    0x2e488,%eax
   17079:	0f b6 40 16          	movzbl 0x16(%eax),%eax
   1707d:	0f b6 c0             	movzbl %al,%eax
   17080:	a3 80 e4 02 00       	mov    %eax,0x2e480
		output_byte(FD_SPECIFY);					// 发送设置磁盘参数命令.
   17085:	83 ec 0c             	sub    $0xc,%esp
   17088:	6a 03                	push   $0x3
   1708a:	e8 cf fb ff ff       	call   16c5e <output_byte>
   1708f:	83 c4 10             	add    $0x10,%esp
		output_byte(cur_spec1);						/* hut etc */	// 发送参数.
   17092:	a1 80 e4 02 00       	mov    0x2e480,%eax
   17097:	0f be c0             	movsbl %al,%eax
   1709a:	83 ec 0c             	sub    $0xc,%esp
   1709d:	50                   	push   %eax
   1709e:	e8 bb fb ff ff       	call   16c5e <output_byte>
   170a3:	83 c4 10             	add    $0x10,%esp
		output_byte(6);								/* Head load time =6ms, DMA */
   170a6:	83 ec 0c             	sub    $0xc,%esp
   170a9:	6a 06                	push   $0x6
   170ab:	e8 ae fb ff ff       	call   16c5e <output_byte>
   170b0:	83 c4 10             	add    $0x10,%esp
	}
	if (cur_rate != floppy->rate)					// 检测当前速率.
   170b3:	a1 88 e4 02 00       	mov    0x2e488,%eax
   170b8:	0f b6 40 15          	movzbl 0x15(%eax),%eax
   170bc:	0f b6 d0             	movzbl %al,%edx
   170bf:	a1 84 e4 02 00       	mov    0x2e484,%eax
   170c4:	39 c2                	cmp    %eax,%edx
   170c6:	74 20                	je     170e8 <transfer+0x8c>
		outb_p(cur_rate = floppy->rate,FD_DCR);
   170c8:	a1 88 e4 02 00       	mov    0x2e488,%eax
   170cd:	0f b6 40 15          	movzbl 0x15(%eax),%eax
   170d1:	0f b6 c0             	movzbl %al,%eax
   170d4:	a3 84 e4 02 00       	mov    %eax,0x2e484
   170d9:	a1 84 e4 02 00       	mov    0x2e484,%eax
   170de:	ba f7 03 00 00       	mov    $0x3f7,%edx
   170e3:	ee                   	out    %al,(%dx)
   170e4:	eb 00                	jmp    170e6 <transfer+0x8a>
   170e6:	eb 00                	jmp    170e8 <transfer+0x8c>
	// 若上面任何一个output_byte()操作执行出错,则复位标志reset就会被置位.因此这里我们需要检测一下reset标志.若reset真的被置位了,就立刻
	// 去执行do_fd_requst()中的复位处理代码.
	if (reset) {
   170e8:	a1 64 11 03 00       	mov    0x31164,%eax
   170ed:	85 c0                	test   %eax,%eax
   170ef:	74 0a                	je     170fb <transfer+0x9f>
		do_fd_request();
   170f1:	e8 03 03 00 00       	call   173f9 <do_fd_request>
		return;
   170f6:	e9 b6 00 00 00       	jmp    171b1 <transfer+0x155>
	}
	// 如果此时寻道标志为零(即不需要寻道),则设置DMA并向软盘控制器发送相应操作命令和参数后返回.否则就执行寻道处理,于是首先置软盘中断处理
	// 调用函数为寻道中断函数.如果起始磁道号不等于零则发送磁头寻道命令和参数.所使用的参数即是第112-121行上设置的全局变量值.如果起始磁道
	// 号seek_track为0,则执行重新校正命令让磁头归零位.
	if (!seek) {
   170fb:	a1 68 11 03 00       	mov    0x31168,%eax
   17100:	85 c0                	test   %eax,%eax
   17102:	75 0a                	jne    1710e <transfer+0xb2>
		setup_rw_floppy();							// 发送命令参数块.
   17104:	e8 05 fe ff ff       	call   16f0e <setup_rw_floppy>
		return;
   17109:	e9 a3 00 00 00       	jmp    171b1 <transfer+0x155>
	}
	do_floppy = seek_interrupt;						// 寻道中断调用的C函数.
   1710e:	c7 05 54 11 03 00 fb 	movl   $0x16ffb,0x31154
   17115:	6f 01 00 
	if (seek_track) {								// 起始磁道号.
   17118:	0f b6 05 77 11 03 00 	movzbl 0x31177,%eax
   1711f:	84 c0                	test   %al,%al
   17121:	74 4c                	je     1716f <transfer+0x113>
		output_byte(FD_SEEK);						// 发送磁头寻道命令.
   17123:	83 ec 0c             	sub    $0xc,%esp
   17126:	6a 0f                	push   $0xf
   17128:	e8 31 fb ff ff       	call   16c5e <output_byte>
   1712d:	83 c4 10             	add    $0x10,%esp
		output_byte(head<<2 | current_drive);		// 发送参数:磁头号+当前软驱号.
   17130:	0f b6 05 75 11 03 00 	movzbl 0x31175,%eax
   17137:	0f b6 c0             	movzbl %al,%eax
   1713a:	c1 e0 02             	shl    $0x2,%eax
   1713d:	89 c2                	mov    %eax,%edx
   1713f:	0f b6 05 73 11 03 00 	movzbl 0x31173,%eax
   17146:	09 d0                	or     %edx,%eax
   17148:	0f be c0             	movsbl %al,%eax
   1714b:	83 ec 0c             	sub    $0xc,%esp
   1714e:	50                   	push   %eax
   1714f:	e8 0a fb ff ff       	call   16c5e <output_byte>
   17154:	83 c4 10             	add    $0x10,%esp
		output_byte(seek_track);					// 发送参数:磁道号.
   17157:	0f b6 05 77 11 03 00 	movzbl 0x31177,%eax
   1715e:	0f be c0             	movsbl %al,%eax
   17161:	83 ec 0c             	sub    $0xc,%esp
   17164:	50                   	push   %eax
   17165:	e8 f4 fa ff ff       	call   16c5e <output_byte>
   1716a:	83 c4 10             	add    $0x10,%esp
   1716d:	eb 34                	jmp    171a3 <transfer+0x147>
	} else {
		output_byte(FD_RECALIBRATE);				// 发送重新校正命令(磁头归零).
   1716f:	83 ec 0c             	sub    $0xc,%esp
   17172:	6a 07                	push   $0x7
   17174:	e8 e5 fa ff ff       	call   16c5e <output_byte>
   17179:	83 c4 10             	add    $0x10,%esp
		output_byte(head<<2 | current_drive);		// 发送参数:磁头号+当前软驱号.
   1717c:	0f b6 05 75 11 03 00 	movzbl 0x31175,%eax
   17183:	0f b6 c0             	movzbl %al,%eax
   17186:	c1 e0 02             	shl    $0x2,%eax
   17189:	89 c2                	mov    %eax,%edx
   1718b:	0f b6 05 73 11 03 00 	movzbl 0x31173,%eax
   17192:	09 d0                	or     %edx,%eax
   17194:	0f be c0             	movsbl %al,%eax
   17197:	83 ec 0c             	sub    $0xc,%esp
   1719a:	50                   	push   %eax
   1719b:	e8 be fa ff ff       	call   16c5e <output_byte>
   171a0:	83 c4 10             	add    $0x10,%esp
	}
	// 同样地,若上面任何一个output_byte()操作执行出错,则复位标志reset就会被置位.若reset真的被置位了,就立刻去执行do_fd_requet()中复位
	// 处理代码.
	if (reset)
   171a3:	a1 64 11 03 00       	mov    0x31164,%eax
   171a8:	85 c0                	test   %eax,%eax
   171aa:	74 05                	je     171b1 <transfer+0x155>
		do_fd_request();
   171ac:	e8 48 02 00 00       	call   173f9 <do_fd_request>
}
   171b1:	83 c4 0c             	add    $0xc,%esp
   171b4:	c3                   	ret    

000171b5 <recal_interrupt>:
 */
// 软驱重新校正中断调用函数.
// 首先发送检测中断状态命令(无参数),如果返回结果表明出错,则置复位标志.否则重新校正标志清零.然后再次执行软盘请求项处理函数
// 作相应操作.
static void recal_interrupt(void)
{
   171b5:	83 ec 0c             	sub    $0xc,%esp
	output_byte(FD_SENSEI);							// 发送检测中断状态命令.
   171b8:	83 ec 0c             	sub    $0xc,%esp
   171bb:	6a 08                	push   $0x8
   171bd:	e8 9c fa ff ff       	call   16c5e <output_byte>
   171c2:	83 c4 10             	add    $0x10,%esp
	if (result() != 2 || (ST0 & 0xE0) == 0x60)		// 如果返回结果字节数不等于2或命令异常结束,则置复位标志.
   171c5:	e8 12 fb ff ff       	call   16cdc <result>
   171ca:	83 f8 02             	cmp    $0x2,%eax
   171cd:	75 14                	jne    171e3 <recal_interrupt+0x2e>
   171cf:	0f b6 05 6c 11 03 00 	movzbl 0x3116c,%eax
   171d6:	0f b6 c0             	movzbl %al,%eax
   171d9:	25 e0 00 00 00       	and    $0xe0,%eax
   171de:	83 f8 60             	cmp    $0x60,%eax
   171e1:	75 0c                	jne    171ef <recal_interrupt+0x3a>
		reset = 1;
   171e3:	c7 05 64 11 03 00 01 	movl   $0x1,0x31164
   171ea:	00 00 00 
   171ed:	eb 0a                	jmp    171f9 <recal_interrupt+0x44>
	else
		recalibrate = 0;							// 否则复位重新校正标志
   171ef:	c7 05 60 11 03 00 00 	movl   $0x0,0x31160
   171f6:	00 00 00 
	do_fd_request();								// 作相应处理.
   171f9:	e8 fb 01 00 00       	call   173f9 <do_fd_request>
}
   171fe:	90                   	nop
   171ff:	83 c4 0c             	add    $0xc,%esp
   17202:	c3                   	ret    

00017203 <unexpected_floppy_interrupt>:

// 意外软盘中断请求引发的软盘中断处理程序中调用的函数.
// 首先发送检测中断状态命令(无参数),如果返回结果表明出错,则置复位标志,否则置重校正标志.
void unexpected_floppy_interrupt(void)
{
   17203:	83 ec 0c             	sub    $0xc,%esp
	output_byte(FD_SENSEI);							// 发送检测中断状态命令.
   17206:	83 ec 0c             	sub    $0xc,%esp
   17209:	6a 08                	push   $0x8
   1720b:	e8 4e fa ff ff       	call   16c5e <output_byte>
   17210:	83 c4 10             	add    $0x10,%esp
	if (result()!=2 || (ST0 & 0xE0) == 0x60)		// 如果返回结果字节数不等于2或命令异常结束,则置复位标志.
   17213:	e8 c4 fa ff ff       	call   16cdc <result>
   17218:	83 f8 02             	cmp    $0x2,%eax
   1721b:	75 14                	jne    17231 <unexpected_floppy_interrupt+0x2e>
   1721d:	0f b6 05 6c 11 03 00 	movzbl 0x3116c,%eax
   17224:	0f b6 c0             	movzbl %al,%eax
   17227:	25 e0 00 00 00       	and    $0xe0,%eax
   1722c:	83 f8 60             	cmp    $0x60,%eax
   1722f:	75 0c                	jne    1723d <unexpected_floppy_interrupt+0x3a>
		reset = 1;
   17231:	c7 05 64 11 03 00 01 	movl   $0x1,0x31164
   17238:	00 00 00 
   1723b:	eb 0a                	jmp    17247 <unexpected_floppy_interrupt+0x44>
	else
		recalibrate = 1;							// 否则置重新校正标志.
   1723d:	c7 05 60 11 03 00 01 	movl   $0x1,0x31160
   17244:	00 00 00 
}
   17247:	90                   	nop
   17248:	83 c4 0c             	add    $0xc,%esp
   1724b:	c3                   	ret    

0001724c <recalibrate_floppy>:

// 软盘重新校正处理函数.
// 向软盘控制器FDC发送重新校正命令和参数,并复位重新校正标志.当软盘控制器执行完重新校正命令就会再次引发的软盘中断调用
// recal_interrupt()函数.
static void recalibrate_floppy(void)
{
   1724c:	83 ec 0c             	sub    $0xc,%esp
	recalibrate = 0;								// 复位重新校正标志.
   1724f:	c7 05 60 11 03 00 00 	movl   $0x0,0x31160
   17256:	00 00 00 
	current_track = 0;								// 当前磁道号归零.
   17259:	c6 05 8c e4 02 00 00 	movb   $0x0,0x2e48c
	do_floppy = recal_interrupt;					// 指向重新校正中断调用的C函数.
   17260:	c7 05 54 11 03 00 b5 	movl   $0x171b5,0x31154
   17267:	71 01 00 
	output_byte(FD_RECALIBRATE);					// 命令:重新校正.
   1726a:	83 ec 0c             	sub    $0xc,%esp
   1726d:	6a 07                	push   $0x7
   1726f:	e8 ea f9 ff ff       	call   16c5e <output_byte>
   17274:	83 c4 10             	add    $0x10,%esp
	output_byte(head<<2 | current_drive);			// 参数:磁头号 + 当前驱动器号.
   17277:	0f b6 05 75 11 03 00 	movzbl 0x31175,%eax
   1727e:	0f b6 c0             	movzbl %al,%eax
   17281:	c1 e0 02             	shl    $0x2,%eax
   17284:	89 c2                	mov    %eax,%edx
   17286:	0f b6 05 73 11 03 00 	movzbl 0x31173,%eax
   1728d:	09 d0                	or     %edx,%eax
   1728f:	0f be c0             	movsbl %al,%eax
   17292:	83 ec 0c             	sub    $0xc,%esp
   17295:	50                   	push   %eax
   17296:	e8 c3 f9 ff ff       	call   16c5e <output_byte>
   1729b:	83 c4 10             	add    $0x10,%esp
	// 若上任何一个output_byte()操作执行出错,则复位标志reset就会被置位.因此这里我们需要检测一下reset标志.若reset真的被
	// 置位了,就立刻去执行do_fd_requeset()中的复位处理代码.
	if (reset)
   1729e:	a1 64 11 03 00       	mov    0x31164,%eax
   172a3:	85 c0                	test   %eax,%eax
   172a5:	74 05                	je     172ac <recalibrate_floppy+0x60>
		do_fd_request();
   172a7:	e8 4d 01 00 00       	call   173f9 <do_fd_request>
}
   172ac:	90                   	nop
   172ad:	83 c4 0c             	add    $0xc,%esp
   172b0:	c3                   	ret    

000172b1 <reset_interrupt>:
// 软盘控制器FDC复位中断调用函数.
// 该函数会在向控制器发送了复位操作命令后引发的软盘中断处理程序中被调用.
// 首先发送检测中断状态命令(无参数),然后读出返回的结果字节.接着发送设定软驱参数命令和相关参数,最后再次调用请求项处理函数
// do_fd_request()去执行重新校正工作.但由于执行output_byte()操作函数出错时复位标志又会被置位,因此也可能再次去执行复位处理.
static void reset_interrupt(void)
{
   172b1:	83 ec 0c             	sub    $0xc,%esp
	output_byte(FD_SENSEI);							// 发送检测中断状态命令.
   172b4:	83 ec 0c             	sub    $0xc,%esp
   172b7:	6a 08                	push   $0x8
   172b9:	e8 a0 f9 ff ff       	call   16c5e <output_byte>
   172be:	83 c4 10             	add    $0x10,%esp
	(void) result();								// 读取命令执行结果字节.
   172c1:	e8 16 fa ff ff       	call   16cdc <result>
	output_byte(FD_SPECIFY);						// 发送设定软驱参数命令.
   172c6:	83 ec 0c             	sub    $0xc,%esp
   172c9:	6a 03                	push   $0x3
   172cb:	e8 8e f9 ff ff       	call   16c5e <output_byte>
   172d0:	83 c4 10             	add    $0x10,%esp
	output_byte(cur_spec1);							/* hut etc */	// 发送参数
   172d3:	a1 80 e4 02 00       	mov    0x2e480,%eax
   172d8:	0f be c0             	movsbl %al,%eax
   172db:	83 ec 0c             	sub    $0xc,%esp
   172de:	50                   	push   %eax
   172df:	e8 7a f9 ff ff       	call   16c5e <output_byte>
   172e4:	83 c4 10             	add    $0x10,%esp
	output_byte(6);									/* Head load time =6ms, DMA */
   172e7:	83 ec 0c             	sub    $0xc,%esp
   172ea:	6a 06                	push   $0x6
   172ec:	e8 6d f9 ff ff       	call   16c5e <output_byte>
   172f1:	83 c4 10             	add    $0x10,%esp
	do_fd_request();                				// 调用执行软盘请求.
   172f4:	e8 00 01 00 00       	call   173f9 <do_fd_request>
}
   172f9:	90                   	nop
   172fa:	83 c4 0c             	add    $0xc,%esp
   172fd:	c3                   	ret    

000172fe <reset_floppy>:
// 复位软盘控制器.
// 该函数首先设置参数和标志,把复位标志清0,然后把软驱变量cur_spec1和cur_rate置为无效.因为复位操作后,这两个参数就需要重新设置.接着
// 需要重新校正标志,并设置FDC执行复位操作后引发的软盘中断中调用的C函数reset_interrupt().最后把DOR寄存器位2置0一会儿以对软驱执行
// 复位操作.当前数字输出寄存器DOR的位2是启动/复位软驱位.
static void reset_floppy(void)
{
   172fe:	83 ec 1c             	sub    $0x1c,%esp
	int i;

	reset = 0;										// 复位标志置0.
   17301:	c7 05 64 11 03 00 00 	movl   $0x0,0x31164
   17308:	00 00 00 
	cur_spec1 = -1;									// 使无效.
   1730b:	c7 05 80 e4 02 00 ff 	movl   $0xffffffff,0x2e480
   17312:	ff ff ff 
	cur_rate = -1;
   17315:	c7 05 84 e4 02 00 ff 	movl   $0xffffffff,0x2e484
   1731c:	ff ff ff 
	recalibrate = 1;								// 重新校正标志置位.
   1731f:	c7 05 60 11 03 00 01 	movl   $0x1,0x31160
   17326:	00 00 00 
	printk("Reset-floppy called\n\r");				// 显示执行软盘复位操作信息.
   17329:	83 ec 0c             	sub    $0xc,%esp
   1732c:	68 cf 3e 02 00       	push   $0x23ecf
   17331:	e8 11 19 ff ff       	call   8c47 <printk>
   17336:	83 c4 10             	add    $0x10,%esp
	cli();											// 关中断.
   17339:	fa                   	cli    
	do_floppy = reset_interrupt;					// 设置在中断处理程序中调用的函数.
   1733a:	c7 05 54 11 03 00 b1 	movl   $0x172b1,0x31154
   17341:	72 01 00 
	outb_p(current_DOR & ~0x04,FD_DOR);				// 对软盘控制器FDC执行复位操作.
   17344:	0f b6 05 c8 e2 02 00 	movzbl 0x2e2c8,%eax
   1734b:	0f b6 c0             	movzbl %al,%eax
   1734e:	83 e0 fb             	and    $0xfffffffb,%eax
   17351:	ba f2 03 00 00       	mov    $0x3f2,%edx
   17356:	ee                   	out    %al,(%dx)
   17357:	eb 00                	jmp    17359 <reset_floppy+0x5b>
   17359:	eb 00                	jmp    1735b <reset_floppy+0x5d>
	for (i = 0 ; i < 100 ; i++)						// 空操作,延迟.
   1735b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   17362:	00 
   17363:	eb 06                	jmp    1736b <reset_floppy+0x6d>
		__asm__("nop");
   17365:	90                   	nop
	recalibrate = 1;								// 重新校正标志置位.
	printk("Reset-floppy called\n\r");				// 显示执行软盘复位操作信息.
	cli();											// 关中断.
	do_floppy = reset_interrupt;					// 设置在中断处理程序中调用的函数.
	outb_p(current_DOR & ~0x04,FD_DOR);				// 对软盘控制器FDC执行复位操作.
	for (i = 0 ; i < 100 ; i++)						// 空操作,延迟.
   17366:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   1736b:	83 7c 24 0c 63       	cmpl   $0x63,0xc(%esp)
   17370:	7e f3                	jle    17365 <reset_floppy+0x67>
		__asm__("nop");
	outb(current_DOR,FD_DOR);						// 再启动软盘控制器.
   17372:	0f b6 05 c8 e2 02 00 	movzbl 0x2e2c8,%eax
   17379:	ba f2 03 00 00       	mov    $0x3f2,%edx
   1737e:	ee                   	out    %al,(%dx)
	sti();											// 开中断.
   1737f:	fb                   	sti    
}
   17380:	90                   	nop
   17381:	83 c4 1c             	add    $0x1c,%esp
   17384:	c3                   	ret    

00017385 <floppy_on_interrupt>:

// 软驱启动定时中断调用函数.
// 在执行一个请求项要求的操作之前,为了等待指定软驱马达旋转起来到达正常的工作转速,do_fd_request()函数为准备好的当前请求项添加了一个延时
// 定时器.本函数即是该定时器到期时调用的函数.它首先检查数字输出寄存器(DOR),使其选择当前指定的驱动.然后调用执行软盘读写传输函数transfer().
static void floppy_on_interrupt(void)
{
   17385:	83 ec 0c             	sub    $0xc,%esp
	/* We cannot do a floppy-select, as that might sleep. We just force it */
	/* 我们不能任意设置选择的软驱,因为这可能会引起进程睡眠.我们只能迫使它自己选择 */
	// 如果当前驱动器号与数字输出寄存器DOR中的不同,则需要重新设置DOR为当前驱动器.在向数字输出寄存器输出当前DOR以后,使用定时器延迟2个滴答
	// 时间,以让命令得到执行.然后调用软盘读写传输函数transfer().若当前驱动器与DOR中的相符,那么就可以直接调用软盘读写传输函数.
	selected = 1;									// 置已选定当前驱动器标志.
   17388:	c6 05 58 11 03 00 01 	movb   $0x1,0x31158
	if (current_drive != (current_DOR & 3)) {
   1738f:	0f b6 05 73 11 03 00 	movzbl 0x31173,%eax
   17396:	0f b6 c0             	movzbl %al,%eax
   17399:	0f b6 15 c8 e2 02 00 	movzbl 0x2e2c8,%edx
   173a0:	0f b6 d2             	movzbl %dl,%edx
   173a3:	83 e2 03             	and    $0x3,%edx
   173a6:	39 d0                	cmp    %edx,%eax
   173a8:	74 45                	je     173ef <floppy_on_interrupt+0x6a>
		current_DOR &= 0xFC;
   173aa:	0f b6 05 c8 e2 02 00 	movzbl 0x2e2c8,%eax
   173b1:	83 e0 fc             	and    $0xfffffffc,%eax
   173b4:	a2 c8 e2 02 00       	mov    %al,0x2e2c8
		current_DOR |= current_drive;
   173b9:	0f b6 15 c8 e2 02 00 	movzbl 0x2e2c8,%edx
   173c0:	0f b6 05 73 11 03 00 	movzbl 0x31173,%eax
   173c7:	09 d0                	or     %edx,%eax
   173c9:	a2 c8 e2 02 00       	mov    %al,0x2e2c8
		outb(current_DOR,FD_DOR);					// 向数字输出寄存器输出当前DOR.
   173ce:	0f b6 05 c8 e2 02 00 	movzbl 0x2e2c8,%eax
   173d5:	ba f2 03 00 00       	mov    $0x3f2,%edx
   173da:	ee                   	out    %al,(%dx)
		add_timer(2,&transfer);						// 添加定时器并执行传输函数.
   173db:	83 ec 08             	sub    $0x8,%esp
   173de:	68 5c 70 01 00       	push   $0x1705c
   173e3:	6a 02                	push   $0x2
   173e5:	e8 c8 ff fe ff       	call   73b2 <add_timer>
   173ea:	83 c4 10             	add    $0x10,%esp
	} else
		transfer();									// 执行软盘读写传输函数.
}
   173ed:	eb 05                	jmp    173f4 <floppy_on_interrupt+0x6f>
		current_DOR &= 0xFC;
		current_DOR |= current_drive;
		outb(current_DOR,FD_DOR);					// 向数字输出寄存器输出当前DOR.
		add_timer(2,&transfer);						// 添加定时器并执行传输函数.
	} else
		transfer();									// 执行软盘读写传输函数.
   173ef:	e8 68 fc ff ff       	call   1705c <transfer>
}
   173f4:	90                   	nop
   173f5:	83 c4 0c             	add    $0xc,%esp
   173f8:	c3                   	ret    

000173f9 <do_fd_request>:

// 软盘读写请求项处理函数
// 该函数是软盘驱动程序中最主要的函数.主要作用是:1处理有复位标志或重新校正标志置位情况;2利用请求项中的设备号计算取得请求项指定软驱的
// 参数块;3利用内核定时器启动软盘读/写操作.
void do_fd_request(void)
{
   173f9:	83 ec 1c             	sub    $0x1c,%esp
	unsigned int block;

	// 首先检查是否有复位标志或重校正标志置位,若有则本函数仅执行相关标志的处理功能后就返回.如果复位标志已置位,则执行软盘复位操作并返回.
	// 如果重新校正标志已置位,则执行软盘重新校正操作并返回.
	seek = 0;										// 清寻道标志.
   173fc:	c7 05 68 11 03 00 00 	movl   $0x0,0x31168
   17403:	00 00 00 
	if (reset) {									// 复位标志已置位.
   17406:	a1 64 11 03 00       	mov    0x31164,%eax
   1740b:	85 c0                	test   %eax,%eax
   1740d:	74 0a                	je     17419 <do_fd_request+0x20>
		reset_floppy();
   1740f:	e8 ea fe ff ff       	call   172fe <reset_floppy>
		return;
   17414:	e9 06 02 00 00       	jmp    1761f <do_fd_request+0x226>
	}
	if (recalibrate) {								// 重新校正标志已置位.
   17419:	a1 60 11 03 00       	mov    0x31160,%eax
   1741e:	85 c0                	test   %eax,%eax
   17420:	74 0a                	je     1742c <do_fd_request+0x33>
		recalibrate_floppy();
   17422:	e8 25 fe ff ff       	call   1724c <recalibrate_floppy>
		return;
   17427:	e9 f3 01 00 00       	jmp    1761f <do_fd_request+0x226>
	}
	// 本函数的真正功能从这里开始.首先利用blk.h文件中的INIT_REQUEST宏来检测请求项的合法性,如果已没有请求项则退出.然后利用请求项中的设备
	// 号取得请求项指定软驱的参数块.这个参数块将在下面用于设置软盘操作使用的全局变量参数块.请求项设备号中的软盘类型(MINOR(CURRENT->dev)>>2)
	// 被用作磁盘类型数组floppy_type[]的索引值来取得指定软驱的参数块.
	INIT_REQUEST;
   1742c:	a1 14 11 03 00       	mov    0x31114,%eax
   17431:	85 c0                	test   %eax,%eax
   17433:	75 0f                	jne    17444 <do_fd_request+0x4b>
   17435:	c7 05 54 11 03 00 00 	movl   $0x0,0x31154
   1743c:	00 00 00 
   1743f:	e9 db 01 00 00       	jmp    1761f <do_fd_request+0x226>
   17444:	a1 14 11 03 00       	mov    0x31114,%eax
   17449:	8b 00                	mov    (%eax),%eax
   1744b:	c1 e8 08             	shr    $0x8,%eax
   1744e:	83 f8 02             	cmp    $0x2,%eax
   17451:	74 10                	je     17463 <do_fd_request+0x6a>
   17453:	83 ec 0c             	sub    $0xc,%esp
   17456:	68 e8 3e 02 00       	push   $0x23ee8
   1745b:	e8 a8 17 ff ff       	call   8c08 <panic>
   17460:	83 c4 10             	add    $0x10,%esp
   17463:	a1 14 11 03 00       	mov    0x31114,%eax
   17468:	8b 40 1c             	mov    0x1c(%eax),%eax
   1746b:	85 c0                	test   %eax,%eax
   1746d:	74 20                	je     1748f <do_fd_request+0x96>
   1746f:	a1 14 11 03 00       	mov    0x31114,%eax
   17474:	8b 40 1c             	mov    0x1c(%eax),%eax
   17477:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   1747b:	84 c0                	test   %al,%al
   1747d:	75 10                	jne    1748f <do_fd_request+0x96>
   1747f:	83 ec 0c             	sub    $0xc,%esp
   17482:	68 07 3f 02 00       	push   $0x23f07
   17487:	e8 7c 17 ff ff       	call   8c08 <panic>
   1748c:	83 c4 10             	add    $0x10,%esp
	floppy = (MINOR(CURRENT->dev) >> 2) + floppy_type;
   1748f:	a1 14 11 03 00       	mov    0x31114,%eax
   17494:	8b 00                	mov    (%eax),%eax
   17496:	0f b6 c0             	movzbl %al,%eax
   17499:	c1 f8 02             	sar    $0x2,%eax
   1749c:	89 c2                	mov    %eax,%edx
   1749e:	89 d0                	mov    %edx,%eax
   174a0:	01 c0                	add    %eax,%eax
   174a2:	01 d0                	add    %edx,%eax
   174a4:	c1 e0 03             	shl    $0x3,%eax
   174a7:	05 c0 e3 02 00       	add    $0x2e3c0,%eax
   174ac:	a3 88 e4 02 00       	mov    %eax,0x2e488
	// 下面开始设置全局变量值.如果当前驱动器号current_drive不是请求项中指定的驱动器号,则置标志seek,表示在执行读/写操作之前需要先让驱动
	// 器执行寻道处理.然后把当前驱动器号设置为请求项中指定的驱动器号.
	if (current_drive != CURRENT_DEV)				// CURRENT_DEV是请求项中指定的软驱号.
   174b1:	0f b6 05 73 11 03 00 	movzbl 0x31173,%eax
   174b8:	0f b6 d0             	movzbl %al,%edx
   174bb:	a1 14 11 03 00       	mov    0x31114,%eax
   174c0:	8b 00                	mov    (%eax),%eax
   174c2:	83 e0 03             	and    $0x3,%eax
   174c5:	39 c2                	cmp    %eax,%edx
   174c7:	74 0a                	je     174d3 <do_fd_request+0xda>
		seek = 1;
   174c9:	c7 05 68 11 03 00 01 	movl   $0x1,0x31168
   174d0:	00 00 00 
	current_drive = CURRENT_DEV;
   174d3:	a1 14 11 03 00       	mov    0x31114,%eax
   174d8:	8b 00                	mov    (%eax),%eax
   174da:	83 e0 03             	and    $0x3,%eax
   174dd:	a2 73 11 03 00       	mov    %al,0x31173
	// 设置读写起始扇区block.因为每次读写是以块为单位(1块为2个扇区),所以起始扇区需要起码比磁盘总扇区数小2个扇区.否则说明这个请求 参数无效,
	// 结束该次软盘请求项去执行下一个请求项.
	block = CURRENT->sector;						// 取当前软盘请求项中起始扇区号.
   174e2:	a1 14 11 03 00       	mov    0x31114,%eax
   174e7:	8b 40 0c             	mov    0xc(%eax),%eax
   174ea:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if (block + 2 > floppy->size) {					// 如果block + 2大于磁盘扇区总数,则结束本人软盘请求项.
   174ee:	8b 44 24 0c          	mov    0xc(%esp),%eax
   174f2:	8d 50 02             	lea    0x2(%eax),%edx
   174f5:	a1 88 e4 02 00       	mov    0x2e488,%eax
   174fa:	8b 00                	mov    (%eax),%eax
   174fc:	39 c2                	cmp    %eax,%edx
   174fe:	76 12                	jbe    17512 <do_fd_request+0x119>
		end_request(0);
   17500:	83 ec 0c             	sub    $0xc,%esp
   17503:	6a 00                	push   $0x0
   17505:	e8 e7 f4 ff ff       	call   169f1 <end_request>
   1750a:	83 c4 10             	add    $0x10,%esp
		goto repeat;
   1750d:	e9 1a ff ff ff       	jmp    1742c <do_fd_request+0x33>
	}
	// 再求对应在磁道上的扇区号,磁头号,磁道号,搜寻磁道号(对于软驱读不同格式的盘).
	sector = block % floppy->sect;					// 起始扇区对每磁道扇区数取模,得磁道上扇区号.
   17512:	a1 88 e4 02 00       	mov    0x2e488,%eax
   17517:	8b 48 04             	mov    0x4(%eax),%ecx
   1751a:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1751e:	ba 00 00 00 00       	mov    $0x0,%edx
   17523:	f7 f1                	div    %ecx
   17525:	89 d0                	mov    %edx,%eax
   17527:	a2 74 11 03 00       	mov    %al,0x31174
	block /= floppy->sect;							// 起始扇区对每磁道扇区数取整,得起始磁道数.
   1752c:	a1 88 e4 02 00       	mov    0x2e488,%eax
   17531:	8b 48 04             	mov    0x4(%eax),%ecx
   17534:	8b 44 24 0c          	mov    0xc(%esp),%eax
   17538:	ba 00 00 00 00       	mov    $0x0,%edx
   1753d:	f7 f1                	div    %ecx
   1753f:	89 44 24 0c          	mov    %eax,0xc(%esp)
	head = block % floppy->head;					// 起始磁道数对磁头数取模,得操作的磁头号.
   17543:	a1 88 e4 02 00       	mov    0x2e488,%eax
   17548:	8b 48 08             	mov    0x8(%eax),%ecx
   1754b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1754f:	ba 00 00 00 00       	mov    $0x0,%edx
   17554:	f7 f1                	div    %ecx
   17556:	89 d0                	mov    %edx,%eax
   17558:	a2 75 11 03 00       	mov    %al,0x31175
	track = block / floppy->head;					// 起始磁道数对磁头数取整,得操作的磁道号.
   1755d:	a1 88 e4 02 00       	mov    0x2e488,%eax
   17562:	8b 48 08             	mov    0x8(%eax),%ecx
   17565:	8b 44 24 0c          	mov    0xc(%esp),%eax
   17569:	ba 00 00 00 00       	mov    $0x0,%edx
   1756e:	f7 f1                	div    %ecx
   17570:	a2 76 11 03 00       	mov    %al,0x31176
	seek_track = track << floppy->stretch;			// 相应于软驱中盘类型进行调整,得寻道号.
   17575:	0f b6 05 76 11 03 00 	movzbl 0x31176,%eax
   1757c:	0f b6 d0             	movzbl %al,%edx
   1757f:	a1 88 e4 02 00       	mov    0x2e488,%eax
   17584:	8b 40 10             	mov    0x10(%eax),%eax
   17587:	89 c1                	mov    %eax,%ecx
   17589:	d3 e2                	shl    %cl,%edx
   1758b:	89 d0                	mov    %edx,%eax
   1758d:	a2 77 11 03 00       	mov    %al,0x31177
	// 再看看是否还需要首先执行寻道操作.如果寻道号与当前磁头所在磁道号不同,则需要进行寻道操作,于是置需要寻道标志seek.最后我们设置执行的软盘
	// 命令command.
	if (seek_track != current_track)
   17592:	0f b6 15 77 11 03 00 	movzbl 0x31177,%edx
   17599:	0f b6 05 8c e4 02 00 	movzbl 0x2e48c,%eax
   175a0:	38 c2                	cmp    %al,%dl
   175a2:	74 0a                	je     175ae <do_fd_request+0x1b5>
		seek = 1;
   175a4:	c7 05 68 11 03 00 01 	movl   $0x1,0x31168
   175ab:	00 00 00 
	sector++;										// 磁盘上实际扇区计数是从1算起.
   175ae:	0f b6 05 74 11 03 00 	movzbl 0x31174,%eax
   175b5:	83 c0 01             	add    $0x1,%eax
   175b8:	a2 74 11 03 00       	mov    %al,0x31174
	if (CURRENT->cmd == READ)						// 如果请求项是读操作,则置读命令码.
   175bd:	a1 14 11 03 00       	mov    0x31114,%eax
   175c2:	8b 40 04             	mov    0x4(%eax),%eax
   175c5:	85 c0                	test   %eax,%eax
   175c7:	75 09                	jne    175d2 <do_fd_request+0x1d9>
		command = FD_READ;
   175c9:	c6 05 78 11 03 00 e6 	movb   $0xe6,0x31178
   175d0:	eb 26                	jmp    175f8 <do_fd_request+0x1ff>
	else if (CURRENT->cmd == WRITE)					// 如果请求项是写操作,则置写命令码.
   175d2:	a1 14 11 03 00       	mov    0x31114,%eax
   175d7:	8b 40 04             	mov    0x4(%eax),%eax
   175da:	83 f8 01             	cmp    $0x1,%eax
   175dd:	75 09                	jne    175e8 <do_fd_request+0x1ef>
		command = FD_WRITE;
   175df:	c6 05 78 11 03 00 c5 	movb   $0xc5,0x31178
   175e6:	eb 10                	jmp    175f8 <do_fd_request+0x1ff>
	else
		panic("do_fd_request: unknown command");
   175e8:	83 ec 0c             	sub    $0xc,%esp
   175eb:	68 20 3f 02 00       	push   $0x23f20
   175f0:	e8 13 16 ff ff       	call   8c08 <panic>
   175f5:	83 c4 10             	add    $0x10,%esp
	// 在上面设置好所有全局变量值之后,我们可以开始执行请求项操作了.该操作利用定时器来启动.因为为了能对软驱进行读写操作,需要首先启动驱动器马达
	// 并达到正常运转速度.而这需要一定的时间.因此这里利用ticks_to_floppy_on()来计算启动延时时间,然后使用该延时设定一个定时器.当时间到时就调用
	// 函数floppy_on_interrupt().
	add_timer(ticks_to_floppy_on(current_drive), &floppy_on_interrupt);
   175f8:	0f b6 05 73 11 03 00 	movzbl 0x31173,%eax
   175ff:	0f b6 c0             	movzbl %al,%eax
   17602:	83 ec 0c             	sub    $0xc,%esp
   17605:	50                   	push   %eax
   17606:	e8 a3 fb fe ff       	call   71ae <ticks_to_floppy_on>
   1760b:	83 c4 10             	add    $0x10,%esp
   1760e:	83 ec 08             	sub    $0x8,%esp
   17611:	68 85 73 01 00       	push   $0x17385
   17616:	50                   	push   %eax
   17617:	e8 96 fd fe ff       	call   73b2 <add_timer>
   1761c:	83 c4 10             	add    $0x10,%esp
}
   1761f:	83 c4 1c             	add    $0x1c,%esp
   17622:	c3                   	ret    

00017623 <floppy_init>:

// 软盘系统初始化.
// 设置软盘块设备请求项的处理函数do_fd_request(),并设置软盘中断门(int 0x26,对应硬件中断请求信号IRQ6).然后取消对该中断信号的屏蔽,以
// 允许软盘控制器FDC发送中断请求信号.中断描述符表IDT中陷阱门描述符设置宏set_trap_gate()定义在头文件include/asm/system.h中.
void floppy_init(void)
{
   17623:	53                   	push   %ebx
   17624:	83 ec 10             	sub    $0x10,%esp
	// 设置软盘中断门描述符。floppy_interrup(kernel/sys_call.s)是其中断处理过程。
	blk_size[MAJOR_NR] = floppy_sizes;
   17627:	c7 05 40 11 03 00 a0 	movl   $0x2e4a0,0x31140
   1762e:	e4 02 00 
	blk_dev[MAJOR_NR].request_fn = DEVICE_REQUEST;  						// = do_fd_request()。
   17631:	c7 05 10 11 03 00 f9 	movl   $0x173f9,0x31110
   17638:	73 01 00 
	set_trap_gate(0x26, &floppy_interrupt);          						// 设置陷阱门描述符。
   1763b:	b9 e8 55 00 00       	mov    $0x55e8,%ecx
   17640:	bb ec 55 00 00       	mov    $0x55ec,%ebx
   17645:	ba c6 7a 00 00       	mov    $0x7ac6,%edx
   1764a:	b8 00 00 08 00       	mov    $0x80000,%eax
   1764f:	66 89 d0             	mov    %dx,%ax
   17652:	66 ba 00 8f          	mov    $0x8f00,%dx
   17656:	89 01                	mov    %eax,(%ecx)
   17658:	89 13                	mov    %edx,(%ebx)
	outb(inb_p(0x21) & ~0x40, 0x21);                   						// 复位软盘中断请求屏蔽位。
   1765a:	b8 21 00 00 00       	mov    $0x21,%eax
   1765f:	89 c2                	mov    %eax,%edx
   17661:	ec                   	in     (%dx),%al
   17662:	eb 00                	jmp    17664 <floppy_init+0x41>
   17664:	eb 00                	jmp    17666 <floppy_init+0x43>
   17666:	88 44 24 0f          	mov    %al,0xf(%esp)
   1766a:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   1766f:	0f b6 c0             	movzbl %al,%eax
   17672:	83 e0 bf             	and    $0xffffffbf,%eax
   17675:	ba 21 00 00 00       	mov    $0x21,%edx
   1767a:	ee                   	out    %al,(%dx)
}
   1767b:	90                   	nop
   1767c:	83 c4 10             	add    $0x10,%esp
   1767f:	5b                   	pop    %ebx
   17680:	c3                   	ret    

00017681 <unlock_buffer>:
static void (DEVICE_REQUEST)(void);

// 解锁指定的缓冲块.
// 如果指定缓冲块bh并没有被上锁,则显示警告信息.否则将该缓冲块解锁,并唤醒等待该缓冲块的进程.此为内嵌函数.参数是缓冲块头指针.
static inline void unlock_buffer(struct buffer_head * bh)
{
   17681:	83 ec 0c             	sub    $0xc,%esp
	if (!bh->b_lock)
   17684:	8b 44 24 10          	mov    0x10(%esp),%eax
   17688:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   1768c:	84 c0                	test   %al,%al
   1768e:	75 10                	jne    176a0 <unlock_buffer+0x1f>
		printk(DEVICE_NAME ": free buffer being unlocked\n");
   17690:	83 ec 0c             	sub    $0xc,%esp
   17693:	68 40 3f 02 00       	push   $0x23f40
   17698:	e8 aa 15 ff ff       	call   8c47 <printk>
   1769d:	83 c4 10             	add    $0x10,%esp
	bh->b_lock = 0;
   176a0:	8b 44 24 10          	mov    0x10(%esp),%eax
   176a4:	c6 40 0d 00          	movb   $0x0,0xd(%eax)
	wake_up(&bh->b_wait);
   176a8:	8b 44 24 10          	mov    0x10(%esp),%eax
   176ac:	83 c0 10             	add    $0x10,%eax
   176af:	83 ec 0c             	sub    $0xc,%esp
   176b2:	50                   	push   %eax
   176b3:	e8 97 fa fe ff       	call   714f <wake_up>
   176b8:	83 c4 10             	add    $0x10,%esp
}
   176bb:	90                   	nop
   176bc:	83 c4 0c             	add    $0xc,%esp
   176bf:	c3                   	ret    

000176c0 <end_request>:
// 参数uptodate是更新标志.
// 首先关闭指定块设备,然后检查此次读写缓冲区是否有效.如果有效则根据参数值设置缓冲区数据更新标志,并解锁该缓冲区.如果更新标志参数值是0,
// 表示此次请求项的操作失败,因此显示相关块设备IO错误信息.最后,唤醒等待该请求项的进程以及等待空闲请求项出现的进程,释放并从请求链表
// 中删除本请求项,并把当前请求项指针指向下一请求项.
static inline void end_request(int uptodate)
{
   176c0:	83 ec 0c             	sub    $0xc,%esp
	DEVICE_OFF(CURRENT->dev);							// 关闭设备
	if (CURRENT->bh) {									// CURRENT为当前请求结构项指针
   176c3:	a1 1c 11 03 00       	mov    0x3111c,%eax
   176c8:	8b 40 1c             	mov    0x1c(%eax),%eax
   176cb:	85 c0                	test   %eax,%eax
   176cd:	74 23                	je     176f2 <end_request+0x32>
		CURRENT->bh->b_uptodate = uptodate;				// 置更新标志.
   176cf:	a1 1c 11 03 00       	mov    0x3111c,%eax
   176d4:	8b 40 1c             	mov    0x1c(%eax),%eax
   176d7:	8b 54 24 10          	mov    0x10(%esp),%edx
   176db:	88 50 0a             	mov    %dl,0xa(%eax)
		unlock_buffer(CURRENT->bh);						// 解锁缓冲区.
   176de:	a1 1c 11 03 00       	mov    0x3111c,%eax
   176e3:	8b 40 1c             	mov    0x1c(%eax),%eax
   176e6:	83 ec 0c             	sub    $0xc,%esp
   176e9:	50                   	push   %eax
   176ea:	e8 92 ff ff ff       	call   17681 <unlock_buffer>
   176ef:	83 c4 10             	add    $0x10,%esp
	}
	if (!uptodate) {									// 若更新标志为0则显示出错信息.
   176f2:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   176f7:	75 34                	jne    1772d <end_request+0x6d>
		printk(DEVICE_NAME " I/O error\n\r");
   176f9:	83 ec 0c             	sub    $0xc,%esp
   176fc:	68 66 3f 02 00       	push   $0x23f66
   17701:	e8 41 15 ff ff       	call   8c47 <printk>
   17706:	83 c4 10             	add    $0x10,%esp
		printk("dev %04x, block %d\n\r",CURRENT->dev,
			CURRENT->bh->b_blocknr);
   17709:	a1 1c 11 03 00       	mov    0x3111c,%eax
   1770e:	8b 40 1c             	mov    0x1c(%eax),%eax
		CURRENT->bh->b_uptodate = uptodate;				// 置更新标志.
		unlock_buffer(CURRENT->bh);						// 解锁缓冲区.
	}
	if (!uptodate) {									// 若更新标志为0则显示出错信息.
		printk(DEVICE_NAME " I/O error\n\r");
		printk("dev %04x, block %d\n\r",CURRENT->dev,
   17711:	8b 50 04             	mov    0x4(%eax),%edx
   17714:	a1 1c 11 03 00       	mov    0x3111c,%eax
   17719:	8b 00                	mov    (%eax),%eax
   1771b:	83 ec 04             	sub    $0x4,%esp
   1771e:	52                   	push   %edx
   1771f:	50                   	push   %eax
   17720:	68 7b 3f 02 00       	push   $0x23f7b
   17725:	e8 1d 15 ff ff       	call   8c47 <printk>
   1772a:	83 c4 10             	add    $0x10,%esp
			CURRENT->bh->b_blocknr);
	}
	wake_up(&CURRENT->waiting);							// 唤醒等待该请求项的进程.
   1772d:	a1 1c 11 03 00       	mov    0x3111c,%eax
   17732:	83 c0 18             	add    $0x18,%eax
   17735:	83 ec 0c             	sub    $0xc,%esp
   17738:	50                   	push   %eax
   17739:	e8 11 fa fe ff       	call   714f <wake_up>
   1773e:	83 c4 10             	add    $0x10,%esp
	wake_up(&wait_for_request);							// 唤醒等待空闲请求项的进程.
   17741:	83 ec 0c             	sub    $0xc,%esp
   17744:	68 e0 10 03 00       	push   $0x310e0
   17749:	e8 01 fa fe ff       	call   714f <wake_up>
   1774e:	83 c4 10             	add    $0x10,%esp
	CURRENT->dev = -1;									// 释放该请求项.
   17751:	a1 1c 11 03 00       	mov    0x3111c,%eax
   17756:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
	CURRENT = CURRENT->next;							// 指向下一请求项.
   1775c:	a1 1c 11 03 00       	mov    0x3111c,%eax
   17761:	8b 40 20             	mov    0x20(%eax),%eax
   17764:	a3 1c 11 03 00       	mov    %eax,0x3111c
}
   17769:	90                   	nop
   1776a:	83 c4 0c             	add    $0xc,%esp
   1776d:	c3                   	ret    

0001776e <sys_setup>:
// 系统设备函数.
// 函数参数BIOS是由初始化程序init/main.c中init子程序设置为指向硬盘参数表结构的指针.
// 该硬盘参数表结构包含2个硬盘参数表的(共32字节),是从内存0x90080处复制而来.0x90080处的硬盘参数表是由setup.s程序利用ROM BIOS
// 功能取得.本函数主要功能是读取CMOS和硬盘参数表信息,用于设置硬盘分区结构hd,并尝试加载RAM虚拟盘和根文件系统.
int sys_setup(void * BIOS)
{
   1776e:	56                   	push   %esi
   1776f:	53                   	push   %ebx
   17770:	83 ec 24             	sub    $0x24,%esp
	struct buffer_head * bh;

	// 首先设置callable标志,使得本函数只能被调用1次.然后设置硬盘信息数据组hd_info[].如果在include/linux/config.h文件已定义了符号
	// 常数HD_TYPE,那么hd_info[]数组已经在前面第49行上设置好了.否则就需要读取boot/setup.s程序存放在内存0x90080处开始的硬盘参数表.
	// setup.s程序在内存此处连续存放着一到两个硬盘参数表.
	if (!callable)
   17773:	a1 20 e5 02 00       	mov    0x2e520,%eax
   17778:	85 c0                	test   %eax,%eax
   1777a:	75 0a                	jne    17786 <sys_setup+0x18>
		return -1;
   1777c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17781:	e9 a4 04 00 00       	jmp    17c2a <sys_setup+0x4bc>
	callable = 0;
   17786:	c7 05 20 e5 02 00 00 	movl   $0x0,0x2e520
   1778d:	00 00 00 
#ifndef HD_TYPE																	// 如果没有定义HD_TYPE,则读取.
	for (drive = 0 ; drive < 2 ; drive++) {
   17790:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   17797:	00 
   17798:	e9 cd 00 00 00       	jmp    1786a <sys_setup+0xfc>
		hd_info[drive].cyl = *(unsigned short *) BIOS;							// 柱面数
   1779d:	8b 44 24 30          	mov    0x30(%esp),%eax
   177a1:	0f b7 00             	movzwl (%eax),%eax
   177a4:	0f b7 c8             	movzwl %ax,%ecx
   177a7:	8b 54 24 18          	mov    0x18(%esp),%edx
   177ab:	89 d0                	mov    %edx,%eax
   177ad:	01 c0                	add    %eax,%eax
   177af:	01 d0                	add    %edx,%eax
   177b1:	c1 e0 03             	shl    $0x3,%eax
   177b4:	05 a8 11 03 00       	add    $0x311a8,%eax
   177b9:	89 08                	mov    %ecx,(%eax)
		hd_info[drive].head = *(unsigned char *) (2 + BIOS);					// 磁头数
   177bb:	8b 44 24 30          	mov    0x30(%esp),%eax
   177bf:	83 c0 02             	add    $0x2,%eax
   177c2:	0f b6 00             	movzbl (%eax),%eax
   177c5:	0f b6 c8             	movzbl %al,%ecx
   177c8:	8b 54 24 18          	mov    0x18(%esp),%edx
   177cc:	89 d0                	mov    %edx,%eax
   177ce:	01 c0                	add    %eax,%eax
   177d0:	01 d0                	add    %edx,%eax
   177d2:	c1 e0 03             	shl    $0x3,%eax
   177d5:	05 a0 11 03 00       	add    $0x311a0,%eax
   177da:	89 08                	mov    %ecx,(%eax)
		hd_info[drive].wpcom = *(unsigned short *) (5 + BIOS);					// 写前预补偿柱面号
   177dc:	8b 44 24 30          	mov    0x30(%esp),%eax
   177e0:	83 c0 05             	add    $0x5,%eax
   177e3:	0f b7 00             	movzwl (%eax),%eax
   177e6:	0f b7 c8             	movzwl %ax,%ecx
   177e9:	8b 54 24 18          	mov    0x18(%esp),%edx
   177ed:	89 d0                	mov    %edx,%eax
   177ef:	01 c0                	add    %eax,%eax
   177f1:	01 d0                	add    %edx,%eax
   177f3:	c1 e0 03             	shl    $0x3,%eax
   177f6:	05 ac 11 03 00       	add    $0x311ac,%eax
   177fb:	89 08                	mov    %ecx,(%eax)
		hd_info[drive].ctl = *(unsigned char *) (8 + BIOS);						// 控制字节
   177fd:	8b 44 24 30          	mov    0x30(%esp),%eax
   17801:	83 c0 08             	add    $0x8,%eax
   17804:	0f b6 00             	movzbl (%eax),%eax
   17807:	0f b6 c8             	movzbl %al,%ecx
   1780a:	8b 54 24 18          	mov    0x18(%esp),%edx
   1780e:	89 d0                	mov    %edx,%eax
   17810:	01 c0                	add    %eax,%eax
   17812:	01 d0                	add    %edx,%eax
   17814:	c1 e0 03             	shl    $0x3,%eax
   17817:	05 b4 11 03 00       	add    $0x311b4,%eax
   1781c:	89 08                	mov    %ecx,(%eax)
		hd_info[drive].lzone = *(unsigned short *) (12 + BIOS);					// 磁头着陆区柱面号
   1781e:	8b 44 24 30          	mov    0x30(%esp),%eax
   17822:	83 c0 0c             	add    $0xc,%eax
   17825:	0f b7 00             	movzwl (%eax),%eax
   17828:	0f b7 c8             	movzwl %ax,%ecx
   1782b:	8b 54 24 18          	mov    0x18(%esp),%edx
   1782f:	89 d0                	mov    %edx,%eax
   17831:	01 c0                	add    %eax,%eax
   17833:	01 d0                	add    %edx,%eax
   17835:	c1 e0 03             	shl    $0x3,%eax
   17838:	05 b0 11 03 00       	add    $0x311b0,%eax
   1783d:	89 08                	mov    %ecx,(%eax)
		hd_info[drive].sect = *(unsigned char *) (14 + BIOS);					// 每磁道扇区数
   1783f:	8b 44 24 30          	mov    0x30(%esp),%eax
   17843:	83 c0 0e             	add    $0xe,%eax
   17846:	0f b6 00             	movzbl (%eax),%eax
   17849:	0f b6 c8             	movzbl %al,%ecx
   1784c:	8b 54 24 18          	mov    0x18(%esp),%edx
   17850:	89 d0                	mov    %edx,%eax
   17852:	01 c0                	add    %eax,%eax
   17854:	01 d0                	add    %edx,%eax
   17856:	c1 e0 03             	shl    $0x3,%eax
   17859:	05 a4 11 03 00       	add    $0x311a4,%eax
   1785e:	89 08                	mov    %ecx,(%eax)
		BIOS += 16;																// 每个硬盘参数表长16字节,这里BIOS指向下一表.
   17860:	83 44 24 30 10       	addl   $0x10,0x30(%esp)
	// setup.s程序在内存此处连续存放着一到两个硬盘参数表.
	if (!callable)
		return -1;
	callable = 0;
#ifndef HD_TYPE																	// 如果没有定义HD_TYPE,则读取.
	for (drive = 0 ; drive < 2 ; drive++) {
   17865:	83 44 24 18 01       	addl   $0x1,0x18(%esp)
   1786a:	83 7c 24 18 01       	cmpl   $0x1,0x18(%esp)
   1786f:	0f 8e 28 ff ff ff    	jle    1779d <sys_setup+0x2f>
		hd_info[drive].sect = *(unsigned char *) (14 + BIOS);					// 每磁道扇区数
		BIOS += 16;																// 每个硬盘参数表长16字节,这里BIOS指向下一表.
	}
	// setup.s程序在取BIOS硬盘参数表信息时,如果系统中只有1个硬盘,就会将对应第2硬盘的16字节全部清零.因此这里只要判断第2个硬盘柱面数是否为0
	// 就可以知道是否有第2个硬盘了.
	if (hd_info[1].cyl)
   17875:	a1 c0 11 03 00       	mov    0x311c0,%eax
   1787a:	85 c0                	test   %eax,%eax
   1787c:	74 0c                	je     1788a <sys_setup+0x11c>
		NR_HD = 2;																// 硬盘数置为2.
   1787e:	c7 05 d8 11 03 00 02 	movl   $0x2,0x311d8
   17885:	00 00 00 
   17888:	eb 0a                	jmp    17894 <sys_setup+0x126>
	else
		NR_HD = 1;
   1788a:	c7 05 d8 11 03 00 01 	movl   $0x1,0x311d8
   17891:	00 00 00 
#endif
	// 到这里,硬盘信息数组hd_info[]已经设置好,并且确定了系统含有的硬盘数NR_HD.现在开始设置硬盘 结构数组hd[].该数组的项0和项5分别表示两个
	// 硬盘的整体参数,而项1-4和6-9分别表示两个硬盘的4个分区参数.因此这里仅设置硬盘整体信息的两项(项0和5).
	for (i = 0 ; i < NR_HD ; i++) {
   17894:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   1789b:	00 
   1789c:	eb 70                	jmp    1790e <sys_setup+0x1a0>
		hd[i * 5].start_sect = 0;												// 硬盘起始扇区号
   1789e:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   178a2:	89 d0                	mov    %edx,%eax
   178a4:	c1 e0 02             	shl    $0x2,%eax
   178a7:	01 d0                	add    %edx,%eax
   178a9:	c7 04 c5 e0 11 03 00 	movl   $0x0,0x311e0(,%eax,8)
   178b0:	00 00 00 00 
		hd[i * 5].nr_sects = hd_info[i].head * hd_info[i].sect * hd_info[i].cyl;// 硬盘总扇区数
   178b4:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   178b8:	89 d0                	mov    %edx,%eax
   178ba:	c1 e0 02             	shl    $0x2,%eax
   178bd:	8d 0c 10             	lea    (%eax,%edx,1),%ecx
   178c0:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   178c4:	89 d0                	mov    %edx,%eax
   178c6:	01 c0                	add    %eax,%eax
   178c8:	01 d0                	add    %edx,%eax
   178ca:	c1 e0 03             	shl    $0x3,%eax
   178cd:	05 a0 11 03 00       	add    $0x311a0,%eax
   178d2:	8b 18                	mov    (%eax),%ebx
   178d4:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   178d8:	89 d0                	mov    %edx,%eax
   178da:	01 c0                	add    %eax,%eax
   178dc:	01 d0                	add    %edx,%eax
   178de:	c1 e0 03             	shl    $0x3,%eax
   178e1:	05 a4 11 03 00       	add    $0x311a4,%eax
   178e6:	8b 00                	mov    (%eax),%eax
   178e8:	0f af d8             	imul   %eax,%ebx
   178eb:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   178ef:	89 d0                	mov    %edx,%eax
   178f1:	01 c0                	add    %eax,%eax
   178f3:	01 d0                	add    %edx,%eax
   178f5:	c1 e0 03             	shl    $0x3,%eax
   178f8:	05 a8 11 03 00       	add    $0x311a8,%eax
   178fd:	8b 00                	mov    (%eax),%eax
   178ff:	0f af c3             	imul   %ebx,%eax
   17902:	89 04 cd e4 11 03 00 	mov    %eax,0x311e4(,%ecx,8)
	else
		NR_HD = 1;
#endif
	// 到这里,硬盘信息数组hd_info[]已经设置好,并且确定了系统含有的硬盘数NR_HD.现在开始设置硬盘 结构数组hd[].该数组的项0和项5分别表示两个
	// 硬盘的整体参数,而项1-4和6-9分别表示两个硬盘的4个分区参数.因此这里仅设置硬盘整体信息的两项(项0和5).
	for (i = 0 ; i < NR_HD ; i++) {
   17909:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   1790e:	a1 d8 11 03 00       	mov    0x311d8,%eax
   17913:	39 44 24 1c          	cmp    %eax,0x1c(%esp)
   17917:	7c 85                	jl     1789e <sys_setup+0x130>
		总之,一个非零值意味着硬盘是一个AT控制器兼容硬盘.
	*/

	// 根据上述原理,下面代码用来检测硬盘到底是不是AT控制器兼容的.这里从CMOS偏移地址0x12处读出硬盘类型字节.如果低半字节值(存放着第2个硬盘类型
	// 值)不为0,则表示系统有两硬盘,否则表示系统只有1个硬盘.如果0x12处读出的值为0,则表示系统中没有AT兼容硬盘.
	if ((cmos_disks = CMOS_READ(0x12)) & 0xf0)
   17919:	b8 92 00 00 00       	mov    $0x92,%eax
   1791e:	ba 70 00 00 00       	mov    $0x70,%edx
   17923:	ee                   	out    %al,(%dx)
   17924:	eb 00                	jmp    17926 <sys_setup+0x1b8>
   17926:	eb 00                	jmp    17928 <sys_setup+0x1ba>
   17928:	b8 71 00 00 00       	mov    $0x71,%eax
   1792d:	89 c2                	mov    %eax,%edx
   1792f:	ec                   	in     (%dx),%al
   17930:	eb 00                	jmp    17932 <sys_setup+0x1c4>
   17932:	eb 00                	jmp    17934 <sys_setup+0x1c6>
   17934:	88 44 24 13          	mov    %al,0x13(%esp)
   17938:	0f b6 44 24 13       	movzbl 0x13(%esp),%eax
   1793d:	88 44 24 12          	mov    %al,0x12(%esp)
   17941:	0f b6 44 24 12       	movzbl 0x12(%esp),%eax
   17946:	25 f0 00 00 00       	and    $0xf0,%eax
   1794b:	85 c0                	test   %eax,%eax
   1794d:	74 24                	je     17973 <sys_setup+0x205>
		if (cmos_disks & 0x0f)
   1794f:	0f b6 44 24 12       	movzbl 0x12(%esp),%eax
   17954:	83 e0 0f             	and    $0xf,%eax
   17957:	85 c0                	test   %eax,%eax
   17959:	74 0c                	je     17967 <sys_setup+0x1f9>
			NR_HD = 2;
   1795b:	c7 05 d8 11 03 00 02 	movl   $0x2,0x311d8
   17962:	00 00 00 
   17965:	eb 16                	jmp    1797d <sys_setup+0x20f>
		else
			NR_HD = 1;
   17967:	c7 05 d8 11 03 00 01 	movl   $0x1,0x311d8
   1796e:	00 00 00 
   17971:	eb 0a                	jmp    1797d <sys_setup+0x20f>
	else
		NR_HD = 0;
   17973:	c7 05 d8 11 03 00 00 	movl   $0x0,0x311d8
   1797a:	00 00 00 
	// 若NR_HD = 0,则两个硬盘都不是AT控制器兼容的,两个硬盘数据结构全清零.若NR_HD = 1,则将第2个硬盘的参数清零.
	for (i = NR_HD ; i < 2 ; i++) {
   1797d:	a1 d8 11 03 00       	mov    0x311d8,%eax
   17982:	89 44 24 1c          	mov    %eax,0x1c(%esp)
   17986:	eb 31                	jmp    179b9 <sys_setup+0x24b>
		hd[i * 5].start_sect = 0;
   17988:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1798c:	89 d0                	mov    %edx,%eax
   1798e:	c1 e0 02             	shl    $0x2,%eax
   17991:	01 d0                	add    %edx,%eax
   17993:	c7 04 c5 e0 11 03 00 	movl   $0x0,0x311e0(,%eax,8)
   1799a:	00 00 00 00 
		hd[i * 5].nr_sects = 0;
   1799e:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   179a2:	89 d0                	mov    %edx,%eax
   179a4:	c1 e0 02             	shl    $0x2,%eax
   179a7:	01 d0                	add    %edx,%eax
   179a9:	c7 04 c5 e4 11 03 00 	movl   $0x0,0x311e4(,%eax,8)
   179b0:	00 00 00 00 
		else
			NR_HD = 1;
	else
		NR_HD = 0;
	// 若NR_HD = 0,则两个硬盘都不是AT控制器兼容的,两个硬盘数据结构全清零.若NR_HD = 1,则将第2个硬盘的参数清零.
	for (i = NR_HD ; i < 2 ; i++) {
   179b4:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   179b9:	83 7c 24 1c 01       	cmpl   $0x1,0x1c(%esp)
   179be:	7e c8                	jle    17988 <sys_setup+0x21a>
	// 好,到此为止我们已经真正确定了系统中所含的硬盘个数NR_HD.现在我们来读取每个硬盘上第1个扇区中的分区表信息,用来设置分区结构数组hd[]中硬盘
	// 各分区的信息.首先利用读函数bread()读硬盘第1个数据块(fs/buffer.c),第1个参数(0x300,0x305)分别是两个硬盘的设备号,第2个参数(0)是所
	// 需读取的块号.若读操作成功,则数据会被存放在缓冲块bh的数据区中.若缓冲块头指针bh为0,则说明读操作失败,则显示出错信息并停机.否则我们根据硬盘第
	// 1个扇区最后两个字节应该是0xAA55来判断扇区中数据的有效性,从而可以知道扇区中位于偏移0x1BE开始处的分区表是否有效.若有效则将硬盘分区表信息
	// 放入硬盘分区结构数组hd[]中.最后释放bh缓冲区.
	for (drive = 0 ; drive < NR_HD ; drive++) {
   179c0:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   179c7:	00 
   179c8:	e9 11 01 00 00       	jmp    17ade <sys_setup+0x370>
		if (!(bh = bread(0x300 + drive * 5, 0))) {								// 0x300,0x305是设备号.
   179cd:	8b 54 24 18          	mov    0x18(%esp),%edx
   179d1:	89 d0                	mov    %edx,%eax
   179d3:	c1 e0 02             	shl    $0x2,%eax
   179d6:	01 d0                	add    %edx,%eax
   179d8:	05 00 03 00 00       	add    $0x300,%eax
   179dd:	83 ec 08             	sub    $0x8,%esp
   179e0:	6a 00                	push   $0x0
   179e2:	50                   	push   %eax
   179e3:	e8 ab 7c ff ff       	call   f693 <bread>
   179e8:	83 c4 10             	add    $0x10,%esp
   179eb:	89 44 24 0c          	mov    %eax,0xc(%esp)
   179ef:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   179f4:	75 24                	jne    17a1a <sys_setup+0x2ac>
			printk("Unable to read partition table of drive %d\n\r",
   179f6:	83 ec 08             	sub    $0x8,%esp
   179f9:	ff 74 24 20          	pushl  0x20(%esp)
   179fd:	68 90 3f 02 00       	push   $0x23f90
   17a02:	e8 40 12 ff ff       	call   8c47 <printk>
   17a07:	83 c4 10             	add    $0x10,%esp
				drive);
			panic("");
   17a0a:	83 ec 0c             	sub    $0xc,%esp
   17a0d:	68 bd 3f 02 00       	push   $0x23fbd
   17a12:	e8 f1 11 ff ff       	call   8c08 <panic>
   17a17:	83 c4 10             	add    $0x10,%esp
		}
		if (bh->b_data[510] != 0x55 || (unsigned char)
   17a1a:	8b 44 24 0c          	mov    0xc(%esp),%eax
   17a1e:	8b 00                	mov    (%eax),%eax
   17a20:	05 fe 01 00 00       	add    $0x1fe,%eax
   17a25:	0f b6 00             	movzbl (%eax),%eax
   17a28:	3c 55                	cmp    $0x55,%al
   17a2a:	75 12                	jne    17a3e <sys_setup+0x2d0>
		    bh->b_data[511] != 0xAA) {											// 判断硬盘标志0xAA55.
   17a2c:	8b 44 24 0c          	mov    0xc(%esp),%eax
   17a30:	8b 00                	mov    (%eax),%eax
   17a32:	05 ff 01 00 00       	add    $0x1ff,%eax
   17a37:	0f b6 00             	movzbl (%eax),%eax
		if (!(bh = bread(0x300 + drive * 5, 0))) {								// 0x300,0x305是设备号.
			printk("Unable to read partition table of drive %d\n\r",
				drive);
			panic("");
		}
		if (bh->b_data[510] != 0x55 || (unsigned char)
   17a3a:	3c aa                	cmp    $0xaa,%al
   17a3c:	74 24                	je     17a62 <sys_setup+0x2f4>
		    bh->b_data[511] != 0xAA) {											// 判断硬盘标志0xAA55.
			printk("Bad partition table on drive %d\n\r",drive);
   17a3e:	83 ec 08             	sub    $0x8,%esp
   17a41:	ff 74 24 20          	pushl  0x20(%esp)
   17a45:	68 c0 3f 02 00       	push   $0x23fc0
   17a4a:	e8 f8 11 ff ff       	call   8c47 <printk>
   17a4f:	83 c4 10             	add    $0x10,%esp
			panic("");
   17a52:	83 ec 0c             	sub    $0xc,%esp
   17a55:	68 bd 3f 02 00       	push   $0x23fbd
   17a5a:	e8 a9 11 ff ff       	call   8c08 <panic>
   17a5f:	83 c4 10             	add    $0x10,%esp
		}
		p = 0x1BE + (void *)bh->b_data;	 										// 分区表位于第1扇区0x1BE处.
   17a62:	8b 44 24 0c          	mov    0xc(%esp),%eax
   17a66:	8b 00                	mov    (%eax),%eax
   17a68:	05 be 01 00 00       	add    $0x1be,%eax
   17a6d:	89 44 24 14          	mov    %eax,0x14(%esp)
		for (i = 1; i < 5; i++, p++) {
   17a71:	c7 44 24 1c 01 00 00 	movl   $0x1,0x1c(%esp)
   17a78:	00 
   17a79:	eb 48                	jmp    17ac3 <sys_setup+0x355>
			hd[i + 5 * drive].start_sect = p->start_sect;
   17a7b:	8b 54 24 18          	mov    0x18(%esp),%edx
   17a7f:	89 d0                	mov    %edx,%eax
   17a81:	c1 e0 02             	shl    $0x2,%eax
   17a84:	01 c2                	add    %eax,%edx
   17a86:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   17a8a:	01 c2                	add    %eax,%edx
   17a8c:	8b 44 24 14          	mov    0x14(%esp),%eax
   17a90:	8b 40 08             	mov    0x8(%eax),%eax
   17a93:	89 04 d5 e0 11 03 00 	mov    %eax,0x311e0(,%edx,8)
			hd[i + 5 * drive].nr_sects = p->nr_sects;
   17a9a:	8b 54 24 18          	mov    0x18(%esp),%edx
   17a9e:	89 d0                	mov    %edx,%eax
   17aa0:	c1 e0 02             	shl    $0x2,%eax
   17aa3:	01 c2                	add    %eax,%edx
   17aa5:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   17aa9:	01 c2                	add    %eax,%edx
   17aab:	8b 44 24 14          	mov    0x14(%esp),%eax
   17aaf:	8b 40 0c             	mov    0xc(%eax),%eax
   17ab2:	89 04 d5 e4 11 03 00 	mov    %eax,0x311e4(,%edx,8)
		    bh->b_data[511] != 0xAA) {											// 判断硬盘标志0xAA55.
			printk("Bad partition table on drive %d\n\r",drive);
			panic("");
		}
		p = 0x1BE + (void *)bh->b_data;	 										// 分区表位于第1扇区0x1BE处.
		for (i = 1; i < 5; i++, p++) {
   17ab9:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   17abe:	83 44 24 14 10       	addl   $0x10,0x14(%esp)
   17ac3:	83 7c 24 1c 04       	cmpl   $0x4,0x1c(%esp)
   17ac8:	7e b1                	jle    17a7b <sys_setup+0x30d>
			hd[i + 5 * drive].start_sect = p->start_sect;
			hd[i + 5 * drive].nr_sects = p->nr_sects;
		}
		brelse(bh);																// 释放为存放硬盘数据块而申请的缓冲区.
   17aca:	83 ec 0c             	sub    $0xc,%esp
   17acd:	ff 74 24 18          	pushl  0x18(%esp)
   17ad1:	e8 67 7b ff ff       	call   f63d <brelse>
   17ad6:	83 c4 10             	add    $0x10,%esp
	// 好,到此为止我们已经真正确定了系统中所含的硬盘个数NR_HD.现在我们来读取每个硬盘上第1个扇区中的分区表信息,用来设置分区结构数组hd[]中硬盘
	// 各分区的信息.首先利用读函数bread()读硬盘第1个数据块(fs/buffer.c),第1个参数(0x300,0x305)分别是两个硬盘的设备号,第2个参数(0)是所
	// 需读取的块号.若读操作成功,则数据会被存放在缓冲块bh的数据区中.若缓冲块头指针bh为0,则说明读操作失败,则显示出错信息并停机.否则我们根据硬盘第
	// 1个扇区最后两个字节应该是0xAA55来判断扇区中数据的有效性,从而可以知道扇区中位于偏移0x1BE开始处的分区表是否有效.若有效则将硬盘分区表信息
	// 放入硬盘分区结构数组hd[]中.最后释放bh缓冲区.
	for (drive = 0 ; drive < NR_HD ; drive++) {
   17ad9:	83 44 24 18 01       	addl   $0x1,0x18(%esp)
   17ade:	a1 d8 11 03 00       	mov    0x311d8,%eax
   17ae3:	39 44 24 18          	cmp    %eax,0x18(%esp)
   17ae7:	0f 8c e0 fe ff ff    	jl     179cd <sys_setup+0x25f>
			hd[i + 5 * drive].nr_sects = p->nr_sects;
		}
		brelse(bh);																// 释放为存放硬盘数据块而申请的缓冲区.
    }
	// 现在再对每个分区中的数据块总数进行统计,并保存在硬盘分区总数据数组hd_sizes[]中.然后让设备数据块总数指针数组的本设备项指向该数组.
	for (i = 0 ; i < 5 * MAX_HD ; i++) {
   17aed:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   17af4:	00 
   17af5:	eb 5c                	jmp    17b53 <sys_setup+0x3e5>
		if (hd[i].nr_sects != 0)
   17af7:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   17afb:	8b 04 c5 e4 11 03 00 	mov    0x311e4(,%eax,8),%eax
   17b02:	85 c0                	test   %eax,%eax
   17b04:	74 2e                	je     17b34 <sys_setup+0x3c6>
			Log(LOG_INFO_TYPE, "<<<<< HD Partition%d Info : start_sect = %d, nr_sects = %d >>>>>\n", i, hd[i].start_sect, hd[i].nr_sects);
   17b06:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   17b0a:	8b 14 c5 e4 11 03 00 	mov    0x311e4(,%eax,8),%edx
   17b11:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   17b15:	8b 04 c5 e0 11 03 00 	mov    0x311e0(,%eax,8),%eax
   17b1c:	83 ec 0c             	sub    $0xc,%esp
   17b1f:	52                   	push   %edx
   17b20:	50                   	push   %eax
   17b21:	ff 74 24 30          	pushl  0x30(%esp)
   17b25:	68 e4 3f 02 00       	push   $0x23fe4
   17b2a:	6a 00                	push   $0x0
   17b2c:	e8 d6 ad 00 00       	call   22907 <Log>
   17b31:	83 c4 20             	add    $0x20,%esp
		hd_sizes[i] = hd[i].nr_sects >> 1 ;
   17b34:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   17b38:	8b 04 c5 e4 11 03 00 	mov    0x311e4(,%eax,8),%eax
   17b3f:	d1 f8                	sar    %eax
   17b41:	89 c2                	mov    %eax,%edx
   17b43:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   17b47:	89 14 85 40 12 03 00 	mov    %edx,0x31240(,%eax,4)
			hd[i + 5 * drive].nr_sects = p->nr_sects;
		}
		brelse(bh);																// 释放为存放硬盘数据块而申请的缓冲区.
    }
	// 现在再对每个分区中的数据块总数进行统计,并保存在硬盘分区总数据数组hd_sizes[]中.然后让设备数据块总数指针数组的本设备项指向该数组.
	for (i = 0 ; i < 5 * MAX_HD ; i++) {
   17b4e:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   17b53:	83 7c 24 1c 09       	cmpl   $0x9,0x1c(%esp)
   17b58:	7e 9d                	jle    17af7 <sys_setup+0x389>
		if (hd[i].nr_sects != 0)
			Log(LOG_INFO_TYPE, "<<<<< HD Partition%d Info : start_sect = %d, nr_sects = %d >>>>>\n", i, hd[i].start_sect, hd[i].nr_sects);
		hd_sizes[i] = hd[i].nr_sects >> 1 ;
	}
	blk_size[MAJOR_NR] = hd_sizes;
   17b5a:	c7 05 44 11 03 00 40 	movl   $0x31240,0x31144
   17b61:	12 03 00 
	// 现在总算完成设置硬盘分区结构数组hd[]的任务.如果确实有硬盘存在并且读入其分区表,则显示"分区表正常"信息.然后尝试在系统内存虚拟盘中加载启动盘中包含的
	// 根文件系统映像(blk_drv/ramdisk.c).即在系统设置有虚拟盘的情况下判断启动盘上是否还含有根文件系统的映像数据.如果有(此时该启动盘称为集成盘)则尝试
	// 把该映像加载并存放到虚拟盘中,然后把此时的根文件系统设备号ROOT_DEV修改成虚拟盘的设备号.接着再对交换设备进行初始化.最后安装根文件系统.
	if (NR_HD)
   17b64:	a1 d8 11 03 00       	mov    0x311d8,%eax
   17b69:	85 c0                	test   %eax,%eax
   17b6b:	74 29                	je     17b96 <sys_setup+0x428>
		Log(LOG_INFO_TYPE, "<<<<< Partition table%s ok. >>>>>\n\r",(NR_HD > 1) ? "s":"");
   17b6d:	a1 d8 11 03 00       	mov    0x311d8,%eax
   17b72:	83 f8 01             	cmp    $0x1,%eax
   17b75:	7e 07                	jle    17b7e <sys_setup+0x410>
   17b77:	b8 26 40 02 00       	mov    $0x24026,%eax
   17b7c:	eb 05                	jmp    17b83 <sys_setup+0x415>
   17b7e:	b8 bd 3f 02 00       	mov    $0x23fbd,%eax
   17b83:	83 ec 04             	sub    $0x4,%esp
   17b86:	50                   	push   %eax
   17b87:	68 28 40 02 00       	push   $0x24028
   17b8c:	6a 00                	push   $0x0
   17b8e:	e8 74 ad 00 00       	call   22907 <Log>
   17b93:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NR_HD; i++)
   17b96:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   17b9d:	00 
   17b9e:	eb 6b                	jmp    17c0b <sys_setup+0x49d>
		Log(LOG_INFO_TYPE, "<<<<< HD%d Info: cyl = %d, head = %d, sect = %d, ctl = %x >>>>>\n", hd_info[i].cyl, hd_info[i].head, hd_info[i].sect, hd_info[i].ctl);
   17ba0:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   17ba4:	89 d0                	mov    %edx,%eax
   17ba6:	01 c0                	add    %eax,%eax
   17ba8:	01 d0                	add    %edx,%eax
   17baa:	c1 e0 03             	shl    $0x3,%eax
   17bad:	05 b4 11 03 00       	add    $0x311b4,%eax
   17bb2:	8b 30                	mov    (%eax),%esi
   17bb4:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   17bb8:	89 d0                	mov    %edx,%eax
   17bba:	01 c0                	add    %eax,%eax
   17bbc:	01 d0                	add    %edx,%eax
   17bbe:	c1 e0 03             	shl    $0x3,%eax
   17bc1:	05 a4 11 03 00       	add    $0x311a4,%eax
   17bc6:	8b 18                	mov    (%eax),%ebx
   17bc8:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   17bcc:	89 d0                	mov    %edx,%eax
   17bce:	01 c0                	add    %eax,%eax
   17bd0:	01 d0                	add    %edx,%eax
   17bd2:	c1 e0 03             	shl    $0x3,%eax
   17bd5:	05 a0 11 03 00       	add    $0x311a0,%eax
   17bda:	8b 08                	mov    (%eax),%ecx
   17bdc:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   17be0:	89 d0                	mov    %edx,%eax
   17be2:	01 c0                	add    %eax,%eax
   17be4:	01 d0                	add    %edx,%eax
   17be6:	c1 e0 03             	shl    $0x3,%eax
   17be9:	05 a8 11 03 00       	add    $0x311a8,%eax
   17bee:	8b 00                	mov    (%eax),%eax
   17bf0:	83 ec 08             	sub    $0x8,%esp
   17bf3:	56                   	push   %esi
   17bf4:	53                   	push   %ebx
   17bf5:	51                   	push   %ecx
   17bf6:	50                   	push   %eax
   17bf7:	68 4c 40 02 00       	push   $0x2404c
   17bfc:	6a 00                	push   $0x0
   17bfe:	e8 04 ad 00 00       	call   22907 <Log>
   17c03:	83 c4 20             	add    $0x20,%esp
	// 现在总算完成设置硬盘分区结构数组hd[]的任务.如果确实有硬盘存在并且读入其分区表,则显示"分区表正常"信息.然后尝试在系统内存虚拟盘中加载启动盘中包含的
	// 根文件系统映像(blk_drv/ramdisk.c).即在系统设置有虚拟盘的情况下判断启动盘上是否还含有根文件系统的映像数据.如果有(此时该启动盘称为集成盘)则尝试
	// 把该映像加载并存放到虚拟盘中,然后把此时的根文件系统设备号ROOT_DEV修改成虚拟盘的设备号.接着再对交换设备进行初始化.最后安装根文件系统.
	if (NR_HD)
		Log(LOG_INFO_TYPE, "<<<<< Partition table%s ok. >>>>>\n\r",(NR_HD > 1) ? "s":"");
	for (i = 0; i < NR_HD; i++)
   17c06:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   17c0b:	a1 d8 11 03 00       	mov    0x311d8,%eax
   17c10:	39 44 24 1c          	cmp    %eax,0x1c(%esp)
   17c14:	7c 8a                	jl     17ba0 <sys_setup+0x432>
		Log(LOG_INFO_TYPE, "<<<<< HD%d Info: cyl = %d, head = %d, sect = %d, ctl = %x >>>>>\n", hd_info[i].cyl, hd_info[i].head, hd_info[i].sect, hd_info[i].ctl);
	rd_load();																	// blk_drv/ramdisk.c
   17c16:	e8 74 0b 00 00       	call   1878f <rd_load>
	init_swapping();															// mm/swap.c
   17c1b:	e8 79 54 ff ff       	call   d099 <init_swapping>
	mount_root();																// fs/super.c
   17c20:	e8 cc 86 ff ff       	call   102f1 <mount_root>
	return (0);
   17c25:	b8 00 00 00 00       	mov    $0x0,%eax
}
   17c2a:	83 c4 24             	add    $0x24,%esp
   17c2d:	5b                   	pop    %ebx
   17c2e:	5e                   	pop    %esi
   17c2f:	c3                   	ret    

00017c30 <controller_ready>:
// 则表示等待控制器空闲的时间已经超时而发生错误,若返回值不为0则说明在等待(循环)时间期限内控制器回到空闲状态.OK!
// 实际上,我们仅需检测状态寄存器忙位(位7)是否为1来判断控制器是否处于忙状态,驱动器是否就绪(即位6是否为1)与控制器的状态无关.因此我们可能把第172行
// 语句改写成:"while(--retries && (inb_p(HD_STATUS)&0x80));"另外,由于现在的PC速度都很快,因此我们可以把等待的循环次数再加大一些,例如
// 再增加10倍.
static int controller_ready(void)
{
   17c30:	83 ec 10             	sub    $0x10,%esp
	int retries = 100000;
   17c33:	c7 44 24 0c a0 86 01 	movl   $0x186a0,0xc(%esp)
   17c3a:	00 

	//while (--retries && (inb_p(HD_STATUS)&0xc0)!=0x40);
	while(--retries && (inb_p(HD_STATUS) & 0X80)) ;
   17c3b:	83 6c 24 0c 01       	subl   $0x1,0xc(%esp)
   17c40:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   17c45:	74 19                	je     17c60 <controller_ready+0x30>
   17c47:	b8 f7 01 00 00       	mov    $0x1f7,%eax
   17c4c:	89 c2                	mov    %eax,%edx
   17c4e:	ec                   	in     (%dx),%al
   17c4f:	eb 00                	jmp    17c51 <controller_ready+0x21>
   17c51:	eb 00                	jmp    17c53 <controller_ready+0x23>
   17c53:	88 44 24 0b          	mov    %al,0xb(%esp)
   17c57:	0f b6 44 24 0b       	movzbl 0xb(%esp),%eax
   17c5c:	84 c0                	test   %al,%al
   17c5e:	78 db                	js     17c3b <controller_ready+0xb>
	return (retries);									// 返回等待循环次数.
   17c60:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   17c64:	83 c4 10             	add    $0x10,%esp
   17c67:	c3                   	ret    

00017c68 <win_result>:

// 检测硬盘执行命令后的状态.(win表示温切斯特硬盘的缩写)
// 读取状态寄存器中的命令执行结果状态.返回0表示正常;1表示出错.如果执行命令错,则需要再读错误寄存器HD_ERROR(0x1f1).
static int win_result(void)
{
   17c68:	83 ec 10             	sub    $0x10,%esp
	int i = inb_p(HD_STATUS);							// 取状态信息.
   17c6b:	b8 f7 01 00 00       	mov    $0x1f7,%eax
   17c70:	89 c2                	mov    %eax,%edx
   17c72:	ec                   	in     (%dx),%al
   17c73:	eb 00                	jmp    17c75 <win_result+0xd>
   17c75:	eb 00                	jmp    17c77 <win_result+0xf>
   17c77:	88 44 24 0f          	mov    %al,0xf(%esp)
   17c7b:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   17c80:	0f b6 c0             	movzbl %al,%eax
   17c83:	89 44 24 08          	mov    %eax,0x8(%esp)

	if ((i & (BUSY_STAT | READY_STAT | WRERR_STAT | SEEK_STAT | ERR_STAT))
   17c87:	8b 44 24 08          	mov    0x8(%esp),%eax
   17c8b:	25 f1 00 00 00       	and    $0xf1,%eax
   17c90:	83 f8 50             	cmp    $0x50,%eax
   17c93:	75 07                	jne    17c9c <win_result+0x34>
		== (READY_STAT | SEEK_STAT))
		return(0); 										/* ok */
   17c95:	b8 00 00 00 00       	mov    $0x0,%eax
   17c9a:	eb 28                	jmp    17cc4 <win_result+0x5c>
	if (i & 1) i = inb(HD_ERROR);						// 若ERR_STAT置位,则读取错误寄存器.
   17c9c:	8b 44 24 08          	mov    0x8(%esp),%eax
   17ca0:	83 e0 01             	and    $0x1,%eax
   17ca3:	85 c0                	test   %eax,%eax
   17ca5:	74 18                	je     17cbf <win_result+0x57>
   17ca7:	b8 f1 01 00 00       	mov    $0x1f1,%eax
   17cac:	89 c2                	mov    %eax,%edx
   17cae:	ec                   	in     (%dx),%al
   17caf:	88 44 24 07          	mov    %al,0x7(%esp)
   17cb3:	0f b6 44 24 07       	movzbl 0x7(%esp),%eax
   17cb8:	0f b6 c0             	movzbl %al,%eax
   17cbb:	89 44 24 08          	mov    %eax,0x8(%esp)
	return (1);
   17cbf:	b8 01 00 00 00       	mov    $0x1,%eax
}
   17cc4:	83 c4 10             	add    $0x10,%esp
   17cc7:	c3                   	ret    

00017cc8 <hd_out>:
// 第191行定义1个寄存器变量__res.该变量将被保存在1个寄存器中,以便于快速访问.
// 如果想指定寄存器(如eax),则我们可以把该句写成"register char __res asm("ax");"
static void hd_out(unsigned int drive, unsigned int nsect, unsigned int sect,
		unsigned int head, unsigned int cyl, unsigned int cmd,
		void (*intr_addr)(void))
{
   17cc8:	53                   	push   %ebx
   17cc9:	83 ec 08             	sub    $0x8,%esp
	register int port;

	// 首先对参数进行有效性检查.如果驱动器号大于1(只能是0,1)或者磁头号大于15,则程序不支持,停机.否则就判断并循环等待驱动器就绪.如果等待一段时间
	// 后仍未就绪则表示硬盘控制器出错,也停机.
	if (drive > 1 || head > 15)
   17ccc:	83 7c 24 10 01       	cmpl   $0x1,0x10(%esp)
   17cd1:	77 07                	ja     17cda <hd_out+0x12>
   17cd3:	83 7c 24 1c 0f       	cmpl   $0xf,0x1c(%esp)
   17cd8:	76 10                	jbe    17cea <hd_out+0x22>
		panic("Trying to write bad sector");
   17cda:	83 ec 0c             	sub    $0xc,%esp
   17cdd:	68 8d 40 02 00       	push   $0x2408d
   17ce2:	e8 21 0f ff ff       	call   8c08 <panic>
   17ce7:	83 c4 10             	add    $0x10,%esp
	if (!controller_ready())
   17cea:	e8 41 ff ff ff       	call   17c30 <controller_ready>
   17cef:	85 c0                	test   %eax,%eax
   17cf1:	75 10                	jne    17d03 <hd_out+0x3b>
		panic("HD controller not ready");
   17cf3:	83 ec 0c             	sub    $0xc,%esp
   17cf6:	68 a8 40 02 00       	push   $0x240a8
   17cfb:	e8 08 0f ff ff       	call   8c08 <panic>
   17d00:	83 c4 10             	add    $0x10,%esp
	// 接着我们设置硬盘中断发生时将调用的C函数指针do_hd(该函数指针定义在blk.h文件).然后在向硬盘控制器发送参数和命令之前,规定要先向控制器命令端口
	// (0x3f6)发送一指定硬盘的控制字节,以建立相应的硬盘控制方式.该控制字节即是硬盘信息结构数组中的ctl字节.然后向控制器端口0x1f1-0x1f7发送7字节
	// 的参数命令块.
	SET_INTR(intr_addr);								// do_hd = intr_addr在中断中被调用.
   17d03:	8b 44 24 28          	mov    0x28(%esp),%eax
   17d07:	a3 80 11 03 00       	mov    %eax,0x31180
   17d0c:	c7 05 84 11 03 00 c8 	movl   $0xc8,0x31184
   17d13:	00 00 00 
	outb_p(hd_info[drive].ctl, HD_CMD);					// 向控制寄存器输出控制字节
   17d16:	8b 54 24 10          	mov    0x10(%esp),%edx
   17d1a:	89 d0                	mov    %edx,%eax
   17d1c:	01 c0                	add    %eax,%eax
   17d1e:	01 d0                	add    %edx,%eax
   17d20:	c1 e0 03             	shl    $0x3,%eax
   17d23:	05 b4 11 03 00       	add    $0x311b4,%eax
   17d28:	8b 00                	mov    (%eax),%eax
   17d2a:	ba f6 03 00 00       	mov    $0x3f6,%edx
   17d2f:	ee                   	out    %al,(%dx)
   17d30:	eb 00                	jmp    17d32 <hd_out+0x6a>
   17d32:	eb 00                	jmp    17d34 <hd_out+0x6c>
	port = HD_DATA;										// 置dx为数据寄存器端口(0x1f0)
   17d34:	bb f0 01 00 00       	mov    $0x1f0,%ebx
	outb_p(hd_info[drive].wpcom >> 2, ++port);			// 参数:写预补偿柱面号(需除4)
   17d39:	8b 54 24 10          	mov    0x10(%esp),%edx
   17d3d:	89 d0                	mov    %edx,%eax
   17d3f:	01 c0                	add    %eax,%eax
   17d41:	01 d0                	add    %edx,%eax
   17d43:	c1 e0 03             	shl    $0x3,%eax
   17d46:	05 ac 11 03 00       	add    $0x311ac,%eax
   17d4b:	8b 00                	mov    (%eax),%eax
   17d4d:	c1 f8 02             	sar    $0x2,%eax
   17d50:	83 c3 01             	add    $0x1,%ebx
   17d53:	89 da                	mov    %ebx,%edx
   17d55:	ee                   	out    %al,(%dx)
   17d56:	eb 00                	jmp    17d58 <hd_out+0x90>
   17d58:	eb 00                	jmp    17d5a <hd_out+0x92>
	outb_p(nsect, ++port);								// 参数:读/写扇区总数.
   17d5a:	83 c3 01             	add    $0x1,%ebx
   17d5d:	8b 44 24 14          	mov    0x14(%esp),%eax
   17d61:	89 da                	mov    %ebx,%edx
   17d63:	ee                   	out    %al,(%dx)
   17d64:	eb 00                	jmp    17d66 <hd_out+0x9e>
   17d66:	eb 00                	jmp    17d68 <hd_out+0xa0>
	outb_p(sect, ++port);								// 参数:起始扇区.
   17d68:	83 c3 01             	add    $0x1,%ebx
   17d6b:	8b 44 24 18          	mov    0x18(%esp),%eax
   17d6f:	89 da                	mov    %ebx,%edx
   17d71:	ee                   	out    %al,(%dx)
   17d72:	eb 00                	jmp    17d74 <hd_out+0xac>
   17d74:	eb 00                	jmp    17d76 <hd_out+0xae>
	outb_p(cyl, ++port);								// 参数:柱面号低8位.
   17d76:	83 c3 01             	add    $0x1,%ebx
   17d79:	8b 44 24 20          	mov    0x20(%esp),%eax
   17d7d:	89 da                	mov    %ebx,%edx
   17d7f:	ee                   	out    %al,(%dx)
   17d80:	eb 00                	jmp    17d82 <hd_out+0xba>
   17d82:	eb 00                	jmp    17d84 <hd_out+0xbc>
	outb_p(cyl >> 8, ++port);							// 参数:柱面号高8位.
   17d84:	8b 44 24 20          	mov    0x20(%esp),%eax
   17d88:	c1 e8 08             	shr    $0x8,%eax
   17d8b:	83 c3 01             	add    $0x1,%ebx
   17d8e:	89 da                	mov    %ebx,%edx
   17d90:	ee                   	out    %al,(%dx)
   17d91:	eb 00                	jmp    17d93 <hd_out+0xcb>
   17d93:	eb 00                	jmp    17d95 <hd_out+0xcd>
	outb_p(0xA0 | (drive << 4) | head, ++port);			// 参数:驱动器号+磁头号.
   17d95:	8b 44 24 10          	mov    0x10(%esp),%eax
   17d99:	c1 e0 04             	shl    $0x4,%eax
   17d9c:	0b 44 24 1c          	or     0x1c(%esp),%eax
   17da0:	0c a0                	or     $0xa0,%al
   17da2:	83 c3 01             	add    $0x1,%ebx
   17da5:	89 da                	mov    %ebx,%edx
   17da7:	ee                   	out    %al,(%dx)
   17da8:	eb 00                	jmp    17daa <hd_out+0xe2>
   17daa:	eb 00                	jmp    17dac <hd_out+0xe4>
	outb(cmd, ++port);									// 命令:硬盘控制命令.
   17dac:	83 c3 01             	add    $0x1,%ebx
   17daf:	8b 44 24 24          	mov    0x24(%esp),%eax
   17db3:	89 da                	mov    %ebx,%edx
   17db5:	ee                   	out    %al,(%dx)
}
   17db6:	90                   	nop
   17db7:	83 c4 08             	add    $0x8,%esp
   17dba:	5b                   	pop    %ebx
   17dbb:	c3                   	ret    

00017dbc <drive_busy>:

// 等待硬盘就绪.
// 该函数循环等待主状态控制器忙标志复位.若仅有就绪或寻道结束标志置位,则表示就绪,成功返回0.若经过一段时间仍为忙,则返回1.
static int drive_busy(void)
{
   17dbc:	83 ec 1c             	sub    $0x1c,%esp
	unsigned int i;
	unsigned char c;

	// 循环读取控制器的主状态寄存器HD_STATUS,等待就绪标志位置位并且忙位复位.然后检测其中忙位,就绪位和寻道结束位.若仅有就绪或寻道结束标志置位,则表示硬盘
	// 就绪,返回0.否则表示等待超时.于是警告显示信息.并返回1.
	for (i = 0; i < 50000; i++) {
   17dbf:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   17dc6:	00 
   17dc7:	eb 31                	jmp    17dfa <drive_busy+0x3e>
		c = inb_p(HD_STATUS);							// 取主控制器状态字节.
   17dc9:	b8 f7 01 00 00       	mov    $0x1f7,%eax
   17dce:	89 c2                	mov    %eax,%edx
   17dd0:	ec                   	in     (%dx),%al
   17dd1:	eb 00                	jmp    17dd3 <drive_busy+0x17>
   17dd3:	eb 00                	jmp    17dd5 <drive_busy+0x19>
   17dd5:	88 44 24 0b          	mov    %al,0xb(%esp)
   17dd9:	0f b6 44 24 0b       	movzbl 0xb(%esp),%eax
   17dde:	88 44 24 0a          	mov    %al,0xa(%esp)
		c &= (BUSY_STAT | READY_STAT | SEEK_STAT);
   17de2:	80 64 24 0a d0       	andb   $0xd0,0xa(%esp)
		if (c == (READY_STAT | SEEK_STAT))
   17de7:	80 7c 24 0a 50       	cmpb   $0x50,0xa(%esp)
   17dec:	75 07                	jne    17df5 <drive_busy+0x39>
			return 0;
   17dee:	b8 00 00 00 00       	mov    $0x0,%eax
   17df3:	eb 24                	jmp    17e19 <drive_busy+0x5d>
	unsigned int i;
	unsigned char c;

	// 循环读取控制器的主状态寄存器HD_STATUS,等待就绪标志位置位并且忙位复位.然后检测其中忙位,就绪位和寻道结束位.若仅有就绪或寻道结束标志置位,则表示硬盘
	// 就绪,返回0.否则表示等待超时.于是警告显示信息.并返回1.
	for (i = 0; i < 50000; i++) {
   17df5:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   17dfa:	81 7c 24 0c 4f c3 00 	cmpl   $0xc34f,0xc(%esp)
   17e01:	00 
   17e02:	76 c5                	jbe    17dc9 <drive_busy+0xd>
		c = inb_p(HD_STATUS);							// 取主控制器状态字节.
		c &= (BUSY_STAT | READY_STAT | SEEK_STAT);
		if (c == (READY_STAT | SEEK_STAT))
			return 0;
	}
	printk("HD controller times out\n\r");				// 等待超时,显示信息.并返回1.
   17e04:	83 ec 0c             	sub    $0xc,%esp
   17e07:	68 c0 40 02 00       	push   $0x240c0
   17e0c:	e8 36 0e ff ff       	call   8c47 <printk>
   17e11:	83 c4 10             	add    $0x10,%esp
	return(1);
   17e14:	b8 01 00 00 00       	mov    $0x1,%eax
}
   17e19:	83 c4 1c             	add    $0x1c,%esp
   17e1c:	c3                   	ret    

00017e1d <reset_controller>:

// 诊断复位(重新校正)硬盘控制器.
// 首先向控制器寄存器端口(0x3f6)发送允许复位(4)控制字节.然后循环 操作等待一段时间让控制器执行复位操作.接着再向该端口发送正常的控制字节(不禁止重试,重读)
// 并等待硬盘就绪.若等待硬盘就绪超时,则显示警告信息.然后读取错误寄存器内容,若其不等于1(表示无错误)则显示硬盘控制器复位失败信息.
static void reset_controller(void)
{
   17e1d:	83 ec 1c             	sub    $0x1c,%esp
	int	i;

	outb(4, HD_CMD);									// 向控制寄存器端口发送复位控制字节.
   17e20:	b8 04 00 00 00       	mov    $0x4,%eax
   17e25:	ba f6 03 00 00       	mov    $0x3f6,%edx
   17e2a:	ee                   	out    %al,(%dx)
	for(i = 0; i < 1000; i++) nop();					// 等待一段时间.
   17e2b:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   17e32:	00 
   17e33:	eb 06                	jmp    17e3b <reset_controller+0x1e>
   17e35:	90                   	nop
   17e36:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   17e3b:	81 7c 24 0c e7 03 00 	cmpl   $0x3e7,0xc(%esp)
   17e42:	00 
   17e43:	7e f0                	jle    17e35 <reset_controller+0x18>
	outb(hd_info[0].ctl & 0x0f, HD_CMD);				// 发送正常控制字节(不禁止重试,重读).
   17e45:	a1 b4 11 03 00       	mov    0x311b4,%eax
   17e4a:	83 e0 0f             	and    $0xf,%eax
   17e4d:	ba f6 03 00 00       	mov    $0x3f6,%edx
   17e52:	ee                   	out    %al,(%dx)
	if (drive_busy())
   17e53:	e8 64 ff ff ff       	call   17dbc <drive_busy>
   17e58:	85 c0                	test   %eax,%eax
   17e5a:	74 10                	je     17e6c <reset_controller+0x4f>
		printk("HD-controller still busy\n\r");
   17e5c:	83 ec 0c             	sub    $0xc,%esp
   17e5f:	68 da 40 02 00       	push   $0x240da
   17e64:	e8 de 0d ff ff       	call   8c47 <printk>
   17e69:	83 c4 10             	add    $0x10,%esp
	if ((i = inb(HD_ERROR)) != 1)
   17e6c:	b8 f1 01 00 00       	mov    $0x1f1,%eax
   17e71:	89 c2                	mov    %eax,%edx
   17e73:	ec                   	in     (%dx),%al
   17e74:	88 44 24 0b          	mov    %al,0xb(%esp)
   17e78:	0f b6 44 24 0b       	movzbl 0xb(%esp),%eax
   17e7d:	0f b6 c0             	movzbl %al,%eax
   17e80:	89 44 24 0c          	mov    %eax,0xc(%esp)
   17e84:	83 7c 24 0c 01       	cmpl   $0x1,0xc(%esp)
   17e89:	74 14                	je     17e9f <reset_controller+0x82>
		printk("HD-controller reset failed: %02x\n\r",i);
   17e8b:	83 ec 08             	sub    $0x8,%esp
   17e8e:	ff 74 24 14          	pushl  0x14(%esp)
   17e92:	68 f8 40 02 00       	push   $0x240f8
   17e97:	e8 ab 0d ff ff       	call   8c47 <printk>
   17e9c:	83 c4 10             	add    $0x10,%esp
}
   17e9f:	90                   	nop
   17ea0:	83 c4 1c             	add    $0x1c,%esp
   17ea3:	c3                   	ret    

00017ea4 <reset_hd>:

// 硬盘复位操作.
// 首先复位(重新校正)硬盘控制器.然后发送硬盘控制器命令"建立驱动器参数".在本命令引起的硬盘中断处理程序中又会调用本函数.此时该函数会根据执行该命令的结果判断是
// 否要进行出错处理或是继续执行请求项处理操作.
static void reset_hd(void)
{
   17ea4:	56                   	push   %esi
   17ea5:	53                   	push   %ebx
   17ea6:	83 ec 04             	sub    $0x4,%esp
	// 如果复位标志reset是置位的,则把复位标志清零后,执行复位硬盘控制在操作.然后针对第i个硬盘向控制器发送"建立驱动器参数"命令.当控制器执行了该命令后,又会发出硬盘
	// 中断信号.此时本函数会被中断过程调用而再次执行.由于reset已经标志复位,因此会首先去执行246行开始的语句,判断命令执行是否正常.若还是发生错误就会调用bad_rw_intr()
	// 函数以统计出错次数并根据次数确定是否在设置reset标志如果又设置了reset标志则跳转到repeat重新执行本函数.若复位操作正常,则针对下一个硬盘发送"建立驱动器参数"
	// 命令,并作上述处理.如果系统中NR_HD个硬盘都已经正常执行了发送的命令,则再次do_hd_request()函数开始对请求项进行处理.
repeat:
	if (reset) {
   17ea9:	a1 d4 11 03 00       	mov    0x311d4,%eax
   17eae:	85 c0                	test   %eax,%eax
   17eb0:	74 1b                	je     17ecd <reset_hd+0x29>
		reset = 0;
   17eb2:	c7 05 d4 11 03 00 00 	movl   $0x0,0x311d4
   17eb9:	00 00 00 
		i = -1;											// 初始化当前硬盘号(静态变量).
   17ebc:	c7 05 68 12 03 00 ff 	movl   $0xffffffff,0x31268
   17ec3:	ff ff ff 
		reset_controller();
   17ec6:	e8 52 ff ff ff       	call   17e1d <reset_controller>
   17ecb:	eb 19                	jmp    17ee6 <reset_hd+0x42>
	} else if (win_result()) {
   17ecd:	e8 96 fd ff ff       	call   17c68 <win_result>
   17ed2:	85 c0                	test   %eax,%eax
   17ed4:	74 10                	je     17ee6 <reset_hd+0x42>
		bad_rw_intr();
   17ed6:	e8 e2 00 00 00       	call   17fbd <bad_rw_intr>
		if (reset)
   17edb:	a1 d4 11 03 00       	mov    0x311d4,%eax
   17ee0:	85 c0                	test   %eax,%eax
   17ee2:	74 02                	je     17ee6 <reset_hd+0x42>
			goto repeat;
   17ee4:	eb c3                	jmp    17ea9 <reset_hd+0x5>
	}
	i++;												// 处理下一个硬盘(第1个是0).
   17ee6:	a1 68 12 03 00       	mov    0x31268,%eax
   17eeb:	83 c0 01             	add    $0x1,%eax
   17eee:	a3 68 12 03 00       	mov    %eax,0x31268
	if (i < NR_HD) {
   17ef3:	8b 15 68 12 03 00    	mov    0x31268,%edx
   17ef9:	a1 d8 11 03 00       	mov    0x311d8,%eax
   17efe:	39 c2                	cmp    %eax,%edx
   17f00:	0f 8d 84 00 00 00    	jge    17f8a <reset_hd+0xe6>
		hd_out(i, hd_info[i].sect, hd_info[i].sect,hd_info[i].head - 1,
			hd_info[i].cyl, WIN_SPECIFY, &reset_hd);
   17f06:	8b 15 68 12 03 00    	mov    0x31268,%edx
   17f0c:	89 d0                	mov    %edx,%eax
   17f0e:	01 c0                	add    %eax,%eax
   17f10:	01 d0                	add    %edx,%eax
   17f12:	c1 e0 03             	shl    $0x3,%eax
   17f15:	05 a8 11 03 00       	add    $0x311a8,%eax
   17f1a:	8b 00                	mov    (%eax),%eax
		if (reset)
			goto repeat;
	}
	i++;												// 处理下一个硬盘(第1个是0).
	if (i < NR_HD) {
		hd_out(i, hd_info[i].sect, hd_info[i].sect,hd_info[i].head - 1,
   17f1c:	89 c6                	mov    %eax,%esi
   17f1e:	8b 15 68 12 03 00    	mov    0x31268,%edx
   17f24:	89 d0                	mov    %edx,%eax
   17f26:	01 c0                	add    %eax,%eax
   17f28:	01 d0                	add    %edx,%eax
   17f2a:	c1 e0 03             	shl    $0x3,%eax
   17f2d:	05 a0 11 03 00       	add    $0x311a0,%eax
   17f32:	8b 00                	mov    (%eax),%eax
   17f34:	83 e8 01             	sub    $0x1,%eax
   17f37:	89 c3                	mov    %eax,%ebx
   17f39:	8b 15 68 12 03 00    	mov    0x31268,%edx
   17f3f:	89 d0                	mov    %edx,%eax
   17f41:	01 c0                	add    %eax,%eax
   17f43:	01 d0                	add    %edx,%eax
   17f45:	c1 e0 03             	shl    $0x3,%eax
   17f48:	05 a4 11 03 00       	add    $0x311a4,%eax
   17f4d:	8b 00                	mov    (%eax),%eax
   17f4f:	89 c1                	mov    %eax,%ecx
   17f51:	8b 15 68 12 03 00    	mov    0x31268,%edx
   17f57:	89 d0                	mov    %edx,%eax
   17f59:	01 c0                	add    %eax,%eax
   17f5b:	01 d0                	add    %edx,%eax
   17f5d:	c1 e0 03             	shl    $0x3,%eax
   17f60:	05 a4 11 03 00       	add    $0x311a4,%eax
   17f65:	8b 00                	mov    (%eax),%eax
   17f67:	89 c2                	mov    %eax,%edx
   17f69:	a1 68 12 03 00       	mov    0x31268,%eax
   17f6e:	83 ec 04             	sub    $0x4,%esp
   17f71:	68 a4 7e 01 00       	push   $0x17ea4
   17f76:	68 91 00 00 00       	push   $0x91
   17f7b:	56                   	push   %esi
   17f7c:	53                   	push   %ebx
   17f7d:	51                   	push   %ecx
   17f7e:	52                   	push   %edx
   17f7f:	50                   	push   %eax
   17f80:	e8 43 fd ff ff       	call   17cc8 <hd_out>
   17f85:	83 c4 20             	add    $0x20,%esp
			hd_info[i].cyl, WIN_SPECIFY, &reset_hd);
	} else
		do_hd_request();								// 执行请求项处理.
}
   17f88:	eb 05                	jmp    17f8f <reset_hd+0xeb>
	i++;												// 处理下一个硬盘(第1个是0).
	if (i < NR_HD) {
		hd_out(i, hd_info[i].sect, hd_info[i].sect,hd_info[i].head - 1,
			hd_info[i].cyl, WIN_SPECIFY, &reset_hd);
	} else
		do_hd_request();								// 执行请求项处理.
   17f8a:	e8 33 02 00 00       	call   181c2 <do_hd_request>
}
   17f8f:	90                   	nop
   17f90:	83 c4 04             	add    $0x4,%esp
   17f93:	5b                   	pop    %ebx
   17f94:	5e                   	pop    %esi
   17f95:	c3                   	ret    

00017f96 <unexpected_hd_interrupt>:

// 意外硬盘中断调用函数
// 发生意外硬盘中断时,硬盘中断处理程序中调用的默认C处理函数.在被调用函数指针为NULL时调用该函数.该函数在显示警告信息后设置复位标志reset,然后继续调用请求项函数
// do_hd_request()并在其中执行复位处理操作.
void unexpected_hd_interrupt(void)
{
   17f96:	83 ec 0c             	sub    $0xc,%esp
	printk("Unexpected HD interrupt\n\r");
   17f99:	83 ec 0c             	sub    $0xc,%esp
   17f9c:	68 1b 41 02 00       	push   $0x2411b
   17fa1:	e8 a1 0c ff ff       	call   8c47 <printk>
   17fa6:	83 c4 10             	add    $0x10,%esp
	reset = 1;
   17fa9:	c7 05 d4 11 03 00 01 	movl   $0x1,0x311d4
   17fb0:	00 00 00 
	do_hd_request();
   17fb3:	e8 0a 02 00 00       	call   181c2 <do_hd_request>
}
   17fb8:	90                   	nop
   17fb9:	83 c4 0c             	add    $0xc,%esp
   17fbc:	c3                   	ret    

00017fbd <bad_rw_intr>:

// 读写硬盘失败处理调用函数
// 如果读扇区时的出错次数大于或等于7次时,则结束当前请求项并唤醒等待该请求的进程,而且对应缓冲区更新标志复位,表示数据没有更新.如果读写一扇区时的出错次数已经大于
// 3次,则要求执行复位硬盘控制器操作(设置复位标志).
static void bad_rw_intr(void)
{
   17fbd:	83 ec 0c             	sub    $0xc,%esp
	if (++CURRENT->errors >= MAX_ERRORS)
   17fc0:	a1 1c 11 03 00       	mov    0x3111c,%eax
   17fc5:	8b 50 08             	mov    0x8(%eax),%edx
   17fc8:	83 c2 01             	add    $0x1,%edx
   17fcb:	89 50 08             	mov    %edx,0x8(%eax)
   17fce:	8b 40 08             	mov    0x8(%eax),%eax
   17fd1:	83 f8 06             	cmp    $0x6,%eax
   17fd4:	7e 0d                	jle    17fe3 <bad_rw_intr+0x26>
		end_request(0);
   17fd6:	83 ec 0c             	sub    $0xc,%esp
   17fd9:	6a 00                	push   $0x0
   17fdb:	e8 e0 f6 ff ff       	call   176c0 <end_request>
   17fe0:	83 c4 10             	add    $0x10,%esp
	if (CURRENT->errors > MAX_ERRORS / 2)
   17fe3:	a1 1c 11 03 00       	mov    0x3111c,%eax
   17fe8:	8b 40 08             	mov    0x8(%eax),%eax
   17feb:	83 f8 03             	cmp    $0x3,%eax
   17fee:	7e 0a                	jle    17ffa <bad_rw_intr+0x3d>
		reset = 1;
   17ff0:	c7 05 d4 11 03 00 01 	movl   $0x1,0x311d4
   17ff7:	00 00 00 
}
   17ffa:	90                   	nop
   17ffb:	83 c4 0c             	add    $0xc,%esp
   17ffe:	c3                   	ret    

00017fff <read_intr>:
// 读操作中断调用函数.
// 该函数将在硬盘读命令结束时引发的硬盘中断过程中调用.
// 在读命令执行后会产生硬盘中断信号,并执行硬盘中断处理程序,此时在硬盘中断处理程序调用的C函数指针do_hd已经指向read_intr(),因此会在一次读扇区操作完成(或出错)
// 后就会执行该函数.
static void read_intr(void)
{
   17fff:	57                   	push   %edi
   18000:	83 ec 08             	sub    $0x8,%esp
	// 该函数首先判断此次读命令操作是否出错.若命令结束后控制器还处于忙状态,或者命令执行错误,则处理硬盘操作失败的问题,接着再次请求硬盘作复位处理并执行其他请求项.然后
	// 返回.每次读操作出错都会对当前请求项作出错次数累计,若出错次数不到最大允许出错次数一半,则会先执行硬盘复位操作,然后再执行本次请求项处理.若出错次数已经大于等于
	// 最大允许出错次数MAX_ERRORS(7次),则结束本次请求项的处理而去处理队列中下一个请求项.
	if (win_result()) {									// 若控制器忙,读写错或命令执行错,则进行读写硬盘失败处理.
   18003:	e8 60 fc ff ff       	call   17c68 <win_result>
   18008:	85 c0                	test   %eax,%eax
   1800a:	74 0f                	je     1801b <read_intr+0x1c>
		bad_rw_intr();
   1800c:	e8 ac ff ff ff       	call   17fbd <bad_rw_intr>
		do_hd_request();								// 再次请求硬盘作相应(复位)处理.
   18011:	e8 ac 01 00 00       	call   181c2 <do_hd_request>
		return;
   18016:	e9 86 00 00 00       	jmp    180a1 <read_intr+0xa2>
	}
	// 如果读命令没有出错,则从数据寄存器端口把1扇区的数据读到请求项的缓冲区中,并且递减请求项所需读取的扇区数值.若递减后不等于0,表示本项请求还有数据没取完,于是再次置中断
	// 调用C函数指针do_hd为read_intr()并直接返回,等待硬盘在读出另1个扇区数据后发出中断并再次调用本函数.
	// 注意:281行语句中的256是指内存字,即512字节.
	// 注意:262行再次置do_hd指针指向read_intr()是因为硬盘中断处理程序每次调用do_hd时都会将该函数指针置空.
	port_read(HD_DATA, CURRENT->buffer, 256);			// 读数据到请求结构缓冲区.
   1801b:	a1 1c 11 03 00       	mov    0x3111c,%eax
   18020:	8b 40 14             	mov    0x14(%eax),%eax
   18023:	ba f0 01 00 00       	mov    $0x1f0,%edx
   18028:	b9 00 01 00 00       	mov    $0x100,%ecx
   1802d:	89 c7                	mov    %eax,%edi
   1802f:	fc                   	cld    
   18030:	f3 66 6d             	rep insw (%dx),%es:(%edi)
	CURRENT->errors = 0;								// 清出错次数
   18033:	a1 1c 11 03 00       	mov    0x3111c,%eax
   18038:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	CURRENT->buffer += 512;								// 高速缓冲区指针,指向新的空区.
   1803f:	a1 1c 11 03 00       	mov    0x3111c,%eax
   18044:	8b 15 1c 11 03 00    	mov    0x3111c,%edx
   1804a:	8b 52 14             	mov    0x14(%edx),%edx
   1804d:	81 c2 00 02 00 00    	add    $0x200,%edx
   18053:	89 50 14             	mov    %edx,0x14(%eax)
	CURRENT->sector++;									// 起始扇区号加1.
   18056:	a1 1c 11 03 00       	mov    0x3111c,%eax
   1805b:	8b 50 0c             	mov    0xc(%eax),%edx
   1805e:	83 c2 01             	add    $0x1,%edx
   18061:	89 50 0c             	mov    %edx,0xc(%eax)
	if (--CURRENT->nr_sectors) {						// 如果所需读出的扇区数还没读完,则再置硬盘调用C函数指针为read_intr().
   18064:	a1 1c 11 03 00       	mov    0x3111c,%eax
   18069:	8b 50 10             	mov    0x10(%eax),%edx
   1806c:	83 ea 01             	sub    $0x1,%edx
   1806f:	89 50 10             	mov    %edx,0x10(%eax)
   18072:	8b 40 10             	mov    0x10(%eax),%eax
   18075:	85 c0                	test   %eax,%eax
   18077:	74 16                	je     1808f <read_intr+0x90>
		SET_INTR(&read_intr);
   18079:	c7 05 80 11 03 00 ff 	movl   $0x17fff,0x31180
   18080:	7f 01 00 
   18083:	c7 05 84 11 03 00 c8 	movl   $0xc8,0x31184
   1808a:	00 00 00 
		return;
   1808d:	eb 12                	jmp    180a1 <read_intr+0xa2>
	}
	// 执行到此,说明本次请求项的全部扇区数据已经读完,则调用end_request()函数去处理请求项结束事宜.最后再次调用do_hd_request(),去处理其他硬盘请求项.执行其他硬盘
	// 请求操作.
	end_request(1);										// 数据已更新标志置位(1).
   1808f:	83 ec 0c             	sub    $0xc,%esp
   18092:	6a 01                	push   $0x1
   18094:	e8 27 f6 ff ff       	call   176c0 <end_request>
   18099:	83 c4 10             	add    $0x10,%esp
	do_hd_request();
   1809c:	e8 21 01 00 00       	call   181c2 <do_hd_request>
}
   180a1:	83 c4 08             	add    $0x8,%esp
   180a4:	5f                   	pop    %edi
   180a5:	c3                   	ret    

000180a6 <write_intr>:

// 写扇区中断调用函数
// 该函数将在硬盘写命令结束引发的硬盘中断过程中被调用.函数功能与read_intr()类似.在写命令执行后会产生硬盘中断信号,并执行硬盘中断处理程序,此时在硬盘中断处理程序中
// 调用的C函数指针do_hd已经指向write_intr(),因此会在一次写扇区操作完成(或出错)后就会执行该函数.
static void write_intr(void)
{
   180a6:	56                   	push   %esi
   180a7:	83 ec 08             	sub    $0x8,%esp
	// 该函数首先判断此次写命令操作是否出错.若命令结束后控制器还处于忙状态,或者命令执行错误,则处理硬盘操作失败问题,接着再次请求硬盘作复位处理并执行其他请求项.然后返回.
	// 在bad_rw_intr()函数中,每次操作出错都会对当前请求项作出错次数累计,若出错次数不到最大允许出错次数的一半,则会先执行硬盘复位操作,然后再执行本次请求项处理.若出错
	// 次数已经大于等于最大允许出错次数MAX_ERRORS(7次),则结束本次请求项的处理而去处理队列中下一个请求项.do_hd_request()中会根据当时具体的标志状态来判别是否需要先执
	// 行复位,重新校正等操作,然后再继续或处理下一个请求项.
	if (win_result()) {									// 如果硬盘控制器返回错误信息,则首先进行硬盘读写失败处理,再次请求硬盘作相应(复位)处理.
   180aa:	e8 b9 fb ff ff       	call   17c68 <win_result>
   180af:	85 c0                	test   %eax,%eax
   180b1:	74 0c                	je     180bf <write_intr+0x19>
		bad_rw_intr();
   180b3:	e8 05 ff ff ff       	call   17fbd <bad_rw_intr>
		do_hd_request();
   180b8:	e8 05 01 00 00       	call   181c2 <do_hd_request>
		return;
   180bd:	eb 7a                	jmp    18139 <write_intr+0x93>
	}
	// 此时说明本次写一扇区操作成功,因为将欲写扇区数减1.若其不为0,则说明还有扇区要写,于是把当前请求起始扇区号+1,并调整请求项数据缓冲区指针指向下一块欲写的数据.然后再重置
	// 硬盘中断处理程序中调用的C函数指针do_hd(指向本函数).接着向控制器数据端口写入512字节数据,然后函数返回去等待控制器把些数据写入硬盘后产生的中断.
	if (--CURRENT->nr_sectors) {						// 若还有扇区要写,则
   180bf:	a1 1c 11 03 00       	mov    0x3111c,%eax
   180c4:	8b 50 10             	mov    0x10(%eax),%edx
   180c7:	83 ea 01             	sub    $0x1,%edx
   180ca:	89 50 10             	mov    %edx,0x10(%eax)
   180cd:	8b 40 10             	mov    0x10(%eax),%eax
   180d0:	85 c0                	test   %eax,%eax
   180d2:	74 53                	je     18127 <write_intr+0x81>
		CURRENT->sector++;								// 当前请求起始扇区号+1,
   180d4:	a1 1c 11 03 00       	mov    0x3111c,%eax
   180d9:	8b 50 0c             	mov    0xc(%eax),%edx
   180dc:	83 c2 01             	add    $0x1,%edx
   180df:	89 50 0c             	mov    %edx,0xc(%eax)
		CURRENT->buffer += 512;							// 调整请求缓冲区指针,
   180e2:	a1 1c 11 03 00       	mov    0x3111c,%eax
   180e7:	8b 15 1c 11 03 00    	mov    0x3111c,%edx
   180ed:	8b 52 14             	mov    0x14(%edx),%edx
   180f0:	81 c2 00 02 00 00    	add    $0x200,%edx
   180f6:	89 50 14             	mov    %edx,0x14(%eax)
		SET_INTR(&write_intr);							// do_hd置函数指针为write_intr().
   180f9:	c7 05 80 11 03 00 a6 	movl   $0x180a6,0x31180
   18100:	80 01 00 
   18103:	c7 05 84 11 03 00 c8 	movl   $0xc8,0x31184
   1810a:	00 00 00 
		port_write(HD_DATA, CURRENT->buffer, 256);		// 向数据端口写256字.
   1810d:	a1 1c 11 03 00       	mov    0x3111c,%eax
   18112:	8b 40 14             	mov    0x14(%eax),%eax
   18115:	ba f0 01 00 00       	mov    $0x1f0,%edx
   1811a:	b9 00 01 00 00       	mov    $0x100,%ecx
   1811f:	89 c6                	mov    %eax,%esi
   18121:	fc                   	cld    
   18122:	f3 66 6f             	rep outsw %ds:(%esi),(%dx)
		return;
   18125:	eb 12                	jmp    18139 <write_intr+0x93>
	}
	// 若本次请求项的全部扇区数据已经写完,则调用end_request()函数去处理请求项结束事宜.最后再次调用do_hd_requrest(),去处理其他硬盘请求项.执行其他硬盘请求操作.
	end_request(1);										// 处理请求结束事宜(已设置更新标志).
   18127:	83 ec 0c             	sub    $0xc,%esp
   1812a:	6a 01                	push   $0x1
   1812c:	e8 8f f5 ff ff       	call   176c0 <end_request>
   18131:	83 c4 10             	add    $0x10,%esp
	do_hd_request();									// 执行其他硬盘请求操作.
   18134:	e8 89 00 00 00       	call   181c2 <do_hd_request>
}
   18139:	83 c4 08             	add    $0x8,%esp
   1813c:	5e                   	pop    %esi
   1813d:	c3                   	ret    

0001813e <recal_intr>:
// 该函数会在硬盘执行重新校正操作而引发的硬盘中断中被调用.
// 如果硬盘控制器返回错误信息,则函数首先进行硬盘读写失败处理,然后请求硬盘作相应(复位)处理.在bad_rw_intr()函数中,每次操作出错都会对当前请求项作出错次数累计,若出错次数
// 不到最大允许出错次数一半,则会先执行硬盘复位操作,然后再执行本次请求项处理.若出错次数已经大于等于最大允许出错次数MAX_ERRORS(7次),则结束本次请求项的处理而去处理队列中
// 下一个请求项.do_hd_request()中根据当时具体的标志状态来判别是否需要先执行复位,重新校正等操作,然后再继续或处理下一请求项.
static void recal_intr(void)
{
   1813e:	83 ec 0c             	sub    $0xc,%esp
	if (win_result())									// 若返回出错,则调用bad_rw_intr().
   18141:	e8 22 fb ff ff       	call   17c68 <win_result>
   18146:	85 c0                	test   %eax,%eax
   18148:	74 05                	je     1814f <recal_intr+0x11>
		bad_rw_intr();
   1814a:	e8 6e fe ff ff       	call   17fbd <bad_rw_intr>
	do_hd_request();
   1814f:	e8 6e 00 00 00       	call   181c2 <do_hd_request>
}
   18154:	90                   	nop
   18155:	83 c4 0c             	add    $0xc,%esp
   18158:	c3                   	ret    

00018159 <hd_times_out>:
// 硬盘操作超时处理
// 本函数会在do_timer()中(kernel/sched.c)被调用.在向硬盘控制器发送了一个命令后,若在经过了hd_timeout个系统滴答后控制器还没有发出一个硬盘中断信号,则说明控制器(或
// 硬盘)操作超时.此时do_timer()就会调用本函数设置复位标志reset并调用do_hd_request()执行复位处理.若在预定时间内(200滴答)硬盘控制器发出了硬盘中断并开始执行硬盘中断
// 处理程序,那么hd_timeout值就会在中断处理程序中被置0.此时do_timer()就会跳过本函数.
void hd_times_out(void)
{
   18159:	83 ec 0c             	sub    $0xc,%esp
	// 如果当前并没有请求项要处理(设备请求项指针为NULL),则无超时可言,直接返回.否则先显示警告信息,然后判断当前请求项执行过程中发生的出错次数是否已经大于设定值MAX_ERRORS(7).
	// 如果是则以失败形式结束本次请求项的处理(不设置数据更新标志).然后把中断过程中调用的C函数指针do_hd置空,并设置复位标志reset,继而在请求项处理函数do_hd_request()中去
	// 执行复位操作.
	if (!CURRENT)
   1815c:	a1 1c 11 03 00       	mov    0x3111c,%eax
   18161:	85 c0                	test   %eax,%eax
   18163:	74 58                	je     181bd <hd_times_out+0x64>
		return;
	printk("HD timeout");
   18165:	83 ec 0c             	sub    $0xc,%esp
   18168:	68 35 41 02 00       	push   $0x24135
   1816d:	e8 d5 0a ff ff       	call   8c47 <printk>
   18172:	83 c4 10             	add    $0x10,%esp
	if (++CURRENT->errors >= MAX_ERRORS)
   18175:	a1 1c 11 03 00       	mov    0x3111c,%eax
   1817a:	8b 50 08             	mov    0x8(%eax),%edx
   1817d:	83 c2 01             	add    $0x1,%edx
   18180:	89 50 08             	mov    %edx,0x8(%eax)
   18183:	8b 40 08             	mov    0x8(%eax),%eax
   18186:	83 f8 06             	cmp    $0x6,%eax
   18189:	7e 0d                	jle    18198 <hd_times_out+0x3f>
		end_request(0);
   1818b:	83 ec 0c             	sub    $0xc,%esp
   1818e:	6a 00                	push   $0x0
   18190:	e8 2b f5 ff ff       	call   176c0 <end_request>
   18195:	83 c4 10             	add    $0x10,%esp
	SET_INTR(NULL);										// 令do_hd = NULL,time_out=200
   18198:	c7 05 80 11 03 00 00 	movl   $0x0,0x31180
   1819f:	00 00 00 
   181a2:	c7 05 84 11 03 00 c8 	movl   $0xc8,0x31184
   181a9:	00 00 00 
	reset = 1;											// 设置复位标志.
   181ac:	c7 05 d4 11 03 00 01 	movl   $0x1,0x311d4
   181b3:	00 00 00 
	do_hd_request();
   181b6:	e8 07 00 00 00       	call   181c2 <do_hd_request>
   181bb:	eb 01                	jmp    181be <hd_times_out+0x65>
{
	// 如果当前并没有请求项要处理(设备请求项指针为NULL),则无超时可言,直接返回.否则先显示警告信息,然后判断当前请求项执行过程中发生的出错次数是否已经大于设定值MAX_ERRORS(7).
	// 如果是则以失败形式结束本次请求项的处理(不设置数据更新标志).然后把中断过程中调用的C函数指针do_hd置空,并设置复位标志reset,继而在请求项处理函数do_hd_request()中去
	// 执行复位操作.
	if (!CURRENT)
		return;
   181bd:	90                   	nop
	if (++CURRENT->errors >= MAX_ERRORS)
		end_request(0);
	SET_INTR(NULL);										// 令do_hd = NULL,time_out=200
	reset = 1;											// 设置复位标志.
	do_hd_request();
}
   181be:	83 c4 0c             	add    $0xc,%esp
   181c1:	c3                   	ret    

000181c2 <do_hd_request>:
// 该函数根据设备当前请求项中的设备号和起始扇区号信息首先计算到对应硬盘上的柱面号,当前磁道中扇区号,磁头号数据,然后再根据请求项中的命令(READ/WRITE)对硬盘发送相应读/写命令
// 若控制器复位标志或硬盘重新校正已被置位,那么首先会执行复位或重新校正操作.
// 若请求项此时是块设备的第1个(原来设备空闲),则块设备当前请求项指针会直接指向该请求项(参见ll_rw_blk.c),并会立刻调用本函数执行读写操作.否则在一个读写操作完成而引发的硬盘
// 中断过程,若还有请求项需要处理,则也会在硬盘中断过程中调用本函数
void do_hd_request(void)
{
   181c2:	56                   	push   %esi
   181c3:	83 ec 38             	sub    $0x38,%esp

	// 函数首先检测请求项的合法性.若请求队列中已没有请求项则退出(参见blk.h)
	// 然后取设备号中的子设备号以及设备当前请求项中的起始扇区号.子设备号即对应硬盘上各分区.如果子设备号不存在或者起始扇区大于该分区扇区数-2,则结束该请求项,并跳转到标号repeat处(定义
	// 在INIT_REQUEST开始处).因为次要求读写一块数据(2个扇区,即1024字节),所以请求的扇区号不能大于分区中最后倒数第二个扇区号.然后通过加上子设备号对应分区的起始扇区号,就把需要读写的
	// 块对应到整个硬盘的绝对扇区号block上.而子设备号被5整除即可得到对应的硬盘号.
	INIT_REQUEST;
   181c6:	a1 1c 11 03 00       	mov    0x3111c,%eax
   181cb:	85 c0                	test   %eax,%eax
   181cd:	75 19                	jne    181e8 <do_hd_request+0x26>
   181cf:	c7 05 80 11 03 00 00 	movl   $0x0,0x31180
   181d6:	00 00 00 
   181d9:	c7 05 84 11 03 00 00 	movl   $0x0,0x31184
   181e0:	00 00 00 
   181e3:	e9 87 02 00 00       	jmp    1846f <do_hd_request+0x2ad>
   181e8:	a1 1c 11 03 00       	mov    0x3111c,%eax
   181ed:	8b 00                	mov    (%eax),%eax
   181ef:	c1 e8 08             	shr    $0x8,%eax
   181f2:	83 f8 03             	cmp    $0x3,%eax
   181f5:	74 10                	je     18207 <do_hd_request+0x45>
   181f7:	83 ec 0c             	sub    $0xc,%esp
   181fa:	68 40 41 02 00       	push   $0x24140
   181ff:	e8 04 0a ff ff       	call   8c08 <panic>
   18204:	83 c4 10             	add    $0x10,%esp
   18207:	a1 1c 11 03 00       	mov    0x3111c,%eax
   1820c:	8b 40 1c             	mov    0x1c(%eax),%eax
   1820f:	85 c0                	test   %eax,%eax
   18211:	74 20                	je     18233 <do_hd_request+0x71>
   18213:	a1 1c 11 03 00       	mov    0x3111c,%eax
   18218:	8b 40 1c             	mov    0x1c(%eax),%eax
   1821b:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   1821f:	84 c0                	test   %al,%al
   18221:	75 10                	jne    18233 <do_hd_request+0x71>
   18223:	83 ec 0c             	sub    $0xc,%esp
   18226:	68 61 41 02 00       	push   $0x24161
   1822b:	e8 d8 09 ff ff       	call   8c08 <panic>
   18230:	83 c4 10             	add    $0x10,%esp
 	dev = MINOR(CURRENT->dev);
   18233:	a1 1c 11 03 00       	mov    0x3111c,%eax
   18238:	8b 00                	mov    (%eax),%eax
   1823a:	25 ff 00 00 00       	and    $0xff,%eax
   1823f:	89 44 24 24          	mov    %eax,0x24(%esp)
	block = CURRENT->sector;						// 请求的起始扇区.
   18243:	a1 1c 11 03 00       	mov    0x3111c,%eax
   18248:	8b 40 0c             	mov    0xc(%eax),%eax
   1824b:	89 44 24 20          	mov    %eax,0x20(%esp)
	if (dev >= 5 * NR_HD || block + 2 > hd[dev].nr_sects) {
   1824f:	8b 15 d8 11 03 00    	mov    0x311d8,%edx
   18255:	89 d0                	mov    %edx,%eax
   18257:	c1 e0 02             	shl    $0x2,%eax
   1825a:	01 d0                	add    %edx,%eax
   1825c:	3b 44 24 24          	cmp    0x24(%esp),%eax
   18260:	76 16                	jbe    18278 <do_hd_request+0xb6>
   18262:	8b 44 24 20          	mov    0x20(%esp),%eax
   18266:	8d 50 02             	lea    0x2(%eax),%edx
   18269:	8b 44 24 24          	mov    0x24(%esp),%eax
   1826d:	8b 04 c5 e4 11 03 00 	mov    0x311e4(,%eax,8),%eax
   18274:	39 c2                	cmp    %eax,%edx
   18276:	76 12                	jbe    1828a <do_hd_request+0xc8>
		end_request(0);
   18278:	83 ec 0c             	sub    $0xc,%esp
   1827b:	6a 00                	push   $0x0
   1827d:	e8 3e f4 ff ff       	call   176c0 <end_request>
   18282:	83 c4 10             	add    $0x10,%esp
		goto repeat;								// 该标号在blk.h最后面.
   18285:	e9 3c ff ff ff       	jmp    181c6 <do_hd_request+0x4>
	}
	block += hd[dev].start_sect;
   1828a:	8b 44 24 24          	mov    0x24(%esp),%eax
   1828e:	8b 04 c5 e0 11 03 00 	mov    0x311e0(,%eax,8),%eax
   18295:	01 44 24 20          	add    %eax,0x20(%esp)
	dev /= 5;										// 此时dev代表硬盘号(硬盘0还是硬盘1)
   18299:	8b 44 24 24          	mov    0x24(%esp),%eax
   1829d:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   182a2:	f7 e2                	mul    %edx
   182a4:	89 d0                	mov    %edx,%eax
   182a6:	c1 e8 02             	shr    $0x2,%eax
   182a9:	89 44 24 24          	mov    %eax,0x24(%esp)
	// 数和硬盘磁头数来计算这些数据.计算方法为:初始时eax是扇区号block,edx中置0.divl指令把edx:eax组成的扇区号除以每磁道扇区数(hd_info[dev].sect),所得整数商值在eax中,余数在edx
	// 中.其中eax中是到指定位置的对应总磁道数(所有磁头面),edx中是当前磁道上的扇区号.348-349行代码初始时eax是计算出的对应总磁道数,edx中置0.divl指令把edx:eax的对应总磁道数除以硬盘
	// 总磁头数(hd_info[dev].head),在eax中得到的整除值是柱面号(cyl),edx得到的余数就是对应得当前磁头号(head).
	// 对应总磁道数 * 每磁道扇区数 + 当前磁道上的扇区号 = 绝对扇区号
	__asm__("divl %4":"=a" (block), "=d" (sec):"0" (block), "1" (0),
		"r" (hd_info[dev].sect));
   182ad:	8b 54 24 24          	mov    0x24(%esp),%edx
   182b1:	89 d0                	mov    %edx,%eax
   182b3:	01 c0                	add    %eax,%eax
   182b5:	01 d0                	add    %edx,%eax
   182b7:	c1 e0 03             	shl    $0x3,%eax
   182ba:	05 a4 11 03 00       	add    $0x311a4,%eax
   182bf:	8b 08                	mov    (%eax),%ecx
	// 然后根据求得的绝对扇区号block和硬盘号dev,我们就可以计算出对应硬盘中的磁道中扇区号(sec),所在柱面号(cyl)和磁头号(head).下面嵌入的汇编代码即用来根据硬盘信息结构中的每磁道扇区
	// 数和硬盘磁头数来计算这些数据.计算方法为:初始时eax是扇区号block,edx中置0.divl指令把edx:eax组成的扇区号除以每磁道扇区数(hd_info[dev].sect),所得整数商值在eax中,余数在edx
	// 中.其中eax中是到指定位置的对应总磁道数(所有磁头面),edx中是当前磁道上的扇区号.348-349行代码初始时eax是计算出的对应总磁道数,edx中置0.divl指令把edx:eax的对应总磁道数除以硬盘
	// 总磁头数(hd_info[dev].head),在eax中得到的整除值是柱面号(cyl),edx得到的余数就是对应得当前磁头号(head).
	// 对应总磁道数 * 每磁道扇区数 + 当前磁道上的扇区号 = 绝对扇区号
	__asm__("divl %4":"=a" (block), "=d" (sec):"0" (block), "1" (0),
   182c1:	8b 44 24 20          	mov    0x20(%esp),%eax
   182c5:	ba 00 00 00 00       	mov    $0x0,%edx
   182ca:	f7 f1                	div    %ecx
   182cc:	89 44 24 20          	mov    %eax,0x20(%esp)
   182d0:	89 54 24 1c          	mov    %edx,0x1c(%esp)
		"r" (hd_info[dev].sect));
	// 总磁头数 * 柱面号 + 磁头号 = 对应总磁道数
	__asm__("divl %4":"=a" (cyl), "=d" (head):"0" (block), "1" (0),
		"r" (hd_info[dev].head));
   182d4:	8b 54 24 24          	mov    0x24(%esp),%edx
   182d8:	89 d0                	mov    %edx,%eax
   182da:	01 c0                	add    %eax,%eax
   182dc:	01 d0                	add    %edx,%eax
   182de:	c1 e0 03             	shl    $0x3,%eax
   182e1:	05 a0 11 03 00       	add    $0x311a0,%eax
   182e6:	8b 08                	mov    (%eax),%ecx
	// 总磁头数(hd_info[dev].head),在eax中得到的整除值是柱面号(cyl),edx得到的余数就是对应得当前磁头号(head).
	// 对应总磁道数 * 每磁道扇区数 + 当前磁道上的扇区号 = 绝对扇区号
	__asm__("divl %4":"=a" (block), "=d" (sec):"0" (block), "1" (0),
		"r" (hd_info[dev].sect));
	// 总磁头数 * 柱面号 + 磁头号 = 对应总磁道数
	__asm__("divl %4":"=a" (cyl), "=d" (head):"0" (block), "1" (0),
   182e8:	8b 44 24 20          	mov    0x20(%esp),%eax
   182ec:	ba 00 00 00 00       	mov    $0x0,%edx
   182f1:	f7 f1                	div    %ecx
   182f3:	89 44 24 18          	mov    %eax,0x18(%esp)
   182f7:	89 54 24 14          	mov    %edx,0x14(%esp)
		"r" (hd_info[dev].head));
	sec++;											// 对计算所得当前磁道扇区号进行调整.
   182fb:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
	nsect = CURRENT->nr_sectors;					// 预读/写的扇区数.
   18300:	a1 1c 11 03 00       	mov    0x3111c,%eax
   18305:	8b 40 10             	mov    0x10(%eax),%eax
   18308:	89 44 24 10          	mov    %eax,0x10(%esp)
	// 此时我们得到了欲读写的硬盘起始扇区block所对应的硬盘上柱面号(cyl),在当前磁道上的扇区号(sec),磁头号(head)以及欲读写的总扇区数(nsect).接着我们可以根据这些信息向硬盘控制器发送I/O
	// 操作信息了.但在发送之前我们还需要先看看是否有复位控制器状态和重新校正硬盘的标志.通常在复位操作之后都需要重新校正硬盘磁头位置.若这些标志已被置位,则说明前面的硬盘操作可能出现了一些问题
	// 或者现在是系统第一次硬盘读写操作等情况.于是我们就需要重新复位硬盘或控制器并重新校正硬盘.
	// 如果此时复位标志reset是置位的,则需要执行复位操作.复位硬盘和控制器,并置硬盘需要重新校正标志,返回.reset_hd()将首先向硬盘控制器发送复位(重新校正)命令,然后发送硬盘控制命令"
	// 建立驱动器参数".
	if (reset) {
   1830c:	a1 d4 11 03 00       	mov    0x311d4,%eax
   18311:	85 c0                	test   %eax,%eax
   18313:	74 14                	je     18329 <do_hd_request+0x167>
		recalibrate = 1;							// 置需重新校正标志.
   18315:	c7 05 d0 11 03 00 01 	movl   $0x1,0x311d0
   1831c:	00 00 00 
		reset_hd();
   1831f:	e8 80 fb ff ff       	call   17ea4 <reset_hd>
		return;
   18324:	e9 46 01 00 00       	jmp    1846f <do_hd_request+0x2ad>
	}
	// 如果此时重新校正标志(recalibrate)是置位的,则首先复位该标志,然后向硬盘控制器发送重新校正命令.该命令会执行寻道操作,让处于任何地方的磁头移动到0柱面.
	if (recalibrate) {
   18329:	a1 d0 11 03 00       	mov    0x311d0,%eax
   1832e:	85 c0                	test   %eax,%eax
   18330:	74 58                	je     1838a <do_hd_request+0x1c8>
		recalibrate = 0;
   18332:	c7 05 d0 11 03 00 00 	movl   $0x0,0x311d0
   18339:	00 00 00 
		hd_out(dev, hd_info[CURRENT_DEV].sect, 0, 0, 0,
   1833c:	a1 1c 11 03 00       	mov    0x3111c,%eax
   18341:	8b 00                	mov    (%eax),%eax
   18343:	0f b6 c8             	movzbl %al,%ecx
   18346:	ba 67 66 66 66       	mov    $0x66666667,%edx
   1834b:	89 c8                	mov    %ecx,%eax
   1834d:	f7 ea                	imul   %edx
   1834f:	d1 fa                	sar    %edx
   18351:	89 c8                	mov    %ecx,%eax
   18353:	c1 f8 1f             	sar    $0x1f,%eax
   18356:	29 c2                	sub    %eax,%edx
   18358:	89 d0                	mov    %edx,%eax
   1835a:	01 c0                	add    %eax,%eax
   1835c:	01 d0                	add    %edx,%eax
   1835e:	c1 e0 03             	shl    $0x3,%eax
   18361:	05 a4 11 03 00       	add    $0x311a4,%eax
   18366:	8b 00                	mov    (%eax),%eax
   18368:	83 ec 04             	sub    $0x4,%esp
   1836b:	68 3e 81 01 00       	push   $0x1813e
   18370:	6a 10                	push   $0x10
   18372:	6a 00                	push   $0x0
   18374:	6a 00                	push   $0x0
   18376:	6a 00                	push   $0x0
   18378:	50                   	push   %eax
   18379:	ff 74 24 40          	pushl  0x40(%esp)
   1837d:	e8 46 f9 ff ff       	call   17cc8 <hd_out>
   18382:	83 c4 20             	add    $0x20,%esp
			WIN_RESTORE, &recal_intr);
		return;
   18385:	e9 e5 00 00 00       	jmp    1846f <do_hd_request+0x2ad>
	}
	// 如果以上两个标志都没有置位,那么我们就可以开始向硬盘控制器发送真正的数据读/写操作命令了.如果当前请求是写扇区操作,则发送命令,循环读取状态寄存器信息并判断请求服务标志DRQ_STAT是否
	// 置位.DRQ_STAT是硬盘状态寄存器的请求服务位表示驱动器已经准备好在主机和数据端口之间传输一个字或一个字节的数据.如果请求服务DRQ置位则退出循环.若等到循环结束也没有置位,则表示发送的
	// 要求写硬盘命令失败,于是跳转去处理出现在问题或继续执行下一个硬盘请求.否则我们可以向硬盘控制器数据寄存器端口HD_DATA写入1个扇区的数据.
	if (CURRENT->cmd == WRITE) {
   1838a:	a1 1c 11 03 00       	mov    0x3111c,%eax
   1838f:	8b 40 04             	mov    0x4(%eax),%eax
   18392:	83 f8 01             	cmp    $0x1,%eax
   18395:	0f 85 90 00 00 00    	jne    1842b <do_hd_request+0x269>
		hd_out(dev, nsect, sec, head, cyl, WIN_WRITE, &write_intr);
   1839b:	83 ec 04             	sub    $0x4,%esp
   1839e:	68 a6 80 01 00       	push   $0x180a6
   183a3:	6a 30                	push   $0x30
   183a5:	ff 74 24 24          	pushl  0x24(%esp)
   183a9:	ff 74 24 24          	pushl  0x24(%esp)
   183ad:	ff 74 24 30          	pushl  0x30(%esp)
   183b1:	ff 74 24 28          	pushl  0x28(%esp)
   183b5:	ff 74 24 40          	pushl  0x40(%esp)
   183b9:	e8 0a f9 ff ff       	call   17cc8 <hd_out>
   183be:	83 c4 20             	add    $0x20,%esp
		for(i = 0 ; i < 10000 && !(r = inb_p(HD_STATUS) & DRQ_STAT) ; i++)
   183c1:	c7 44 24 2c 00 00 00 	movl   $0x0,0x2c(%esp)
   183c8:	00 
   183c9:	eb 05                	jmp    183d0 <do_hd_request+0x20e>
   183cb:	83 44 24 2c 01       	addl   $0x1,0x2c(%esp)
   183d0:	81 7c 24 2c 0f 27 00 	cmpl   $0x270f,0x2c(%esp)
   183d7:	00 
   183d8:	7f 26                	jg     18400 <do_hd_request+0x23e>
   183da:	b8 f7 01 00 00       	mov    $0x1f7,%eax
   183df:	89 c2                	mov    %eax,%edx
   183e1:	ec                   	in     (%dx),%al
   183e2:	eb 00                	jmp    183e4 <do_hd_request+0x222>
   183e4:	eb 00                	jmp    183e6 <do_hd_request+0x224>
   183e6:	88 44 24 0f          	mov    %al,0xf(%esp)
   183ea:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   183ef:	0f b6 c0             	movzbl %al,%eax
   183f2:	83 e0 08             	and    $0x8,%eax
   183f5:	89 44 24 28          	mov    %eax,0x28(%esp)
   183f9:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   183fe:	74 cb                	je     183cb <do_hd_request+0x209>
			/* nothing */ ;
		if (!r) {
   18400:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   18405:	75 0a                	jne    18411 <do_hd_request+0x24f>
			bad_rw_intr();
   18407:	e8 b1 fb ff ff       	call   17fbd <bad_rw_intr>
			goto repeat;							// 该标号在blk.h文件最后面.
   1840c:	e9 b5 fd ff ff       	jmp    181c6 <do_hd_request+0x4>
		}
		port_write(HD_DATA, CURRENT->buffer, 256);
   18411:	a1 1c 11 03 00       	mov    0x3111c,%eax
   18416:	8b 40 14             	mov    0x14(%eax),%eax
   18419:	ba f0 01 00 00       	mov    $0x1f0,%edx
   1841e:	b9 00 01 00 00       	mov    $0x100,%ecx
   18423:	89 c6                	mov    %eax,%esi
   18425:	fc                   	cld    
   18426:	f3 66 6f             	rep outsw %ds:(%esi),(%dx)
   18429:	eb 44                	jmp    1846f <do_hd_request+0x2ad>
	// 如果当前请求是读硬盘数据,则向硬盘控制器发送读扇区命令.若命令无效则停机.
	} else if (CURRENT->cmd == READ) {
   1842b:	a1 1c 11 03 00       	mov    0x3111c,%eax
   18430:	8b 40 04             	mov    0x4(%eax),%eax
   18433:	85 c0                	test   %eax,%eax
   18435:	75 28                	jne    1845f <do_hd_request+0x29d>
		hd_out(dev, nsect, sec, head, cyl, WIN_READ, &read_intr);
   18437:	83 ec 04             	sub    $0x4,%esp
   1843a:	68 ff 7f 01 00       	push   $0x17fff
   1843f:	6a 20                	push   $0x20
   18441:	ff 74 24 24          	pushl  0x24(%esp)
   18445:	ff 74 24 24          	pushl  0x24(%esp)
   18449:	ff 74 24 30          	pushl  0x30(%esp)
   1844d:	ff 74 24 28          	pushl  0x28(%esp)
   18451:	ff 74 24 40          	pushl  0x40(%esp)
   18455:	e8 6e f8 ff ff       	call   17cc8 <hd_out>
   1845a:	83 c4 20             	add    $0x20,%esp
   1845d:	eb 10                	jmp    1846f <do_hd_request+0x2ad>
	} else
		panic("unknown hd-command");
   1845f:	83 ec 0c             	sub    $0xc,%esp
   18462:	68 7c 41 02 00       	push   $0x2417c
   18467:	e8 9c 07 ff ff       	call   8c08 <panic>
   1846c:	83 c4 10             	add    $0x10,%esp
}
   1846f:	83 c4 38             	add    $0x38,%esp
   18472:	5e                   	pop    %esi
   18473:	c3                   	ret    

00018474 <hd_init>:
// 设置硬盘中断描述符,并允许硬盘控制器发送中断请求信号.
// 该函数设置硬盘设备的请求项处理函数指针为do_hd_request(),然后设置硬盘中断门描述符.hd_interrup(kernel/sys_call.s)是其中断处理过程地址.硬盘中断号为int 0x2E(46),对应8259A
// 芯片的中断请求信号IRQ13.接着复位接联的主8259A int 2屏蔽位,允许从片发出中断请求信号.再复位硬盘的中断请求屏蔽位(在从片上),允许硬盘控制器发送中断请求信号.中断描述符表IDT内中断门
// 描述符设置宏set_intr_gate()在include/asm/system.h中实现.
void hd_init(void)
{
   18474:	53                   	push   %ebx
   18475:	83 ec 10             	sub    $0x10,%esp
	blk_dev[MAJOR_NR].request_fn = DEVICE_REQUEST;				// do_hd_request().
   18478:	c7 05 18 11 03 00 c2 	movl   $0x181c2,0x31118
   1847f:	81 01 00 
	set_intr_gate(0x2E, &hd_interrupt);							// 设置中断门中处理函数指针
   18482:	b9 28 56 00 00       	mov    $0x5628,%ecx
   18487:	bb 2c 56 00 00       	mov    $0x562c,%ebx
   1848c:	ba 84 7a 00 00       	mov    $0x7a84,%edx
   18491:	b8 00 00 08 00       	mov    $0x80000,%eax
   18496:	66 89 d0             	mov    %dx,%ax
   18499:	66 ba 00 8e          	mov    $0x8e00,%dx
   1849d:	89 01                	mov    %eax,(%ecx)
   1849f:	89 13                	mov    %edx,(%ebx)
	outb_p(inb_p(0x21) & 0xfb, 0x21);							// 复位接联的主8259A int 2的屏蔽位
   184a1:	b8 21 00 00 00       	mov    $0x21,%eax
   184a6:	89 c2                	mov    %eax,%edx
   184a8:	ec                   	in     (%dx),%al
   184a9:	eb 00                	jmp    184ab <hd_init+0x37>
   184ab:	eb 00                	jmp    184ad <hd_init+0x39>
   184ad:	88 44 24 0f          	mov    %al,0xf(%esp)
   184b1:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   184b6:	0f b6 c0             	movzbl %al,%eax
   184b9:	25 fb 00 00 00       	and    $0xfb,%eax
   184be:	ba 21 00 00 00       	mov    $0x21,%edx
   184c3:	ee                   	out    %al,(%dx)
   184c4:	eb 00                	jmp    184c6 <hd_init+0x52>
   184c6:	eb 00                	jmp    184c8 <hd_init+0x54>
	outb(inb_p(0xA1) & 0xbf, 0xA1);								// 复位硬盘中断请求屏蔽位(在从片上).
   184c8:	b8 a1 00 00 00       	mov    $0xa1,%eax
   184cd:	89 c2                	mov    %eax,%edx
   184cf:	ec                   	in     (%dx),%al
   184d0:	eb 00                	jmp    184d2 <hd_init+0x5e>
   184d2:	eb 00                	jmp    184d4 <hd_init+0x60>
   184d4:	88 44 24 0e          	mov    %al,0xe(%esp)
   184d8:	0f b6 44 24 0e       	movzbl 0xe(%esp),%eax
   184dd:	0f b6 c0             	movzbl %al,%eax
   184e0:	25 bf 00 00 00       	and    $0xbf,%eax
   184e5:	ba a1 00 00 00       	mov    $0xa1,%edx
   184ea:	ee                   	out    %al,(%dx)
}
   184eb:	90                   	nop
   184ec:	83 c4 10             	add    $0x10,%esp
   184ef:	5b                   	pop    %ebx
   184f0:	c3                   	ret    

000184f1 <memcpy>:
}

// 内存块复制.从源地址src处开始复制n个字节到目的地址dest处.
// 参数:dest - 复制的目的地址,src - 复制的源地址,n - 复制字节数.
static inline void * memcpy(void * dest, const void * src, int n)
{
   184f1:	57                   	push   %edi
   184f2:	56                   	push   %esi
   184f3:	53                   	push   %ebx
__asm__(
   184f4:	8b 44 24 18          	mov    0x18(%esp),%eax
   184f8:	8b 54 24 14          	mov    0x14(%esp),%edx
   184fc:	8b 5c 24 10          	mov    0x10(%esp),%ebx
   18500:	89 c1                	mov    %eax,%ecx
   18502:	89 d6                	mov    %edx,%esi
   18504:	89 df                	mov    %ebx,%edi
   18506:	fc                   	cld    
   18507:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
	"cld\n\t"												// 清方向位
	"rep\n\t"												// 重复执行复制ecx个字节.
	"movsb"													// 从ds:[esi]到es:[edi],esi++,edi++.
	::"c" (n), "S" (src), "D" (dest)
	:);
return dest;												// 返回目的地址.
   18509:	8b 44 24 10          	mov    0x10(%esp),%eax
}
   1850d:	5b                   	pop    %ebx
   1850e:	5e                   	pop    %esi
   1850f:	5f                   	pop    %edi
   18510:	c3                   	ret    

00018511 <unlock_buffer>:
static void (DEVICE_REQUEST)(void);

// 解锁指定的缓冲块.
// 如果指定缓冲块bh并没有被上锁,则显示警告信息.否则将该缓冲块解锁,并唤醒等待该缓冲块的进程.此为内嵌函数.参数是缓冲块头指针.
static inline void unlock_buffer(struct buffer_head * bh)
{
   18511:	83 ec 0c             	sub    $0xc,%esp
	if (!bh->b_lock)
   18514:	8b 44 24 10          	mov    0x10(%esp),%eax
   18518:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   1851c:	84 c0                	test   %al,%al
   1851e:	75 10                	jne    18530 <unlock_buffer+0x1f>
		printk(DEVICE_NAME ": free buffer being unlocked\n");
   18520:	83 ec 0c             	sub    $0xc,%esp
   18523:	68 90 41 02 00       	push   $0x24190
   18528:	e8 1a 07 ff ff       	call   8c47 <printk>
   1852d:	83 c4 10             	add    $0x10,%esp
	bh->b_lock = 0;
   18530:	8b 44 24 10          	mov    0x10(%esp),%eax
   18534:	c6 40 0d 00          	movb   $0x0,0xd(%eax)
	wake_up(&bh->b_wait);
   18538:	8b 44 24 10          	mov    0x10(%esp),%eax
   1853c:	83 c0 10             	add    $0x10,%eax
   1853f:	83 ec 0c             	sub    $0xc,%esp
   18542:	50                   	push   %eax
   18543:	e8 07 ec fe ff       	call   714f <wake_up>
   18548:	83 c4 10             	add    $0x10,%esp
}
   1854b:	90                   	nop
   1854c:	83 c4 0c             	add    $0xc,%esp
   1854f:	c3                   	ret    

00018550 <end_request>:
// 参数uptodate是更新标志.
// 首先关闭指定块设备,然后检查此次读写缓冲区是否有效.如果有效则根据参数值设置缓冲区数据更新标志,并解锁该缓冲区.如果更新标志参数值是0,
// 表示此次请求项的操作失败,因此显示相关块设备IO错误信息.最后,唤醒等待该请求项的进程以及等待空闲请求项出现的进程,释放并从请求链表
// 中删除本请求项,并把当前请求项指针指向下一请求项.
static inline void end_request(int uptodate)
{
   18550:	83 ec 0c             	sub    $0xc,%esp
	DEVICE_OFF(CURRENT->dev);							// 关闭设备
	if (CURRENT->bh) {									// CURRENT为当前请求结构项指针
   18553:	a1 0c 11 03 00       	mov    0x3110c,%eax
   18558:	8b 40 1c             	mov    0x1c(%eax),%eax
   1855b:	85 c0                	test   %eax,%eax
   1855d:	74 23                	je     18582 <end_request+0x32>
		CURRENT->bh->b_uptodate = uptodate;				// 置更新标志.
   1855f:	a1 0c 11 03 00       	mov    0x3110c,%eax
   18564:	8b 40 1c             	mov    0x1c(%eax),%eax
   18567:	8b 54 24 10          	mov    0x10(%esp),%edx
   1856b:	88 50 0a             	mov    %dl,0xa(%eax)
		unlock_buffer(CURRENT->bh);						// 解锁缓冲区.
   1856e:	a1 0c 11 03 00       	mov    0x3110c,%eax
   18573:	8b 40 1c             	mov    0x1c(%eax),%eax
   18576:	83 ec 0c             	sub    $0xc,%esp
   18579:	50                   	push   %eax
   1857a:	e8 92 ff ff ff       	call   18511 <unlock_buffer>
   1857f:	83 c4 10             	add    $0x10,%esp
	}
	if (!uptodate) {									// 若更新标志为0则显示出错信息.
   18582:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   18587:	75 34                	jne    185bd <end_request+0x6d>
		printk(DEVICE_NAME " I/O error\n\r");
   18589:	83 ec 0c             	sub    $0xc,%esp
   1858c:	68 b5 41 02 00       	push   $0x241b5
   18591:	e8 b1 06 ff ff       	call   8c47 <printk>
   18596:	83 c4 10             	add    $0x10,%esp
		printk("dev %04x, block %d\n\r",CURRENT->dev,
			CURRENT->bh->b_blocknr);
   18599:	a1 0c 11 03 00       	mov    0x3110c,%eax
   1859e:	8b 40 1c             	mov    0x1c(%eax),%eax
		CURRENT->bh->b_uptodate = uptodate;				// 置更新标志.
		unlock_buffer(CURRENT->bh);						// 解锁缓冲区.
	}
	if (!uptodate) {									// 若更新标志为0则显示出错信息.
		printk(DEVICE_NAME " I/O error\n\r");
		printk("dev %04x, block %d\n\r",CURRENT->dev,
   185a1:	8b 50 04             	mov    0x4(%eax),%edx
   185a4:	a1 0c 11 03 00       	mov    0x3110c,%eax
   185a9:	8b 00                	mov    (%eax),%eax
   185ab:	83 ec 04             	sub    $0x4,%esp
   185ae:	52                   	push   %edx
   185af:	50                   	push   %eax
   185b0:	68 c9 41 02 00       	push   $0x241c9
   185b5:	e8 8d 06 ff ff       	call   8c47 <printk>
   185ba:	83 c4 10             	add    $0x10,%esp
			CURRENT->bh->b_blocknr);
	}
	wake_up(&CURRENT->waiting);							// 唤醒等待该请求项的进程.
   185bd:	a1 0c 11 03 00       	mov    0x3110c,%eax
   185c2:	83 c0 18             	add    $0x18,%eax
   185c5:	83 ec 0c             	sub    $0xc,%esp
   185c8:	50                   	push   %eax
   185c9:	e8 81 eb fe ff       	call   714f <wake_up>
   185ce:	83 c4 10             	add    $0x10,%esp
	wake_up(&wait_for_request);							// 唤醒等待空闲请求项的进程.
   185d1:	83 ec 0c             	sub    $0xc,%esp
   185d4:	68 e0 10 03 00       	push   $0x310e0
   185d9:	e8 71 eb fe ff       	call   714f <wake_up>
   185de:	83 c4 10             	add    $0x10,%esp
	CURRENT->dev = -1;									// 释放该请求项.
   185e1:	a1 0c 11 03 00       	mov    0x3110c,%eax
   185e6:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
	CURRENT = CURRENT->next;							// 指向下一请求项.
   185ec:	a1 0c 11 03 00       	mov    0x3110c,%eax
   185f1:	8b 40 20             	mov    0x20(%eax),%eax
   185f4:	a3 0c 11 03 00       	mov    %eax,0x3110c
}
   185f9:	90                   	nop
   185fa:	83 c4 0c             	add    $0xc,%esp
   185fd:	c3                   	ret    

000185fe <do_rd_request>:
// 添加到rd的链表中之后,就会调用该函数对rd当前请求项进行处理.该函数首先计算当前请求项中指定起始扇区对应虚拟盘所处内存
// 的起始位置addr和要求的扇区数对应的字节长度值len,然后根据请求项中的命令进行操作.若是写命令WRITE,就把请求项所指缓
// 冲区中的数据直接复制到内存位置addr处。若是读操作作反之。数据复制完成后即可直接调用end_request()对本次请求项作结束
// 处理。然后跳转到函数开始处再去处理下一个请求项。若已没有请求项则退出。
void do_rd_request(void)
{
   185fe:	83 ec 1c             	sub    $0x1c,%esp
	char	*addr;

	// 首先检测请求项的合法性,若已没有请求项则退出(参见blk.h).然后计算请求项处理的虚拟盘中起始扇区在物理内存中对应的地址
	// addr和占用的内存字节长度值len.下句用于取得请求项中的起始扇区对应的内存起始位置和内存长度.其中sector<<9表示
	// sector * 512,换算成字节值.CURRENT被定义为(blk_dev[MAJOR_NR].current_request).
	INIT_REQUEST;
   18601:	a1 0c 11 03 00       	mov    0x3110c,%eax
   18606:	85 c0                	test   %eax,%eax
   18608:	0f 84 25 01 00 00    	je     18733 <do_rd_request+0x135>
   1860e:	a1 0c 11 03 00       	mov    0x3110c,%eax
   18613:	8b 00                	mov    (%eax),%eax
   18615:	c1 e8 08             	shr    $0x8,%eax
   18618:	83 f8 01             	cmp    $0x1,%eax
   1861b:	74 10                	je     1862d <do_rd_request+0x2f>
   1861d:	83 ec 0c             	sub    $0xc,%esp
   18620:	68 e0 41 02 00       	push   $0x241e0
   18625:	e8 de 05 ff ff       	call   8c08 <panic>
   1862a:	83 c4 10             	add    $0x10,%esp
   1862d:	a1 0c 11 03 00       	mov    0x3110c,%eax
   18632:	8b 40 1c             	mov    0x1c(%eax),%eax
   18635:	85 c0                	test   %eax,%eax
   18637:	74 20                	je     18659 <do_rd_request+0x5b>
   18639:	a1 0c 11 03 00       	mov    0x3110c,%eax
   1863e:	8b 40 1c             	mov    0x1c(%eax),%eax
   18641:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   18645:	84 c0                	test   %al,%al
   18647:	75 10                	jne    18659 <do_rd_request+0x5b>
   18649:	83 ec 0c             	sub    $0xc,%esp
   1864c:	68 00 42 02 00       	push   $0x24200
   18651:	e8 b2 05 ff ff       	call   8c08 <panic>
   18656:	83 c4 10             	add    $0x10,%esp
	addr = rd_start + (CURRENT->sector << 9);
   18659:	8b 15 00 18 04 00    	mov    0x41800,%edx
   1865f:	a1 0c 11 03 00       	mov    0x3110c,%eax
   18664:	8b 40 0c             	mov    0xc(%eax),%eax
   18667:	c1 e0 09             	shl    $0x9,%eax
   1866a:	01 d0                	add    %edx,%eax
   1866c:	89 44 24 0c          	mov    %eax,0xc(%esp)
	len = CURRENT->nr_sectors << 9;
   18670:	a1 0c 11 03 00       	mov    0x3110c,%eax
   18675:	8b 40 10             	mov    0x10(%eax),%eax
   18678:	c1 e0 09             	shl    $0x9,%eax
   1867b:	89 44 24 08          	mov    %eax,0x8(%esp)
	// 如果当前请求项中子设备号不为1或者对应内存起始位置大于虚拟盘末尾，则结束该请求项，并跳转到repeat处去处理下一个虚拟
	// 盘请求项。标号repeat定义在宏INIT_REQUEST内，位于宏的开始处，参见blk.h文件。
	if ((MINOR(CURRENT->dev) != 1) || (addr + len > rd_start + rd_length)) {
   1867f:	a1 0c 11 03 00       	mov    0x3110c,%eax
   18684:	8b 00                	mov    (%eax),%eax
   18686:	0f b6 c0             	movzbl %al,%eax
   18689:	83 f8 01             	cmp    $0x1,%eax
   1868c:	75 1c                	jne    186aa <do_rd_request+0xac>
   1868e:	8b 54 24 08          	mov    0x8(%esp),%edx
   18692:	8b 44 24 0c          	mov    0xc(%esp),%eax
   18696:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
   18699:	a1 00 18 04 00       	mov    0x41800,%eax
   1869e:	8b 15 6c 12 03 00    	mov    0x3126c,%edx
   186a4:	01 d0                	add    %edx,%eax
   186a6:	39 c1                	cmp    %eax,%ecx
   186a8:	76 12                	jbe    186bc <do_rd_request+0xbe>
		end_request(0);
   186aa:	83 ec 0c             	sub    $0xc,%esp
   186ad:	6a 00                	push   $0x0
   186af:	e8 9c fe ff ff       	call   18550 <end_request>
   186b4:	83 c4 10             	add    $0x10,%esp
		goto repeat;
   186b7:	e9 45 ff ff ff       	jmp    18601 <do_rd_request+0x3>
	}
	// 然后进行实际的读写操作。如果是写命令(WRITE)，则将请求项中缓冲区的内容复制到地址addr处，长度为len字节。如果是读命
	// 令(READ)，则将addr开始的内存内容复制到请求项缓冲区中，长度为len字节。否则显示命令不存在，死机。
	if (CURRENT-> cmd == WRITE) {
   186bc:	a1 0c 11 03 00       	mov    0x3110c,%eax
   186c1:	8b 40 04             	mov    0x4(%eax),%eax
   186c4:	83 f8 01             	cmp    $0x1,%eax
   186c7:	75 1e                	jne    186e7 <do_rd_request+0xe9>
		(void ) memcpy(addr,
			      CURRENT->buffer,
   186c9:	a1 0c 11 03 00       	mov    0x3110c,%eax
   186ce:	8b 40 14             	mov    0x14(%eax),%eax
		goto repeat;
	}
	// 然后进行实际的读写操作。如果是写命令(WRITE)，则将请求项中缓冲区的内容复制到地址addr处，长度为len字节。如果是读命
	// 令(READ)，则将addr开始的内存内容复制到请求项缓冲区中，长度为len字节。否则显示命令不存在，死机。
	if (CURRENT-> cmd == WRITE) {
		(void ) memcpy(addr,
   186d1:	83 ec 04             	sub    $0x4,%esp
   186d4:	ff 74 24 0c          	pushl  0xc(%esp)
   186d8:	50                   	push   %eax
   186d9:	ff 74 24 18          	pushl  0x18(%esp)
   186dd:	e8 0f fe ff ff       	call   184f1 <memcpy>
   186e2:	83 c4 10             	add    $0x10,%esp
   186e5:	eb 3a                	jmp    18721 <do_rd_request+0x123>
			      CURRENT->buffer,
			      len);
	} else if (CURRENT->cmd == READ) {
   186e7:	a1 0c 11 03 00       	mov    0x3110c,%eax
   186ec:	8b 40 04             	mov    0x4(%eax),%eax
   186ef:	85 c0                	test   %eax,%eax
   186f1:	75 1e                	jne    18711 <do_rd_request+0x113>
		(void) memcpy(CURRENT->buffer,
   186f3:	a1 0c 11 03 00       	mov    0x3110c,%eax
   186f8:	8b 40 14             	mov    0x14(%eax),%eax
   186fb:	83 ec 04             	sub    $0x4,%esp
   186fe:	ff 74 24 0c          	pushl  0xc(%esp)
   18702:	ff 74 24 14          	pushl  0x14(%esp)
   18706:	50                   	push   %eax
   18707:	e8 e5 fd ff ff       	call   184f1 <memcpy>
   1870c:	83 c4 10             	add    $0x10,%esp
   1870f:	eb 10                	jmp    18721 <do_rd_request+0x123>
			      addr,
			      len);
	} else
		panic("unknown ramdisk-command");
   18711:	83 ec 0c             	sub    $0xc,%esp
   18714:	68 1a 42 02 00       	push   $0x2421a
   18719:	e8 ea 04 ff ff       	call   8c08 <panic>
   1871e:	83 c4 10             	add    $0x10,%esp
	// 然后在请求项成功后处理，置更新标志。并继续处理本设备的下一请求项。
	end_request(1);
   18721:	83 ec 0c             	sub    $0xc,%esp
   18724:	6a 01                	push   $0x1
   18726:	e8 25 fe ff ff       	call   18550 <end_request>
   1872b:	83 c4 10             	add    $0x10,%esp
	goto repeat;
   1872e:	e9 ce fe ff ff       	jmp    18601 <do_rd_request+0x3>
	char	*addr;

	// 首先检测请求项的合法性,若已没有请求项则退出(参见blk.h).然后计算请求项处理的虚拟盘中起始扇区在物理内存中对应的地址
	// addr和占用的内存字节长度值len.下句用于取得请求项中的起始扇区对应的内存起始位置和内存长度.其中sector<<9表示
	// sector * 512,换算成字节值.CURRENT被定义为(blk_dev[MAJOR_NR].current_request).
	INIT_REQUEST;
   18733:	90                   	nop
	} else
		panic("unknown ramdisk-command");
	// 然后在请求项成功后处理，置更新标志。并继续处理本设备的下一请求项。
	end_request(1);
	goto repeat;
}
   18734:	83 c4 1c             	add    $0x1c,%esp
   18737:	c3                   	ret    

00018738 <rd_init>:
// 该函数首先设置虚拟盘设备的请求项处理函数指针指向do_rd_request(),然后确定虚拟盘在物理内存中的起始地址,占用字节长度
// 值.并对整个虚拟盘区清零.最后返回盘区长度.当linux/Makefile文件中设置过RAMDISK值不为零时,表示系统中会创建RAM虚拟盘
// 设备.在这种情况下的内核初始化过程中,本函数就会被调用(init/main.c).该函数在第2个参数length会被赋值成RAMDISK*1024
// 单位为字节.
long rd_init(long mem_start, int length)
{
   18738:	83 ec 10             	sub    $0x10,%esp
	int	i;
	char	*cp;

	blk_dev[MAJOR_NR].request_fn = DEVICE_REQUEST;
   1873b:	c7 05 08 11 03 00 fe 	movl   $0x185fe,0x31108
   18742:	85 01 00 
	rd_start = (char *) mem_start;
   18745:	8b 44 24 14          	mov    0x14(%esp),%eax
   18749:	a3 00 18 04 00       	mov    %eax,0x41800
	rd_length = length;
   1874e:	8b 44 24 18          	mov    0x18(%esp),%eax
   18752:	a3 6c 12 03 00       	mov    %eax,0x3126c
	cp = rd_start;
   18757:	a1 00 18 04 00       	mov    0x41800,%eax
   1875c:	89 44 24 08          	mov    %eax,0x8(%esp)
	// 将内存空间清零
	for (i = 0; i < length; i++)
   18760:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   18767:	00 
   18768:	eb 13                	jmp    1877d <rd_init+0x45>
		*cp++ = '\0';
   1876a:	8b 44 24 08          	mov    0x8(%esp),%eax
   1876e:	8d 50 01             	lea    0x1(%eax),%edx
   18771:	89 54 24 08          	mov    %edx,0x8(%esp)
   18775:	c6 00 00             	movb   $0x0,(%eax)
	blk_dev[MAJOR_NR].request_fn = DEVICE_REQUEST;
	rd_start = (char *) mem_start;
	rd_length = length;
	cp = rd_start;
	// 将内存空间清零
	for (i = 0; i < length; i++)
   18778:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   1877d:	8b 44 24 0c          	mov    0xc(%esp),%eax
   18781:	3b 44 24 18          	cmp    0x18(%esp),%eax
   18785:	7c e3                	jl     1876a <rd_init+0x32>
		*cp++ = '\0';
	return(length);
   18787:	8b 44 24 18          	mov    0x18(%esp),%eax
}
   1878b:	83 c4 10             	add    $0x10,%esp
   1878e:	c3                   	ret    

0001878f <rd_load>:
 */
// 尝试根文件系统加载到虚拟盘中.
// 该函数将在内核设置函数setup()(hd.c)中被调用.另外,1磁盘块 = 1024字节.变量block=256表示根文件系统映像被存储于boot盘第
// 256磁盘块开始处.
void rd_load(void)
{
   1878f:	81 ec 8c 00 00 00    	sub    $0x8c,%esp
	struct buffer_head *bh;								// 调整缓冲块头指针.
	struct super_block	s;								// 文件超级块结构.
	int		block = 256;								/* Start at block 256 */	/* 开始于256盘块 */
   18795:	c7 44 24 78 00 01 00 	movl   $0x100,0x78(%esp)
   1879c:	00 
	int		i = 1;
   1879d:	c7 44 24 74 01 00 00 	movl   $0x1,0x74(%esp)
   187a4:	00 
	int		nblocks;									// 文件系统盘块总数.
	char		*cp;									/* Move pointer */

	// 首先检查虚拟盘的有效性和完整性.如果ramdisk的长度为零,则退出.否则显示ramdisk的大小以及内存起始位置.如果此时根文件设备不是软盘
	// 设备,则也退出.
	if (!rd_length)
   187a5:	a1 6c 12 03 00       	mov    0x3126c,%eax
   187aa:	85 c0                	test   %eax,%eax
   187ac:	0f 84 00 02 00 00    	je     189b2 <rd_load+0x223>
		return;
	printk("Ram disk: %d bytes, starting at 0x%x, dev = 0x%x \n", rd_length, (int) rd_start, ROOT_DEV);
   187b2:	8b 15 cc 10 03 00    	mov    0x310cc,%edx
   187b8:	a1 00 18 04 00       	mov    0x41800,%eax
   187bd:	89 c1                	mov    %eax,%ecx
   187bf:	a1 6c 12 03 00       	mov    0x3126c,%eax
   187c4:	52                   	push   %edx
   187c5:	51                   	push   %ecx
   187c6:	50                   	push   %eax
   187c7:	68 34 42 02 00       	push   $0x24234
   187cc:	e8 76 04 ff ff       	call   8c47 <printk>
   187d1:	83 c4 10             	add    $0x10,%esp
	if (MAJOR(ROOT_DEV) != 2)
   187d4:	a1 cc 10 03 00       	mov    0x310cc,%eax
   187d9:	c1 e8 08             	shr    $0x8,%eax
   187dc:	83 f8 02             	cmp    $0x2,%eax
   187df:	0f 85 d0 01 00 00    	jne    189b5 <rd_load+0x226>
		return;
	// 然后读根文件系统的基本参数.即读软盘块256+1,256和256+2.这里block+1是指磁盘上的超级块.breada()用于读取指定的数据块,并标出还需要读的块,
	// 然后返回含有数据块的缓冲区指针.如果返回NULL,则表示数据块不可读(fs/buffer.c).然后把缓冲区中的磁盘超级块(d_super_block是磁盘超级
	// 块结构)复制到s变量中,并释放缓冲区.接着我们开始对超级块的有效性进行判断.超级块中文件系统魔数不对,则说明加载的数据块不是MINIX文件
	// 系统,于是退出.
	bh = breada(ROOT_DEV, block + 1, block, block + 2, -1);
   187e5:	8b 44 24 78          	mov    0x78(%esp),%eax
   187e9:	8d 48 02             	lea    0x2(%eax),%ecx
   187ec:	8b 44 24 78          	mov    0x78(%esp),%eax
   187f0:	8d 50 01             	lea    0x1(%eax),%edx
   187f3:	a1 cc 10 03 00       	mov    0x310cc,%eax
   187f8:	83 ec 0c             	sub    $0xc,%esp
   187fb:	6a ff                	push   $0xffffffff
   187fd:	51                   	push   %ecx
   187fe:	ff b4 24 8c 00 00 00 	pushl  0x8c(%esp)
   18805:	52                   	push   %edx
   18806:	50                   	push   %eax
   18807:	e8 47 70 ff ff       	call   f853 <breada>
   1880c:	83 c4 20             	add    $0x20,%esp
   1880f:	89 44 24 7c          	mov    %eax,0x7c(%esp)
	if (!bh) {
   18813:	83 7c 24 7c 00       	cmpl   $0x0,0x7c(%esp)
   18818:	75 15                	jne    1882f <rd_load+0xa0>
		printk("Disk error while looking for ramdisk!\n");
   1881a:	83 ec 0c             	sub    $0xc,%esp
   1881d:	68 68 42 02 00       	push   $0x24268
   18822:	e8 20 04 ff ff       	call   8c47 <printk>
   18827:	83 c4 10             	add    $0x10,%esp
		return;
   1882a:	e9 8a 01 00 00       	jmp    189b9 <rd_load+0x22a>
	}
	*((struct d_super_block *) &s) = *((struct d_super_block *) bh->b_data);
   1882f:	89 e0                	mov    %esp,%eax
   18831:	8b 54 24 7c          	mov    0x7c(%esp),%edx
   18835:	8b 12                	mov    (%edx),%edx
   18837:	8b 0a                	mov    (%edx),%ecx
   18839:	89 08                	mov    %ecx,(%eax)
   1883b:	8b 4a 04             	mov    0x4(%edx),%ecx
   1883e:	89 48 04             	mov    %ecx,0x4(%eax)
   18841:	8b 4a 08             	mov    0x8(%edx),%ecx
   18844:	89 48 08             	mov    %ecx,0x8(%eax)
   18847:	8b 4a 0c             	mov    0xc(%edx),%ecx
   1884a:	89 48 0c             	mov    %ecx,0xc(%eax)
   1884d:	8b 52 10             	mov    0x10(%edx),%edx
   18850:	89 50 10             	mov    %edx,0x10(%eax)
	brelse(bh);
   18853:	83 ec 0c             	sub    $0xc,%esp
   18856:	ff b4 24 88 00 00 00 	pushl  0x88(%esp)
   1885d:	e8 db 6d ff ff       	call   f63d <brelse>
   18862:	83 c4 10             	add    $0x10,%esp
	if (s.s_magic != SUPER_MAGIC)
   18865:	0f b7 44 24 10       	movzwl 0x10(%esp),%eax
   1886a:	66 3d 7f 13          	cmp    $0x137f,%ax
   1886e:	0f 85 44 01 00 00    	jne    189b8 <rd_load+0x229>
		return;
	// 然后我们试图把整个根文件系统读入在内存虚拟盘区中.对于一个文件系统来说,其超级块结构的s_nzones字段中保存着总逻辑块数(或称为区段数).一个
	// 逻辑块中含有的数据块数则由字段s_log_zone_size指定.因此文件系统中的数据块总数nblocks就等于(逻辑块数 *2^(每区段块数的次方)),即
	// nblocks=(s_nzones * 2^s_log_zone_size).如果遇到文件系统中数据块总数大于内存虚拟盘所能容纳的块数的情况,则不能执行加载操作,而只能显示
	// 出错信息并返回.
	nblocks = s.s_nzones << s.s_log_zone_size;
   18874:	0f b7 44 24 02       	movzwl 0x2(%esp),%eax
   18879:	0f b7 d0             	movzwl %ax,%edx
   1887c:	0f b7 44 24 0a       	movzwl 0xa(%esp),%eax
   18881:	0f b7 c0             	movzwl %ax,%eax
   18884:	89 c1                	mov    %eax,%ecx
   18886:	d3 e2                	shl    %cl,%edx
   18888:	89 d0                	mov    %edx,%eax
   1888a:	89 44 24 70          	mov    %eax,0x70(%esp)
	if (nblocks > (rd_length >> BLOCK_SIZE_BITS)) {
   1888e:	a1 6c 12 03 00       	mov    0x3126c,%eax
   18893:	c1 f8 0a             	sar    $0xa,%eax
   18896:	3b 44 24 70          	cmp    0x70(%esp),%eax
   1889a:	7d 22                	jge    188be <rd_load+0x12f>
		printk("Ram disk image too big!  (%d blocks, %d avail)\n",
   1889c:	a1 6c 12 03 00       	mov    0x3126c,%eax
   188a1:	c1 f8 0a             	sar    $0xa,%eax
   188a4:	83 ec 04             	sub    $0x4,%esp
   188a7:	50                   	push   %eax
   188a8:	ff 74 24 78          	pushl  0x78(%esp)
   188ac:	68 90 42 02 00       	push   $0x24290
   188b1:	e8 91 03 ff ff       	call   8c47 <printk>
   188b6:	83 c4 10             	add    $0x10,%esp
			nblocks, rd_length >> BLOCK_SIZE_BITS);
		return;
   188b9:	e9 fb 00 00 00       	jmp    189b9 <rd_load+0x22a>
	}
	// 若虚拟盘能容纳得下文件系统总数据块数,则我们显示加载数据信息,并让cp指向内存虚拟盘起始处,然后开始执行循环操作将磁盘上根文件系统映像加载到
	// 虚拟盘上.在操作过程中,如果一次需要加载的盘块数大于2块,我们就是用超前预读函数breada(),否则就使用bread()函数进行单块读取.若在读盘过程
	// 中出现I/O操作错误,就只能放弃加载过程返回.所读取的磁盘块会使用memcpy()函数从高速缓冲区中复制到内存虚拟盘相应位置处,同时显示已加载的块数.
	// 显示字符串中的八进制数'\010'表示显示一个制表符.
	printk("Loading %d bytes into ram disk... (0k)",
   188be:	8b 44 24 70          	mov    0x70(%esp),%eax
   188c2:	c1 e0 0a             	shl    $0xa,%eax
   188c5:	83 ec 08             	sub    $0x8,%esp
   188c8:	50                   	push   %eax
   188c9:	68 c0 42 02 00       	push   $0x242c0
   188ce:	e8 74 03 ff ff       	call   8c47 <printk>
   188d3:	83 c4 10             	add    $0x10,%esp
		nblocks << BLOCK_SIZE_BITS);
	cp = rd_start;
   188d6:	a1 00 18 04 00       	mov    0x41800,%eax
   188db:	89 44 24 6c          	mov    %eax,0x6c(%esp)
	while (nblocks) {
   188df:	e9 b7 00 00 00       	jmp    1899b <rd_load+0x20c>
		if (nblocks > 2)  								// 若读取块数多于2块则采用超前预读.
   188e4:	83 7c 24 70 02       	cmpl   $0x2,0x70(%esp)
   188e9:	7e 30                	jle    1891b <rd_load+0x18c>
			bh = breada(ROOT_DEV, block, block + 1, block + 2, -1);
   188eb:	8b 44 24 78          	mov    0x78(%esp),%eax
   188ef:	8d 48 02             	lea    0x2(%eax),%ecx
   188f2:	8b 44 24 78          	mov    0x78(%esp),%eax
   188f6:	8d 50 01             	lea    0x1(%eax),%edx
   188f9:	a1 cc 10 03 00       	mov    0x310cc,%eax
   188fe:	83 ec 0c             	sub    $0xc,%esp
   18901:	6a ff                	push   $0xffffffff
   18903:	51                   	push   %ecx
   18904:	52                   	push   %edx
   18905:	ff b4 24 90 00 00 00 	pushl  0x90(%esp)
   1890c:	50                   	push   %eax
   1890d:	e8 41 6f ff ff       	call   f853 <breada>
   18912:	83 c4 20             	add    $0x20,%esp
   18915:	89 44 24 7c          	mov    %eax,0x7c(%esp)
   18919:	eb 1c                	jmp    18937 <rd_load+0x1a8>
		else											// 否则就单块读取.
			bh = bread(ROOT_DEV, block);
   1891b:	a1 cc 10 03 00       	mov    0x310cc,%eax
   18920:	83 ec 08             	sub    $0x8,%esp
   18923:	ff b4 24 80 00 00 00 	pushl  0x80(%esp)
   1892a:	50                   	push   %eax
   1892b:	e8 63 6d ff ff       	call   f693 <bread>
   18930:	83 c4 10             	add    $0x10,%esp
   18933:	89 44 24 7c          	mov    %eax,0x7c(%esp)
		if (!bh) {
   18937:	83 7c 24 7c 00       	cmpl   $0x0,0x7c(%esp)
   1893c:	75 19                	jne    18957 <rd_load+0x1c8>
			printk("I/O error on block %d, aborting load\n",
   1893e:	83 ec 08             	sub    $0x8,%esp
   18941:	ff b4 24 80 00 00 00 	pushl  0x80(%esp)
   18948:	68 e8 42 02 00       	push   $0x242e8
   1894d:	e8 f5 02 ff ff       	call   8c47 <printk>
   18952:	83 c4 10             	add    $0x10,%esp
				block);
			return;
   18955:	eb 62                	jmp    189b9 <rd_load+0x22a>
		}
		(void) memcpy(cp, bh->b_data, BLOCK_SIZE);		// 复制到cp处.
   18957:	8b 44 24 7c          	mov    0x7c(%esp),%eax
   1895b:	8b 00                	mov    (%eax),%eax
   1895d:	83 ec 04             	sub    $0x4,%esp
   18960:	68 00 04 00 00       	push   $0x400
   18965:	50                   	push   %eax
   18966:	ff 74 24 78          	pushl  0x78(%esp)
   1896a:	e8 82 fb ff ff       	call   184f1 <memcpy>
   1896f:	83 c4 10             	add    $0x10,%esp
		brelse(bh);
   18972:	83 ec 0c             	sub    $0xc,%esp
   18975:	ff b4 24 88 00 00 00 	pushl  0x88(%esp)
   1897c:	e8 bc 6c ff ff       	call   f63d <brelse>
   18981:	83 c4 10             	add    $0x10,%esp
		cp += BLOCK_SIZE;								// 虚拟盘指针前移.
   18984:	81 44 24 6c 00 04 00 	addl   $0x400,0x6c(%esp)
   1898b:	00 
		block++;
   1898c:	83 44 24 78 01       	addl   $0x1,0x78(%esp)
		nblocks--;
   18991:	83 6c 24 70 01       	subl   $0x1,0x70(%esp)
		i++;
   18996:	83 44 24 74 01       	addl   $0x1,0x74(%esp)
	// 中出现I/O操作错误,就只能放弃加载过程返回.所读取的磁盘块会使用memcpy()函数从高速缓冲区中复制到内存虚拟盘相应位置处,同时显示已加载的块数.
	// 显示字符串中的八进制数'\010'表示显示一个制表符.
	printk("Loading %d bytes into ram disk... (0k)",
		nblocks << BLOCK_SIZE_BITS);
	cp = rd_start;
	while (nblocks) {
   1899b:	83 7c 24 70 00       	cmpl   $0x0,0x70(%esp)
   189a0:	0f 85 3e ff ff ff    	jne    188e4 <rd_load+0x155>
		block++;
		nblocks--;
		i++;
	}
	// 当boot盘中从256盘块开始的整个文件系统加载完毕后,我们显示"done",并把目前根文件设备号修改成虚拟盘的设备号0x0101, 返回.
	ROOT_DEV = 0x0101;
   189a6:	c7 05 cc 10 03 00 01 	movl   $0x101,0x310cc
   189ad:	01 00 00 
   189b0:	eb 07                	jmp    189b9 <rd_load+0x22a>
	char		*cp;									/* Move pointer */

	// 首先检查虚拟盘的有效性和完整性.如果ramdisk的长度为零,则退出.否则显示ramdisk的大小以及内存起始位置.如果此时根文件设备不是软盘
	// 设备,则也退出.
	if (!rd_length)
		return;
   189b2:	90                   	nop
   189b3:	eb 04                	jmp    189b9 <rd_load+0x22a>
	printk("Ram disk: %d bytes, starting at 0x%x, dev = 0x%x \n", rd_length, (int) rd_start, ROOT_DEV);
	if (MAJOR(ROOT_DEV) != 2)
		return;
   189b5:	90                   	nop
   189b6:	eb 01                	jmp    189b9 <rd_load+0x22a>
	*((struct d_super_block *) &s) = *((struct d_super_block *) bh->b_data);
	brelse(bh);
	if (s.s_magic != SUPER_MAGIC)
		/* No ram disk image present, assume normal floppy boot */
        /* 磁盘中没有ramdisk映像文件,退出去执行通常的软盘引导 */
		return;
   189b8:	90                   	nop
		nblocks--;
		i++;
	}
	// 当boot盘中从256盘块开始的整个文件系统加载完毕后,我们显示"done",并把目前根文件设备号修改成虚拟盘的设备号0x0101, 返回.
	ROOT_DEV = 0x0101;
}
   189b9:	81 c4 8c 00 00 00    	add    $0x8c,%esp
   189bf:	c3                   	ret    

000189c0 <get_fs_byte>:
//// 读取fs段中指定地址处的字节.
// 参数:addr - 指定的内存地址.
// %0 - (返回的字节_v);%1 - (内存地址addr)
// 返回:返回内存fs[addr]处的字节.
static inline unsigned char get_fs_byte(const char * addr)
{
   189c0:	53                   	push   %ebx
	unsigned register char _v;

	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   189c1:	8b 44 24 08          	mov    0x8(%esp),%eax
   189c5:	64 8a 00             	mov    %fs:(%eax),%al
   189c8:	89 c3                	mov    %eax,%ebx
	return _v;
   189ca:	89 d8                	mov    %ebx,%eax
}
   189cc:	5b                   	pop    %ebx
   189cd:	c3                   	ret    

000189ce <put_fs_byte>:

//// 将一字节存放在fs段中指定内存地址处.
// 参数:val - 字节值;addr - 内存地址.
// %0 - 寄存器(字节值val);%1 - (内存地址addr).
static inline void put_fs_byte(char val,char *addr)
{
   189ce:	83 ec 04             	sub    $0x4,%esp
   189d1:	8b 44 24 08          	mov    0x8(%esp),%eax
   189d5:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
   189d8:	0f b6 04 24          	movzbl (%esp),%eax
   189dc:	8b 54 24 0c          	mov    0xc(%esp),%edx
   189e0:	64 88 02             	mov    %al,%fs:(%edx)
}
   189e3:	90                   	nop
   189e4:	83 c4 04             	add    $0x4,%esp
   189e7:	c3                   	ret    

000189e8 <change_console>:

// 改变前台控制台.
// 将前台控制台设定为指定的虚拟控制台
// 参数:new_console - 指定的新控制台号
void change_console(unsigned int new_console)
{
   189e8:	83 ec 0c             	sub    $0xc,%esp
	// 如果参数指定的控制台已经在前台或者参数无效,则退出.否则设置当前前台控制台号,同时更新table_list[]中的前台控制台读/写队列结构地址.
	// 最后更新当前前台控制台屏幕.
	if (new_console == fg_console || new_console >= NR_CONSOLES)
   189eb:	a1 80 12 03 00       	mov    0x31280,%eax
   189f0:	39 44 24 10          	cmp    %eax,0x10(%esp)
   189f4:	74 4a                	je     18a40 <change_console+0x58>
   189f6:	a1 20 ee 03 00       	mov    0x3ee20,%eax
   189fb:	39 44 24 10          	cmp    %eax,0x10(%esp)
   189ff:	73 3f                	jae    18a40 <change_console+0x58>
		return;
	fg_console = new_console;
   18a01:	8b 44 24 10          	mov    0x10(%esp),%eax
   18a05:	a3 80 12 03 00       	mov    %eax,0x31280
	table_list[0] = con_queues + 0 + fg_console * 3;
   18a0a:	a1 80 12 03 00       	mov    0x31280,%eax
   18a0f:	69 c0 30 0c 00 00    	imul   $0xc30,%eax,%eax
   18a15:	05 a0 12 03 00       	add    $0x312a0,%eax
   18a1a:	a3 24 e5 02 00       	mov    %eax,0x2e524
	table_list[1] = con_queues + 1 + fg_console * 3;
   18a1f:	a1 80 12 03 00       	mov    0x31280,%eax
   18a24:	69 c0 30 0c 00 00    	imul   $0xc30,%eax,%eax
   18a2a:	05 10 04 00 00       	add    $0x410,%eax
   18a2f:	05 a0 12 03 00       	add    $0x312a0,%eax
   18a34:	a3 28 e5 02 00       	mov    %eax,0x2e528
	update_screen();
   18a39:	e8 a8 48 00 00       	call   1d2e6 <update_screen>
   18a3e:	eb 01                	jmp    18a41 <change_console+0x59>
void change_console(unsigned int new_console)
{
	// 如果参数指定的控制台已经在前台或者参数无效,则退出.否则设置当前前台控制台号,同时更新table_list[]中的前台控制台读/写队列结构地址.
	// 最后更新当前前台控制台屏幕.
	if (new_console == fg_console || new_console >= NR_CONSOLES)
		return;
   18a40:	90                   	nop
	fg_console = new_console;
	table_list[0] = con_queues + 0 + fg_console * 3;
	table_list[1] = con_queues + 1 + fg_console * 3;
	update_screen();
}
   18a41:	83 c4 0c             	add    $0xc,%esp
   18a44:	c3                   	ret    

00018a45 <sleep_if_empty>:
// 如果队列缓冲区空则让进程进入可中断睡眠状态.
// 参数:queue - 指定队列的指针.
// 进程在取队列缓冲区中字符之前需要调用此函数加以验证.如果当前进程没有信号要处理,并且指定的队列缓冲区空,则让进程进入可中断睡眠状态,并
// 让队列的进程等待指针指向该进程.
static void sleep_if_empty(struct tty_queue * queue)
{
   18a45:	83 ec 0c             	sub    $0xc,%esp
	cli();
   18a48:	fa                   	cli    
	while (!(current->signal & ~current->blocked) && EMPTY(queue))
   18a49:	eb 13                	jmp    18a5e <sleep_if_empty+0x19>
		interruptible_sleep_on(&queue->proc_list);
   18a4b:	8b 44 24 10          	mov    0x10(%esp),%eax
   18a4f:	83 c0 0c             	add    $0xc,%eax
   18a52:	83 ec 0c             	sub    $0xc,%esp
   18a55:	50                   	push   %eax
   18a56:	e8 c2 e6 fe ff       	call   711d <interruptible_sleep_on>
   18a5b:	83 c4 10             	add    $0x10,%esp
// 进程在取队列缓冲区中字符之前需要调用此函数加以验证.如果当前进程没有信号要处理,并且指定的队列缓冲区空,则让进程进入可中断睡眠状态,并
// 让队列的进程等待指针指向该进程.
static void sleep_if_empty(struct tty_queue * queue)
{
	cli();
	while (!(current->signal & ~current->blocked) && EMPTY(queue))
   18a5e:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   18a63:	8b 50 0c             	mov    0xc(%eax),%edx
   18a66:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   18a6b:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
   18a71:	f7 d0                	not    %eax
   18a73:	21 d0                	and    %edx,%eax
   18a75:	85 c0                	test   %eax,%eax
   18a77:	75 12                	jne    18a8b <sleep_if_empty+0x46>
   18a79:	8b 44 24 10          	mov    0x10(%esp),%eax
   18a7d:	8b 50 04             	mov    0x4(%eax),%edx
   18a80:	8b 44 24 10          	mov    0x10(%esp),%eax
   18a84:	8b 40 08             	mov    0x8(%eax),%eax
   18a87:	39 c2                	cmp    %eax,%edx
   18a89:	74 c0                	je     18a4b <sleep_if_empty+0x6>
		interruptible_sleep_on(&queue->proc_list);
	sti();
   18a8b:	fb                   	sti    
}
   18a8c:	90                   	nop
   18a8d:	83 c4 0c             	add    $0xc,%esp
   18a90:	c3                   	ret    

00018a91 <sleep_if_full>:

// 若队列缓冲区满则让进程进入可中断的睡眠状态.
// 参数:queue - 指定队列的指针.
// 进程在往队列缓冲区中写入字符之前需要调用此函数判断队列的情况.
static void sleep_if_full(struct tty_queue * queue)
{
   18a91:	83 ec 0c             	sub    $0xc,%esp
	// 如果队列缓冲区不满则返回退出.否则若进程没有信号需要处理,并且队列缓冲区中空闲剩余区长度<128,则让进程进入可中断息状态,并让该队列的进程
	// 等待指针指向该进程.
	if (!FULL(queue))
   18a94:	8b 44 24 10          	mov    0x10(%esp),%eax
   18a98:	8b 50 08             	mov    0x8(%eax),%edx
   18a9b:	8b 44 24 10          	mov    0x10(%esp),%eax
   18a9f:	8b 40 04             	mov    0x4(%eax),%eax
   18aa2:	29 c2                	sub    %eax,%edx
   18aa4:	89 d0                	mov    %edx,%eax
   18aa6:	83 e8 01             	sub    $0x1,%eax
   18aa9:	25 ff 03 00 00       	and    $0x3ff,%eax
   18aae:	85 c0                	test   %eax,%eax
   18ab0:	75 53                	jne    18b05 <sleep_if_full+0x74>
		return;
	cli();
   18ab2:	fa                   	cli    
	while (!(current->signal & ~current->blocked) && LEFT(queue) < 128)
   18ab3:	eb 13                	jmp    18ac8 <sleep_if_full+0x37>
		interruptible_sleep_on(&queue->proc_list);
   18ab5:	8b 44 24 10          	mov    0x10(%esp),%eax
   18ab9:	83 c0 0c             	add    $0xc,%eax
   18abc:	83 ec 0c             	sub    $0xc,%esp
   18abf:	50                   	push   %eax
   18ac0:	e8 58 e6 fe ff       	call   711d <interruptible_sleep_on>
   18ac5:	83 c4 10             	add    $0x10,%esp
	// 如果队列缓冲区不满则返回退出.否则若进程没有信号需要处理,并且队列缓冲区中空闲剩余区长度<128,则让进程进入可中断息状态,并让该队列的进程
	// 等待指针指向该进程.
	if (!FULL(queue))
		return;
	cli();
	while (!(current->signal & ~current->blocked) && LEFT(queue) < 128)
   18ac8:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   18acd:	8b 50 0c             	mov    0xc(%eax),%edx
   18ad0:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   18ad5:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
   18adb:	f7 d0                	not    %eax
   18add:	21 d0                	and    %edx,%eax
   18adf:	85 c0                	test   %eax,%eax
   18ae1:	75 1f                	jne    18b02 <sleep_if_full+0x71>
   18ae3:	8b 44 24 10          	mov    0x10(%esp),%eax
   18ae7:	8b 50 08             	mov    0x8(%eax),%edx
   18aea:	8b 44 24 10          	mov    0x10(%esp),%eax
   18aee:	8b 40 04             	mov    0x4(%eax),%eax
   18af1:	29 c2                	sub    %eax,%edx
   18af3:	89 d0                	mov    %edx,%eax
   18af5:	83 e8 01             	sub    $0x1,%eax
   18af8:	25 ff 03 00 00       	and    $0x3ff,%eax
   18afd:	83 f8 7f             	cmp    $0x7f,%eax
   18b00:	76 b3                	jbe    18ab5 <sleep_if_full+0x24>
		interruptible_sleep_on(&queue->proc_list);
	sti();
   18b02:	fb                   	sti    
   18b03:	eb 01                	jmp    18b06 <sleep_if_full+0x75>
static void sleep_if_full(struct tty_queue * queue)
{
	// 如果队列缓冲区不满则返回退出.否则若进程没有信号需要处理,并且队列缓冲区中空闲剩余区长度<128,则让进程进入可中断息状态,并让该队列的进程
	// 等待指针指向该进程.
	if (!FULL(queue))
		return;
   18b05:	90                   	nop
	cli();
	while (!(current->signal & ~current->blocked) && LEFT(queue) < 128)
		interruptible_sleep_on(&queue->proc_list);
	sti();
}
   18b06:	83 c4 0c             	add    $0xc,%esp
   18b09:	c3                   	ret    

00018b0a <wait_for_keypress>:

// 等待按键.
// 如果前台控制台读队列缓冲区空,则让进程进入可中断睡眠状态.
void wait_for_keypress(void)
{
   18b0a:	83 ec 0c             	sub    $0xc,%esp
	sleep_if_empty(tty_table[fg_console].secondary);
   18b0d:	a1 80 12 03 00       	mov    0x31280,%eax
   18b12:	c1 e0 06             	shl    $0x6,%eax
   18b15:	05 5c 18 04 00       	add    $0x4185c,%eax
   18b1a:	8b 00                	mov    (%eax),%eax
   18b1c:	83 ec 0c             	sub    $0xc,%esp
   18b1f:	50                   	push   %eax
   18b20:	e8 20 ff ff ff       	call   18a45 <sleep_if_empty>
   18b25:	83 c4 10             	add    $0x10,%esp
}
   18b28:	90                   	nop
   18b29:	83 c4 0c             	add    $0xc,%esp
   18b2c:	c3                   	ret    

00018b2d <copy_to_cooked>:

// 复制成规范模式字符序列
// 根据终端termios结构中设置的各种标志,将指定tty同读队列缓冲区中的字符复制转换成规范模式(熟模式)字符并存放在辅助队列(规范模式队列)中.
// 参数:tty - 指定终端的tty结构指针.
void copy_to_cooked(struct tty_struct * tty)
{
   18b2d:	83 ec 1c             	sub    $0x1c,%esp
	signed char c;

	// 首先检查当前终端tty结构中缓冲队列指针是否有效.如果三个队列指针都是NULL,则说明内核tty初始化函数有问题.
	if (!(tty->read_q || tty->write_q || tty->secondary)) {
   18b30:	8b 44 24 20          	mov    0x20(%esp),%eax
   18b34:	8b 40 34             	mov    0x34(%eax),%eax
   18b37:	85 c0                	test   %eax,%eax
   18b39:	75 2b                	jne    18b66 <copy_to_cooked+0x39>
   18b3b:	8b 44 24 20          	mov    0x20(%esp),%eax
   18b3f:	8b 40 38             	mov    0x38(%eax),%eax
   18b42:	85 c0                	test   %eax,%eax
   18b44:	75 20                	jne    18b66 <copy_to_cooked+0x39>
   18b46:	8b 44 24 20          	mov    0x20(%esp),%eax
   18b4a:	8b 40 3c             	mov    0x3c(%eax),%eax
   18b4d:	85 c0                	test   %eax,%eax
   18b4f:	75 15                	jne    18b66 <copy_to_cooked+0x39>
		printk("copy_to_cooked: missing queues\n\r");
   18b51:	83 ec 0c             	sub    $0xc,%esp
   18b54:	68 20 43 02 00       	push   $0x24320
   18b59:	e8 e9 00 ff ff       	call   8c47 <printk>
   18b5e:	83 c4 10             	add    $0x10,%esp
		return;
   18b61:	e9 36 07 00 00       	jmp    1929c <copy_to_cooked+0x76f>
	// 循环体中,如果此时读队列缓冲区已经取空或都辅助队列缓冲区已经放满字符,就退出循环体.否则程序就从读队列缓冲区尾指针处取一字符,并把尾指针前移
	// 一个字符位置.然后根据该字符代码值进行处理.
	// 另外,如果定义了_POSIX_VDISABLE(\0),那么在对字符处理过程中,若字符代码值等于_POSIX_VDISABLE的值时,表示禁止使用相应特殊控制字符的功能.
	while (1) {
		// 如果tty对应的读队列为空则直接立刻中断循环
		if (EMPTY(tty->read_q))
   18b66:	8b 44 24 20          	mov    0x20(%esp),%eax
   18b6a:	8b 40 34             	mov    0x34(%eax),%eax
   18b6d:	8b 50 04             	mov    0x4(%eax),%edx
   18b70:	8b 44 24 20          	mov    0x20(%esp),%eax
   18b74:	8b 40 34             	mov    0x34(%eax),%eax
   18b77:	8b 40 08             	mov    0x8(%eax),%eax
   18b7a:	39 c2                	cmp    %eax,%edx
   18b7c:	0f 84 00 07 00 00    	je     19282 <copy_to_cooked+0x755>
			break;
		// 如果tty对应的第三个队列为空则直接立刻中断循环
		if (FULL(tty->secondary))
   18b82:	8b 44 24 20          	mov    0x20(%esp),%eax
   18b86:	8b 40 3c             	mov    0x3c(%eax),%eax
   18b89:	8b 50 08             	mov    0x8(%eax),%edx
   18b8c:	8b 44 24 20          	mov    0x20(%esp),%eax
   18b90:	8b 40 3c             	mov    0x3c(%eax),%eax
   18b93:	8b 40 04             	mov    0x4(%eax),%eax
   18b96:	29 c2                	sub    %eax,%edx
   18b98:	89 d0                	mov    %edx,%eax
   18b9a:	83 e8 01             	sub    $0x1,%eax
   18b9d:	25 ff 03 00 00       	and    $0x3ff,%eax
   18ba2:	85 c0                	test   %eax,%eax
   18ba4:	0f 84 db 06 00 00    	je     19285 <copy_to_cooked+0x758>
			break;
		GETCH(tty->read_q, c);								// 取一字符到c,并前移尾指针
   18baa:	8b 44 24 20          	mov    0x20(%esp),%eax
   18bae:	8b 50 34             	mov    0x34(%eax),%edx
   18bb1:	8b 44 24 20          	mov    0x20(%esp),%eax
   18bb5:	8b 40 34             	mov    0x34(%eax),%eax
   18bb8:	8b 40 08             	mov    0x8(%eax),%eax
   18bbb:	0f b6 44 02 10       	movzbl 0x10(%edx,%eax,1),%eax
   18bc0:	88 44 24 0f          	mov    %al,0xf(%esp)
   18bc4:	8b 44 24 20          	mov    0x20(%esp),%eax
   18bc8:	8b 40 34             	mov    0x34(%eax),%eax
   18bcb:	8b 54 24 20          	mov    0x20(%esp),%edx
   18bcf:	8b 52 34             	mov    0x34(%edx),%edx
   18bd2:	8b 52 08             	mov    0x8(%edx),%edx
   18bd5:	83 c2 01             	add    $0x1,%edx
   18bd8:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   18bde:	89 50 08             	mov    %edx,0x8(%eax)
		// 如果该字符是回车符CR(13),那么若回车换行转换行CRNL置位,则将字符转换为换行符NL(10).否则如果忽略回车标志NOCR置位,则忽略该字符,继续处理其他字符
		if (c == 13) {
   18be1:	80 7c 24 0f 0d       	cmpb   $0xd,0xf(%esp)
   18be6:	75 2a                	jne    18c12 <copy_to_cooked+0xe5>
			if (I_CRNL(tty))
   18be8:	8b 44 24 20          	mov    0x20(%esp),%eax
   18bec:	8b 00                	mov    (%eax),%eax
   18bee:	25 00 01 00 00       	and    $0x100,%eax
   18bf3:	85 c0                	test   %eax,%eax
   18bf5:	74 07                	je     18bfe <copy_to_cooked+0xd1>
				c = 10;
   18bf7:	c6 44 24 0f 0a       	movb   $0xa,0xf(%esp)
   18bfc:	eb 2d                	jmp    18c2b <copy_to_cooked+0xfe>
			else if (I_NOCR(tty))
   18bfe:	8b 44 24 20          	mov    0x20(%esp),%eax
   18c02:	8b 00                	mov    (%eax),%eax
   18c04:	25 80 00 00 00       	and    $0x80,%eax
   18c09:	85 c0                	test   %eax,%eax
   18c0b:	74 1e                	je     18c2b <copy_to_cooked+0xfe>
				continue;
   18c0d:	e9 6b 06 00 00       	jmp    1927d <copy_to_cooked+0x750>
		// 如果字符是换行符NL(10),换行转回车标志NLCR置位,则将其转换为回车符CR(13).
		} else if (c == 10 && I_NLCR(tty))
   18c12:	80 7c 24 0f 0a       	cmpb   $0xa,0xf(%esp)
   18c17:	75 12                	jne    18c2b <copy_to_cooked+0xfe>
   18c19:	8b 44 24 20          	mov    0x20(%esp),%eax
   18c1d:	8b 00                	mov    (%eax),%eax
   18c1f:	83 e0 40             	and    $0x40,%eax
   18c22:	85 c0                	test   %eax,%eax
   18c24:	74 05                	je     18c2b <copy_to_cooked+0xfe>
			c = 13;
   18c26:	c6 44 24 0f 0d       	movb   $0xd,0xf(%esp)
		// 如果大写转小写输入标志UCLC置位,则将该字符转换为小写字符.
		if (I_UCLC(tty))
   18c2b:	8b 44 24 20          	mov    0x20(%esp),%eax
   18c2f:	8b 00                	mov    (%eax),%eax
   18c31:	25 00 02 00 00       	and    $0x200,%eax
   18c36:	85 c0                	test   %eax,%eax
   18c38:	74 40                	je     18c7a <copy_to_cooked+0x14d>
			c = tolower(c);
   18c3a:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   18c3f:	a2 20 58 04 00       	mov    %al,0x45820
   18c44:	0f b6 05 20 58 04 00 	movzbl 0x45820,%eax
   18c4b:	0f be c0             	movsbl %al,%eax
   18c4e:	83 c0 01             	add    $0x1,%eax
   18c51:	05 a0 e5 02 00       	add    $0x2e5a0,%eax
   18c56:	0f b6 00             	movzbl (%eax),%eax
   18c59:	0f b6 c0             	movzbl %al,%eax
   18c5c:	83 e0 01             	and    $0x1,%eax
   18c5f:	85 c0                	test   %eax,%eax
   18c61:	74 0c                	je     18c6f <copy_to_cooked+0x142>
   18c63:	0f b6 05 20 58 04 00 	movzbl 0x45820,%eax
   18c6a:	83 c0 20             	add    $0x20,%eax
   18c6d:	eb 07                	jmp    18c76 <copy_to_cooked+0x149>
   18c6f:	0f b6 05 20 58 04 00 	movzbl 0x45820,%eax
   18c76:	88 44 24 0f          	mov    %al,0xf(%esp)
		// 字符(^D),则循环执行下列代码:
		// 如果本了回显标志ECHO置位,那么:若字符是控制字符(值 < 32),则往tty写队列放入擦除控制字符ERASE(^H).然后再放入一个擦除字符ERASE,并且调用
		// 该tty写函数,把写队列中的所有字符输出到终端屏幕上.另外,因为控制字符在放入写队列时需要用2个字节表示(例如^V),因此要求特别对控制字符多放入
		// 一个ERASE.最后将tty辅助队列头指针后退1字节.另外,如果了_POSIZ_VDISABLE(\0),那么在对字符修理过程中,若字符代码值等于_POSIX_VDISABLE
		// 的值时,表示禁止使用相应特殊控制字符的功能.
		if (L_CANON(tty)) {
   18c7a:	8b 44 24 20          	mov    0x20(%esp),%eax
   18c7e:	8b 40 0c             	mov    0xc(%eax),%eax
   18c81:	83 e0 02             	and    $0x2,%eax
   18c84:	85 c0                	test   %eax,%eax
   18c86:	0f 84 9d 02 00 00    	je     18f29 <copy_to_cooked+0x3fc>
			if ((KILL_CHAR(tty) != _POSIX_VDISABLE) &&
   18c8c:	8b 44 24 20          	mov    0x20(%esp),%eax
   18c90:	0f b6 40 14          	movzbl 0x14(%eax),%eax
   18c94:	84 c0                	test   %al,%al
   18c96:	0f 84 43 01 00 00    	je     18ddf <copy_to_cooked+0x2b2>
			    (c == KILL_CHAR(tty))) {
   18c9c:	0f be 54 24 0f       	movsbl 0xf(%esp),%edx
   18ca1:	8b 44 24 20          	mov    0x20(%esp),%eax
   18ca5:	0f b6 40 14          	movzbl 0x14(%eax),%eax
   18ca9:	0f b6 c0             	movzbl %al,%eax
		// 如果本了回显标志ECHO置位,那么:若字符是控制字符(值 < 32),则往tty写队列放入擦除控制字符ERASE(^H).然后再放入一个擦除字符ERASE,并且调用
		// 该tty写函数,把写队列中的所有字符输出到终端屏幕上.另外,因为控制字符在放入写队列时需要用2个字节表示(例如^V),因此要求特别对控制字符多放入
		// 一个ERASE.最后将tty辅助队列头指针后退1字节.另外,如果了_POSIZ_VDISABLE(\0),那么在对字符修理过程中,若字符代码值等于_POSIX_VDISABLE
		// 的值时,表示禁止使用相应特殊控制字符的功能.
		if (L_CANON(tty)) {
			if ((KILL_CHAR(tty) != _POSIX_VDISABLE) &&
   18cac:	39 c2                	cmp    %eax,%edx
   18cae:	0f 85 2b 01 00 00    	jne    18ddf <copy_to_cooked+0x2b2>
			    (c == KILL_CHAR(tty))) {
				/* deal with killing the input line */
				while(!(EMPTY(tty->secondary) ||
   18cb4:	e9 af 00 00 00       	jmp    18d68 <copy_to_cooked+0x23b>
				        (c = LAST(tty->secondary)) == 10 ||
				        ((EOF_CHAR(tty) != _POSIX_VDISABLE) && (c == EOF_CHAR(tty))))) {
					if (L_ECHO(tty)) {						// 若本地回显标志置位
   18cb9:	8b 44 24 20          	mov    0x20(%esp),%eax
   18cbd:	8b 40 0c             	mov    0xc(%eax),%eax
   18cc0:	83 e0 08             	and    $0x8,%eax
   18cc3:	85 c0                	test   %eax,%eax
   18cc5:	0f 84 80 00 00 00    	je     18d4b <copy_to_cooked+0x21e>
						if (c < 32)							// 控制字符要删2字节
   18ccb:	80 7c 24 0f 1f       	cmpb   $0x1f,0xf(%esp)
   18cd0:	7f 33                	jg     18d05 <copy_to_cooked+0x1d8>
							PUTCH(127, tty->write_q);
   18cd2:	8b 44 24 20          	mov    0x20(%esp),%eax
   18cd6:	8b 50 38             	mov    0x38(%eax),%edx
   18cd9:	8b 44 24 20          	mov    0x20(%esp),%eax
   18cdd:	8b 40 38             	mov    0x38(%eax),%eax
   18ce0:	8b 40 04             	mov    0x4(%eax),%eax
   18ce3:	c6 44 02 10 7f       	movb   $0x7f,0x10(%edx,%eax,1)
   18ce8:	8b 44 24 20          	mov    0x20(%esp),%eax
   18cec:	8b 40 38             	mov    0x38(%eax),%eax
   18cef:	8b 54 24 20          	mov    0x20(%esp),%edx
   18cf3:	8b 52 38             	mov    0x38(%edx),%edx
   18cf6:	8b 52 04             	mov    0x4(%edx),%edx
   18cf9:	83 c2 01             	add    $0x1,%edx
   18cfc:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   18d02:	89 50 04             	mov    %edx,0x4(%eax)
						PUTCH(127, tty->write_q);
   18d05:	8b 44 24 20          	mov    0x20(%esp),%eax
   18d09:	8b 50 38             	mov    0x38(%eax),%edx
   18d0c:	8b 44 24 20          	mov    0x20(%esp),%eax
   18d10:	8b 40 38             	mov    0x38(%eax),%eax
   18d13:	8b 40 04             	mov    0x4(%eax),%eax
   18d16:	c6 44 02 10 7f       	movb   $0x7f,0x10(%edx,%eax,1)
   18d1b:	8b 44 24 20          	mov    0x20(%esp),%eax
   18d1f:	8b 40 38             	mov    0x38(%eax),%eax
   18d22:	8b 54 24 20          	mov    0x20(%esp),%edx
   18d26:	8b 52 38             	mov    0x38(%edx),%edx
   18d29:	8b 52 04             	mov    0x4(%edx),%edx
   18d2c:	83 c2 01             	add    $0x1,%edx
   18d2f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   18d35:	89 50 04             	mov    %edx,0x4(%eax)
						tty->write(tty);
   18d38:	8b 44 24 20          	mov    0x20(%esp),%eax
   18d3c:	8b 40 30             	mov    0x30(%eax),%eax
   18d3f:	83 ec 0c             	sub    $0xc,%esp
   18d42:	ff 74 24 2c          	pushl  0x2c(%esp)
   18d46:	ff d0                	call   *%eax
   18d48:	83 c4 10             	add    $0x10,%esp
					}
					DEC(tty->secondary->head);
   18d4b:	8b 44 24 20          	mov    0x20(%esp),%eax
   18d4f:	8b 40 3c             	mov    0x3c(%eax),%eax
   18d52:	8b 54 24 20          	mov    0x20(%esp),%edx
   18d56:	8b 52 3c             	mov    0x3c(%edx),%edx
   18d59:	8b 52 04             	mov    0x4(%edx),%edx
   18d5c:	83 ea 01             	sub    $0x1,%edx
   18d5f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   18d65:	89 50 04             	mov    %edx,0x4(%eax)
		// 的值时,表示禁止使用相应特殊控制字符的功能.
		if (L_CANON(tty)) {
			if ((KILL_CHAR(tty) != _POSIX_VDISABLE) &&
			    (c == KILL_CHAR(tty))) {
				/* deal with killing the input line */
				while(!(EMPTY(tty->secondary) ||
   18d68:	8b 44 24 20          	mov    0x20(%esp),%eax
   18d6c:	8b 40 3c             	mov    0x3c(%eax),%eax
   18d6f:	8b 50 04             	mov    0x4(%eax),%edx
   18d72:	8b 44 24 20          	mov    0x20(%esp),%eax
   18d76:	8b 40 3c             	mov    0x3c(%eax),%eax
   18d79:	8b 40 08             	mov    0x8(%eax),%eax
   18d7c:	39 c2                	cmp    %eax,%edx
   18d7e:	0f 84 ec 04 00 00    	je     19270 <copy_to_cooked+0x743>
				        (c = LAST(tty->secondary)) == 10 ||
   18d84:	8b 44 24 20          	mov    0x20(%esp),%eax
   18d88:	8b 40 3c             	mov    0x3c(%eax),%eax
   18d8b:	8b 54 24 20          	mov    0x20(%esp),%edx
   18d8f:	8b 52 3c             	mov    0x3c(%edx),%edx
   18d92:	8b 52 04             	mov    0x4(%edx),%edx
   18d95:	83 ea 01             	sub    $0x1,%edx
   18d98:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   18d9e:	0f b6 44 10 10       	movzbl 0x10(%eax,%edx,1),%eax
   18da3:	88 44 24 0f          	mov    %al,0xf(%esp)
		// 的值时,表示禁止使用相应特殊控制字符的功能.
		if (L_CANON(tty)) {
			if ((KILL_CHAR(tty) != _POSIX_VDISABLE) &&
			    (c == KILL_CHAR(tty))) {
				/* deal with killing the input line */
				while(!(EMPTY(tty->secondary) ||
   18da7:	80 7c 24 0f 0a       	cmpb   $0xa,0xf(%esp)
   18dac:	0f 84 be 04 00 00    	je     19270 <copy_to_cooked+0x743>
				        (c = LAST(tty->secondary)) == 10 ||
				        ((EOF_CHAR(tty) != _POSIX_VDISABLE) && (c == EOF_CHAR(tty))))) {
   18db2:	8b 44 24 20          	mov    0x20(%esp),%eax
   18db6:	0f b6 40 15          	movzbl 0x15(%eax),%eax
		// 的值时,表示禁止使用相应特殊控制字符的功能.
		if (L_CANON(tty)) {
			if ((KILL_CHAR(tty) != _POSIX_VDISABLE) &&
			    (c == KILL_CHAR(tty))) {
				/* deal with killing the input line */
				while(!(EMPTY(tty->secondary) ||
   18dba:	84 c0                	test   %al,%al
   18dbc:	0f 84 f7 fe ff ff    	je     18cb9 <copy_to_cooked+0x18c>
				        (c = LAST(tty->secondary)) == 10 ||
				        ((EOF_CHAR(tty) != _POSIX_VDISABLE) && (c == EOF_CHAR(tty))))) {
   18dc2:	0f be 54 24 0f       	movsbl 0xf(%esp),%edx
   18dc7:	8b 44 24 20          	mov    0x20(%esp),%eax
   18dcb:	0f b6 40 15          	movzbl 0x15(%eax),%eax
   18dcf:	0f b6 c0             	movzbl %al,%eax
   18dd2:	39 c2                	cmp    %eax,%edx
   18dd4:	0f 85 df fe ff ff    	jne    18cb9 <copy_to_cooked+0x18c>
						PUTCH(127, tty->write_q);
						tty->write(tty);
					}
					DEC(tty->secondary->head);
				}
				continue;									// 继续读取读队列中字符进行处理.
   18dda:	e9 91 04 00 00       	jmp    19270 <copy_to_cooked+0x743>
			}
			// 如果该字符是删除控制字符ERASE(^H),那么:如果tty的辅助队列为空,或者其最后一个字符是换行符NL(10),或者是文件结束符,则继续处理其他字符.如果本地回显
			// 标志ECHO置位,那么:若字符是控制字符(值 < 32),则往tty的写队列中放入擦除字符ERASE.再放入一个擦除字符ERASE,并且调用该tty的写函数.最后将tty辅助
			// 队列头指针后退1字节,继续处理其他字符.同样地,如果定义了_POSIX_VDISABLE(\0),那么在对字符处理过程中,若字符代码值等于_POSIX_VDISABLE的值时,
			// 表示禁止使用相应特殊控制字符的功能.
			if ((ERASE_CHAR(tty) != _POSIX_VDISABLE) && (c == ERASE_CHAR(tty))) {
   18ddf:	8b 44 24 20          	mov    0x20(%esp),%eax
   18de3:	0f b6 40 13          	movzbl 0x13(%eax),%eax
   18de7:	84 c0                	test   %al,%al
   18de9:	0f 84 3a 01 00 00    	je     18f29 <copy_to_cooked+0x3fc>
   18def:	0f be 54 24 0f       	movsbl 0xf(%esp),%edx
   18df4:	8b 44 24 20          	mov    0x20(%esp),%eax
   18df8:	0f b6 40 13          	movzbl 0x13(%eax),%eax
   18dfc:	0f b6 c0             	movzbl %al,%eax
   18dff:	39 c2                	cmp    %eax,%edx
   18e01:	0f 85 22 01 00 00    	jne    18f29 <copy_to_cooked+0x3fc>
				if (EMPTY(tty->secondary) ||
   18e07:	8b 44 24 20          	mov    0x20(%esp),%eax
   18e0b:	8b 40 3c             	mov    0x3c(%eax),%eax
   18e0e:	8b 50 04             	mov    0x4(%eax),%edx
   18e11:	8b 44 24 20          	mov    0x20(%esp),%eax
   18e15:	8b 40 3c             	mov    0x3c(%eax),%eax
   18e18:	8b 40 08             	mov    0x8(%eax),%eax
   18e1b:	39 c2                	cmp    %eax,%edx
   18e1d:	0f 84 53 04 00 00    	je     19276 <copy_to_cooked+0x749>
				   (c = LAST(tty->secondary)) == 10 ||
   18e23:	8b 44 24 20          	mov    0x20(%esp),%eax
   18e27:	8b 40 3c             	mov    0x3c(%eax),%eax
   18e2a:	8b 54 24 20          	mov    0x20(%esp),%edx
   18e2e:	8b 52 3c             	mov    0x3c(%edx),%edx
   18e31:	8b 52 04             	mov    0x4(%edx),%edx
   18e34:	83 ea 01             	sub    $0x1,%edx
   18e37:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   18e3d:	0f b6 44 10 10       	movzbl 0x10(%eax,%edx,1),%eax
   18e42:	88 44 24 0f          	mov    %al,0xf(%esp)
			// 如果该字符是删除控制字符ERASE(^H),那么:如果tty的辅助队列为空,或者其最后一个字符是换行符NL(10),或者是文件结束符,则继续处理其他字符.如果本地回显
			// 标志ECHO置位,那么:若字符是控制字符(值 < 32),则往tty的写队列中放入擦除字符ERASE.再放入一个擦除字符ERASE,并且调用该tty的写函数.最后将tty辅助
			// 队列头指针后退1字节,继续处理其他字符.同样地,如果定义了_POSIX_VDISABLE(\0),那么在对字符处理过程中,若字符代码值等于_POSIX_VDISABLE的值时,
			// 表示禁止使用相应特殊控制字符的功能.
			if ((ERASE_CHAR(tty) != _POSIX_VDISABLE) && (c == ERASE_CHAR(tty))) {
				if (EMPTY(tty->secondary) ||
   18e46:	80 7c 24 0f 0a       	cmpb   $0xa,0xf(%esp)
   18e4b:	0f 84 25 04 00 00    	je     19276 <copy_to_cooked+0x749>
				   (c = LAST(tty->secondary)) == 10 ||
				   ((EOF_CHAR(tty) != _POSIX_VDISABLE) &&
   18e51:	8b 44 24 20          	mov    0x20(%esp),%eax
   18e55:	0f b6 40 15          	movzbl 0x15(%eax),%eax
			// 标志ECHO置位,那么:若字符是控制字符(值 < 32),则往tty的写队列中放入擦除字符ERASE.再放入一个擦除字符ERASE,并且调用该tty的写函数.最后将tty辅助
			// 队列头指针后退1字节,继续处理其他字符.同样地,如果定义了_POSIX_VDISABLE(\0),那么在对字符处理过程中,若字符代码值等于_POSIX_VDISABLE的值时,
			// 表示禁止使用相应特殊控制字符的功能.
			if ((ERASE_CHAR(tty) != _POSIX_VDISABLE) && (c == ERASE_CHAR(tty))) {
				if (EMPTY(tty->secondary) ||
				   (c = LAST(tty->secondary)) == 10 ||
   18e59:	84 c0                	test   %al,%al
   18e5b:	74 18                	je     18e75 <copy_to_cooked+0x348>
				   ((EOF_CHAR(tty) != _POSIX_VDISABLE) &&
				    (c == EOF_CHAR(tty))))
   18e5d:	0f be 54 24 0f       	movsbl 0xf(%esp),%edx
   18e62:	8b 44 24 20          	mov    0x20(%esp),%eax
   18e66:	0f b6 40 15          	movzbl 0x15(%eax),%eax
   18e6a:	0f b6 c0             	movzbl %al,%eax
			// 队列头指针后退1字节,继续处理其他字符.同样地,如果定义了_POSIX_VDISABLE(\0),那么在对字符处理过程中,若字符代码值等于_POSIX_VDISABLE的值时,
			// 表示禁止使用相应特殊控制字符的功能.
			if ((ERASE_CHAR(tty) != _POSIX_VDISABLE) && (c == ERASE_CHAR(tty))) {
				if (EMPTY(tty->secondary) ||
				   (c = LAST(tty->secondary)) == 10 ||
				   ((EOF_CHAR(tty) != _POSIX_VDISABLE) &&
   18e6d:	39 c2                	cmp    %eax,%edx
   18e6f:	0f 84 01 04 00 00    	je     19276 <copy_to_cooked+0x749>
				    (c == EOF_CHAR(tty))))
					continue;
				if (L_ECHO(tty)) {							// 若本地回显标志置位.
   18e75:	8b 44 24 20          	mov    0x20(%esp),%eax
   18e79:	8b 40 0c             	mov    0xc(%eax),%eax
   18e7c:	83 e0 08             	and    $0x8,%eax
   18e7f:	85 c0                	test   %eax,%eax
   18e81:	0f 84 80 00 00 00    	je     18f07 <copy_to_cooked+0x3da>
					if (c < 32)
   18e87:	80 7c 24 0f 1f       	cmpb   $0x1f,0xf(%esp)
   18e8c:	7f 33                	jg     18ec1 <copy_to_cooked+0x394>
						PUTCH(127, tty->write_q);
   18e8e:	8b 44 24 20          	mov    0x20(%esp),%eax
   18e92:	8b 50 38             	mov    0x38(%eax),%edx
   18e95:	8b 44 24 20          	mov    0x20(%esp),%eax
   18e99:	8b 40 38             	mov    0x38(%eax),%eax
   18e9c:	8b 40 04             	mov    0x4(%eax),%eax
   18e9f:	c6 44 02 10 7f       	movb   $0x7f,0x10(%edx,%eax,1)
   18ea4:	8b 44 24 20          	mov    0x20(%esp),%eax
   18ea8:	8b 40 38             	mov    0x38(%eax),%eax
   18eab:	8b 54 24 20          	mov    0x20(%esp),%edx
   18eaf:	8b 52 38             	mov    0x38(%edx),%edx
   18eb2:	8b 52 04             	mov    0x4(%edx),%edx
   18eb5:	83 c2 01             	add    $0x1,%edx
   18eb8:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   18ebe:	89 50 04             	mov    %edx,0x4(%eax)
					PUTCH(127, tty->write_q);
   18ec1:	8b 44 24 20          	mov    0x20(%esp),%eax
   18ec5:	8b 50 38             	mov    0x38(%eax),%edx
   18ec8:	8b 44 24 20          	mov    0x20(%esp),%eax
   18ecc:	8b 40 38             	mov    0x38(%eax),%eax
   18ecf:	8b 40 04             	mov    0x4(%eax),%eax
   18ed2:	c6 44 02 10 7f       	movb   $0x7f,0x10(%edx,%eax,1)
   18ed7:	8b 44 24 20          	mov    0x20(%esp),%eax
   18edb:	8b 40 38             	mov    0x38(%eax),%eax
   18ede:	8b 54 24 20          	mov    0x20(%esp),%edx
   18ee2:	8b 52 38             	mov    0x38(%edx),%edx
   18ee5:	8b 52 04             	mov    0x4(%edx),%edx
   18ee8:	83 c2 01             	add    $0x1,%edx
   18eeb:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   18ef1:	89 50 04             	mov    %edx,0x4(%eax)
					tty->write(tty);
   18ef4:	8b 44 24 20          	mov    0x20(%esp),%eax
   18ef8:	8b 40 30             	mov    0x30(%eax),%eax
   18efb:	83 ec 0c             	sub    $0xc,%esp
   18efe:	ff 74 24 2c          	pushl  0x2c(%esp)
   18f02:	ff d0                	call   *%eax
   18f04:	83 c4 10             	add    $0x10,%esp
				}
				DEC(tty->secondary->head);
   18f07:	8b 44 24 20          	mov    0x20(%esp),%eax
   18f0b:	8b 40 3c             	mov    0x3c(%eax),%eax
   18f0e:	8b 54 24 20          	mov    0x20(%esp),%edx
   18f12:	8b 52 3c             	mov    0x3c(%edx),%edx
   18f15:	8b 52 04             	mov    0x4(%edx),%edx
   18f18:	83 ea 01             	sub    $0x1,%edx
   18f1b:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   18f21:	89 50 04             	mov    %edx,0x4(%eax)
				continue;
   18f24:	e9 54 03 00 00       	jmp    1927d <copy_to_cooked+0x750>
		// 如果设置了IXON标志,则使终端停止/开始输出控制字符起作用.如果没有设置此标志,那么停止和开始字符将被作为一般字符供进程读取.在这段代码中,如果读取的字符是停止
		// 字符STOP(^S),则置tty停止标志,让tty暂停输出.同时丢弃该特殊控制字符(不放入辅助队列中),并继续处理其他字符.如果字符是开始字符START(^Q),则复位tty停止
		// 标志,恢复tty输出.同时丢弃该控制字符,并继续处理其他字符.对于控制台来说,这里的tty->write()是console.c中的con_write()函数.因此对于伪终端也是由于设置
		// 了终端stopped标志而会暂停写操作(chr_drv/console.c).对于伪终端也是由于设置了终端stopped标志而会暂停写操作(chr_drv/pty.c).
		// 对于串行终端,也应该在发送终端过程中根据终端stopped标志暂停发送,但本版未实现.
		if (I_IXON(tty)) {
   18f29:	8b 44 24 20          	mov    0x20(%esp),%eax
   18f2d:	8b 00                	mov    (%eax),%eax
   18f2f:	25 00 04 00 00       	and    $0x400,%eax
   18f34:	85 c0                	test   %eax,%eax
   18f36:	0f 84 86 00 00 00    	je     18fc2 <copy_to_cooked+0x495>
			if ((STOP_CHAR(tty) != _POSIX_VDISABLE) && (c==STOP_CHAR(tty))) {
   18f3c:	8b 44 24 20          	mov    0x20(%esp),%eax
   18f40:	0f b6 40 1a          	movzbl 0x1a(%eax),%eax
   18f44:	84 c0                	test   %al,%al
   18f46:	74 37                	je     18f7f <copy_to_cooked+0x452>
   18f48:	0f be 54 24 0f       	movsbl 0xf(%esp),%edx
   18f4d:	8b 44 24 20          	mov    0x20(%esp),%eax
   18f51:	0f b6 40 1a          	movzbl 0x1a(%eax),%eax
   18f55:	0f b6 c0             	movzbl %al,%eax
   18f58:	39 c2                	cmp    %eax,%edx
   18f5a:	75 23                	jne    18f7f <copy_to_cooked+0x452>
				tty->stopped = 1;
   18f5c:	8b 44 24 20          	mov    0x20(%esp),%eax
   18f60:	c7 40 2c 01 00 00 00 	movl   $0x1,0x2c(%eax)
				tty->write(tty);
   18f67:	8b 44 24 20          	mov    0x20(%esp),%eax
   18f6b:	8b 40 30             	mov    0x30(%eax),%eax
   18f6e:	83 ec 0c             	sub    $0xc,%esp
   18f71:	ff 74 24 2c          	pushl  0x2c(%esp)
   18f75:	ff d0                	call   *%eax
   18f77:	83 c4 10             	add    $0x10,%esp
				continue;
   18f7a:	e9 fe 02 00 00       	jmp    1927d <copy_to_cooked+0x750>
			}
			if ((START_CHAR(tty) != _POSIX_VDISABLE) && (c==START_CHAR(tty))) {
   18f7f:	8b 44 24 20          	mov    0x20(%esp),%eax
   18f83:	0f b6 40 19          	movzbl 0x19(%eax),%eax
   18f87:	84 c0                	test   %al,%al
   18f89:	74 37                	je     18fc2 <copy_to_cooked+0x495>
   18f8b:	0f be 54 24 0f       	movsbl 0xf(%esp),%edx
   18f90:	8b 44 24 20          	mov    0x20(%esp),%eax
   18f94:	0f b6 40 19          	movzbl 0x19(%eax),%eax
   18f98:	0f b6 c0             	movzbl %al,%eax
   18f9b:	39 c2                	cmp    %eax,%edx
   18f9d:	75 23                	jne    18fc2 <copy_to_cooked+0x495>
				tty->stopped = 0;
   18f9f:	8b 44 24 20          	mov    0x20(%esp),%eax
   18fa3:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
				tty->write(tty);
   18faa:	8b 44 24 20          	mov    0x20(%esp),%eax
   18fae:	8b 40 30             	mov    0x30(%eax),%eax
   18fb1:	83 ec 0c             	sub    $0xc,%esp
   18fb4:	ff 74 24 2c          	pushl  0x2c(%esp)
   18fb8:	ff d0                	call   *%eax
   18fba:	83 c4 10             	add    $0x10,%esp
				continue;
   18fbd:	e9 bb 02 00 00       	jmp    1927d <copy_to_cooked+0x750>
        }
		// 若输入模式标志集中ISIG标志置位,表示终端键盘可以产生信号,则在收到控制字符INTR,QUIT,SUSP或DSUSP时,需要为进程产生相应的信号.如果该字符是键盘中断符(^C),则向
		// 当前进程之进程组中所有进程发送键盘中断信号SIGINT,并继续处理下一字符.如果该字符是退出符(^\),则向当前进程之进程组中所有进程发送键盘退出信号SIGQUIT,并继续处理
		// 下一字符.如果字符是暂停符(^Z),则向当前进程发送暂停信息SIGTSTP.同样,若定义了_POSIX_VDISABLE(\0),那么在对字符处理过程中,若字符代码值等于_POSIX_VDISABLE
		// 的值时,表示禁止使用相应特殊控制字符的功能.
		if (L_ISIG(tty)) {
   18fc2:	8b 44 24 20          	mov    0x20(%esp),%eax
   18fc6:	8b 40 0c             	mov    0xc(%eax),%eax
   18fc9:	83 e0 01             	and    $0x1,%eax
   18fcc:	85 c0                	test   %eax,%eax
   18fce:	0f 84 cf 00 00 00    	je     190a3 <copy_to_cooked+0x576>
			if ((INTR_CHAR(tty) != _POSIX_VDISABLE) && (c==INTR_CHAR(tty))) {
   18fd4:	8b 44 24 20          	mov    0x20(%esp),%eax
   18fd8:	0f b6 40 11          	movzbl 0x11(%eax),%eax
   18fdc:	84 c0                	test   %al,%al
   18fde:	74 30                	je     19010 <copy_to_cooked+0x4e3>
   18fe0:	0f be 54 24 0f       	movsbl 0xf(%esp),%edx
   18fe5:	8b 44 24 20          	mov    0x20(%esp),%eax
   18fe9:	0f b6 40 11          	movzbl 0x11(%eax),%eax
   18fed:	0f b6 c0             	movzbl %al,%eax
   18ff0:	39 c2                	cmp    %eax,%edx
   18ff2:	75 1c                	jne    19010 <copy_to_cooked+0x4e3>
				kill_pg(tty->pgrp, SIGINT, 1);
   18ff4:	8b 44 24 20          	mov    0x20(%esp),%eax
   18ff8:	8b 40 24             	mov    0x24(%eax),%eax
   18ffb:	83 ec 04             	sub    $0x4,%esp
   18ffe:	6a 01                	push   $0x1
   19000:	6a 02                	push   $0x2
   19002:	50                   	push   %eax
   19003:	e8 1f 1b ff ff       	call   ab27 <kill_pg>
   19008:	83 c4 10             	add    $0x10,%esp
				continue;
   1900b:	e9 6d 02 00 00       	jmp    1927d <copy_to_cooked+0x750>
			}
			if ((QUIT_CHAR(tty) != _POSIX_VDISABLE) && (c==QUIT_CHAR(tty))) {
   19010:	8b 44 24 20          	mov    0x20(%esp),%eax
   19014:	0f b6 40 12          	movzbl 0x12(%eax),%eax
   19018:	84 c0                	test   %al,%al
   1901a:	74 30                	je     1904c <copy_to_cooked+0x51f>
   1901c:	0f be 54 24 0f       	movsbl 0xf(%esp),%edx
   19021:	8b 44 24 20          	mov    0x20(%esp),%eax
   19025:	0f b6 40 12          	movzbl 0x12(%eax),%eax
   19029:	0f b6 c0             	movzbl %al,%eax
   1902c:	39 c2                	cmp    %eax,%edx
   1902e:	75 1c                	jne    1904c <copy_to_cooked+0x51f>
				kill_pg(tty->pgrp, SIGQUIT, 1);
   19030:	8b 44 24 20          	mov    0x20(%esp),%eax
   19034:	8b 40 24             	mov    0x24(%eax),%eax
   19037:	83 ec 04             	sub    $0x4,%esp
   1903a:	6a 01                	push   $0x1
   1903c:	6a 03                	push   $0x3
   1903e:	50                   	push   %eax
   1903f:	e8 e3 1a ff ff       	call   ab27 <kill_pg>
   19044:	83 c4 10             	add    $0x10,%esp
				continue;
   19047:	e9 31 02 00 00       	jmp    1927d <copy_to_cooked+0x750>
			}
			if ((SUSPEND_CHAR(tty) != _POSIX_VDISABLE) && (c == SUSPEND_CHAR(tty))) {
   1904c:	8b 44 24 20          	mov    0x20(%esp),%eax
   19050:	0f b6 40 1b          	movzbl 0x1b(%eax),%eax
   19054:	84 c0                	test   %al,%al
   19056:	74 4b                	je     190a3 <copy_to_cooked+0x576>
   19058:	0f be 54 24 0f       	movsbl 0xf(%esp),%edx
   1905d:	8b 44 24 20          	mov    0x20(%esp),%eax
   19061:	0f b6 40 1b          	movzbl 0x1b(%eax),%eax
   19065:	0f b6 c0             	movzbl %al,%eax
   19068:	39 c2                	cmp    %eax,%edx
   1906a:	75 37                	jne    190a3 <copy_to_cooked+0x576>
				if (!is_orphaned_pgrp(tty->pgrp))				// 判断一个进程组是否孤儿进程
   1906c:	8b 44 24 20          	mov    0x20(%esp),%eax
   19070:	8b 40 24             	mov    0x24(%eax),%eax
   19073:	83 ec 0c             	sub    $0xc,%esp
   19076:	50                   	push   %eax
   19077:	e8 74 1c ff ff       	call   acf0 <is_orphaned_pgrp>
   1907c:	83 c4 10             	add    $0x10,%esp
   1907f:	85 c0                	test   %eax,%eax
   19081:	0f 85 f5 01 00 00    	jne    1927c <copy_to_cooked+0x74f>
					kill_pg(tty->pgrp, SIGTSTP, 1);
   19087:	8b 44 24 20          	mov    0x20(%esp),%eax
   1908b:	8b 40 24             	mov    0x24(%eax),%eax
   1908e:	83 ec 04             	sub    $0x4,%esp
   19091:	6a 01                	push   $0x1
   19093:	6a 14                	push   $0x14
   19095:	50                   	push   %eax
   19096:	e8 8c 1a ff ff       	call   ab27 <kill_pg>
   1909b:	83 c4 10             	add    $0x10,%esp
				continue;
   1909e:	e9 d9 01 00 00       	jmp    1927c <copy_to_cooked+0x74f>
			}
		}
		// 如果该字符是换行符NL(10),或者是文件结束符EOF(4,^D),表示一行字符已处理完,则把辅助缓冲队列中当前含有字符行数值secondar.data增1.如果在函数tty_read()中取走一行
		// 字符,该值即会减1.
		if (c == 10 || (EOF_CHAR(tty) != _POSIX_VDISABLE && c == EOF_CHAR(tty)))
   190a3:	80 7c 24 0f 0a       	cmpb   $0xa,0xf(%esp)
   190a8:	74 20                	je     190ca <copy_to_cooked+0x59d>
   190aa:	8b 44 24 20          	mov    0x20(%esp),%eax
   190ae:	0f b6 40 15          	movzbl 0x15(%eax),%eax
   190b2:	84 c0                	test   %al,%al
   190b4:	74 22                	je     190d8 <copy_to_cooked+0x5ab>
   190b6:	0f be 54 24 0f       	movsbl 0xf(%esp),%edx
   190bb:	8b 44 24 20          	mov    0x20(%esp),%eax
   190bf:	0f b6 40 15          	movzbl 0x15(%eax),%eax
   190c3:	0f b6 c0             	movzbl %al,%eax
   190c6:	39 c2                	cmp    %eax,%edx
   190c8:	75 0e                	jne    190d8 <copy_to_cooked+0x5ab>
			tty->secondary->data++;
   190ca:	8b 44 24 20          	mov    0x20(%esp),%eax
   190ce:	8b 40 3c             	mov    0x3c(%eax),%eax
   190d1:	8b 10                	mov    (%eax),%edx
   190d3:	83 c2 01             	add    $0x1,%edx
   190d6:	89 10                	mov    %edx,(%eax)
		// 如果本地模式标志中回显标志ECHO在置位状态,那么,如果字符是换行符NL(10),则将换行符NL(10)和回车符(13)放入tty写队列缓冲区中;如果字符是控制字符(值<32)并且回显控制
		// 字符标志ECHOCTL置位,则将字符'^'和字符c+64放入tty写队列中(也即会显示^C,^H等);否则将该字符直接放入tty写缓冲队列中.最后调用该tty写操作函数.
		if (L_ECHO(tty)) {
   190d8:	8b 44 24 20          	mov    0x20(%esp),%eax
   190dc:	8b 40 0c             	mov    0xc(%eax),%eax
   190df:	83 e0 08             	and    $0x8,%eax
   190e2:	85 c0                	test   %eax,%eax
   190e4:	0f 84 4a 01 00 00    	je     19234 <copy_to_cooked+0x707>
			if (c == 10) {
   190ea:	80 7c 24 0f 0a       	cmpb   $0xa,0xf(%esp)
   190ef:	75 6b                	jne    1915c <copy_to_cooked+0x62f>
				PUTCH(10, tty->write_q);
   190f1:	8b 44 24 20          	mov    0x20(%esp),%eax
   190f5:	8b 50 38             	mov    0x38(%eax),%edx
   190f8:	8b 44 24 20          	mov    0x20(%esp),%eax
   190fc:	8b 40 38             	mov    0x38(%eax),%eax
   190ff:	8b 40 04             	mov    0x4(%eax),%eax
   19102:	c6 44 02 10 0a       	movb   $0xa,0x10(%edx,%eax,1)
   19107:	8b 44 24 20          	mov    0x20(%esp),%eax
   1910b:	8b 40 38             	mov    0x38(%eax),%eax
   1910e:	8b 54 24 20          	mov    0x20(%esp),%edx
   19112:	8b 52 38             	mov    0x38(%edx),%edx
   19115:	8b 52 04             	mov    0x4(%edx),%edx
   19118:	83 c2 01             	add    $0x1,%edx
   1911b:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   19121:	89 50 04             	mov    %edx,0x4(%eax)
				PUTCH(13, tty->write_q);
   19124:	8b 44 24 20          	mov    0x20(%esp),%eax
   19128:	8b 50 38             	mov    0x38(%eax),%edx
   1912b:	8b 44 24 20          	mov    0x20(%esp),%eax
   1912f:	8b 40 38             	mov    0x38(%eax),%eax
   19132:	8b 40 04             	mov    0x4(%eax),%eax
   19135:	c6 44 02 10 0d       	movb   $0xd,0x10(%edx,%eax,1)
   1913a:	8b 44 24 20          	mov    0x20(%esp),%eax
   1913e:	8b 40 38             	mov    0x38(%eax),%eax
   19141:	8b 54 24 20          	mov    0x20(%esp),%edx
   19145:	8b 52 38             	mov    0x38(%edx),%edx
   19148:	8b 52 04             	mov    0x4(%edx),%edx
   1914b:	83 c2 01             	add    $0x1,%edx
   1914e:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   19154:	89 50 04             	mov    %edx,0x4(%eax)
   19157:	e9 c5 00 00 00       	jmp    19221 <copy_to_cooked+0x6f4>
			} else if (c < 32) {
   1915c:	80 7c 24 0f 1f       	cmpb   $0x1f,0xf(%esp)
   19161:	0f 8f 83 00 00 00    	jg     191ea <copy_to_cooked+0x6bd>
				if (L_ECHOCTL(tty)) {
   19167:	8b 44 24 20          	mov    0x20(%esp),%eax
   1916b:	8b 40 0c             	mov    0xc(%eax),%eax
   1916e:	25 00 02 00 00       	and    $0x200,%eax
   19173:	85 c0                	test   %eax,%eax
   19175:	0f 84 a6 00 00 00    	je     19221 <copy_to_cooked+0x6f4>
					PUTCH('^', tty->write_q);
   1917b:	8b 44 24 20          	mov    0x20(%esp),%eax
   1917f:	8b 50 38             	mov    0x38(%eax),%edx
   19182:	8b 44 24 20          	mov    0x20(%esp),%eax
   19186:	8b 40 38             	mov    0x38(%eax),%eax
   19189:	8b 40 04             	mov    0x4(%eax),%eax
   1918c:	c6 44 02 10 5e       	movb   $0x5e,0x10(%edx,%eax,1)
   19191:	8b 44 24 20          	mov    0x20(%esp),%eax
   19195:	8b 40 38             	mov    0x38(%eax),%eax
   19198:	8b 54 24 20          	mov    0x20(%esp),%edx
   1919c:	8b 52 38             	mov    0x38(%edx),%edx
   1919f:	8b 52 04             	mov    0x4(%edx),%edx
   191a2:	83 c2 01             	add    $0x1,%edx
   191a5:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   191ab:	89 50 04             	mov    %edx,0x4(%eax)
					PUTCH(c + 64, tty->write_q);
   191ae:	8b 44 24 20          	mov    0x20(%esp),%eax
   191b2:	8b 50 38             	mov    0x38(%eax),%edx
   191b5:	8b 44 24 20          	mov    0x20(%esp),%eax
   191b9:	8b 40 38             	mov    0x38(%eax),%eax
   191bc:	8b 40 04             	mov    0x4(%eax),%eax
   191bf:	0f b6 4c 24 0f       	movzbl 0xf(%esp),%ecx
   191c4:	83 c1 40             	add    $0x40,%ecx
   191c7:	88 4c 02 10          	mov    %cl,0x10(%edx,%eax,1)
   191cb:	8b 44 24 20          	mov    0x20(%esp),%eax
   191cf:	8b 40 38             	mov    0x38(%eax),%eax
   191d2:	8b 54 24 20          	mov    0x20(%esp),%edx
   191d6:	8b 52 38             	mov    0x38(%edx),%edx
   191d9:	8b 52 04             	mov    0x4(%edx),%edx
   191dc:	83 c2 01             	add    $0x1,%edx
   191df:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   191e5:	89 50 04             	mov    %edx,0x4(%eax)
   191e8:	eb 37                	jmp    19221 <copy_to_cooked+0x6f4>
				}
			} else
				PUTCH(c, tty->write_q);
   191ea:	8b 44 24 20          	mov    0x20(%esp),%eax
   191ee:	8b 50 38             	mov    0x38(%eax),%edx
   191f1:	8b 44 24 20          	mov    0x20(%esp),%eax
   191f5:	8b 40 38             	mov    0x38(%eax),%eax
   191f8:	8b 40 04             	mov    0x4(%eax),%eax
   191fb:	0f b6 4c 24 0f       	movzbl 0xf(%esp),%ecx
   19200:	88 4c 02 10          	mov    %cl,0x10(%edx,%eax,1)
   19204:	8b 44 24 20          	mov    0x20(%esp),%eax
   19208:	8b 40 38             	mov    0x38(%eax),%eax
   1920b:	8b 54 24 20          	mov    0x20(%esp),%edx
   1920f:	8b 52 38             	mov    0x38(%edx),%edx
   19212:	8b 52 04             	mov    0x4(%edx),%edx
   19215:	83 c2 01             	add    $0x1,%edx
   19218:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   1921e:	89 50 04             	mov    %edx,0x4(%eax)
			tty->write(tty);
   19221:	8b 44 24 20          	mov    0x20(%esp),%eax
   19225:	8b 40 30             	mov    0x30(%eax),%eax
   19228:	83 ec 0c             	sub    $0xc,%esp
   1922b:	ff 74 24 2c          	pushl  0x2c(%esp)
   1922f:	ff d0                	call   *%eax
   19231:	83 c4 10             	add    $0x10,%esp
		}
		// 每一次循环末将处理过的字符放入辅助队列中
		PUTCH(c, tty->secondary);
   19234:	8b 44 24 20          	mov    0x20(%esp),%eax
   19238:	8b 50 3c             	mov    0x3c(%eax),%edx
   1923b:	8b 44 24 20          	mov    0x20(%esp),%eax
   1923f:	8b 40 3c             	mov    0x3c(%eax),%eax
   19242:	8b 40 04             	mov    0x4(%eax),%eax
   19245:	0f b6 4c 24 0f       	movzbl 0xf(%esp),%ecx
   1924a:	88 4c 02 10          	mov    %cl,0x10(%edx,%eax,1)
   1924e:	8b 44 24 20          	mov    0x20(%esp),%eax
   19252:	8b 40 3c             	mov    0x3c(%eax),%eax
   19255:	8b 54 24 20          	mov    0x20(%esp),%edx
   19259:	8b 52 3c             	mov    0x3c(%edx),%edx
   1925c:	8b 52 04             	mov    0x4(%edx),%edx
   1925f:	83 c2 01             	add    $0x1,%edx
   19262:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   19268:	89 50 04             	mov    %edx,0x4(%eax)
   1926b:	e9 f6 f8 ff ff       	jmp    18b66 <copy_to_cooked+0x39>
						PUTCH(127, tty->write_q);
						tty->write(tty);
					}
					DEC(tty->secondary->head);
				}
				continue;									// 继续读取读队列中字符进行处理.
   19270:	90                   	nop
   19271:	e9 f0 f8 ff ff       	jmp    18b66 <copy_to_cooked+0x39>
			if ((ERASE_CHAR(tty) != _POSIX_VDISABLE) && (c == ERASE_CHAR(tty))) {
				if (EMPTY(tty->secondary) ||
				   (c = LAST(tty->secondary)) == 10 ||
				   ((EOF_CHAR(tty) != _POSIX_VDISABLE) &&
				    (c == EOF_CHAR(tty))))
					continue;
   19276:	90                   	nop
   19277:	e9 ea f8 ff ff       	jmp    18b66 <copy_to_cooked+0x39>
				continue;
			}
			if ((SUSPEND_CHAR(tty) != _POSIX_VDISABLE) && (c == SUSPEND_CHAR(tty))) {
				if (!is_orphaned_pgrp(tty->pgrp))				// 判断一个进程组是否孤儿进程
					kill_pg(tty->pgrp, SIGTSTP, 1);
				continue;
   1927c:	90                   	nop
				PUTCH(c, tty->write_q);
			tty->write(tty);
		}
		// 每一次循环末将处理过的字符放入辅助队列中
		PUTCH(c, tty->secondary);
    }
   1927d:	e9 e4 f8 ff ff       	jmp    18b66 <copy_to_cooked+0x39>
	// 一个字符位置.然后根据该字符代码值进行处理.
	// 另外,如果定义了_POSIX_VDISABLE(\0),那么在对字符处理过程中,若字符代码值等于_POSIX_VDISABLE的值时,表示禁止使用相应特殊控制字符的功能.
	while (1) {
		// 如果tty对应的读队列为空则直接立刻中断循环
		if (EMPTY(tty->read_q))
			break;
   19282:	90                   	nop
   19283:	eb 01                	jmp    19286 <copy_to_cooked+0x759>
		// 如果tty对应的第三个队列为空则直接立刻中断循环
		if (FULL(tty->secondary))
			break;
   19285:	90                   	nop
		}
		// 每一次循环末将处理过的字符放入辅助队列中
		PUTCH(c, tty->secondary);
    }
	// 在退出循环体后唤醒等待该辅助缓冲队列的进程(如果有的话).
	wake_up(&tty->secondary->proc_list);
   19286:	8b 44 24 20          	mov    0x20(%esp),%eax
   1928a:	8b 40 3c             	mov    0x3c(%eax),%eax
   1928d:	83 c0 0c             	add    $0xc,%eax
   19290:	83 ec 0c             	sub    $0xc,%esp
   19293:	50                   	push   %eax
   19294:	e8 b6 de fe ff       	call   714f <wake_up>
   19299:	83 c4 10             	add    $0x10,%esp
}
   1929c:	83 c4 1c             	add    $0x1c,%esp
   1929f:	c3                   	ret    

000192a0 <tty_signal>:
 */
// 向使用终端的进程组中所有进程发送信号。
// 在后台进程组中的一个进程访问控制终端时，该函数用于向后台进程组中的所有进程发送SIGTTIN或SIGTTOU信号。无论后台进程组
// 中的进程是否已经阻塞或忽略掉了这两个信号，当前进程都将立刻退出读写操作而返回。
int tty_signal(int sig, struct tty_struct *tty)
{
   192a0:	53                   	push   %ebx
   192a1:	83 ec 08             	sub    $0x8,%esp
	// 我们不希望停止一个孤儿进程组的进程（参见文件kernel/exit.c的说明）。
	// 因此如果当前进程组是孤儿进程组，就出错返回。否则就向当前进程组所有进程发送指定信号。
	if (is_orphaned_pgrp(current->pgrp))
   192a4:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   192a9:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
   192af:	83 ec 0c             	sub    $0xc,%esp
   192b2:	50                   	push   %eax
   192b3:	e8 38 1a ff ff       	call   acf0 <is_orphaned_pgrp>
   192b8:	83 c4 10             	add    $0x10,%esp
   192bb:	85 c0                	test   %eax,%eax
   192bd:	74 0a                	je     192c9 <tty_signal+0x29>
		return -EIO;									/* don't stop an orphaned pgrp */
   192bf:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   192c4:	e9 88 00 00 00       	jmp    19351 <tty_signal+0xb1>
	(void) kill_pg(current->pgrp, sig, 1);            	// 发送信号sig。
   192c9:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   192ce:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
   192d4:	83 ec 04             	sub    $0x4,%esp
   192d7:	6a 01                	push   $0x1
   192d9:	ff 74 24 18          	pushl  0x18(%esp)
   192dd:	50                   	push   %eax
   192de:	e8 44 18 ff ff       	call   ab27 <kill_pg>
   192e3:	83 c4 10             	add    $0x10,%esp
	// 如果这个信号被当前进程阻塞（屏蔽），或者被当前进程忽略掉，则出错返回。否则，如果当前进程的对信号sig设置了新的处理句柄
	// 那么就返回我们可被中断的信息。否则就返回在系统调用重新启动后可以继续执行的信息。
	if ((current->blocked & (1 << (sig - 1))) ||
   192e6:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   192eb:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
   192f1:	8b 54 24 10          	mov    0x10(%esp),%edx
   192f5:	83 ea 01             	sub    $0x1,%edx
   192f8:	bb 01 00 00 00       	mov    $0x1,%ebx
   192fd:	89 d1                	mov    %edx,%ecx
   192ff:	d3 e3                	shl    %cl,%ebx
   19301:	89 da                	mov    %ebx,%edx
   19303:	21 d0                	and    %edx,%eax
   19305:	85 c0                	test   %eax,%eax
   19307:	75 1b                	jne    19324 <tty_signal+0x84>
	    ((int) current->sigaction[sig - 1].sa_handler == 1))
   19309:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1930e:	8b 54 24 10          	mov    0x10(%esp),%edx
   19312:	83 ea 01             	sub    $0x1,%edx
   19315:	83 c2 01             	add    $0x1,%edx
   19318:	c1 e2 04             	shl    $0x4,%edx
   1931b:	01 d0                	add    %edx,%eax
   1931d:	8b 00                	mov    (%eax),%eax
	if (is_orphaned_pgrp(current->pgrp))
		return -EIO;									/* don't stop an orphaned pgrp */
	(void) kill_pg(current->pgrp, sig, 1);            	// 发送信号sig。
	// 如果这个信号被当前进程阻塞（屏蔽），或者被当前进程忽略掉，则出错返回。否则，如果当前进程的对信号sig设置了新的处理句柄
	// 那么就返回我们可被中断的信息。否则就返回在系统调用重新启动后可以继续执行的信息。
	if ((current->blocked & (1 << (sig - 1))) ||
   1931f:	83 f8 01             	cmp    $0x1,%eax
   19322:	75 07                	jne    1932b <tty_signal+0x8b>
	    ((int) current->sigaction[sig - 1].sa_handler == 1))
		return -EIO;		/* Our signal will be ignored */
   19324:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   19329:	eb 26                	jmp    19351 <tty_signal+0xb1>
	else if (current->sigaction[sig-1].sa_handler)
   1932b:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   19330:	8b 54 24 10          	mov    0x10(%esp),%edx
   19334:	83 ea 01             	sub    $0x1,%edx
   19337:	83 c2 01             	add    $0x1,%edx
   1933a:	c1 e2 04             	shl    $0x4,%edx
   1933d:	01 d0                	add    %edx,%eax
   1933f:	8b 00                	mov    (%eax),%eax
   19341:	85 c0                	test   %eax,%eax
   19343:	74 07                	je     1934c <tty_signal+0xac>
		return -EINTR;		/* We _will_ be interrupted :-) */
   19345:	b8 fc ff ff ff       	mov    $0xfffffffc,%eax
   1934a:	eb 05                	jmp    19351 <tty_signal+0xb1>
	else
		return -ERESTARTSYS;	/* We _will_ be interrupted :-) */
   1934c:	b8 00 fe ff ff       	mov    $0xfffffe00,%eax
					/* (but restart after we continue) */
}
   19351:	83 c4 08             	add    $0x8,%esp
   19354:	5b                   	pop    %ebx
   19355:	c3                   	ret    

00019356 <tty_read>:

// tty读函数。
// 从终端辅助缓冲队列读取指定数量的字符，放到用户指定的缓冲区中。
// 参数：channel - 子设备号；buf - 用户缓冲区指针；nr - 欲读字节数。
int tty_read(unsigned channel, char * buf, int nr)
{
   19356:	83 ec 2c             	sub    $0x2c,%esp
	struct tty_struct * tty;
	struct tty_struct * other_tty = NULL;
   19359:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   19360:	00 
	char c, *b = buf;
   19361:	8b 44 24 34          	mov    0x34(%esp),%eax
   19365:	89 44 24 18          	mov    %eax,0x18(%esp)
	int minimum, time;

	// 首先判断参数有效性并取终端的tty结构指针。如果tty终端的三个缓冲队列指针都是NULL，则返回EIO出错信息。如果tty
	// 终端是一个伪终端，则再取得另一个对应伪终端的tty结构other_tty。
	if (channel > 255)
   19369:	81 7c 24 30 ff 00 00 	cmpl   $0xff,0x30(%esp)
   19370:	00 
   19371:	76 0a                	jbe    1937d <tty_read+0x27>
		return -EIO;
   19373:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   19378:	e9 10 04 00 00       	jmp    1978d <tty_read+0x437>
	tty = TTY_TABLE(channel);
   1937d:	83 7c 24 30 00       	cmpl   $0x0,0x30(%esp)
   19382:	74 28                	je     193ac <tty_read+0x56>
   19384:	83 7c 24 30 3f       	cmpl   $0x3f,0x30(%esp)
   19389:	77 13                	ja     1939e <tty_read+0x48>
   1938b:	8b 44 24 30          	mov    0x30(%esp),%eax
   1938f:	05 ff ff ff 03       	add    $0x3ffffff,%eax
   19394:	c1 e0 06             	shl    $0x6,%eax
   19397:	05 20 18 04 00       	add    $0x41820,%eax
   1939c:	eb 1b                	jmp    193b9 <tty_read+0x63>
   1939e:	8b 44 24 30          	mov    0x30(%esp),%eax
   193a2:	c1 e0 06             	shl    $0x6,%eax
   193a5:	05 20 18 04 00       	add    $0x41820,%eax
   193aa:	eb 0d                	jmp    193b9 <tty_read+0x63>
   193ac:	a1 80 12 03 00       	mov    0x31280,%eax
   193b1:	c1 e0 06             	shl    $0x6,%eax
   193b4:	05 20 18 04 00       	add    $0x41820,%eax
   193b9:	89 44 24 0c          	mov    %eax,0xc(%esp)
	if (!(tty->write_q || tty->read_q || tty->secondary))
   193bd:	8b 44 24 0c          	mov    0xc(%esp),%eax
   193c1:	8b 40 38             	mov    0x38(%eax),%eax
   193c4:	85 c0                	test   %eax,%eax
   193c6:	75 20                	jne    193e8 <tty_read+0x92>
   193c8:	8b 44 24 0c          	mov    0xc(%esp),%eax
   193cc:	8b 40 34             	mov    0x34(%eax),%eax
   193cf:	85 c0                	test   %eax,%eax
   193d1:	75 15                	jne    193e8 <tty_read+0x92>
   193d3:	8b 44 24 0c          	mov    0xc(%esp),%eax
   193d7:	8b 40 3c             	mov    0x3c(%eax),%eax
   193da:	85 c0                	test   %eax,%eax
   193dc:	75 0a                	jne    193e8 <tty_read+0x92>
		return -EIO;
   193de:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   193e3:	e9 a5 03 00 00       	jmp    1978d <tty_read+0x437>
	// 如果当前进程使用的是这里正在处理的tty终端，但该终端的进程组号却与当前进程组号不同，表示当前进程是后台进程组中
	// 的一个进程，即进程不在前台。于是我们要停止当前进程组的所有进程。因此这里就需要向当前进程组发送SIGTTIN信号，
	// 并返回等待成为前台进程组后再执行读操作。
	if ((current->tty == channel) && (tty->pgrp != current->pgrp))
   193e8:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   193ed:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
   193f3:	3b 44 24 30          	cmp    0x30(%esp),%eax
   193f7:	75 2c                	jne    19425 <tty_read+0xcf>
   193f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
   193fd:	8b 50 24             	mov    0x24(%eax),%edx
   19400:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   19405:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
   1940b:	39 c2                	cmp    %eax,%edx
   1940d:	74 16                	je     19425 <tty_read+0xcf>
		return(tty_signal(SIGTTIN, tty));
   1940f:	83 ec 08             	sub    $0x8,%esp
   19412:	ff 74 24 14          	pushl  0x14(%esp)
   19416:	6a 15                	push   $0x15
   19418:	e8 83 fe ff ff       	call   192a0 <tty_signal>
   1941d:	83 c4 10             	add    $0x10,%esp
   19420:	e9 68 03 00 00       	jmp    1978d <tty_read+0x437>
	// 如果当前终端是伪终端，那么对应的另一个伪终端就是other_tty。若这里tty是主伪终端，那么other_tty就是对应的从伪
	// 终端，反之亦然。
	if (channel & 0x80)
   19425:	8b 44 24 30          	mov    0x30(%esp),%eax
   19429:	25 80 00 00 00       	and    $0x80,%eax
   1942e:	85 c0                	test   %eax,%eax
   19430:	74 13                	je     19445 <tty_read+0xef>
		other_tty = tty_table + (channel ^ 0x40);
   19432:	8b 44 24 30          	mov    0x30(%esp),%eax
   19436:	83 f0 40             	xor    $0x40,%eax
   19439:	c1 e0 06             	shl    $0x6,%eax
   1943c:	05 20 18 04 00       	add    $0x41820,%eax
   19441:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	// 然后根据VTIME和VMIN对应的控制字符数组值设置读字符操作超时定时值time和最少需要读取的字符个数minimum。在非规范
	// 模式下，这两个是超时定时值。VMIN表示为了满足读操作而需要读取的最少字符个数。VTIME是一个1/10秒计数计时值。
	time = 10L * tty->termios.c_cc[VTIME];            				// 设置读操作超时定时值。
   19445:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19449:	0f b6 40 16          	movzbl 0x16(%eax),%eax
   1944d:	0f b6 d0             	movzbl %al,%edx
   19450:	89 d0                	mov    %edx,%eax
   19452:	c1 e0 02             	shl    $0x2,%eax
   19455:	01 d0                	add    %edx,%eax
   19457:	01 c0                	add    %eax,%eax
   19459:	89 44 24 10          	mov    %eax,0x10(%esp)
	minimum = tty->termios.c_cc[VMIN];              				// 最少需要读取的字符个数。
   1945d:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19461:	0f b6 40 17          	movzbl 0x17(%eax),%eax
   19465:	0f b6 c0             	movzbl %al,%eax
   19468:	89 44 24 14          	mov    %eax,0x14(%esp)
	// 定时值为无限大，以让进程先读取辅助队列中已有字符。如果读到的字符数不足minimum的话，后面代码会根据指定的超时值time
	// 来设置进程的读超时值timeout，并会等待读取其余字符。若此时没有设置最少读取字符数minimum（为0），则将其设置为进程
	// 欲读字符数nr，并且如果设置了超时定时值time的话，就把进程读字符超时定时值timeout设置为系统当前时间值+指定的超时
	// 值time，同时复位time。另外，如果以上设置的最少读取字符数minimum大于进程欲读取的字符数nr，则让minimum=nr。即对
	// 于规范模式下的读取操作，它不受VTIME和VMIN对应控制字符值的约束和控制，它们仅在非规范模式（生模式）操作中起作用。
	if (L_CANON(tty)) {
   1946c:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19470:	8b 40 0c             	mov    0xc(%eax),%eax
   19473:	83 e0 02             	and    $0x2,%eax
   19476:	85 c0                	test   %eax,%eax
   19478:	74 21                	je     1949b <tty_read+0x145>
		minimum = nr;
   1947a:	8b 44 24 38          	mov    0x38(%esp),%eax
   1947e:	89 44 24 14          	mov    %eax,0x14(%esp)
		current->timeout = 0xffffffff;
   19482:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   19487:	c7 80 d8 02 00 00 ff 	movl   $0xffffffff,0x2d8(%eax)
   1948e:	ff ff ff 
		time = 0;
   19491:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
   19498:	00 
   19499:	eb 46                	jmp    194e1 <tty_read+0x18b>
	} else if (minimum)
   1949b:	83 7c 24 14 00       	cmpl   $0x0,0x14(%esp)
   194a0:	74 11                	je     194b3 <tty_read+0x15d>
		current->timeout = 0xffffffff;
   194a2:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   194a7:	c7 80 d8 02 00 00 ff 	movl   $0xffffffff,0x2d8(%eax)
   194ae:	ff ff ff 
   194b1:	eb 2e                	jmp    194e1 <tty_read+0x18b>
	else {
		minimum = nr;
   194b3:	8b 44 24 38          	mov    0x38(%esp),%eax
   194b7:	89 44 24 14          	mov    %eax,0x14(%esp)
		if (time)
   194bb:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   194c0:	74 17                	je     194d9 <tty_read+0x183>
			current->timeout = time + jiffies;
   194c2:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   194c7:	8b 4c 24 10          	mov    0x10(%esp),%ecx
   194cb:	8b 15 00 eb 02 00    	mov    0x2eb00,%edx
   194d1:	01 ca                	add    %ecx,%edx
   194d3:	89 90 d8 02 00 00    	mov    %edx,0x2d8(%eax)
		time = 0;
   194d9:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
   194e0:	00 
	}
	if (minimum > nr)
   194e1:	8b 44 24 14          	mov    0x14(%esp),%eax
   194e5:	3b 44 24 38          	cmp    0x38(%esp),%eax
   194e9:	0f 8e 47 02 00 00    	jle    19736 <tty_read+0x3e0>
		minimum = nr;           									// 最多读取要求的字符数。
   194ef:	8b 44 24 38          	mov    0x38(%esp),%eax
   194f3:	89 44 24 14          	mov    %eax,0x14(%esp)
	// 现在我们开始从辅助队列中循环取出字符并放到用户缓冲区buf中。当欲读的字节数大于0,则执行以下循环操作。在循环过程中
	// 如果当前终端是伪终端，那么我们就执行其对应的另一个伪终端的写操作函数，让另一个伪终端把字符写入当前伪终端辅助队列
	// 缓冲区中。即让另一终端把写队列缓冲区中字符复制到当前伪终端读队列缓冲区中，并经行规则函数转换后放入当前伪终端辅助
	// 队列中。
	while (nr > 0) {
   194f7:	e9 3a 02 00 00       	jmp    19736 <tty_read+0x3e0>
		if (other_tty)
   194fc:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   19501:	74 13                	je     19516 <tty_read+0x1c0>
			other_tty->write(other_tty);
   19503:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   19507:	8b 40 30             	mov    0x30(%eax),%eax
   1950a:	83 ec 0c             	sub    $0xc,%esp
   1950d:	ff 74 24 28          	pushl  0x28(%esp)
   19511:	ff d0                	call   *%eax
   19513:	83 c4 10             	add    $0x10,%esp
		// 如果tty辅助缓冲队列为空，或者设置了规范模式标志并且tty读队列缓冲区未满，并且辅助队列中字符行数为0,那么，如果没
		// 有设置过进程读字符超时值（为0），或者当前进程目前收到信号，就先退出循环体。否则如果本终端是一个从伪终端，并且其
		// 对应的主伪终端已经挂断，那么我们也退出循环体。如果不是以上这两种情况，我们就让当前进程进入可中断睡眠状态，返回后
		// 继续处理。由于规范模式时内核以行为单位为用户提供数据，因此在该模式下辅助队列中必须至少有一行字符可供取胜，即
		// secondary.data起码是1才行。
		cli();
   19516:	fa                   	cli    
		if (EMPTY(tty->secondary) || (L_CANON(tty) &&
   19517:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1951b:	8b 40 3c             	mov    0x3c(%eax),%eax
   1951e:	8b 50 04             	mov    0x4(%eax),%edx
   19521:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19525:	8b 40 3c             	mov    0x3c(%eax),%eax
   19528:	8b 40 08             	mov    0x8(%eax),%eax
   1952b:	39 c2                	cmp    %eax,%edx
   1952d:	74 43                	je     19572 <tty_read+0x21c>
   1952f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19533:	8b 40 0c             	mov    0xc(%eax),%eax
   19536:	83 e0 02             	and    $0x2,%eax
   19539:	85 c0                	test   %eax,%eax
   1953b:	0f 84 9f 00 00 00    	je     195e0 <tty_read+0x28a>
		    !FULL(tty->read_q) && !tty->secondary->data)) {
   19541:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19545:	8b 40 34             	mov    0x34(%eax),%eax
   19548:	8b 50 08             	mov    0x8(%eax),%edx
   1954b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1954f:	8b 40 34             	mov    0x34(%eax),%eax
   19552:	8b 40 04             	mov    0x4(%eax),%eax
   19555:	29 c2                	sub    %eax,%edx
   19557:	89 d0                	mov    %edx,%eax
   19559:	83 e8 01             	sub    $0x1,%eax
   1955c:	25 ff 03 00 00       	and    $0x3ff,%eax
		// 有设置过进程读字符超时值（为0），或者当前进程目前收到信号，就先退出循环体。否则如果本终端是一个从伪终端，并且其
		// 对应的主伪终端已经挂断，那么我们也退出循环体。如果不是以上这两种情况，我们就让当前进程进入可中断睡眠状态，返回后
		// 继续处理。由于规范模式时内核以行为单位为用户提供数据，因此在该模式下辅助队列中必须至少有一行字符可供取胜，即
		// secondary.data起码是1才行。
		cli();
		if (EMPTY(tty->secondary) || (L_CANON(tty) &&
   19561:	85 c0                	test   %eax,%eax
   19563:	74 7b                	je     195e0 <tty_read+0x28a>
		    !FULL(tty->read_q) && !tty->secondary->data)) {
   19565:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19569:	8b 40 3c             	mov    0x3c(%eax),%eax
   1956c:	8b 00                	mov    (%eax),%eax
   1956e:	85 c0                	test   %eax,%eax
   19570:	75 6e                	jne    195e0 <tty_read+0x28a>
			if (!current->timeout ||
   19572:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   19577:	8b 80 d8 02 00 00    	mov    0x2d8(%eax),%eax
   1957d:	85 c0                	test   %eax,%eax
   1957f:	74 1b                	je     1959c <tty_read+0x246>
			  (current->signal & ~current->blocked)) {
   19581:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   19586:	8b 50 0c             	mov    0xc(%eax),%edx
   19589:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1958e:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
   19594:	f7 d0                	not    %eax
   19596:	21 d0                	and    %edx,%eax
		// 继续处理。由于规范模式时内核以行为单位为用户提供数据，因此在该模式下辅助队列中必须至少有一行字符可供取胜，即
		// secondary.data起码是1才行。
		cli();
		if (EMPTY(tty->secondary) || (L_CANON(tty) &&
		    !FULL(tty->read_q) && !tty->secondary->data)) {
			if (!current->timeout ||
   19598:	85 c0                	test   %eax,%eax
   1959a:	74 06                	je     195a2 <tty_read+0x24c>
			  (current->signal & ~current->blocked)) {
			  	sti();
   1959c:	fb                   	sti    
				break;
   1959d:	e9 a2 01 00 00       	jmp    19744 <tty_read+0x3ee>
			}
			if (IS_A_PTY_SLAVE(channel) && C_HUP(other_tty))
   195a2:	8b 44 24 30          	mov    0x30(%esp),%eax
   195a6:	25 c0 00 00 00       	and    $0xc0,%eax
   195ab:	3d c0 00 00 00       	cmp    $0xc0,%eax
   195b0:	75 12                	jne    195c4 <tty_read+0x26e>
   195b2:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   195b6:	8b 40 08             	mov    0x8(%eax),%eax
   195b9:	83 e0 0f             	and    $0xf,%eax
   195bc:	85 c0                	test   %eax,%eax
   195be:	0f 84 7f 01 00 00    	je     19743 <tty_read+0x3ed>
				break;
			interruptible_sleep_on(&tty->secondary->proc_list);
   195c4:	8b 44 24 0c          	mov    0xc(%esp),%eax
   195c8:	8b 40 3c             	mov    0x3c(%eax),%eax
   195cb:	83 c0 0c             	add    $0xc,%eax
   195ce:	83 ec 0c             	sub    $0xc,%esp
   195d1:	50                   	push   %eax
   195d2:	e8 46 db fe ff       	call   711d <interruptible_sleep_on>
   195d7:	83 c4 10             	add    $0x10,%esp
			sti();
   195da:	fb                   	sti    
			continue;
   195db:	e9 56 01 00 00       	jmp    19736 <tty_read+0x3e0>
		}
		sti();
   195e0:	fb                   	sti    
		// 现在还没有遇到文件结束符或者正处于原始（非规范）模式。在这种模式中用户以字符流作为读取对象，也不识别其中的控制字符
		// （如文件结束符）。于是将字符直接放入用户数据缓冲区buf中，并把欲读字符数减1.此时如果欲读字符数已为0则中断循环。另外
		// 如果终端处于规范模式并且读取的字符是换行符NL（10），则也退出循环。除此之外，只要还没有取完欲读字符数nr并且辅助队列
		// 不空，就继续取队列中的字符。
		do {
			GETCH(tty->secondary, c);
   195e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
   195e5:	8b 50 3c             	mov    0x3c(%eax),%edx
   195e8:	8b 44 24 0c          	mov    0xc(%esp),%eax
   195ec:	8b 40 3c             	mov    0x3c(%eax),%eax
   195ef:	8b 40 08             	mov    0x8(%eax),%eax
   195f2:	0f b6 44 02 10       	movzbl 0x10(%edx,%eax,1),%eax
   195f7:	88 44 24 0b          	mov    %al,0xb(%esp)
   195fb:	8b 44 24 0c          	mov    0xc(%esp),%eax
   195ff:	8b 40 3c             	mov    0x3c(%eax),%eax
   19602:	8b 54 24 0c          	mov    0xc(%esp),%edx
   19606:	8b 52 3c             	mov    0x3c(%edx),%edx
   19609:	8b 52 08             	mov    0x8(%edx),%edx
   1960c:	83 c2 01             	add    $0x1,%edx
   1960f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   19615:	89 50 08             	mov    %edx,0x8(%eax)
			if ((EOF_CHAR(tty) != _POSIX_VDISABLE && c == EOF_CHAR(tty)) || c == 10)
   19618:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1961c:	0f b6 40 15          	movzbl 0x15(%eax),%eax
   19620:	84 c0                	test   %al,%al
   19622:	74 14                	je     19638 <tty_read+0x2e2>
   19624:	0f be 54 24 0b       	movsbl 0xb(%esp),%edx
   19629:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1962d:	0f b6 40 15          	movzbl 0x15(%eax),%eax
   19631:	0f b6 c0             	movzbl %al,%eax
   19634:	39 c2                	cmp    %eax,%edx
   19636:	74 07                	je     1963f <tty_read+0x2e9>
   19638:	80 7c 24 0b 0a       	cmpb   $0xa,0xb(%esp)
   1963d:	75 0e                	jne    1964d <tty_read+0x2f7>
				tty->secondary->data--;
   1963f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19643:	8b 40 3c             	mov    0x3c(%eax),%eax
   19646:	8b 10                	mov    (%eax),%edx
   19648:	83 ea 01             	sub    $0x1,%edx
   1964b:	89 10                	mov    %edx,(%eax)
			if ((EOF_CHAR(tty) != _POSIX_VDISABLE && c == EOF_CHAR(tty)) && L_CANON(tty))
   1964d:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19651:	0f b6 40 15          	movzbl 0x15(%eax),%eax
   19655:	84 c0                	test   %al,%al
   19657:	74 22                	je     1967b <tty_read+0x325>
   19659:	0f be 54 24 0b       	movsbl 0xb(%esp),%edx
   1965e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19662:	0f b6 40 15          	movzbl 0x15(%eax),%eax
   19666:	0f b6 c0             	movzbl %al,%eax
   19669:	39 c2                	cmp    %eax,%edx
   1966b:	75 0e                	jne    1967b <tty_read+0x325>
   1966d:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19671:	8b 40 0c             	mov    0xc(%eax),%eax
   19674:	83 e0 02             	and    $0x2,%eax
   19677:	85 c0                	test   %eax,%eax
   19679:	75 67                	jne    196e2 <tty_read+0x38c>
				break;
			else {
				put_fs_byte(c, b++);
   1967b:	8b 44 24 18          	mov    0x18(%esp),%eax
   1967f:	8d 50 01             	lea    0x1(%eax),%edx
   19682:	89 54 24 18          	mov    %edx,0x18(%esp)
   19686:	0f be 54 24 0b       	movsbl 0xb(%esp),%edx
   1968b:	83 ec 08             	sub    $0x8,%esp
   1968e:	50                   	push   %eax
   1968f:	52                   	push   %edx
   19690:	e8 39 f3 ff ff       	call   189ce <put_fs_byte>
   19695:	83 c4 10             	add    $0x10,%esp
				if (!--nr)
   19698:	83 6c 24 38 01       	subl   $0x1,0x38(%esp)
   1969d:	83 7c 24 38 00       	cmpl   $0x0,0x38(%esp)
   196a2:	74 3a                	je     196de <tty_read+0x388>
					break;
			}
			if (c == 10 && L_CANON(tty))
   196a4:	80 7c 24 0b 0a       	cmpb   $0xa,0xb(%esp)
   196a9:	75 0e                	jne    196b9 <tty_read+0x363>
   196ab:	8b 44 24 0c          	mov    0xc(%esp),%eax
   196af:	8b 40 0c             	mov    0xc(%eax),%eax
   196b2:	83 e0 02             	and    $0x2,%eax
   196b5:	85 c0                	test   %eax,%eax
   196b7:	75 28                	jne    196e1 <tty_read+0x38b>
				break;
		} while (nr > 0 && !EMPTY(tty->secondary));
   196b9:	83 7c 24 38 00       	cmpl   $0x0,0x38(%esp)
   196be:	7e 22                	jle    196e2 <tty_read+0x38c>
   196c0:	8b 44 24 0c          	mov    0xc(%esp),%eax
   196c4:	8b 40 3c             	mov    0x3c(%eax),%eax
   196c7:	8b 50 04             	mov    0x4(%eax),%edx
   196ca:	8b 44 24 0c          	mov    0xc(%esp),%eax
   196ce:	8b 40 3c             	mov    0x3c(%eax),%eax
   196d1:	8b 40 08             	mov    0x8(%eax),%eax
   196d4:	39 c2                	cmp    %eax,%edx
   196d6:	0f 85 05 ff ff ff    	jne    195e1 <tty_read+0x28b>
   196dc:	eb 04                	jmp    196e2 <tty_read+0x38c>
			if ((EOF_CHAR(tty) != _POSIX_VDISABLE && c == EOF_CHAR(tty)) && L_CANON(tty))
				break;
			else {
				put_fs_byte(c, b++);
				if (!--nr)
					break;
   196de:	90                   	nop
   196df:	eb 01                	jmp    196e2 <tty_read+0x38c>
			}
			if (c == 10 && L_CANON(tty))
				break;
   196e1:	90                   	nop
		// 执行到此，那么如果tty终端处于规范模式下，说明我们可能读到了换行符或者遇到了文件结束符。如果是处于非规范模式下，那么
		// 说明我们已经读取了nr个字符，或者辅助队列已经被取空了。于是我们首先唤醒等待队列的进程，然后看看是否设置过超时定时值
		// time。如果超时定时值time不为0,我们就要求等待一定的时间让其他进程可以把字符写入读队列中。于是设置进程读超时定时值
		// 为系统当前时间jiffies + 读超时值time。当然，如果终端处于规范模式，或者已经读取nr个字符，我们就可以直接退出这个大
		// 循环了。
		wake_up(&tty->read_q->proc_list);
   196e2:	8b 44 24 0c          	mov    0xc(%esp),%eax
   196e6:	8b 40 34             	mov    0x34(%eax),%eax
   196e9:	83 c0 0c             	add    $0xc,%eax
   196ec:	83 ec 0c             	sub    $0xc,%esp
   196ef:	50                   	push   %eax
   196f0:	e8 5a da fe ff       	call   714f <wake_up>
   196f5:	83 c4 10             	add    $0x10,%esp
		if (time)
   196f8:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   196fd:	74 17                	je     19716 <tty_read+0x3c0>
			current->timeout = time + jiffies;
   196ff:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   19704:	8b 4c 24 10          	mov    0x10(%esp),%ecx
   19708:	8b 15 00 eb 02 00    	mov    0x2eb00,%edx
   1970e:	01 ca                	add    %ecx,%edx
   19710:	89 90 d8 02 00 00    	mov    %edx,0x2d8(%eax)
		if (L_CANON(tty) || b - buf >= minimum)
   19716:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1971a:	8b 40 0c             	mov    0xc(%eax),%eax
   1971d:	83 e0 02             	and    $0x2,%eax
   19720:	85 c0                	test   %eax,%eax
   19722:	75 20                	jne    19744 <tty_read+0x3ee>
   19724:	8b 54 24 18          	mov    0x18(%esp),%edx
   19728:	8b 44 24 34          	mov    0x34(%esp),%eax
   1972c:	29 c2                	sub    %eax,%edx
   1972e:	89 d0                	mov    %edx,%eax
   19730:	3b 44 24 14          	cmp    0x14(%esp),%eax
   19734:	7d 0e                	jge    19744 <tty_read+0x3ee>
		minimum = nr;           									// 最多读取要求的字符数。
	// 现在我们开始从辅助队列中循环取出字符并放到用户缓冲区buf中。当欲读的字节数大于0,则执行以下循环操作。在循环过程中
	// 如果当前终端是伪终端，那么我们就执行其对应的另一个伪终端的写操作函数，让另一个伪终端把字符写入当前伪终端辅助队列
	// 缓冲区中。即让另一终端把写队列缓冲区中字符复制到当前伪终端读队列缓冲区中，并经行规则函数转换后放入当前伪终端辅助
	// 队列中。
	while (nr > 0) {
   19736:	83 7c 24 38 00       	cmpl   $0x0,0x38(%esp)
   1973b:	0f 8f bb fd ff ff    	jg     194fc <tty_read+0x1a6>
   19741:	eb 01                	jmp    19744 <tty_read+0x3ee>
			  (current->signal & ~current->blocked)) {
			  	sti();
				break;
			}
			if (IS_A_PTY_SLAVE(channel) && C_HUP(other_tty))
				break;
   19743:	90                   	nop
		if (L_CANON(tty) || b - buf >= minimum)
			break;
    }
	// 此时读取tty字符循环操作结束，因此复位进程的读取超时定时值timeout。如果此时当前进程已收到信号并且还没有读取到任何字符
	// 则以重新启动系统调用号“-ERESTARTSYS”返回。否则就返回已读取的字符数（b-buf）。
	current->timeout = 0;
   19744:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   19749:	c7 80 d8 02 00 00 00 	movl   $0x0,0x2d8(%eax)
   19750:	00 00 00 
	if ((current->signal & ~current->blocked) && !(b - buf))
   19753:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   19758:	8b 50 0c             	mov    0xc(%eax),%edx
   1975b:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   19760:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
   19766:	f7 d0                	not    %eax
   19768:	21 d0                	and    %edx,%eax
   1976a:	85 c0                	test   %eax,%eax
   1976c:	74 13                	je     19781 <tty_read+0x42b>
   1976e:	8b 54 24 18          	mov    0x18(%esp),%edx
   19772:	8b 44 24 34          	mov    0x34(%esp),%eax
   19776:	39 c2                	cmp    %eax,%edx
   19778:	75 07                	jne    19781 <tty_read+0x42b>
		return -ERESTARTSYS;
   1977a:	b8 00 fe ff ff       	mov    $0xfffffe00,%eax
   1977f:	eb 0c                	jmp    1978d <tty_read+0x437>
	return (b - buf);
   19781:	8b 54 24 18          	mov    0x18(%esp),%edx
   19785:	8b 44 24 34          	mov    0x34(%esp),%eax
   19789:	29 c2                	sub    %eax,%edx
   1978b:	89 d0                	mov    %edx,%eax
}
   1978d:	83 c4 2c             	add    $0x2c,%esp
   19790:	c3                   	ret    

00019791 <tty_write>:
// tty写函数.
// 把用户缓冲区中的字符放入tty写队列缓冲区中.
// 参数:channel - 子设备号;buf - 缓冲区指针;nr - 写字节数.
// 返回已写字节数.
int tty_write(unsigned channel, char * buf, int nr)
{
   19791:	83 ec 1c             	sub    $0x1c,%esp
	static int cr_flag=0;
	struct tty_struct * tty;
	char c, *b = buf;
   19794:	8b 44 24 24          	mov    0x24(%esp),%eax
   19798:	89 44 24 08          	mov    %eax,0x8(%esp)

	// 首先判断参数有效性并取终端的tty结构指针.如果tty终端的三个缓冲队列指针都是NULL,则返回EIO出错信息.
	if (channel > 255)
   1979c:	81 7c 24 20 ff 00 00 	cmpl   $0xff,0x20(%esp)
   197a3:	00 
   197a4:	76 0a                	jbe    197b0 <tty_write+0x1f>
		return -EIO;
   197a6:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   197ab:	e9 b7 02 00 00       	jmp    19a67 <tty_write+0x2d6>
	tty = TTY_TABLE(channel);
   197b0:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
   197b5:	74 28                	je     197df <tty_write+0x4e>
   197b7:	83 7c 24 20 3f       	cmpl   $0x3f,0x20(%esp)
   197bc:	77 13                	ja     197d1 <tty_write+0x40>
   197be:	8b 44 24 20          	mov    0x20(%esp),%eax
   197c2:	05 ff ff ff 03       	add    $0x3ffffff,%eax
   197c7:	c1 e0 06             	shl    $0x6,%eax
   197ca:	05 20 18 04 00       	add    $0x41820,%eax
   197cf:	eb 1b                	jmp    197ec <tty_write+0x5b>
   197d1:	8b 44 24 20          	mov    0x20(%esp),%eax
   197d5:	c1 e0 06             	shl    $0x6,%eax
   197d8:	05 20 18 04 00       	add    $0x41820,%eax
   197dd:	eb 0d                	jmp    197ec <tty_write+0x5b>
   197df:	a1 80 12 03 00       	mov    0x31280,%eax
   197e4:	c1 e0 06             	shl    $0x6,%eax
   197e7:	05 20 18 04 00       	add    $0x41820,%eax
   197ec:	89 44 24 04          	mov    %eax,0x4(%esp)
	if (!(tty->write_q || tty->read_q || tty->secondary))
   197f0:	8b 44 24 04          	mov    0x4(%esp),%eax
   197f4:	8b 40 38             	mov    0x38(%eax),%eax
   197f7:	85 c0                	test   %eax,%eax
   197f9:	75 20                	jne    1981b <tty_write+0x8a>
   197fb:	8b 44 24 04          	mov    0x4(%esp),%eax
   197ff:	8b 40 34             	mov    0x34(%eax),%eax
   19802:	85 c0                	test   %eax,%eax
   19804:	75 15                	jne    1981b <tty_write+0x8a>
   19806:	8b 44 24 04          	mov    0x4(%esp),%eax
   1980a:	8b 40 3c             	mov    0x3c(%eax),%eax
   1980d:	85 c0                	test   %eax,%eax
   1980f:	75 0a                	jne    1981b <tty_write+0x8a>
		return -EIO;
   19811:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   19816:	e9 4c 02 00 00       	jmp    19a67 <tty_write+0x2d6>
	// 如果若终端本地模式标志集中设置了TOSTOP,表示后台进程输出时需要发送信号SIGTTOU.如果当前进程使用的是这里正在处理的tty终端,但该终端的进程组号却与当前
	// 进程组号不同,即表示当前进程是后台进程组中的一个进程,即进程不在前台.于是我们要停止当前进程组的所有进程.因此这里就需要向当前进程组发送SIGTTOU信号,并返回
	// 等待成为前台进程组后再执行写操作.
	if (L_TOSTOP(tty) &&
   1981b:	8b 44 24 04          	mov    0x4(%esp),%eax
   1981f:	8b 40 0c             	mov    0xc(%eax),%eax
   19822:	25 00 01 00 00       	and    $0x100,%eax
   19827:	85 c0                	test   %eax,%eax
   19829:	0f 84 1e 02 00 00    	je     19a4d <tty_write+0x2bc>
	    (current->tty == channel) && (tty->pgrp != current->pgrp))
   1982f:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   19834:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
	if (!(tty->write_q || tty->read_q || tty->secondary))
		return -EIO;
	// 如果若终端本地模式标志集中设置了TOSTOP,表示后台进程输出时需要发送信号SIGTTOU.如果当前进程使用的是这里正在处理的tty终端,但该终端的进程组号却与当前
	// 进程组号不同,即表示当前进程是后台进程组中的一个进程,即进程不在前台.于是我们要停止当前进程组的所有进程.因此这里就需要向当前进程组发送SIGTTOU信号,并返回
	// 等待成为前台进程组后再执行写操作.
	if (L_TOSTOP(tty) &&
   1983a:	3b 44 24 20          	cmp    0x20(%esp),%eax
   1983e:	0f 85 09 02 00 00    	jne    19a4d <tty_write+0x2bc>
	    (current->tty == channel) && (tty->pgrp != current->pgrp))
   19844:	8b 44 24 04          	mov    0x4(%esp),%eax
   19848:	8b 50 24             	mov    0x24(%eax),%edx
   1984b:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   19850:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
   19856:	39 c2                	cmp    %eax,%edx
   19858:	0f 84 ef 01 00 00    	je     19a4d <tty_write+0x2bc>
		return(tty_signal(SIGTTOU, tty));
   1985e:	83 ec 08             	sub    $0x8,%esp
   19861:	ff 74 24 0c          	pushl  0xc(%esp)
   19865:	6a 16                	push   $0x16
   19867:	e8 34 fa ff ff       	call   192a0 <tty_signal>
   1986c:	83 c4 10             	add    $0x10,%esp
   1986f:	e9 f3 01 00 00       	jmp    19a67 <tty_write+0x2d6>
	// 现在我们开始从用户缓冲区buf中循环取出字符并放到写队列缓冲区中.当欲写字节数大于0,则执行以下循环操作.在循环过程中,如果此时tty写队列已满,则当前进程进入可中断
	// 睡眠状态.如果当前进程有信号要处理,则退出循环体.
	while (nr > 0) {
		sleep_if_full(tty->write_q);
   19874:	8b 44 24 04          	mov    0x4(%esp),%eax
   19878:	8b 40 38             	mov    0x38(%eax),%eax
   1987b:	83 ec 0c             	sub    $0xc,%esp
   1987e:	50                   	push   %eax
   1987f:	e8 0d f2 ff ff       	call   18a91 <sleep_if_full>
   19884:	83 c4 10             	add    $0x10,%esp
		if (current->signal & ~current->blocked)
   19887:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1988c:	8b 50 0c             	mov    0xc(%eax),%edx
   1988f:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   19894:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
   1989a:	f7 d0                	not    %eax
   1989c:	21 d0                	and    %edx,%eax
   1989e:	85 c0                	test   %eax,%eax
   198a0:	0f 85 b4 01 00 00    	jne    19a5a <tty_write+0x2c9>
			break;
		// 当要写的字符数nr还大于0并且tty写队列缓冲区不满,则循环执行以下操作.首先从用户缓冲区中取1字节.
		while (nr > 0 && !FULL(tty->write_q)) {
   198a6:	e9 54 01 00 00       	jmp    199ff <tty_write+0x26e>
			c = get_fs_byte(b);
   198ab:	83 ec 0c             	sub    $0xc,%esp
   198ae:	ff 74 24 14          	pushl  0x14(%esp)
   198b2:	e8 09 f1 ff ff       	call   189c0 <get_fs_byte>
   198b7:	83 c4 10             	add    $0x10,%esp
   198ba:	88 44 24 0f          	mov    %al,0xf(%esp)
			// 如果终端输出模式标志集中的执行输出处理标志OPOST置位,则执行对字符的后处理操作.
			if (O_POST(tty)) {
   198be:	8b 44 24 04          	mov    0x4(%esp),%eax
   198c2:	8b 40 04             	mov    0x4(%eax),%eax
   198c5:	83 e0 01             	and    $0x1,%eax
   198c8:	85 c0                	test   %eax,%eax
   198ca:	0f 84 e4 00 00 00    	je     199b4 <tty_write+0x223>
				// 如果该字符是回车符'\r'(CR,13)并且回车符转换行标志OCRNL置位,则将该字符换成行符'\n'(NL,10);
				if (c == '\r' && O_CRNL(tty))
   198d0:	80 7c 24 0f 0d       	cmpb   $0xd,0xf(%esp)
   198d5:	75 15                	jne    198ec <tty_write+0x15b>
   198d7:	8b 44 24 04          	mov    0x4(%esp),%eax
   198db:	8b 40 04             	mov    0x4(%eax),%eax
   198de:	83 e0 08             	and    $0x8,%eax
   198e1:	85 c0                	test   %eax,%eax
   198e3:	74 07                	je     198ec <tty_write+0x15b>
					c = '\n';
   198e5:	c6 44 24 0f 0a       	movb   $0xa,0xf(%esp)
   198ea:	eb 1a                	jmp    19906 <tty_write+0x175>
				// 如果该字符是换行符'\n'(NL,10)并且换行转回车功能标志ONLRET置位的话,则将该字符换成回车符'\r'(CR,13).
				else if (c == '\n' && O_NLRET(tty))
   198ec:	80 7c 24 0f 0a       	cmpb   $0xa,0xf(%esp)
   198f1:	75 13                	jne    19906 <tty_write+0x175>
   198f3:	8b 44 24 04          	mov    0x4(%esp),%eax
   198f7:	8b 40 04             	mov    0x4(%eax),%eax
   198fa:	83 e0 20             	and    $0x20,%eax
   198fd:	85 c0                	test   %eax,%eax
   198ff:	74 05                	je     19906 <tty_write+0x175>
					c = '\r';
   19901:	c6 44 24 0f 0d       	movb   $0xd,0xf(%esp)
				// 如果该字符是换行符'\n'并且回车标志cr_flag没有置位,但换行转回车-换行标志ONLCR置位的话,则将cr_flag标志置位,并将一回车符放入写队列中.然后继续处理下一个字符.
				if (c == '\n' && !cr_flag && O_NLCR(tty)) {
   19906:	80 7c 24 0f 0a       	cmpb   $0xa,0xf(%esp)
   1990b:	75 59                	jne    19966 <tty_write+0x1d5>
   1990d:	a1 00 ee 03 00       	mov    0x3ee00,%eax
   19912:	85 c0                	test   %eax,%eax
   19914:	75 50                	jne    19966 <tty_write+0x1d5>
   19916:	8b 44 24 04          	mov    0x4(%esp),%eax
   1991a:	8b 40 04             	mov    0x4(%eax),%eax
   1991d:	83 e0 04             	and    $0x4,%eax
   19920:	85 c0                	test   %eax,%eax
   19922:	74 42                	je     19966 <tty_write+0x1d5>
					cr_flag = 1;
   19924:	c7 05 00 ee 03 00 01 	movl   $0x1,0x3ee00
   1992b:	00 00 00 
					PUTCH(13, tty->write_q);
   1992e:	8b 44 24 04          	mov    0x4(%esp),%eax
   19932:	8b 50 38             	mov    0x38(%eax),%edx
   19935:	8b 44 24 04          	mov    0x4(%esp),%eax
   19939:	8b 40 38             	mov    0x38(%eax),%eax
   1993c:	8b 40 04             	mov    0x4(%eax),%eax
   1993f:	c6 44 02 10 0d       	movb   $0xd,0x10(%edx,%eax,1)
   19944:	8b 44 24 04          	mov    0x4(%esp),%eax
   19948:	8b 40 38             	mov    0x38(%eax),%eax
   1994b:	8b 54 24 04          	mov    0x4(%esp),%edx
   1994f:	8b 52 38             	mov    0x38(%edx),%edx
   19952:	8b 52 04             	mov    0x4(%edx),%edx
   19955:	83 c2 01             	add    $0x1,%edx
   19958:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   1995e:	89 50 04             	mov    %edx,0x4(%eax)
					continue;
   19961:	e9 99 00 00 00       	jmp    199ff <tty_write+0x26e>
				}
				// 如果小写转大写标志OLCUC置位的话,就将该字符转成大写字符.
				if (O_LCUC(tty))
   19966:	8b 44 24 04          	mov    0x4(%esp),%eax
   1996a:	8b 40 04             	mov    0x4(%eax),%eax
   1996d:	83 e0 02             	and    $0x2,%eax
   19970:	85 c0                	test   %eax,%eax
   19972:	74 40                	je     199b4 <tty_write+0x223>
					c = toupper(c);									// 小写转成大写字符.
   19974:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   19979:	a2 20 58 04 00       	mov    %al,0x45820
   1997e:	0f b6 05 20 58 04 00 	movzbl 0x45820,%eax
   19985:	0f be c0             	movsbl %al,%eax
   19988:	83 c0 01             	add    $0x1,%eax
   1998b:	05 a0 e5 02 00       	add    $0x2e5a0,%eax
   19990:	0f b6 00             	movzbl (%eax),%eax
   19993:	0f b6 c0             	movzbl %al,%eax
   19996:	83 e0 02             	and    $0x2,%eax
   19999:	85 c0                	test   %eax,%eax
   1999b:	74 0c                	je     199a9 <tty_write+0x218>
   1999d:	0f b6 05 20 58 04 00 	movzbl 0x45820,%eax
   199a4:	83 e8 20             	sub    $0x20,%eax
   199a7:	eb 07                	jmp    199b0 <tty_write+0x21f>
   199a9:	0f b6 05 20 58 04 00 	movzbl 0x45820,%eax
   199b0:	88 44 24 0f          	mov    %al,0xf(%esp)
			}
			// 接着把用户数据缓冲指针b前移1字节;欲写字节数减1字节;复位cr_flag标志,并将该字节放入tty写队列中.
			b++; nr--;
   199b4:	83 44 24 08 01       	addl   $0x1,0x8(%esp)
   199b9:	83 6c 24 28 01       	subl   $0x1,0x28(%esp)
			cr_flag = 0;
   199be:	c7 05 00 ee 03 00 00 	movl   $0x0,0x3ee00
   199c5:	00 00 00 
			PUTCH(c, tty->write_q);
   199c8:	8b 44 24 04          	mov    0x4(%esp),%eax
   199cc:	8b 50 38             	mov    0x38(%eax),%edx
   199cf:	8b 44 24 04          	mov    0x4(%esp),%eax
   199d3:	8b 40 38             	mov    0x38(%eax),%eax
   199d6:	8b 40 04             	mov    0x4(%eax),%eax
   199d9:	0f b6 4c 24 0f       	movzbl 0xf(%esp),%ecx
   199de:	88 4c 02 10          	mov    %cl,0x10(%edx,%eax,1)
   199e2:	8b 44 24 04          	mov    0x4(%esp),%eax
   199e6:	8b 40 38             	mov    0x38(%eax),%eax
   199e9:	8b 54 24 04          	mov    0x4(%esp),%edx
   199ed:	8b 52 38             	mov    0x38(%edx),%edx
   199f0:	8b 52 04             	mov    0x4(%edx),%edx
   199f3:	83 c2 01             	add    $0x1,%edx
   199f6:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   199fc:	89 50 04             	mov    %edx,0x4(%eax)
	while (nr > 0) {
		sleep_if_full(tty->write_q);
		if (current->signal & ~current->blocked)
			break;
		// 当要写的字符数nr还大于0并且tty写队列缓冲区不满,则循环执行以下操作.首先从用户缓冲区中取1字节.
		while (nr > 0 && !FULL(tty->write_q)) {
   199ff:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   19a04:	7e 28                	jle    19a2e <tty_write+0x29d>
   19a06:	8b 44 24 04          	mov    0x4(%esp),%eax
   19a0a:	8b 40 38             	mov    0x38(%eax),%eax
   19a0d:	8b 50 08             	mov    0x8(%eax),%edx
   19a10:	8b 44 24 04          	mov    0x4(%esp),%eax
   19a14:	8b 40 38             	mov    0x38(%eax),%eax
   19a17:	8b 40 04             	mov    0x4(%eax),%eax
   19a1a:	29 c2                	sub    %eax,%edx
   19a1c:	89 d0                	mov    %edx,%eax
   19a1e:	83 e8 01             	sub    $0x1,%eax
   19a21:	25 ff 03 00 00       	and    $0x3ff,%eax
   19a26:	85 c0                	test   %eax,%eax
   19a28:	0f 85 7d fe ff ff    	jne    198ab <tty_write+0x11a>
			PUTCH(c, tty->write_q);
		}
		// 若要求的字符全部写完,或者写队列已满,则程序退出循环.此时会调用对应tty写函数,把写队列缓冲区中的字符显示在控制台屏幕上,或者通过串行端口发送出去.如果当前处理的tty
		// 是控制台终端,那么tty->write()调用的是con_write();如果tty是串行终端,则tty->write()调用的是rs_write()函数.若还有字节要写,则等待写队列中字符取走.
		// 所以这里调用调度程序,先去执行其他任务.
		tty->write(tty);
   19a2e:	8b 44 24 04          	mov    0x4(%esp),%eax
   19a32:	8b 40 30             	mov    0x30(%eax),%eax
   19a35:	83 ec 0c             	sub    $0xc,%esp
   19a38:	ff 74 24 10          	pushl  0x10(%esp)
   19a3c:	ff d0                	call   *%eax
   19a3e:	83 c4 10             	add    $0x10,%esp
		if (nr > 0)
   19a41:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   19a46:	7e 05                	jle    19a4d <tty_write+0x2bc>
			schedule();
   19a48:	e8 f8 d3 fe ff       	call   6e45 <schedule>
	if (L_TOSTOP(tty) &&
	    (current->tty == channel) && (tty->pgrp != current->pgrp))
		return(tty_signal(SIGTTOU, tty));
	// 现在我们开始从用户缓冲区buf中循环取出字符并放到写队列缓冲区中.当欲写字节数大于0,则执行以下循环操作.在循环过程中,如果此时tty写队列已满,则当前进程进入可中断
	// 睡眠状态.如果当前进程有信号要处理,则退出循环体.
	while (nr > 0) {
   19a4d:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   19a52:	0f 8f 1c fe ff ff    	jg     19874 <tty_write+0xe3>
   19a58:	eb 01                	jmp    19a5b <tty_write+0x2ca>
		sleep_if_full(tty->write_q);
		if (current->signal & ~current->blocked)
			break;
   19a5a:	90                   	nop
		// 所以这里调用调度程序,先去执行其他任务.
		tty->write(tty);
		if (nr > 0)
			schedule();
        }
	return (b - buf);												// 最后返回写入的字节数.
   19a5b:	8b 54 24 08          	mov    0x8(%esp),%edx
   19a5f:	8b 44 24 24          	mov    0x24(%esp),%eax
   19a63:	29 c2                	sub    %eax,%edx
   19a65:	89 d0                	mov    %edx,%eax
}
   19a67:	83 c4 1c             	add    $0x1c,%esp
   19a6a:	c3                   	ret    

00019a6b <do_tty_interrupt>:
// tty中断处理调用函数 - 字符规范模式处理.
// 参数:tty - 指定的tty终端号.
// 将指定tty终端队列缓冲区中的字符复制或转换成规范(熟)模式字符并存放在辅助队列中.该函数会在串口读字符中断(rs_io.s)和键盘中断(
// kerboard.S)中被调用.
void do_tty_interrupt(int tty)
{
   19a6b:	83 ec 0c             	sub    $0xc,%esp
	copy_to_cooked(TTY_TABLE(tty));
   19a6e:	83 7c 24 10 00       	cmpl   $0x0,0x10(%esp)
   19a73:	74 26                	je     19a9b <do_tty_interrupt+0x30>
   19a75:	83 7c 24 10 3f       	cmpl   $0x3f,0x10(%esp)
   19a7a:	7f 11                	jg     19a8d <do_tty_interrupt+0x22>
   19a7c:	8b 44 24 10          	mov    0x10(%esp),%eax
   19a80:	83 e8 01             	sub    $0x1,%eax
   19a83:	c1 e0 06             	shl    $0x6,%eax
   19a86:	05 20 18 04 00       	add    $0x41820,%eax
   19a8b:	eb 1b                	jmp    19aa8 <do_tty_interrupt+0x3d>
   19a8d:	8b 44 24 10          	mov    0x10(%esp),%eax
   19a91:	c1 e0 06             	shl    $0x6,%eax
   19a94:	05 20 18 04 00       	add    $0x41820,%eax
   19a99:	eb 0d                	jmp    19aa8 <do_tty_interrupt+0x3d>
   19a9b:	a1 80 12 03 00       	mov    0x31280,%eax
   19aa0:	c1 e0 06             	shl    $0x6,%eax
   19aa3:	05 20 18 04 00       	add    $0x41820,%eax
   19aa8:	83 ec 0c             	sub    $0xc,%esp
   19aab:	50                   	push   %eax
   19aac:	e8 7c f0 ff ff       	call   18b2d <copy_to_cooked>
   19ab1:	83 c4 10             	add    $0x10,%esp
}
   19ab4:	90                   	nop
   19ab5:	83 c4 0c             	add    $0xc,%esp
   19ab8:	c3                   	ret    

00019ab9 <chr_dev_init>:

//字符设备初始化函数.空,为以后扩展做准备.
void chr_dev_init(void)
{
}
   19ab9:	90                   	nop
   19aba:	c3                   	ret    

00019abb <tty_init>:

// tty终端初始化函数
// 初始化所有终端缓冲队列,初始化串口终端和控制台终端.
void tty_init(void)
{
   19abb:	57                   	push   %edi
   19abc:	56                   	push   %esi
   19abd:	53                   	push   %ebx
   19abe:	83 ec 10             	sub    $0x10,%esp
	int i;

	// 首先初始化所有终端的缓冲队列结构,设置初值.对于串行终端的读/写缓冲队列,将它们的data字段设置为串行端口基地址值.串中1是0x3f8,
	// 串口2是0x2f8.然后先初步设置所有终端的tty结构.
	// 其中特殊字符数组c_cc[]设置的初值定义在include/linux/tty.h文件中.
	for (i = 0 ; i < QUEUES ; i++)
   19ac1:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   19ac8:	00 
   19ac9:	e9 93 00 00 00       	jmp    19b61 <tty_init+0xa6>
		tty_queues[i] = (struct tty_queue) {0, 0, 0, 0, ""};
   19ace:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19ad2:	c1 e0 04             	shl    $0x4,%eax
   19ad5:	89 c2                	mov    %eax,%edx
   19ad7:	c1 e2 06             	shl    $0x6,%edx
   19ada:	01 d0                	add    %edx,%eax
   19adc:	05 a0 12 03 00       	add    $0x312a0,%eax
   19ae1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19ae7:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19aeb:	c1 e0 04             	shl    $0x4,%eax
   19aee:	89 c2                	mov    %eax,%edx
   19af0:	c1 e2 06             	shl    $0x6,%edx
   19af3:	01 d0                	add    %edx,%eax
   19af5:	05 a4 12 03 00       	add    $0x312a4,%eax
   19afa:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19b00:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19b04:	c1 e0 04             	shl    $0x4,%eax
   19b07:	89 c2                	mov    %eax,%edx
   19b09:	c1 e2 06             	shl    $0x6,%edx
   19b0c:	01 d0                	add    %edx,%eax
   19b0e:	05 a8 12 03 00       	add    $0x312a8,%eax
   19b13:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19b19:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19b1d:	c1 e0 04             	shl    $0x4,%eax
   19b20:	89 c2                	mov    %eax,%edx
   19b22:	c1 e2 06             	shl    $0x6,%edx
   19b25:	01 d0                	add    %edx,%eax
   19b27:	05 ac 12 03 00       	add    $0x312ac,%eax
   19b2c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19b32:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19b36:	c1 e0 04             	shl    $0x4,%eax
   19b39:	89 c2                	mov    %eax,%edx
   19b3b:	c1 e2 06             	shl    $0x6,%edx
   19b3e:	01 d0                	add    %edx,%eax
   19b40:	05 b0 12 03 00       	add    $0x312b0,%eax
   19b45:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19b4b:	8d 50 04             	lea    0x4(%eax),%edx
   19b4e:	b8 00 00 00 00       	mov    $0x0,%eax
   19b53:	b9 ff 00 00 00       	mov    $0xff,%ecx
   19b58:	89 d7                	mov    %edx,%edi
   19b5a:	f3 ab                	rep stos %eax,%es:(%edi)
	int i;

	// 首先初始化所有终端的缓冲队列结构,设置初值.对于串行终端的读/写缓冲队列,将它们的data字段设置为串行端口基地址值.串中1是0x3f8,
	// 串口2是0x2f8.然后先初步设置所有终端的tty结构.
	// 其中特殊字符数组c_cc[]设置的初值定义在include/linux/tty.h文件中.
	for (i = 0 ; i < QUEUES ; i++)
   19b5c:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   19b61:	83 7c 24 0c 35       	cmpl   $0x35,0xc(%esp)
   19b66:	0f 8e 62 ff ff ff    	jle    19ace <tty_init+0x13>
		tty_queues[i] = (struct tty_queue) {0, 0, 0, 0, ""};
	rs_queues[0] = (struct tty_queue) {0x3f8, 0, 0, 0, ""};
   19b6c:	ba 20 74 03 00       	mov    $0x37420,%edx
   19b71:	bb 80 43 02 00       	mov    $0x24380,%ebx
   19b76:	b8 04 01 00 00       	mov    $0x104,%eax
   19b7b:	89 d7                	mov    %edx,%edi
   19b7d:	89 de                	mov    %ebx,%esi
   19b7f:	89 c1                	mov    %eax,%ecx
   19b81:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	rs_queues[1] = (struct tty_queue) {0x3f8, 0, 0, 0, ""};
   19b83:	ba 30 78 03 00       	mov    $0x37830,%edx
   19b88:	bb 80 43 02 00       	mov    $0x24380,%ebx
   19b8d:	b8 04 01 00 00       	mov    $0x104,%eax
   19b92:	89 d7                	mov    %edx,%edi
   19b94:	89 de                	mov    %ebx,%esi
   19b96:	89 c1                	mov    %eax,%ecx
   19b98:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	rs_queues[3] = (struct tty_queue) {0x2f8, 0, 0, 0, ""};
   19b9a:	ba 50 80 03 00       	mov    $0x38050,%edx
   19b9f:	bb a0 47 02 00       	mov    $0x247a0,%ebx
   19ba4:	b8 04 01 00 00       	mov    $0x104,%eax
   19ba9:	89 d7                	mov    %edx,%edi
   19bab:	89 de                	mov    %ebx,%esi
   19bad:	89 c1                	mov    %eax,%ecx
   19baf:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	rs_queues[4] = (struct tty_queue) {0x2f8, 0, 0, 0, ""};
   19bb1:	ba 60 84 03 00       	mov    $0x38460,%edx
   19bb6:	bb a0 47 02 00       	mov    $0x247a0,%ebx
   19bbb:	b8 04 01 00 00       	mov    $0x104,%eax
   19bc0:	89 d7                	mov    %edx,%edi
   19bc2:	89 de                	mov    %ebx,%esi
   19bc4:	89 c1                	mov    %eax,%ecx
   19bc6:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	for (i = 0 ; i < 256 ; i++) {
   19bc8:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   19bcf:	00 
   19bd0:	e9 14 01 00 00       	jmp    19ce9 <tty_init+0x22e>
		tty_table[i] =  (struct tty_struct) {
   19bd5:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19bd9:	c1 e0 06             	shl    $0x6,%eax
   19bdc:	05 20 18 04 00       	add    $0x41820,%eax
   19be1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19be7:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19beb:	c1 e0 06             	shl    $0x6,%eax
   19bee:	05 24 18 04 00       	add    $0x41824,%eax
   19bf3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19bf9:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19bfd:	c1 e0 06             	shl    $0x6,%eax
   19c00:	05 28 18 04 00       	add    $0x41828,%eax
   19c05:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19c0b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19c0f:	c1 e0 06             	shl    $0x6,%eax
   19c12:	05 2c 18 04 00       	add    $0x4182c,%eax
   19c17:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19c1d:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19c21:	c1 e0 06             	shl    $0x6,%eax
   19c24:	05 30 18 04 00       	add    $0x41830,%eax
   19c29:	c6 00 00             	movb   $0x0,(%eax)
   19c2c:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19c30:	c1 e0 06             	shl    $0x6,%eax
   19c33:	05 30 18 04 00       	add    $0x41830,%eax
   19c38:	8b 15 b0 4b 02 00    	mov    0x24bb0,%edx
   19c3e:	89 50 01             	mov    %edx,0x1(%eax)
   19c41:	8b 15 b4 4b 02 00    	mov    0x24bb4,%edx
   19c47:	89 50 05             	mov    %edx,0x5(%eax)
   19c4a:	8b 15 b8 4b 02 00    	mov    0x24bb8,%edx
   19c50:	89 50 09             	mov    %edx,0x9(%eax)
   19c53:	8b 15 bc 4b 02 00    	mov    0x24bbc,%edx
   19c59:	89 50 0d             	mov    %edx,0xd(%eax)
   19c5c:	0f b6 15 c0 4b 02 00 	movzbl 0x24bc0,%edx
   19c63:	88 50 11             	mov    %dl,0x11(%eax)
   19c66:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19c6a:	c1 e0 06             	shl    $0x6,%eax
   19c6d:	05 44 18 04 00       	add    $0x41844,%eax
   19c72:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19c78:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19c7c:	c1 e0 06             	shl    $0x6,%eax
   19c7f:	05 48 18 04 00       	add    $0x41848,%eax
   19c84:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19c8a:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19c8e:	c1 e0 06             	shl    $0x6,%eax
   19c91:	05 4c 18 04 00       	add    $0x4184c,%eax
   19c96:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19c9c:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19ca0:	c1 e0 06             	shl    $0x6,%eax
   19ca3:	05 50 18 04 00       	add    $0x41850,%eax
   19ca8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19cae:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19cb2:	c1 e0 06             	shl    $0x6,%eax
   19cb5:	05 54 18 04 00       	add    $0x41854,%eax
   19cba:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19cc0:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19cc4:	c1 e0 06             	shl    $0x6,%eax
   19cc7:	05 58 18 04 00       	add    $0x41858,%eax
   19ccc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19cd2:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19cd6:	c1 e0 06             	shl    $0x6,%eax
   19cd9:	05 5c 18 04 00       	add    $0x4185c,%eax
   19cde:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tty_queues[i] = (struct tty_queue) {0, 0, 0, 0, ""};
	rs_queues[0] = (struct tty_queue) {0x3f8, 0, 0, 0, ""};
	rs_queues[1] = (struct tty_queue) {0x3f8, 0, 0, 0, ""};
	rs_queues[3] = (struct tty_queue) {0x2f8, 0, 0, 0, ""};
	rs_queues[4] = (struct tty_queue) {0x2f8, 0, 0, 0, ""};
	for (i = 0 ; i < 256 ; i++) {
   19ce4:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   19ce9:	81 7c 24 0c ff 00 00 	cmpl   $0xff,0xc(%esp)
   19cf0:	00 
   19cf1:	0f 8e de fe ff ff    	jle    19bd5 <tty_init+0x11a>
	// 接着初始化控制台终端(console.c).把con_init()放在这里,是因为我们需要根据显示卡类型和显示内存容量来确定系统虚拟控制台的数量
	// NR_CONSOLES.该值被用于随后的控制tty结构初始化循环中.对于控制台的tty结构,425--430行是tty结构中包含的termios结构字段.其中
	// 输入模式标志集被初始化为ICRNL标志;输出模式标志被初始化含有后处理标志OPOST和把NL转换成CRNL的标志ONLCR;本地模式标志集被初始化
	// 含有IXON,ICAON,ECHO,ECHOCTL和ECHOKE标志;控制字符数组c_cc[]被设置含有初始值INIT_C_CC.
	// 435行上初始化控制台终端tty结构中的读缓冲,写缓冲和辅助缓冲队列结构,它们分别指向tty缓冲队列结构数组tty_table[]中的相应结构项.
	con_init();
   19cf7:	e8 4c 30 00 00       	call   1cd48 <con_init>
	for (i = 0 ; i < NR_CONSOLES ; i++) {
   19cfc:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   19d03:	00 
   19d04:	e9 42 01 00 00       	jmp    19e4b <tty_init+0x390>
			INIT_C_CC},												// 控制字符数组c_cc[]
			0,														/* initial pgrp */	// 所属初始进程组pgrp
			0,														/* initial session */	// 初始会话级session
			0,														/* initial stopped */	// 初始停止标志stopped
			con_write,
			con_queues + 0 + i * 3, con_queues + 1 + i * 3, con_queues + 2 + i * 3
   19d09:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19d0d:	69 c0 30 0c 00 00    	imul   $0xc30,%eax,%eax
   19d13:	8d b0 a0 12 03 00    	lea    0x312a0(%eax),%esi
   19d19:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19d1d:	69 c0 30 0c 00 00    	imul   $0xc30,%eax,%eax
   19d23:	05 10 04 00 00       	add    $0x410,%eax
   19d28:	8d 98 a0 12 03 00    	lea    0x312a0(%eax),%ebx
   19d2e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19d32:	69 c0 30 0c 00 00    	imul   $0xc30,%eax,%eax
   19d38:	05 20 08 00 00       	add    $0x820,%eax
   19d3d:	8d 88 a0 12 03 00    	lea    0x312a0(%eax),%ecx
	// 输入模式标志集被初始化为ICRNL标志;输出模式标志被初始化含有后处理标志OPOST和把NL转换成CRNL的标志ONLCR;本地模式标志集被初始化
	// 含有IXON,ICAON,ECHO,ECHOCTL和ECHOKE标志;控制字符数组c_cc[]被设置含有初始值INIT_C_CC.
	// 435行上初始化控制台终端tty结构中的读缓冲,写缓冲和辅助缓冲队列结构,它们分别指向tty缓冲队列结构数组tty_table[]中的相应结构项.
	con_init();
	for (i = 0 ; i < NR_CONSOLES ; i++) {
		con_table[i] = (struct tty_struct) {
   19d43:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19d47:	c1 e0 06             	shl    $0x6,%eax
   19d4a:	05 20 18 04 00       	add    $0x41820,%eax
   19d4f:	c7 00 00 01 00 00    	movl   $0x100,(%eax)
   19d55:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19d59:	c1 e0 06             	shl    $0x6,%eax
   19d5c:	05 24 18 04 00       	add    $0x41824,%eax
   19d61:	c7 00 05 00 00 00    	movl   $0x5,(%eax)
   19d67:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19d6b:	c1 e0 06             	shl    $0x6,%eax
   19d6e:	05 28 18 04 00       	add    $0x41828,%eax
   19d73:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19d79:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19d7d:	c1 e0 06             	shl    $0x6,%eax
   19d80:	05 2c 18 04 00       	add    $0x4182c,%eax
   19d85:	c7 00 0b 0e 00 00    	movl   $0xe0b,(%eax)
   19d8b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19d8f:	c1 e0 06             	shl    $0x6,%eax
   19d92:	05 30 18 04 00       	add    $0x41830,%eax
   19d97:	c6 00 00             	movb   $0x0,(%eax)
   19d9a:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19d9e:	c1 e0 06             	shl    $0x6,%eax
   19da1:	05 30 18 04 00       	add    $0x41830,%eax
   19da6:	8b 15 b0 4b 02 00    	mov    0x24bb0,%edx
   19dac:	89 50 01             	mov    %edx,0x1(%eax)
   19daf:	8b 15 b4 4b 02 00    	mov    0x24bb4,%edx
   19db5:	89 50 05             	mov    %edx,0x5(%eax)
   19db8:	8b 15 b8 4b 02 00    	mov    0x24bb8,%edx
   19dbe:	89 50 09             	mov    %edx,0x9(%eax)
   19dc1:	8b 15 bc 4b 02 00    	mov    0x24bbc,%edx
   19dc7:	89 50 0d             	mov    %edx,0xd(%eax)
   19dca:	0f b6 15 c0 4b 02 00 	movzbl 0x24bc0,%edx
   19dd1:	88 50 11             	mov    %dl,0x11(%eax)
   19dd4:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19dd8:	c1 e0 06             	shl    $0x6,%eax
   19ddb:	05 44 18 04 00       	add    $0x41844,%eax
   19de0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19de6:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19dea:	c1 e0 06             	shl    $0x6,%eax
   19ded:	05 48 18 04 00       	add    $0x41848,%eax
   19df2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19df8:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19dfc:	c1 e0 06             	shl    $0x6,%eax
   19dff:	05 4c 18 04 00       	add    $0x4184c,%eax
   19e04:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19e0a:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19e0e:	c1 e0 06             	shl    $0x6,%eax
   19e11:	05 50 18 04 00       	add    $0x41850,%eax
   19e16:	c7 00 58 b9 01 00    	movl   $0x1b958,(%eax)
   19e1c:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19e20:	c1 e0 06             	shl    $0x6,%eax
   19e23:	05 54 18 04 00       	add    $0x41854,%eax
   19e28:	89 30                	mov    %esi,(%eax)
   19e2a:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19e2e:	c1 e0 06             	shl    $0x6,%eax
   19e31:	05 58 18 04 00       	add    $0x41858,%eax
   19e36:	89 18                	mov    %ebx,(%eax)
   19e38:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19e3c:	c1 e0 06             	shl    $0x6,%eax
   19e3f:	05 5c 18 04 00       	add    $0x4185c,%eax
   19e44:	89 08                	mov    %ecx,(%eax)
	// NR_CONSOLES.该值被用于随后的控制tty结构初始化循环中.对于控制台的tty结构,425--430行是tty结构中包含的termios结构字段.其中
	// 输入模式标志集被初始化为ICRNL标志;输出模式标志被初始化含有后处理标志OPOST和把NL转换成CRNL的标志ONLCR;本地模式标志集被初始化
	// 含有IXON,ICAON,ECHO,ECHOCTL和ECHOKE标志;控制字符数组c_cc[]被设置含有初始值INIT_C_CC.
	// 435行上初始化控制台终端tty结构中的读缓冲,写缓冲和辅助缓冲队列结构,它们分别指向tty缓冲队列结构数组tty_table[]中的相应结构项.
	con_init();
	for (i = 0 ; i < NR_CONSOLES ; i++) {
   19e46:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   19e4b:	a1 20 ee 03 00       	mov    0x3ee20,%eax
   19e50:	39 44 24 0c          	cmp    %eax,0xc(%esp)
   19e54:	0f 8c af fe ff ff    	jl     19d09 <tty_init+0x24e>
			con_queues + 0 + i * 3, con_queues + 1 + i * 3, con_queues + 2 + i * 3
		};
	}
	// 然后初始化串行终端的tty结构各字段。450行初始化串行终端tty结构中的读/写和辅助缓冲队列结构，它们分别指向tty缓冲队列
	// 结构数组tty_table[]中相应结构项。
	for (i = 0 ; i < NR_SERIALS ; i++) {
   19e5a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   19e61:	00 
   19e62:	e9 c8 00 00 00       	jmp    19f2f <tty_init+0x474>
		rs_table[i] = (struct tty_struct) {
   19e67:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19e6b:	83 c0 40             	add    $0x40,%eax
   19e6e:	c1 e0 06             	shl    $0x6,%eax
   19e71:	05 20 18 04 00       	add    $0x41820,%eax
			INIT_C_CC},                     						// 控制字符数组。
			0,                              						// 所属初始进程组。
			0,                              						// 初始会话组。
			0,                              						// 初始停止标志。
			rs_write,                       						// 串口终端写函数。
			rs_queues + 0 + i * 3, rs_queues + 1 + i * 3, rs_queues + 2 + i * 3
   19e76:	8b 54 24 0c          	mov    0xc(%esp),%edx
   19e7a:	69 d2 30 0c 00 00    	imul   $0xc30,%edx,%edx
   19e80:	81 c2 80 61 00 00    	add    $0x6180,%edx
   19e86:	8d b2 a0 12 03 00    	lea    0x312a0(%edx),%esi
   19e8c:	8b 54 24 0c          	mov    0xc(%esp),%edx
   19e90:	69 d2 30 0c 00 00    	imul   $0xc30,%edx,%edx
   19e96:	81 c2 90 65 00 00    	add    $0x6590,%edx
   19e9c:	8d 9a a0 12 03 00    	lea    0x312a0(%edx),%ebx
   19ea2:	8b 54 24 0c          	mov    0xc(%esp),%edx
   19ea6:	69 d2 30 0c 00 00    	imul   $0xc30,%edx,%edx
   19eac:	81 c2 a0 69 00 00    	add    $0x69a0,%edx
   19eb2:	8d 8a a0 12 03 00    	lea    0x312a0(%edx),%ecx
		};
	}
	// 然后初始化串行终端的tty结构各字段。450行初始化串行终端tty结构中的读/写和辅助缓冲队列结构，它们分别指向tty缓冲队列
	// 结构数组tty_table[]中相应结构项。
	for (i = 0 ; i < NR_SERIALS ; i++) {
		rs_table[i] = (struct tty_struct) {
   19eb8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19ebe:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   19ec5:	c7 40 08 3b 00 00 00 	movl   $0x3b,0x8(%eax)
   19ecc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
   19ed3:	c6 40 10 00          	movb   $0x0,0x10(%eax)
   19ed7:	8b 15 b0 4b 02 00    	mov    0x24bb0,%edx
   19edd:	89 50 11             	mov    %edx,0x11(%eax)
   19ee0:	8b 15 b4 4b 02 00    	mov    0x24bb4,%edx
   19ee6:	89 50 15             	mov    %edx,0x15(%eax)
   19ee9:	8b 15 b8 4b 02 00    	mov    0x24bb8,%edx
   19eef:	89 50 19             	mov    %edx,0x19(%eax)
   19ef2:	8b 15 bc 4b 02 00    	mov    0x24bbc,%edx
   19ef8:	89 50 1d             	mov    %edx,0x1d(%eax)
   19efb:	0f b6 15 c0 4b 02 00 	movzbl 0x24bc0,%edx
   19f02:	88 50 21             	mov    %dl,0x21(%eax)
   19f05:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
   19f0c:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
   19f13:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
   19f1a:	c7 40 30 7f df 01 00 	movl   $0x1df7f,0x30(%eax)
   19f21:	89 70 34             	mov    %esi,0x34(%eax)
   19f24:	89 58 38             	mov    %ebx,0x38(%eax)
   19f27:	89 48 3c             	mov    %ecx,0x3c(%eax)
			con_queues + 0 + i * 3, con_queues + 1 + i * 3, con_queues + 2 + i * 3
		};
	}
	// 然后初始化串行终端的tty结构各字段。450行初始化串行终端tty结构中的读/写和辅助缓冲队列结构，它们分别指向tty缓冲队列
	// 结构数组tty_table[]中相应结构项。
	for (i = 0 ; i < NR_SERIALS ; i++) {
   19f2a:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   19f2f:	83 7c 24 0c 01       	cmpl   $0x1,0xc(%esp)
   19f34:	0f 8e 2d ff ff ff    	jle    19e67 <tty_init+0x3ac>
			rs_queues + 0 + i * 3, rs_queues + 1 + i * 3, rs_queues + 2 + i * 3
		};
	}
	// 然后再初始化伪终端使用的tty结构。伪终端是配对使用的，即一个主（master）伪终端配有一个从（slave）伪终端。因此对它们
	// 都要进行初始化设置。在循环中，我们首先初始化每个主伪终端的tty结构，然后再初始化其对应的从伪终端的tty结构。
	for (i = 0 ; i < NR_PTYS ; i++) {
   19f3a:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   19f41:	00 
   19f42:	e9 8d 01 00 00       	jmp    1a0d4 <tty_init+0x619>
		mpty_table[i] = (struct tty_struct) {
   19f47:	8b 44 24 0c          	mov    0xc(%esp),%eax
   19f4b:	83 e8 80             	sub    $0xffffff80,%eax
   19f4e:	c1 e0 06             	shl    $0x6,%eax
   19f51:	05 20 18 04 00       	add    $0x41820,%eax
			INIT_C_CC},                    							// 控制字符数组。
			0,                              						// 所属初始进程组。
			0,                              						// 初始会话组。
			0,                              						// 初始停止标志。
			mpty_write,                     						// 主伪终端写函数。
			mpty_queues + 0 + i * 3, mpty_queues + 1 + i * 3, mpty_queues + 2 + i * 3
   19f56:	8b 54 24 0c          	mov    0xc(%esp),%edx
   19f5a:	69 d2 30 0c 00 00    	imul   $0xc30,%edx,%edx
   19f60:	81 c2 e0 79 00 00    	add    $0x79e0,%edx
   19f66:	8d b2 a0 12 03 00    	lea    0x312a0(%edx),%esi
   19f6c:	8b 54 24 0c          	mov    0xc(%esp),%edx
   19f70:	69 d2 30 0c 00 00    	imul   $0xc30,%edx,%edx
   19f76:	81 c2 f0 7d 00 00    	add    $0x7df0,%edx
   19f7c:	8d 9a a0 12 03 00    	lea    0x312a0(%edx),%ebx
   19f82:	8b 54 24 0c          	mov    0xc(%esp),%edx
   19f86:	69 d2 30 0c 00 00    	imul   $0xc30,%edx,%edx
   19f8c:	81 c2 00 82 00 00    	add    $0x8200,%edx
   19f92:	8d 8a a0 12 03 00    	lea    0x312a0(%edx),%ecx
		};
	}
	// 然后再初始化伪终端使用的tty结构。伪终端是配对使用的，即一个主（master）伪终端配有一个从（slave）伪终端。因此对它们
	// 都要进行初始化设置。在循环中，我们首先初始化每个主伪终端的tty结构，然后再初始化其对应的从伪终端的tty结构。
	for (i = 0 ; i < NR_PTYS ; i++) {
		mpty_table[i] = (struct tty_struct) {
   19f98:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   19f9e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   19fa5:	c7 40 08 3d 00 00 00 	movl   $0x3d,0x8(%eax)
   19fac:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
   19fb3:	c6 40 10 00          	movb   $0x0,0x10(%eax)
   19fb7:	8b 15 b0 4b 02 00    	mov    0x24bb0,%edx
   19fbd:	89 50 11             	mov    %edx,0x11(%eax)
   19fc0:	8b 15 b4 4b 02 00    	mov    0x24bb4,%edx
   19fc6:	89 50 15             	mov    %edx,0x15(%eax)
   19fc9:	8b 15 b8 4b 02 00    	mov    0x24bb8,%edx
   19fcf:	89 50 19             	mov    %edx,0x19(%eax)
   19fd2:	8b 15 bc 4b 02 00    	mov    0x24bbc,%edx
   19fd8:	89 50 1d             	mov    %edx,0x1d(%eax)
   19fdb:	0f b6 15 c0 4b 02 00 	movzbl 0x24bc0,%edx
   19fe2:	88 50 21             	mov    %dl,0x21(%eax)
   19fe5:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
   19fec:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
   19ff3:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
   19ffa:	c7 40 30 d4 ea 01 00 	movl   $0x1ead4,0x30(%eax)
   1a001:	89 70 34             	mov    %esi,0x34(%eax)
   1a004:	89 58 38             	mov    %ebx,0x38(%eax)
   1a007:	89 48 3c             	mov    %ecx,0x3c(%eax)
			0,                              						// 初始会话组。
			0,                              						// 初始停止标志。
			mpty_write,                     						// 主伪终端写函数。
			mpty_queues + 0 + i * 3, mpty_queues + 1 + i * 3, mpty_queues + 2 + i * 3
		};
		spty_table[i] = (struct tty_struct) {
   1a00a:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1a00e:	05 c0 00 00 00       	add    $0xc0,%eax
   1a013:	c1 e0 06             	shl    $0x6,%eax
   1a016:	05 20 18 04 00       	add    $0x41820,%eax
			INIT_C_CC},                    							// 控制字符数组。
			0,                              						// 所属初始进程组。
			0,                              						// 初始会话组。
			0,                              						// 初始停止标志。
			spty_write,                     						// 从伪终端写函数。
			spty_queues + 0 + i * 3, spty_queues + 1 + i * 3, spty_queues + 2 + i * 3
   1a01b:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1a01f:	69 d2 30 0c 00 00    	imul   $0xc30,%edx,%edx
   1a025:	81 c2 a0 aa 00 00    	add    $0xaaa0,%edx
   1a02b:	8d b2 a0 12 03 00    	lea    0x312a0(%edx),%esi
   1a031:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1a035:	69 d2 30 0c 00 00    	imul   $0xc30,%edx,%edx
   1a03b:	81 c2 b0 ae 00 00    	add    $0xaeb0,%edx
   1a041:	8d 9a a0 12 03 00    	lea    0x312a0(%edx),%ebx
   1a047:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1a04b:	69 d2 30 0c 00 00    	imul   $0xc30,%edx,%edx
   1a051:	81 c2 c0 b2 00 00    	add    $0xb2c0,%edx
   1a057:	8d 8a a0 12 03 00    	lea    0x312a0(%edx),%ecx
			0,                              						// 初始会话组。
			0,                              						// 初始停止标志。
			mpty_write,                     						// 主伪终端写函数。
			mpty_queues + 0 + i * 3, mpty_queues + 1 + i * 3, mpty_queues + 2 + i * 3
		};
		spty_table[i] = (struct tty_struct) {
   1a05d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   1a063:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1a06a:	c7 40 08 3d 00 00 00 	movl   $0x3d,0x8(%eax)
   1a071:	c7 40 0c 03 04 00 00 	movl   $0x403,0xc(%eax)
   1a078:	c6 40 10 00          	movb   $0x0,0x10(%eax)
   1a07c:	8b 15 b0 4b 02 00    	mov    0x24bb0,%edx
   1a082:	89 50 11             	mov    %edx,0x11(%eax)
   1a085:	8b 15 b4 4b 02 00    	mov    0x24bb4,%edx
   1a08b:	89 50 15             	mov    %edx,0x15(%eax)
   1a08e:	8b 15 b8 4b 02 00    	mov    0x24bb8,%edx
   1a094:	89 50 19             	mov    %edx,0x19(%eax)
   1a097:	8b 15 bc 4b 02 00    	mov    0x24bbc,%edx
   1a09d:	89 50 1d             	mov    %edx,0x1d(%eax)
   1a0a0:	0f b6 15 c0 4b 02 00 	movzbl 0x24bc0,%edx
   1a0a7:	88 50 21             	mov    %dl,0x21(%eax)
   1a0aa:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
   1a0b1:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
   1a0b8:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
   1a0bf:	c7 40 30 25 eb 01 00 	movl   $0x1eb25,0x30(%eax)
   1a0c6:	89 70 34             	mov    %esi,0x34(%eax)
   1a0c9:	89 58 38             	mov    %ebx,0x38(%eax)
   1a0cc:	89 48 3c             	mov    %ecx,0x3c(%eax)
			rs_queues + 0 + i * 3, rs_queues + 1 + i * 3, rs_queues + 2 + i * 3
		};
	}
	// 然后再初始化伪终端使用的tty结构。伪终端是配对使用的，即一个主（master）伪终端配有一个从（slave）伪终端。因此对它们
	// 都要进行初始化设置。在循环中，我们首先初始化每个主伪终端的tty结构，然后再初始化其对应的从伪终端的tty结构。
	for (i = 0 ; i < NR_PTYS ; i++) {
   1a0cf:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   1a0d4:	83 7c 24 0c 03       	cmpl   $0x3,0xc(%esp)
   1a0d9:	0f 8e 68 fe ff ff    	jle    19f47 <tty_init+0x48c>
			spty_write,                     						// 从伪终端写函数。
			spty_queues + 0 + i * 3, spty_queues + 1 + i * 3, spty_queues + 2 + i * 3
		};
	}
	// 最后初始化串行中断处理程序和串行接口1和2（serial.c），并显示系统含有的虚拟控制台数NR_CONSOLES和伪终端数NR_PTYS。
	rs_init();
   1a0df:	e8 10 3e 00 00       	call   1def4 <rs_init>
	printk("%d virtual consoles\n\r", NR_CONSOLES);
   1a0e4:	a1 20 ee 03 00       	mov    0x3ee20,%eax
   1a0e9:	83 ec 08             	sub    $0x8,%esp
   1a0ec:	50                   	push   %eax
   1a0ed:	68 41 43 02 00       	push   $0x24341
   1a0f2:	e8 50 eb fe ff       	call   8c47 <printk>
   1a0f7:	83 c4 10             	add    $0x10,%esp
	printk("%d pty's\n\r", NR_PTYS);
   1a0fa:	83 ec 08             	sub    $0x8,%esp
   1a0fd:	6a 04                	push   $0x4
   1a0ff:	68 57 43 02 00       	push   $0x24357
   1a104:	e8 3e eb fe ff       	call   8c47 <printk>
   1a109:	83 c4 10             	add    $0x10,%esp
}
   1a10c:	90                   	nop
   1a10d:	83 c4 10             	add    $0x10,%esp
   1a110:	5b                   	pop    %ebx
   1a111:	5e                   	pop    %esi
   1a112:	5f                   	pop    %edi
   1a113:	c3                   	ret    

0001a114 <get_fs_byte>:
//// 读取fs段中指定地址处的字节.
// 参数:addr - 指定的内存地址.
// %0 - (返回的字节_v);%1 - (内存地址addr)
// 返回:返回内存fs[addr]处的字节.
static inline unsigned char get_fs_byte(const char * addr)
{
   1a114:	53                   	push   %ebx
	unsigned register char _v;

	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   1a115:	8b 44 24 08          	mov    0x8(%esp),%eax
   1a119:	64 8a 00             	mov    %fs:(%eax),%al
   1a11c:	89 c3                	mov    %eax,%ebx
	return _v;
   1a11e:	89 d8                	mov    %ebx,%eax
}
   1a120:	5b                   	pop    %ebx
   1a121:	c3                   	ret    

0001a122 <put_fs_byte>:

//// 将一字节存放在fs段中指定内存地址处.
// 参数:val - 字节值;addr - 内存地址.
// %0 - 寄存器(字节值val);%1 - (内存地址addr).
static inline void put_fs_byte(char val,char *addr)
{
   1a122:	83 ec 04             	sub    $0x4,%esp
   1a125:	8b 44 24 08          	mov    0x8(%esp),%eax
   1a129:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
   1a12c:	0f b6 04 24          	movzbl (%esp),%eax
   1a130:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1a134:	64 88 02             	mov    %al,%fs:(%edx)
}
   1a137:	90                   	nop
   1a138:	83 c4 04             	add    $0x4,%esp
   1a13b:	c3                   	ret    

0001a13c <gotoxy>:
// 注意,函数中的所有变量实际上是vc_cons[currcons]结构中的相应字段.以下函数相同.
/* NOTE! gotoxy thinks x==video_num_columns is ok */
/* 注意!gotoxy函数认为x==video_num_columns时是正确的 */
static inline void gotoxy(int currcons, int new_x, unsigned int new_y)
{
	if (new_x > video_num_columns || new_y >= video_num_lines)
   1a13c:	8b 54 24 08          	mov    0x8(%esp),%edx
   1a140:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1a145:	39 c2                	cmp    %eax,%edx
   1a147:	0f 87 a6 00 00 00    	ja     1a1f3 <gotoxy+0xb7>
   1a14d:	a1 44 ee 03 00       	mov    0x3ee44,%eax
   1a152:	39 44 24 0c          	cmp    %eax,0xc(%esp)
   1a156:	0f 83 97 00 00 00    	jae    1a1f3 <gotoxy+0xb7>
		return;
	x = new_x;
   1a15c:	8b 4c 24 08          	mov    0x8(%esp),%ecx
   1a160:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a164:	89 d0                	mov    %edx,%eax
   1a166:	c1 e0 03             	shl    $0x3,%eax
   1a169:	01 d0                	add    %edx,%eax
   1a16b:	c1 e0 04             	shl    $0x4,%eax
   1a16e:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1a173:	89 08                	mov    %ecx,(%eax)
	y = new_y;
   1a175:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a179:	89 d0                	mov    %edx,%eax
   1a17b:	c1 e0 03             	shl    $0x3,%eax
   1a17e:	01 d0                	add    %edx,%eax
   1a180:	c1 e0 04             	shl    $0x4,%eax
   1a183:	8d 90 88 ee 03 00    	lea    0x3ee88(%eax),%edx
   1a189:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1a18d:	89 02                	mov    %eax,(%edx)
	pos = origin + y * video_size_row + (x << 1);	// 1列用2个字节表示,所以x<<1.
   1a18f:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a193:	89 d0                	mov    %edx,%eax
   1a195:	c1 e0 03             	shl    $0x3,%eax
   1a198:	01 d0                	add    %edx,%eax
   1a19a:	c1 e0 04             	shl    $0x4,%eax
   1a19d:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1a1a2:	8b 08                	mov    (%eax),%ecx
   1a1a4:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a1a8:	89 d0                	mov    %edx,%eax
   1a1aa:	c1 e0 03             	shl    $0x3,%eax
   1a1ad:	01 d0                	add    %edx,%eax
   1a1af:	c1 e0 04             	shl    $0x4,%eax
   1a1b2:	05 88 ee 03 00       	add    $0x3ee88,%eax
   1a1b7:	8b 10                	mov    (%eax),%edx
   1a1b9:	a1 40 ee 03 00       	mov    0x3ee40,%eax
   1a1be:	0f af c2             	imul   %edx,%eax
   1a1c1:	01 c1                	add    %eax,%ecx
   1a1c3:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a1c7:	89 d0                	mov    %edx,%eax
   1a1c9:	c1 e0 03             	shl    $0x3,%eax
   1a1cc:	01 d0                	add    %edx,%eax
   1a1ce:	c1 e0 04             	shl    $0x4,%eax
   1a1d1:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1a1d6:	8b 00                	mov    (%eax),%eax
   1a1d8:	01 c0                	add    %eax,%eax
   1a1da:	01 c1                	add    %eax,%ecx
   1a1dc:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a1e0:	89 d0                	mov    %edx,%eax
   1a1e2:	c1 e0 03             	shl    $0x3,%eax
   1a1e5:	01 d0                	add    %edx,%eax
   1a1e7:	c1 e0 04             	shl    $0x4,%eax
   1a1ea:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1a1ef:	89 08                	mov    %ecx,(%eax)
   1a1f1:	eb 01                	jmp    1a1f4 <gotoxy+0xb8>
/* NOTE! gotoxy thinks x==video_num_columns is ok */
/* 注意!gotoxy函数认为x==video_num_columns时是正确的 */
static inline void gotoxy(int currcons, int new_x, unsigned int new_y)
{
	if (new_x > video_num_columns || new_y >= video_num_lines)
		return;
   1a1f3:	90                   	nop
	x = new_x;
	y = new_y;
	pos = origin + y * video_size_row + (x << 1);	// 1列用2个字节表示,所以x<<1.
}
   1a1f4:	c3                   	ret    

0001a1f5 <set_origin>:
static inline void set_origin(int currcons)
{
	// 首先判断显示卡类型.对于EGA/VGA,我们可以指定屏内范围(区域)进行滚屏操作,而MDA单色显示卡只能进行整屏滚屏操作.因此只有EGA/VGA卡才需要设置
	// 滚屏起始行显示内存地址(起始行是origin对应的行).即显示类型如果不是EGA/VGA彩色模式,也不是EGA/VGA单色模式,那么就直接返回.另外,我们只对前
	// 台控制台进行操作,因此当前控制台currocons必须是前台控制台时,我们才需要设置其滚屏起始行对应的内存起点位置.
	if (video_type != VIDEO_TYPE_EGAC && video_type != VIDEO_TYPE_EGAM)
   1a1f5:	0f b6 05 30 ee 03 00 	movzbl 0x3ee30,%eax
   1a1fc:	3c 21                	cmp    $0x21,%al
   1a1fe:	74 0f                	je     1a20f <set_origin+0x1a>
   1a200:	0f b6 05 30 ee 03 00 	movzbl 0x3ee30,%eax
   1a207:	3c 20                	cmp    $0x20,%al
   1a209:	0f 85 94 00 00 00    	jne    1a2a3 <set_origin+0xae>
		return;
	if (currcons != fg_console)
   1a20f:	a1 80 12 03 00       	mov    0x31280,%eax
   1a214:	39 44 24 04          	cmp    %eax,0x4(%esp)
   1a218:	0f 85 88 00 00 00    	jne    1a2a6 <set_origin+0xb1>
		return;
	// 然后向显示寄存器选择端口video_port_reg输出12,即选择显示控制数据寄存器r12,接着写入滚屏起始地址高字节.其中向右移动9位,实际上表示向右移动
	// 8位再除以2(上1个字符用2字节表示).再选择显示控制数据寄存器r13,然后写入滚屏起始地址低字节.向右移动1位表示除以2,同样代表屏幕上1个字符用2字节
	// 表示.输出值相对于默认显示内存起始位置video_mem_base进行操作.
	// 例如对于EGA/VGA彩色模式,viedo_mem_base = 物理内存地址0xb8000.
	cli();
   1a21e:	fa                   	cli    
	outb_p(12, video_port_reg);											// 选择数据寄存器r12,输出滚屏起始位置高字节.
   1a21f:	0f b7 15 4a ee 03 00 	movzwl 0x3ee4a,%edx
   1a226:	b8 0c 00 00 00       	mov    $0xc,%eax
   1a22b:	ee                   	out    %al,(%dx)
   1a22c:	eb 00                	jmp    1a22e <set_origin+0x39>
   1a22e:	eb 00                	jmp    1a230 <set_origin+0x3b>
	outb_p(0xff & ((origin - video_mem_base) >> 9), video_port_val);
   1a230:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a234:	89 d0                	mov    %edx,%eax
   1a236:	c1 e0 03             	shl    $0x3,%eax
   1a239:	01 d0                	add    %edx,%eax
   1a23b:	c1 e0 04             	shl    $0x4,%eax
   1a23e:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1a243:	8b 10                	mov    (%eax),%edx
   1a245:	a1 38 ee 03 00       	mov    0x3ee38,%eax
   1a24a:	29 c2                	sub    %eax,%edx
   1a24c:	89 d0                	mov    %edx,%eax
   1a24e:	c1 e8 09             	shr    $0x9,%eax
   1a251:	0f b6 c0             	movzbl %al,%eax
   1a254:	0f b7 15 4c ee 03 00 	movzwl 0x3ee4c,%edx
   1a25b:	ee                   	out    %al,(%dx)
   1a25c:	eb 00                	jmp    1a25e <set_origin+0x69>
   1a25e:	eb 00                	jmp    1a260 <set_origin+0x6b>
	outb_p(13, video_port_reg);											// 选择数据寄存器r13,输出滚屏起始位置低字节.
   1a260:	0f b7 15 4a ee 03 00 	movzwl 0x3ee4a,%edx
   1a267:	b8 0d 00 00 00       	mov    $0xd,%eax
   1a26c:	ee                   	out    %al,(%dx)
   1a26d:	eb 00                	jmp    1a26f <set_origin+0x7a>
   1a26f:	eb 00                	jmp    1a271 <set_origin+0x7c>
	outb_p(0xff & ((origin - video_mem_base) >> 1), video_port_val);
   1a271:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a275:	89 d0                	mov    %edx,%eax
   1a277:	c1 e0 03             	shl    $0x3,%eax
   1a27a:	01 d0                	add    %edx,%eax
   1a27c:	c1 e0 04             	shl    $0x4,%eax
   1a27f:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1a284:	8b 10                	mov    (%eax),%edx
   1a286:	a1 38 ee 03 00       	mov    0x3ee38,%eax
   1a28b:	29 c2                	sub    %eax,%edx
   1a28d:	89 d0                	mov    %edx,%eax
   1a28f:	d1 e8                	shr    %eax
   1a291:	0f b6 c0             	movzbl %al,%eax
   1a294:	0f b7 15 4c ee 03 00 	movzwl 0x3ee4c,%edx
   1a29b:	ee                   	out    %al,(%dx)
   1a29c:	eb 00                	jmp    1a29e <set_origin+0xa9>
   1a29e:	eb 00                	jmp    1a2a0 <set_origin+0xab>
	sti();
   1a2a0:	fb                   	sti    
   1a2a1:	eb 04                	jmp    1a2a7 <set_origin+0xb2>
{
	// 首先判断显示卡类型.对于EGA/VGA,我们可以指定屏内范围(区域)进行滚屏操作,而MDA单色显示卡只能进行整屏滚屏操作.因此只有EGA/VGA卡才需要设置
	// 滚屏起始行显示内存地址(起始行是origin对应的行).即显示类型如果不是EGA/VGA彩色模式,也不是EGA/VGA单色模式,那么就直接返回.另外,我们只对前
	// 台控制台进行操作,因此当前控制台currocons必须是前台控制台时,我们才需要设置其滚屏起始行对应的内存起点位置.
	if (video_type != VIDEO_TYPE_EGAC && video_type != VIDEO_TYPE_EGAM)
		return;
   1a2a3:	90                   	nop
   1a2a4:	eb 01                	jmp    1a2a7 <set_origin+0xb2>
	if (currcons != fg_console)
		return;
   1a2a6:	90                   	nop
	outb_p(12, video_port_reg);											// 选择数据寄存器r12,输出滚屏起始位置高字节.
	outb_p(0xff & ((origin - video_mem_base) >> 9), video_port_val);
	outb_p(13, video_port_reg);											// 选择数据寄存器r13,输出滚屏起始位置低字节.
	outb_p(0xff & ((origin - video_mem_base) >> 1), video_port_val);
	sti();
}
   1a2a7:	c3                   	ret    

0001a2a8 <scrup>:

// 向上卷动上行
// 将屏幕滚动窗口向上移动一行,并在屏幕滚动区域底出现的新行上添加空格字符.滚屏区域必须大于1行.
static void scrup(int currcons)
{
   1a2a8:	57                   	push   %edi
   1a2a9:	56                   	push   %esi
   1a2aa:	53                   	push   %ebx
	// 滚屏区域必须至少有2行.如果滚屏区域顶行号大于等于区域底行号,则不满足进行滚行操作的条件.另外,对于EGA/VGA卡,我们可以指定屏内行范围(区域)
	// 进行滚屏操作,而MDA单色显示卡只能进行整屏操作.该函数对EGA和MDA显示类型进行分别处理.如果显示类型是EGA,则还分为整屏窗口移动和区域内窗口移动
	// 这里首先处理显示卡是EGA/VGA显示类型的情况.
	if (bottom <= top)
   1a2ab:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a2af:	89 d0                	mov    %edx,%eax
   1a2b1:	c1 e0 03             	shl    $0x3,%eax
   1a2b4:	01 d0                	add    %edx,%eax
   1a2b6:	c1 e0 04             	shl    $0x4,%eax
   1a2b9:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1a2be:	8b 08                	mov    (%eax),%ecx
   1a2c0:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a2c4:	89 d0                	mov    %edx,%eax
   1a2c6:	c1 e0 03             	shl    $0x3,%eax
   1a2c9:	01 d0                	add    %edx,%eax
   1a2cb:	c1 e0 04             	shl    $0x4,%eax
   1a2ce:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1a2d3:	8b 00                	mov    (%eax),%eax
   1a2d5:	39 c1                	cmp    %eax,%ecx
   1a2d7:	0f 86 5d 04 00 00    	jbe    1a73a <scrup+0x492>
		return;
	if (video_type == VIDEO_TYPE_EGAC || video_type == VIDEO_TYPE_EGAM)
   1a2dd:	0f b6 05 30 ee 03 00 	movzbl 0x3ee30,%eax
   1a2e4:	3c 21                	cmp    $0x21,%al
   1a2e6:	74 0f                	je     1a2f7 <scrup+0x4f>
   1a2e8:	0f b6 05 30 ee 03 00 	movzbl 0x3ee30,%eax
   1a2ef:	3c 20                	cmp    $0x20,%al
   1a2f1:	0f 85 71 03 00 00    	jne    1a668 <scrup+0x3c0>
	{
		// 如果移动起始行top=0,移动最底行bottom = video_num_lines = 25,则表示整屏窗口向下移动,于是把整个屏幕窗口左上角对应的起始内存位置origin
		// 调整为向下移动一行对应的内存位置,同时也跟踪调整当前光标对应的内存位置以及屏幕末行末端字符指针scr_end的位置.最后把新屏幕窗口内存起始位置值
		// origin写入显示控制器中
		if (!top && bottom == video_num_lines) {
   1a2f7:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a2fb:	89 d0                	mov    %edx,%eax
   1a2fd:	c1 e0 03             	shl    $0x3,%eax
   1a300:	01 d0                	add    %edx,%eax
   1a302:	c1 e0 04             	shl    $0x4,%eax
   1a305:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1a30a:	8b 00                	mov    (%eax),%eax
   1a30c:	85 c0                	test   %eax,%eax
   1a30e:	0f 85 7f 02 00 00    	jne    1a593 <scrup+0x2eb>
   1a314:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a318:	89 d0                	mov    %edx,%eax
   1a31a:	c1 e0 03             	shl    $0x3,%eax
   1a31d:	01 d0                	add    %edx,%eax
   1a31f:	c1 e0 04             	shl    $0x4,%eax
   1a322:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1a327:	8b 10                	mov    (%eax),%edx
   1a329:	a1 44 ee 03 00       	mov    0x3ee44,%eax
   1a32e:	39 c2                	cmp    %eax,%edx
   1a330:	0f 85 5d 02 00 00    	jne    1a593 <scrup+0x2eb>
			origin += video_size_row;
   1a336:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a33a:	89 d0                	mov    %edx,%eax
   1a33c:	c1 e0 03             	shl    $0x3,%eax
   1a33f:	01 d0                	add    %edx,%eax
   1a341:	c1 e0 04             	shl    $0x4,%eax
   1a344:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1a349:	8b 10                	mov    (%eax),%edx
   1a34b:	a1 40 ee 03 00       	mov    0x3ee40,%eax
   1a350:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
   1a353:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a357:	89 d0                	mov    %edx,%eax
   1a359:	c1 e0 03             	shl    $0x3,%eax
   1a35c:	01 d0                	add    %edx,%eax
   1a35e:	c1 e0 04             	shl    $0x4,%eax
   1a361:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1a366:	89 08                	mov    %ecx,(%eax)
			pos += video_size_row;
   1a368:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a36c:	89 d0                	mov    %edx,%eax
   1a36e:	c1 e0 03             	shl    $0x3,%eax
   1a371:	01 d0                	add    %edx,%eax
   1a373:	c1 e0 04             	shl    $0x4,%eax
   1a376:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1a37b:	8b 10                	mov    (%eax),%edx
   1a37d:	a1 40 ee 03 00       	mov    0x3ee40,%eax
   1a382:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
   1a385:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a389:	89 d0                	mov    %edx,%eax
   1a38b:	c1 e0 03             	shl    $0x3,%eax
   1a38e:	01 d0                	add    %edx,%eax
   1a390:	c1 e0 04             	shl    $0x4,%eax
   1a393:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1a398:	89 08                	mov    %ecx,(%eax)
			scr_end += video_size_row;
   1a39a:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a39e:	89 d0                	mov    %edx,%eax
   1a3a0:	c1 e0 03             	shl    $0x3,%eax
   1a3a3:	01 d0                	add    %edx,%eax
   1a3a5:	c1 e0 04             	shl    $0x4,%eax
   1a3a8:	05 7c ee 03 00       	add    $0x3ee7c,%eax
   1a3ad:	8b 10                	mov    (%eax),%edx
   1a3af:	a1 40 ee 03 00       	mov    0x3ee40,%eax
   1a3b4:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
   1a3b7:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a3bb:	89 d0                	mov    %edx,%eax
   1a3bd:	c1 e0 03             	shl    $0x3,%eax
   1a3c0:	01 d0                	add    %edx,%eax
   1a3c2:	c1 e0 04             	shl    $0x4,%eax
   1a3c5:	05 7c ee 03 00       	add    $0x3ee7c,%eax
   1a3ca:	89 08                	mov    %ecx,(%eax)
			// 如果屏幕窗口末端所对应的显示内存指针scr_end超出了实际显示内存末端,则将屏幕内容除第一行以外所有行对应的内存数据移动到显示内存的起始位置video_mem_start
			// 处,并在整屏窗口向下移动出现的新行上填入空格字符.然后根据屏幕内存数据移动后的情况,重新调整当前屏幕对应内存的起始指针,光标位置指针和屏幕末端
			// 对应内存指针scr_end.
			if (scr_end > video_mem_end) {
   1a3cc:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a3d0:	89 d0                	mov    %edx,%eax
   1a3d2:	c1 e0 03             	shl    $0x3,%eax
   1a3d5:	01 d0                	add    %edx,%eax
   1a3d7:	c1 e0 04             	shl    $0x4,%eax
   1a3da:	05 7c ee 03 00       	add    $0x3ee7c,%eax
   1a3df:	8b 08                	mov    (%eax),%ecx
   1a3e1:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a3e5:	89 d0                	mov    %edx,%eax
   1a3e7:	c1 e0 03             	shl    $0x3,%eax
   1a3ea:	01 d0                	add    %edx,%eax
   1a3ec:	c1 e0 04             	shl    $0x4,%eax
   1a3ef:	05 dc ee 03 00       	add    $0x3eedc,%eax
   1a3f4:	8b 00                	mov    (%eax),%eax
   1a3f6:	39 c1                	cmp    %eax,%ecx
   1a3f8:	0f 86 44 01 00 00    	jbe    1a542 <scrup+0x29a>
					"rep\n\t"												// 重复操作,将当前屏幕内存数据移动到显示内存起始处
					"movsl\n\t"
					"movl video_num_columns, %1\n\t"
					"rep\n\t"												// 在新行上填入空格字符
					"stosw"
					::"a" (video_erase_char),
   1a3fe:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a402:	89 d0                	mov    %edx,%eax
   1a404:	c1 e0 03             	shl    $0x3,%eax
   1a407:	01 d0                	add    %edx,%eax
   1a409:	c1 e0 04             	shl    $0x4,%eax
   1a40c:	05 60 ee 03 00       	add    $0x3ee60,%eax
   1a411:	0f b7 18             	movzwl (%eax),%ebx
					"c" ((video_num_lines - 1) * video_num_columns >> 1),
   1a414:	a1 44 ee 03 00       	mov    0x3ee44,%eax
   1a419:	8d 50 ff             	lea    -0x1(%eax),%edx
   1a41c:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1a421:	0f af c2             	imul   %edx,%eax
   1a424:	d1 e8                	shr    %eax
   1a426:	89 c1                	mov    %eax,%ecx
					"D" (video_mem_start),
   1a428:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a42c:	89 d0                	mov    %edx,%eax
   1a42e:	c1 e0 03             	shl    $0x3,%eax
   1a431:	01 d0                	add    %edx,%eax
   1a433:	c1 e0 04             	shl    $0x4,%eax
   1a436:	05 d8 ee 03 00       	add    $0x3eed8,%eax
   1a43b:	8b 38                	mov    (%eax),%edi
					"S" (origin)
   1a43d:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a441:	89 d0                	mov    %edx,%eax
   1a443:	c1 e0 03             	shl    $0x3,%eax
   1a446:	01 d0                	add    %edx,%eax
   1a448:	c1 e0 04             	shl    $0x4,%eax
   1a44b:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1a450:	8b 10                	mov    (%eax),%edx
				// 这段嵌入汇编程序首先将(屏幕字符行数 - 1)行对应的内存数据移动到显示内存起始位置video_mem_start处,然后在随后的内存位置处添加一行空格(擦除)
				// 字符数据.
				// %0 - eax(擦除字符+属性);%1 - ecx((屏幕字符行数-1)*所对应的字符数/2,以长字移动);
				// %2 - edi(显示内存起始位置video_mem_start); %3 - esi(屏幕窗口内存起始位置origin).
				// 移动方向:[edi] -> [esi],移动ecx个长字.
				__asm__("cld\n\t"											// 清方向位
   1a452:	89 d8                	mov    %ebx,%eax
   1a454:	89 d6                	mov    %edx,%esi
   1a456:	fc                   	cld    
   1a457:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
   1a459:	8b 0d 34 ee 03 00    	mov    0x3ee34,%ecx
   1a45f:	f3 66 ab             	rep stos %ax,%es:(%edi)
					"c" ((video_num_lines - 1) * video_num_columns >> 1),
					"D" (video_mem_start),
					"S" (origin)
					:);
				// 重新设置快速滚屏的末端位置
				scr_end -= origin - video_mem_start;
   1a462:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a466:	89 d0                	mov    %edx,%eax
   1a468:	c1 e0 03             	shl    $0x3,%eax
   1a46b:	01 d0                	add    %edx,%eax
   1a46d:	c1 e0 04             	shl    $0x4,%eax
   1a470:	05 7c ee 03 00       	add    $0x3ee7c,%eax
   1a475:	8b 08                	mov    (%eax),%ecx
   1a477:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a47b:	89 d0                	mov    %edx,%eax
   1a47d:	c1 e0 03             	shl    $0x3,%eax
   1a480:	01 d0                	add    %edx,%eax
   1a482:	c1 e0 04             	shl    $0x4,%eax
   1a485:	05 d8 ee 03 00       	add    $0x3eed8,%eax
   1a48a:	8b 18                	mov    (%eax),%ebx
   1a48c:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a490:	89 d0                	mov    %edx,%eax
   1a492:	c1 e0 03             	shl    $0x3,%eax
   1a495:	01 d0                	add    %edx,%eax
   1a497:	c1 e0 04             	shl    $0x4,%eax
   1a49a:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1a49f:	8b 00                	mov    (%eax),%eax
   1a4a1:	29 c3                	sub    %eax,%ebx
   1a4a3:	89 d8                	mov    %ebx,%eax
   1a4a5:	01 c1                	add    %eax,%ecx
   1a4a7:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a4ab:	89 d0                	mov    %edx,%eax
   1a4ad:	c1 e0 03             	shl    $0x3,%eax
   1a4b0:	01 d0                	add    %edx,%eax
   1a4b2:	c1 e0 04             	shl    $0x4,%eax
   1a4b5:	05 7c ee 03 00       	add    $0x3ee7c,%eax
   1a4ba:	89 08                	mov    %ecx,(%eax)
				// 设置当前显示位置
				pos -= origin - video_mem_start;
   1a4bc:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a4c0:	89 d0                	mov    %edx,%eax
   1a4c2:	c1 e0 03             	shl    $0x3,%eax
   1a4c5:	01 d0                	add    %edx,%eax
   1a4c7:	c1 e0 04             	shl    $0x4,%eax
   1a4ca:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1a4cf:	8b 08                	mov    (%eax),%ecx
   1a4d1:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a4d5:	89 d0                	mov    %edx,%eax
   1a4d7:	c1 e0 03             	shl    $0x3,%eax
   1a4da:	01 d0                	add    %edx,%eax
   1a4dc:	c1 e0 04             	shl    $0x4,%eax
   1a4df:	05 d8 ee 03 00       	add    $0x3eed8,%eax
   1a4e4:	8b 18                	mov    (%eax),%ebx
   1a4e6:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a4ea:	89 d0                	mov    %edx,%eax
   1a4ec:	c1 e0 03             	shl    $0x3,%eax
   1a4ef:	01 d0                	add    %edx,%eax
   1a4f1:	c1 e0 04             	shl    $0x4,%eax
   1a4f4:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1a4f9:	8b 00                	mov    (%eax),%eax
   1a4fb:	29 c3                	sub    %eax,%ebx
   1a4fd:	89 d8                	mov    %ebx,%eax
   1a4ff:	01 c1                	add    %eax,%ecx
   1a501:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a505:	89 d0                	mov    %edx,%eax
   1a507:	c1 e0 03             	shl    $0x3,%eax
   1a50a:	01 d0                	add    %edx,%eax
   1a50c:	c1 e0 04             	shl    $0x4,%eax
   1a50f:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1a514:	89 08                	mov    %ecx,(%eax)
				// 重新设置快速滚屏的起始位置
				origin = video_mem_start;
   1a516:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a51a:	89 d0                	mov    %edx,%eax
   1a51c:	c1 e0 03             	shl    $0x3,%eax
   1a51f:	01 d0                	add    %edx,%eax
   1a521:	c1 e0 04             	shl    $0x4,%eax
   1a524:	05 d8 ee 03 00       	add    $0x3eed8,%eax
   1a529:	8b 08                	mov    (%eax),%ecx
   1a52b:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a52f:	89 d0                	mov    %edx,%eax
   1a531:	c1 e0 03             	shl    $0x3,%eax
   1a534:	01 d0                	add    %edx,%eax
   1a536:	c1 e0 04             	shl    $0x4,%eax
   1a539:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1a53e:	89 08                	mov    %ecx,(%eax)
   1a540:	eb 40                	jmp    1a582 <scrup+0x2da>
			// %0 - eax(擦除字符+属性);%1 - ecx(屏幕行数);%2 - edi(最后1行开始处对应内存位置);
			} else {
				__asm__("cld\n\t"
					"rep\n\t"												// 重复操作,在新出现现上填入擦除字符(空格字符).
					"stosw"
					::"a" (video_erase_char),
   1a542:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a546:	89 d0                	mov    %edx,%eax
   1a548:	c1 e0 03             	shl    $0x3,%eax
   1a54b:	01 d0                	add    %edx,%eax
   1a54d:	c1 e0 04             	shl    $0x4,%eax
   1a550:	05 60 ee 03 00       	add    $0x3ee60,%eax
   1a555:	0f b7 18             	movzwl (%eax),%ebx
				// 重新设置快速滚屏的起始位置
				origin = video_mem_start;
			// 如果调整后的屏幕末端对应的内存指针scr_end没有超出显示内存的末端video_mem_end,则只需在新行上填入擦除字符(空格字符).
			// %0 - eax(擦除字符+属性);%1 - ecx(屏幕行数);%2 - edi(最后1行开始处对应内存位置);
			} else {
				__asm__("cld\n\t"
   1a558:	8b 0d 34 ee 03 00    	mov    0x3ee34,%ecx
					"rep\n\t"												// 重复操作,在新出现现上填入擦除字符(空格字符).
					"stosw"
					::"a" (video_erase_char),
					"c" (video_num_columns),
					"D" (scr_end - video_size_row)
   1a55e:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a562:	89 d0                	mov    %edx,%eax
   1a564:	c1 e0 03             	shl    $0x3,%eax
   1a567:	01 d0                	add    %edx,%eax
   1a569:	c1 e0 04             	shl    $0x4,%eax
   1a56c:	05 7c ee 03 00       	add    $0x3ee7c,%eax
   1a571:	8b 10                	mov    (%eax),%edx
   1a573:	a1 40 ee 03 00       	mov    0x3ee40,%eax
   1a578:	29 c2                	sub    %eax,%edx
				// 重新设置快速滚屏的起始位置
				origin = video_mem_start;
			// 如果调整后的屏幕末端对应的内存指针scr_end没有超出显示内存的末端video_mem_end,则只需在新行上填入擦除字符(空格字符).
			// %0 - eax(擦除字符+属性);%1 - ecx(屏幕行数);%2 - edi(最后1行开始处对应内存位置);
			} else {
				__asm__("cld\n\t"
   1a57a:	89 d8                	mov    %ebx,%eax
   1a57c:	89 d7                	mov    %edx,%edi
   1a57e:	fc                   	cld    
   1a57f:	f3 66 ab             	rep stos %ax,%es:(%edi)
					"c" (video_num_columns),
					"D" (scr_end - video_size_row)
					:);
			}
			// 然后把新屏幕滚动窗口内存起始位置值origin写入显示控制器中.
			set_origin(currcons);
   1a582:	ff 74 24 10          	pushl  0x10(%esp)
   1a586:	e8 6a fc ff ff       	call   1a1f5 <set_origin>
   1a58b:	83 c4 04             	add    $0x4,%esp
	if (video_type == VIDEO_TYPE_EGAC || video_type == VIDEO_TYPE_EGAM)
	{
		// 如果移动起始行top=0,移动最底行bottom = video_num_lines = 25,则表示整屏窗口向下移动,于是把整个屏幕窗口左上角对应的起始内存位置origin
		// 调整为向下移动一行对应的内存位置,同时也跟踪调整当前光标对应的内存位置以及屏幕末行末端字符指针scr_end的位置.最后把新屏幕窗口内存起始位置值
		// origin写入显示控制器中
		if (!top && bottom == video_num_lines) {
   1a58e:	e9 a8 01 00 00       	jmp    1a73b <scrup+0x493>
				"rep\n\t"													// 循环操作,将top+1到bottom行所对应的内存块移到top行开始处.
				"movsl\n\t"
				"movl video_num_columns, %%ecx\n\t"
				"rep\n\t"													// 在新行上填入擦除字符.
				"stosw"
				::"a" (video_erase_char),
   1a593:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a597:	89 d0                	mov    %edx,%eax
   1a599:	c1 e0 03             	shl    $0x3,%eax
   1a59c:	01 d0                	add    %edx,%eax
   1a59e:	c1 e0 04             	shl    $0x4,%eax
   1a5a1:	05 60 ee 03 00       	add    $0x3ee60,%eax
   1a5a6:	0f b7 18             	movzwl (%eax),%ebx
				"c" ((bottom - top - 1) * video_num_columns >> 1),
   1a5a9:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a5ad:	89 d0                	mov    %edx,%eax
   1a5af:	c1 e0 03             	shl    $0x3,%eax
   1a5b2:	01 d0                	add    %edx,%eax
   1a5b4:	c1 e0 04             	shl    $0x4,%eax
   1a5b7:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1a5bc:	8b 08                	mov    (%eax),%ecx
   1a5be:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a5c2:	89 d0                	mov    %edx,%eax
   1a5c4:	c1 e0 03             	shl    $0x3,%eax
   1a5c7:	01 d0                	add    %edx,%eax
   1a5c9:	c1 e0 04             	shl    $0x4,%eax
   1a5cc:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1a5d1:	8b 00                	mov    (%eax),%eax
   1a5d3:	29 c1                	sub    %eax,%ecx
   1a5d5:	89 c8                	mov    %ecx,%eax
   1a5d7:	8d 50 ff             	lea    -0x1(%eax),%edx
   1a5da:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1a5df:	0f af c2             	imul   %edx,%eax
   1a5e2:	d1 e8                	shr    %eax
   1a5e4:	89 c1                	mov    %eax,%ecx
				"D" (origin + video_size_row * top),
   1a5e6:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a5ea:	89 d0                	mov    %edx,%eax
   1a5ec:	c1 e0 03             	shl    $0x3,%eax
   1a5ef:	01 d0                	add    %edx,%eax
   1a5f1:	c1 e0 04             	shl    $0x4,%eax
   1a5f4:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1a5f9:	8b 30                	mov    (%eax),%esi
   1a5fb:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a5ff:	89 d0                	mov    %edx,%eax
   1a601:	c1 e0 03             	shl    $0x3,%eax
   1a604:	01 d0                	add    %edx,%eax
   1a606:	c1 e0 04             	shl    $0x4,%eax
   1a609:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1a60e:	8b 10                	mov    (%eax),%edx
   1a610:	a1 40 ee 03 00       	mov    0x3ee40,%eax
   1a615:	0f af c2             	imul   %edx,%eax
   1a618:	8d 3c 06             	lea    (%esi,%eax,1),%edi
				"S" (origin + video_size_row * (top + 1))
   1a61b:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a61f:	89 d0                	mov    %edx,%eax
   1a621:	c1 e0 03             	shl    $0x3,%eax
   1a624:	01 d0                	add    %edx,%eax
   1a626:	c1 e0 04             	shl    $0x4,%eax
   1a629:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1a62e:	8b 30                	mov    (%eax),%esi
   1a630:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a634:	89 d0                	mov    %edx,%eax
   1a636:	c1 e0 03             	shl    $0x3,%eax
   1a639:	01 d0                	add    %edx,%eax
   1a63b:	c1 e0 04             	shl    $0x4,%eax
   1a63e:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1a643:	8b 00                	mov    (%eax),%eax
   1a645:	8d 50 01             	lea    0x1(%eax),%edx
   1a648:	a1 40 ee 03 00       	mov    0x3ee40,%eax
   1a64d:	0f af c2             	imul   %edx,%eax
   1a650:	8d 14 06             	lea    (%esi,%eax,1),%edx
		// 否则表示不是整屏移动.即表示从指定行top开始到bottom区域中的所有行向上移动1行,指定行top被删除.此时直接将屏幕从指定行top到屏幕末端
		// 所有行对应的显示内存数据向上移动1行,并在最下面新出现的行上填入擦除字符.
		// %0 - eax(擦除字符+属性);%1 - ecx(top行下1行开始到bottom行所对应的内存长字数);
		// %2 - edi(top行所处的内存位置); %3 - esi(top+1行所处的内存位置).
		} else {
			__asm__("cld\n\t"
   1a653:	89 d8                	mov    %ebx,%eax
   1a655:	89 d6                	mov    %edx,%esi
   1a657:	fc                   	cld    
   1a658:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
   1a65a:	8b 0d 34 ee 03 00    	mov    0x3ee34,%ecx
   1a660:	f3 66 ab             	rep stos %ax,%es:(%edi)
	if (video_type == VIDEO_TYPE_EGAC || video_type == VIDEO_TYPE_EGAM)
	{
		// 如果移动起始行top=0,移动最底行bottom = video_num_lines = 25,则表示整屏窗口向下移动,于是把整个屏幕窗口左上角对应的起始内存位置origin
		// 调整为向下移动一行对应的内存位置,同时也跟踪调整当前光标对应的内存位置以及屏幕末行末端字符指针scr_end的位置.最后把新屏幕窗口内存起始位置值
		// origin写入显示控制器中
		if (!top && bottom == video_num_lines) {
   1a663:	e9 d3 00 00 00       	jmp    1a73b <scrup+0x493>
			"rep\n\t"
			"movsl\n\t"
			"movl video_num_columns, %%ecx\n\t"
			"rep\n\t"
			"stosw"
			::"a" (video_erase_char),
   1a668:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a66c:	89 d0                	mov    %edx,%eax
   1a66e:	c1 e0 03             	shl    $0x3,%eax
   1a671:	01 d0                	add    %edx,%eax
   1a673:	c1 e0 04             	shl    $0x4,%eax
   1a676:	05 60 ee 03 00       	add    $0x3ee60,%eax
   1a67b:	0f b7 18             	movzwl (%eax),%ebx
			"c" ((bottom - top - 1) * video_num_columns >> 1),
   1a67e:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a682:	89 d0                	mov    %edx,%eax
   1a684:	c1 e0 03             	shl    $0x3,%eax
   1a687:	01 d0                	add    %edx,%eax
   1a689:	c1 e0 04             	shl    $0x4,%eax
   1a68c:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1a691:	8b 08                	mov    (%eax),%ecx
   1a693:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a697:	89 d0                	mov    %edx,%eax
   1a699:	c1 e0 03             	shl    $0x3,%eax
   1a69c:	01 d0                	add    %edx,%eax
   1a69e:	c1 e0 04             	shl    $0x4,%eax
   1a6a1:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1a6a6:	8b 00                	mov    (%eax),%eax
   1a6a8:	29 c1                	sub    %eax,%ecx
   1a6aa:	89 c8                	mov    %ecx,%eax
   1a6ac:	8d 50 ff             	lea    -0x1(%eax),%edx
   1a6af:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1a6b4:	0f af c2             	imul   %edx,%eax
   1a6b7:	d1 e8                	shr    %eax
   1a6b9:	89 c1                	mov    %eax,%ecx
			"D" (origin + video_size_row * top),
   1a6bb:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a6bf:	89 d0                	mov    %edx,%eax
   1a6c1:	c1 e0 03             	shl    $0x3,%eax
   1a6c4:	01 d0                	add    %edx,%eax
   1a6c6:	c1 e0 04             	shl    $0x4,%eax
   1a6c9:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1a6ce:	8b 30                	mov    (%eax),%esi
   1a6d0:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a6d4:	89 d0                	mov    %edx,%eax
   1a6d6:	c1 e0 03             	shl    $0x3,%eax
   1a6d9:	01 d0                	add    %edx,%eax
   1a6db:	c1 e0 04             	shl    $0x4,%eax
   1a6de:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1a6e3:	8b 10                	mov    (%eax),%edx
   1a6e5:	a1 40 ee 03 00       	mov    0x3ee40,%eax
   1a6ea:	0f af c2             	imul   %edx,%eax
   1a6ed:	8d 3c 06             	lea    (%esi,%eax,1),%edi
			"S" (origin + video_size_row * (top + 1))
   1a6f0:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a6f4:	89 d0                	mov    %edx,%eax
   1a6f6:	c1 e0 03             	shl    $0x3,%eax
   1a6f9:	01 d0                	add    %edx,%eax
   1a6fb:	c1 e0 04             	shl    $0x4,%eax
   1a6fe:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1a703:	8b 30                	mov    (%eax),%esi
   1a705:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a709:	89 d0                	mov    %edx,%eax
   1a70b:	c1 e0 03             	shl    $0x3,%eax
   1a70e:	01 d0                	add    %edx,%eax
   1a710:	c1 e0 04             	shl    $0x4,%eax
   1a713:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1a718:	8b 00                	mov    (%eax),%eax
   1a71a:	8d 50 01             	lea    0x1(%eax),%edx
   1a71d:	a1 40 ee 03 00       	mov    0x3ee40,%eax
   1a722:	0f af c2             	imul   %edx,%eax
   1a725:	8d 14 06             	lea    (%esi,%eax,1),%edx
	}
	// 如果显示类型不是EGA(而是MDA),则执行下面移动操作.因为MDA显示控制卡只能整屏滚动,并且会自动调整超出显示范围的情况,即会自动翻巻指针,所以这里不对与屏幕
	// 内容相对应内存超出显示内存的情况单独处理处理方法与EGA非整屏移动情况完全一样.
	else		/* Not EGA/VGA */
	{
		__asm__("cld\n\t"
   1a728:	89 d8                	mov    %ebx,%eax
   1a72a:	89 d6                	mov    %edx,%esi
   1a72c:	fc                   	cld    
   1a72d:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
   1a72f:	8b 0d 34 ee 03 00    	mov    0x3ee34,%ecx
   1a735:	f3 66 ab             	rep stos %ax,%es:(%edi)
   1a738:	eb 01                	jmp    1a73b <scrup+0x493>
{
	// 滚屏区域必须至少有2行.如果滚屏区域顶行号大于等于区域底行号,则不满足进行滚行操作的条件.另外,对于EGA/VGA卡,我们可以指定屏内行范围(区域)
	// 进行滚屏操作,而MDA单色显示卡只能进行整屏操作.该函数对EGA和MDA显示类型进行分别处理.如果显示类型是EGA,则还分为整屏窗口移动和区域内窗口移动
	// 这里首先处理显示卡是EGA/VGA显示类型的情况.
	if (bottom <= top)
		return;
   1a73a:	90                   	nop
			"c" ((bottom - top - 1) * video_num_columns >> 1),
			"D" (origin + video_size_row * top),
			"S" (origin + video_size_row * (top + 1))
			:);
	}
}
   1a73b:	5b                   	pop    %ebx
   1a73c:	5e                   	pop    %esi
   1a73d:	5f                   	pop    %edi
   1a73e:	c3                   	ret    

0001a73f <scrdown>:
// 将屏幕滚动窗口向上移动一行,相应屏幕滚动区域内容向下移动1行.并在移动开始行的上方出现一新行.处理方法与scrup()相似,只是为了在
// 移动显示内存数据时不会出现数据覆盖的问题,复制操作是以逆向进行的,即先从屏幕倒数第2行的最后一个字符开始复制到最后一行,再将倒数第3行
// 复制到倒数第2行,等等.因为此时对EGA/VGA显示类型和MDA类型的处理过程完全一样,所以该函数实际上没有必要写两段相同的代码.即这里if和
// else语句块中的操作完全一样.
static void scrdown(int currcons)
{
   1a73f:	57                   	push   %edi
   1a740:	56                   	push   %esi
   1a741:	53                   	push   %ebx
	// 同样,滚屏区域必须至少有2行.如果滚屏区域顶行号大于等于区域底行号,则不满足进行滚行操作的条件.另外,对于EGA/VGA卡,我们可以指定屏内行范围(区域)
	// 进行滚屏操作,而MDA单色显示卡只能进行整屏操作.由于窗口向上移动最多移动以当前控制台实际显示内存末端的情况,所以这里只需要处理普通的内存数据
	// 移动情况.
	if (bottom <= top)
   1a742:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a746:	89 d0                	mov    %edx,%eax
   1a748:	c1 e0 03             	shl    $0x3,%eax
   1a74b:	01 d0                	add    %edx,%eax
   1a74d:	c1 e0 04             	shl    $0x4,%eax
   1a750:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1a755:	8b 08                	mov    (%eax),%ecx
   1a757:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a75b:	89 d0                	mov    %edx,%eax
   1a75d:	c1 e0 03             	shl    $0x3,%eax
   1a760:	01 d0                	add    %edx,%eax
   1a762:	c1 e0 04             	shl    $0x4,%eax
   1a765:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1a76a:	8b 00                	mov    (%eax),%eax
   1a76c:	39 c1                	cmp    %eax,%ecx
   1a76e:	0f 86 cf 01 00 00    	jbe    1a943 <scrdown+0x204>
		return;
	if (video_type == VIDEO_TYPE_EGAC || video_type == VIDEO_TYPE_EGAM)
   1a774:	0f b6 05 30 ee 03 00 	movzbl 0x3ee30,%eax
   1a77b:	3c 21                	cmp    $0x21,%al
   1a77d:	74 0f                	je     1a78e <scrdown+0x4f>
   1a77f:	0f b6 05 30 ee 03 00 	movzbl 0x3ee30,%eax
   1a786:	3c 20                	cmp    $0x20,%al
   1a788:	0f 85 dc 00 00 00    	jne    1a86a <scrdown+0x12b>
			"movsl\n\t"
			"addl $2, %%edi\n\t"								/* %edi has been decremented by 4 */ /* %edi已减4,因也是反向填擦除字符 */
			"movl video_num_columns, %%ecx\n\t"
			"rep\n\t"											// 将擦除字符填入上方新行中.
			"stosw"
			::"a" (video_erase_char),
   1a78e:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a792:	89 d0                	mov    %edx,%eax
   1a794:	c1 e0 03             	shl    $0x3,%eax
   1a797:	01 d0                	add    %edx,%eax
   1a799:	c1 e0 04             	shl    $0x4,%eax
   1a79c:	05 60 ee 03 00       	add    $0x3ee60,%eax
   1a7a1:	0f b7 18             	movzwl (%eax),%ebx
			"c" ((bottom - top - 1) * video_num_columns >> 1),
   1a7a4:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a7a8:	89 d0                	mov    %edx,%eax
   1a7aa:	c1 e0 03             	shl    $0x3,%eax
   1a7ad:	01 d0                	add    %edx,%eax
   1a7af:	c1 e0 04             	shl    $0x4,%eax
   1a7b2:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1a7b7:	8b 08                	mov    (%eax),%ecx
   1a7b9:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a7bd:	89 d0                	mov    %edx,%eax
   1a7bf:	c1 e0 03             	shl    $0x3,%eax
   1a7c2:	01 d0                	add    %edx,%eax
   1a7c4:	c1 e0 04             	shl    $0x4,%eax
   1a7c7:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1a7cc:	8b 00                	mov    (%eax),%eax
   1a7ce:	29 c1                	sub    %eax,%ecx
   1a7d0:	89 c8                	mov    %ecx,%eax
   1a7d2:	8d 50 ff             	lea    -0x1(%eax),%edx
   1a7d5:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1a7da:	0f af c2             	imul   %edx,%eax
   1a7dd:	d1 e8                	shr    %eax
   1a7df:	89 c1                	mov    %eax,%ecx
			"D" (origin + video_size_row * bottom - 4),
   1a7e1:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a7e5:	89 d0                	mov    %edx,%eax
   1a7e7:	c1 e0 03             	shl    $0x3,%eax
   1a7ea:	01 d0                	add    %edx,%eax
   1a7ec:	c1 e0 04             	shl    $0x4,%eax
   1a7ef:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1a7f4:	8b 30                	mov    (%eax),%esi
   1a7f6:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a7fa:	89 d0                	mov    %edx,%eax
   1a7fc:	c1 e0 03             	shl    $0x3,%eax
   1a7ff:	01 d0                	add    %edx,%eax
   1a801:	c1 e0 04             	shl    $0x4,%eax
   1a804:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1a809:	8b 10                	mov    (%eax),%edx
   1a80b:	a1 40 ee 03 00       	mov    0x3ee40,%eax
   1a810:	0f af c2             	imul   %edx,%eax
   1a813:	01 f0                	add    %esi,%eax
   1a815:	8d 78 fc             	lea    -0x4(%eax),%edi
			"S" (origin + video_size_row * (bottom - 1) - 4)
   1a818:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a81c:	89 d0                	mov    %edx,%eax
   1a81e:	c1 e0 03             	shl    $0x3,%eax
   1a821:	01 d0                	add    %edx,%eax
   1a823:	c1 e0 04             	shl    $0x4,%eax
   1a826:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1a82b:	8b 30                	mov    (%eax),%esi
   1a82d:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a831:	89 d0                	mov    %edx,%eax
   1a833:	c1 e0 03             	shl    $0x3,%eax
   1a836:	01 d0                	add    %edx,%eax
   1a838:	c1 e0 04             	shl    $0x4,%eax
   1a83b:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1a840:	8b 00                	mov    (%eax),%eax
   1a842:	8d 50 ff             	lea    -0x1(%eax),%edx
   1a845:	a1 40 ee 03 00       	mov    0x3ee40,%eax
   1a84a:	0f af c2             	imul   %edx,%eax
   1a84d:	01 f0                	add    %esi,%eax
   1a84f:	8d 50 fc             	lea    -0x4(%eax),%edx
		return;
	if (video_type == VIDEO_TYPE_EGAC || video_type == VIDEO_TYPE_EGAM)
	{
		// %0 - eax(擦除字符+属性);%1 - ecx(top行到bottom-1行所对应的内存长字数);
		// %2 - edi(窗口右下角最后一个字长位置); %3 - esi(窗口倒数第2行最后一个长字位置).
		__asm__("std\n\t"										// 置方向位!!
   1a852:	89 d8                	mov    %ebx,%eax
   1a854:	89 d6                	mov    %edx,%esi
   1a856:	fd                   	std    
   1a857:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
   1a859:	83 c7 02             	add    $0x2,%edi
   1a85c:	8b 0d 34 ee 03 00    	mov    0x3ee34,%ecx
   1a862:	f3 66 ab             	rep stos %ax,%es:(%edi)
   1a865:	e9 da 00 00 00       	jmp    1a944 <scrdown+0x205>
			"movsl\n\t"
			"addl $2, %%edi\n\t"									/* %edi has been decremented by 4 */
			"movl video_num_columns, %%ecx\n\t"
			"rep\n\t"
			"stosw"
			::"a" (video_erase_char),
   1a86a:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a86e:	89 d0                	mov    %edx,%eax
   1a870:	c1 e0 03             	shl    $0x3,%eax
   1a873:	01 d0                	add    %edx,%eax
   1a875:	c1 e0 04             	shl    $0x4,%eax
   1a878:	05 60 ee 03 00       	add    $0x3ee60,%eax
   1a87d:	0f b7 18             	movzwl (%eax),%ebx
			"c" ((bottom - top - 1) * video_num_columns >> 1),
   1a880:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a884:	89 d0                	mov    %edx,%eax
   1a886:	c1 e0 03             	shl    $0x3,%eax
   1a889:	01 d0                	add    %edx,%eax
   1a88b:	c1 e0 04             	shl    $0x4,%eax
   1a88e:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1a893:	8b 08                	mov    (%eax),%ecx
   1a895:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a899:	89 d0                	mov    %edx,%eax
   1a89b:	c1 e0 03             	shl    $0x3,%eax
   1a89e:	01 d0                	add    %edx,%eax
   1a8a0:	c1 e0 04             	shl    $0x4,%eax
   1a8a3:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1a8a8:	8b 00                	mov    (%eax),%eax
   1a8aa:	29 c1                	sub    %eax,%ecx
   1a8ac:	89 c8                	mov    %ecx,%eax
   1a8ae:	8d 50 ff             	lea    -0x1(%eax),%edx
   1a8b1:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1a8b6:	0f af c2             	imul   %edx,%eax
   1a8b9:	d1 e8                	shr    %eax
   1a8bb:	89 c1                	mov    %eax,%ecx
			"D" (origin + video_size_row * bottom - 4),
   1a8bd:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a8c1:	89 d0                	mov    %edx,%eax
   1a8c3:	c1 e0 03             	shl    $0x3,%eax
   1a8c6:	01 d0                	add    %edx,%eax
   1a8c8:	c1 e0 04             	shl    $0x4,%eax
   1a8cb:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1a8d0:	8b 30                	mov    (%eax),%esi
   1a8d2:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a8d6:	89 d0                	mov    %edx,%eax
   1a8d8:	c1 e0 03             	shl    $0x3,%eax
   1a8db:	01 d0                	add    %edx,%eax
   1a8dd:	c1 e0 04             	shl    $0x4,%eax
   1a8e0:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1a8e5:	8b 10                	mov    (%eax),%edx
   1a8e7:	a1 40 ee 03 00       	mov    0x3ee40,%eax
   1a8ec:	0f af c2             	imul   %edx,%eax
   1a8ef:	01 f0                	add    %esi,%eax
   1a8f1:	8d 78 fc             	lea    -0x4(%eax),%edi
			"S" (origin + video_size_row * (bottom - 1) - 4)
   1a8f4:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a8f8:	89 d0                	mov    %edx,%eax
   1a8fa:	c1 e0 03             	shl    $0x3,%eax
   1a8fd:	01 d0                	add    %edx,%eax
   1a8ff:	c1 e0 04             	shl    $0x4,%eax
   1a902:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1a907:	8b 30                	mov    (%eax),%esi
   1a909:	8b 54 24 10          	mov    0x10(%esp),%edx
   1a90d:	89 d0                	mov    %edx,%eax
   1a90f:	c1 e0 03             	shl    $0x3,%eax
   1a912:	01 d0                	add    %edx,%eax
   1a914:	c1 e0 04             	shl    $0x4,%eax
   1a917:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1a91c:	8b 00                	mov    (%eax),%eax
   1a91e:	8d 50 ff             	lea    -0x1(%eax),%edx
   1a921:	a1 40 ee 03 00       	mov    0x3ee40,%eax
   1a926:	0f af c2             	imul   %edx,%eax
   1a929:	01 f0                	add    %esi,%eax
   1a92b:	8d 50 fc             	lea    -0x4(%eax),%edx
			:);
	}
	// 如果不是EGA显示类型,则执行以下操作(与上面完成一样).
	else														/* Not EGA/VGA */
	{
		__asm__("std\n\t"
   1a92e:	89 d8                	mov    %ebx,%eax
   1a930:	89 d6                	mov    %edx,%esi
   1a932:	fd                   	std    
   1a933:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
   1a935:	83 c7 02             	add    $0x2,%edi
   1a938:	8b 0d 34 ee 03 00    	mov    0x3ee34,%ecx
   1a93e:	f3 66 ab             	rep stos %ax,%es:(%edi)
   1a941:	eb 01                	jmp    1a944 <scrdown+0x205>
{
	// 同样,滚屏区域必须至少有2行.如果滚屏区域顶行号大于等于区域底行号,则不满足进行滚行操作的条件.另外,对于EGA/VGA卡,我们可以指定屏内行范围(区域)
	// 进行滚屏操作,而MDA单色显示卡只能进行整屏操作.由于窗口向上移动最多移动以当前控制台实际显示内存末端的情况,所以这里只需要处理普通的内存数据
	// 移动情况.
	if (bottom <= top)
		return;
   1a943:	90                   	nop
			"c" ((bottom - top - 1) * video_num_columns >> 1),
			"D" (origin + video_size_row * bottom - 4),
			"S" (origin + video_size_row * (bottom - 1) - 4)
			:);
	}
}
   1a944:	5b                   	pop    %ebx
   1a945:	5e                   	pop    %esi
   1a946:	5f                   	pop    %edi
   1a947:	c3                   	ret    

0001a948 <lf>:
// 如果光标没有处在最后一行,则直接修改光标当前行变量y++,并调整光标对应显示内存位置pos(加上一行字符所对应的内存长度).否则
// 需要将屏幕窗口内容上移一行.
// 函数名称lf(line feed 换行)是指处理控制字符LF.
static void lf(int currcons)
{
	if (y + 1 < bottom) {
   1a948:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a94c:	89 d0                	mov    %edx,%eax
   1a94e:	c1 e0 03             	shl    $0x3,%eax
   1a951:	01 d0                	add    %edx,%eax
   1a953:	c1 e0 04             	shl    $0x4,%eax
   1a956:	05 88 ee 03 00       	add    $0x3ee88,%eax
   1a95b:	8b 00                	mov    (%eax),%eax
   1a95d:	8d 48 01             	lea    0x1(%eax),%ecx
   1a960:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a964:	89 d0                	mov    %edx,%eax
   1a966:	c1 e0 03             	shl    $0x3,%eax
   1a969:	01 d0                	add    %edx,%eax
   1a96b:	c1 e0 04             	shl    $0x4,%eax
   1a96e:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1a973:	8b 00                	mov    (%eax),%eax
   1a975:	39 c1                	cmp    %eax,%ecx
   1a977:	73 61                	jae    1a9da <lf+0x92>
		y++;
   1a979:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a97d:	89 d0                	mov    %edx,%eax
   1a97f:	c1 e0 03             	shl    $0x3,%eax
   1a982:	01 d0                	add    %edx,%eax
   1a984:	c1 e0 04             	shl    $0x4,%eax
   1a987:	05 88 ee 03 00       	add    $0x3ee88,%eax
   1a98c:	8b 00                	mov    (%eax),%eax
   1a98e:	8d 48 01             	lea    0x1(%eax),%ecx
   1a991:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a995:	89 d0                	mov    %edx,%eax
   1a997:	c1 e0 03             	shl    $0x3,%eax
   1a99a:	01 d0                	add    %edx,%eax
   1a99c:	c1 e0 04             	shl    $0x4,%eax
   1a99f:	05 88 ee 03 00       	add    $0x3ee88,%eax
   1a9a4:	89 08                	mov    %ecx,(%eax)
		pos += video_size_row;							// 加上屏幕一行占用内存的字节数.
   1a9a6:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a9aa:	89 d0                	mov    %edx,%eax
   1a9ac:	c1 e0 03             	shl    $0x3,%eax
   1a9af:	01 d0                	add    %edx,%eax
   1a9b1:	c1 e0 04             	shl    $0x4,%eax
   1a9b4:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1a9b9:	8b 10                	mov    (%eax),%edx
   1a9bb:	a1 40 ee 03 00       	mov    0x3ee40,%eax
   1a9c0:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
   1a9c3:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a9c7:	89 d0                	mov    %edx,%eax
   1a9c9:	c1 e0 03             	shl    $0x3,%eax
   1a9cc:	01 d0                	add    %edx,%eax
   1a9ce:	c1 e0 04             	shl    $0x4,%eax
   1a9d1:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1a9d6:	89 08                	mov    %ecx,(%eax)
		return;
   1a9d8:	eb 0c                	jmp    1a9e6 <lf+0x9e>
	}
	scrup(currcons);									// 将屏幕窗口内容上移一行.
   1a9da:	ff 74 24 04          	pushl  0x4(%esp)
   1a9de:	e8 c5 f8 ff ff       	call   1a2a8 <scrup>
   1a9e3:	83 c4 04             	add    $0x4,%esp
}
   1a9e6:	c3                   	ret    

0001a9e7 <ri>:
// 如果光标不在屏幕第一行上,则直接修改光标当前标量y--,并调整光标对应显示内存位置pos,减去屏幕上一行字符所对应的内存长度字节数.
// 否则需要将屏幕窗口内容下移一行.
// 函数名称ri(reverse index 反向索引)是指控制字符RI或转义序列"ESC M".
static void ri(int currcons)
{
	if (y > top) {
   1a9e7:	8b 54 24 04          	mov    0x4(%esp),%edx
   1a9eb:	89 d0                	mov    %edx,%eax
   1a9ed:	c1 e0 03             	shl    $0x3,%eax
   1a9f0:	01 d0                	add    %edx,%eax
   1a9f2:	c1 e0 04             	shl    $0x4,%eax
   1a9f5:	05 88 ee 03 00       	add    $0x3ee88,%eax
   1a9fa:	8b 08                	mov    (%eax),%ecx
   1a9fc:	8b 54 24 04          	mov    0x4(%esp),%edx
   1aa00:	89 d0                	mov    %edx,%eax
   1aa02:	c1 e0 03             	shl    $0x3,%eax
   1aa05:	01 d0                	add    %edx,%eax
   1aa07:	c1 e0 04             	shl    $0x4,%eax
   1aa0a:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1aa0f:	8b 00                	mov    (%eax),%eax
   1aa11:	39 c1                	cmp    %eax,%ecx
   1aa13:	76 62                	jbe    1aa77 <ri+0x90>
		y--;											// 减去屏幕一行占用内存的字节数
   1aa15:	8b 54 24 04          	mov    0x4(%esp),%edx
   1aa19:	89 d0                	mov    %edx,%eax
   1aa1b:	c1 e0 03             	shl    $0x3,%eax
   1aa1e:	01 d0                	add    %edx,%eax
   1aa20:	c1 e0 04             	shl    $0x4,%eax
   1aa23:	05 88 ee 03 00       	add    $0x3ee88,%eax
   1aa28:	8b 00                	mov    (%eax),%eax
   1aa2a:	8d 48 ff             	lea    -0x1(%eax),%ecx
   1aa2d:	8b 54 24 04          	mov    0x4(%esp),%edx
   1aa31:	89 d0                	mov    %edx,%eax
   1aa33:	c1 e0 03             	shl    $0x3,%eax
   1aa36:	01 d0                	add    %edx,%eax
   1aa38:	c1 e0 04             	shl    $0x4,%eax
   1aa3b:	05 88 ee 03 00       	add    $0x3ee88,%eax
   1aa40:	89 08                	mov    %ecx,(%eax)
		pos -= video_size_row;
   1aa42:	8b 54 24 04          	mov    0x4(%esp),%edx
   1aa46:	89 d0                	mov    %edx,%eax
   1aa48:	c1 e0 03             	shl    $0x3,%eax
   1aa4b:	01 d0                	add    %edx,%eax
   1aa4d:	c1 e0 04             	shl    $0x4,%eax
   1aa50:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1aa55:	8b 10                	mov    (%eax),%edx
   1aa57:	a1 40 ee 03 00       	mov    0x3ee40,%eax
   1aa5c:	89 d1                	mov    %edx,%ecx
   1aa5e:	29 c1                	sub    %eax,%ecx
   1aa60:	8b 54 24 04          	mov    0x4(%esp),%edx
   1aa64:	89 d0                	mov    %edx,%eax
   1aa66:	c1 e0 03             	shl    $0x3,%eax
   1aa69:	01 d0                	add    %edx,%eax
   1aa6b:	c1 e0 04             	shl    $0x4,%eax
   1aa6e:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1aa73:	89 08                	mov    %ecx,(%eax)
		return;
   1aa75:	eb 0c                	jmp    1aa83 <ri+0x9c>
	}
	scrdown(currcons);									// 将屏幕窗口内容下移一行
   1aa77:	ff 74 24 04          	pushl  0x4(%esp)
   1aa7b:	e8 bf fc ff ff       	call   1a73f <scrdown>
   1aa80:	83 c4 04             	add    $0x4,%esp
}
   1aa83:	c3                   	ret    

0001aa84 <cr>:
// 光标回到第1列(0列).
// 调整光标对应内存位置pos.光标所在列号*2即是0列到光标所在列对应的内存字节长度.
// 函数名称cr(carriage return回车)指明处理的控制字符的回车.
static void cr(int currcons)
{
	pos -= x << 1;										// 减去0列到光标处占用的内存字节数.
   1aa84:	8b 54 24 04          	mov    0x4(%esp),%edx
   1aa88:	89 d0                	mov    %edx,%eax
   1aa8a:	c1 e0 03             	shl    $0x3,%eax
   1aa8d:	01 d0                	add    %edx,%eax
   1aa8f:	c1 e0 04             	shl    $0x4,%eax
   1aa92:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1aa97:	8b 08                	mov    (%eax),%ecx
   1aa99:	8b 54 24 04          	mov    0x4(%esp),%edx
   1aa9d:	89 d0                	mov    %edx,%eax
   1aa9f:	c1 e0 03             	shl    $0x3,%eax
   1aaa2:	01 d0                	add    %edx,%eax
   1aaa4:	c1 e0 04             	shl    $0x4,%eax
   1aaa7:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1aaac:	8b 00                	mov    (%eax),%eax
   1aaae:	01 c0                	add    %eax,%eax
   1aab0:	29 c1                	sub    %eax,%ecx
   1aab2:	8b 54 24 04          	mov    0x4(%esp),%edx
   1aab6:	89 d0                	mov    %edx,%eax
   1aab8:	c1 e0 03             	shl    $0x3,%eax
   1aabb:	01 d0                	add    %edx,%eax
   1aabd:	c1 e0 04             	shl    $0x4,%eax
   1aac0:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1aac5:	89 08                	mov    %ecx,(%eax)
	x = 0;
   1aac7:	8b 54 24 04          	mov    0x4(%esp),%edx
   1aacb:	89 d0                	mov    %edx,%eax
   1aacd:	c1 e0 03             	shl    $0x3,%eax
   1aad0:	01 d0                	add    %edx,%eax
   1aad2:	c1 e0 04             	shl    $0x4,%eax
   1aad5:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1aada:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   1aae0:	90                   	nop
   1aae1:	c3                   	ret    

0001aae2 <del>:

// 擦除光标前一字符(用空格替代)(del -delete 删除)
// 如果光标没有处在0列,则将光标对应内存位置pos后退2字节(对应屏幕上一个字符),然后将当前光标变量列值减1,并将光标所在位置处字符符擦除
static void del(int currcons)
{
	if (x) {
   1aae2:	8b 54 24 04          	mov    0x4(%esp),%edx
   1aae6:	89 d0                	mov    %edx,%eax
   1aae8:	c1 e0 03             	shl    $0x3,%eax
   1aaeb:	01 d0                	add    %edx,%eax
   1aaed:	c1 e0 04             	shl    $0x4,%eax
   1aaf0:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1aaf5:	8b 00                	mov    (%eax),%eax
   1aaf7:	85 c0                	test   %eax,%eax
   1aaf9:	0f 84 8a 00 00 00    	je     1ab89 <del+0xa7>
		pos -= 2;
   1aaff:	8b 54 24 04          	mov    0x4(%esp),%edx
   1ab03:	89 d0                	mov    %edx,%eax
   1ab05:	c1 e0 03             	shl    $0x3,%eax
   1ab08:	01 d0                	add    %edx,%eax
   1ab0a:	c1 e0 04             	shl    $0x4,%eax
   1ab0d:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1ab12:	8b 00                	mov    (%eax),%eax
   1ab14:	8d 48 fe             	lea    -0x2(%eax),%ecx
   1ab17:	8b 54 24 04          	mov    0x4(%esp),%edx
   1ab1b:	89 d0                	mov    %edx,%eax
   1ab1d:	c1 e0 03             	shl    $0x3,%eax
   1ab20:	01 d0                	add    %edx,%eax
   1ab22:	c1 e0 04             	shl    $0x4,%eax
   1ab25:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1ab2a:	89 08                	mov    %ecx,(%eax)
		x--;
   1ab2c:	8b 54 24 04          	mov    0x4(%esp),%edx
   1ab30:	89 d0                	mov    %edx,%eax
   1ab32:	c1 e0 03             	shl    $0x3,%eax
   1ab35:	01 d0                	add    %edx,%eax
   1ab37:	c1 e0 04             	shl    $0x4,%eax
   1ab3a:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1ab3f:	8b 00                	mov    (%eax),%eax
   1ab41:	8d 48 ff             	lea    -0x1(%eax),%ecx
   1ab44:	8b 54 24 04          	mov    0x4(%esp),%edx
   1ab48:	89 d0                	mov    %edx,%eax
   1ab4a:	c1 e0 03             	shl    $0x3,%eax
   1ab4d:	01 d0                	add    %edx,%eax
   1ab4f:	c1 e0 04             	shl    $0x4,%eax
   1ab52:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1ab57:	89 08                	mov    %ecx,(%eax)
		*(unsigned short *)pos = video_erase_char;
   1ab59:	8b 54 24 04          	mov    0x4(%esp),%edx
   1ab5d:	89 d0                	mov    %edx,%eax
   1ab5f:	c1 e0 03             	shl    $0x3,%eax
   1ab62:	01 d0                	add    %edx,%eax
   1ab64:	c1 e0 04             	shl    $0x4,%eax
   1ab67:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1ab6c:	8b 00                	mov    (%eax),%eax
   1ab6e:	89 c1                	mov    %eax,%ecx
   1ab70:	8b 54 24 04          	mov    0x4(%esp),%edx
   1ab74:	89 d0                	mov    %edx,%eax
   1ab76:	c1 e0 03             	shl    $0x3,%eax
   1ab79:	01 d0                	add    %edx,%eax
   1ab7b:	c1 e0 04             	shl    $0x4,%eax
   1ab7e:	05 60 ee 03 00       	add    $0x3ee60,%eax
   1ab83:	0f b7 00             	movzwl (%eax),%eax
   1ab86:	66 89 01             	mov    %ax,(%ecx)
	}
}
   1ab89:	90                   	nop
   1ab8a:	c3                   	ret    

0001ab8b <csi_J>:
// ANSI控制序列: 'ESC [ Ps J'(Ps = 0 - 删除光标处到屏幕底端;1 - 删除屏幕开始到光标处;2 - 整屏删除).本函数根据指定的控制序列
// 具体参数值,执行与光标位置的删除操作,并且在擦除字符或行时光标位置不变.
// 函数名称csi_J(CSI - Control Sequence Introducer,即控制序列引导码)指明对控制序列"CSI Ps J"进行处理.
// 参数:vpar - 对应上面控制序列中Ps的值.
static void csi_J(int currcons, int vpar)
{
   1ab8b:	57                   	push   %edi
   1ab8c:	53                   	push   %ebx
   1ab8d:	83 ec 10             	sub    $0x10,%esp
	long count;
	long start;

	// 首先根据三种情况分别设置需要删除的字符数和删除开始的显示内存位置.
	switch (vpar) {
   1ab90:	8b 44 24 20          	mov    0x20(%esp),%eax
   1ab94:	83 f8 01             	cmp    $0x1,%eax
   1ab97:	74 61                	je     1abfa <csi_J+0x6f>
   1ab99:	83 f8 02             	cmp    $0x2,%eax
   1ab9c:	0f 84 a7 00 00 00    	je     1ac49 <csi_J+0xbe>
   1aba2:	85 c0                	test   %eax,%eax
   1aba4:	74 05                	je     1abab <csi_J+0x20>
		case 2: 											/* erase whole display */
			count = video_num_columns * video_num_lines;	/* 删除整个屏幕上的所有字符 */
			start = origin;
			break;
		default:
			return;
   1aba6:	e9 f0 00 00 00       	jmp    1ac9b <csi_J+0x110>
	long start;

	// 首先根据三种情况分别设置需要删除的字符数和删除开始的显示内存位置.
	switch (vpar) {
		case 0:												/* erase from cursor to end of display */
			count = (scr_end - pos) >> 1;					/* 擦除光标到屏幕底端所有字符 */
   1abab:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1abaf:	89 d0                	mov    %edx,%eax
   1abb1:	c1 e0 03             	shl    $0x3,%eax
   1abb4:	01 d0                	add    %edx,%eax
   1abb6:	c1 e0 04             	shl    $0x4,%eax
   1abb9:	05 7c ee 03 00       	add    $0x3ee7c,%eax
   1abbe:	8b 08                	mov    (%eax),%ecx
   1abc0:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1abc4:	89 d0                	mov    %edx,%eax
   1abc6:	c1 e0 03             	shl    $0x3,%eax
   1abc9:	01 d0                	add    %edx,%eax
   1abcb:	c1 e0 04             	shl    $0x4,%eax
   1abce:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1abd3:	8b 00                	mov    (%eax),%eax
   1abd5:	29 c1                	sub    %eax,%ecx
   1abd7:	89 c8                	mov    %ecx,%eax
   1abd9:	d1 e8                	shr    %eax
   1abdb:	89 44 24 0c          	mov    %eax,0xc(%esp)
			start = pos;
   1abdf:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1abe3:	89 d0                	mov    %edx,%eax
   1abe5:	c1 e0 03             	shl    $0x3,%eax
   1abe8:	01 d0                	add    %edx,%eax
   1abea:	c1 e0 04             	shl    $0x4,%eax
   1abed:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1abf2:	8b 00                	mov    (%eax),%eax
   1abf4:	89 44 24 08          	mov    %eax,0x8(%esp)
			break;
   1abf8:	eb 7b                	jmp    1ac75 <csi_J+0xea>
		case 1:												/* erase from start to cursor */
			count = (pos - origin) >> 1;					/* 删除从屏幕开始到光标处的字符 */
   1abfa:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1abfe:	89 d0                	mov    %edx,%eax
   1ac00:	c1 e0 03             	shl    $0x3,%eax
   1ac03:	01 d0                	add    %edx,%eax
   1ac05:	c1 e0 04             	shl    $0x4,%eax
   1ac08:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1ac0d:	8b 08                	mov    (%eax),%ecx
   1ac0f:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ac13:	89 d0                	mov    %edx,%eax
   1ac15:	c1 e0 03             	shl    $0x3,%eax
   1ac18:	01 d0                	add    %edx,%eax
   1ac1a:	c1 e0 04             	shl    $0x4,%eax
   1ac1d:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1ac22:	8b 00                	mov    (%eax),%eax
   1ac24:	29 c1                	sub    %eax,%ecx
   1ac26:	89 c8                	mov    %ecx,%eax
   1ac28:	d1 e8                	shr    %eax
   1ac2a:	89 44 24 0c          	mov    %eax,0xc(%esp)
			start = origin;
   1ac2e:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ac32:	89 d0                	mov    %edx,%eax
   1ac34:	c1 e0 03             	shl    $0x3,%eax
   1ac37:	01 d0                	add    %edx,%eax
   1ac39:	c1 e0 04             	shl    $0x4,%eax
   1ac3c:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1ac41:	8b 00                	mov    (%eax),%eax
   1ac43:	89 44 24 08          	mov    %eax,0x8(%esp)
			break;
   1ac47:	eb 2c                	jmp    1ac75 <csi_J+0xea>
		case 2: 											/* erase whole display */
			count = video_num_columns * video_num_lines;	/* 删除整个屏幕上的所有字符 */
   1ac49:	8b 15 34 ee 03 00    	mov    0x3ee34,%edx
   1ac4f:	a1 44 ee 03 00       	mov    0x3ee44,%eax
   1ac54:	0f af c2             	imul   %edx,%eax
   1ac57:	89 44 24 0c          	mov    %eax,0xc(%esp)
			start = origin;
   1ac5b:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ac5f:	89 d0                	mov    %edx,%eax
   1ac61:	c1 e0 03             	shl    $0x3,%eax
   1ac64:	01 d0                	add    %edx,%eax
   1ac66:	c1 e0 04             	shl    $0x4,%eax
   1ac69:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1ac6e:	8b 00                	mov    (%eax),%eax
   1ac70:	89 44 24 08          	mov    %eax,0x8(%esp)
			break;
   1ac74:	90                   	nop
	// %0 - ecx(删除的字符数count);%1 - edi(删除操作开始的地址);%2 - eax(填入的擦除字符).
	__asm__("cld\n\t"
		"rep\n\t"
		"stosw\n\t"
		::"c" (count),
		"D" (start),"a" (video_erase_char)
   1ac75:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ac79:	89 d0                	mov    %edx,%eax
   1ac7b:	c1 e0 03             	shl    $0x3,%eax
   1ac7e:	01 d0                	add    %edx,%eax
   1ac80:	c1 e0 04             	shl    $0x4,%eax
   1ac83:	05 60 ee 03 00       	add    $0x3ee60,%eax
   1ac88:	0f b7 00             	movzwl (%eax),%eax
		default:
			return;
	}
	// 然后使用擦除字符填写被删除字符的地方.
	// %0 - ecx(删除的字符数count);%1 - edi(删除操作开始的地址);%2 - eax(填入的擦除字符).
	__asm__("cld\n\t"
   1ac8b:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1ac8f:	8b 5c 24 08          	mov    0x8(%esp),%ebx
   1ac93:	89 d1                	mov    %edx,%ecx
   1ac95:	89 df                	mov    %ebx,%edi
   1ac97:	fc                   	cld    
   1ac98:	f3 66 ab             	rep stos %ax,%es:(%edi)
		"rep\n\t"
		"stosw\n\t"
		::"c" (count),
		"D" (start),"a" (video_erase_char)
		:);
}
   1ac9b:	83 c4 10             	add    $0x10,%esp
   1ac9e:	5b                   	pop    %ebx
   1ac9f:	5f                   	pop    %edi
   1aca0:	c3                   	ret    

0001aca1 <csi_K>:
// 删除上一行上与光标位置相关的部分.
// ANSI转义字符序列:'ESC [ Ps K'(Ps = 0删除到行尾;1 从开始删除;2 整行都删除).本函数根据参数擦除光标所在行的部分或所有字符.擦除操作从屏幕上
// 移走字符但不影响其他字符.擦除的字符被丢弃.在擦除字符或行时光标位置不变.
// 参数:par - 对应上面控制序列中Ps的值.
static void csi_K(int currcons, int vpar)
{
   1aca1:	57                   	push   %edi
   1aca2:	53                   	push   %ebx
   1aca3:	83 ec 10             	sub    $0x10,%esp
	long count;
	long start;

	// 首先根据三种情况分别设置需要删除的字符数和删除开始的显示内存位置.
	switch (vpar) {
   1aca6:	8b 44 24 20          	mov    0x20(%esp),%eax
   1acaa:	83 f8 01             	cmp    $0x1,%eax
   1acad:	74 75                	je     1ad24 <csi_K+0x83>
   1acaf:	83 f8 02             	cmp    $0x2,%eax
   1acb2:	0f 84 c5 00 00 00    	je     1ad7d <csi_K+0xdc>
   1acb8:	85 c0                	test   %eax,%eax
   1acba:	74 05                	je     1acc1 <csi_K+0x20>
		case 2: 												/* erase whole line */
			start = pos - (x << 1);								/* 将整行字符全删除 */
			count = video_num_columns;
			break;
		default:
			return;
   1acbc:	e9 23 01 00 00       	jmp    1ade4 <csi_K+0x143>
	long start;

	// 首先根据三种情况分别设置需要删除的字符数和删除开始的显示内存位置.
	switch (vpar) {
		case 0:													/* erase from cursor to end of line */
			if (x >= video_num_columns)							/* 删除光标到行尾所有字符 */
   1acc1:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1acc5:	89 d0                	mov    %edx,%eax
   1acc7:	c1 e0 03             	shl    $0x3,%eax
   1acca:	01 d0                	add    %edx,%eax
   1accc:	c1 e0 04             	shl    $0x4,%eax
   1accf:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1acd4:	8b 10                	mov    (%eax),%edx
   1acd6:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1acdb:	39 c2                	cmp    %eax,%edx
   1acdd:	0f 83 00 01 00 00    	jae    1ade3 <csi_K+0x142>
				return;
			count = video_num_columns - x;
   1ace3:	8b 0d 34 ee 03 00    	mov    0x3ee34,%ecx
   1ace9:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1aced:	89 d0                	mov    %edx,%eax
   1acef:	c1 e0 03             	shl    $0x3,%eax
   1acf2:	01 d0                	add    %edx,%eax
   1acf4:	c1 e0 04             	shl    $0x4,%eax
   1acf7:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1acfc:	8b 00                	mov    (%eax),%eax
   1acfe:	29 c1                	sub    %eax,%ecx
   1ad00:	89 c8                	mov    %ecx,%eax
   1ad02:	89 44 24 0c          	mov    %eax,0xc(%esp)
			start = pos;
   1ad06:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ad0a:	89 d0                	mov    %edx,%eax
   1ad0c:	c1 e0 03             	shl    $0x3,%eax
   1ad0f:	01 d0                	add    %edx,%eax
   1ad11:	c1 e0 04             	shl    $0x4,%eax
   1ad14:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1ad19:	8b 00                	mov    (%eax),%eax
   1ad1b:	89 44 24 08          	mov    %eax,0x8(%esp)
			break;
   1ad1f:	e9 97 00 00 00       	jmp    1adbb <csi_K+0x11a>
		case 1:													/* erase from start of line to cursor */
			start = pos - (x << 1);								/* 删除从行开始到光标处 */
   1ad24:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ad28:	89 d0                	mov    %edx,%eax
   1ad2a:	c1 e0 03             	shl    $0x3,%eax
   1ad2d:	01 d0                	add    %edx,%eax
   1ad2f:	c1 e0 04             	shl    $0x4,%eax
   1ad32:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1ad37:	8b 08                	mov    (%eax),%ecx
   1ad39:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ad3d:	89 d0                	mov    %edx,%eax
   1ad3f:	c1 e0 03             	shl    $0x3,%eax
   1ad42:	01 d0                	add    %edx,%eax
   1ad44:	c1 e0 04             	shl    $0x4,%eax
   1ad47:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1ad4c:	8b 00                	mov    (%eax),%eax
   1ad4e:	01 c0                	add    %eax,%eax
   1ad50:	29 c1                	sub    %eax,%ecx
   1ad52:	89 c8                	mov    %ecx,%eax
   1ad54:	89 44 24 08          	mov    %eax,0x8(%esp)
			count = (x < video_num_columns) ? x : video_num_columns;
   1ad58:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ad5c:	89 d0                	mov    %edx,%eax
   1ad5e:	c1 e0 03             	shl    $0x3,%eax
   1ad61:	01 d0                	add    %edx,%eax
   1ad63:	c1 e0 04             	shl    $0x4,%eax
   1ad66:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1ad6b:	8b 10                	mov    (%eax),%edx
   1ad6d:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1ad72:	39 c2                	cmp    %eax,%edx
   1ad74:	0f 46 c2             	cmovbe %edx,%eax
   1ad77:	89 44 24 0c          	mov    %eax,0xc(%esp)
			break;
   1ad7b:	eb 3e                	jmp    1adbb <csi_K+0x11a>
		case 2: 												/* erase whole line */
			start = pos - (x << 1);								/* 将整行字符全删除 */
   1ad7d:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ad81:	89 d0                	mov    %edx,%eax
   1ad83:	c1 e0 03             	shl    $0x3,%eax
   1ad86:	01 d0                	add    %edx,%eax
   1ad88:	c1 e0 04             	shl    $0x4,%eax
   1ad8b:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1ad90:	8b 08                	mov    (%eax),%ecx
   1ad92:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1ad96:	89 d0                	mov    %edx,%eax
   1ad98:	c1 e0 03             	shl    $0x3,%eax
   1ad9b:	01 d0                	add    %edx,%eax
   1ad9d:	c1 e0 04             	shl    $0x4,%eax
   1ada0:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1ada5:	8b 00                	mov    (%eax),%eax
   1ada7:	01 c0                	add    %eax,%eax
   1ada9:	29 c1                	sub    %eax,%ecx
   1adab:	89 c8                	mov    %ecx,%eax
   1adad:	89 44 24 08          	mov    %eax,0x8(%esp)
			count = video_num_columns;
   1adb1:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1adb6:	89 44 24 0c          	mov    %eax,0xc(%esp)
			break;
   1adba:	90                   	nop
	// %0 - ecx(删除字符数count);%1 - edi(删除操作开始地址);%2 - eax(填入的擦除字符).
	__asm__("cld\n\t"
		"rep\n\t"
		"stosw\n\t"
		::"c" (count),
		"D" (start),"a" (video_erase_char)
   1adbb:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1adbf:	89 d0                	mov    %edx,%eax
   1adc1:	c1 e0 03             	shl    $0x3,%eax
   1adc4:	01 d0                	add    %edx,%eax
   1adc6:	c1 e0 04             	shl    $0x4,%eax
   1adc9:	05 60 ee 03 00       	add    $0x3ee60,%eax
   1adce:	0f b7 00             	movzwl (%eax),%eax
		default:
			return;
	}
	// 然后使用擦除字符填写删除字符的地方.
	// %0 - ecx(删除字符数count);%1 - edi(删除操作开始地址);%2 - eax(填入的擦除字符).
	__asm__("cld\n\t"
   1add1:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1add5:	8b 5c 24 08          	mov    0x8(%esp),%ebx
   1add9:	89 d1                	mov    %edx,%ecx
   1addb:	89 df                	mov    %ebx,%edi
   1addd:	fc                   	cld    
   1adde:	f3 66 ab             	rep stos %ax,%es:(%edi)
   1ade1:	eb 01                	jmp    1ade4 <csi_K+0x143>

	// 首先根据三种情况分别设置需要删除的字符数和删除开始的显示内存位置.
	switch (vpar) {
		case 0:													/* erase from cursor to end of line */
			if (x >= video_num_columns)							/* 删除光标到行尾所有字符 */
				return;
   1ade3:	90                   	nop
		"rep\n\t"
		"stosw\n\t"
		::"c" (count),
		"D" (start),"a" (video_erase_char)
		:);
}
   1ade4:	83 c4 10             	add    $0x10,%esp
   1ade7:	5b                   	pop    %ebx
   1ade8:	5f                   	pop    %edi
   1ade9:	c3                   	ret    

0001adea <csi_m>:
// 设置显示字符属性
// ANSI转义序列:'ESC [ Ps;PS m'.Ps = 0 - 默认属性;1 - 粗体并增亮;4 - 下划线;5 - 闪烁;7 - 反显;22 - 非粗体;24 - 无下划线;
// 25 - 无闪烁;27 - 正显;30~38 - 设置前景色彩;39 - 默认前景色(White);40~48 - 设置背景色彩;49 - 默认背景色(Black).
// 该控制序列根据参数设置字符显示属性.以后所有发送到终端的字符都将使用这里指定的属性,直到再次执行本控制序列重新设置字符显示的属性.
void csi_m(int currcons)
{
   1adea:	53                   	push   %ebx
   1adeb:	83 ec 10             	sub    $0x10,%esp
	// 如果Ps = 0,则把当前虚拟控制台随后显示的字符属性设置为默认属性def_attr.初始化时def_attr已被设置成0x07(黑底白字).
	// 如果Ps = 1,则把当前虚拟控制台随后显示的字符属性设置为粗体或增亮显示.如果是彩色显示,则把字符属性或上0x08让字符高亮度显示;如果是单色显示,
	// 则让人带下划线显示.
	// 如果ps = 4,则对彩色和单色显示进行不同的处理.若此时不是彩色显示方式,则让字符带下划线显示.如果是彩色显示,那么若原来vc_bold_attr不等于-1
	// 时就复位其背景色;否则的话就把背景色取反.若取反后前景色与背景色相同,就把前景色增1而取另一种颜色.
	for (i = 0; i <= npar; i++)
   1adee:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   1adf5:	00 
   1adf6:	e9 dd 05 00 00       	jmp    1b3d8 <csi_m+0x5ee>
		switch (par[i]) {
   1adfb:	8b 54 24 18          	mov    0x18(%esp),%edx
   1adff:	89 d0                	mov    %edx,%eax
   1ae01:	c1 e0 03             	shl    $0x3,%eax
   1ae04:	01 d0                	add    %edx,%eax
   1ae06:	c1 e0 02             	shl    $0x2,%eax
   1ae09:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1ae0d:	01 d0                	add    %edx,%eax
   1ae0f:	83 c0 0c             	add    $0xc,%eax
   1ae12:	8b 04 85 68 ee 03 00 	mov    0x3ee68(,%eax,4),%eax
   1ae19:	83 f8 31             	cmp    $0x31,%eax
   1ae1c:	0f 87 4e 04 00 00    	ja     1b270 <csi_m+0x486>
   1ae22:	8b 04 85 8c 4c 02 00 	mov    0x24c8c(,%eax,4),%eax
   1ae29:	ff e0                	jmp    *%eax
			case 0:
				attr = def_attr; break;  									/* default */
   1ae2b:	8b 54 24 18          	mov    0x18(%esp),%edx
   1ae2f:	89 d0                	mov    %edx,%eax
   1ae31:	c1 e0 03             	shl    $0x3,%eax
   1ae34:	01 d0                	add    %edx,%eax
   1ae36:	c1 e0 04             	shl    $0x4,%eax
   1ae39:	05 63 ee 03 00       	add    $0x3ee63,%eax
   1ae3e:	0f b6 08             	movzbl (%eax),%ecx
   1ae41:	8b 54 24 18          	mov    0x18(%esp),%edx
   1ae45:	89 d0                	mov    %edx,%eax
   1ae47:	c1 e0 03             	shl    $0x3,%eax
   1ae4a:	01 d0                	add    %edx,%eax
   1ae4c:	c1 e0 04             	shl    $0x4,%eax
   1ae4f:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1ae54:	88 08                	mov    %cl,(%eax)
   1ae56:	e9 78 05 00 00       	jmp    1b3d3 <csi_m+0x5e9>
			case 1:
				attr = (iscolor ? attr | 0x08 : attr | 0x0f); break;  		/* bold */
   1ae5b:	8b 54 24 18          	mov    0x18(%esp),%edx
   1ae5f:	89 d0                	mov    %edx,%eax
   1ae61:	c1 e0 03             	shl    $0x3,%eax
   1ae64:	01 d0                	add    %edx,%eax
   1ae66:	c1 e0 04             	shl    $0x4,%eax
   1ae69:	05 e8 ee 03 00       	add    $0x3eee8,%eax
   1ae6e:	8b 00                	mov    (%eax),%eax
   1ae70:	85 c0                	test   %eax,%eax
   1ae72:	74 1d                	je     1ae91 <csi_m+0xa7>
   1ae74:	8b 54 24 18          	mov    0x18(%esp),%edx
   1ae78:	89 d0                	mov    %edx,%eax
   1ae7a:	c1 e0 03             	shl    $0x3,%eax
   1ae7d:	01 d0                	add    %edx,%eax
   1ae7f:	c1 e0 04             	shl    $0x4,%eax
   1ae82:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1ae87:	0f b6 00             	movzbl (%eax),%eax
   1ae8a:	83 c8 08             	or     $0x8,%eax
   1ae8d:	89 c1                	mov    %eax,%ecx
   1ae8f:	eb 1b                	jmp    1aeac <csi_m+0xc2>
   1ae91:	8b 54 24 18          	mov    0x18(%esp),%edx
   1ae95:	89 d0                	mov    %edx,%eax
   1ae97:	c1 e0 03             	shl    $0x3,%eax
   1ae9a:	01 d0                	add    %edx,%eax
   1ae9c:	c1 e0 04             	shl    $0x4,%eax
   1ae9f:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1aea4:	0f b6 00             	movzbl (%eax),%eax
   1aea7:	83 c8 0f             	or     $0xf,%eax
   1aeaa:	89 c1                	mov    %eax,%ecx
   1aeac:	8b 54 24 18          	mov    0x18(%esp),%edx
   1aeb0:	89 d0                	mov    %edx,%eax
   1aeb2:	c1 e0 03             	shl    $0x3,%eax
   1aeb5:	01 d0                	add    %edx,%eax
   1aeb7:	c1 e0 04             	shl    $0x4,%eax
   1aeba:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1aebf:	88 08                	mov    %cl,(%eax)
   1aec1:	e9 0d 05 00 00       	jmp    1b3d3 <csi_m+0x5e9>
			/*case 4: attr=attr|0x01;break;*/  /* underline */
			case 4: 														/* bold */
			  if (!iscolor)
   1aec6:	8b 54 24 18          	mov    0x18(%esp),%edx
   1aeca:	89 d0                	mov    %edx,%eax
   1aecc:	c1 e0 03             	shl    $0x3,%eax
   1aecf:	01 d0                	add    %edx,%eax
   1aed1:	c1 e0 04             	shl    $0x4,%eax
   1aed4:	05 e8 ee 03 00       	add    $0x3eee8,%eax
   1aed9:	8b 00                	mov    (%eax),%eax
   1aedb:	85 c0                	test   %eax,%eax
   1aedd:	75 35                	jne    1af14 <csi_m+0x12a>
			    attr |= 0x01;												// 单色则带下划线显示.
   1aedf:	8b 54 24 18          	mov    0x18(%esp),%edx
   1aee3:	89 d0                	mov    %edx,%eax
   1aee5:	c1 e0 03             	shl    $0x3,%eax
   1aee8:	01 d0                	add    %edx,%eax
   1aeea:	c1 e0 04             	shl    $0x4,%eax
   1aeed:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1aef2:	0f b6 00             	movzbl (%eax),%eax
   1aef5:	83 c8 01             	or     $0x1,%eax
   1aef8:	89 c1                	mov    %eax,%ecx
   1aefa:	8b 54 24 18          	mov    0x18(%esp),%edx
   1aefe:	89 d0                	mov    %edx,%eax
   1af00:	c1 e0 03             	shl    $0x3,%eax
   1af03:	01 d0                	add    %edx,%eax
   1af05:	c1 e0 04             	shl    $0x4,%eax
   1af08:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1af0d:	88 08                	mov    %cl,(%eax)
			      	attr = ((newattr&0xf)==((attr>>4)&0xf)?
			        (attr&0xf0)|(((attr&0xf)+1)%0xf):
			        newattr);
			    }
			  }
			  break;
   1af0f:	e9 bf 04 00 00       	jmp    1b3d3 <csi_m+0x5e9>
			case 4: 														/* bold */
			  if (!iscolor)
			    attr |= 0x01;												// 单色则带下划线显示.
			  else
			  { 															/* check if forground == background */
			    if (vc_cons[currcons].vc_bold_attr != -1)
   1af14:	8b 54 24 18          	mov    0x18(%esp),%edx
   1af18:	89 d0                	mov    %edx,%eax
   1af1a:	c1 e0 03             	shl    $0x3,%eax
   1af1d:	01 d0                	add    %edx,%eax
   1af1f:	c1 e0 04             	shl    $0x4,%eax
   1af22:	05 64 ee 03 00       	add    $0x3ee64,%eax
   1af27:	8b 00                	mov    (%eax),%eax
   1af29:	83 f8 ff             	cmp    $0xffffffff,%eax
   1af2c:	74 51                	je     1af7f <csi_m+0x195>
			      attr = (vc_cons[currcons].vc_bold_attr & 0x0f) | (0xf0 & (attr));
   1af2e:	8b 54 24 18          	mov    0x18(%esp),%edx
   1af32:	89 d0                	mov    %edx,%eax
   1af34:	c1 e0 03             	shl    $0x3,%eax
   1af37:	01 d0                	add    %edx,%eax
   1af39:	c1 e0 04             	shl    $0x4,%eax
   1af3c:	05 64 ee 03 00       	add    $0x3ee64,%eax
   1af41:	8b 00                	mov    (%eax),%eax
   1af43:	83 e0 0f             	and    $0xf,%eax
   1af46:	89 c1                	mov    %eax,%ecx
   1af48:	8b 54 24 18          	mov    0x18(%esp),%edx
   1af4c:	89 d0                	mov    %edx,%eax
   1af4e:	c1 e0 03             	shl    $0x3,%eax
   1af51:	01 d0                	add    %edx,%eax
   1af53:	c1 e0 04             	shl    $0x4,%eax
   1af56:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1af5b:	0f b6 00             	movzbl (%eax),%eax
   1af5e:	83 e0 f0             	and    $0xfffffff0,%eax
   1af61:	09 c8                	or     %ecx,%eax
   1af63:	89 c1                	mov    %eax,%ecx
   1af65:	8b 54 24 18          	mov    0x18(%esp),%edx
   1af69:	89 d0                	mov    %edx,%eax
   1af6b:	c1 e0 03             	shl    $0x3,%eax
   1af6e:	01 d0                	add    %edx,%eax
   1af70:	c1 e0 04             	shl    $0x4,%eax
   1af73:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1af78:	88 08                	mov    %cl,(%eax)
			      	attr = ((newattr&0xf)==((attr>>4)&0xf)?
			        (attr&0xf0)|(((attr&0xf)+1)%0xf):
			        newattr);
			    }
			  }
			  break;
   1af7a:	e9 54 04 00 00       	jmp    1b3d3 <csi_m+0x5e9>
			  { 															/* check if forground == background */
			    if (vc_cons[currcons].vc_bold_attr != -1)
			      attr = (vc_cons[currcons].vc_bold_attr & 0x0f) | (0xf0 & (attr));
			    else
			    {
			    	short newattr = (attr&0xf0)|(0xf&(~attr));
   1af7f:	8b 54 24 18          	mov    0x18(%esp),%edx
   1af83:	89 d0                	mov    %edx,%eax
   1af85:	c1 e0 03             	shl    $0x3,%eax
   1af88:	01 d0                	add    %edx,%eax
   1af8a:	c1 e0 04             	shl    $0x4,%eax
   1af8d:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1af92:	0f b6 00             	movzbl (%eax),%eax
   1af95:	0f b6 c0             	movzbl %al,%eax
   1af98:	66 25 f0 00          	and    $0xf0,%ax
   1af9c:	89 c1                	mov    %eax,%ecx
   1af9e:	8b 54 24 18          	mov    0x18(%esp),%edx
   1afa2:	89 d0                	mov    %edx,%eax
   1afa4:	c1 e0 03             	shl    $0x3,%eax
   1afa7:	01 d0                	add    %edx,%eax
   1afa9:	c1 e0 04             	shl    $0x4,%eax
   1afac:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1afb1:	0f b6 00             	movzbl (%eax),%eax
   1afb4:	0f b6 c0             	movzbl %al,%eax
   1afb7:	f7 d0                	not    %eax
   1afb9:	83 e0 0f             	and    $0xf,%eax
   1afbc:	09 c8                	or     %ecx,%eax
   1afbe:	66 89 44 24 0a       	mov    %ax,0xa(%esp)
			      	attr = ((newattr&0xf)==((attr>>4)&0xf)?
   1afc3:	0f bf 4c 24 0a       	movswl 0xa(%esp),%ecx
   1afc8:	8b 54 24 18          	mov    0x18(%esp),%edx
   1afcc:	89 d0                	mov    %edx,%eax
   1afce:	c1 e0 03             	shl    $0x3,%eax
   1afd1:	01 d0                	add    %edx,%eax
   1afd3:	c1 e0 04             	shl    $0x4,%eax
   1afd6:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1afdb:	0f b6 00             	movzbl (%eax),%eax
   1afde:	c0 e8 04             	shr    $0x4,%al
   1afe1:	0f b6 c0             	movzbl %al,%eax
   1afe4:	31 c8                	xor    %ecx,%eax
   1afe6:	83 e0 0f             	and    $0xf,%eax
   1afe9:	85 c0                	test   %eax,%eax
   1afeb:	75 65                	jne    1b052 <csi_m+0x268>
			        (attr&0xf0)|(((attr&0xf)+1)%0xf):
   1afed:	8b 54 24 18          	mov    0x18(%esp),%edx
   1aff1:	89 d0                	mov    %edx,%eax
   1aff3:	c1 e0 03             	shl    $0x3,%eax
   1aff6:	01 d0                	add    %edx,%eax
   1aff8:	c1 e0 04             	shl    $0x4,%eax
   1affb:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b000:	0f b6 00             	movzbl (%eax),%eax
			    if (vc_cons[currcons].vc_bold_attr != -1)
			      attr = (vc_cons[currcons].vc_bold_attr & 0x0f) | (0xf0 & (attr));
			    else
			    {
			    	short newattr = (attr&0xf0)|(0xf&(~attr));
			      	attr = ((newattr&0xf)==((attr>>4)&0xf)?
   1b003:	83 e0 f0             	and    $0xfffffff0,%eax
   1b006:	89 c3                	mov    %eax,%ebx
			        (attr&0xf0)|(((attr&0xf)+1)%0xf):
   1b008:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b00c:	89 d0                	mov    %edx,%eax
   1b00e:	c1 e0 03             	shl    $0x3,%eax
   1b011:	01 d0                	add    %edx,%eax
   1b013:	c1 e0 04             	shl    $0x4,%eax
   1b016:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b01b:	0f b6 00             	movzbl (%eax),%eax
   1b01e:	0f b6 c0             	movzbl %al,%eax
   1b021:	83 e0 0f             	and    $0xf,%eax
   1b024:	8d 48 01             	lea    0x1(%eax),%ecx
   1b027:	ba 89 88 88 88       	mov    $0x88888889,%edx
   1b02c:	89 c8                	mov    %ecx,%eax
   1b02e:	f7 ea                	imul   %edx
   1b030:	8d 04 0a             	lea    (%edx,%ecx,1),%eax
   1b033:	c1 f8 03             	sar    $0x3,%eax
   1b036:	89 c2                	mov    %eax,%edx
   1b038:	89 c8                	mov    %ecx,%eax
   1b03a:	c1 f8 1f             	sar    $0x1f,%eax
   1b03d:	29 c2                	sub    %eax,%edx
   1b03f:	89 d0                	mov    %edx,%eax
   1b041:	89 c2                	mov    %eax,%edx
   1b043:	c1 e2 04             	shl    $0x4,%edx
   1b046:	29 c2                	sub    %eax,%edx
   1b048:	89 c8                	mov    %ecx,%eax
   1b04a:	29 d0                	sub    %edx,%eax
			    if (vc_cons[currcons].vc_bold_attr != -1)
			      attr = (vc_cons[currcons].vc_bold_attr & 0x0f) | (0xf0 & (attr));
			    else
			    {
			    	short newattr = (attr&0xf0)|(0xf&(~attr));
			      	attr = ((newattr&0xf)==((attr>>4)&0xf)?
   1b04c:	09 d8                	or     %ebx,%eax
   1b04e:	89 c1                	mov    %eax,%ecx
   1b050:	eb 07                	jmp    1b059 <csi_m+0x26f>
   1b052:	0f b7 44 24 0a       	movzwl 0xa(%esp),%eax
   1b057:	89 c1                	mov    %eax,%ecx
   1b059:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b05d:	89 d0                	mov    %edx,%eax
   1b05f:	c1 e0 03             	shl    $0x3,%eax
   1b062:	01 d0                	add    %edx,%eax
   1b064:	c1 e0 04             	shl    $0x4,%eax
   1b067:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b06c:	88 08                	mov    %cl,(%eax)
			        (attr&0xf0)|(((attr&0xf)+1)%0xf):
			        newattr);
			    }
			  }
			  break;
   1b06e:	e9 60 03 00 00       	jmp    1b3d3 <csi_m+0x5e9>
			// 如果Ps = 5,则把当前虚拟控制台随后显示的字符设置为闪烁,即把属性字节位7置1.
			case 5: attr = attr | 0x80; break;  							/* blinking */
   1b073:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b077:	89 d0                	mov    %edx,%eax
   1b079:	c1 e0 03             	shl    $0x3,%eax
   1b07c:	01 d0                	add    %edx,%eax
   1b07e:	c1 e0 04             	shl    $0x4,%eax
   1b081:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b086:	0f b6 00             	movzbl (%eax),%eax
   1b089:	83 c8 80             	or     $0xffffff80,%eax
   1b08c:	89 c1                	mov    %eax,%ecx
   1b08e:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b092:	89 d0                	mov    %edx,%eax
   1b094:	c1 e0 03             	shl    $0x3,%eax
   1b097:	01 d0                	add    %edx,%eax
   1b099:	c1 e0 04             	shl    $0x4,%eax
   1b09c:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b0a1:	88 08                	mov    %cl,(%eax)
   1b0a3:	e9 2b 03 00 00       	jmp    1b3d3 <csi_m+0x5e9>
			// 如果Ps = 7,则把当前虚拟控制台随后显示的字符设置为反显,即把前景色和背景色交换.
			case 7: attr = (attr << 4) | (attr >> 4); break;  				/* negative */
   1b0a8:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b0ac:	89 d0                	mov    %edx,%eax
   1b0ae:	c1 e0 03             	shl    $0x3,%eax
   1b0b1:	01 d0                	add    %edx,%eax
   1b0b3:	c1 e0 04             	shl    $0x4,%eax
   1b0b6:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b0bb:	0f b6 00             	movzbl (%eax),%eax
   1b0be:	0f b6 c0             	movzbl %al,%eax
   1b0c1:	c1 e0 04             	shl    $0x4,%eax
   1b0c4:	89 c1                	mov    %eax,%ecx
   1b0c6:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b0ca:	89 d0                	mov    %edx,%eax
   1b0cc:	c1 e0 03             	shl    $0x3,%eax
   1b0cf:	01 d0                	add    %edx,%eax
   1b0d1:	c1 e0 04             	shl    $0x4,%eax
   1b0d4:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b0d9:	0f b6 00             	movzbl (%eax),%eax
   1b0dc:	c0 e8 04             	shr    $0x4,%al
   1b0df:	09 c8                	or     %ecx,%eax
   1b0e1:	89 c1                	mov    %eax,%ecx
   1b0e3:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b0e7:	89 d0                	mov    %edx,%eax
   1b0e9:	c1 e0 03             	shl    $0x3,%eax
   1b0ec:	01 d0                	add    %edx,%eax
   1b0ee:	c1 e0 04             	shl    $0x4,%eax
   1b0f1:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b0f6:	88 08                	mov    %cl,(%eax)
   1b0f8:	e9 d6 02 00 00       	jmp    1b3d3 <csi_m+0x5e9>
			// 如果Ps = 22,则取消随后字符的高亮度显示(取消粗体显示).
			case 22: attr = attr & 0xf7; break; 							/* not bold */
   1b0fd:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b101:	89 d0                	mov    %edx,%eax
   1b103:	c1 e0 03             	shl    $0x3,%eax
   1b106:	01 d0                	add    %edx,%eax
   1b108:	c1 e0 04             	shl    $0x4,%eax
   1b10b:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b110:	0f b6 00             	movzbl (%eax),%eax
   1b113:	83 e0 f7             	and    $0xfffffff7,%eax
   1b116:	89 c1                	mov    %eax,%ecx
   1b118:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b11c:	89 d0                	mov    %edx,%eax
   1b11e:	c1 e0 03             	shl    $0x3,%eax
   1b121:	01 d0                	add    %edx,%eax
   1b123:	c1 e0 04             	shl    $0x4,%eax
   1b126:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b12b:	88 08                	mov    %cl,(%eax)
   1b12d:	e9 a1 02 00 00       	jmp    1b3d3 <csi_m+0x5e9>
			// 如果Ps = 24,则对于单色显示是取消随后字符的下划线显示,对于彩色显示取是取消绿色.
			case 24: attr = attr & 0xfe; break;  							/* not underline */
   1b132:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b136:	89 d0                	mov    %edx,%eax
   1b138:	c1 e0 03             	shl    $0x3,%eax
   1b13b:	01 d0                	add    %edx,%eax
   1b13d:	c1 e0 04             	shl    $0x4,%eax
   1b140:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b145:	0f b6 00             	movzbl (%eax),%eax
   1b148:	83 e0 fe             	and    $0xfffffffe,%eax
   1b14b:	89 c1                	mov    %eax,%ecx
   1b14d:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b151:	89 d0                	mov    %edx,%eax
   1b153:	c1 e0 03             	shl    $0x3,%eax
   1b156:	01 d0                	add    %edx,%eax
   1b158:	c1 e0 04             	shl    $0x4,%eax
   1b15b:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b160:	88 08                	mov    %cl,(%eax)
   1b162:	e9 6c 02 00 00       	jmp    1b3d3 <csi_m+0x5e9>
			// 如果Ps = 25,则取消随后字符的闪烁显示.
			case 25: attr = attr & 0x7f; break;  							/* not blinking */
   1b167:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b16b:	89 d0                	mov    %edx,%eax
   1b16d:	c1 e0 03             	shl    $0x3,%eax
   1b170:	01 d0                	add    %edx,%eax
   1b172:	c1 e0 04             	shl    $0x4,%eax
   1b175:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b17a:	0f b6 00             	movzbl (%eax),%eax
   1b17d:	83 e0 7f             	and    $0x7f,%eax
   1b180:	89 c1                	mov    %eax,%ecx
   1b182:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b186:	89 d0                	mov    %edx,%eax
   1b188:	c1 e0 03             	shl    $0x3,%eax
   1b18b:	01 d0                	add    %edx,%eax
   1b18d:	c1 e0 04             	shl    $0x4,%eax
   1b190:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b195:	88 08                	mov    %cl,(%eax)
   1b197:	e9 37 02 00 00       	jmp    1b3d3 <csi_m+0x5e9>
			// 如果Ps = 27,则取消随后字符的反显.
			case 27: attr = def_attr; break; 								/* positive image */
   1b19c:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b1a0:	89 d0                	mov    %edx,%eax
   1b1a2:	c1 e0 03             	shl    $0x3,%eax
   1b1a5:	01 d0                	add    %edx,%eax
   1b1a7:	c1 e0 04             	shl    $0x4,%eax
   1b1aa:	05 63 ee 03 00       	add    $0x3ee63,%eax
   1b1af:	0f b6 08             	movzbl (%eax),%ecx
   1b1b2:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b1b6:	89 d0                	mov    %edx,%eax
   1b1b8:	c1 e0 03             	shl    $0x3,%eax
   1b1bb:	01 d0                	add    %edx,%eax
   1b1bd:	c1 e0 04             	shl    $0x4,%eax
   1b1c0:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b1c5:	88 08                	mov    %cl,(%eax)
   1b1c7:	e9 07 02 00 00       	jmp    1b3d3 <csi_m+0x5e9>
			// 如果Ps = 39,则复位随后字符的前景色为默认前景色(白色).
			case 39: attr = (attr & 0xf0) | (def_attr & 0x0f); break;
   1b1cc:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b1d0:	89 d0                	mov    %edx,%eax
   1b1d2:	c1 e0 03             	shl    $0x3,%eax
   1b1d5:	01 d0                	add    %edx,%eax
   1b1d7:	c1 e0 04             	shl    $0x4,%eax
   1b1da:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b1df:	0f b6 00             	movzbl (%eax),%eax
   1b1e2:	83 e0 f0             	and    $0xfffffff0,%eax
   1b1e5:	89 c1                	mov    %eax,%ecx
   1b1e7:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b1eb:	89 d0                	mov    %edx,%eax
   1b1ed:	c1 e0 03             	shl    $0x3,%eax
   1b1f0:	01 d0                	add    %edx,%eax
   1b1f2:	c1 e0 04             	shl    $0x4,%eax
   1b1f5:	05 63 ee 03 00       	add    $0x3ee63,%eax
   1b1fa:	0f b6 00             	movzbl (%eax),%eax
   1b1fd:	83 e0 0f             	and    $0xf,%eax
   1b200:	09 c8                	or     %ecx,%eax
   1b202:	89 c1                	mov    %eax,%ecx
   1b204:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b208:	89 d0                	mov    %edx,%eax
   1b20a:	c1 e0 03             	shl    $0x3,%eax
   1b20d:	01 d0                	add    %edx,%eax
   1b20f:	c1 e0 04             	shl    $0x4,%eax
   1b212:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b217:	88 08                	mov    %cl,(%eax)
   1b219:	e9 b5 01 00 00       	jmp    1b3d3 <csi_m+0x5e9>
			// 如果Ps = 49,则复位随后字符的背景色为默认背景色(黑色).
			case 49: attr = (attr & 0x0f) | (def_attr & 0xf0); break;
   1b21e:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b222:	89 d0                	mov    %edx,%eax
   1b224:	c1 e0 03             	shl    $0x3,%eax
   1b227:	01 d0                	add    %edx,%eax
   1b229:	c1 e0 04             	shl    $0x4,%eax
   1b22c:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b231:	0f b6 00             	movzbl (%eax),%eax
   1b234:	83 e0 0f             	and    $0xf,%eax
   1b237:	89 c1                	mov    %eax,%ecx
   1b239:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b23d:	89 d0                	mov    %edx,%eax
   1b23f:	c1 e0 03             	shl    $0x3,%eax
   1b242:	01 d0                	add    %edx,%eax
   1b244:	c1 e0 04             	shl    $0x4,%eax
   1b247:	05 63 ee 03 00       	add    $0x3ee63,%eax
   1b24c:	0f b6 00             	movzbl (%eax),%eax
   1b24f:	83 e0 f0             	and    $0xfffffff0,%eax
   1b252:	09 c8                	or     %ecx,%eax
   1b254:	89 c1                	mov    %eax,%ecx
   1b256:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b25a:	89 d0                	mov    %edx,%eax
   1b25c:	c1 e0 03             	shl    $0x3,%eax
   1b25f:	01 d0                	add    %edx,%eax
   1b261:	c1 e0 04             	shl    $0x4,%eax
   1b264:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b269:	88 08                	mov    %cl,(%eax)
   1b26b:	e9 63 01 00 00       	jmp    1b3d3 <csi_m+0x5e9>
			// 当Ps(par[i])为其他值时,则是设置指定的前景色或背景色.如果Ps = 30..37,则是设置前景色;如果Ps=40..47,则是设置背景色.
			default:
			  if (!can_do_colour)
   1b270:	a1 50 ee 03 00       	mov    0x3ee50,%eax
   1b275:	85 c0                	test   %eax,%eax
   1b277:	0f 84 55 01 00 00    	je     1b3d2 <csi_m+0x5e8>
			    break;
			  iscolor = 1;
   1b27d:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b281:	89 d0                	mov    %edx,%eax
   1b283:	c1 e0 03             	shl    $0x3,%eax
   1b286:	01 d0                	add    %edx,%eax
   1b288:	c1 e0 04             	shl    $0x4,%eax
   1b28b:	05 e8 ee 03 00       	add    $0x3eee8,%eax
   1b290:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
			  if ((par[i] >= 30) && (par[i] <= 38))		 					// 设置前景色.
   1b296:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b29a:	89 d0                	mov    %edx,%eax
   1b29c:	c1 e0 03             	shl    $0x3,%eax
   1b29f:	01 d0                	add    %edx,%eax
   1b2a1:	c1 e0 02             	shl    $0x2,%eax
   1b2a4:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1b2a8:	01 d0                	add    %edx,%eax
   1b2aa:	83 c0 0c             	add    $0xc,%eax
   1b2ad:	8b 04 85 68 ee 03 00 	mov    0x3ee68(,%eax,4),%eax
   1b2b4:	83 f8 1d             	cmp    $0x1d,%eax
   1b2b7:	76 7b                	jbe    1b334 <csi_m+0x54a>
   1b2b9:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b2bd:	89 d0                	mov    %edx,%eax
   1b2bf:	c1 e0 03             	shl    $0x3,%eax
   1b2c2:	01 d0                	add    %edx,%eax
   1b2c4:	c1 e0 02             	shl    $0x2,%eax
   1b2c7:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1b2cb:	01 d0                	add    %edx,%eax
   1b2cd:	83 c0 0c             	add    $0xc,%eax
   1b2d0:	8b 04 85 68 ee 03 00 	mov    0x3ee68(,%eax,4),%eax
   1b2d7:	83 f8 26             	cmp    $0x26,%eax
   1b2da:	77 58                	ja     1b334 <csi_m+0x54a>
			    attr = (attr & 0xf0) | (par[i] - 30);
   1b2dc:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b2e0:	89 d0                	mov    %edx,%eax
   1b2e2:	c1 e0 03             	shl    $0x3,%eax
   1b2e5:	01 d0                	add    %edx,%eax
   1b2e7:	c1 e0 04             	shl    $0x4,%eax
   1b2ea:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b2ef:	0f b6 00             	movzbl (%eax),%eax
   1b2f2:	83 e0 f0             	and    $0xfffffff0,%eax
   1b2f5:	89 c1                	mov    %eax,%ecx
   1b2f7:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b2fb:	89 d0                	mov    %edx,%eax
   1b2fd:	c1 e0 03             	shl    $0x3,%eax
   1b300:	01 d0                	add    %edx,%eax
   1b302:	c1 e0 02             	shl    $0x2,%eax
   1b305:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1b309:	01 d0                	add    %edx,%eax
   1b30b:	83 c0 0c             	add    $0xc,%eax
   1b30e:	8b 04 85 68 ee 03 00 	mov    0x3ee68(,%eax,4),%eax
   1b315:	83 e8 1e             	sub    $0x1e,%eax
   1b318:	09 c1                	or     %eax,%ecx
   1b31a:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b31e:	89 d0                	mov    %edx,%eax
   1b320:	c1 e0 03             	shl    $0x3,%eax
   1b323:	01 d0                	add    %edx,%eax
   1b325:	c1 e0 04             	shl    $0x4,%eax
   1b328:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b32d:	88 08                	mov    %cl,(%eax)
   1b32f:	e9 9f 00 00 00       	jmp    1b3d3 <csi_m+0x5e9>
			  else  														/* Background color */			 // 设置背景色.
			    if ((par[i] >= 40) && (par[i] <= 48))
   1b334:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b338:	89 d0                	mov    %edx,%eax
   1b33a:	c1 e0 03             	shl    $0x3,%eax
   1b33d:	01 d0                	add    %edx,%eax
   1b33f:	c1 e0 02             	shl    $0x2,%eax
   1b342:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1b346:	01 d0                	add    %edx,%eax
   1b348:	83 c0 0c             	add    $0xc,%eax
   1b34b:	8b 04 85 68 ee 03 00 	mov    0x3ee68(,%eax,4),%eax
   1b352:	83 f8 27             	cmp    $0x27,%eax
   1b355:	76 7c                	jbe    1b3d3 <csi_m+0x5e9>
   1b357:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b35b:	89 d0                	mov    %edx,%eax
   1b35d:	c1 e0 03             	shl    $0x3,%eax
   1b360:	01 d0                	add    %edx,%eax
   1b362:	c1 e0 02             	shl    $0x2,%eax
   1b365:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1b369:	01 d0                	add    %edx,%eax
   1b36b:	83 c0 0c             	add    $0xc,%eax
   1b36e:	8b 04 85 68 ee 03 00 	mov    0x3ee68(,%eax,4),%eax
   1b375:	83 f8 30             	cmp    $0x30,%eax
   1b378:	77 59                	ja     1b3d3 <csi_m+0x5e9>
			      attr = (attr & 0x0f) | ((par[i] - 40) << 4);
   1b37a:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b37e:	89 d0                	mov    %edx,%eax
   1b380:	c1 e0 03             	shl    $0x3,%eax
   1b383:	01 d0                	add    %edx,%eax
   1b385:	c1 e0 04             	shl    $0x4,%eax
   1b388:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b38d:	0f b6 00             	movzbl (%eax),%eax
   1b390:	83 e0 0f             	and    $0xf,%eax
   1b393:	89 c1                	mov    %eax,%ecx
   1b395:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b399:	89 d0                	mov    %edx,%eax
   1b39b:	c1 e0 03             	shl    $0x3,%eax
   1b39e:	01 d0                	add    %edx,%eax
   1b3a0:	c1 e0 02             	shl    $0x2,%eax
   1b3a3:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1b3a7:	01 d0                	add    %edx,%eax
   1b3a9:	83 c0 0c             	add    $0xc,%eax
   1b3ac:	8b 04 85 68 ee 03 00 	mov    0x3ee68(,%eax,4),%eax
   1b3b3:	83 e8 28             	sub    $0x28,%eax
   1b3b6:	c1 e0 04             	shl    $0x4,%eax
   1b3b9:	09 c1                	or     %eax,%ecx
   1b3bb:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b3bf:	89 d0                	mov    %edx,%eax
   1b3c1:	c1 e0 03             	shl    $0x3,%eax
   1b3c4:	01 d0                	add    %edx,%eax
   1b3c6:	c1 e0 04             	shl    $0x4,%eax
   1b3c9:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1b3ce:	88 08                	mov    %cl,(%eax)
   1b3d0:	eb 01                	jmp    1b3d3 <csi_m+0x5e9>
			// 如果Ps = 49,则复位随后字符的背景色为默认背景色(黑色).
			case 49: attr = (attr & 0x0f) | (def_attr & 0xf0); break;
			// 当Ps(par[i])为其他值时,则是设置指定的前景色或背景色.如果Ps = 30..37,则是设置前景色;如果Ps=40..47,则是设置背景色.
			default:
			  if (!can_do_colour)
			    break;
   1b3d2:	90                   	nop
	// 如果Ps = 0,则把当前虚拟控制台随后显示的字符属性设置为默认属性def_attr.初始化时def_attr已被设置成0x07(黑底白字).
	// 如果Ps = 1,则把当前虚拟控制台随后显示的字符属性设置为粗体或增亮显示.如果是彩色显示,则把字符属性或上0x08让字符高亮度显示;如果是单色显示,
	// 则让人带下划线显示.
	// 如果ps = 4,则对彩色和单色显示进行不同的处理.若此时不是彩色显示方式,则让字符带下划线显示.如果是彩色显示,那么若原来vc_bold_attr不等于-1
	// 时就复位其背景色;否则的话就把背景色取反.若取反后前景色与背景色相同,就把前景色增1而取另一种颜色.
	for (i = 0; i <= npar; i++)
   1b3d3:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   1b3d8:	8b 54 24 18          	mov    0x18(%esp),%edx
   1b3dc:	89 d0                	mov    %edx,%eax
   1b3de:	c1 e0 03             	shl    $0x3,%eax
   1b3e1:	01 d0                	add    %edx,%eax
   1b3e3:	c1 e0 04             	shl    $0x4,%eax
   1b3e6:	05 94 ee 03 00       	add    $0x3ee94,%eax
   1b3eb:	8b 10                	mov    (%eax),%edx
   1b3ed:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1b3f1:	39 c2                	cmp    %eax,%edx
   1b3f3:	0f 83 02 fa ff ff    	jae    1adfb <csi_m+0x11>
			    if ((par[i] >= 40) && (par[i] <= 48))
			      attr = (attr & 0x0f) | ((par[i] - 40) << 4);
			    else
					break;
		}
}
   1b3f9:	90                   	nop
   1b3fa:	83 c4 10             	add    $0x10,%esp
   1b3fd:	5b                   	pop    %ebx
   1b3fe:	c3                   	ret    

0001b3ff <set_cursor>:
// 根据光标对应显示内存位置pos,设置显示控制器光标的显示位置.
static inline void set_cursor(int currcons)
{
	// 既然我们需要设置显示光标,说明有键盘操作,因此需要恢复进行黑屏操作的延时计数值.
	// 另外,显示光标的控制台必须是当前控制台,因此若当前处理的台号currocons不是前台控制台就立刻返回.
	blankcount = blankinterval;						// 复位黑屏操作的计数值.
   1b3ff:	a1 24 ee 03 00       	mov    0x3ee24,%eax
   1b404:	a3 28 ee 03 00       	mov    %eax,0x3ee28
	if (currcons != fg_console)
   1b409:	a1 80 12 03 00       	mov    0x31280,%eax
   1b40e:	39 44 24 04          	cmp    %eax,0x4(%esp)
   1b412:	0f 85 85 00 00 00    	jne    1b49d <set_cursor+0x9e>
		return;
	// 然后使用索引寄存器端口选择显示控制数据寄存器r14(光标当前显示位置高字节),接着写入光标当前位置高字节(向右移动9位表示高字节移到低字节再除以2),
	// 相对于默认显示内存操作的.再使用索引寄存器选择r15,并将光标当前位置低字节写入其中.
	cli();
   1b418:	fa                   	cli    
	outb_p(14, video_port_reg);
   1b419:	0f b7 15 4a ee 03 00 	movzwl 0x3ee4a,%edx
   1b420:	b8 0e 00 00 00       	mov    $0xe,%eax
   1b425:	ee                   	out    %al,(%dx)
   1b426:	eb 00                	jmp    1b428 <set_cursor+0x29>
   1b428:	eb 00                	jmp    1b42a <set_cursor+0x2b>
	outb_p(0xff & ((pos - video_mem_base) >> 9), video_port_val);
   1b42a:	8b 54 24 04          	mov    0x4(%esp),%edx
   1b42e:	89 d0                	mov    %edx,%eax
   1b430:	c1 e0 03             	shl    $0x3,%eax
   1b433:	01 d0                	add    %edx,%eax
   1b435:	c1 e0 04             	shl    $0x4,%eax
   1b438:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1b43d:	8b 10                	mov    (%eax),%edx
   1b43f:	a1 38 ee 03 00       	mov    0x3ee38,%eax
   1b444:	29 c2                	sub    %eax,%edx
   1b446:	89 d0                	mov    %edx,%eax
   1b448:	c1 e8 09             	shr    $0x9,%eax
   1b44b:	0f b6 c0             	movzbl %al,%eax
   1b44e:	0f b7 15 4c ee 03 00 	movzwl 0x3ee4c,%edx
   1b455:	ee                   	out    %al,(%dx)
   1b456:	eb 00                	jmp    1b458 <set_cursor+0x59>
   1b458:	eb 00                	jmp    1b45a <set_cursor+0x5b>
	outb_p(15, video_port_reg);
   1b45a:	0f b7 15 4a ee 03 00 	movzwl 0x3ee4a,%edx
   1b461:	b8 0f 00 00 00       	mov    $0xf,%eax
   1b466:	ee                   	out    %al,(%dx)
   1b467:	eb 00                	jmp    1b469 <set_cursor+0x6a>
   1b469:	eb 00                	jmp    1b46b <set_cursor+0x6c>
	outb_p(0xff & ((pos - video_mem_base) >> 1), video_port_val);
   1b46b:	8b 54 24 04          	mov    0x4(%esp),%edx
   1b46f:	89 d0                	mov    %edx,%eax
   1b471:	c1 e0 03             	shl    $0x3,%eax
   1b474:	01 d0                	add    %edx,%eax
   1b476:	c1 e0 04             	shl    $0x4,%eax
   1b479:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1b47e:	8b 10                	mov    (%eax),%edx
   1b480:	a1 38 ee 03 00       	mov    0x3ee38,%eax
   1b485:	29 c2                	sub    %eax,%edx
   1b487:	89 d0                	mov    %edx,%eax
   1b489:	d1 e8                	shr    %eax
   1b48b:	0f b6 c0             	movzbl %al,%eax
   1b48e:	0f b7 15 4c ee 03 00 	movzwl 0x3ee4c,%edx
   1b495:	ee                   	out    %al,(%dx)
   1b496:	eb 00                	jmp    1b498 <set_cursor+0x99>
   1b498:	eb 00                	jmp    1b49a <set_cursor+0x9b>
	sti();
   1b49a:	fb                   	sti    
   1b49b:	eb 01                	jmp    1b49e <set_cursor+0x9f>
{
	// 既然我们需要设置显示光标,说明有键盘操作,因此需要恢复进行黑屏操作的延时计数值.
	// 另外,显示光标的控制台必须是当前控制台,因此若当前处理的台号currocons不是前台控制台就立刻返回.
	blankcount = blankinterval;						// 复位黑屏操作的计数值.
	if (currcons != fg_console)
		return;
   1b49d:	90                   	nop
	outb_p(14, video_port_reg);
	outb_p(0xff & ((pos - video_mem_base) >> 9), video_port_val);
	outb_p(15, video_port_reg);
	outb_p(0xff & ((pos - video_mem_base) >> 1), video_port_val);
	sti();
}
   1b49e:	c3                   	ret    

0001b49f <respond>:
// 发送对VT100的响应序列.
// 即为响应主机请求终端向主机发送设备属性(DA).主机通过发送不带参数或参数是0的DA控制序列('ESC [ 0c'或'ESC Z']要求终端发送一个设备属性(DA)控制
// 序列,终端则发送第85行上定义的应答序列(即'ESC [?];2c']来主机的序列,该序列告诉主机本终端是具有高级视频功能的VT100兼容终端.处理过程是将应答序列
// 放入读缓冲队列中,并使用copy_to_cooked()函数处理后放入辅助队列中.
static void respond(int currcons, struct tty_struct * tty)
{
   1b49f:	83 ec 1c             	sub    $0x1c,%esp
	char * p = RESPONSE;
   1b4a2:	c7 44 24 0c 54 4d 02 	movl   $0x24d54,0xc(%esp)
   1b4a9:	00 

	cli();
   1b4aa:	fa                   	cli    
	while (*p) {									// 将应答序列放入读队列.
   1b4ab:	eb 3e                	jmp    1b4eb <respond+0x4c>
		PUTCH(*p, tty->read_q);						// 逐字符放入.include/linux/tty.h
   1b4ad:	8b 44 24 24          	mov    0x24(%esp),%eax
   1b4b1:	8b 50 34             	mov    0x34(%eax),%edx
   1b4b4:	8b 44 24 24          	mov    0x24(%esp),%eax
   1b4b8:	8b 40 34             	mov    0x34(%eax),%eax
   1b4bb:	8b 40 04             	mov    0x4(%eax),%eax
   1b4be:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   1b4c2:	0f b6 09             	movzbl (%ecx),%ecx
   1b4c5:	88 4c 02 10          	mov    %cl,0x10(%edx,%eax,1)
   1b4c9:	8b 44 24 24          	mov    0x24(%esp),%eax
   1b4cd:	8b 40 34             	mov    0x34(%eax),%eax
   1b4d0:	8b 54 24 24          	mov    0x24(%esp),%edx
   1b4d4:	8b 52 34             	mov    0x34(%edx),%edx
   1b4d7:	8b 52 04             	mov    0x4(%edx),%edx
   1b4da:	83 c2 01             	add    $0x1,%edx
   1b4dd:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   1b4e3:	89 50 04             	mov    %edx,0x4(%eax)
		p++;
   1b4e6:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
static void respond(int currcons, struct tty_struct * tty)
{
	char * p = RESPONSE;

	cli();
	while (*p) {									// 将应答序列放入读队列.
   1b4eb:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1b4ef:	0f b6 00             	movzbl (%eax),%eax
   1b4f2:	84 c0                	test   %al,%al
   1b4f4:	75 b7                	jne    1b4ad <respond+0xe>
		PUTCH(*p, tty->read_q);						// 逐字符放入.include/linux/tty.h
		p++;
	}
	sti();
   1b4f6:	fb                   	sti    
	copy_to_cooked(tty);							// 转换成规范模式(放入辅助队列中).tty_io.c
   1b4f7:	83 ec 0c             	sub    $0xc,%esp
   1b4fa:	ff 74 24 30          	pushl  0x30(%esp)
   1b4fe:	e8 2a d6 ff ff       	call   18b2d <copy_to_cooked>
   1b503:	83 c4 10             	add    $0x10,%esp
}
   1b506:	90                   	nop
   1b507:	83 c4 1c             	add    $0x1c,%esp
   1b50a:	c3                   	ret    

0001b50b <insert_char>:

// 在光标处插入一空格字符.
// 把光标开始处的所有字符右移一格,并将擦除字符插入在光标所在处.
static void insert_char(int currcons)
{
   1b50b:	83 ec 10             	sub    $0x10,%esp
	int i = x;
   1b50e:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b512:	89 d0                	mov    %edx,%eax
   1b514:	c1 e0 03             	shl    $0x3,%eax
   1b517:	01 d0                	add    %edx,%eax
   1b519:	c1 e0 04             	shl    $0x4,%eax
   1b51c:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1b521:	8b 00                	mov    (%eax),%eax
   1b523:	89 44 24 0c          	mov    %eax,0xc(%esp)
	unsigned short tmp, old = video_erase_char;		// 擦除字符(加属性)
   1b527:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b52b:	89 d0                	mov    %edx,%eax
   1b52d:	c1 e0 03             	shl    $0x3,%eax
   1b530:	01 d0                	add    %edx,%eax
   1b532:	c1 e0 04             	shl    $0x4,%eax
   1b535:	05 60 ee 03 00       	add    $0x3ee60,%eax
   1b53a:	0f b7 00             	movzwl (%eax),%eax
   1b53d:	66 89 44 24 0a       	mov    %ax,0xa(%esp)
	unsigned short * p = (unsigned short *) pos;	// 光标对应内存位置.
   1b542:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b546:	89 d0                	mov    %edx,%eax
   1b548:	c1 e0 03             	shl    $0x3,%eax
   1b54b:	01 d0                	add    %edx,%eax
   1b54d:	c1 e0 04             	shl    $0x4,%eax
   1b550:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1b555:	8b 00                	mov    (%eax),%eax
   1b557:	89 44 24 04          	mov    %eax,0x4(%esp)

	while (i++ < video_num_columns) {
   1b55b:	eb 27                	jmp    1b584 <insert_char+0x79>
		tmp = *p;
   1b55d:	8b 44 24 04          	mov    0x4(%esp),%eax
   1b561:	0f b7 00             	movzwl (%eax),%eax
   1b564:	66 89 44 24 02       	mov    %ax,0x2(%esp)
		*p = old;
   1b569:	8b 44 24 04          	mov    0x4(%esp),%eax
   1b56d:	0f b7 54 24 0a       	movzwl 0xa(%esp),%edx
   1b572:	66 89 10             	mov    %dx,(%eax)
		old = tmp;
   1b575:	0f b7 44 24 02       	movzwl 0x2(%esp),%eax
   1b57a:	66 89 44 24 0a       	mov    %ax,0xa(%esp)
		p++;
   1b57f:	83 44 24 04 02       	addl   $0x2,0x4(%esp)
{
	int i = x;
	unsigned short tmp, old = video_erase_char;		// 擦除字符(加属性)
	unsigned short * p = (unsigned short *) pos;	// 光标对应内存位置.

	while (i++ < video_num_columns) {
   1b584:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1b588:	8d 50 01             	lea    0x1(%eax),%edx
   1b58b:	89 54 24 0c          	mov    %edx,0xc(%esp)
   1b58f:	89 c2                	mov    %eax,%edx
   1b591:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1b596:	39 c2                	cmp    %eax,%edx
   1b598:	72 c3                	jb     1b55d <insert_char+0x52>
		tmp = *p;
		*p = old;
		old = tmp;
		p++;
	}
}
   1b59a:	90                   	nop
   1b59b:	83 c4 10             	add    $0x10,%esp
   1b59e:	c3                   	ret    

0001b59f <insert_line>:

// 在光标处插入一行.
// 将屏幕窗口从光标所在行到窗口底的内容向下卷动一行.光标将处在新的空行上.
static void insert_line(int currcons)
{
   1b59f:	83 ec 10             	sub    $0x10,%esp
	int oldtop, oldbottom;

	// 首先保存屏幕窗口卷动开始行top和最后行bottom值,然后从光标所在行让屏幕内容向下滚动一行.最后恢复屏幕窗口卷动开始行top和最后行bottom
	// 的原来值.
	oldtop = top;
   1b5a2:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b5a6:	89 d0                	mov    %edx,%eax
   1b5a8:	c1 e0 03             	shl    $0x3,%eax
   1b5ab:	01 d0                	add    %edx,%eax
   1b5ad:	c1 e0 04             	shl    $0x4,%eax
   1b5b0:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1b5b5:	8b 00                	mov    (%eax),%eax
   1b5b7:	89 44 24 0c          	mov    %eax,0xc(%esp)
	oldbottom = bottom;
   1b5bb:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b5bf:	89 d0                	mov    %edx,%eax
   1b5c1:	c1 e0 03             	shl    $0x3,%eax
   1b5c4:	01 d0                	add    %edx,%eax
   1b5c6:	c1 e0 04             	shl    $0x4,%eax
   1b5c9:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1b5ce:	8b 00                	mov    (%eax),%eax
   1b5d0:	89 44 24 08          	mov    %eax,0x8(%esp)
	top = y;										// 设置屏幕卷动开始行和结束行.
   1b5d4:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b5d8:	89 d0                	mov    %edx,%eax
   1b5da:	c1 e0 03             	shl    $0x3,%eax
   1b5dd:	01 d0                	add    %edx,%eax
   1b5df:	c1 e0 04             	shl    $0x4,%eax
   1b5e2:	05 88 ee 03 00       	add    $0x3ee88,%eax
   1b5e7:	8b 08                	mov    (%eax),%ecx
   1b5e9:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b5ed:	89 d0                	mov    %edx,%eax
   1b5ef:	c1 e0 03             	shl    $0x3,%eax
   1b5f2:	01 d0                	add    %edx,%eax
   1b5f4:	c1 e0 04             	shl    $0x4,%eax
   1b5f7:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1b5fc:	89 08                	mov    %ecx,(%eax)
	bottom = video_num_lines;
   1b5fe:	8b 0d 44 ee 03 00    	mov    0x3ee44,%ecx
   1b604:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b608:	89 d0                	mov    %edx,%eax
   1b60a:	c1 e0 03             	shl    $0x3,%eax
   1b60d:	01 d0                	add    %edx,%eax
   1b60f:	c1 e0 04             	shl    $0x4,%eax
   1b612:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1b617:	89 08                	mov    %ecx,(%eax)
	scrdown(currcons);								// 从光标开始处,屏幕内容向下滚动一行.
   1b619:	ff 74 24 14          	pushl  0x14(%esp)
   1b61d:	e8 1d f1 ff ff       	call   1a73f <scrdown>
   1b622:	83 c4 04             	add    $0x4,%esp
	top = oldtop;
   1b625:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   1b629:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b62d:	89 d0                	mov    %edx,%eax
   1b62f:	c1 e0 03             	shl    $0x3,%eax
   1b632:	01 d0                	add    %edx,%eax
   1b634:	c1 e0 04             	shl    $0x4,%eax
   1b637:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1b63c:	89 08                	mov    %ecx,(%eax)
	bottom = oldbottom;
   1b63e:	8b 4c 24 08          	mov    0x8(%esp),%ecx
   1b642:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b646:	89 d0                	mov    %edx,%eax
   1b648:	c1 e0 03             	shl    $0x3,%eax
   1b64b:	01 d0                	add    %edx,%eax
   1b64d:	c1 e0 04             	shl    $0x4,%eax
   1b650:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1b655:	89 08                	mov    %ecx,(%eax)
}
   1b657:	90                   	nop
   1b658:	83 c4 10             	add    $0x10,%esp
   1b65b:	c3                   	ret    

0001b65c <delete_char>:

// 删除一个字符
// 删除光标处的一个字符,光标右边的所有字符左移一格.
static void delete_char(int currcons)
{
   1b65c:	83 ec 10             	sub    $0x10,%esp
	int i;
	unsigned short * p = (unsigned short *) pos;
   1b65f:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b663:	89 d0                	mov    %edx,%eax
   1b665:	c1 e0 03             	shl    $0x3,%eax
   1b668:	01 d0                	add    %edx,%eax
   1b66a:	c1 e0 04             	shl    $0x4,%eax
   1b66d:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1b672:	8b 00                	mov    (%eax),%eax
   1b674:	89 44 24 08          	mov    %eax,0x8(%esp)

	// 如果光标的当前列位置x走出屏幕最右列,则返回.否则从光标右一个字符开始到行末所有字符左移一格.然后在最后一个字符处填入擦除字符.
	if (x >= video_num_columns)
   1b678:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b67c:	89 d0                	mov    %edx,%eax
   1b67e:	c1 e0 03             	shl    $0x3,%eax
   1b681:	01 d0                	add    %edx,%eax
   1b683:	c1 e0 04             	shl    $0x4,%eax
   1b686:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1b68b:	8b 10                	mov    (%eax),%edx
   1b68d:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1b692:	39 c2                	cmp    %eax,%edx
   1b694:	73 60                	jae    1b6f6 <delete_char+0x9a>
		return;
	i = x;
   1b696:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b69a:	89 d0                	mov    %edx,%eax
   1b69c:	c1 e0 03             	shl    $0x3,%eax
   1b69f:	01 d0                	add    %edx,%eax
   1b6a1:	c1 e0 04             	shl    $0x4,%eax
   1b6a4:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1b6a9:	8b 00                	mov    (%eax),%eax
   1b6ab:	89 44 24 0c          	mov    %eax,0xc(%esp)
	while (++i < video_num_columns) {				// 光标右所有字符左移1格.
   1b6af:	eb 14                	jmp    1b6c5 <delete_char+0x69>
		*p = *(p + 1);
   1b6b1:	8b 44 24 08          	mov    0x8(%esp),%eax
   1b6b5:	0f b7 50 02          	movzwl 0x2(%eax),%edx
   1b6b9:	8b 44 24 08          	mov    0x8(%esp),%eax
   1b6bd:	66 89 10             	mov    %dx,(%eax)
		p++;
   1b6c0:	83 44 24 08 02       	addl   $0x2,0x8(%esp)

	// 如果光标的当前列位置x走出屏幕最右列,则返回.否则从光标右一个字符开始到行末所有字符左移一格.然后在最后一个字符处填入擦除字符.
	if (x >= video_num_columns)
		return;
	i = x;
	while (++i < video_num_columns) {				// 光标右所有字符左移1格.
   1b6c5:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   1b6ca:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1b6ce:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1b6d3:	39 c2                	cmp    %eax,%edx
   1b6d5:	72 da                	jb     1b6b1 <delete_char+0x55>
		*p = *(p + 1);
		p++;
	}
	*p = video_erase_char;							// 最后填入擦除字符.
   1b6d7:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b6db:	89 d0                	mov    %edx,%eax
   1b6dd:	c1 e0 03             	shl    $0x3,%eax
   1b6e0:	01 d0                	add    %edx,%eax
   1b6e2:	c1 e0 04             	shl    $0x4,%eax
   1b6e5:	05 60 ee 03 00       	add    $0x3ee60,%eax
   1b6ea:	0f b7 10             	movzwl (%eax),%edx
   1b6ed:	8b 44 24 08          	mov    0x8(%esp),%eax
   1b6f1:	66 89 10             	mov    %dx,(%eax)
   1b6f4:	eb 01                	jmp    1b6f7 <delete_char+0x9b>
	int i;
	unsigned short * p = (unsigned short *) pos;

	// 如果光标的当前列位置x走出屏幕最右列,则返回.否则从光标右一个字符开始到行末所有字符左移一格.然后在最后一个字符处填入擦除字符.
	if (x >= video_num_columns)
		return;
   1b6f6:	90                   	nop
	while (++i < video_num_columns) {				// 光标右所有字符左移1格.
		*p = *(p + 1);
		p++;
	}
	*p = video_erase_char;							// 最后填入擦除字符.
}
   1b6f7:	83 c4 10             	add    $0x10,%esp
   1b6fa:	c3                   	ret    

0001b6fb <delete_line>:

// 删除光标所在行
// 删除光标所在的一行,并从光标所在行开始屏幕内容上巻一行.
static void delete_line(int currcons)
{
   1b6fb:	83 ec 10             	sub    $0x10,%esp
	int oldtop, oldbottom;

	// 首先保存屏幕窗口卷动开始行top和最后行bottom值,然后从光标所在行让屏幕内容向上滚动一行.最后恢复屏幕窗口卷动开始行top和最后行bottom
	// 的原来值.
	oldtop = top;
   1b6fe:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b702:	89 d0                	mov    %edx,%eax
   1b704:	c1 e0 03             	shl    $0x3,%eax
   1b707:	01 d0                	add    %edx,%eax
   1b709:	c1 e0 04             	shl    $0x4,%eax
   1b70c:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1b711:	8b 00                	mov    (%eax),%eax
   1b713:	89 44 24 0c          	mov    %eax,0xc(%esp)
	oldbottom = bottom;
   1b717:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b71b:	89 d0                	mov    %edx,%eax
   1b71d:	c1 e0 03             	shl    $0x3,%eax
   1b720:	01 d0                	add    %edx,%eax
   1b722:	c1 e0 04             	shl    $0x4,%eax
   1b725:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1b72a:	8b 00                	mov    (%eax),%eax
   1b72c:	89 44 24 08          	mov    %eax,0x8(%esp)
	top = y;										// 设置屏幕卷动开始行和最后行.
   1b730:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b734:	89 d0                	mov    %edx,%eax
   1b736:	c1 e0 03             	shl    $0x3,%eax
   1b739:	01 d0                	add    %edx,%eax
   1b73b:	c1 e0 04             	shl    $0x4,%eax
   1b73e:	05 88 ee 03 00       	add    $0x3ee88,%eax
   1b743:	8b 08                	mov    (%eax),%ecx
   1b745:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b749:	89 d0                	mov    %edx,%eax
   1b74b:	c1 e0 03             	shl    $0x3,%eax
   1b74e:	01 d0                	add    %edx,%eax
   1b750:	c1 e0 04             	shl    $0x4,%eax
   1b753:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1b758:	89 08                	mov    %ecx,(%eax)
	bottom = video_num_lines;
   1b75a:	8b 0d 44 ee 03 00    	mov    0x3ee44,%ecx
   1b760:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b764:	89 d0                	mov    %edx,%eax
   1b766:	c1 e0 03             	shl    $0x3,%eax
   1b769:	01 d0                	add    %edx,%eax
   1b76b:	c1 e0 04             	shl    $0x4,%eax
   1b76e:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1b773:	89 08                	mov    %ecx,(%eax)
	scrup(currcons);								// 从光标开始处,屏幕内容向上滚动一行.
   1b775:	ff 74 24 14          	pushl  0x14(%esp)
   1b779:	e8 2a eb ff ff       	call   1a2a8 <scrup>
   1b77e:	83 c4 04             	add    $0x4,%esp
	top = oldtop;
   1b781:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   1b785:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b789:	89 d0                	mov    %edx,%eax
   1b78b:	c1 e0 03             	shl    $0x3,%eax
   1b78e:	01 d0                	add    %edx,%eax
   1b790:	c1 e0 04             	shl    $0x4,%eax
   1b793:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1b798:	89 08                	mov    %ecx,(%eax)
	bottom = oldbottom;
   1b79a:	8b 4c 24 08          	mov    0x8(%esp),%ecx
   1b79e:	8b 54 24 14          	mov    0x14(%esp),%edx
   1b7a2:	89 d0                	mov    %edx,%eax
   1b7a4:	c1 e0 03             	shl    $0x3,%eax
   1b7a7:	01 d0                	add    %edx,%eax
   1b7a9:	c1 e0 04             	shl    $0x4,%eax
   1b7ac:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1b7b1:	89 08                	mov    %ecx,(%eax)
}
   1b7b3:	90                   	nop
   1b7b4:	83 c4 10             	add    $0x10,%esp
   1b7b7:	c3                   	ret    

0001b7b8 <csi_at>:
// 的字符将右移.超过右边界的字符将被丢失.
// 参数 nr = 转义字符序列中的参数Pn.
static void csi_at(int currcons, unsigned int nr)
{
	// 如果插入的字符数大于一行字符数,则截为一行字符数;若插入字符数nr为0,则插入1个字符.然后循环插入指定个空格字符.
	if (nr > video_num_columns)
   1b7b8:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1b7bd:	39 44 24 08          	cmp    %eax,0x8(%esp)
   1b7c1:	76 0b                	jbe    1b7ce <csi_at+0x16>
		nr = video_num_columns;
   1b7c3:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1b7c8:	89 44 24 08          	mov    %eax,0x8(%esp)
   1b7cc:	eb 1d                	jmp    1b7eb <csi_at+0x33>
	else if (!nr)
   1b7ce:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   1b7d3:	75 16                	jne    1b7eb <csi_at+0x33>
		nr = 1;
   1b7d5:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
   1b7dc:	00 
	while (nr--)
   1b7dd:	eb 0c                	jmp    1b7eb <csi_at+0x33>
		insert_char(currcons);
   1b7df:	ff 74 24 04          	pushl  0x4(%esp)
   1b7e3:	e8 23 fd ff ff       	call   1b50b <insert_char>
   1b7e8:	83 c4 04             	add    $0x4,%esp
	// 如果插入的字符数大于一行字符数,则截为一行字符数;若插入字符数nr为0,则插入1个字符.然后循环插入指定个空格字符.
	if (nr > video_num_columns)
		nr = video_num_columns;
	else if (!nr)
		nr = 1;
	while (nr--)
   1b7eb:	8b 44 24 08          	mov    0x8(%esp),%eax
   1b7ef:	8d 50 ff             	lea    -0x1(%eax),%edx
   1b7f2:	89 54 24 08          	mov    %edx,0x8(%esp)
   1b7f6:	85 c0                	test   %eax,%eax
   1b7f8:	75 e5                	jne    1b7df <csi_at+0x27>
		insert_char(currcons);
}
   1b7fa:	90                   	nop
   1b7fb:	c3                   	ret    

0001b7fc <csi_L>:
// 行就丢失.
// 参数nr = 转义字符序列中的参数Pn.
static void csi_L(int currcons, unsigned int nr)
{
	// 如果插入的行数大于屏最多行数,则截为屏幕显示行数;若插入行数nr为0,则插入1行.然后循环插入指定行数nr的空行.
	if (nr > video_num_lines)
   1b7fc:	a1 44 ee 03 00       	mov    0x3ee44,%eax
   1b801:	39 44 24 08          	cmp    %eax,0x8(%esp)
   1b805:	76 0b                	jbe    1b812 <csi_L+0x16>
		nr = video_num_lines;
   1b807:	a1 44 ee 03 00       	mov    0x3ee44,%eax
   1b80c:	89 44 24 08          	mov    %eax,0x8(%esp)
   1b810:	eb 1d                	jmp    1b82f <csi_L+0x33>
	else if (!nr)
   1b812:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   1b817:	75 16                	jne    1b82f <csi_L+0x33>
		nr = 1;
   1b819:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
   1b820:	00 
	while (nr--)
   1b821:	eb 0c                	jmp    1b82f <csi_L+0x33>
		insert_line(currcons);
   1b823:	ff 74 24 04          	pushl  0x4(%esp)
   1b827:	e8 73 fd ff ff       	call   1b59f <insert_line>
   1b82c:	83 c4 04             	add    $0x4,%esp
	// 如果插入的行数大于屏最多行数,则截为屏幕显示行数;若插入行数nr为0,则插入1行.然后循环插入指定行数nr的空行.
	if (nr > video_num_lines)
		nr = video_num_lines;
	else if (!nr)
		nr = 1;
	while (nr--)
   1b82f:	8b 44 24 08          	mov    0x8(%esp),%eax
   1b833:	8d 50 ff             	lea    -0x1(%eax),%edx
   1b836:	89 54 24 08          	mov    %edx,0x8(%esp)
   1b83a:	85 c0                	test   %eax,%eax
   1b83c:	75 e5                	jne    1b823 <csi_L+0x27>
		insert_line(currcons);
}
   1b83e:	90                   	nop
   1b83f:	c3                   	ret    

0001b840 <csi_P>:
// 相同,但这里作了简化处理,仅使用字符的默认属性(黑底白字空格0x0720)来设置空字符.
// 参数nr = 转义字符序列中的参数Pn.
static void csi_P(int currcons, unsigned int nr)
{
	// 如果删除的字符数大于一行字符数,则截为一行字符数;若删除字符数nr为0,则删除1个字符.然后循环删除光标处指定字符数nr.
	if (nr > video_num_columns)
   1b840:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1b845:	39 44 24 08          	cmp    %eax,0x8(%esp)
   1b849:	76 0b                	jbe    1b856 <csi_P+0x16>
		nr = video_num_columns;
   1b84b:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1b850:	89 44 24 08          	mov    %eax,0x8(%esp)
   1b854:	eb 1d                	jmp    1b873 <csi_P+0x33>
	else if (!nr)
   1b856:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   1b85b:	75 16                	jne    1b873 <csi_P+0x33>
		nr = 1;
   1b85d:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
   1b864:	00 
	while (nr--)
   1b865:	eb 0c                	jmp    1b873 <csi_P+0x33>
		delete_char(currcons);
   1b867:	ff 74 24 04          	pushl  0x4(%esp)
   1b86b:	e8 ec fd ff ff       	call   1b65c <delete_char>
   1b870:	83 c4 04             	add    $0x4,%esp
	// 如果删除的字符数大于一行字符数,则截为一行字符数;若删除字符数nr为0,则删除1个字符.然后循环删除光标处指定字符数nr.
	if (nr > video_num_columns)
		nr = video_num_columns;
	else if (!nr)
		nr = 1;
	while (nr--)
   1b873:	8b 44 24 08          	mov    0x8(%esp),%eax
   1b877:	8d 50 ff             	lea    -0x1(%eax),%edx
   1b87a:	89 54 24 08          	mov    %edx,0x8(%esp)
   1b87e:	85 c0                	test   %eax,%eax
   1b880:	75 e5                	jne    1b867 <csi_P+0x27>
		delete_char(currcons);
}
   1b882:	90                   	nop
   1b883:	c3                   	ret    

0001b884 <csi_M>:
// Pn大于显示页上剩余行数,则本序列仅删除这些剩余行,并对滚动区域处不起作用.
// 参数nr = 转义字符序列中的参数Pn.
static void csi_M(int currcons, unsigned int nr)
{
	// 如果删除的行数大于屏幕最大行数,则截为屏幕显示行数;若欲删除的行数nr为0,则删除1行.然后循环删除指定行数nr.
	if (nr > video_num_lines)
   1b884:	a1 44 ee 03 00       	mov    0x3ee44,%eax
   1b889:	39 44 24 08          	cmp    %eax,0x8(%esp)
   1b88d:	76 0b                	jbe    1b89a <csi_M+0x16>
		nr = video_num_lines;
   1b88f:	a1 44 ee 03 00       	mov    0x3ee44,%eax
   1b894:	89 44 24 08          	mov    %eax,0x8(%esp)
   1b898:	eb 1d                	jmp    1b8b7 <csi_M+0x33>
	else if (!nr)
   1b89a:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   1b89f:	75 16                	jne    1b8b7 <csi_M+0x33>
		nr=1;
   1b8a1:	c7 44 24 08 01 00 00 	movl   $0x1,0x8(%esp)
   1b8a8:	00 
	while (nr--)
   1b8a9:	eb 0c                	jmp    1b8b7 <csi_M+0x33>
		delete_line(currcons);
   1b8ab:	ff 74 24 04          	pushl  0x4(%esp)
   1b8af:	e8 47 fe ff ff       	call   1b6fb <delete_line>
   1b8b4:	83 c4 04             	add    $0x4,%esp
	// 如果删除的行数大于屏幕最大行数,则截为屏幕显示行数;若欲删除的行数nr为0,则删除1行.然后循环删除指定行数nr.
	if (nr > video_num_lines)
		nr = video_num_lines;
	else if (!nr)
		nr=1;
	while (nr--)
   1b8b7:	8b 44 24 08          	mov    0x8(%esp),%eax
   1b8bb:	8d 50 ff             	lea    -0x1(%eax),%edx
   1b8be:	89 54 24 08          	mov    %edx,0x8(%esp)
   1b8c2:	85 c0                	test   %eax,%eax
   1b8c4:	75 e5                	jne    1b8ab <csi_M+0x27>
		delete_line(currcons);
}
   1b8c6:	90                   	nop
   1b8c7:	c3                   	ret    

0001b8c8 <save_cur>:

//// 保存当前光标位置
static void save_cur(int currcons)
{
	saved_x = x;
   1b8c8:	8b 54 24 04          	mov    0x4(%esp),%edx
   1b8cc:	89 d0                	mov    %edx,%eax
   1b8ce:	c1 e0 03             	shl    $0x3,%eax
   1b8d1:	01 d0                	add    %edx,%eax
   1b8d3:	c1 e0 04             	shl    $0x4,%eax
   1b8d6:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1b8db:	8b 08                	mov    (%eax),%ecx
   1b8dd:	8b 54 24 04          	mov    0x4(%esp),%edx
   1b8e1:	89 d0                	mov    %edx,%eax
   1b8e3:	c1 e0 03             	shl    $0x3,%eax
   1b8e6:	01 d0                	add    %edx,%eax
   1b8e8:	c1 e0 04             	shl    $0x4,%eax
   1b8eb:	05 e0 ee 03 00       	add    $0x3eee0,%eax
   1b8f0:	89 08                	mov    %ecx,(%eax)
	saved_y = y;
   1b8f2:	8b 54 24 04          	mov    0x4(%esp),%edx
   1b8f6:	89 d0                	mov    %edx,%eax
   1b8f8:	c1 e0 03             	shl    $0x3,%eax
   1b8fb:	01 d0                	add    %edx,%eax
   1b8fd:	c1 e0 04             	shl    $0x4,%eax
   1b900:	05 88 ee 03 00       	add    $0x3ee88,%eax
   1b905:	8b 08                	mov    (%eax),%ecx
   1b907:	8b 54 24 04          	mov    0x4(%esp),%edx
   1b90b:	89 d0                	mov    %edx,%eax
   1b90d:	c1 e0 03             	shl    $0x3,%eax
   1b910:	01 d0                	add    %edx,%eax
   1b912:	c1 e0 04             	shl    $0x4,%eax
   1b915:	05 e4 ee 03 00       	add    $0x3eee4,%eax
   1b91a:	89 08                	mov    %ecx,(%eax)
}
   1b91c:	90                   	nop
   1b91d:	c3                   	ret    

0001b91e <restore_cur>:

// 恢复保存的光标位置
static void restore_cur(int currcons)
{
	gotoxy(currcons, saved_x, saved_y);
   1b91e:	8b 54 24 04          	mov    0x4(%esp),%edx
   1b922:	89 d0                	mov    %edx,%eax
   1b924:	c1 e0 03             	shl    $0x3,%eax
   1b927:	01 d0                	add    %edx,%eax
   1b929:	c1 e0 04             	shl    $0x4,%eax
   1b92c:	05 e4 ee 03 00       	add    $0x3eee4,%eax
   1b931:	8b 08                	mov    (%eax),%ecx
   1b933:	8b 54 24 04          	mov    0x4(%esp),%edx
   1b937:	89 d0                	mov    %edx,%eax
   1b939:	c1 e0 03             	shl    $0x3,%eax
   1b93c:	01 d0                	add    %edx,%eax
   1b93e:	c1 e0 04             	shl    $0x4,%eax
   1b941:	05 e0 ee 03 00       	add    $0x3eee0,%eax
   1b946:	8b 00                	mov    (%eax),%eax
   1b948:	51                   	push   %ecx
   1b949:	50                   	push   %eax
   1b94a:	ff 74 24 0c          	pushl  0xc(%esp)
   1b94e:	e8 e9 e7 ff ff       	call   1a13c <gotoxy>
   1b953:	83 c4 0c             	add    $0xc,%esp
}
   1b956:	90                   	nop
   1b957:	c3                   	ret    

0001b958 <con_write>:
// 控制台写函数
// 从终端对应的tty写缓冲队列中取字符针对每个字符进行分析.若是控制字符或转义或控制序列,则进行光标定位,字符删除等的控制处理;对于普通字符就直接在光标处
// 显示.
// 参数:tty是当前控制台使用的tty结构指针.
void con_write(struct tty_struct * tty)
{
   1b958:	53                   	push   %ebx
   1b959:	83 ec 18             	sub    $0x18,%esp

	// 该函数首先根据当前控制台使用的tty在tty表的项位置取得对应控制台号currcons,然后计算出(CHARS())目前tty写队列中含有的字符数nr,并循环取出其中的每个
	// 字符进行处理.不过如果当前控制台由于接收键盘或发出的暂停命令(如按键Ctrl-S)而处于停止状态,那么本函数就停止处理写队列中的字符,退出函数.另外,如果取出的
	// 是控制字符CAN(24)或SUB(6),那么若是在转义或控制序列期间收到的,则序列不会执行而立刻终止,同时显示随后的字符.注意,con_write()函数只处理取队列字符数
	// 时写队列中当前含有的字符.这有可能在一个序列被放到写队列期间读取字符数,因此本函数前一次退出时state有可能处于处理转义或控制序列的其他状态上.
	currcons = tty - tty_table;
   1b95c:	8b 44 24 20          	mov    0x20(%esp),%eax
   1b960:	ba 20 18 04 00       	mov    $0x41820,%edx
   1b965:	29 d0                	sub    %edx,%eax
   1b967:	c1 f8 06             	sar    $0x6,%eax
   1b96a:	89 44 24 08          	mov    %eax,0x8(%esp)
	if ((currcons >= MAX_CONSOLES) || (currcons < 0))
   1b96e:	83 7c 24 08 07       	cmpl   $0x7,0x8(%esp)
   1b973:	7f 07                	jg     1b97c <con_write+0x24>
   1b975:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   1b97a:	79 10                	jns    1b98c <con_write+0x34>
		panic("con_write: illegal tty");
   1b97c:	83 ec 0c             	sub    $0xc,%esp
   1b97f:	68 5c 4d 02 00       	push   $0x24d5c
   1b984:	e8 7f d2 fe ff       	call   8c08 <panic>
   1b989:	83 c4 10             	add    $0x10,%esp

	nr = CHARS(tty->write_q);										// 取写队列中字符数,在tty.h文件中
   1b98c:	8b 44 24 20          	mov    0x20(%esp),%eax
   1b990:	8b 40 38             	mov    0x38(%eax),%eax
   1b993:	8b 50 04             	mov    0x4(%eax),%edx
   1b996:	8b 44 24 20          	mov    0x20(%esp),%eax
   1b99a:	8b 40 38             	mov    0x38(%eax),%eax
   1b99d:	8b 40 08             	mov    0x8(%eax),%eax
   1b9a0:	29 c2                	sub    %eax,%edx
   1b9a2:	89 d0                	mov    %edx,%eax
   1b9a4:	25 ff 03 00 00       	and    $0x3ff,%eax
   1b9a9:	89 44 24 0c          	mov    %eax,0xc(%esp)
	while (nr--) {
   1b9ad:	e9 6b 13 00 00       	jmp    1cd1d <con_write+0x13c5>
		if (tty->stopped)
   1b9b2:	8b 44 24 20          	mov    0x20(%esp),%eax
   1b9b6:	8b 40 2c             	mov    0x2c(%eax),%eax
   1b9b9:	85 c0                	test   %eax,%eax
   1b9bb:	0f 85 71 13 00 00    	jne    1cd32 <con_write+0x13da>
			break;
		GETCH(tty->write_q, c);										// 取1字符到c中
   1b9c1:	8b 44 24 20          	mov    0x20(%esp),%eax
   1b9c5:	8b 50 38             	mov    0x38(%eax),%edx
   1b9c8:	8b 44 24 20          	mov    0x20(%esp),%eax
   1b9cc:	8b 40 38             	mov    0x38(%eax),%eax
   1b9cf:	8b 40 08             	mov    0x8(%eax),%eax
   1b9d2:	0f b6 44 02 10       	movzbl 0x10(%edx,%eax,1),%eax
   1b9d7:	88 44 24 07          	mov    %al,0x7(%esp)
   1b9db:	8b 44 24 20          	mov    0x20(%esp),%eax
   1b9df:	8b 40 38             	mov    0x38(%eax),%eax
   1b9e2:	8b 54 24 20          	mov    0x20(%esp),%edx
   1b9e6:	8b 52 38             	mov    0x38(%edx),%edx
   1b9e9:	8b 52 08             	mov    0x8(%edx),%edx
   1b9ec:	83 c2 01             	add    $0x1,%edx
   1b9ef:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   1b9f5:	89 50 08             	mov    %edx,0x8(%eax)
		if (c == 24 || c == 26)										// 控制字符CAN,SUB - 取消,替换
   1b9f8:	80 7c 24 07 18       	cmpb   $0x18,0x7(%esp)
   1b9fd:	74 07                	je     1ba06 <con_write+0xae>
   1b9ff:	80 7c 24 07 1a       	cmpb   $0x1a,0x7(%esp)
   1ba04:	75 19                	jne    1ba1f <con_write+0xc7>
			state = ESnormal;
   1ba06:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ba0a:	89 d0                	mov    %edx,%eax
   1ba0c:	c1 e0 03             	shl    $0x3,%eax
   1ba0f:	01 d0                	add    %edx,%eax
   1ba11:	c1 e0 04             	shl    $0x4,%eax
   1ba14:	05 6c ee 03 00       	add    $0x3ee6c,%eax
   1ba19:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		switch(state) {
   1ba1f:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ba23:	89 d0                	mov    %edx,%eax
   1ba25:	c1 e0 03             	shl    $0x3,%eax
   1ba28:	01 d0                	add    %edx,%eax
   1ba2a:	c1 e0 04             	shl    $0x4,%eax
   1ba2d:	05 6c ee 03 00       	add    $0x3ee6c,%eax
   1ba32:	8b 00                	mov    (%eax),%eax
   1ba34:	83 f8 07             	cmp    $0x7,%eax
   1ba37:	0f 87 c7 12 00 00    	ja     1cd04 <con_write+0x13ac>
   1ba3d:	8b 04 85 88 4d 02 00 	mov    0x24d88(,%eax,4),%eax
   1ba44:	ff e0                	jmp    *%eax
			//          标位置进行设置.当刚处理完一个转义或控制序列,程序也会返回到本状态.
			// 如果从写队列中取出的字符是普通显示字符代码,就直接从当前映射字符集中取出对应的显示字符,并放到当前光标所处的显示内存位置处,即直接显示该字符.然后把光标
			// 位置右移一个字符位置.具体地,如果字符不是控制字符也不是扩展字符,即(31<c<127),那么,若当前光标处在行末端或末端以外,则将光标移到下行头列.并调整光标位置
			// 对应的内存指针pos.然后将字符c写到显示内存中pos处,并将光标右移1列,同时也将pos对应地移动2个字节.
			case ESnormal:
				if (c > 31 && c < 127) {							// 是普通显示字符
   1ba46:	80 7c 24 07 1f       	cmpb   $0x1f,0x7(%esp)
   1ba4b:	0f 8e 51 01 00 00    	jle    1bba2 <con_write+0x24a>
   1ba51:	80 7c 24 07 7f       	cmpb   $0x7f,0x7(%esp)
   1ba56:	0f 84 46 01 00 00    	je     1bba2 <con_write+0x24a>
					if (x >= video_num_columns) {					// 要换行?
   1ba5c:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ba60:	89 d0                	mov    %edx,%eax
   1ba62:	c1 e0 03             	shl    $0x3,%eax
   1ba65:	01 d0                	add    %edx,%eax
   1ba67:	c1 e0 04             	shl    $0x4,%eax
   1ba6a:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1ba6f:	8b 10                	mov    (%eax),%edx
   1ba71:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1ba76:	39 c2                	cmp    %eax,%edx
   1ba78:	72 75                	jb     1baef <con_write+0x197>
						x -= video_num_columns;
   1ba7a:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ba7e:	89 d0                	mov    %edx,%eax
   1ba80:	c1 e0 03             	shl    $0x3,%eax
   1ba83:	01 d0                	add    %edx,%eax
   1ba85:	c1 e0 04             	shl    $0x4,%eax
   1ba88:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1ba8d:	8b 10                	mov    (%eax),%edx
   1ba8f:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1ba94:	89 d1                	mov    %edx,%ecx
   1ba96:	29 c1                	sub    %eax,%ecx
   1ba98:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ba9c:	89 d0                	mov    %edx,%eax
   1ba9e:	c1 e0 03             	shl    $0x3,%eax
   1baa1:	01 d0                	add    %edx,%eax
   1baa3:	c1 e0 04             	shl    $0x4,%eax
   1baa6:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1baab:	89 08                	mov    %ecx,(%eax)
						pos -= video_size_row;
   1baad:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bab1:	89 d0                	mov    %edx,%eax
   1bab3:	c1 e0 03             	shl    $0x3,%eax
   1bab6:	01 d0                	add    %edx,%eax
   1bab8:	c1 e0 04             	shl    $0x4,%eax
   1babb:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1bac0:	8b 10                	mov    (%eax),%edx
   1bac2:	a1 40 ee 03 00       	mov    0x3ee40,%eax
   1bac7:	89 d1                	mov    %edx,%ecx
   1bac9:	29 c1                	sub    %eax,%ecx
   1bacb:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bacf:	89 d0                	mov    %edx,%eax
   1bad1:	c1 e0 03             	shl    $0x3,%eax
   1bad4:	01 d0                	add    %edx,%eax
   1bad6:	c1 e0 04             	shl    $0x4,%eax
   1bad9:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1bade:	89 08                	mov    %ecx,(%eax)
						lf(currcons);
   1bae0:	83 ec 0c             	sub    $0xc,%esp
   1bae3:	ff 74 24 14          	pushl  0x14(%esp)
   1bae7:	e8 5c ee ff ff       	call   1a948 <lf>
   1baec:	83 c4 10             	add    $0x10,%esp
					}
					__asm__("movb %2, %%ah\n\t"						// 写字符
						"movw %%ax, %1\n\t"
						::"a" (translate[c - 32]),
   1baef:	8b 54 24 08          	mov    0x8(%esp),%edx
   1baf3:	89 d0                	mov    %edx,%eax
   1baf5:	c1 e0 03             	shl    $0x3,%eax
   1baf8:	01 d0                	add    %edx,%eax
   1bafa:	c1 e0 04             	shl    $0x4,%eax
   1bafd:	05 ec ee 03 00       	add    $0x3eeec,%eax
   1bb02:	8b 00                	mov    (%eax),%eax
   1bb04:	0f be 54 24 07       	movsbl 0x7(%esp),%edx
   1bb09:	83 ea 20             	sub    $0x20,%edx
   1bb0c:	01 d0                	add    %edx,%eax
   1bb0e:	0f b6 08             	movzbl (%eax),%ecx
						"m" (*(short *)pos),
   1bb11:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bb15:	89 d0                	mov    %edx,%eax
   1bb17:	c1 e0 03             	shl    $0x3,%eax
   1bb1a:	01 d0                	add    %edx,%eax
   1bb1c:	c1 e0 04             	shl    $0x4,%eax
   1bb1f:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1bb24:	8b 00                	mov    (%eax),%eax
   1bb26:	89 c3                	mov    %eax,%ebx
					if (x >= video_num_columns) {					// 要换行?
						x -= video_num_columns;
						pos -= video_size_row;
						lf(currcons);
					}
					__asm__("movb %2, %%ah\n\t"						// 写字符
   1bb28:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bb2c:	89 d0                	mov    %edx,%eax
   1bb2e:	c1 e0 03             	shl    $0x3,%eax
   1bb31:	01 d0                	add    %edx,%eax
   1bb33:	c1 e0 04             	shl    $0x4,%eax
   1bb36:	8d 90 62 ee 03 00    	lea    0x3ee62(%eax),%edx
   1bb3c:	89 c8                	mov    %ecx,%eax
   1bb3e:	8a 22                	mov    (%edx),%ah
   1bb40:	66 89 03             	mov    %ax,(%ebx)
						"movw %%ax, %1\n\t"
						::"a" (translate[c - 32]),
						"m" (*(short *)pos),
						"m" (attr)
						:);
					pos += 2;
   1bb43:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bb47:	89 d0                	mov    %edx,%eax
   1bb49:	c1 e0 03             	shl    $0x3,%eax
   1bb4c:	01 d0                	add    %edx,%eax
   1bb4e:	c1 e0 04             	shl    $0x4,%eax
   1bb51:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1bb56:	8b 00                	mov    (%eax),%eax
   1bb58:	8d 48 02             	lea    0x2(%eax),%ecx
   1bb5b:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bb5f:	89 d0                	mov    %edx,%eax
   1bb61:	c1 e0 03             	shl    $0x3,%eax
   1bb64:	01 d0                	add    %edx,%eax
   1bb66:	c1 e0 04             	shl    $0x4,%eax
   1bb69:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1bb6e:	89 08                	mov    %ecx,(%eax)
					x++;
   1bb70:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bb74:	89 d0                	mov    %edx,%eax
   1bb76:	c1 e0 03             	shl    $0x3,%eax
   1bb79:	01 d0                	add    %edx,%eax
   1bb7b:	c1 e0 04             	shl    $0x4,%eax
   1bb7e:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1bb83:	8b 00                	mov    (%eax),%eax
   1bb85:	8d 48 01             	lea    0x1(%eax),%ecx
   1bb88:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bb8c:	89 d0                	mov    %edx,%eax
   1bb8e:	c1 e0 03             	shl    $0x3,%eax
   1bb91:	01 d0                	add    %edx,%eax
   1bb93:	c1 e0 04             	shl    $0x4,%eax
   1bb96:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1bb9b:	89 08                	mov    %ecx,(%eax)
   1bb9d:	e9 a5 02 00 00       	jmp    1be47 <con_write+0x4ef>
				// 如果字符c是转义字符ESC,则转换状态state到ESesc
				} else if (c == 27)									// ESC - 转义控制字符
   1bba2:	80 7c 24 07 1b       	cmpb   $0x1b,0x7(%esp)
   1bba7:	75 1e                	jne    1bbc7 <con_write+0x26f>
					state = ESesc;
   1bba9:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bbad:	89 d0                	mov    %edx,%eax
   1bbaf:	c1 e0 03             	shl    $0x3,%eax
   1bbb2:	01 d0                	add    %edx,%eax
   1bbb4:	c1 e0 04             	shl    $0x4,%eax
   1bbb7:	05 6c ee 03 00       	add    $0x3ee6c,%eax
   1bbbc:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
   1bbc2:	e9 56 11 00 00       	jmp    1cd1d <con_write+0x13c5>
				// 如果c是换行符LF(10),或垂直制表符VT(11),或换页符FF(12),则光标移动到下1行.
				else if (c == 10 || c == 11 || c == 12)
   1bbc7:	80 7c 24 07 0a       	cmpb   $0xa,0x7(%esp)
   1bbcc:	74 0e                	je     1bbdc <con_write+0x284>
   1bbce:	80 7c 24 07 0b       	cmpb   $0xb,0x7(%esp)
   1bbd3:	74 07                	je     1bbdc <con_write+0x284>
   1bbd5:	80 7c 24 07 0c       	cmpb   $0xc,0x7(%esp)
   1bbda:	75 14                	jne    1bbf0 <con_write+0x298>
					lf(currcons);
   1bbdc:	83 ec 0c             	sub    $0xc,%esp
   1bbdf:	ff 74 24 14          	pushl  0x14(%esp)
   1bbe3:	e8 60 ed ff ff       	call   1a948 <lf>
   1bbe8:	83 c4 10             	add    $0x10,%esp
   1bbeb:	e9 57 02 00 00       	jmp    1be47 <con_write+0x4ef>
				// 如果c是回车符CR(13),则将光标移动到头列(0列)
				else if (c == 13)									// CR - 回车
   1bbf0:	80 7c 24 07 0d       	cmpb   $0xd,0x7(%esp)
   1bbf5:	75 14                	jne    1bc0b <con_write+0x2b3>
					cr(currcons);
   1bbf7:	83 ec 0c             	sub    $0xc,%esp
   1bbfa:	ff 74 24 14          	pushl  0x14(%esp)
   1bbfe:	e8 81 ee ff ff       	call   1aa84 <cr>
   1bc03:	83 c4 10             	add    $0x10,%esp
   1bc06:	e9 12 11 00 00       	jmp    1cd1d <con_write+0x13c5>
				// 如果c是DEL(127),则将光标左边字符擦除(用空格字符替代),并将光标移到被擦除位置.
				else if (c == ERASE_CHAR(tty))
   1bc0b:	0f be 54 24 07       	movsbl 0x7(%esp),%edx
   1bc10:	8b 44 24 20          	mov    0x20(%esp),%eax
   1bc14:	0f b6 40 13          	movzbl 0x13(%eax),%eax
   1bc18:	0f b6 c0             	movzbl %al,%eax
   1bc1b:	39 c2                	cmp    %eax,%edx
   1bc1d:	75 14                	jne    1bc33 <con_write+0x2db>
					del(currcons);
   1bc1f:	83 ec 0c             	sub    $0xc,%esp
   1bc22:	ff 74 24 14          	pushl  0x14(%esp)
   1bc26:	e8 b7 ee ff ff       	call   1aae2 <del>
   1bc2b:	83 c4 10             	add    $0x10,%esp
   1bc2e:	e9 ea 10 00 00       	jmp    1cd1d <con_write+0x13c5>
				// 如果c是BS(backspace,8),则将光标左移1格,并相应调整光标对应内存位置指针pos.
				else if (c == 8) {									// BS - 后退.
   1bc33:	80 7c 24 07 08       	cmpb   $0x8,0x7(%esp)
   1bc38:	75 7c                	jne    1bcb6 <con_write+0x35e>
					if (x) {
   1bc3a:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bc3e:	89 d0                	mov    %edx,%eax
   1bc40:	c1 e0 03             	shl    $0x3,%eax
   1bc43:	01 d0                	add    %edx,%eax
   1bc45:	c1 e0 04             	shl    $0x4,%eax
   1bc48:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1bc4d:	8b 00                	mov    (%eax),%eax
   1bc4f:	85 c0                	test   %eax,%eax
   1bc51:	0f 84 c6 10 00 00    	je     1cd1d <con_write+0x13c5>
						x--;
   1bc57:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bc5b:	89 d0                	mov    %edx,%eax
   1bc5d:	c1 e0 03             	shl    $0x3,%eax
   1bc60:	01 d0                	add    %edx,%eax
   1bc62:	c1 e0 04             	shl    $0x4,%eax
   1bc65:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1bc6a:	8b 00                	mov    (%eax),%eax
   1bc6c:	8d 48 ff             	lea    -0x1(%eax),%ecx
   1bc6f:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bc73:	89 d0                	mov    %edx,%eax
   1bc75:	c1 e0 03             	shl    $0x3,%eax
   1bc78:	01 d0                	add    %edx,%eax
   1bc7a:	c1 e0 04             	shl    $0x4,%eax
   1bc7d:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1bc82:	89 08                	mov    %ecx,(%eax)
						pos -= 2;
   1bc84:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bc88:	89 d0                	mov    %edx,%eax
   1bc8a:	c1 e0 03             	shl    $0x3,%eax
   1bc8d:	01 d0                	add    %edx,%eax
   1bc8f:	c1 e0 04             	shl    $0x4,%eax
   1bc92:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1bc97:	8b 00                	mov    (%eax),%eax
   1bc99:	8d 48 fe             	lea    -0x2(%eax),%ecx
   1bc9c:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bca0:	89 d0                	mov    %edx,%eax
   1bca2:	c1 e0 03             	shl    $0x3,%eax
   1bca5:	01 d0                	add    %edx,%eax
   1bca7:	c1 e0 04             	shl    $0x4,%eax
   1bcaa:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1bcaf:	89 08                	mov    %ecx,(%eax)
   1bcb1:	e9 67 10 00 00       	jmp    1cd1d <con_write+0x13c5>
					}
				// 如果字符c是水平制表符HT(9),则将光标移到8的位数列上.若此时光标列数超出屏幕最大列数,则将光标移到下一行上.
				} else if (c == 9) {								// HT - 水平制表
   1bcb6:	80 7c 24 07 09       	cmpb   $0x9,0x7(%esp)
   1bcbb:	0f 85 28 01 00 00    	jne    1bde9 <con_write+0x491>
					c = 8 - (x & 7);
   1bcc1:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bcc5:	89 d0                	mov    %edx,%eax
   1bcc7:	c1 e0 03             	shl    $0x3,%eax
   1bcca:	01 d0                	add    %edx,%eax
   1bccc:	c1 e0 04             	shl    $0x4,%eax
   1bccf:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1bcd4:	8b 00                	mov    (%eax),%eax
   1bcd6:	83 e0 07             	and    $0x7,%eax
   1bcd9:	ba 08 00 00 00       	mov    $0x8,%edx
   1bcde:	29 c2                	sub    %eax,%edx
   1bce0:	89 d0                	mov    %edx,%eax
   1bce2:	88 44 24 07          	mov    %al,0x7(%esp)
					x += c;
   1bce6:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bcea:	89 d0                	mov    %edx,%eax
   1bcec:	c1 e0 03             	shl    $0x3,%eax
   1bcef:	01 d0                	add    %edx,%eax
   1bcf1:	c1 e0 04             	shl    $0x4,%eax
   1bcf4:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1bcf9:	8b 10                	mov    (%eax),%edx
   1bcfb:	0f be 44 24 07       	movsbl 0x7(%esp),%eax
   1bd00:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
   1bd03:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bd07:	89 d0                	mov    %edx,%eax
   1bd09:	c1 e0 03             	shl    $0x3,%eax
   1bd0c:	01 d0                	add    %edx,%eax
   1bd0e:	c1 e0 04             	shl    $0x4,%eax
   1bd11:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1bd16:	89 08                	mov    %ecx,(%eax)
					pos += c << 1;
   1bd18:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bd1c:	89 d0                	mov    %edx,%eax
   1bd1e:	c1 e0 03             	shl    $0x3,%eax
   1bd21:	01 d0                	add    %edx,%eax
   1bd23:	c1 e0 04             	shl    $0x4,%eax
   1bd26:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1bd2b:	8b 00                	mov    (%eax),%eax
   1bd2d:	0f be 54 24 07       	movsbl 0x7(%esp),%edx
   1bd32:	01 d2                	add    %edx,%edx
   1bd34:	8d 0c 10             	lea    (%eax,%edx,1),%ecx
   1bd37:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bd3b:	89 d0                	mov    %edx,%eax
   1bd3d:	c1 e0 03             	shl    $0x3,%eax
   1bd40:	01 d0                	add    %edx,%eax
   1bd42:	c1 e0 04             	shl    $0x4,%eax
   1bd45:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1bd4a:	89 08                	mov    %ecx,(%eax)
					if (x > video_num_columns) {
   1bd4c:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bd50:	89 d0                	mov    %edx,%eax
   1bd52:	c1 e0 03             	shl    $0x3,%eax
   1bd55:	01 d0                	add    %edx,%eax
   1bd57:	c1 e0 04             	shl    $0x4,%eax
   1bd5a:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1bd5f:	8b 10                	mov    (%eax),%edx
   1bd61:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1bd66:	39 c2                	cmp    %eax,%edx
   1bd68:	76 75                	jbe    1bddf <con_write+0x487>
						x -= video_num_columns;
   1bd6a:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bd6e:	89 d0                	mov    %edx,%eax
   1bd70:	c1 e0 03             	shl    $0x3,%eax
   1bd73:	01 d0                	add    %edx,%eax
   1bd75:	c1 e0 04             	shl    $0x4,%eax
   1bd78:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1bd7d:	8b 10                	mov    (%eax),%edx
   1bd7f:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1bd84:	89 d1                	mov    %edx,%ecx
   1bd86:	29 c1                	sub    %eax,%ecx
   1bd88:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bd8c:	89 d0                	mov    %edx,%eax
   1bd8e:	c1 e0 03             	shl    $0x3,%eax
   1bd91:	01 d0                	add    %edx,%eax
   1bd93:	c1 e0 04             	shl    $0x4,%eax
   1bd96:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1bd9b:	89 08                	mov    %ecx,(%eax)
						pos -= video_size_row;
   1bd9d:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bda1:	89 d0                	mov    %edx,%eax
   1bda3:	c1 e0 03             	shl    $0x3,%eax
   1bda6:	01 d0                	add    %edx,%eax
   1bda8:	c1 e0 04             	shl    $0x4,%eax
   1bdab:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1bdb0:	8b 10                	mov    (%eax),%edx
   1bdb2:	a1 40 ee 03 00       	mov    0x3ee40,%eax
   1bdb7:	89 d1                	mov    %edx,%ecx
   1bdb9:	29 c1                	sub    %eax,%ecx
   1bdbb:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bdbf:	89 d0                	mov    %edx,%eax
   1bdc1:	c1 e0 03             	shl    $0x3,%eax
   1bdc4:	01 d0                	add    %edx,%eax
   1bdc6:	c1 e0 04             	shl    $0x4,%eax
   1bdc9:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1bdce:	89 08                	mov    %ecx,(%eax)
						lf(currcons);
   1bdd0:	83 ec 0c             	sub    $0xc,%esp
   1bdd3:	ff 74 24 14          	pushl  0x14(%esp)
   1bdd7:	e8 6c eb ff ff       	call   1a948 <lf>
   1bddc:	83 c4 10             	add    $0x10,%esp
					}
					c = 9;
   1bddf:	c6 44 24 07 09       	movb   $0x9,0x7(%esp)
   1bde4:	e9 34 0f 00 00       	jmp    1cd1d <con_write+0x13c5>
				// 如果字符c是响铃符BEL(7),则调用蜂鸣函数,使扬声器发声.
				} else if (c == 7)									// BEL - 响铃
   1bde9:	80 7c 24 07 07       	cmpb   $0x7,0x7(%esp)
   1bdee:	75 0a                	jne    1bdfa <con_write+0x4a2>
					sysbeep();
   1bdf0:	e8 3a 15 00 00       	call   1d32f <sysbeep>
   1bdf5:	e9 23 0f 00 00       	jmp    1cd1d <con_write+0x13c5>
				// 如果c是控制字符SO(14)或SI(15),则相应选择字符集G1或G0作为显示字符集.
			  	else if (c == 14)									// SO - 换出,使用G1.
   1bdfa:	80 7c 24 07 0e       	cmpb   $0xe,0x7(%esp)
   1bdff:	75 20                	jne    1be21 <con_write+0x4c9>
			  		translate = GRAF_TRANS;
   1be01:	8b 0d 40 e5 02 00    	mov    0x2e540,%ecx
   1be07:	8b 54 24 08          	mov    0x8(%esp),%edx
   1be0b:	89 d0                	mov    %edx,%eax
   1be0d:	c1 e0 03             	shl    $0x3,%eax
   1be10:	01 d0                	add    %edx,%eax
   1be12:	c1 e0 04             	shl    $0x4,%eax
   1be15:	05 ec ee 03 00       	add    $0x3eeec,%eax
   1be1a:	89 08                	mov    %ecx,(%eax)
   1be1c:	e9 fc 0e 00 00       	jmp    1cd1d <con_write+0x13c5>
			  	else if (c == 15)									// SI - 换进,使用G0.
   1be21:	80 7c 24 07 0f       	cmpb   $0xf,0x7(%esp)
   1be26:	0f 85 f1 0e 00 00    	jne    1cd1d <con_write+0x13c5>
					translate = NORM_TRANS;
   1be2c:	8b 0d 3c e5 02 00    	mov    0x2e53c,%ecx
   1be32:	8b 54 24 08          	mov    0x8(%esp),%edx
   1be36:	89 d0                	mov    %edx,%eax
   1be38:	c1 e0 03             	shl    $0x3,%eax
   1be3b:	01 d0                	add    %edx,%eax
   1be3d:	c1 e0 04             	shl    $0x4,%eax
   1be40:	05 ec ee 03 00       	add    $0x3eeec,%eax
   1be45:	89 08                	mov    %ecx,(%eax)
				break;
   1be47:	e9 d1 0e 00 00       	jmp    1cd1d <con_write+0x13c5>
			//       ESsquare去处理.否则就把接收到的字符作为转义序列来处理.对于选择字符集转义序列'ESC ('和'ESC )',使用单独的状态ESsetgraph
			//       来处理;对于设备控制字符串序列'ESC P',使用单独的状态ESsetterm来处理
			// 如果在ESnormal状态收到转义字符ESC(0x1b = 033 = 27),则转到本状态处理.该状态对C1中控制字符或转义字符进行处理.处理完后默认的
			// 状态将是ESnormal.
			case ESesc:
				state = ESnormal;
   1be4c:	8b 54 24 08          	mov    0x8(%esp),%edx
   1be50:	89 d0                	mov    %edx,%eax
   1be52:	c1 e0 03             	shl    $0x3,%eax
   1be55:	01 d0                	add    %edx,%eax
   1be57:	c1 e0 04             	shl    $0x4,%eax
   1be5a:	05 6c ee 03 00       	add    $0x3ee6c,%eax
   1be5f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				switch (c)
   1be65:	0f be 44 24 07       	movsbl 0x7(%esp),%eax
   1be6a:	83 e8 23             	sub    $0x23,%eax
   1be6d:	83 f8 40             	cmp    $0x40,%eax
   1be70:	0f 87 a7 0e 00 00    	ja     1cd1d <con_write+0x13c5>
   1be76:	8b 04 85 a8 4d 02 00 	mov    0x24da8(,%eax,4),%eax
   1be7d:	ff e0                	jmp    *%eax
				{
				  case '[':											// ESC [ - 是CSI序列.
					state = ESsquare;
   1be7f:	8b 54 24 08          	mov    0x8(%esp),%edx
   1be83:	89 d0                	mov    %edx,%eax
   1be85:	c1 e0 03             	shl    $0x3,%eax
   1be88:	01 d0                	add    %edx,%eax
   1be8a:	c1 e0 04             	shl    $0x4,%eax
   1be8d:	05 6c ee 03 00       	add    $0x3ee6c,%eax
   1be92:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
					break;
   1be98:	e9 e7 01 00 00       	jmp    1c084 <con_write+0x72c>
				  case 'E':											// ESC E - 光标下移1行回0列.
					gotoxy(currcons, 0, y + 1);
   1be9d:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bea1:	89 d0                	mov    %edx,%eax
   1bea3:	c1 e0 03             	shl    $0x3,%eax
   1bea6:	01 d0                	add    %edx,%eax
   1bea8:	c1 e0 04             	shl    $0x4,%eax
   1beab:	05 88 ee 03 00       	add    $0x3ee88,%eax
   1beb0:	8b 00                	mov    (%eax),%eax
   1beb2:	83 c0 01             	add    $0x1,%eax
   1beb5:	83 ec 04             	sub    $0x4,%esp
   1beb8:	50                   	push   %eax
   1beb9:	6a 00                	push   $0x0
   1bebb:	ff 74 24 14          	pushl  0x14(%esp)
   1bebf:	e8 78 e2 ff ff       	call   1a13c <gotoxy>
   1bec4:	83 c4 10             	add    $0x10,%esp
					break;
   1bec7:	e9 b8 01 00 00       	jmp    1c084 <con_write+0x72c>
				  case 'M':											// ESC M - 光标上移一行.
					ri(currcons);
   1becc:	83 ec 0c             	sub    $0xc,%esp
   1becf:	ff 74 24 14          	pushl  0x14(%esp)
   1bed3:	e8 0f eb ff ff       	call   1a9e7 <ri>
   1bed8:	83 c4 10             	add    $0x10,%esp
					break;
   1bedb:	e9 a4 01 00 00       	jmp    1c084 <con_write+0x72c>
				  case 'D':											// ESC D - 光标下移一行
					lf(currcons);
   1bee0:	83 ec 0c             	sub    $0xc,%esp
   1bee3:	ff 74 24 14          	pushl  0x14(%esp)
   1bee7:	e8 5c ea ff ff       	call   1a948 <lf>
   1beec:	83 c4 10             	add    $0x10,%esp
					break;
   1beef:	e9 90 01 00 00       	jmp    1c084 <con_write+0x72c>
				  case 'Z':											// ESC Z - 设备属性查询
					respond(currcons, tty);
   1bef4:	83 ec 08             	sub    $0x8,%esp
   1bef7:	ff 74 24 28          	pushl  0x28(%esp)
   1befb:	ff 74 24 14          	pushl  0x14(%esp)
   1beff:	e8 9b f5 ff ff       	call   1b49f <respond>
   1bf04:	83 c4 10             	add    $0x10,%esp
					break;
   1bf07:	e9 78 01 00 00       	jmp    1c084 <con_write+0x72c>
				  case '7':											// ESC 7 - 保存光标位置
					save_cur(currcons);
   1bf0c:	83 ec 0c             	sub    $0xc,%esp
   1bf0f:	ff 74 24 14          	pushl  0x14(%esp)
   1bf13:	e8 b0 f9 ff ff       	call   1b8c8 <save_cur>
   1bf18:	83 c4 10             	add    $0x10,%esp
					break;
   1bf1b:	e9 64 01 00 00       	jmp    1c084 <con_write+0x72c>
				  case '8':											// ESC 8 - 恢复光标位置
					restore_cur(currcons);
   1bf20:	83 ec 0c             	sub    $0xc,%esp
   1bf23:	ff 74 24 14          	pushl  0x14(%esp)
   1bf27:	e8 f2 f9 ff ff       	call   1b91e <restore_cur>
   1bf2c:	83 c4 10             	add    $0x10,%esp
					break;
   1bf2f:	e9 50 01 00 00       	jmp    1c084 <con_write+0x72c>
				  case '(':  case ')':								// ESC(,ESC) - 选择字符集
				    	state = ESsetgraph;
   1bf34:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bf38:	89 d0                	mov    %edx,%eax
   1bf3a:	c1 e0 03             	shl    $0x3,%eax
   1bf3d:	01 d0                	add    %edx,%eax
   1bf3f:	c1 e0 04             	shl    $0x4,%eax
   1bf42:	05 6c ee 03 00       	add    $0x3ee6c,%eax
   1bf47:	c7 00 07 00 00 00    	movl   $0x7,(%eax)
					break;
   1bf4d:	e9 32 01 00 00       	jmp    1c084 <con_write+0x72c>
				  case 'P':											// ESC P - 设置终端参数
				    	state = ESsetterm;
   1bf52:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bf56:	89 d0                	mov    %edx,%eax
   1bf58:	c1 e0 03             	shl    $0x3,%eax
   1bf5b:	01 d0                	add    %edx,%eax
   1bf5d:	c1 e0 04             	shl    $0x4,%eax
   1bf60:	05 6c ee 03 00       	add    $0x3ee6c,%eax
   1bf65:	c7 00 06 00 00 00    	movl   $0x6,(%eax)
				    	break;
   1bf6b:	e9 14 01 00 00       	jmp    1c084 <con_write+0x72c>
				  case '#':											// ESC # - 修改整行属性
				  	state = -1;
   1bf70:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bf74:	89 d0                	mov    %edx,%eax
   1bf76:	c1 e0 03             	shl    $0x3,%eax
   1bf79:	01 d0                	add    %edx,%eax
   1bf7b:	c1 e0 04             	shl    $0x4,%eax
   1bf7e:	05 6c ee 03 00       	add    $0x3ee6c,%eax
   1bf83:	c7 00 ff ff ff ff    	movl   $0xffffffff,(%eax)
				  	break;
   1bf89:	e9 f6 00 00 00       	jmp    1c084 <con_write+0x72c>
				  case 'c':											// ESC c - 复位到终端初始设置
					tty->termios = DEF_TERMIOS;
   1bf8e:	8b 44 24 20          	mov    0x20(%esp),%eax
   1bf92:	c7 00 00 01 00 00    	movl   $0x100,(%eax)
   1bf98:	8b 44 24 20          	mov    0x20(%esp),%eax
   1bf9c:	c7 40 04 05 00 00 00 	movl   $0x5,0x4(%eax)
   1bfa3:	8b 44 24 20          	mov    0x20(%esp),%eax
   1bfa7:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
   1bfae:	8b 44 24 20          	mov    0x20(%esp),%eax
   1bfb2:	c7 40 0c 0b 0e 00 00 	movl   $0xe0b,0xc(%eax)
   1bfb9:	8b 44 24 20          	mov    0x20(%esp),%eax
   1bfbd:	c6 40 10 00          	movb   $0x0,0x10(%eax)
   1bfc1:	8b 44 24 20          	mov    0x20(%esp),%eax
   1bfc5:	8b 15 73 4d 02 00    	mov    0x24d73,%edx
   1bfcb:	89 50 11             	mov    %edx,0x11(%eax)
   1bfce:	8b 15 77 4d 02 00    	mov    0x24d77,%edx
   1bfd4:	89 50 15             	mov    %edx,0x15(%eax)
   1bfd7:	8b 15 7b 4d 02 00    	mov    0x24d7b,%edx
   1bfdd:	89 50 19             	mov    %edx,0x19(%eax)
   1bfe0:	8b 15 7f 4d 02 00    	mov    0x24d7f,%edx
   1bfe6:	89 50 1d             	mov    %edx,0x1d(%eax)
   1bfe9:	0f b6 15 83 4d 02 00 	movzbl 0x24d83,%edx
   1bff0:	88 50 21             	mov    %dl,0x21(%eax)
				  	state = restate = ESnormal;
   1bff3:	8b 54 24 08          	mov    0x8(%esp),%edx
   1bff7:	89 d0                	mov    %edx,%eax
   1bff9:	c1 e0 03             	shl    $0x3,%eax
   1bffc:	01 d0                	add    %edx,%eax
   1bffe:	c1 e0 04             	shl    $0x4,%eax
   1c001:	05 70 ee 03 00       	add    $0x3ee70,%eax
   1c006:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   1c00c:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c010:	89 d0                	mov    %edx,%eax
   1c012:	c1 e0 03             	shl    $0x3,%eax
   1c015:	01 d0                	add    %edx,%eax
   1c017:	c1 e0 04             	shl    $0x4,%eax
   1c01a:	05 70 ee 03 00       	add    $0x3ee70,%eax
   1c01f:	8b 08                	mov    (%eax),%ecx
   1c021:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c025:	89 d0                	mov    %edx,%eax
   1c027:	c1 e0 03             	shl    $0x3,%eax
   1c02a:	01 d0                	add    %edx,%eax
   1c02c:	c1 e0 04             	shl    $0x4,%eax
   1c02f:	05 6c ee 03 00       	add    $0x3ee6c,%eax
   1c034:	89 08                	mov    %ecx,(%eax)
					checkin = 0;
   1c036:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c03a:	89 d0                	mov    %edx,%eax
   1c03c:	c1 e0 03             	shl    $0x3,%eax
   1c03f:	01 d0                	add    %edx,%eax
   1c041:	c1 e0 04             	shl    $0x4,%eax
   1c044:	05 74 ee 03 00       	add    $0x3ee74,%eax
   1c049:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
					top = 0;
   1c04f:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c053:	89 d0                	mov    %edx,%eax
   1c055:	c1 e0 03             	shl    $0x3,%eax
   1c058:	01 d0                	add    %edx,%eax
   1c05a:	c1 e0 04             	shl    $0x4,%eax
   1c05d:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1c062:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
					bottom = video_num_lines;
   1c068:	8b 0d 44 ee 03 00    	mov    0x3ee44,%ecx
   1c06e:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c072:	89 d0                	mov    %edx,%eax
   1c074:	c1 e0 03             	shl    $0x3,%eax
   1c077:	01 d0                	add    %edx,%eax
   1c079:	c1 e0 04             	shl    $0x4,%eax
   1c07c:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1c081:	89 08                	mov    %ecx,(%eax)
					break;
   1c083:	90                   	nop
				 /* case '>':   Numeric keypad */
				 /* case '=':   Appl. keypad */
				}
				break;
   1c084:	e9 94 0c 00 00       	jmp    1cd1d <con_write+0x13c5>
			// 如果在状态ESesc(是转义字符ESC)时收到的字符'[',则表明是CSI控制序列,于是转到状态Essequare来处理.首先对ESC转义序列保存参数数组par[]清零,
			// 索引变量npar指向首项,并且设置开始处于参数状态ESgetpars.如果接收到的字符不是'?',则直接转到状态ESgetpars去处理,若接收到的字符是'?',说明这
			// 个序列是终端设备私有序列,后面会有一个功能字符.于是去读下一字符,再到状态ESgetpars去处理代码处.如果此时接收到字符还是'[',那么表明收到了键盘功能
			// 键发出的序列,于是设置下一状态为ESfunckey.否则直接进入ESgetpars状态继续处理.
			case ESsquare:
				for(npar = 0; npar < NPAR; npar++)					// 初始化参数数组.
   1c089:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c08d:	89 d0                	mov    %edx,%eax
   1c08f:	c1 e0 03             	shl    $0x3,%eax
   1c092:	01 d0                	add    %edx,%eax
   1c094:	c1 e0 04             	shl    $0x4,%eax
   1c097:	05 94 ee 03 00       	add    $0x3ee94,%eax
   1c09c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   1c0a2:	eb 60                	jmp    1c104 <con_write+0x7ac>
					par[npar] = 0;
   1c0a4:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c0a8:	89 d0                	mov    %edx,%eax
   1c0aa:	c1 e0 03             	shl    $0x3,%eax
   1c0ad:	01 d0                	add    %edx,%eax
   1c0af:	c1 e0 04             	shl    $0x4,%eax
   1c0b2:	05 94 ee 03 00       	add    $0x3ee94,%eax
   1c0b7:	8b 08                	mov    (%eax),%ecx
   1c0b9:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c0bd:	89 d0                	mov    %edx,%eax
   1c0bf:	c1 e0 03             	shl    $0x3,%eax
   1c0c2:	01 d0                	add    %edx,%eax
   1c0c4:	c1 e0 02             	shl    $0x2,%eax
   1c0c7:	01 c8                	add    %ecx,%eax
   1c0c9:	83 c0 0c             	add    $0xc,%eax
   1c0cc:	c7 04 85 68 ee 03 00 	movl   $0x0,0x3ee68(,%eax,4)
   1c0d3:	00 00 00 00 
			// 如果在状态ESesc(是转义字符ESC)时收到的字符'[',则表明是CSI控制序列,于是转到状态Essequare来处理.首先对ESC转义序列保存参数数组par[]清零,
			// 索引变量npar指向首项,并且设置开始处于参数状态ESgetpars.如果接收到的字符不是'?',则直接转到状态ESgetpars去处理,若接收到的字符是'?',说明这
			// 个序列是终端设备私有序列,后面会有一个功能字符.于是去读下一字符,再到状态ESgetpars去处理代码处.如果此时接收到字符还是'[',那么表明收到了键盘功能
			// 键发出的序列,于是设置下一状态为ESfunckey.否则直接进入ESgetpars状态继续处理.
			case ESsquare:
				for(npar = 0; npar < NPAR; npar++)					// 初始化参数数组.
   1c0d7:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c0db:	89 d0                	mov    %edx,%eax
   1c0dd:	c1 e0 03             	shl    $0x3,%eax
   1c0e0:	01 d0                	add    %edx,%eax
   1c0e2:	c1 e0 04             	shl    $0x4,%eax
   1c0e5:	05 94 ee 03 00       	add    $0x3ee94,%eax
   1c0ea:	8b 00                	mov    (%eax),%eax
   1c0ec:	8d 48 01             	lea    0x1(%eax),%ecx
   1c0ef:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c0f3:	89 d0                	mov    %edx,%eax
   1c0f5:	c1 e0 03             	shl    $0x3,%eax
   1c0f8:	01 d0                	add    %edx,%eax
   1c0fa:	c1 e0 04             	shl    $0x4,%eax
   1c0fd:	05 94 ee 03 00       	add    $0x3ee94,%eax
   1c102:	89 08                	mov    %ecx,(%eax)
   1c104:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c108:	89 d0                	mov    %edx,%eax
   1c10a:	c1 e0 03             	shl    $0x3,%eax
   1c10d:	01 d0                	add    %edx,%eax
   1c10f:	c1 e0 04             	shl    $0x4,%eax
   1c112:	05 94 ee 03 00       	add    $0x3ee94,%eax
   1c117:	8b 00                	mov    (%eax),%eax
   1c119:	83 f8 0f             	cmp    $0xf,%eax
   1c11c:	76 86                	jbe    1c0a4 <con_write+0x74c>
					par[npar] = 0;
				npar = 0;
   1c11e:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c122:	89 d0                	mov    %edx,%eax
   1c124:	c1 e0 03             	shl    $0x3,%eax
   1c127:	01 d0                	add    %edx,%eax
   1c129:	c1 e0 04             	shl    $0x4,%eax
   1c12c:	05 94 ee 03 00       	add    $0x3ee94,%eax
   1c131:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				state = ESgetpars;
   1c137:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c13b:	89 d0                	mov    %edx,%eax
   1c13d:	c1 e0 03             	shl    $0x3,%eax
   1c140:	01 d0                	add    %edx,%eax
   1c142:	c1 e0 04             	shl    $0x4,%eax
   1c145:	05 6c ee 03 00       	add    $0x3ee6c,%eax
   1c14a:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
				if (c == '[')  										/* Function key */	// 'ESC [['是功能键.
   1c150:	80 7c 24 07 5b       	cmpb   $0x5b,0x7(%esp)
   1c155:	75 1e                	jne    1c175 <con_write+0x81d>
				{
					state = ESfunckey;
   1c157:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c15b:	89 d0                	mov    %edx,%eax
   1c15d:	c1 e0 03             	shl    $0x3,%eax
   1c160:	01 d0                	add    %edx,%eax
   1c162:	c1 e0 04             	shl    $0x4,%eax
   1c165:	05 6c ee 03 00       	add    $0x3ee6c,%eax
   1c16a:	c7 00 05 00 00 00    	movl   $0x5,(%eax)
					break;
   1c170:	e9 a8 0b 00 00       	jmp    1cd1d <con_write+0x13c5>
				}
				if (ques = (c == '?'))
   1c175:	80 7c 24 07 3f       	cmpb   $0x3f,0x7(%esp)
   1c17a:	0f 94 c0             	sete   %al
   1c17d:	0f b6 c8             	movzbl %al,%ecx
   1c180:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c184:	89 d0                	mov    %edx,%eax
   1c186:	c1 e0 03             	shl    $0x3,%eax
   1c189:	01 d0                	add    %edx,%eax
   1c18b:	c1 e0 04             	shl    $0x4,%eax
   1c18e:	05 68 ee 03 00       	add    $0x3ee68,%eax
   1c193:	89 08                	mov    %ecx,(%eax)
   1c195:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c199:	89 d0                	mov    %edx,%eax
   1c19b:	c1 e0 03             	shl    $0x3,%eax
   1c19e:	01 d0                	add    %edx,%eax
   1c1a0:	c1 e0 04             	shl    $0x4,%eax
   1c1a3:	05 68 ee 03 00       	add    $0x3ee68,%eax
   1c1a8:	8b 00                	mov    (%eax),%eax
   1c1aa:	85 c0                	test   %eax,%eax
   1c1ac:	74 05                	je     1c1b3 <con_write+0x85b>
					break;
   1c1ae:	e9 6a 0b 00 00       	jmp    1cd1d <con_write+0x13c5>
			//            则还是维持在本状态,并把接收到的参数值保存在数据par[]下一项中.若不是数字字符或分号,说明已取得所有参数,那么就转移到状态
			//            ESgotparts去处理.
			// 该状态表示此时要接收控制序列的参数值.参数用十进制数表示,把接收到的数字字符转换成数值并保存到par[]数组中.如果收到一个分号';',则还是维持在本状态,并
			// 把接收到的参数值保存在数据par[]下一项中.若不是数字字符或分号,说明已取得所有参数,那么就转移到状态ESgotpars去处理.
			case ESgetpars:
				if (c == ';' && npar < NPAR - 1) {
   1c1b3:	80 7c 24 07 3b       	cmpb   $0x3b,0x7(%esp)
   1c1b8:	75 4c                	jne    1c206 <con_write+0x8ae>
   1c1ba:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c1be:	89 d0                	mov    %edx,%eax
   1c1c0:	c1 e0 03             	shl    $0x3,%eax
   1c1c3:	01 d0                	add    %edx,%eax
   1c1c5:	c1 e0 04             	shl    $0x4,%eax
   1c1c8:	05 94 ee 03 00       	add    $0x3ee94,%eax
   1c1cd:	8b 00                	mov    (%eax),%eax
   1c1cf:	83 f8 0e             	cmp    $0xe,%eax
   1c1d2:	77 32                	ja     1c206 <con_write+0x8ae>
					npar++;
   1c1d4:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c1d8:	89 d0                	mov    %edx,%eax
   1c1da:	c1 e0 03             	shl    $0x3,%eax
   1c1dd:	01 d0                	add    %edx,%eax
   1c1df:	c1 e0 04             	shl    $0x4,%eax
   1c1e2:	05 94 ee 03 00       	add    $0x3ee94,%eax
   1c1e7:	8b 00                	mov    (%eax),%eax
   1c1e9:	8d 48 01             	lea    0x1(%eax),%ecx
   1c1ec:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c1f0:	89 d0                	mov    %edx,%eax
   1c1f2:	c1 e0 03             	shl    $0x3,%eax
   1c1f5:	01 d0                	add    %edx,%eax
   1c1f7:	c1 e0 04             	shl    $0x4,%eax
   1c1fa:	05 94 ee 03 00       	add    $0x3ee94,%eax
   1c1ff:	89 08                	mov    %ecx,(%eax)
					break;
   1c201:	e9 17 0b 00 00       	jmp    1cd1d <con_write+0x13c5>
				} else if (c >= '0' && c <= '9') {
   1c206:	80 7c 24 07 2f       	cmpb   $0x2f,0x7(%esp)
   1c20b:	7e 7f                	jle    1c28c <con_write+0x934>
   1c20d:	80 7c 24 07 39       	cmpb   $0x39,0x7(%esp)
   1c212:	7f 78                	jg     1c28c <con_write+0x934>
					par[npar] = 10 * par[npar] + c - '0';
   1c214:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c218:	89 d0                	mov    %edx,%eax
   1c21a:	c1 e0 03             	shl    $0x3,%eax
   1c21d:	01 d0                	add    %edx,%eax
   1c21f:	c1 e0 04             	shl    $0x4,%eax
   1c222:	05 94 ee 03 00       	add    $0x3ee94,%eax
   1c227:	8b 18                	mov    (%eax),%ebx
   1c229:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c22d:	89 d0                	mov    %edx,%eax
   1c22f:	c1 e0 03             	shl    $0x3,%eax
   1c232:	01 d0                	add    %edx,%eax
   1c234:	c1 e0 04             	shl    $0x4,%eax
   1c237:	05 94 ee 03 00       	add    $0x3ee94,%eax
   1c23c:	8b 08                	mov    (%eax),%ecx
   1c23e:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c242:	89 d0                	mov    %edx,%eax
   1c244:	c1 e0 03             	shl    $0x3,%eax
   1c247:	01 d0                	add    %edx,%eax
   1c249:	c1 e0 02             	shl    $0x2,%eax
   1c24c:	01 c8                	add    %ecx,%eax
   1c24e:	83 c0 0c             	add    $0xc,%eax
   1c251:	8b 14 85 68 ee 03 00 	mov    0x3ee68(,%eax,4),%edx
   1c258:	89 d0                	mov    %edx,%eax
   1c25a:	c1 e0 02             	shl    $0x2,%eax
   1c25d:	01 d0                	add    %edx,%eax
   1c25f:	01 c0                	add    %eax,%eax
   1c261:	89 c2                	mov    %eax,%edx
   1c263:	0f be 44 24 07       	movsbl 0x7(%esp),%eax
   1c268:	01 d0                	add    %edx,%eax
   1c26a:	8d 48 d0             	lea    -0x30(%eax),%ecx
   1c26d:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c271:	89 d0                	mov    %edx,%eax
   1c273:	c1 e0 03             	shl    $0x3,%eax
   1c276:	01 d0                	add    %edx,%eax
   1c278:	c1 e0 02             	shl    $0x2,%eax
   1c27b:	01 d8                	add    %ebx,%eax
   1c27d:	83 c0 0c             	add    $0xc,%eax
   1c280:	89 0c 85 68 ee 03 00 	mov    %ecx,0x3ee68(,%eax,4)
					break;
   1c287:	e9 91 0a 00 00       	jmp    1cd1d <con_write+0x13c5>
				} else state = ESgotpars;
   1c28c:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c290:	89 d0                	mov    %edx,%eax
   1c292:	c1 e0 03             	shl    $0x3,%eax
   1c295:	01 d0                	add    %edx,%eax
   1c297:	c1 e0 04             	shl    $0x4,%eax
   1c29a:	05 6c ee 03 00       	add    $0x3ee6c,%eax
   1c29f:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
			//           收到过'?',说明这个序列是终端设备私有序列.本内核不对支持对这种序列的处理,于是直接恢复到ESnormal状态.否则就去执行相应控制序列.
			//           待序列处理完后就把状态恢复到ESnormal.
			// ESgotpars状态表示我们已经接收到一个完整的控制序列.此时可以根据本状态接收到的结尾字符对相应控制序列进行处理.不过在处理之前,如果在ESsquare状态收到过'?',
			// 说明这个序列是终端设备私有序列.本内核不支持对这种序列的处理,于是直接恢复到ESnormal状态.否则就去执行相应控制序列.待序列处理完后就把状态恢复到ESnormal.
			case ESgotpars:
				state = ESnormal;
   1c2a5:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c2a9:	89 d0                	mov    %edx,%eax
   1c2ab:	c1 e0 03             	shl    $0x3,%eax
   1c2ae:	01 d0                	add    %edx,%eax
   1c2b0:	c1 e0 04             	shl    $0x4,%eax
   1c2b3:	05 6c ee 03 00       	add    $0x3ee6c,%eax
   1c2b8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				if (ques)
   1c2be:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c2c2:	89 d0                	mov    %edx,%eax
   1c2c4:	c1 e0 03             	shl    $0x3,%eax
   1c2c7:	01 d0                	add    %edx,%eax
   1c2c9:	c1 e0 04             	shl    $0x4,%eax
   1c2cc:	05 68 ee 03 00       	add    $0x3ee68,%eax
   1c2d1:	8b 00                	mov    (%eax),%eax
   1c2d3:	85 c0                	test   %eax,%eax
   1c2d5:	74 1e                	je     1c2f5 <con_write+0x99d>
				{ ques =0;
   1c2d7:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c2db:	89 d0                	mov    %edx,%eax
   1c2dd:	c1 e0 03             	shl    $0x3,%eax
   1c2e0:	01 d0                	add    %edx,%eax
   1c2e2:	c1 e0 04             	shl    $0x4,%eax
   1c2e5:	05 68 ee 03 00       	add    $0x3ee68,%eax
   1c2ea:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				  break;
   1c2f0:	e9 28 0a 00 00       	jmp    1cd1d <con_write+0x13c5>
				}
				switch(c) {
   1c2f5:	0f be 44 24 07       	movsbl 0x7(%esp),%eax
   1c2fa:	83 e8 40             	sub    $0x40,%eax
   1c2fd:	83 f8 35             	cmp    $0x35,%eax
   1c300:	0f 87 17 0a 00 00    	ja     1cd1d <con_write+0x13c5>
   1c306:	8b 04 85 ac 4e 02 00 	mov    0x24eac(,%eax,4),%eax
   1c30d:	ff e0                	jmp    *%eax
					// 如果c是字符'G'或'`',则par[]中第1个参数代表列号,若列号不为零,则将光标左移1格.
					case 'G': case '`':							// CSI Pn G - 光标水平移动.
						if (par[0]) par[0]--;
   1c30f:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c313:	89 d0                	mov    %edx,%eax
   1c315:	c1 e0 03             	shl    $0x3,%eax
   1c318:	01 d0                	add    %edx,%eax
   1c31a:	c1 e0 04             	shl    $0x4,%eax
   1c31d:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c322:	8b 00                	mov    (%eax),%eax
   1c324:	85 c0                	test   %eax,%eax
   1c326:	74 2d                	je     1c355 <con_write+0x9fd>
   1c328:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c32c:	89 d0                	mov    %edx,%eax
   1c32e:	c1 e0 03             	shl    $0x3,%eax
   1c331:	01 d0                	add    %edx,%eax
   1c333:	c1 e0 04             	shl    $0x4,%eax
   1c336:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c33b:	8b 00                	mov    (%eax),%eax
   1c33d:	8d 48 ff             	lea    -0x1(%eax),%ecx
   1c340:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c344:	89 d0                	mov    %edx,%eax
   1c346:	c1 e0 03             	shl    $0x3,%eax
   1c349:	01 d0                	add    %edx,%eax
   1c34b:	c1 e0 04             	shl    $0x4,%eax
   1c34e:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c353:	89 08                	mov    %ecx,(%eax)
						gotoxy(currcons, par[0], y);
   1c355:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c359:	89 d0                	mov    %edx,%eax
   1c35b:	c1 e0 03             	shl    $0x3,%eax
   1c35e:	01 d0                	add    %edx,%eax
   1c360:	c1 e0 04             	shl    $0x4,%eax
   1c363:	05 88 ee 03 00       	add    $0x3ee88,%eax
   1c368:	8b 08                	mov    (%eax),%ecx
   1c36a:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c36e:	89 d0                	mov    %edx,%eax
   1c370:	c1 e0 03             	shl    $0x3,%eax
   1c373:	01 d0                	add    %edx,%eax
   1c375:	c1 e0 04             	shl    $0x4,%eax
   1c378:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c37d:	8b 00                	mov    (%eax),%eax
   1c37f:	83 ec 04             	sub    $0x4,%esp
   1c382:	51                   	push   %ecx
   1c383:	50                   	push   %eax
   1c384:	ff 74 24 14          	pushl  0x14(%esp)
   1c388:	e8 af dd ff ff       	call   1a13c <gotoxy>
   1c38d:	83 c4 10             	add    $0x10,%esp
						break;
   1c390:	e9 4b 08 00 00       	jmp    1cbe0 <con_write+0x1288>
					// 如果c是'A',则第1个参数代表光标上移的行数.若参数为0则上移1行.
					case 'A':									// CSI Pn A - 光标上移.
						if (!par[0]) par[0]++;
   1c395:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c399:	89 d0                	mov    %edx,%eax
   1c39b:	c1 e0 03             	shl    $0x3,%eax
   1c39e:	01 d0                	add    %edx,%eax
   1c3a0:	c1 e0 04             	shl    $0x4,%eax
   1c3a3:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c3a8:	8b 00                	mov    (%eax),%eax
   1c3aa:	85 c0                	test   %eax,%eax
   1c3ac:	75 2d                	jne    1c3db <con_write+0xa83>
   1c3ae:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c3b2:	89 d0                	mov    %edx,%eax
   1c3b4:	c1 e0 03             	shl    $0x3,%eax
   1c3b7:	01 d0                	add    %edx,%eax
   1c3b9:	c1 e0 04             	shl    $0x4,%eax
   1c3bc:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c3c1:	8b 00                	mov    (%eax),%eax
   1c3c3:	8d 48 01             	lea    0x1(%eax),%ecx
   1c3c6:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c3ca:	89 d0                	mov    %edx,%eax
   1c3cc:	c1 e0 03             	shl    $0x3,%eax
   1c3cf:	01 d0                	add    %edx,%eax
   1c3d1:	c1 e0 04             	shl    $0x4,%eax
   1c3d4:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c3d9:	89 08                	mov    %ecx,(%eax)
						gotoxy(currcons, x, y - par[0]);
   1c3db:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c3df:	89 d0                	mov    %edx,%eax
   1c3e1:	c1 e0 03             	shl    $0x3,%eax
   1c3e4:	01 d0                	add    %edx,%eax
   1c3e6:	c1 e0 04             	shl    $0x4,%eax
   1c3e9:	05 88 ee 03 00       	add    $0x3ee88,%eax
   1c3ee:	8b 08                	mov    (%eax),%ecx
   1c3f0:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c3f4:	89 d0                	mov    %edx,%eax
   1c3f6:	c1 e0 03             	shl    $0x3,%eax
   1c3f9:	01 d0                	add    %edx,%eax
   1c3fb:	c1 e0 04             	shl    $0x4,%eax
   1c3fe:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c403:	8b 00                	mov    (%eax),%eax
   1c405:	29 c1                	sub    %eax,%ecx
   1c407:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c40b:	89 d0                	mov    %edx,%eax
   1c40d:	c1 e0 03             	shl    $0x3,%eax
   1c410:	01 d0                	add    %edx,%eax
   1c412:	c1 e0 04             	shl    $0x4,%eax
   1c415:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1c41a:	8b 00                	mov    (%eax),%eax
   1c41c:	83 ec 04             	sub    $0x4,%esp
   1c41f:	51                   	push   %ecx
   1c420:	50                   	push   %eax
   1c421:	ff 74 24 14          	pushl  0x14(%esp)
   1c425:	e8 12 dd ff ff       	call   1a13c <gotoxy>
   1c42a:	83 c4 10             	add    $0x10,%esp
						break;
   1c42d:	e9 ae 07 00 00       	jmp    1cbe0 <con_write+0x1288>
					// 如果c是'B'或'e',则第1个代表光标右移的格数.若参数为0则下移一行.
					case 'B': case 'e':							// CSI Pn B - 光标下移.
						if (!par[0]) par[0]++;
   1c432:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c436:	89 d0                	mov    %edx,%eax
   1c438:	c1 e0 03             	shl    $0x3,%eax
   1c43b:	01 d0                	add    %edx,%eax
   1c43d:	c1 e0 04             	shl    $0x4,%eax
   1c440:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c445:	8b 00                	mov    (%eax),%eax
   1c447:	85 c0                	test   %eax,%eax
   1c449:	75 2d                	jne    1c478 <con_write+0xb20>
   1c44b:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c44f:	89 d0                	mov    %edx,%eax
   1c451:	c1 e0 03             	shl    $0x3,%eax
   1c454:	01 d0                	add    %edx,%eax
   1c456:	c1 e0 04             	shl    $0x4,%eax
   1c459:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c45e:	8b 00                	mov    (%eax),%eax
   1c460:	8d 48 01             	lea    0x1(%eax),%ecx
   1c463:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c467:	89 d0                	mov    %edx,%eax
   1c469:	c1 e0 03             	shl    $0x3,%eax
   1c46c:	01 d0                	add    %edx,%eax
   1c46e:	c1 e0 04             	shl    $0x4,%eax
   1c471:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c476:	89 08                	mov    %ecx,(%eax)
						gotoxy(currcons, x, y + par[0]);
   1c478:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c47c:	89 d0                	mov    %edx,%eax
   1c47e:	c1 e0 03             	shl    $0x3,%eax
   1c481:	01 d0                	add    %edx,%eax
   1c483:	c1 e0 04             	shl    $0x4,%eax
   1c486:	05 88 ee 03 00       	add    $0x3ee88,%eax
   1c48b:	8b 08                	mov    (%eax),%ecx
   1c48d:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c491:	89 d0                	mov    %edx,%eax
   1c493:	c1 e0 03             	shl    $0x3,%eax
   1c496:	01 d0                	add    %edx,%eax
   1c498:	c1 e0 04             	shl    $0x4,%eax
   1c49b:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c4a0:	8b 00                	mov    (%eax),%eax
   1c4a2:	01 c1                	add    %eax,%ecx
   1c4a4:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c4a8:	89 d0                	mov    %edx,%eax
   1c4aa:	c1 e0 03             	shl    $0x3,%eax
   1c4ad:	01 d0                	add    %edx,%eax
   1c4af:	c1 e0 04             	shl    $0x4,%eax
   1c4b2:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1c4b7:	8b 00                	mov    (%eax),%eax
   1c4b9:	83 ec 04             	sub    $0x4,%esp
   1c4bc:	51                   	push   %ecx
   1c4bd:	50                   	push   %eax
   1c4be:	ff 74 24 14          	pushl  0x14(%esp)
   1c4c2:	e8 75 dc ff ff       	call   1a13c <gotoxy>
   1c4c7:	83 c4 10             	add    $0x10,%esp
						break;
   1c4ca:	e9 11 07 00 00       	jmp    1cbe0 <con_write+0x1288>
					// 如果c是'C'或'a',则第1个参数代表光标右移的格数.若参数为0则右移1格.
					case 'C': case 'a':							// CSI Pn C - 光标右移.
						if (!par[0]) par[0]++;
   1c4cf:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c4d3:	89 d0                	mov    %edx,%eax
   1c4d5:	c1 e0 03             	shl    $0x3,%eax
   1c4d8:	01 d0                	add    %edx,%eax
   1c4da:	c1 e0 04             	shl    $0x4,%eax
   1c4dd:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c4e2:	8b 00                	mov    (%eax),%eax
   1c4e4:	85 c0                	test   %eax,%eax
   1c4e6:	75 2d                	jne    1c515 <con_write+0xbbd>
   1c4e8:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c4ec:	89 d0                	mov    %edx,%eax
   1c4ee:	c1 e0 03             	shl    $0x3,%eax
   1c4f1:	01 d0                	add    %edx,%eax
   1c4f3:	c1 e0 04             	shl    $0x4,%eax
   1c4f6:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c4fb:	8b 00                	mov    (%eax),%eax
   1c4fd:	8d 48 01             	lea    0x1(%eax),%ecx
   1c500:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c504:	89 d0                	mov    %edx,%eax
   1c506:	c1 e0 03             	shl    $0x3,%eax
   1c509:	01 d0                	add    %edx,%eax
   1c50b:	c1 e0 04             	shl    $0x4,%eax
   1c50e:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c513:	89 08                	mov    %ecx,(%eax)
						gotoxy(currcons, x + par[0], y);
   1c515:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c519:	89 d0                	mov    %edx,%eax
   1c51b:	c1 e0 03             	shl    $0x3,%eax
   1c51e:	01 d0                	add    %edx,%eax
   1c520:	c1 e0 04             	shl    $0x4,%eax
   1c523:	05 88 ee 03 00       	add    $0x3ee88,%eax
   1c528:	8b 08                	mov    (%eax),%ecx
   1c52a:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c52e:	89 d0                	mov    %edx,%eax
   1c530:	c1 e0 03             	shl    $0x3,%eax
   1c533:	01 d0                	add    %edx,%eax
   1c535:	c1 e0 04             	shl    $0x4,%eax
   1c538:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1c53d:	8b 18                	mov    (%eax),%ebx
   1c53f:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c543:	89 d0                	mov    %edx,%eax
   1c545:	c1 e0 03             	shl    $0x3,%eax
   1c548:	01 d0                	add    %edx,%eax
   1c54a:	c1 e0 04             	shl    $0x4,%eax
   1c54d:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c552:	8b 00                	mov    (%eax),%eax
   1c554:	01 d8                	add    %ebx,%eax
   1c556:	83 ec 04             	sub    $0x4,%esp
   1c559:	51                   	push   %ecx
   1c55a:	50                   	push   %eax
   1c55b:	ff 74 24 14          	pushl  0x14(%esp)
   1c55f:	e8 d8 db ff ff       	call   1a13c <gotoxy>
   1c564:	83 c4 10             	add    $0x10,%esp
						break;
   1c567:	e9 74 06 00 00       	jmp    1cbe0 <con_write+0x1288>
					// 如果c是'D',则第1个参数代表光标左移的格数.若参数为0则左移1格.
					case 'D':									// CSI Pn D - 光标左移.
						if (!par[0]) par[0]++;
   1c56c:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c570:	89 d0                	mov    %edx,%eax
   1c572:	c1 e0 03             	shl    $0x3,%eax
   1c575:	01 d0                	add    %edx,%eax
   1c577:	c1 e0 04             	shl    $0x4,%eax
   1c57a:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c57f:	8b 00                	mov    (%eax),%eax
   1c581:	85 c0                	test   %eax,%eax
   1c583:	75 2d                	jne    1c5b2 <con_write+0xc5a>
   1c585:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c589:	89 d0                	mov    %edx,%eax
   1c58b:	c1 e0 03             	shl    $0x3,%eax
   1c58e:	01 d0                	add    %edx,%eax
   1c590:	c1 e0 04             	shl    $0x4,%eax
   1c593:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c598:	8b 00                	mov    (%eax),%eax
   1c59a:	8d 48 01             	lea    0x1(%eax),%ecx
   1c59d:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c5a1:	89 d0                	mov    %edx,%eax
   1c5a3:	c1 e0 03             	shl    $0x3,%eax
   1c5a6:	01 d0                	add    %edx,%eax
   1c5a8:	c1 e0 04             	shl    $0x4,%eax
   1c5ab:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c5b0:	89 08                	mov    %ecx,(%eax)
						gotoxy(currcons, x - par[0], y);
   1c5b2:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c5b6:	89 d0                	mov    %edx,%eax
   1c5b8:	c1 e0 03             	shl    $0x3,%eax
   1c5bb:	01 d0                	add    %edx,%eax
   1c5bd:	c1 e0 04             	shl    $0x4,%eax
   1c5c0:	05 88 ee 03 00       	add    $0x3ee88,%eax
   1c5c5:	8b 08                	mov    (%eax),%ecx
   1c5c7:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c5cb:	89 d0                	mov    %edx,%eax
   1c5cd:	c1 e0 03             	shl    $0x3,%eax
   1c5d0:	01 d0                	add    %edx,%eax
   1c5d2:	c1 e0 04             	shl    $0x4,%eax
   1c5d5:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1c5da:	8b 18                	mov    (%eax),%ebx
   1c5dc:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c5e0:	89 d0                	mov    %edx,%eax
   1c5e2:	c1 e0 03             	shl    $0x3,%eax
   1c5e5:	01 d0                	add    %edx,%eax
   1c5e7:	c1 e0 04             	shl    $0x4,%eax
   1c5ea:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c5ef:	8b 00                	mov    (%eax),%eax
   1c5f1:	29 c3                	sub    %eax,%ebx
   1c5f3:	89 d8                	mov    %ebx,%eax
   1c5f5:	83 ec 04             	sub    $0x4,%esp
   1c5f8:	51                   	push   %ecx
   1c5f9:	50                   	push   %eax
   1c5fa:	ff 74 24 14          	pushl  0x14(%esp)
   1c5fe:	e8 39 db ff ff       	call   1a13c <gotoxy>
   1c603:	83 c4 10             	add    $0x10,%esp
						break;
   1c606:	e9 d5 05 00 00       	jmp    1cbe0 <con_write+0x1288>
					// 如果c是'E',则第1个参数代表光标向下移动的行数,并回到0列.若参数为0则下移1行.
					case 'E':									// CSI Pn E - 光标下移回0列
						if (!par[0]) par[0]++;
   1c60b:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c60f:	89 d0                	mov    %edx,%eax
   1c611:	c1 e0 03             	shl    $0x3,%eax
   1c614:	01 d0                	add    %edx,%eax
   1c616:	c1 e0 04             	shl    $0x4,%eax
   1c619:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c61e:	8b 00                	mov    (%eax),%eax
   1c620:	85 c0                	test   %eax,%eax
   1c622:	75 2d                	jne    1c651 <con_write+0xcf9>
   1c624:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c628:	89 d0                	mov    %edx,%eax
   1c62a:	c1 e0 03             	shl    $0x3,%eax
   1c62d:	01 d0                	add    %edx,%eax
   1c62f:	c1 e0 04             	shl    $0x4,%eax
   1c632:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c637:	8b 00                	mov    (%eax),%eax
   1c639:	8d 48 01             	lea    0x1(%eax),%ecx
   1c63c:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c640:	89 d0                	mov    %edx,%eax
   1c642:	c1 e0 03             	shl    $0x3,%eax
   1c645:	01 d0                	add    %edx,%eax
   1c647:	c1 e0 04             	shl    $0x4,%eax
   1c64a:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c64f:	89 08                	mov    %ecx,(%eax)
						gotoxy(currcons, 0, y + par[0]);
   1c651:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c655:	89 d0                	mov    %edx,%eax
   1c657:	c1 e0 03             	shl    $0x3,%eax
   1c65a:	01 d0                	add    %edx,%eax
   1c65c:	c1 e0 04             	shl    $0x4,%eax
   1c65f:	05 88 ee 03 00       	add    $0x3ee88,%eax
   1c664:	8b 08                	mov    (%eax),%ecx
   1c666:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c66a:	89 d0                	mov    %edx,%eax
   1c66c:	c1 e0 03             	shl    $0x3,%eax
   1c66f:	01 d0                	add    %edx,%eax
   1c671:	c1 e0 04             	shl    $0x4,%eax
   1c674:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c679:	8b 00                	mov    (%eax),%eax
   1c67b:	01 c8                	add    %ecx,%eax
   1c67d:	83 ec 04             	sub    $0x4,%esp
   1c680:	50                   	push   %eax
   1c681:	6a 00                	push   $0x0
   1c683:	ff 74 24 14          	pushl  0x14(%esp)
   1c687:	e8 b0 da ff ff       	call   1a13c <gotoxy>
   1c68c:	83 c4 10             	add    $0x10,%esp
						break;
   1c68f:	e9 4c 05 00 00       	jmp    1cbe0 <con_write+0x1288>
					// 如果c是'F',则第1个参数代表光标向上移动的行数,并回到0列.若参数为0则上移1行.
					case 'F':									// CSI Pn F - 光标上移回0列.
						if (!par[0]) par[0]++;
   1c694:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c698:	89 d0                	mov    %edx,%eax
   1c69a:	c1 e0 03             	shl    $0x3,%eax
   1c69d:	01 d0                	add    %edx,%eax
   1c69f:	c1 e0 04             	shl    $0x4,%eax
   1c6a2:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c6a7:	8b 00                	mov    (%eax),%eax
   1c6a9:	85 c0                	test   %eax,%eax
   1c6ab:	75 2d                	jne    1c6da <con_write+0xd82>
   1c6ad:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c6b1:	89 d0                	mov    %edx,%eax
   1c6b3:	c1 e0 03             	shl    $0x3,%eax
   1c6b6:	01 d0                	add    %edx,%eax
   1c6b8:	c1 e0 04             	shl    $0x4,%eax
   1c6bb:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c6c0:	8b 00                	mov    (%eax),%eax
   1c6c2:	8d 48 01             	lea    0x1(%eax),%ecx
   1c6c5:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c6c9:	89 d0                	mov    %edx,%eax
   1c6cb:	c1 e0 03             	shl    $0x3,%eax
   1c6ce:	01 d0                	add    %edx,%eax
   1c6d0:	c1 e0 04             	shl    $0x4,%eax
   1c6d3:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c6d8:	89 08                	mov    %ecx,(%eax)
						gotoxy(currcons, 0, y - par[0]);
   1c6da:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c6de:	89 d0                	mov    %edx,%eax
   1c6e0:	c1 e0 03             	shl    $0x3,%eax
   1c6e3:	01 d0                	add    %edx,%eax
   1c6e5:	c1 e0 04             	shl    $0x4,%eax
   1c6e8:	05 88 ee 03 00       	add    $0x3ee88,%eax
   1c6ed:	8b 08                	mov    (%eax),%ecx
   1c6ef:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c6f3:	89 d0                	mov    %edx,%eax
   1c6f5:	c1 e0 03             	shl    $0x3,%eax
   1c6f8:	01 d0                	add    %edx,%eax
   1c6fa:	c1 e0 04             	shl    $0x4,%eax
   1c6fd:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c702:	8b 00                	mov    (%eax),%eax
   1c704:	29 c1                	sub    %eax,%ecx
   1c706:	89 c8                	mov    %ecx,%eax
   1c708:	83 ec 04             	sub    $0x4,%esp
   1c70b:	50                   	push   %eax
   1c70c:	6a 00                	push   $0x0
   1c70e:	ff 74 24 14          	pushl  0x14(%esp)
   1c712:	e8 25 da ff ff       	call   1a13c <gotoxy>
   1c717:	83 c4 10             	add    $0x10,%esp
						break;
   1c71a:	e9 c1 04 00 00       	jmp    1cbe0 <con_write+0x1288>
					// 如果c是'd',则第1个参数代表光标所需在的行号(从0计数).
					case 'd':									// CSI Pn d - 在当前列置行位置
						if (par[0]) par[0]--;
   1c71f:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c723:	89 d0                	mov    %edx,%eax
   1c725:	c1 e0 03             	shl    $0x3,%eax
   1c728:	01 d0                	add    %edx,%eax
   1c72a:	c1 e0 04             	shl    $0x4,%eax
   1c72d:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c732:	8b 00                	mov    (%eax),%eax
   1c734:	85 c0                	test   %eax,%eax
   1c736:	74 2d                	je     1c765 <con_write+0xe0d>
   1c738:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c73c:	89 d0                	mov    %edx,%eax
   1c73e:	c1 e0 03             	shl    $0x3,%eax
   1c741:	01 d0                	add    %edx,%eax
   1c743:	c1 e0 04             	shl    $0x4,%eax
   1c746:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c74b:	8b 00                	mov    (%eax),%eax
   1c74d:	8d 48 ff             	lea    -0x1(%eax),%ecx
   1c750:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c754:	89 d0                	mov    %edx,%eax
   1c756:	c1 e0 03             	shl    $0x3,%eax
   1c759:	01 d0                	add    %edx,%eax
   1c75b:	c1 e0 04             	shl    $0x4,%eax
   1c75e:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c763:	89 08                	mov    %ecx,(%eax)
						gotoxy(currcons, x, par[0]);
   1c765:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c769:	89 d0                	mov    %edx,%eax
   1c76b:	c1 e0 03             	shl    $0x3,%eax
   1c76e:	01 d0                	add    %edx,%eax
   1c770:	c1 e0 04             	shl    $0x4,%eax
   1c773:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c778:	8b 08                	mov    (%eax),%ecx
   1c77a:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c77e:	89 d0                	mov    %edx,%eax
   1c780:	c1 e0 03             	shl    $0x3,%eax
   1c783:	01 d0                	add    %edx,%eax
   1c785:	c1 e0 04             	shl    $0x4,%eax
   1c788:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1c78d:	8b 00                	mov    (%eax),%eax
   1c78f:	83 ec 04             	sub    $0x4,%esp
   1c792:	51                   	push   %ecx
   1c793:	50                   	push   %eax
   1c794:	ff 74 24 14          	pushl  0x14(%esp)
   1c798:	e8 9f d9 ff ff       	call   1a13c <gotoxy>
   1c79d:	83 c4 10             	add    $0x10,%esp
						break;
   1c7a0:	e9 3b 04 00 00       	jmp    1cbe0 <con_write+0x1288>
					// 如果c是'H'或'f',则第1个参数代表光标移到的行号,第2个参数代表光标移到的列号.
					case 'H': case 'f':							// CSI Pn H - 光标定位.
						if (par[0]) par[0]--;
   1c7a5:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c7a9:	89 d0                	mov    %edx,%eax
   1c7ab:	c1 e0 03             	shl    $0x3,%eax
   1c7ae:	01 d0                	add    %edx,%eax
   1c7b0:	c1 e0 04             	shl    $0x4,%eax
   1c7b3:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c7b8:	8b 00                	mov    (%eax),%eax
   1c7ba:	85 c0                	test   %eax,%eax
   1c7bc:	74 2d                	je     1c7eb <con_write+0xe93>
   1c7be:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c7c2:	89 d0                	mov    %edx,%eax
   1c7c4:	c1 e0 03             	shl    $0x3,%eax
   1c7c7:	01 d0                	add    %edx,%eax
   1c7c9:	c1 e0 04             	shl    $0x4,%eax
   1c7cc:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c7d1:	8b 00                	mov    (%eax),%eax
   1c7d3:	8d 48 ff             	lea    -0x1(%eax),%ecx
   1c7d6:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c7da:	89 d0                	mov    %edx,%eax
   1c7dc:	c1 e0 03             	shl    $0x3,%eax
   1c7df:	01 d0                	add    %edx,%eax
   1c7e1:	c1 e0 04             	shl    $0x4,%eax
   1c7e4:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c7e9:	89 08                	mov    %ecx,(%eax)
						if (par[1]) par[1]--;
   1c7eb:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c7ef:	89 d0                	mov    %edx,%eax
   1c7f1:	c1 e0 03             	shl    $0x3,%eax
   1c7f4:	01 d0                	add    %edx,%eax
   1c7f6:	c1 e0 04             	shl    $0x4,%eax
   1c7f9:	05 9c ee 03 00       	add    $0x3ee9c,%eax
   1c7fe:	8b 00                	mov    (%eax),%eax
   1c800:	85 c0                	test   %eax,%eax
   1c802:	74 2d                	je     1c831 <con_write+0xed9>
   1c804:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c808:	89 d0                	mov    %edx,%eax
   1c80a:	c1 e0 03             	shl    $0x3,%eax
   1c80d:	01 d0                	add    %edx,%eax
   1c80f:	c1 e0 04             	shl    $0x4,%eax
   1c812:	05 9c ee 03 00       	add    $0x3ee9c,%eax
   1c817:	8b 00                	mov    (%eax),%eax
   1c819:	8d 48 ff             	lea    -0x1(%eax),%ecx
   1c81c:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c820:	89 d0                	mov    %edx,%eax
   1c822:	c1 e0 03             	shl    $0x3,%eax
   1c825:	01 d0                	add    %edx,%eax
   1c827:	c1 e0 04             	shl    $0x4,%eax
   1c82a:	05 9c ee 03 00       	add    $0x3ee9c,%eax
   1c82f:	89 08                	mov    %ecx,(%eax)
						gotoxy(currcons, par[1], par[0]);
   1c831:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c835:	89 d0                	mov    %edx,%eax
   1c837:	c1 e0 03             	shl    $0x3,%eax
   1c83a:	01 d0                	add    %edx,%eax
   1c83c:	c1 e0 04             	shl    $0x4,%eax
   1c83f:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c844:	8b 08                	mov    (%eax),%ecx
   1c846:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c84a:	89 d0                	mov    %edx,%eax
   1c84c:	c1 e0 03             	shl    $0x3,%eax
   1c84f:	01 d0                	add    %edx,%eax
   1c851:	c1 e0 04             	shl    $0x4,%eax
   1c854:	05 9c ee 03 00       	add    $0x3ee9c,%eax
   1c859:	8b 00                	mov    (%eax),%eax
   1c85b:	83 ec 04             	sub    $0x4,%esp
   1c85e:	51                   	push   %ecx
   1c85f:	50                   	push   %eax
   1c860:	ff 74 24 14          	pushl  0x14(%esp)
   1c864:	e8 d3 d8 ff ff       	call   1a13c <gotoxy>
   1c869:	83 c4 10             	add    $0x10,%esp
						break;
   1c86c:	e9 6f 03 00 00       	jmp    1cbe0 <con_write+0x1288>
					// 如果字符c是'J',则第1个参数代表以光标所处位置清屏的方式:
					// 序列: 'ESC [ Ps J'(Ps=0删除光标到屏幕底端;Ps=1删除屏幕开始到光标处;Ps=2整屏删除).
					case 'J':									// CSI Pn J - 屏幕擦除字符.
						csi_J(currcons, par[0]);
   1c871:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c875:	89 d0                	mov    %edx,%eax
   1c877:	c1 e0 03             	shl    $0x3,%eax
   1c87a:	01 d0                	add    %edx,%eax
   1c87c:	c1 e0 04             	shl    $0x4,%eax
   1c87f:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c884:	8b 00                	mov    (%eax),%eax
   1c886:	83 ec 08             	sub    $0x8,%esp
   1c889:	50                   	push   %eax
   1c88a:	ff 74 24 14          	pushl  0x14(%esp)
   1c88e:	e8 f8 e2 ff ff       	call   1ab8b <csi_J>
   1c893:	83 c4 10             	add    $0x10,%esp
						break;
   1c896:	e9 45 03 00 00       	jmp    1cbe0 <con_write+0x1288>
					// 如果字符c是'K',则第1个参数代表以光标所在位置对行中字符进行删除处理的方式:
					// 序列: 'ESC [ Ps K'(Ps=0删除到行尾;Ps=1从开始删除;Ps=2整行都删除).
					case 'K':									// CSI Pn K - 行内擦除字符.
						csi_K(currcons,par[0]);
   1c89b:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c89f:	89 d0                	mov    %edx,%eax
   1c8a1:	c1 e0 03             	shl    $0x3,%eax
   1c8a4:	01 d0                	add    %edx,%eax
   1c8a6:	c1 e0 04             	shl    $0x4,%eax
   1c8a9:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c8ae:	8b 00                	mov    (%eax),%eax
   1c8b0:	83 ec 08             	sub    $0x8,%esp
   1c8b3:	50                   	push   %eax
   1c8b4:	ff 74 24 14          	pushl  0x14(%esp)
   1c8b8:	e8 e4 e3 ff ff       	call   1aca1 <csi_K>
   1c8bd:	83 c4 10             	add    $0x10,%esp
						break;
   1c8c0:	e9 1b 03 00 00       	jmp    1cbe0 <con_write+0x1288>
					// 如果字符c是'L',表示在光标位置处插入n行(控制序列 'ESC [ Pn L')
					case 'L':									// CSI Pn L - 插入行.
						csi_L(currcons, par[0]);
   1c8c5:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c8c9:	89 d0                	mov    %edx,%eax
   1c8cb:	c1 e0 03             	shl    $0x3,%eax
   1c8ce:	01 d0                	add    %edx,%eax
   1c8d0:	c1 e0 04             	shl    $0x4,%eax
   1c8d3:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c8d8:	8b 00                	mov    (%eax),%eax
   1c8da:	83 ec 08             	sub    $0x8,%esp
   1c8dd:	50                   	push   %eax
   1c8de:	ff 74 24 14          	pushl  0x14(%esp)
   1c8e2:	e8 15 ef ff ff       	call   1b7fc <csi_L>
   1c8e7:	83 c4 10             	add    $0x10,%esp
						break;
   1c8ea:	e9 f1 02 00 00       	jmp    1cbe0 <con_write+0x1288>
					// 如果字符c是'M',表示在光标位置处删除n行(控制序列 'ESC [ Pn M')
					case 'M':									// 删除行
						csi_M(currcons, par[0]);
   1c8ef:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c8f3:	89 d0                	mov    %edx,%eax
   1c8f5:	c1 e0 03             	shl    $0x3,%eax
   1c8f8:	01 d0                	add    %edx,%eax
   1c8fa:	c1 e0 04             	shl    $0x4,%eax
   1c8fd:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c902:	8b 00                	mov    (%eax),%eax
   1c904:	83 ec 08             	sub    $0x8,%esp
   1c907:	50                   	push   %eax
   1c908:	ff 74 24 14          	pushl  0x14(%esp)
   1c90c:	e8 73 ef ff ff       	call   1b884 <csi_M>
   1c911:	83 c4 10             	add    $0x10,%esp
						break;
   1c914:	e9 c7 02 00 00       	jmp    1cbe0 <con_write+0x1288>
					// 如果字符c是'P',表示在光标位置处删除n个字符(控制序列 'ESC [ Pn P')
					case 'P':									// 删除字符.
						csi_P(currcons, par[0]);
   1c919:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c91d:	89 d0                	mov    %edx,%eax
   1c91f:	c1 e0 03             	shl    $0x3,%eax
   1c922:	01 d0                	add    %edx,%eax
   1c924:	c1 e0 04             	shl    $0x4,%eax
   1c927:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c92c:	8b 00                	mov    (%eax),%eax
   1c92e:	83 ec 08             	sub    $0x8,%esp
   1c931:	50                   	push   %eax
   1c932:	ff 74 24 14          	pushl  0x14(%esp)
   1c936:	e8 05 ef ff ff       	call   1b840 <csi_P>
   1c93b:	83 c4 10             	add    $0x10,%esp
						break;
   1c93e:	e9 9d 02 00 00       	jmp    1cbe0 <con_write+0x1288>
					// 如果字符c是'@',表示在光标位置处插入n个字符(控制序列 'ESC [ Pn @')
					case '@':									// 插入字符.
						csi_at(currcons, par[0]);
   1c943:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c947:	89 d0                	mov    %edx,%eax
   1c949:	c1 e0 03             	shl    $0x3,%eax
   1c94c:	01 d0                	add    %edx,%eax
   1c94e:	c1 e0 04             	shl    $0x4,%eax
   1c951:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c956:	8b 00                	mov    (%eax),%eax
   1c958:	83 ec 08             	sub    $0x8,%esp
   1c95b:	50                   	push   %eax
   1c95c:	ff 74 24 14          	pushl  0x14(%esp)
   1c960:	e8 53 ee ff ff       	call   1b7b8 <csi_at>
   1c965:	83 c4 10             	add    $0x10,%esp
						break;
   1c968:	e9 73 02 00 00       	jmp    1cbe0 <con_write+0x1288>
					// 如果字符c是'm',表示改变光标处字符的显示属性,比如加粗,加下划线,闪烁,反显等.
					// 转义序列: 'ESC [ Pn m'.n=0正常显示;1加粗;4加下划线;7反显;27正常显示等.
					case 'm':									// CSI Ps m - 设置显示字符属性.
						csi_m(currcons);
   1c96d:	83 ec 0c             	sub    $0xc,%esp
   1c970:	ff 74 24 14          	pushl  0x14(%esp)
   1c974:	e8 71 e4 ff ff       	call   1adea <csi_m>
   1c979:	83 c4 10             	add    $0x10,%esp
						break;
   1c97c:	e9 5f 02 00 00       	jmp    1cbe0 <con_write+0x1288>
					// 如果字符c是'r',则表示两个参数设置滚屏的起始行号和终止行号.
					case 'r':									// CSI Pn r - 设置滚屏上下界.
						if (par[0]) par[0]--;
   1c981:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c985:	89 d0                	mov    %edx,%eax
   1c987:	c1 e0 03             	shl    $0x3,%eax
   1c98a:	01 d0                	add    %edx,%eax
   1c98c:	c1 e0 04             	shl    $0x4,%eax
   1c98f:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c994:	8b 00                	mov    (%eax),%eax
   1c996:	85 c0                	test   %eax,%eax
   1c998:	74 2d                	je     1c9c7 <con_write+0x106f>
   1c99a:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c99e:	89 d0                	mov    %edx,%eax
   1c9a0:	c1 e0 03             	shl    $0x3,%eax
   1c9a3:	01 d0                	add    %edx,%eax
   1c9a5:	c1 e0 04             	shl    $0x4,%eax
   1c9a8:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c9ad:	8b 00                	mov    (%eax),%eax
   1c9af:	8d 48 ff             	lea    -0x1(%eax),%ecx
   1c9b2:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c9b6:	89 d0                	mov    %edx,%eax
   1c9b8:	c1 e0 03             	shl    $0x3,%eax
   1c9bb:	01 d0                	add    %edx,%eax
   1c9bd:	c1 e0 04             	shl    $0x4,%eax
   1c9c0:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1c9c5:	89 08                	mov    %ecx,(%eax)
						if (!par[1]) par[1] = video_num_lines;
   1c9c7:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c9cb:	89 d0                	mov    %edx,%eax
   1c9cd:	c1 e0 03             	shl    $0x3,%eax
   1c9d0:	01 d0                	add    %edx,%eax
   1c9d2:	c1 e0 04             	shl    $0x4,%eax
   1c9d5:	05 9c ee 03 00       	add    $0x3ee9c,%eax
   1c9da:	8b 00                	mov    (%eax),%eax
   1c9dc:	85 c0                	test   %eax,%eax
   1c9de:	75 1b                	jne    1c9fb <con_write+0x10a3>
   1c9e0:	8b 0d 44 ee 03 00    	mov    0x3ee44,%ecx
   1c9e6:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c9ea:	89 d0                	mov    %edx,%eax
   1c9ec:	c1 e0 03             	shl    $0x3,%eax
   1c9ef:	01 d0                	add    %edx,%eax
   1c9f1:	c1 e0 04             	shl    $0x4,%eax
   1c9f4:	05 9c ee 03 00       	add    $0x3ee9c,%eax
   1c9f9:	89 08                	mov    %ecx,(%eax)
						if (par[0] < par[1] &&
   1c9fb:	8b 54 24 08          	mov    0x8(%esp),%edx
   1c9ff:	89 d0                	mov    %edx,%eax
   1ca01:	c1 e0 03             	shl    $0x3,%eax
   1ca04:	01 d0                	add    %edx,%eax
   1ca06:	c1 e0 04             	shl    $0x4,%eax
   1ca09:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1ca0e:	8b 08                	mov    (%eax),%ecx
   1ca10:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ca14:	89 d0                	mov    %edx,%eax
   1ca16:	c1 e0 03             	shl    $0x3,%eax
   1ca19:	01 d0                	add    %edx,%eax
   1ca1b:	c1 e0 04             	shl    $0x4,%eax
   1ca1e:	05 9c ee 03 00       	add    $0x3ee9c,%eax
   1ca23:	8b 00                	mov    (%eax),%eax
   1ca25:	39 c1                	cmp    %eax,%ecx
   1ca27:	0f 83 b2 01 00 00    	jae    1cbdf <con_write+0x1287>
						    par[1] <= video_num_lines) {
   1ca2d:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ca31:	89 d0                	mov    %edx,%eax
   1ca33:	c1 e0 03             	shl    $0x3,%eax
   1ca36:	01 d0                	add    %edx,%eax
   1ca38:	c1 e0 04             	shl    $0x4,%eax
   1ca3b:	05 9c ee 03 00       	add    $0x3ee9c,%eax
   1ca40:	8b 10                	mov    (%eax),%edx
   1ca42:	a1 44 ee 03 00       	mov    0x3ee44,%eax
						break;
					// 如果字符c是'r',则表示两个参数设置滚屏的起始行号和终止行号.
					case 'r':									// CSI Pn r - 设置滚屏上下界.
						if (par[0]) par[0]--;
						if (!par[1]) par[1] = video_num_lines;
						if (par[0] < par[1] &&
   1ca47:	39 c2                	cmp    %eax,%edx
   1ca49:	0f 87 90 01 00 00    	ja     1cbdf <con_write+0x1287>
						    par[1] <= video_num_lines) {
							top = par[0];
   1ca4f:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ca53:	89 d0                	mov    %edx,%eax
   1ca55:	c1 e0 03             	shl    $0x3,%eax
   1ca58:	01 d0                	add    %edx,%eax
   1ca5a:	c1 e0 04             	shl    $0x4,%eax
   1ca5d:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1ca62:	8b 08                	mov    (%eax),%ecx
   1ca64:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ca68:	89 d0                	mov    %edx,%eax
   1ca6a:	c1 e0 03             	shl    $0x3,%eax
   1ca6d:	01 d0                	add    %edx,%eax
   1ca6f:	c1 e0 04             	shl    $0x4,%eax
   1ca72:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1ca77:	89 08                	mov    %ecx,(%eax)
							bottom = par[1];
   1ca79:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ca7d:	89 d0                	mov    %edx,%eax
   1ca7f:	c1 e0 03             	shl    $0x3,%eax
   1ca82:	01 d0                	add    %edx,%eax
   1ca84:	c1 e0 04             	shl    $0x4,%eax
   1ca87:	05 9c ee 03 00       	add    $0x3ee9c,%eax
   1ca8c:	8b 08                	mov    (%eax),%ecx
   1ca8e:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ca92:	89 d0                	mov    %edx,%eax
   1ca94:	c1 e0 03             	shl    $0x3,%eax
   1ca97:	01 d0                	add    %edx,%eax
   1ca99:	c1 e0 04             	shl    $0x4,%eax
   1ca9c:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1caa1:	89 08                	mov    %ecx,(%eax)
						}
						break;
   1caa3:	e9 37 01 00 00       	jmp    1cbdf <con_write+0x1287>
					// 如果字符c是's',则表示保存当前光标所在位置.
					case 's':									// CSI s - 保存光标位置.
						save_cur(currcons);
   1caa8:	83 ec 0c             	sub    $0xc,%esp
   1caab:	ff 74 24 14          	pushl  0x14(%esp)
   1caaf:	e8 14 ee ff ff       	call   1b8c8 <save_cur>
   1cab4:	83 c4 10             	add    $0x10,%esp
						break;
   1cab7:	e9 24 01 00 00       	jmp    1cbe0 <con_write+0x1288>
					// 如果字符c是'u',则表示恢复光标到原保存的位置处.
					case 'u':									// CSI u - 恢复保存的光标位置.
						restore_cur(currcons);
   1cabc:	83 ec 0c             	sub    $0xc,%esp
   1cabf:	ff 74 24 14          	pushl  0x14(%esp)
   1cac3:	e8 56 ee ff ff       	call   1b91e <restore_cur>
   1cac8:	83 c4 10             	add    $0x10,%esp
						break;
   1cacb:	e9 10 01 00 00       	jmp    1cbe0 <con_write+0x1288>
					// 如果字符c是'l'或'b',则分别表示设置屏幕黑屏间隔时间和设置粗体字符显示.此时参数数组中par[1]和par[2]是特征值,它们分别必须par[1]=par[0]+13;
					// par[2]=par[0]+17.在这个条件下,如果c是字符'l',那么par[0]中是开始黑屏时延迟的分钟数;如果c是字符'b',那么par[0]中是设置的粗体字符属性值.
					case 'l': 									/* blank interval */
					case 'b': 									/* bold attribute */
						  if (!((npar >= 2) &&
   1cad0:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cad4:	89 d0                	mov    %edx,%eax
   1cad6:	c1 e0 03             	shl    $0x3,%eax
   1cad9:	01 d0                	add    %edx,%eax
   1cadb:	c1 e0 04             	shl    $0x4,%eax
   1cade:	05 94 ee 03 00       	add    $0x3ee94,%eax
   1cae3:	8b 00                	mov    (%eax),%eax
   1cae5:	83 f8 01             	cmp    $0x1,%eax
   1cae8:	0f 86 2f 02 00 00    	jbe    1cd1d <con_write+0x13c5>
						  ((par[1] - 13) == par[0]) &&
   1caee:	8b 54 24 08          	mov    0x8(%esp),%edx
   1caf2:	89 d0                	mov    %edx,%eax
   1caf4:	c1 e0 03             	shl    $0x3,%eax
   1caf7:	01 d0                	add    %edx,%eax
   1caf9:	c1 e0 04             	shl    $0x4,%eax
   1cafc:	05 9c ee 03 00       	add    $0x3ee9c,%eax
   1cb01:	8b 00                	mov    (%eax),%eax
   1cb03:	8d 48 f3             	lea    -0xd(%eax),%ecx
   1cb06:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cb0a:	89 d0                	mov    %edx,%eax
   1cb0c:	c1 e0 03             	shl    $0x3,%eax
   1cb0f:	01 d0                	add    %edx,%eax
   1cb11:	c1 e0 04             	shl    $0x4,%eax
   1cb14:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1cb19:	8b 00                	mov    (%eax),%eax
						break;
					// 如果字符c是'l'或'b',则分别表示设置屏幕黑屏间隔时间和设置粗体字符显示.此时参数数组中par[1]和par[2]是特征值,它们分别必须par[1]=par[0]+13;
					// par[2]=par[0]+17.在这个条件下,如果c是字符'l',那么par[0]中是开始黑屏时延迟的分钟数;如果c是字符'b',那么par[0]中是设置的粗体字符属性值.
					case 'l': 									/* blank interval */
					case 'b': 									/* bold attribute */
						  if (!((npar >= 2) &&
   1cb1b:	39 c1                	cmp    %eax,%ecx
   1cb1d:	0f 85 fa 01 00 00    	jne    1cd1d <con_write+0x13c5>
						  ((par[1] - 13) == par[0]) &&
						  ((par[2] - 17) == par[0])))
   1cb23:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cb27:	89 d0                	mov    %edx,%eax
   1cb29:	c1 e0 03             	shl    $0x3,%eax
   1cb2c:	01 d0                	add    %edx,%eax
   1cb2e:	c1 e0 04             	shl    $0x4,%eax
   1cb31:	05 a0 ee 03 00       	add    $0x3eea0,%eax
   1cb36:	8b 00                	mov    (%eax),%eax
   1cb38:	8d 48 ef             	lea    -0x11(%eax),%ecx
   1cb3b:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cb3f:	89 d0                	mov    %edx,%eax
   1cb41:	c1 e0 03             	shl    $0x3,%eax
   1cb44:	01 d0                	add    %edx,%eax
   1cb46:	c1 e0 04             	shl    $0x4,%eax
   1cb49:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1cb4e:	8b 00                	mov    (%eax),%eax
						break;
					// 如果字符c是'l'或'b',则分别表示设置屏幕黑屏间隔时间和设置粗体字符显示.此时参数数组中par[1]和par[2]是特征值,它们分别必须par[1]=par[0]+13;
					// par[2]=par[0]+17.在这个条件下,如果c是字符'l',那么par[0]中是开始黑屏时延迟的分钟数;如果c是字符'b',那么par[0]中是设置的粗体字符属性值.
					case 'l': 									/* blank interval */
					case 'b': 									/* bold attribute */
						  if (!((npar >= 2) &&
   1cb50:	39 c1                	cmp    %eax,%ecx
   1cb52:	0f 85 c5 01 00 00    	jne    1cd1d <con_write+0x13c5>
						  ((par[1] - 13) == par[0]) &&
						  ((par[2] - 17) == par[0])))
						    break;
						if ((c == 'l') && (par[0] >= 0) && (par[0] <= 60))
   1cb58:	80 7c 24 07 6c       	cmpb   $0x6c,0x7(%esp)
   1cb5d:	75 44                	jne    1cba3 <con_write+0x124b>
   1cb5f:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cb63:	89 d0                	mov    %edx,%eax
   1cb65:	c1 e0 03             	shl    $0x3,%eax
   1cb68:	01 d0                	add    %edx,%eax
   1cb6a:	c1 e0 04             	shl    $0x4,%eax
   1cb6d:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1cb72:	8b 00                	mov    (%eax),%eax
   1cb74:	83 f8 3c             	cmp    $0x3c,%eax
   1cb77:	77 2a                	ja     1cba3 <con_write+0x124b>
						{
						  blankinterval = HZ * 60 * par[0];
   1cb79:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cb7d:	89 d0                	mov    %edx,%eax
   1cb7f:	c1 e0 03             	shl    $0x3,%eax
   1cb82:	01 d0                	add    %edx,%eax
   1cb84:	c1 e0 04             	shl    $0x4,%eax
   1cb87:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1cb8c:	8b 00                	mov    (%eax),%eax
   1cb8e:	69 c0 70 17 00 00    	imul   $0x1770,%eax,%eax
   1cb94:	a3 24 ee 03 00       	mov    %eax,0x3ee24
						  blankcount = blankinterval;
   1cb99:	a1 24 ee 03 00       	mov    0x3ee24,%eax
   1cb9e:	a3 28 ee 03 00       	mov    %eax,0x3ee28
						}
						if (c == 'b')
   1cba3:	80 7c 24 07 62       	cmpb   $0x62,0x7(%esp)
   1cba8:	0f 85 6f 01 00 00    	jne    1cd1d <con_write+0x13c5>
						  vc_cons[currcons].vc_bold_attr = par[0];
   1cbae:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cbb2:	89 d0                	mov    %edx,%eax
   1cbb4:	c1 e0 03             	shl    $0x3,%eax
   1cbb7:	01 d0                	add    %edx,%eax
   1cbb9:	c1 e0 04             	shl    $0x4,%eax
   1cbbc:	05 98 ee 03 00       	add    $0x3ee98,%eax
   1cbc1:	8b 00                	mov    (%eax),%eax
   1cbc3:	89 c1                	mov    %eax,%ecx
   1cbc5:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cbc9:	89 d0                	mov    %edx,%eax
   1cbcb:	c1 e0 03             	shl    $0x3,%eax
   1cbce:	01 d0                	add    %edx,%eax
   1cbd0:	c1 e0 04             	shl    $0x4,%eax
   1cbd3:	05 64 ee 03 00       	add    $0x3ee64,%eax
   1cbd8:	89 08                	mov    %ecx,(%eax)
   1cbda:	e9 3e 01 00 00       	jmp    1cd1d <con_write+0x13c5>
						if (par[0] < par[1] &&
						    par[1] <= video_num_lines) {
							top = par[0];
							bottom = par[1];
						}
						break;
   1cbdf:	90                   	nop
						  blankcount = blankinterval;
						}
						if (c == 'b')
						  vc_cons[currcons].vc_bold_attr = par[0];
				}
				break;
   1cbe0:	e9 38 01 00 00       	jmp    1cd1d <con_write+0x13c5>
			// ESfunckey:表示接收到了键盘上功能键发出的一个序列,不用显示.于是恢复到正常状态ESnormal.
			// 状态ESfunckey表示接收到了键盘上功能键发出的一个序列,不用显示.于是恢复到正常状态ESnormal.
			case ESfunckey:									// 键盘功能键码.
				state = ESnormal;
   1cbe5:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cbe9:	89 d0                	mov    %edx,%eax
   1cbeb:	c1 e0 03             	shl    $0x3,%eax
   1cbee:	01 d0                	add    %edx,%eax
   1cbf0:	c1 e0 04             	shl    $0x4,%eax
   1cbf3:	05 6c ee 03 00       	add    $0x3ee6c,%eax
   1cbf8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				break;
   1cbfe:	e9 1a 01 00 00       	jmp    1cd1d <con_write+0x13c5>
			// ESsetterm:表示处于设备控制字符串序列状态(DCS).此时收到字符'S',则恢复初始的显示字符属性.若收到的字符是'L'或'l',则开启或关折行显示方式.
			// 状态ESsetterm表示处于设备控制字符串序列状态(DCS).此时若收到字符'S',则恢复初始的显示字符属性.若收到的字符是'L'或'l',则开启或关闭折行显示方式.
			case ESsetterm:  								/* Setterm functions. */
				state = ESnormal;
   1cc03:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cc07:	89 d0                	mov    %edx,%eax
   1cc09:	c1 e0 03             	shl    $0x3,%eax
   1cc0c:	01 d0                	add    %edx,%eax
   1cc0e:	c1 e0 04             	shl    $0x4,%eax
   1cc11:	05 6c ee 03 00       	add    $0x3ee6c,%eax
   1cc16:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				if (c == 'S') {
   1cc1c:	80 7c 24 07 53       	cmpb   $0x53,0x7(%esp)
   1cc21:	0f 85 f6 00 00 00    	jne    1cd1d <con_write+0x13c5>
					def_attr = attr;
   1cc27:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cc2b:	89 d0                	mov    %edx,%eax
   1cc2d:	c1 e0 03             	shl    $0x3,%eax
   1cc30:	01 d0                	add    %edx,%eax
   1cc32:	c1 e0 04             	shl    $0x4,%eax
   1cc35:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1cc3a:	0f b6 08             	movzbl (%eax),%ecx
   1cc3d:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cc41:	89 d0                	mov    %edx,%eax
   1cc43:	c1 e0 03             	shl    $0x3,%eax
   1cc46:	01 d0                	add    %edx,%eax
   1cc48:	c1 e0 04             	shl    $0x4,%eax
   1cc4b:	05 63 ee 03 00       	add    $0x3ee63,%eax
   1cc50:	88 08                	mov    %cl,(%eax)
					video_erase_char = (video_erase_char & 0x0ff) | (def_attr << 8);
   1cc52:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cc56:	89 d0                	mov    %edx,%eax
   1cc58:	c1 e0 03             	shl    $0x3,%eax
   1cc5b:	01 d0                	add    %edx,%eax
   1cc5d:	c1 e0 04             	shl    $0x4,%eax
   1cc60:	05 60 ee 03 00       	add    $0x3ee60,%eax
   1cc65:	0f b7 00             	movzwl (%eax),%eax
   1cc68:	0f b6 c8             	movzbl %al,%ecx
   1cc6b:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cc6f:	89 d0                	mov    %edx,%eax
   1cc71:	c1 e0 03             	shl    $0x3,%eax
   1cc74:	01 d0                	add    %edx,%eax
   1cc76:	c1 e0 04             	shl    $0x4,%eax
   1cc79:	05 63 ee 03 00       	add    $0x3ee63,%eax
   1cc7e:	0f b6 00             	movzbl (%eax),%eax
   1cc81:	0f b6 c0             	movzbl %al,%eax
   1cc84:	c1 e0 08             	shl    $0x8,%eax
   1cc87:	09 c8                	or     %ecx,%eax
   1cc89:	89 c1                	mov    %eax,%ecx
   1cc8b:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cc8f:	89 d0                	mov    %edx,%eax
   1cc91:	c1 e0 03             	shl    $0x3,%eax
   1cc94:	01 d0                	add    %edx,%eax
   1cc96:	c1 e0 04             	shl    $0x4,%eax
   1cc99:	05 60 ee 03 00       	add    $0x3ee60,%eax
   1cc9e:	66 89 08             	mov    %cx,(%eax)
				} else if (c == 'L')
					; 										/*linewrap on*/
				else if (c == 'l')
					; 										/*linewrap off*/
				break;
   1cca1:	eb 7a                	jmp    1cd1d <con_write+0x13c5>
			// ESsetgraph:表示收到设置字符转移序列'ESC ('或'ESC )'.它们分别用于指定G0和G1所用的字符集.此时若收到字符'0',则选择图形字符集作为G0和G1,
			//            若收到的字符是'B',这选择普通ASCII字符集作为G0和G1的字符集.
			// 状态ESsetgraph表示收到设置字符集转移序列'ESC ('或'ESC )'.它们分别用于指定G0和G1所用的字符集.此时若收到字符'0',则选择图形字符集作为G0和G1,若收
			// 到的字符是'B',则选择普通ASCII字符集作为G0和G1的字符集.
			case ESsetgraph:								// 'CSI ( 0'或'CSI ( B' - 选择字符集
				state = ESnormal;
   1cca3:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cca7:	89 d0                	mov    %edx,%eax
   1cca9:	c1 e0 03             	shl    $0x3,%eax
   1ccac:	01 d0                	add    %edx,%eax
   1ccae:	c1 e0 04             	shl    $0x4,%eax
   1ccb1:	05 6c ee 03 00       	add    $0x3ee6c,%eax
   1ccb6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
				if (c == '0')
   1ccbc:	80 7c 24 07 30       	cmpb   $0x30,0x7(%esp)
   1ccc1:	75 1d                	jne    1cce0 <con_write+0x1388>
					translate = GRAF_TRANS;
   1ccc3:	8b 0d 40 e5 02 00    	mov    0x2e540,%ecx
   1ccc9:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cccd:	89 d0                	mov    %edx,%eax
   1cccf:	c1 e0 03             	shl    $0x3,%eax
   1ccd2:	01 d0                	add    %edx,%eax
   1ccd4:	c1 e0 04             	shl    $0x4,%eax
   1ccd7:	05 ec ee 03 00       	add    $0x3eeec,%eax
   1ccdc:	89 08                	mov    %ecx,(%eax)
   1ccde:	eb 3d                	jmp    1cd1d <con_write+0x13c5>
				else if (c == 'B')
   1cce0:	80 7c 24 07 42       	cmpb   $0x42,0x7(%esp)
   1cce5:	75 36                	jne    1cd1d <con_write+0x13c5>
					translate = NORM_TRANS;
   1cce7:	8b 0d 3c e5 02 00    	mov    0x2e53c,%ecx
   1cced:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ccf1:	89 d0                	mov    %edx,%eax
   1ccf3:	c1 e0 03             	shl    $0x3,%eax
   1ccf6:	01 d0                	add    %edx,%eax
   1ccf8:	c1 e0 04             	shl    $0x4,%eax
   1ccfb:	05 ec ee 03 00       	add    $0x3eeec,%eax
   1cd00:	89 08                	mov    %ecx,(%eax)
				break;
   1cd02:	eb 19                	jmp    1cd1d <con_write+0x13c5>
			default:
				state = ESnormal;
   1cd04:	8b 54 24 08          	mov    0x8(%esp),%edx
   1cd08:	89 d0                	mov    %edx,%eax
   1cd0a:	c1 e0 03             	shl    $0x3,%eax
   1cd0d:	01 d0                	add    %edx,%eax
   1cd0f:	c1 e0 04             	shl    $0x4,%eax
   1cd12:	05 6c ee 03 00       	add    $0x3ee6c,%eax
   1cd17:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	currcons = tty - tty_table;
	if ((currcons >= MAX_CONSOLES) || (currcons < 0))
		panic("con_write: illegal tty");

	nr = CHARS(tty->write_q);										// 取写队列中字符数,在tty.h文件中
	while (nr--) {
   1cd1d:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1cd21:	8d 50 ff             	lea    -0x1(%eax),%edx
   1cd24:	89 54 24 0c          	mov    %edx,0xc(%esp)
   1cd28:	85 c0                	test   %eax,%eax
   1cd2a:	0f 85 82 ec ff ff    	jne    1b9b2 <con_write+0x5a>
   1cd30:	eb 01                	jmp    1cd33 <con_write+0x13db>
		if (tty->stopped)
			break;
   1cd32:	90                   	nop
				break;
			default:
				state = ESnormal;
        }
    }
	set_cursor(currcons);									// 最后根据上面设置的光标位置,设置显示控制器中光标位置.
   1cd33:	83 ec 0c             	sub    $0xc,%esp
   1cd36:	ff 74 24 14          	pushl  0x14(%esp)
   1cd3a:	e8 c0 e6 ff ff       	call   1b3ff <set_cursor>
   1cd3f:	83 c4 10             	add    $0x10,%esp
}
   1cd42:	90                   	nop
   1cd43:	83 c4 18             	add    $0x18,%esp
   1cd46:	5b                   	pop    %ebx
   1cd47:	c3                   	ret    

0001cd48 <con_init>:
 *
 * 这个子程序初始化控制台中断,其他什么都不做.如果你想让屏幕干净的话,就使用适当的转义字符序列调用tty_write()函数.
 * 读取setup.s程序保存的信息,用以确定当前显示器类型,并且设置所有相关参数.
 */
void con_init(void)
{
   1cd48:	57                   	push   %edi
   1cd49:	56                   	push   %esi
   1cd4a:	53                   	push   %ebx
   1cd4b:	83 ec 20             	sub    $0x20,%esp
	register unsigned char a;
	char *display_desc = "????";
   1cd4e:	c7 44 24 1c 84 4f 02 	movl   $0x24f84,0x1c(%esp)
   1cd55:	00 
	char *display_ptr;
	int currcons = 0;								// 当前虚拟控制台号.
   1cd56:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
   1cd5d:	00 
	long base, term;
	long video_memory;

	// 初始化屏幕的列数
	video_num_columns = ORIG_VIDEO_COLS;
   1cd5e:	b8 06 00 09 00       	mov    $0x90006,%eax
   1cd63:	0f b7 00             	movzwl (%eax),%eax
   1cd66:	66 c1 e8 08          	shr    $0x8,%ax
   1cd6a:	0f b7 c0             	movzwl %ax,%eax
   1cd6d:	a3 34 ee 03 00       	mov    %eax,0x3ee34
	// 屏幕每行的字节数等于屏幕列数乘以2，因为一个显示字节需要一个控制字节
	video_size_row = video_num_columns * 2;
   1cd72:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1cd77:	01 c0                	add    %eax,%eax
   1cd79:	a3 40 ee 03 00       	mov    %eax,0x3ee40
	// 初始化屏幕的行数
	video_num_lines = ORIG_VIDEO_LINES;
   1cd7e:	b8 0e 00 09 00       	mov    $0x9000e,%eax
   1cd83:	0f b7 00             	movzwl (%eax),%eax
   1cd86:	0f b7 c0             	movzwl %ax,%eax
   1cd89:	0f b6 c0             	movzbl %al,%eax
   1cd8c:	a3 44 ee 03 00       	mov    %eax,0x3ee44
	// 初始化显示页数
	video_page = ORIG_VIDEO_PAGE;
   1cd91:	b8 04 00 09 00       	mov    $0x90004,%eax
   1cd96:	0f b7 00             	movzwl (%eax),%eax
   1cd99:	a2 48 ee 03 00       	mov    %al,0x3ee48
	// 设置此时第0个(currcons)显示终端的擦除字符属性及字符
	video_erase_char = 0x0720;
   1cd9e:	8b 54 24 14          	mov    0x14(%esp),%edx
   1cda2:	89 d0                	mov    %edx,%eax
   1cda4:	c1 e0 03             	shl    $0x3,%eax
   1cda7:	01 d0                	add    %edx,%eax
   1cda9:	c1 e0 04             	shl    $0x4,%eax
   1cdac:	05 60 ee 03 00       	add    $0x3ee60,%eax
   1cdb1:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// 初始化黑屏时间计数
	blankcount = blankinterval;
   1cdb6:	a1 24 ee 03 00       	mov    0x3ee24,%eax
   1cdbb:	a3 28 ee 03 00       	mov    %eax,0x3ee28

	// 然后根据显示模式是单色还是彩色,分别设置所使用的显示内存起始位置以及显示寄存器索引端口号和显示寄存器数据端口号.如果获得的BIOS显示方式等于7,
	// 则表示是单色显示卡.
	if (ORIG_VIDEO_MODE == 7)					/* Is this a monochrome display? */
   1cdc0:	b8 06 00 09 00       	mov    $0x90006,%eax
   1cdc5:	0f b7 00             	movzwl (%eax),%eax
   1cdc8:	0f b7 c0             	movzwl %ax,%eax
   1cdcb:	0f b6 c0             	movzbl %al,%eax
   1cdce:	83 f8 07             	cmp    $0x7,%eax
   1cdd1:	75 68                	jne    1ce3b <con_init+0xf3>
	{
		video_mem_base = 0xb0000;				// 设置单显映像内存起始地址.
   1cdd3:	c7 05 38 ee 03 00 00 	movl   $0xb0000,0x3ee38
   1cdda:	00 0b 00 
		video_port_reg = 0x3b4;					// 设置单显索引寄存器端口.
   1cddd:	66 c7 05 4a ee 03 00 	movw   $0x3b4,0x3ee4a
   1cde4:	b4 03 
		video_port_val = 0x3b5;					// 设置单显数据寄存器端口.
   1cde6:	66 c7 05 4c ee 03 00 	movw   $0x3b5,0x3ee4c
   1cded:	b5 03 
		// 0x10,则说明是EGA卡.因此初始显示类型为EGA单色.虽然EGA卡上有较多显示内存,但在单色方式下最多只能利用地址范围在0xb0000~xb8000之间的显示内存.
		// 然后置显示器描述字符串为'EGAm'.
		// 并会在系统初始化期间显示器描述符字符串将显示在屏幕的右上角.
		// 注意,这里使用了bx在调用中断int 0x10前后是否被改变的方法来判断卡的类型.若BL在中断调用后值被改变,表示显示卡支持ah=12h功能调用,是EGA或后推
		// 出来的VGA等类型显示卡.若中断调用返回值末变,表示显示卡不支持这个功能,则说明是一般单色显示卡.
		if ((ORIG_VIDEO_EGA_BX & 0xff) != 0x10)
   1cdef:	b8 0a 00 09 00       	mov    $0x9000a,%eax
   1cdf4:	0f b7 00             	movzwl (%eax),%eax
   1cdf7:	0f b7 c0             	movzwl %ax,%eax
   1cdfa:	0f b6 c0             	movzbl %al,%eax
   1cdfd:	83 f8 10             	cmp    $0x10,%eax
   1ce00:	74 1e                	je     1ce20 <con_init+0xd8>
		{
			video_type = VIDEO_TYPE_EGAM;		// 设置显示类型(EGA单色).
   1ce02:	c6 05 30 ee 03 00 20 	movb   $0x20,0x3ee30
			video_mem_term = 0xb8000;			// 设置显示内存末端地址.
   1ce09:	c7 05 3c ee 03 00 00 	movl   $0xb8000,0x3ee3c
   1ce10:	80 0b 00 
			display_desc = "EGAm";				// 设置显示描述字符串.
   1ce13:	c7 44 24 1c 89 4f 02 	movl   $0x24f89,0x1c(%esp)
   1ce1a:	00 
   1ce1b:	e9 88 00 00 00       	jmp    1cea8 <con_init+0x160>
		}
		// 如果BX寄存器的值等于0x10,则说明是单色显示卡MDA,仅有8KB显示内存.
		else
		{
			video_type = VIDEO_TYPE_MDA;		// 设置显示类型(MDA单色).
   1ce20:	c6 05 30 ee 03 00 10 	movb   $0x10,0x3ee30
			video_mem_term = 0xb2000;			// 设置显示内存末端地址.
   1ce27:	c7 05 3c ee 03 00 00 	movl   $0xb2000,0x3ee3c
   1ce2e:	20 0b 00 
			display_desc = "*MDA";				// 设置显示描述字符串.
   1ce31:	c7 44 24 1c 8e 4f 02 	movl   $0x24f8e,0x1c(%esp)
   1ce38:	00 
   1ce39:	eb 6d                	jmp    1cea8 <con_init+0x160>
		}
	}
	// 如果显示方式不为7,说明是彩色显示卡.此时文本方式下所用显示内存起始地址为0xb8000;显示控制索引寄存器端口地址为0x3d4;数据寄存器端口地址为0x3d5.
	else										/* If not, it is color. */
	{
		can_do_colour = 1;						// 设置彩色显示标志.
   1ce3b:	c7 05 50 ee 03 00 01 	movl   $0x1,0x3ee50
   1ce42:	00 00 00 
		video_mem_base = 0xb8000;				// 显示内存起始地址.
   1ce45:	c7 05 38 ee 03 00 00 	movl   $0xb8000,0x3ee38
   1ce4c:	80 0b 00 
		video_port_reg	= 0x3d4;				// 设置彩色显示索引寄存器端口.
   1ce4f:	66 c7 05 4a ee 03 00 	movw   $0x3d4,0x3ee4a
   1ce56:	d4 03 
		video_port_val	= 0x3d5;				// 设置彩色显示数据寄存器端口.
   1ce58:	66 c7 05 4c ee 03 00 	movw   $0x3d5,0x3ee4c
   1ce5f:	d5 03 
		// 再判断显示卡类别.如果BX不等于0x10,则说明是EGA显示卡,此时共有32KB显示内存可用(0xb8000~0xc0000).否则说明是CGA显示卡,只能使用8KB显示内存(
		// 0xb8000~0xba000).
		if ((ORIG_VIDEO_EGA_BX & 0xff) != 0x10)
   1ce61:	b8 0a 00 09 00       	mov    $0x9000a,%eax
   1ce66:	0f b7 00             	movzwl (%eax),%eax
   1ce69:	0f b7 c0             	movzwl %ax,%eax
   1ce6c:	0f b6 c0             	movzbl %al,%eax
   1ce6f:	83 f8 10             	cmp    $0x10,%eax
   1ce72:	74 1b                	je     1ce8f <con_init+0x147>
		{
			video_type = VIDEO_TYPE_EGAC;		// 设置显示类型(EGA彩色).
   1ce74:	c6 05 30 ee 03 00 21 	movb   $0x21,0x3ee30
			video_mem_term = 0xc0000;			// 设置显示内存末端地址.
   1ce7b:	c7 05 3c ee 03 00 00 	movl   $0xc0000,0x3ee3c
   1ce82:	00 0c 00 
			display_desc = "EGAc";				// 设置显示描述字符串.
   1ce85:	c7 44 24 1c 93 4f 02 	movl   $0x24f93,0x1c(%esp)
   1ce8c:	00 
   1ce8d:	eb 19                	jmp    1cea8 <con_init+0x160>
		}
		else
		{
			video_type = VIDEO_TYPE_CGA;		// 设置显示类型(CGA).
   1ce8f:	c6 05 30 ee 03 00 11 	movb   $0x11,0x3ee30
			video_mem_term = 0xba000;			// 设置显示内存末端地址.
   1ce96:	c7 05 3c ee 03 00 00 	movl   $0xba000,0x3ee3c
   1ce9d:	a0 0b 00 
			display_desc = "*CGA";				// 设置显示描述字符串.
   1cea0:	c7 44 24 1c 98 4f 02 	movl   $0x24f98,0x1c(%esp)
   1cea7:	00 
	// 现在来计算当前显示卡内存上可以开设的虚拟控制台数量.硬件允许的虚拟控制台数量等于总显示内存量video_memory除以每个虚拟控制台占用的
	// 字节数.每个虚拟控制台占用的显示内存数等于屏幕显示数video_num_lines乘上每行字符占有的字节数video_size_row.
	// 如果硬件允许开设的虚拟控制台数量大于系统既定的数量MAX_CONSOLES,就把虚拟控制台数量设置为MAX_CONSOLES.若这样计算出的虚拟控制台
	// 数量为0,则设置为1.
	// 最后用显示内存数除以判断出的虚拟控制台数即得到每个虚拟控制台占用显示内存字节数.
	video_memory = video_mem_term - video_mem_base;
   1cea8:	8b 15 3c ee 03 00    	mov    0x3ee3c,%edx
   1ceae:	a1 38 ee 03 00       	mov    0x3ee38,%eax
   1ceb3:	29 c2                	sub    %eax,%edx
   1ceb5:	89 d0                	mov    %edx,%eax
   1ceb7:	89 44 24 08          	mov    %eax,0x8(%esp)
	// 根据实际的显示内存的大小计算显示控制终端的实际数量
	NR_CONSOLES = video_memory / (video_num_lines * video_size_row);
   1cebb:	8b 44 24 08          	mov    0x8(%esp),%eax
   1cebf:	8b 0d 44 ee 03 00    	mov    0x3ee44,%ecx
   1cec5:	8b 15 40 ee 03 00    	mov    0x3ee40,%edx
   1cecb:	89 d6                	mov    %edx,%esi
   1cecd:	0f af f1             	imul   %ecx,%esi
   1ced0:	ba 00 00 00 00       	mov    $0x0,%edx
   1ced5:	f7 f6                	div    %esi
   1ced7:	a3 20 ee 03 00       	mov    %eax,0x3ee20
	// 显示终端的最大数量是MAX_CONSOLES,设置在tty.h头文件中
	if (NR_CONSOLES > MAX_CONSOLES)
   1cedc:	a1 20 ee 03 00       	mov    0x3ee20,%eax
   1cee1:	83 f8 08             	cmp    $0x8,%eax
   1cee4:	7e 0a                	jle    1cef0 <con_init+0x1a8>
		NR_CONSOLES = MAX_CONSOLES;
   1cee6:	c7 05 20 ee 03 00 08 	movl   $0x8,0x3ee20
   1ceed:	00 00 00 
	// 如果计算出来的显示终端数量为0，则将显示终端数量设置为1
	if (!NR_CONSOLES)
   1cef0:	a1 20 ee 03 00       	mov    0x3ee20,%eax
   1cef5:	85 c0                	test   %eax,%eax
   1cef7:	75 0a                	jne    1cf03 <con_init+0x1bb>
		NR_CONSOLES = 1;
   1cef9:	c7 05 20 ee 03 00 01 	movl   $0x1,0x3ee20
   1cf00:	00 00 00 
	video_memory /= NR_CONSOLES;				// 每个虚拟控制台占用显示内存字节数.
   1cf03:	8b 3d 20 ee 03 00    	mov    0x3ee20,%edi
   1cf09:	8b 44 24 08          	mov    0x8(%esp),%eax
   1cf0d:	99                   	cltd   
   1cf0e:	f7 ff                	idiv   %edi
   1cf10:	89 44 24 08          	mov    %eax,0x8(%esp)

	/* Let the user known what kind of display driver we are using */

	// 然后我们在屏幕的右上角显示描述字符串.采用的方法是直接将字符串写到显示内存的相应位置处.首先将显示指针display_ptr指到屏幕第1行右端差
	// 4个字符处(每个字符需2个字节,因此减8),然后循环复制字符串的字符,并且每复制1个字符都空开1个属性字节.
	display_ptr = ((char *)video_mem_base) + video_size_row - 8;
   1cf14:	8b 15 40 ee 03 00    	mov    0x3ee40,%edx
   1cf1a:	a1 38 ee 03 00       	mov    0x3ee38,%eax
   1cf1f:	01 d0                	add    %edx,%eax
   1cf21:	83 e8 08             	sub    $0x8,%eax
   1cf24:	89 44 24 18          	mov    %eax,0x18(%esp)
	while (*display_desc)
   1cf28:	eb 20                	jmp    1cf4a <con_init+0x202>
	{
		*display_ptr++ = *display_desc++;
   1cf2a:	8b 44 24 18          	mov    0x18(%esp),%eax
   1cf2e:	8d 50 01             	lea    0x1(%eax),%edx
   1cf31:	89 54 24 18          	mov    %edx,0x18(%esp)
   1cf35:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1cf39:	8d 4a 01             	lea    0x1(%edx),%ecx
   1cf3c:	89 4c 24 1c          	mov    %ecx,0x1c(%esp)
   1cf40:	0f b6 12             	movzbl (%edx),%edx
   1cf43:	88 10                	mov    %dl,(%eax)
		display_ptr++;
   1cf45:	83 44 24 18 01       	addl   $0x1,0x18(%esp)
	/* Let the user known what kind of display driver we are using */

	// 然后我们在屏幕的右上角显示描述字符串.采用的方法是直接将字符串写到显示内存的相应位置处.首先将显示指针display_ptr指到屏幕第1行右端差
	// 4个字符处(每个字符需2个字节,因此减8),然后循环复制字符串的字符,并且每复制1个字符都空开1个属性字节.
	display_ptr = ((char *)video_mem_base) + video_size_row - 8;
	while (*display_desc)
   1cf4a:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1cf4e:	0f b6 00             	movzbl (%eax),%eax
   1cf51:	84 c0                	test   %al,%al
   1cf53:	75 d5                	jne    1cf2a <con_init+0x1e2>
	/* 初始化用于滚屏的变量(主要用于EGA/VGA) */

	// 注意,此时当前虚拟控制台号curcons已经被初始化0.因此下面实际上是初始化0号虚拟控制台的结构vc_cons[0]中的所有字段值.下面首先设置0号控制台
	// 的默认滚屏开始位置video_mem_start和默认滚屏末行内存位置,实际上它们也就是0号控制台占用的部分显示内存区域.然后初始化设置0号虚拟控制台的
	// 其它属性和标志值.
	base = origin = video_mem_start = video_mem_base;						// 默认滚屏开始内存位置.
   1cf55:	8b 0d 38 ee 03 00    	mov    0x3ee38,%ecx
   1cf5b:	8b 54 24 14          	mov    0x14(%esp),%edx
   1cf5f:	89 d0                	mov    %edx,%eax
   1cf61:	c1 e0 03             	shl    $0x3,%eax
   1cf64:	01 d0                	add    %edx,%eax
   1cf66:	c1 e0 04             	shl    $0x4,%eax
   1cf69:	05 d8 ee 03 00       	add    $0x3eed8,%eax
   1cf6e:	89 08                	mov    %ecx,(%eax)
   1cf70:	8b 54 24 14          	mov    0x14(%esp),%edx
   1cf74:	89 d0                	mov    %edx,%eax
   1cf76:	c1 e0 03             	shl    $0x3,%eax
   1cf79:	01 d0                	add    %edx,%eax
   1cf7b:	c1 e0 04             	shl    $0x4,%eax
   1cf7e:	05 d8 ee 03 00       	add    $0x3eed8,%eax
   1cf83:	8b 08                	mov    (%eax),%ecx
   1cf85:	8b 54 24 14          	mov    0x14(%esp),%edx
   1cf89:	89 d0                	mov    %edx,%eax
   1cf8b:	c1 e0 03             	shl    $0x3,%eax
   1cf8e:	01 d0                	add    %edx,%eax
   1cf90:	c1 e0 04             	shl    $0x4,%eax
   1cf93:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1cf98:	89 08                	mov    %ecx,(%eax)
   1cf9a:	8b 54 24 14          	mov    0x14(%esp),%edx
   1cf9e:	89 d0                	mov    %edx,%eax
   1cfa0:	c1 e0 03             	shl    $0x3,%eax
   1cfa3:	01 d0                	add    %edx,%eax
   1cfa5:	c1 e0 04             	shl    $0x4,%eax
   1cfa8:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1cfad:	8b 00                	mov    (%eax),%eax
   1cfaf:	89 44 24 10          	mov    %eax,0x10(%esp)
	term = video_mem_end = base + video_memory;								// 0号屏幕内存末端位置.
   1cfb3:	8b 54 24 10          	mov    0x10(%esp),%edx
   1cfb7:	8b 44 24 08          	mov    0x8(%esp),%eax
   1cfbb:	01 d0                	add    %edx,%eax
   1cfbd:	89 c1                	mov    %eax,%ecx
   1cfbf:	8b 54 24 14          	mov    0x14(%esp),%edx
   1cfc3:	89 d0                	mov    %edx,%eax
   1cfc5:	c1 e0 03             	shl    $0x3,%eax
   1cfc8:	01 d0                	add    %edx,%eax
   1cfca:	c1 e0 04             	shl    $0x4,%eax
   1cfcd:	05 dc ee 03 00       	add    $0x3eedc,%eax
   1cfd2:	89 08                	mov    %ecx,(%eax)
   1cfd4:	8b 54 24 14          	mov    0x14(%esp),%edx
   1cfd8:	89 d0                	mov    %edx,%eax
   1cfda:	c1 e0 03             	shl    $0x3,%eax
   1cfdd:	01 d0                	add    %edx,%eax
   1cfdf:	c1 e0 04             	shl    $0x4,%eax
   1cfe2:	05 dc ee 03 00       	add    $0x3eedc,%eax
   1cfe7:	8b 00                	mov    (%eax),%eax
   1cfe9:	89 44 24 0c          	mov    %eax,0xc(%esp)
	scr_end	= video_mem_start + video_num_lines * video_size_row;			// 滚屏末端位置.
   1cfed:	8b 54 24 14          	mov    0x14(%esp),%edx
   1cff1:	89 d0                	mov    %edx,%eax
   1cff3:	c1 e0 03             	shl    $0x3,%eax
   1cff6:	01 d0                	add    %edx,%eax
   1cff8:	c1 e0 04             	shl    $0x4,%eax
   1cffb:	05 d8 ee 03 00       	add    $0x3eed8,%eax
   1d000:	8b 10                	mov    (%eax),%edx
   1d002:	8b 0d 44 ee 03 00    	mov    0x3ee44,%ecx
   1d008:	a1 40 ee 03 00       	mov    0x3ee40,%eax
   1d00d:	0f af c1             	imul   %ecx,%eax
   1d010:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
   1d013:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d017:	89 d0                	mov    %edx,%eax
   1d019:	c1 e0 03             	shl    $0x3,%eax
   1d01c:	01 d0                	add    %edx,%eax
   1d01e:	c1 e0 04             	shl    $0x4,%eax
   1d021:	05 7c ee 03 00       	add    $0x3ee7c,%eax
   1d026:	89 08                	mov    %ecx,(%eax)
	top	= 0;																// 初始设置滚动时顶行行号.
   1d028:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d02c:	89 d0                	mov    %edx,%eax
   1d02e:	c1 e0 03             	shl    $0x3,%eax
   1d031:	01 d0                	add    %edx,%eax
   1d033:	c1 e0 04             	shl    $0x4,%eax
   1d036:	05 8c ee 03 00       	add    $0x3ee8c,%eax
   1d03b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	bottom	= video_num_lines;												// 初始设置滚动时底行行号.
   1d041:	8b 0d 44 ee 03 00    	mov    0x3ee44,%ecx
   1d047:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d04b:	89 d0                	mov    %edx,%eax
   1d04d:	c1 e0 03             	shl    $0x3,%eax
   1d050:	01 d0                	add    %edx,%eax
   1d052:	c1 e0 04             	shl    $0x4,%eax
   1d055:	05 90 ee 03 00       	add    $0x3ee90,%eax
   1d05a:	89 08                	mov    %ecx,(%eax)
	attr = 0x07;															// 初始设置显示字符属性(黑底白字).
   1d05c:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d060:	89 d0                	mov    %edx,%eax
   1d062:	c1 e0 03             	shl    $0x3,%eax
   1d065:	01 d0                	add    %edx,%eax
   1d067:	c1 e0 04             	shl    $0x4,%eax
   1d06a:	05 62 ee 03 00       	add    $0x3ee62,%eax
   1d06f:	c6 00 07             	movb   $0x7,(%eax)
	def_attr = 0x07;														// 设置默认显示字符属性.
   1d072:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d076:	89 d0                	mov    %edx,%eax
   1d078:	c1 e0 03             	shl    $0x3,%eax
   1d07b:	01 d0                	add    %edx,%eax
   1d07d:	c1 e0 04             	shl    $0x4,%eax
   1d080:	05 63 ee 03 00       	add    $0x3ee63,%eax
   1d085:	c6 00 07             	movb   $0x7,(%eax)
	restate = state = ESnormal;												// 初始化转义序列操作的前和下一状态.
   1d088:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d08c:	89 d0                	mov    %edx,%eax
   1d08e:	c1 e0 03             	shl    $0x3,%eax
   1d091:	01 d0                	add    %edx,%eax
   1d093:	c1 e0 04             	shl    $0x4,%eax
   1d096:	05 6c ee 03 00       	add    $0x3ee6c,%eax
   1d09b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   1d0a1:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d0a5:	89 d0                	mov    %edx,%eax
   1d0a7:	c1 e0 03             	shl    $0x3,%eax
   1d0aa:	01 d0                	add    %edx,%eax
   1d0ac:	c1 e0 04             	shl    $0x4,%eax
   1d0af:	05 6c ee 03 00       	add    $0x3ee6c,%eax
   1d0b4:	8b 08                	mov    (%eax),%ecx
   1d0b6:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d0ba:	89 d0                	mov    %edx,%eax
   1d0bc:	c1 e0 03             	shl    $0x3,%eax
   1d0bf:	01 d0                	add    %edx,%eax
   1d0c1:	c1 e0 04             	shl    $0x4,%eax
   1d0c4:	05 70 ee 03 00       	add    $0x3ee70,%eax
   1d0c9:	89 08                	mov    %ecx,(%eax)
	checkin = 0;
   1d0cb:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d0cf:	89 d0                	mov    %edx,%eax
   1d0d1:	c1 e0 03             	shl    $0x3,%eax
   1d0d4:	01 d0                	add    %edx,%eax
   1d0d6:	c1 e0 04             	shl    $0x4,%eax
   1d0d9:	05 74 ee 03 00       	add    $0x3ee74,%eax
   1d0de:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	ques = 0;																// 收到问号字符标志.
   1d0e4:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d0e8:	89 d0                	mov    %edx,%eax
   1d0ea:	c1 e0 03             	shl    $0x3,%eax
   1d0ed:	01 d0                	add    %edx,%eax
   1d0ef:	c1 e0 04             	shl    $0x4,%eax
   1d0f2:	05 68 ee 03 00       	add    $0x3ee68,%eax
   1d0f7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	iscolor = 0;															// 彩色显示标志.
   1d0fd:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d101:	89 d0                	mov    %edx,%eax
   1d103:	c1 e0 03             	shl    $0x3,%eax
   1d106:	01 d0                	add    %edx,%eax
   1d108:	c1 e0 04             	shl    $0x4,%eax
   1d10b:	05 e8 ee 03 00       	add    $0x3eee8,%eax
   1d110:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	translate = NORM_TRANS;													// 使用的字符集(普通ASCII码表).
   1d116:	8b 0d 3c e5 02 00    	mov    0x2e53c,%ecx
   1d11c:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d120:	89 d0                	mov    %edx,%eax
   1d122:	c1 e0 03             	shl    $0x3,%eax
   1d125:	01 d0                	add    %edx,%eax
   1d127:	c1 e0 04             	shl    $0x4,%eax
   1d12a:	05 ec ee 03 00       	add    $0x3eeec,%eax
   1d12f:	89 08                	mov    %ecx,(%eax)
	vc_cons[0].vc_bold_attr = -1;											// 粗体字符属性标志(-1表示不用).
   1d131:	c7 05 64 ee 03 00 ff 	movl   $0xffffffff,0x3ee64
   1d138:	ff ff ff 

	// 在设置了0号控制台当前光标所有位置和光标对应的内存位置pos后,循环设置其余的几个虚拟控制台结构的参数值.除了各自占用的显示内存开始和结束位置不同,
	// 它们的初始值基本上都与0号控制台相同.
	gotoxy(currcons, ORIG_X, ORIG_Y);
   1d13b:	b8 01 00 09 00       	mov    $0x90001,%eax
   1d140:	0f b6 00             	movzbl (%eax),%eax
   1d143:	0f b6 d0             	movzbl %al,%edx
   1d146:	b8 00 00 09 00       	mov    $0x90000,%eax
   1d14b:	0f b6 00             	movzbl (%eax),%eax
   1d14e:	0f b6 c0             	movzbl %al,%eax
   1d151:	52                   	push   %edx
   1d152:	50                   	push   %eax
   1d153:	ff 74 24 1c          	pushl  0x1c(%esp)
   1d157:	e8 e0 cf ff ff       	call   1a13c <gotoxy>
   1d15c:	83 c4 0c             	add    $0xc,%esp
  	for (currcons = 1; currcons < NR_CONSOLES; currcons++) {
   1d15f:	c7 44 24 14 01 00 00 	movl   $0x1,0x14(%esp)
   1d166:	00 
   1d167:	e9 e3 00 00 00       	jmp    1d24f <con_init+0x507>
		vc_cons[currcons] = vc_cons[0];         							// 复制0号结构的参数.
   1d16c:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d170:	89 d0                	mov    %edx,%eax
   1d172:	c1 e0 03             	shl    $0x3,%eax
   1d175:	01 d0                	add    %edx,%eax
   1d177:	c1 e0 04             	shl    $0x4,%eax
   1d17a:	05 60 ee 03 00       	add    $0x3ee60,%eax
   1d17f:	89 c2                	mov    %eax,%edx
   1d181:	bb 60 ee 03 00       	mov    $0x3ee60,%ebx
   1d186:	b8 24 00 00 00       	mov    $0x24,%eax
   1d18b:	89 d7                	mov    %edx,%edi
   1d18d:	89 de                	mov    %ebx,%esi
   1d18f:	89 c1                	mov    %eax,%ecx
   1d191:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		origin = video_mem_start = (base += video_memory);
   1d193:	8b 44 24 08          	mov    0x8(%esp),%eax
   1d197:	01 44 24 10          	add    %eax,0x10(%esp)
   1d19b:	8b 4c 24 10          	mov    0x10(%esp),%ecx
   1d19f:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d1a3:	89 d0                	mov    %edx,%eax
   1d1a5:	c1 e0 03             	shl    $0x3,%eax
   1d1a8:	01 d0                	add    %edx,%eax
   1d1aa:	c1 e0 04             	shl    $0x4,%eax
   1d1ad:	05 d8 ee 03 00       	add    $0x3eed8,%eax
   1d1b2:	89 08                	mov    %ecx,(%eax)
   1d1b4:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d1b8:	89 d0                	mov    %edx,%eax
   1d1ba:	c1 e0 03             	shl    $0x3,%eax
   1d1bd:	01 d0                	add    %edx,%eax
   1d1bf:	c1 e0 04             	shl    $0x4,%eax
   1d1c2:	05 d8 ee 03 00       	add    $0x3eed8,%eax
   1d1c7:	8b 08                	mov    (%eax),%ecx
   1d1c9:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d1cd:	89 d0                	mov    %edx,%eax
   1d1cf:	c1 e0 03             	shl    $0x3,%eax
   1d1d2:	01 d0                	add    %edx,%eax
   1d1d4:	c1 e0 04             	shl    $0x4,%eax
   1d1d7:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1d1dc:	89 08                	mov    %ecx,(%eax)
		scr_end = origin + video_num_lines * video_size_row;
   1d1de:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d1e2:	89 d0                	mov    %edx,%eax
   1d1e4:	c1 e0 03             	shl    $0x3,%eax
   1d1e7:	01 d0                	add    %edx,%eax
   1d1e9:	c1 e0 04             	shl    $0x4,%eax
   1d1ec:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1d1f1:	8b 10                	mov    (%eax),%edx
   1d1f3:	8b 0d 44 ee 03 00    	mov    0x3ee44,%ecx
   1d1f9:	a1 40 ee 03 00       	mov    0x3ee40,%eax
   1d1fe:	0f af c1             	imul   %ecx,%eax
   1d201:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
   1d204:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d208:	89 d0                	mov    %edx,%eax
   1d20a:	c1 e0 03             	shl    $0x3,%eax
   1d20d:	01 d0                	add    %edx,%eax
   1d20f:	c1 e0 04             	shl    $0x4,%eax
   1d212:	05 7c ee 03 00       	add    $0x3ee7c,%eax
   1d217:	89 08                	mov    %ecx,(%eax)
		video_mem_end = (term += video_memory);
   1d219:	8b 44 24 08          	mov    0x8(%esp),%eax
   1d21d:	01 44 24 0c          	add    %eax,0xc(%esp)
   1d221:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   1d225:	8b 54 24 14          	mov    0x14(%esp),%edx
   1d229:	89 d0                	mov    %edx,%eax
   1d22b:	c1 e0 03             	shl    $0x3,%eax
   1d22e:	01 d0                	add    %edx,%eax
   1d230:	c1 e0 04             	shl    $0x4,%eax
   1d233:	05 dc ee 03 00       	add    $0x3eedc,%eax
   1d238:	89 08                	mov    %ecx,(%eax)
		gotoxy(currcons, 0, 0);                           					// 光标都初始化在屏幕左上角位置.
   1d23a:	6a 00                	push   $0x0
   1d23c:	6a 00                	push   $0x0
   1d23e:	ff 74 24 1c          	pushl  0x1c(%esp)
   1d242:	e8 f5 ce ff ff       	call   1a13c <gotoxy>
   1d247:	83 c4 0c             	add    $0xc,%esp
	vc_cons[0].vc_bold_attr = -1;											// 粗体字符属性标志(-1表示不用).

	// 在设置了0号控制台当前光标所有位置和光标对应的内存位置pos后,循环设置其余的几个虚拟控制台结构的参数值.除了各自占用的显示内存开始和结束位置不同,
	// 它们的初始值基本上都与0号控制台相同.
	gotoxy(currcons, ORIG_X, ORIG_Y);
  	for (currcons = 1; currcons < NR_CONSOLES; currcons++) {
   1d24a:	83 44 24 14 01       	addl   $0x1,0x14(%esp)
   1d24f:	a1 20 ee 03 00       	mov    0x3ee20,%eax
   1d254:	39 44 24 14          	cmp    %eax,0x14(%esp)
   1d258:	0f 8c 0e ff ff ff    	jl     1d16c <con_init+0x424>
		video_mem_end = (term += video_memory);
		gotoxy(currcons, 0, 0);                           					// 光标都初始化在屏幕左上角位置.
	}
	// 最后设置当前前台控制台的屏幕原点(左上角)位置和显示控制器中光标显示位置,并设置键盘中断0x21陷阱门描述符(&keyboard_inierrupt是键盘中断处理过程
	// 地址).然后取消中断控制芯片8259A中对键盘中断的屏蔽,允许响应键盘发出的IRQ1请求信号.最后复位键盘控制器以允许键盘开始正常工作.
	update_screen();														// 更新前台原点来设置光标位置.
   1d25e:	e8 83 00 00 00       	call   1d2e6 <update_screen>
	set_trap_gate(0x21, &keyboard_interrupt);								// 参见system.h,设置键盘的系统中断门
   1d263:	b9 c0 55 00 00       	mov    $0x55c0,%ecx
   1d268:	bb c4 55 00 00       	mov    $0x55c4,%ebx
   1d26d:	ba 7f d6 01 00       	mov    $0x1d67f,%edx
   1d272:	b8 00 00 08 00       	mov    $0x80000,%eax
   1d277:	66 89 d0             	mov    %dx,%ax
   1d27a:	66 ba 00 8f          	mov    $0x8f00,%dx
   1d27e:	89 01                	mov    %eax,(%ecx)
   1d280:	89 13                	mov    %edx,(%ebx)
	outb_p(inb_p(0x21) & 0xfd, 0x21);										// 取消对键盘中断的屏蔽,允许IRQ1.
   1d282:	b8 21 00 00 00       	mov    $0x21,%eax
   1d287:	89 c2                	mov    %eax,%edx
   1d289:	ec                   	in     (%dx),%al
   1d28a:	eb 00                	jmp    1d28c <con_init+0x544>
   1d28c:	eb 00                	jmp    1d28e <con_init+0x546>
   1d28e:	88 44 24 07          	mov    %al,0x7(%esp)
   1d292:	0f b6 44 24 07       	movzbl 0x7(%esp),%eax
   1d297:	0f b6 c0             	movzbl %al,%eax
   1d29a:	25 fd 00 00 00       	and    $0xfd,%eax
   1d29f:	ba 21 00 00 00       	mov    $0x21,%edx
   1d2a4:	ee                   	out    %al,(%dx)
   1d2a5:	eb 00                	jmp    1d2a7 <con_init+0x55f>
   1d2a7:	eb 00                	jmp    1d2a9 <con_init+0x561>
	a = inb_p(0x61);														// 读取键盘端口0x61(8255A端口PB).
   1d2a9:	b8 61 00 00 00       	mov    $0x61,%eax
   1d2ae:	89 c2                	mov    %eax,%edx
   1d2b0:	ec                   	in     (%dx),%al
   1d2b1:	eb 00                	jmp    1d2b3 <con_init+0x56b>
   1d2b3:	eb 00                	jmp    1d2b5 <con_init+0x56d>
   1d2b5:	88 44 24 06          	mov    %al,0x6(%esp)
   1d2b9:	0f b6 44 24 06       	movzbl 0x6(%esp),%eax
   1d2be:	89 c3                	mov    %eax,%ebx
	outb_p(a | 0x80, 0x61);													// 设置禁止键盘工作(位7置位).
   1d2c0:	89 d8                	mov    %ebx,%eax
   1d2c2:	83 c8 80             	or     $0xffffff80,%eax
   1d2c5:	0f b6 c0             	movzbl %al,%eax
   1d2c8:	ba 61 00 00 00       	mov    $0x61,%edx
   1d2cd:	ee                   	out    %al,(%dx)
   1d2ce:	eb 00                	jmp    1d2d0 <con_init+0x588>
   1d2d0:	eb 00                	jmp    1d2d2 <con_init+0x58a>
	outb_p(a, 0x61);														// 再允许键盘工作,用以复位键盘.
   1d2d2:	ba 61 00 00 00       	mov    $0x61,%edx
   1d2d7:	89 d8                	mov    %ebx,%eax
   1d2d9:	ee                   	out    %al,(%dx)
   1d2da:	eb 00                	jmp    1d2dc <con_init+0x594>
   1d2dc:	eb 00                	jmp    1d2de <con_init+0x596>
}
   1d2de:	90                   	nop
   1d2df:	83 c4 20             	add    $0x20,%esp
   1d2e2:	5b                   	pop    %ebx
   1d2e3:	5e                   	pop    %esi
   1d2e4:	5f                   	pop    %edi
   1d2e5:	c3                   	ret    

0001d2e6 <update_screen>:
// 更新当前控制台.
// 把前台控制台转换为fg_console指定的虚拟控制台.fg_console是设置的前台虚拟控制台号.
// fg_console变量在tty.h头文件中定义，用来启动后默认使用的显示终端
void update_screen(void)
{
	set_origin(fg_console);													// 设置滚屏起始显示内存地址.
   1d2e6:	a1 80 12 03 00       	mov    0x31280,%eax
   1d2eb:	50                   	push   %eax
   1d2ec:	e8 04 cf ff ff       	call   1a1f5 <set_origin>
   1d2f1:	83 c4 04             	add    $0x4,%esp
	set_cursor(fg_console);													// 设置显示控制器中光标显示内存位置.
   1d2f4:	a1 80 12 03 00       	mov    0x31280,%eax
   1d2f9:	50                   	push   %eax
   1d2fa:	e8 00 e1 ff ff       	call   1b3ff <set_cursor>
   1d2ff:	83 c4 04             	add    $0x4,%esp
}
   1d302:	90                   	nop
   1d303:	c3                   	ret    

0001d304 <sysbeepstop>:
/* from bsd-net-2: */

// 停止蜂鸣
// 复位8255A PB端口的位1和位0.
void sysbeepstop(void)
{
   1d304:	83 ec 10             	sub    $0x10,%esp
	/* disable counter 2 */		/* 禁止定时器2 */
	outb(inb_p(0x61)&0xFC, 0x61);
   1d307:	b8 61 00 00 00       	mov    $0x61,%eax
   1d30c:	89 c2                	mov    %eax,%edx
   1d30e:	ec                   	in     (%dx),%al
   1d30f:	eb 00                	jmp    1d311 <sysbeepstop+0xd>
   1d311:	eb 00                	jmp    1d313 <sysbeepstop+0xf>
   1d313:	88 44 24 0f          	mov    %al,0xf(%esp)
   1d317:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   1d31c:	0f b6 c0             	movzbl %al,%eax
   1d31f:	25 fc 00 00 00       	and    $0xfc,%eax
   1d324:	ba 61 00 00 00       	mov    $0x61,%edx
   1d329:	ee                   	out    %al,(%dx)
}
   1d32a:	90                   	nop
   1d32b:	83 c4 10             	add    $0x10,%esp
   1d32e:	c3                   	ret    

0001d32f <sysbeep>:

// 开通蜂鸣
// 8255A芯片PB端口的位1用作扬声器的开门信号;位0用作8253定时器2门信号,该定时器的输出脉冲送往扬声器,作为扬声器发声频率.因此要使扬声器
// 发声,需要两步:首先开启PB端口(0x61)位1和位0(置位),然后设置定时器2通道发送一定的定时频率即可.
static void sysbeep(void)
{
   1d32f:	83 ec 10             	sub    $0x10,%esp
	/* enable counter 2 */		/* 开启定时器2 */
	outb_p(inb_p(0x61)|3, 0x61);
   1d332:	b8 61 00 00 00       	mov    $0x61,%eax
   1d337:	89 c2                	mov    %eax,%edx
   1d339:	ec                   	in     (%dx),%al
   1d33a:	eb 00                	jmp    1d33c <sysbeep+0xd>
   1d33c:	eb 00                	jmp    1d33e <sysbeep+0xf>
   1d33e:	88 44 24 0f          	mov    %al,0xf(%esp)
   1d342:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   1d347:	83 c8 03             	or     $0x3,%eax
   1d34a:	0f b6 c0             	movzbl %al,%eax
   1d34d:	ba 61 00 00 00       	mov    $0x61,%edx
   1d352:	ee                   	out    %al,(%dx)
   1d353:	eb 00                	jmp    1d355 <sysbeep+0x26>
   1d355:	eb 00                	jmp    1d357 <sysbeep+0x28>
	/* set command for counter 2, 2 byte write */	/* 送设置定时器2命令 */
	outb_p(0xB6, 0x43);		// 定时器芯片控制字寄存器端口.
   1d357:	b8 b6 00 00 00       	mov    $0xb6,%eax
   1d35c:	ba 43 00 00 00       	mov    $0x43,%edx
   1d361:	ee                   	out    %al,(%dx)
   1d362:	eb 00                	jmp    1d364 <sysbeep+0x35>
   1d364:	eb 00                	jmp    1d366 <sysbeep+0x37>
	/* send 0x637 for 750 HZ */	/* 设置频率为720Hz,因此送定时值0x637 */
	outb_p(0x37, 0x42);		// 通过2数据端口分别送计数高低字节
   1d366:	b8 37 00 00 00       	mov    $0x37,%eax
   1d36b:	ba 42 00 00 00       	mov    $0x42,%edx
   1d370:	ee                   	out    %al,(%dx)
   1d371:	eb 00                	jmp    1d373 <sysbeep+0x44>
   1d373:	eb 00                	jmp    1d375 <sysbeep+0x46>
	outb(0x06, 0x42);
   1d375:	b8 06 00 00 00       	mov    $0x6,%eax
   1d37a:	ba 42 00 00 00       	mov    $0x42,%edx
   1d37f:	ee                   	out    %al,(%dx)
	/* 1/8 second */		/* 蜂鸣时间为1/8s */
	beepcount = HZ / 8;
   1d380:	c7 05 2c ee 03 00 0c 	movl   $0xc,0x3ee2c
   1d387:	00 00 00 
}
   1d38a:	90                   	nop
   1d38b:	83 c4 10             	add    $0x10,%esp
   1d38e:	c3                   	ret    

0001d38f <do_screendump>:

// 拷贝屏幕
// 把屏幕内容复制到参数指定的用户缓冲区arg中。
// 参数arg有两个用途：一是用于传递控制台号，二是作为用户缓冲区指针。
int do_screendump(int arg)
{
   1d38f:	83 ec 1c             	sub    $0x1c,%esp
	char *sptr, *buf = (char *)arg;
   1d392:	8b 44 24 20          	mov    0x20(%esp),%eax
   1d396:	89 44 24 08          	mov    %eax,0x8(%esp)
	int currcons, l;

	// 函数首先验证用户提供的缓冲区容量，若不够则进行适当扩展。然后从其开始处取出控制台号currcons.
	// 在判断控制台号有效后，就把该控制台屏幕的所有内存内容复制到用户缓冲区中。
	verify_area(buf, video_num_columns * video_num_lines);
   1d39a:	8b 15 34 ee 03 00    	mov    0x3ee34,%edx
   1d3a0:	a1 44 ee 03 00       	mov    0x3ee44,%eax
   1d3a5:	0f af c2             	imul   %edx,%eax
   1d3a8:	83 ec 08             	sub    $0x8,%esp
   1d3ab:	50                   	push   %eax
   1d3ac:	ff 74 24 14          	pushl  0x14(%esp)
   1d3b0:	e8 ee af fe ff       	call   83a3 <verify_area>
   1d3b5:	83 c4 10             	add    $0x10,%esp
	currcons = get_fs_byte(buf);
   1d3b8:	83 ec 0c             	sub    $0xc,%esp
   1d3bb:	ff 74 24 14          	pushl  0x14(%esp)
   1d3bf:	e8 50 cd ff ff       	call   1a114 <get_fs_byte>
   1d3c4:	83 c4 10             	add    $0x10,%esp
   1d3c7:	0f b6 c0             	movzbl %al,%eax
   1d3ca:	89 04 24             	mov    %eax,(%esp)
	if ((currcons < 1) || (currcons > NR_CONSOLES))
   1d3cd:	83 3c 24 00          	cmpl   $0x0,(%esp)
   1d3d1:	7e 0a                	jle    1d3dd <do_screendump+0x4e>
   1d3d3:	a1 20 ee 03 00       	mov    0x3ee20,%eax
   1d3d8:	39 04 24             	cmp    %eax,(%esp)
   1d3db:	7e 07                	jle    1d3e4 <do_screendump+0x55>
		return -EIO;
   1d3dd:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
   1d3e2:	eb 6a                	jmp    1d44e <do_screendump+0xbf>
	currcons--;
   1d3e4:	83 2c 24 01          	subl   $0x1,(%esp)
	sptr = (char *) origin;
   1d3e8:	8b 14 24             	mov    (%esp),%edx
   1d3eb:	89 d0                	mov    %edx,%eax
   1d3ed:	c1 e0 03             	shl    $0x3,%eax
   1d3f0:	01 d0                	add    %edx,%eax
   1d3f2:	c1 e0 04             	shl    $0x4,%eax
   1d3f5:	05 78 ee 03 00       	add    $0x3ee78,%eax
   1d3fa:	8b 00                	mov    (%eax),%eax
   1d3fc:	89 44 24 0c          	mov    %eax,0xc(%esp)
	for (l = video_num_lines * video_num_columns; l > 0 ; l--)
   1d400:	8b 15 44 ee 03 00    	mov    0x3ee44,%edx
   1d406:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1d40b:	0f af c2             	imul   %edx,%eax
   1d40e:	89 44 24 04          	mov    %eax,0x4(%esp)
   1d412:	eb 2e                	jmp    1d442 <do_screendump+0xb3>
		put_fs_byte(*sptr++, buf++);
   1d414:	8b 44 24 08          	mov    0x8(%esp),%eax
   1d418:	8d 50 01             	lea    0x1(%eax),%edx
   1d41b:	89 54 24 08          	mov    %edx,0x8(%esp)
   1d41f:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d423:	8d 4a 01             	lea    0x1(%edx),%ecx
   1d426:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
   1d42a:	0f b6 12             	movzbl (%edx),%edx
   1d42d:	0f be d2             	movsbl %dl,%edx
   1d430:	83 ec 08             	sub    $0x8,%esp
   1d433:	50                   	push   %eax
   1d434:	52                   	push   %edx
   1d435:	e8 e8 cc ff ff       	call   1a122 <put_fs_byte>
   1d43a:	83 c4 10             	add    $0x10,%esp
	currcons = get_fs_byte(buf);
	if ((currcons < 1) || (currcons > NR_CONSOLES))
		return -EIO;
	currcons--;
	sptr = (char *) origin;
	for (l = video_num_lines * video_num_columns; l > 0 ; l--)
   1d43d:	83 6c 24 04 01       	subl   $0x1,0x4(%esp)
   1d442:	83 7c 24 04 00       	cmpl   $0x0,0x4(%esp)
   1d447:	7f cb                	jg     1d414 <do_screendump+0x85>
		put_fs_byte(*sptr++, buf++);
	return(0);
   1d449:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1d44e:	83 c4 1c             	add    $0x1c,%esp
   1d451:	c3                   	ret    

0001d452 <blank_screen>:

// 黑屏处理
// 当用户在blankInterval时间间隔内没有按任何按键时就让屏幕黑屏,以保护屏幕.
void blank_screen()
{
	if (video_type != VIDEO_TYPE_EGAC && video_type != VIDEO_TYPE_EGAM)
   1d452:	0f b6 05 30 ee 03 00 	movzbl 0x3ee30,%eax
   1d459:	3c 21                	cmp    $0x21,%al
   1d45b:	74 09                	je     1d466 <blank_screen+0x14>
   1d45d:	0f b6 05 30 ee 03 00 	movzbl 0x3ee30,%eax
   1d464:	3c 20                	cmp    $0x20,%al
		return;
	/* blank here. I can't find out how to do it, though */
}
   1d466:	c3                   	ret    

0001d467 <unblank_screen>:

// 恢复黑屏的屏幕
// 当用户按下任何按键时,就恢复处于黑屏状态的屏幕显示内容.
void unblank_screen()
{
	if (video_type != VIDEO_TYPE_EGAC && video_type != VIDEO_TYPE_EGAM)
   1d467:	0f b6 05 30 ee 03 00 	movzbl 0x3ee30,%eax
   1d46e:	3c 21                	cmp    $0x21,%al
   1d470:	74 09                	je     1d47b <unblank_screen+0x14>
   1d472:	0f b6 05 30 ee 03 00 	movzbl 0x3ee30,%eax
   1d479:	3c 20                	cmp    $0x20,%al
		return;
	/* unblank here */
}
   1d47b:	c3                   	ret    

0001d47c <console_print>:
// 控制台显示函数
// 该函数仅用于内核显示函数printk()(kernel/printk.c),用于在当前前台控制台上显示内核信息.
// 处理方法是循环取出缓冲区中的字符,并根据字符的特性控制光标移动或直接显示在屏幕上.
// 参数b是null结尾的字符串缓冲区指针。
void console_print(const char * b)
{
   1d47c:	53                   	push   %ebx
   1d47d:	83 ec 10             	sub    $0x10,%esp
	int currcons = fg_console;
   1d480:	a1 80 12 03 00       	mov    0x31280,%eax
   1d485:	89 44 24 0c          	mov    %eax,0xc(%esp)
	char c;

	// 循环读取缓冲区b中的字符。
	while (c = *(b++)) {
   1d489:	e9 5d 01 00 00       	jmp    1d5eb <console_print+0x16f>
		// 如果当前字符c是换行符，则对光标执行回车换行操作
		if (c == 10) {
   1d48e:	80 7c 24 0b 0a       	cmpb   $0xa,0xb(%esp)
   1d493:	75 1d                	jne    1d4b2 <console_print+0x36>
			// 光标回到当前行的第0列
			cr(currcons);
   1d495:	ff 74 24 0c          	pushl  0xc(%esp)
   1d499:	e8 e6 d5 ff ff       	call   1aa84 <cr>
   1d49e:	83 c4 04             	add    $0x4,%esp
			// 将光标从当前列移动到下一行
			lf(currcons);
   1d4a1:	ff 74 24 0c          	pushl  0xc(%esp)
   1d4a5:	e8 9e d4 ff ff       	call   1a948 <lf>
   1d4aa:	83 c4 04             	add    $0x4,%esp
			continue;
   1d4ad:	e9 39 01 00 00       	jmp    1d5eb <console_print+0x16f>
		}
		// 如果是回车符，就直接执行回车动作。然后去处理下一个字符。
		if (c == 13) {
   1d4b2:	80 7c 24 0b 0d       	cmpb   $0xd,0xb(%esp)
   1d4b7:	75 11                	jne    1d4ca <console_print+0x4e>
			cr(currcons);
   1d4b9:	ff 74 24 0c          	pushl  0xc(%esp)
   1d4bd:	e8 c2 d5 ff ff       	call   1aa84 <cr>
   1d4c2:	83 c4 04             	add    $0x4,%esp
			continue;
   1d4c5:	e9 21 01 00 00       	jmp    1d5eb <console_print+0x16f>
		}
		// 在读取了一个不是回车或换行字符后，如果发现当前光标列位置x已经到达屏幕右末端，则让光标折返到下一行开始处。
		// 然后把字符放到光标所处显示内存位置处，即在屏幕上显示出来。再把光标右移一格位置，为显示下一个字符作准备。
		if (x >= video_num_columns) {
   1d4ca:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d4ce:	89 d0                	mov    %edx,%eax
   1d4d0:	c1 e0 03             	shl    $0x3,%eax
   1d4d3:	01 d0                	add    %edx,%eax
   1d4d5:	c1 e0 04             	shl    $0x4,%eax
   1d4d8:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1d4dd:	8b 10                	mov    (%eax),%edx
   1d4df:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1d4e4:	39 c2                	cmp    %eax,%edx
   1d4e6:	72 72                	jb     1d55a <console_print+0xde>
			x -= video_num_columns;
   1d4e8:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d4ec:	89 d0                	mov    %edx,%eax
   1d4ee:	c1 e0 03             	shl    $0x3,%eax
   1d4f1:	01 d0                	add    %edx,%eax
   1d4f3:	c1 e0 04             	shl    $0x4,%eax
   1d4f6:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1d4fb:	8b 10                	mov    (%eax),%edx
   1d4fd:	a1 34 ee 03 00       	mov    0x3ee34,%eax
   1d502:	89 d1                	mov    %edx,%ecx
   1d504:	29 c1                	sub    %eax,%ecx
   1d506:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d50a:	89 d0                	mov    %edx,%eax
   1d50c:	c1 e0 03             	shl    $0x3,%eax
   1d50f:	01 d0                	add    %edx,%eax
   1d511:	c1 e0 04             	shl    $0x4,%eax
   1d514:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1d519:	89 08                	mov    %ecx,(%eax)
			pos -= video_size_row;
   1d51b:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d51f:	89 d0                	mov    %edx,%eax
   1d521:	c1 e0 03             	shl    $0x3,%eax
   1d524:	01 d0                	add    %edx,%eax
   1d526:	c1 e0 04             	shl    $0x4,%eax
   1d529:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1d52e:	8b 10                	mov    (%eax),%edx
   1d530:	a1 40 ee 03 00       	mov    0x3ee40,%eax
   1d535:	89 d1                	mov    %edx,%ecx
   1d537:	29 c1                	sub    %eax,%ecx
   1d539:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d53d:	89 d0                	mov    %edx,%eax
   1d53f:	c1 e0 03             	shl    $0x3,%eax
   1d542:	01 d0                	add    %edx,%eax
   1d544:	c1 e0 04             	shl    $0x4,%eax
   1d547:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1d54c:	89 08                	mov    %ecx,(%eax)
			lf(currcons);
   1d54e:	ff 74 24 0c          	pushl  0xc(%esp)
   1d552:	e8 f1 d3 ff ff       	call   1a948 <lf>
   1d557:	83 c4 04             	add    $0x4,%esp
		}
		// 寄存器al中是需要显示的字符，这里把属性字节放到ah中，然后把ax内容存储到光标内存位置pos处，即在光标处显示字符。
		__asm__("movb %2, %%ah\n\t"              				// 属性字节放到ah中。
			"movw %%ax, %1\n\t"              					// ax内容放到pos处。
			::"a" (c),
			"m" (*(short *)pos),
   1d55a:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d55e:	89 d0                	mov    %edx,%eax
   1d560:	c1 e0 03             	shl    $0x3,%eax
   1d563:	01 d0                	add    %edx,%eax
   1d565:	c1 e0 04             	shl    $0x4,%eax
   1d568:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1d56d:	8b 00                	mov    (%eax),%eax
   1d56f:	89 c3                	mov    %eax,%ebx
			x -= video_num_columns;
			pos -= video_size_row;
			lf(currcons);
		}
		// 寄存器al中是需要显示的字符，这里把属性字节放到ah中，然后把ax内容存储到光标内存位置pos处，即在光标处显示字符。
		__asm__("movb %2, %%ah\n\t"              				// 属性字节放到ah中。
   1d571:	0f b6 4c 24 0b       	movzbl 0xb(%esp),%ecx
   1d576:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d57a:	89 d0                	mov    %edx,%eax
   1d57c:	c1 e0 03             	shl    $0x3,%eax
   1d57f:	01 d0                	add    %edx,%eax
   1d581:	c1 e0 04             	shl    $0x4,%eax
   1d584:	8d 90 62 ee 03 00    	lea    0x3ee62(%eax),%edx
   1d58a:	89 c8                	mov    %ecx,%eax
   1d58c:	8a 22                	mov    (%edx),%ah
   1d58e:	66 89 03             	mov    %ax,(%ebx)
			"movw %%ax, %1\n\t"              					// ax内容放到pos处。
			::"a" (c),
			"m" (*(short *)pos),
			"m" (attr)
			:);
		pos += 2;
   1d591:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d595:	89 d0                	mov    %edx,%eax
   1d597:	c1 e0 03             	shl    $0x3,%eax
   1d59a:	01 d0                	add    %edx,%eax
   1d59c:	c1 e0 04             	shl    $0x4,%eax
   1d59f:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1d5a4:	8b 00                	mov    (%eax),%eax
   1d5a6:	8d 48 02             	lea    0x2(%eax),%ecx
   1d5a9:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d5ad:	89 d0                	mov    %edx,%eax
   1d5af:	c1 e0 03             	shl    $0x3,%eax
   1d5b2:	01 d0                	add    %edx,%eax
   1d5b4:	c1 e0 04             	shl    $0x4,%eax
   1d5b7:	05 80 ee 03 00       	add    $0x3ee80,%eax
   1d5bc:	89 08                	mov    %ecx,(%eax)
		x++;
   1d5be:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d5c2:	89 d0                	mov    %edx,%eax
   1d5c4:	c1 e0 03             	shl    $0x3,%eax
   1d5c7:	01 d0                	add    %edx,%eax
   1d5c9:	c1 e0 04             	shl    $0x4,%eax
   1d5cc:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1d5d1:	8b 00                	mov    (%eax),%eax
   1d5d3:	8d 48 01             	lea    0x1(%eax),%ecx
   1d5d6:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d5da:	89 d0                	mov    %edx,%eax
   1d5dc:	c1 e0 03             	shl    $0x3,%eax
   1d5df:	01 d0                	add    %edx,%eax
   1d5e1:	c1 e0 04             	shl    $0x4,%eax
   1d5e4:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1d5e9:	89 08                	mov    %ecx,(%eax)
{
	int currcons = fg_console;
	char c;

	// 循环读取缓冲区b中的字符。
	while (c = *(b++)) {
   1d5eb:	8b 44 24 18          	mov    0x18(%esp),%eax
   1d5ef:	8d 50 01             	lea    0x1(%eax),%edx
   1d5f2:	89 54 24 18          	mov    %edx,0x18(%esp)
   1d5f6:	0f b6 00             	movzbl (%eax),%eax
   1d5f9:	88 44 24 0b          	mov    %al,0xb(%esp)
   1d5fd:	80 7c 24 0b 00       	cmpb   $0x0,0xb(%esp)
   1d602:	0f 85 86 fe ff ff    	jne    1d48e <console_print+0x12>
			"m" (attr)
			:);
		pos += 2;
		x++;
	}
	set_cursor(currcons);           							// 最后设置的光标内存位置，设置显示控制器中光标位置。
   1d608:	ff 74 24 0c          	pushl  0xc(%esp)
   1d60c:	e8 ee dd ff ff       	call   1b3ff <set_cursor>
   1d611:	83 c4 04             	add    $0x4,%esp
}
   1d614:	90                   	nop
   1d615:	83 c4 10             	add    $0x10,%esp
   1d618:	5b                   	pop    %ebx
   1d619:	c3                   	ret    

0001d61a <del_col>:


void del_col(int i){
   1d61a:	83 ec 10             	sub    $0x10,%esp
	int currcons = fg_console;
   1d61d:	a1 80 12 03 00       	mov    0x31280,%eax
   1d622:	89 44 24 0c          	mov    %eax,0xc(%esp)
	gotoxy(currcons, x - i, y);
   1d626:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d62a:	89 d0                	mov    %edx,%eax
   1d62c:	c1 e0 03             	shl    $0x3,%eax
   1d62f:	01 d0                	add    %edx,%eax
   1d631:	c1 e0 04             	shl    $0x4,%eax
   1d634:	05 88 ee 03 00       	add    $0x3ee88,%eax
   1d639:	8b 08                	mov    (%eax),%ecx
   1d63b:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1d63f:	89 d0                	mov    %edx,%eax
   1d641:	c1 e0 03             	shl    $0x3,%eax
   1d644:	01 d0                	add    %edx,%eax
   1d646:	c1 e0 04             	shl    $0x4,%eax
   1d649:	05 84 ee 03 00       	add    $0x3ee84,%eax
   1d64e:	8b 10                	mov    (%eax),%edx
   1d650:	8b 44 24 14          	mov    0x14(%esp),%eax
   1d654:	29 c2                	sub    %eax,%edx
   1d656:	89 d0                	mov    %edx,%eax
   1d658:	51                   	push   %ecx
   1d659:	50                   	push   %eax
   1d65a:	ff 74 24 14          	pushl  0x14(%esp)
   1d65e:	e8 d9 ca ff ff       	call   1a13c <gotoxy>
   1d663:	83 c4 0c             	add    $0xc,%esp
	csi_P(currcons, i);
   1d666:	8b 44 24 14          	mov    0x14(%esp),%eax
   1d66a:	50                   	push   %eax
   1d66b:	ff 74 24 10          	pushl  0x10(%esp)
   1d66f:	e8 cc e1 ff ff       	call   1b840 <csi_P>
   1d674:	83 c4 08             	add    $0x8,%esp
}
   1d677:	90                   	nop
   1d678:	83 c4 10             	add    $0x10,%esp
   1d67b:	c3                   	ret    

0001d67c <mode>:
	...

0001d67d <leds>:
   1d67d:	02                   	.byte 0x2

0001d67e <e0>:
	...

0001d67f <keyboard_interrupt>:
   1d67f:	50                   	push   %eax
   1d680:	53                   	push   %ebx
   1d681:	51                   	push   %ecx
   1d682:	52                   	push   %edx
   1d683:	1e                   	push   %ds
   1d684:	06                   	push   %es
   1d685:	b8 10 00 00 00       	mov    $0x10,%eax
   1d68a:	8e d8                	mov    %eax,%ds
   1d68c:	8e c0                	mov    %eax,%es
   1d68e:	a1 24 ee 03 00       	mov    0x3ee24,%eax
   1d693:	a3 28 ee 03 00       	mov    %eax,0x3ee28
   1d698:	31 c0                	xor    %eax,%eax
   1d69a:	e4 60                	in     $0x60,%al
   1d69c:	3c e0                	cmp    $0xe0,%al
   1d69e:	74 3d                	je     1d6dd <set_e0>
   1d6a0:	3c e1                	cmp    $0xe1,%al
   1d6a2:	74 42                	je     1d6e6 <set_e1>
   1d6a4:	ff 14 85 61 da 01 00 	call   *0x1da61(,%eax,4)
   1d6ab:	c6 05 7e d6 01 00 00 	movb   $0x0,0x1d67e

0001d6b2 <e0_e1>:
   1d6b2:	e4 61                	in     $0x61,%al
   1d6b4:	eb 00                	jmp    1d6b6 <e0_e1+0x4>
   1d6b6:	eb 00                	jmp    1d6b8 <e0_e1+0x6>
   1d6b8:	0c 80                	or     $0x80,%al
   1d6ba:	eb 00                	jmp    1d6bc <e0_e1+0xa>
   1d6bc:	eb 00                	jmp    1d6be <e0_e1+0xc>
   1d6be:	e6 61                	out    %al,$0x61
   1d6c0:	eb 00                	jmp    1d6c2 <e0_e1+0x10>
   1d6c2:	eb 00                	jmp    1d6c4 <e0_e1+0x12>
   1d6c4:	24 7f                	and    $0x7f,%al
   1d6c6:	e6 61                	out    %al,$0x61
   1d6c8:	b0 20                	mov    $0x20,%al
   1d6ca:	e6 20                	out    %al,$0x20
   1d6cc:	6a 00                	push   $0x0
   1d6ce:	e8 98 c3 ff ff       	call   19a6b <do_tty_interrupt>
   1d6d3:	83 c4 04             	add    $0x4,%esp
   1d6d6:	07                   	pop    %es
   1d6d7:	1f                   	pop    %ds
   1d6d8:	5a                   	pop    %edx
   1d6d9:	59                   	pop    %ecx
   1d6da:	5b                   	pop    %ebx
   1d6db:	58                   	pop    %eax
   1d6dc:	cf                   	iret   

0001d6dd <set_e0>:
   1d6dd:	c6 05 7e d6 01 00 01 	movb   $0x1,0x1d67e
   1d6e4:	eb cc                	jmp    1d6b2 <e0_e1>

0001d6e6 <set_e1>:
   1d6e6:	c6 05 7e d6 01 00 02 	movb   $0x2,0x1d67e
   1d6ed:	eb c3                	jmp    1d6b2 <e0_e1>

0001d6ef <put_queue>:
   1d6ef:	51                   	push   %ecx
   1d6f0:	52                   	push   %edx
   1d6f1:	8b 15 24 e5 02 00    	mov    0x2e524,%edx
   1d6f7:	8b 4a 04             	mov    0x4(%edx),%ecx
   1d6fa:	88 44 0a 10          	mov    %al,0x10(%edx,%ecx,1)
   1d6fe:	41                   	inc    %ecx
   1d6ff:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
   1d705:	3b 4a 08             	cmp    0x8(%edx),%ecx
   1d708:	74 1b                	je     1d725 <put_queue+0x36>
   1d70a:	0f ac d8 08          	shrd   $0x8,%ebx,%eax
   1d70e:	74 05                	je     1d715 <put_queue+0x26>
   1d710:	c1 eb 08             	shr    $0x8,%ebx
   1d713:	eb e5                	jmp    1d6fa <put_queue+0xb>
   1d715:	89 4a 04             	mov    %ecx,0x4(%edx)
   1d718:	8b 4a 0c             	mov    0xc(%edx),%ecx
   1d71b:	85 c9                	test   %ecx,%ecx
   1d71d:	74 06                	je     1d725 <put_queue+0x36>
   1d71f:	c7 01 00 00 00 00    	movl   $0x0,(%ecx)
   1d725:	5a                   	pop    %edx
   1d726:	59                   	pop    %ecx
   1d727:	c3                   	ret    

0001d728 <ctrl>:
   1d728:	b0 04                	mov    $0x4,%al
   1d72a:	eb 02                	jmp    1d72e <alt+0x2>

0001d72c <alt>:
   1d72c:	b0 10                	mov    $0x10,%al
   1d72e:	80 3d 7e d6 01 00 00 	cmpb   $0x0,0x1d67e
   1d735:	74 02                	je     1d739 <alt+0xd>
   1d737:	00 c0                	add    %al,%al
   1d739:	08 05 7c d6 01 00    	or     %al,0x1d67c
   1d73f:	c3                   	ret    

0001d740 <unctrl>:
   1d740:	b0 04                	mov    $0x4,%al
   1d742:	eb 02                	jmp    1d746 <unalt+0x2>

0001d744 <unalt>:
   1d744:	b0 10                	mov    $0x10,%al
   1d746:	80 3d 7e d6 01 00 00 	cmpb   $0x0,0x1d67e
   1d74d:	74 02                	je     1d751 <unalt+0xd>
   1d74f:	00 c0                	add    %al,%al
   1d751:	f6 d0                	not    %al
   1d753:	20 05 7c d6 01 00    	and    %al,0x1d67c
   1d759:	c3                   	ret    

0001d75a <lshift>:
   1d75a:	80 0d 7c d6 01 00 01 	orb    $0x1,0x1d67c
   1d761:	c3                   	ret    

0001d762 <unlshift>:
   1d762:	80 25 7c d6 01 00 fe 	andb   $0xfe,0x1d67c
   1d769:	c3                   	ret    

0001d76a <rshift>:
   1d76a:	80 0d 7c d6 01 00 02 	orb    $0x2,0x1d67c
   1d771:	c3                   	ret    

0001d772 <unrshift>:
   1d772:	80 25 7c d6 01 00 fd 	andb   $0xfd,0x1d67c
   1d779:	c3                   	ret    

0001d77a <caps>:
   1d77a:	f6 05 7c d6 01 00 80 	testb  $0x80,0x1d67c
   1d781:	75 43                	jne    1d7c6 <scroll+0x10>
   1d783:	80 35 7d d6 01 00 04 	xorb   $0x4,0x1d67d
   1d78a:	80 35 7c d6 01 00 40 	xorb   $0x40,0x1d67c
   1d791:	80 0d 7c d6 01 00 80 	orb    $0x80,0x1d67c

0001d798 <set_leds>:
   1d798:	e8 c4 06 00 00       	call   1de61 <kb_wait>
   1d79d:	b0 ed                	mov    $0xed,%al
   1d79f:	e6 60                	out    %al,$0x60
   1d7a1:	e8 bb 06 00 00       	call   1de61 <kb_wait>
   1d7a6:	a0 7d d6 01 00       	mov    0x1d67d,%al
   1d7ab:	e6 60                	out    %al,$0x60
   1d7ad:	c3                   	ret    

0001d7ae <uncaps>:
   1d7ae:	80 25 7c d6 01 00 7f 	andb   $0x7f,0x1d67c
   1d7b5:	c3                   	ret    

0001d7b6 <scroll>:
   1d7b6:	f6 05 7c d6 01 00 03 	testb  $0x3,0x1d67c
   1d7bd:	74 07                	je     1d7c6 <scroll+0x10>
   1d7bf:	e8 78 f1 fe ff       	call   c93c <show_mem>
   1d7c4:	eb 05                	jmp    1d7cb <scroll+0x15>
   1d7c6:	e8 c2 95 fe ff       	call   6d8d <show_state>
   1d7cb:	80 35 7d d6 01 00 01 	xorb   $0x1,0x1d67d
   1d7d2:	eb c4                	jmp    1d798 <set_leds>

0001d7d4 <num>:
   1d7d4:	80 35 7d d6 01 00 02 	xorb   $0x2,0x1d67d
   1d7db:	eb bb                	jmp    1d798 <set_leds>

0001d7dd <cursor>:
   1d7dd:	2c 47                	sub    $0x47,%al
   1d7df:	72 44                	jb     1d825 <cur2+0x28>
   1d7e1:	3c 0c                	cmp    $0xc,%al
   1d7e3:	77 40                	ja     1d825 <cur2+0x28>
   1d7e5:	75 16                	jne    1d7fd <cur2>
   1d7e7:	f6 05 7c d6 01 00 0c 	testb  $0xc,0x1d67c
   1d7ee:	74 0d                	je     1d7fd <cur2>
   1d7f0:	f6 05 7c d6 01 00 30 	testb  $0x30,0x1d67c
   1d7f7:	0f 85 6d 06 00 00    	jne    1de6a <reboot>

0001d7fd <cur2>:
   1d7fd:	80 3d 7e d6 01 00 01 	cmpb   $0x1,0x1d67e
   1d804:	74 20                	je     1d826 <cur>
   1d806:	f6 05 7d d6 01 00 02 	testb  $0x2,0x1d67d
   1d80d:	74 17                	je     1d826 <cur>
   1d80f:	f6 05 7c d6 01 00 03 	testb  $0x3,0x1d67c
   1d816:	75 0e                	jne    1d826 <cur>
   1d818:	31 db                	xor    %ebx,%ebx
   1d81a:	8a 80 40 d8 01 00    	mov    0x1d840(%eax),%al
   1d820:	e9 ca fe ff ff       	jmp    1d6ef <put_queue>
   1d825:	c3                   	ret    

0001d826 <cur>:
   1d826:	8a 80 4d d8 01 00    	mov    0x1d84d(%eax),%al
   1d82c:	3c 39                	cmp    $0x39,%al
   1d82e:	77 02                	ja     1d832 <ok_cur>
   1d830:	b4 7e                	mov    $0x7e,%ah

0001d832 <ok_cur>:
   1d832:	c1 e0 10             	shl    $0x10,%eax
   1d835:	66 b8 1b 5b          	mov    $0x5b1b,%ax
   1d839:	31 db                	xor    %ebx,%ebx
   1d83b:	e9 af fe ff ff       	jmp    1d6ef <put_queue>

0001d840 <num_table>:
   1d840:	37                   	aaa    
   1d841:	38 39                	cmp    %bh,(%ecx)
   1d843:	20 34 35 36 20 31 32 	and    %dh,0x32312036(,%esi,1)
   1d84a:	33 30                	xor    (%eax),%esi
   1d84c:	2c                   	.byte 0x2c

0001d84d <cur_table>:
   1d84d:	48                   	dec    %eax
   1d84e:	41                   	inc    %ecx
   1d84f:	35 20 44 47 43       	xor    $0x43474420,%eax
   1d854:	20 59 42             	and    %bl,0x42(%ecx)
   1d857:	36 32 33             	xor    %ss:(%ebx),%dh

0001d85a <func>:
   1d85a:	2c 3b                	sub    $0x3b,%al
   1d85c:	72 31                	jb     1d88f <end_func>
   1d85e:	3c 09                	cmp    $0x9,%al
   1d860:	76 0a                	jbe    1d86c <ok_func>
   1d862:	2c 12                	sub    $0x12,%al
   1d864:	3c 0a                	cmp    $0xa,%al
   1d866:	72 27                	jb     1d88f <end_func>
   1d868:	3c 0b                	cmp    $0xb,%al
   1d86a:	77 23                	ja     1d88f <end_func>

0001d86c <ok_func>:
   1d86c:	f6 05 7c d6 01 00 10 	testb  $0x10,0x1d67c
   1d873:	75 13                	jne    1d888 <alt_func>
   1d875:	83 f9 04             	cmp    $0x4,%ecx
   1d878:	7c 15                	jl     1d88f <end_func>
   1d87a:	8b 04 85 90 d8 01 00 	mov    0x1d890(,%eax,4),%eax
   1d881:	31 db                	xor    %ebx,%ebx
   1d883:	e9 67 fe ff ff       	jmp    1d6ef <put_queue>

0001d888 <alt_func>:
   1d888:	50                   	push   %eax
   1d889:	e8 5a b1 ff ff       	call   189e8 <change_console>
   1d88e:	58                   	pop    %eax

0001d88f <end_func>:
   1d88f:	c3                   	ret    

0001d890 <func_table>:
   1d890:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d893:	41                   	inc    %ecx
   1d894:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d897:	42                   	inc    %edx
   1d898:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d89b:	43                   	inc    %ebx
   1d89c:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d89f:	44                   	inc    %esp
   1d8a0:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d8a3:	45                   	inc    %ebp
   1d8a4:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d8a7:	46                   	inc    %esi
   1d8a8:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d8ab:	47                   	inc    %edi
   1d8ac:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d8af:	48                   	dec    %eax
   1d8b0:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d8b3:	49                   	dec    %ecx
   1d8b4:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d8b7:	4a                   	dec    %edx
   1d8b8:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d8bb:	4b                   	dec    %ebx
   1d8bc:	1b 5b 5b             	sbb    0x5b(%ebx),%ebx
   1d8bf:	4c                   	dec    %esp

0001d8c0 <key_map>:
   1d8c0:	00 1b                	add    %bl,(%ebx)
   1d8c2:	31 32                	xor    %esi,(%edx)
   1d8c4:	33 34 35 36 37 38 39 	xor    0x39383736(,%esi,1),%esi
   1d8cb:	30 2d 3d 7f 09 71    	xor    %ch,0x71097f3d
   1d8d1:	77 65                	ja     1d938 <shift_map+0x17>
   1d8d3:	72 74                	jb     1d949 <shift_map+0x28>
   1d8d5:	79 75                	jns    1d94c <shift_map+0x2b>
   1d8d7:	69 6f 70 5b 5d 0d 00 	imul   $0xd5d5b,0x70(%edi),%ebp
   1d8de:	61                   	popa   
   1d8df:	73 64                	jae    1d945 <shift_map+0x24>
   1d8e1:	66 67 68 6a 6b       	addr16 pushw $0x6b6a
   1d8e6:	6c                   	insb   (%dx),%es:(%edi)
   1d8e7:	3b 27                	cmp    (%edi),%esp
   1d8e9:	60                   	pusha  
   1d8ea:	00 5c 7a 78          	add    %bl,0x78(%edx,%edi,2)
   1d8ee:	63 76 62             	arpl   %si,0x62(%esi)
   1d8f1:	6e                   	outsb  %ds:(%esi),(%dx)
   1d8f2:	6d                   	insl   (%dx),%es:(%edi)
   1d8f3:	2c 2e                	sub    $0x2e,%al
   1d8f5:	2f                   	das    
   1d8f6:	00 2a                	add    %ch,(%edx)
   1d8f8:	00 20                	add    %ah,(%eax)
	...
   1d90a:	2d 00 00 00 2b       	sub    $0x2b000000,%eax
   1d90f:	00 00                	add    %al,(%eax)
   1d911:	00 00                	add    %al,(%eax)
   1d913:	00 00                	add    %al,(%eax)
   1d915:	00 3c 00             	add    %bh,(%eax,%eax,1)
	...

0001d921 <shift_map>:
   1d921:	00 1b                	add    %bl,(%ebx)
   1d923:	21 40 23             	and    %eax,0x23(%eax)
   1d926:	24 25                	and    $0x25,%al
   1d928:	5e                   	pop    %esi
   1d929:	26 2a 28             	sub    %es:(%eax),%ch
   1d92c:	29 5f 2b             	sub    %ebx,0x2b(%edi)
   1d92f:	7f 09                	jg     1d93a <shift_map+0x19>
   1d931:	51                   	push   %ecx
   1d932:	57                   	push   %edi
   1d933:	45                   	inc    %ebp
   1d934:	52                   	push   %edx
   1d935:	54                   	push   %esp
   1d936:	59                   	pop    %ecx
   1d937:	55                   	push   %ebp
   1d938:	49                   	dec    %ecx
   1d939:	4f                   	dec    %edi
   1d93a:	50                   	push   %eax
   1d93b:	7b 7d                	jnp    1d9ba <alt_map+0x38>
   1d93d:	0d 00 41 53 44       	or     $0x44534100,%eax
   1d942:	46                   	inc    %esi
   1d943:	47                   	inc    %edi
   1d944:	48                   	dec    %eax
   1d945:	4a                   	dec    %edx
   1d946:	4b                   	dec    %ebx
   1d947:	4c                   	dec    %esp
   1d948:	3a 22                	cmp    (%edx),%ah
   1d94a:	7e 00                	jle    1d94c <shift_map+0x2b>
   1d94c:	7c 5a                	jl     1d9a8 <alt_map+0x26>
   1d94e:	58                   	pop    %eax
   1d94f:	43                   	inc    %ebx
   1d950:	56                   	push   %esi
   1d951:	42                   	inc    %edx
   1d952:	4e                   	dec    %esi
   1d953:	4d                   	dec    %ebp
   1d954:	3c 3e                	cmp    $0x3e,%al
   1d956:	3f                   	aas    
   1d957:	00 2a                	add    %ch,(%edx)
   1d959:	00 20                	add    %ah,(%eax)
	...
   1d96b:	2d 00 00 00 2b       	sub    $0x2b000000,%eax
   1d970:	00 00                	add    %al,(%eax)
   1d972:	00 00                	add    %al,(%eax)
   1d974:	00 00                	add    %al,(%eax)
   1d976:	00 3e                	add    %bh,(%esi)
	...

0001d982 <alt_map>:
   1d982:	00 00                	add    %al,(%eax)
   1d984:	00 40 00             	add    %al,0x0(%eax)
   1d987:	24 00                	and    $0x0,%al
   1d989:	00 7b 5b             	add    %bh,0x5b(%ebx)
   1d98c:	5d                   	pop    %ebp
   1d98d:	7d 5c                	jge    1d9eb <do_self+0x8>
	...
   1d99b:	00 00                	add    %al,(%eax)
   1d99d:	7e 0d                	jle    1d9ac <alt_map+0x2a>
	...
   1d9d7:	00 7c 00 00          	add    %bh,0x0(%eax,%eax,1)
	...

0001d9e3 <do_self>:
   1d9e3:	8d 1d 82 d9 01 00    	lea    0x1d982,%ebx
   1d9e9:	f6 05 7c d6 01 00 20 	testb  $0x20,0x1d67c
   1d9f0:	75 15                	jne    1da07 <do_self+0x24>
   1d9f2:	8d 1d 21 d9 01 00    	lea    0x1d921,%ebx
   1d9f8:	f6 05 7c d6 01 00 03 	testb  $0x3,0x1d67c
   1d9ff:	75 06                	jne    1da07 <do_self+0x24>
   1da01:	8d 1d c0 d8 01 00    	lea    0x1d8c0,%ebx
   1da07:	8a 04 03             	mov    (%ebx,%eax,1),%al
   1da0a:	08 c0                	or     %al,%al
   1da0c:	74 3d                	je     1da4b <none>
   1da0e:	f6 05 7c d6 01 00 4c 	testb  $0x4c,0x1d67c
   1da15:	74 0a                	je     1da21 <do_self+0x3e>
   1da17:	3c 61                	cmp    $0x61,%al
   1da19:	72 06                	jb     1da21 <do_self+0x3e>
   1da1b:	3c 7d                	cmp    $0x7d,%al
   1da1d:	77 02                	ja     1da21 <do_self+0x3e>
   1da1f:	2c 20                	sub    $0x20,%al
   1da21:	f6 05 7c d6 01 00 0c 	testb  $0xc,0x1d67c
   1da28:	74 0a                	je     1da34 <do_self+0x51>
   1da2a:	3c 40                	cmp    $0x40,%al
   1da2c:	72 06                	jb     1da34 <do_self+0x51>
   1da2e:	3c 60                	cmp    $0x60,%al
   1da30:	73 02                	jae    1da34 <do_self+0x51>
   1da32:	2c 40                	sub    $0x40,%al
   1da34:	f6 05 7c d6 01 00 10 	testb  $0x10,0x1d67c
   1da3b:	74 02                	je     1da3f <do_self+0x5c>
   1da3d:	0c 80                	or     $0x80,%al
   1da3f:	25 ff 00 00 00       	and    $0xff,%eax
   1da44:	31 db                	xor    %ebx,%ebx
   1da46:	e8 a4 fc ff ff       	call   1d6ef <put_queue>

0001da4b <none>:
   1da4b:	c3                   	ret    

0001da4c <minus>:
   1da4c:	80 3d 7e d6 01 00 01 	cmpb   $0x1,0x1d67e
   1da53:	75 8e                	jne    1d9e3 <do_self>
   1da55:	b8 2f 00 00 00       	mov    $0x2f,%eax
   1da5a:	31 db                	xor    %ebx,%ebx
   1da5c:	e9 8e fc ff ff       	jmp    1d6ef <put_queue>

0001da61 <key_table>:
   1da61:	4b                   	dec    %ebx
   1da62:	da 01                	fiaddl (%ecx)
   1da64:	00 e3                	add    %ah,%bl
   1da66:	d9 01                	flds   (%ecx)
   1da68:	00 e3                	add    %ah,%bl
   1da6a:	d9 01                	flds   (%ecx)
   1da6c:	00 e3                	add    %ah,%bl
   1da6e:	d9 01                	flds   (%ecx)
   1da70:	00 e3                	add    %ah,%bl
   1da72:	d9 01                	flds   (%ecx)
   1da74:	00 e3                	add    %ah,%bl
   1da76:	d9 01                	flds   (%ecx)
   1da78:	00 e3                	add    %ah,%bl
   1da7a:	d9 01                	flds   (%ecx)
   1da7c:	00 e3                	add    %ah,%bl
   1da7e:	d9 01                	flds   (%ecx)
   1da80:	00 e3                	add    %ah,%bl
   1da82:	d9 01                	flds   (%ecx)
   1da84:	00 e3                	add    %ah,%bl
   1da86:	d9 01                	flds   (%ecx)
   1da88:	00 e3                	add    %ah,%bl
   1da8a:	d9 01                	flds   (%ecx)
   1da8c:	00 e3                	add    %ah,%bl
   1da8e:	d9 01                	flds   (%ecx)
   1da90:	00 e3                	add    %ah,%bl
   1da92:	d9 01                	flds   (%ecx)
   1da94:	00 e3                	add    %ah,%bl
   1da96:	d9 01                	flds   (%ecx)
   1da98:	00 e3                	add    %ah,%bl
   1da9a:	d9 01                	flds   (%ecx)
   1da9c:	00 e3                	add    %ah,%bl
   1da9e:	d9 01                	flds   (%ecx)
   1daa0:	00 e3                	add    %ah,%bl
   1daa2:	d9 01                	flds   (%ecx)
   1daa4:	00 e3                	add    %ah,%bl
   1daa6:	d9 01                	flds   (%ecx)
   1daa8:	00 e3                	add    %ah,%bl
   1daaa:	d9 01                	flds   (%ecx)
   1daac:	00 e3                	add    %ah,%bl
   1daae:	d9 01                	flds   (%ecx)
   1dab0:	00 e3                	add    %ah,%bl
   1dab2:	d9 01                	flds   (%ecx)
   1dab4:	00 e3                	add    %ah,%bl
   1dab6:	d9 01                	flds   (%ecx)
   1dab8:	00 e3                	add    %ah,%bl
   1daba:	d9 01                	flds   (%ecx)
   1dabc:	00 e3                	add    %ah,%bl
   1dabe:	d9 01                	flds   (%ecx)
   1dac0:	00 e3                	add    %ah,%bl
   1dac2:	d9 01                	flds   (%ecx)
   1dac4:	00 e3                	add    %ah,%bl
   1dac6:	d9 01                	flds   (%ecx)
   1dac8:	00 e3                	add    %ah,%bl
   1daca:	d9 01                	flds   (%ecx)
   1dacc:	00 e3                	add    %ah,%bl
   1dace:	d9 01                	flds   (%ecx)
   1dad0:	00 e3                	add    %ah,%bl
   1dad2:	d9 01                	flds   (%ecx)
   1dad4:	00 28                	add    %ch,(%eax)
   1dad6:	d7                   	xlat   %ds:(%ebx)
   1dad7:	01 00                	add    %eax,(%eax)
   1dad9:	e3 d9                	jecxz  1dab4 <key_table+0x53>
   1dadb:	01 00                	add    %eax,(%eax)
   1dadd:	e3 d9                	jecxz  1dab8 <key_table+0x57>
   1dadf:	01 00                	add    %eax,(%eax)
   1dae1:	e3 d9                	jecxz  1dabc <key_table+0x5b>
   1dae3:	01 00                	add    %eax,(%eax)
   1dae5:	e3 d9                	jecxz  1dac0 <key_table+0x5f>
   1dae7:	01 00                	add    %eax,(%eax)
   1dae9:	e3 d9                	jecxz  1dac4 <key_table+0x63>
   1daeb:	01 00                	add    %eax,(%eax)
   1daed:	e3 d9                	jecxz  1dac8 <key_table+0x67>
   1daef:	01 00                	add    %eax,(%eax)
   1daf1:	e3 d9                	jecxz  1dacc <key_table+0x6b>
   1daf3:	01 00                	add    %eax,(%eax)
   1daf5:	e3 d9                	jecxz  1dad0 <key_table+0x6f>
   1daf7:	01 00                	add    %eax,(%eax)
   1daf9:	e3 d9                	jecxz  1dad4 <key_table+0x73>
   1dafb:	01 00                	add    %eax,(%eax)
   1dafd:	e3 d9                	jecxz  1dad8 <key_table+0x77>
   1daff:	01 00                	add    %eax,(%eax)
   1db01:	e3 d9                	jecxz  1dadc <key_table+0x7b>
   1db03:	01 00                	add    %eax,(%eax)
   1db05:	e3 d9                	jecxz  1dae0 <key_table+0x7f>
   1db07:	01 00                	add    %eax,(%eax)
   1db09:	5a                   	pop    %edx
   1db0a:	d7                   	xlat   %ds:(%ebx)
   1db0b:	01 00                	add    %eax,(%eax)
   1db0d:	e3 d9                	jecxz  1dae8 <key_table+0x87>
   1db0f:	01 00                	add    %eax,(%eax)
   1db11:	e3 d9                	jecxz  1daec <key_table+0x8b>
   1db13:	01 00                	add    %eax,(%eax)
   1db15:	e3 d9                	jecxz  1daf0 <key_table+0x8f>
   1db17:	01 00                	add    %eax,(%eax)
   1db19:	e3 d9                	jecxz  1daf4 <key_table+0x93>
   1db1b:	01 00                	add    %eax,(%eax)
   1db1d:	e3 d9                	jecxz  1daf8 <key_table+0x97>
   1db1f:	01 00                	add    %eax,(%eax)
   1db21:	e3 d9                	jecxz  1dafc <key_table+0x9b>
   1db23:	01 00                	add    %eax,(%eax)
   1db25:	e3 d9                	jecxz  1db00 <key_table+0x9f>
   1db27:	01 00                	add    %eax,(%eax)
   1db29:	e3 d9                	jecxz  1db04 <key_table+0xa3>
   1db2b:	01 00                	add    %eax,(%eax)
   1db2d:	e3 d9                	jecxz  1db08 <key_table+0xa7>
   1db2f:	01 00                	add    %eax,(%eax)
   1db31:	e3 d9                	jecxz  1db0c <key_table+0xab>
   1db33:	01 00                	add    %eax,(%eax)
   1db35:	4c                   	dec    %esp
   1db36:	da 01                	fiaddl (%ecx)
   1db38:	00 6a d7             	add    %ch,-0x29(%edx)
   1db3b:	01 00                	add    %eax,(%eax)
   1db3d:	e3 d9                	jecxz  1db18 <key_table+0xb7>
   1db3f:	01 00                	add    %eax,(%eax)
   1db41:	2c d7                	sub    $0xd7,%al
   1db43:	01 00                	add    %eax,(%eax)
   1db45:	e3 d9                	jecxz  1db20 <key_table+0xbf>
   1db47:	01 00                	add    %eax,(%eax)
   1db49:	7a d7                	jp     1db22 <key_table+0xc1>
   1db4b:	01 00                	add    %eax,(%eax)
   1db4d:	5a                   	pop    %edx
   1db4e:	d8 01                	fadds  (%ecx)
   1db50:	00 5a d8             	add    %bl,-0x28(%edx)
   1db53:	01 00                	add    %eax,(%eax)
   1db55:	5a                   	pop    %edx
   1db56:	d8 01                	fadds  (%ecx)
   1db58:	00 5a d8             	add    %bl,-0x28(%edx)
   1db5b:	01 00                	add    %eax,(%eax)
   1db5d:	5a                   	pop    %edx
   1db5e:	d8 01                	fadds  (%ecx)
   1db60:	00 5a d8             	add    %bl,-0x28(%edx)
   1db63:	01 00                	add    %eax,(%eax)
   1db65:	5a                   	pop    %edx
   1db66:	d8 01                	fadds  (%ecx)
   1db68:	00 5a d8             	add    %bl,-0x28(%edx)
   1db6b:	01 00                	add    %eax,(%eax)
   1db6d:	5a                   	pop    %edx
   1db6e:	d8 01                	fadds  (%ecx)
   1db70:	00 5a d8             	add    %bl,-0x28(%edx)
   1db73:	01 00                	add    %eax,(%eax)
   1db75:	d4 d7                	aam    $0xd7
   1db77:	01 00                	add    %eax,(%eax)
   1db79:	b6 d7                	mov    $0xd7,%dh
   1db7b:	01 00                	add    %eax,(%eax)
   1db7d:	dd d7                	fst    %st(7)
   1db7f:	01 00                	add    %eax,(%eax)
   1db81:	dd d7                	fst    %st(7)
   1db83:	01 00                	add    %eax,(%eax)
   1db85:	dd d7                	fst    %st(7)
   1db87:	01 00                	add    %eax,(%eax)
   1db89:	e3 d9                	jecxz  1db64 <key_table+0x103>
   1db8b:	01 00                	add    %eax,(%eax)
   1db8d:	dd d7                	fst    %st(7)
   1db8f:	01 00                	add    %eax,(%eax)
   1db91:	dd d7                	fst    %st(7)
   1db93:	01 00                	add    %eax,(%eax)
   1db95:	dd d7                	fst    %st(7)
   1db97:	01 00                	add    %eax,(%eax)
   1db99:	e3 d9                	jecxz  1db74 <key_table+0x113>
   1db9b:	01 00                	add    %eax,(%eax)
   1db9d:	dd d7                	fst    %st(7)
   1db9f:	01 00                	add    %eax,(%eax)
   1dba1:	dd d7                	fst    %st(7)
   1dba3:	01 00                	add    %eax,(%eax)
   1dba5:	dd d7                	fst    %st(7)
   1dba7:	01 00                	add    %eax,(%eax)
   1dba9:	dd d7                	fst    %st(7)
   1dbab:	01 00                	add    %eax,(%eax)
   1dbad:	dd d7                	fst    %st(7)
   1dbaf:	01 00                	add    %eax,(%eax)
   1dbb1:	4b                   	dec    %ebx
   1dbb2:	da 01                	fiaddl (%ecx)
   1dbb4:	00 4b da             	add    %cl,-0x26(%ebx)
   1dbb7:	01 00                	add    %eax,(%eax)
   1dbb9:	e3 d9                	jecxz  1db94 <key_table+0x133>
   1dbbb:	01 00                	add    %eax,(%eax)
   1dbbd:	5a                   	pop    %edx
   1dbbe:	d8 01                	fadds  (%ecx)
   1dbc0:	00 5a d8             	add    %bl,-0x28(%edx)
   1dbc3:	01 00                	add    %eax,(%eax)
   1dbc5:	4b                   	dec    %ebx
   1dbc6:	da 01                	fiaddl (%ecx)
   1dbc8:	00 4b da             	add    %cl,-0x26(%ebx)
   1dbcb:	01 00                	add    %eax,(%eax)
   1dbcd:	4b                   	dec    %ebx
   1dbce:	da 01                	fiaddl (%ecx)
   1dbd0:	00 4b da             	add    %cl,-0x26(%ebx)
   1dbd3:	01 00                	add    %eax,(%eax)
   1dbd5:	4b                   	dec    %ebx
   1dbd6:	da 01                	fiaddl (%ecx)
   1dbd8:	00 4b da             	add    %cl,-0x26(%ebx)
   1dbdb:	01 00                	add    %eax,(%eax)
   1dbdd:	4b                   	dec    %ebx
   1dbde:	da 01                	fiaddl (%ecx)
   1dbe0:	00 4b da             	add    %cl,-0x26(%ebx)
   1dbe3:	01 00                	add    %eax,(%eax)
   1dbe5:	4b                   	dec    %ebx
   1dbe6:	da 01                	fiaddl (%ecx)
   1dbe8:	00 4b da             	add    %cl,-0x26(%ebx)
   1dbeb:	01 00                	add    %eax,(%eax)
   1dbed:	4b                   	dec    %ebx
   1dbee:	da 01                	fiaddl (%ecx)
   1dbf0:	00 4b da             	add    %cl,-0x26(%ebx)
   1dbf3:	01 00                	add    %eax,(%eax)
   1dbf5:	4b                   	dec    %ebx
   1dbf6:	da 01                	fiaddl (%ecx)
   1dbf8:	00 4b da             	add    %cl,-0x26(%ebx)
   1dbfb:	01 00                	add    %eax,(%eax)
   1dbfd:	4b                   	dec    %ebx
   1dbfe:	da 01                	fiaddl (%ecx)
   1dc00:	00 4b da             	add    %cl,-0x26(%ebx)
   1dc03:	01 00                	add    %eax,(%eax)
   1dc05:	4b                   	dec    %ebx
   1dc06:	da 01                	fiaddl (%ecx)
   1dc08:	00 4b da             	add    %cl,-0x26(%ebx)
   1dc0b:	01 00                	add    %eax,(%eax)
   1dc0d:	4b                   	dec    %ebx
   1dc0e:	da 01                	fiaddl (%ecx)
   1dc10:	00 4b da             	add    %cl,-0x26(%ebx)
   1dc13:	01 00                	add    %eax,(%eax)
   1dc15:	4b                   	dec    %ebx
   1dc16:	da 01                	fiaddl (%ecx)
   1dc18:	00 4b da             	add    %cl,-0x26(%ebx)
   1dc1b:	01 00                	add    %eax,(%eax)
   1dc1d:	4b                   	dec    %ebx
   1dc1e:	da 01                	fiaddl (%ecx)
   1dc20:	00 4b da             	add    %cl,-0x26(%ebx)
   1dc23:	01 00                	add    %eax,(%eax)
   1dc25:	4b                   	dec    %ebx
   1dc26:	da 01                	fiaddl (%ecx)
   1dc28:	00 4b da             	add    %cl,-0x26(%ebx)
   1dc2b:	01 00                	add    %eax,(%eax)
   1dc2d:	4b                   	dec    %ebx
   1dc2e:	da 01                	fiaddl (%ecx)
   1dc30:	00 4b da             	add    %cl,-0x26(%ebx)
   1dc33:	01 00                	add    %eax,(%eax)
   1dc35:	4b                   	dec    %ebx
   1dc36:	da 01                	fiaddl (%ecx)
   1dc38:	00 4b da             	add    %cl,-0x26(%ebx)
   1dc3b:	01 00                	add    %eax,(%eax)
   1dc3d:	4b                   	dec    %ebx
   1dc3e:	da 01                	fiaddl (%ecx)
   1dc40:	00 4b da             	add    %cl,-0x26(%ebx)
   1dc43:	01 00                	add    %eax,(%eax)
   1dc45:	4b                   	dec    %ebx
   1dc46:	da 01                	fiaddl (%ecx)
   1dc48:	00 4b da             	add    %cl,-0x26(%ebx)
   1dc4b:	01 00                	add    %eax,(%eax)
   1dc4d:	4b                   	dec    %ebx
   1dc4e:	da 01                	fiaddl (%ecx)
   1dc50:	00 4b da             	add    %cl,-0x26(%ebx)
   1dc53:	01 00                	add    %eax,(%eax)
   1dc55:	4b                   	dec    %ebx
   1dc56:	da 01                	fiaddl (%ecx)
   1dc58:	00 4b da             	add    %cl,-0x26(%ebx)
   1dc5b:	01 00                	add    %eax,(%eax)
   1dc5d:	4b                   	dec    %ebx
   1dc5e:	da 01                	fiaddl (%ecx)
   1dc60:	00 4b da             	add    %cl,-0x26(%ebx)
   1dc63:	01 00                	add    %eax,(%eax)
   1dc65:	4b                   	dec    %ebx
   1dc66:	da 01                	fiaddl (%ecx)
   1dc68:	00 4b da             	add    %cl,-0x26(%ebx)
   1dc6b:	01 00                	add    %eax,(%eax)
   1dc6d:	4b                   	dec    %ebx
   1dc6e:	da 01                	fiaddl (%ecx)
   1dc70:	00 4b da             	add    %cl,-0x26(%ebx)
   1dc73:	01 00                	add    %eax,(%eax)
   1dc75:	4b                   	dec    %ebx
   1dc76:	da 01                	fiaddl (%ecx)
   1dc78:	00 4b da             	add    %cl,-0x26(%ebx)
   1dc7b:	01 00                	add    %eax,(%eax)
   1dc7d:	4b                   	dec    %ebx
   1dc7e:	da 01                	fiaddl (%ecx)
   1dc80:	00 4b da             	add    %cl,-0x26(%ebx)
   1dc83:	01 00                	add    %eax,(%eax)
   1dc85:	4b                   	dec    %ebx
   1dc86:	da 01                	fiaddl (%ecx)
   1dc88:	00 4b da             	add    %cl,-0x26(%ebx)
   1dc8b:	01 00                	add    %eax,(%eax)
   1dc8d:	4b                   	dec    %ebx
   1dc8e:	da 01                	fiaddl (%ecx)
   1dc90:	00 4b da             	add    %cl,-0x26(%ebx)
   1dc93:	01 00                	add    %eax,(%eax)
   1dc95:	4b                   	dec    %ebx
   1dc96:	da 01                	fiaddl (%ecx)
   1dc98:	00 4b da             	add    %cl,-0x26(%ebx)
   1dc9b:	01 00                	add    %eax,(%eax)
   1dc9d:	4b                   	dec    %ebx
   1dc9e:	da 01                	fiaddl (%ecx)
   1dca0:	00 4b da             	add    %cl,-0x26(%ebx)
   1dca3:	01 00                	add    %eax,(%eax)
   1dca5:	4b                   	dec    %ebx
   1dca6:	da 01                	fiaddl (%ecx)
   1dca8:	00 4b da             	add    %cl,-0x26(%ebx)
   1dcab:	01 00                	add    %eax,(%eax)
   1dcad:	4b                   	dec    %ebx
   1dcae:	da 01                	fiaddl (%ecx)
   1dcb0:	00 4b da             	add    %cl,-0x26(%ebx)
   1dcb3:	01 00                	add    %eax,(%eax)
   1dcb5:	4b                   	dec    %ebx
   1dcb6:	da 01                	fiaddl (%ecx)
   1dcb8:	00 4b da             	add    %cl,-0x26(%ebx)
   1dcbb:	01 00                	add    %eax,(%eax)
   1dcbd:	4b                   	dec    %ebx
   1dcbe:	da 01                	fiaddl (%ecx)
   1dcc0:	00 4b da             	add    %cl,-0x26(%ebx)
   1dcc3:	01 00                	add    %eax,(%eax)
   1dcc5:	4b                   	dec    %ebx
   1dcc6:	da 01                	fiaddl (%ecx)
   1dcc8:	00 4b da             	add    %cl,-0x26(%ebx)
   1dccb:	01 00                	add    %eax,(%eax)
   1dccd:	4b                   	dec    %ebx
   1dcce:	da 01                	fiaddl (%ecx)
   1dcd0:	00 4b da             	add    %cl,-0x26(%ebx)
   1dcd3:	01 00                	add    %eax,(%eax)
   1dcd5:	40                   	inc    %eax
   1dcd6:	d7                   	xlat   %ds:(%ebx)
   1dcd7:	01 00                	add    %eax,(%eax)
   1dcd9:	4b                   	dec    %ebx
   1dcda:	da 01                	fiaddl (%ecx)
   1dcdc:	00 4b da             	add    %cl,-0x26(%ebx)
   1dcdf:	01 00                	add    %eax,(%eax)
   1dce1:	4b                   	dec    %ebx
   1dce2:	da 01                	fiaddl (%ecx)
   1dce4:	00 4b da             	add    %cl,-0x26(%ebx)
   1dce7:	01 00                	add    %eax,(%eax)
   1dce9:	4b                   	dec    %ebx
   1dcea:	da 01                	fiaddl (%ecx)
   1dcec:	00 4b da             	add    %cl,-0x26(%ebx)
   1dcef:	01 00                	add    %eax,(%eax)
   1dcf1:	4b                   	dec    %ebx
   1dcf2:	da 01                	fiaddl (%ecx)
   1dcf4:	00 4b da             	add    %cl,-0x26(%ebx)
   1dcf7:	01 00                	add    %eax,(%eax)
   1dcf9:	4b                   	dec    %ebx
   1dcfa:	da 01                	fiaddl (%ecx)
   1dcfc:	00 4b da             	add    %cl,-0x26(%ebx)
   1dcff:	01 00                	add    %eax,(%eax)
   1dd01:	4b                   	dec    %ebx
   1dd02:	da 01                	fiaddl (%ecx)
   1dd04:	00 4b da             	add    %cl,-0x26(%ebx)
   1dd07:	01 00                	add    %eax,(%eax)
   1dd09:	62                   	(bad)  
   1dd0a:	d7                   	xlat   %ds:(%ebx)
   1dd0b:	01 00                	add    %eax,(%eax)
   1dd0d:	4b                   	dec    %ebx
   1dd0e:	da 01                	fiaddl (%ecx)
   1dd10:	00 4b da             	add    %cl,-0x26(%ebx)
   1dd13:	01 00                	add    %eax,(%eax)
   1dd15:	4b                   	dec    %ebx
   1dd16:	da 01                	fiaddl (%ecx)
   1dd18:	00 4b da             	add    %cl,-0x26(%ebx)
   1dd1b:	01 00                	add    %eax,(%eax)
   1dd1d:	4b                   	dec    %ebx
   1dd1e:	da 01                	fiaddl (%ecx)
   1dd20:	00 4b da             	add    %cl,-0x26(%ebx)
   1dd23:	01 00                	add    %eax,(%eax)
   1dd25:	4b                   	dec    %ebx
   1dd26:	da 01                	fiaddl (%ecx)
   1dd28:	00 4b da             	add    %cl,-0x26(%ebx)
   1dd2b:	01 00                	add    %eax,(%eax)
   1dd2d:	4b                   	dec    %ebx
   1dd2e:	da 01                	fiaddl (%ecx)
   1dd30:	00 4b da             	add    %cl,-0x26(%ebx)
   1dd33:	01 00                	add    %eax,(%eax)
   1dd35:	4b                   	dec    %ebx
   1dd36:	da 01                	fiaddl (%ecx)
   1dd38:	00 72 d7             	add    %dh,-0x29(%edx)
   1dd3b:	01 00                	add    %eax,(%eax)
   1dd3d:	4b                   	dec    %ebx
   1dd3e:	da 01                	fiaddl (%ecx)
   1dd40:	00 44 d7 01          	add    %al,0x1(%edi,%edx,8)
   1dd44:	00 4b da             	add    %cl,-0x26(%ebx)
   1dd47:	01 00                	add    %eax,(%eax)
   1dd49:	ae                   	scas   %es:(%edi),%al
   1dd4a:	d7                   	xlat   %ds:(%ebx)
   1dd4b:	01 00                	add    %eax,(%eax)
   1dd4d:	4b                   	dec    %ebx
   1dd4e:	da 01                	fiaddl (%ecx)
   1dd50:	00 4b da             	add    %cl,-0x26(%ebx)
   1dd53:	01 00                	add    %eax,(%eax)
   1dd55:	4b                   	dec    %ebx
   1dd56:	da 01                	fiaddl (%ecx)
   1dd58:	00 4b da             	add    %cl,-0x26(%ebx)
   1dd5b:	01 00                	add    %eax,(%eax)
   1dd5d:	4b                   	dec    %ebx
   1dd5e:	da 01                	fiaddl (%ecx)
   1dd60:	00 4b da             	add    %cl,-0x26(%ebx)
   1dd63:	01 00                	add    %eax,(%eax)
   1dd65:	4b                   	dec    %ebx
   1dd66:	da 01                	fiaddl (%ecx)
   1dd68:	00 4b da             	add    %cl,-0x26(%ebx)
   1dd6b:	01 00                	add    %eax,(%eax)
   1dd6d:	4b                   	dec    %ebx
   1dd6e:	da 01                	fiaddl (%ecx)
   1dd70:	00 4b da             	add    %cl,-0x26(%ebx)
   1dd73:	01 00                	add    %eax,(%eax)
   1dd75:	4b                   	dec    %ebx
   1dd76:	da 01                	fiaddl (%ecx)
   1dd78:	00 4b da             	add    %cl,-0x26(%ebx)
   1dd7b:	01 00                	add    %eax,(%eax)
   1dd7d:	4b                   	dec    %ebx
   1dd7e:	da 01                	fiaddl (%ecx)
   1dd80:	00 4b da             	add    %cl,-0x26(%ebx)
   1dd83:	01 00                	add    %eax,(%eax)
   1dd85:	4b                   	dec    %ebx
   1dd86:	da 01                	fiaddl (%ecx)
   1dd88:	00 4b da             	add    %cl,-0x26(%ebx)
   1dd8b:	01 00                	add    %eax,(%eax)
   1dd8d:	4b                   	dec    %ebx
   1dd8e:	da 01                	fiaddl (%ecx)
   1dd90:	00 4b da             	add    %cl,-0x26(%ebx)
   1dd93:	01 00                	add    %eax,(%eax)
   1dd95:	4b                   	dec    %ebx
   1dd96:	da 01                	fiaddl (%ecx)
   1dd98:	00 4b da             	add    %cl,-0x26(%ebx)
   1dd9b:	01 00                	add    %eax,(%eax)
   1dd9d:	4b                   	dec    %ebx
   1dd9e:	da 01                	fiaddl (%ecx)
   1dda0:	00 4b da             	add    %cl,-0x26(%ebx)
   1dda3:	01 00                	add    %eax,(%eax)
   1dda5:	4b                   	dec    %ebx
   1dda6:	da 01                	fiaddl (%ecx)
   1dda8:	00 4b da             	add    %cl,-0x26(%ebx)
   1ddab:	01 00                	add    %eax,(%eax)
   1ddad:	4b                   	dec    %ebx
   1ddae:	da 01                	fiaddl (%ecx)
   1ddb0:	00 4b da             	add    %cl,-0x26(%ebx)
   1ddb3:	01 00                	add    %eax,(%eax)
   1ddb5:	4b                   	dec    %ebx
   1ddb6:	da 01                	fiaddl (%ecx)
   1ddb8:	00 4b da             	add    %cl,-0x26(%ebx)
   1ddbb:	01 00                	add    %eax,(%eax)
   1ddbd:	4b                   	dec    %ebx
   1ddbe:	da 01                	fiaddl (%ecx)
   1ddc0:	00 4b da             	add    %cl,-0x26(%ebx)
   1ddc3:	01 00                	add    %eax,(%eax)
   1ddc5:	4b                   	dec    %ebx
   1ddc6:	da 01                	fiaddl (%ecx)
   1ddc8:	00 4b da             	add    %cl,-0x26(%ebx)
   1ddcb:	01 00                	add    %eax,(%eax)
   1ddcd:	4b                   	dec    %ebx
   1ddce:	da 01                	fiaddl (%ecx)
   1ddd0:	00 4b da             	add    %cl,-0x26(%ebx)
   1ddd3:	01 00                	add    %eax,(%eax)
   1ddd5:	4b                   	dec    %ebx
   1ddd6:	da 01                	fiaddl (%ecx)
   1ddd8:	00 4b da             	add    %cl,-0x26(%ebx)
   1dddb:	01 00                	add    %eax,(%eax)
   1dddd:	4b                   	dec    %ebx
   1ddde:	da 01                	fiaddl (%ecx)
   1dde0:	00 4b da             	add    %cl,-0x26(%ebx)
   1dde3:	01 00                	add    %eax,(%eax)
   1dde5:	4b                   	dec    %ebx
   1dde6:	da 01                	fiaddl (%ecx)
   1dde8:	00 4b da             	add    %cl,-0x26(%ebx)
   1ddeb:	01 00                	add    %eax,(%eax)
   1dded:	4b                   	dec    %ebx
   1ddee:	da 01                	fiaddl (%ecx)
   1ddf0:	00 4b da             	add    %cl,-0x26(%ebx)
   1ddf3:	01 00                	add    %eax,(%eax)
   1ddf5:	4b                   	dec    %ebx
   1ddf6:	da 01                	fiaddl (%ecx)
   1ddf8:	00 4b da             	add    %cl,-0x26(%ebx)
   1ddfb:	01 00                	add    %eax,(%eax)
   1ddfd:	4b                   	dec    %ebx
   1ddfe:	da 01                	fiaddl (%ecx)
   1de00:	00 4b da             	add    %cl,-0x26(%ebx)
   1de03:	01 00                	add    %eax,(%eax)
   1de05:	4b                   	dec    %ebx
   1de06:	da 01                	fiaddl (%ecx)
   1de08:	00 4b da             	add    %cl,-0x26(%ebx)
   1de0b:	01 00                	add    %eax,(%eax)
   1de0d:	4b                   	dec    %ebx
   1de0e:	da 01                	fiaddl (%ecx)
   1de10:	00 4b da             	add    %cl,-0x26(%ebx)
   1de13:	01 00                	add    %eax,(%eax)
   1de15:	4b                   	dec    %ebx
   1de16:	da 01                	fiaddl (%ecx)
   1de18:	00 4b da             	add    %cl,-0x26(%ebx)
   1de1b:	01 00                	add    %eax,(%eax)
   1de1d:	4b                   	dec    %ebx
   1de1e:	da 01                	fiaddl (%ecx)
   1de20:	00 4b da             	add    %cl,-0x26(%ebx)
   1de23:	01 00                	add    %eax,(%eax)
   1de25:	4b                   	dec    %ebx
   1de26:	da 01                	fiaddl (%ecx)
   1de28:	00 4b da             	add    %cl,-0x26(%ebx)
   1de2b:	01 00                	add    %eax,(%eax)
   1de2d:	4b                   	dec    %ebx
   1de2e:	da 01                	fiaddl (%ecx)
   1de30:	00 4b da             	add    %cl,-0x26(%ebx)
   1de33:	01 00                	add    %eax,(%eax)
   1de35:	4b                   	dec    %ebx
   1de36:	da 01                	fiaddl (%ecx)
   1de38:	00 4b da             	add    %cl,-0x26(%ebx)
   1de3b:	01 00                	add    %eax,(%eax)
   1de3d:	4b                   	dec    %ebx
   1de3e:	da 01                	fiaddl (%ecx)
   1de40:	00 4b da             	add    %cl,-0x26(%ebx)
   1de43:	01 00                	add    %eax,(%eax)
   1de45:	4b                   	dec    %ebx
   1de46:	da 01                	fiaddl (%ecx)
   1de48:	00 4b da             	add    %cl,-0x26(%ebx)
   1de4b:	01 00                	add    %eax,(%eax)
   1de4d:	4b                   	dec    %ebx
   1de4e:	da 01                	fiaddl (%ecx)
   1de50:	00 4b da             	add    %cl,-0x26(%ebx)
   1de53:	01 00                	add    %eax,(%eax)
   1de55:	4b                   	dec    %ebx
   1de56:	da 01                	fiaddl (%ecx)
   1de58:	00 4b da             	add    %cl,-0x26(%ebx)
   1de5b:	01 00                	add    %eax,(%eax)
   1de5d:	4b                   	dec    %ebx
   1de5e:	da 01                	fiaddl (%ecx)
	...

0001de61 <kb_wait>:
   1de61:	50                   	push   %eax
   1de62:	e4 64                	in     $0x64,%al
   1de64:	a8 02                	test   $0x2,%al
   1de66:	75 fa                	jne    1de62 <kb_wait+0x1>
   1de68:	58                   	pop    %eax
   1de69:	c3                   	ret    

0001de6a <reboot>:
   1de6a:	e8 f2 ff ff ff       	call   1de61 <kb_wait>
   1de6f:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
   1de76:	34 12 
   1de78:	b0 fc                	mov    $0xfc,%al
   1de7a:	e6 64                	out    %al,$0x64

0001de7c <die>:
   1de7c:	eb fe                	jmp    1de7c <die>

0001de7e <init>:
// 初始化串行端口。
// 设置指定串行端口的传输波特率（2400bps）并允许除了写保持寄存器空以外所有中断源。另外，在输出2字节的波特率因子时，须
// 首先设置线路控制寄存器的DLAB位（位7）。
// 参数：port是串行端口基地址，串口1 - 0x3F8；串口2 - 0x2F8。
static void init(int port)
{
   1de7e:	83 ec 10             	sub    $0x10,%esp
	outb_p(0x80, port + 3);										/* set DLAB of line control reg */
   1de81:	8b 44 24 14          	mov    0x14(%esp),%eax
   1de85:	8d 50 03             	lea    0x3(%eax),%edx
   1de88:	b8 80 00 00 00       	mov    $0x80,%eax
   1de8d:	ee                   	out    %al,(%dx)
   1de8e:	eb 00                	jmp    1de90 <init+0x12>
   1de90:	eb 00                	jmp    1de92 <init+0x14>
	outb_p(0x30, port);											/* LS of divisor (48 -> 2400 bps */
   1de92:	b8 30 00 00 00       	mov    $0x30,%eax
   1de97:	8b 54 24 14          	mov    0x14(%esp),%edx
   1de9b:	ee                   	out    %al,(%dx)
   1de9c:	eb 00                	jmp    1de9e <init+0x20>
   1de9e:	eb 00                	jmp    1dea0 <init+0x22>
	outb_p(0x00, port + 1);										/* MS of divisor */
   1dea0:	8b 44 24 14          	mov    0x14(%esp),%eax
   1dea4:	8d 50 01             	lea    0x1(%eax),%edx
   1dea7:	b8 00 00 00 00       	mov    $0x0,%eax
   1deac:	ee                   	out    %al,(%dx)
   1dead:	eb 00                	jmp    1deaf <init+0x31>
   1deaf:	eb 00                	jmp    1deb1 <init+0x33>
	outb_p(0x03, port + 3);										/* reset DLAB */
   1deb1:	8b 44 24 14          	mov    0x14(%esp),%eax
   1deb5:	8d 50 03             	lea    0x3(%eax),%edx
   1deb8:	b8 03 00 00 00       	mov    $0x3,%eax
   1debd:	ee                   	out    %al,(%dx)
   1debe:	eb 00                	jmp    1dec0 <init+0x42>
   1dec0:	eb 00                	jmp    1dec2 <init+0x44>
	outb_p(0x0b, port + 4);										/* set DTR,RTS, OUT_2 */
   1dec2:	8b 44 24 14          	mov    0x14(%esp),%eax
   1dec6:	8d 50 04             	lea    0x4(%eax),%edx
   1dec9:	b8 0b 00 00 00       	mov    $0xb,%eax
   1dece:	ee                   	out    %al,(%dx)
   1decf:	eb 00                	jmp    1ded1 <init+0x53>
   1ded1:	eb 00                	jmp    1ded3 <init+0x55>
	outb_p(0x0d, port + 1);										/* enable all intrs but writes */
   1ded3:	8b 44 24 14          	mov    0x14(%esp),%eax
   1ded7:	8d 50 01             	lea    0x1(%eax),%edx
   1deda:	b8 0d 00 00 00       	mov    $0xd,%eax
   1dedf:	ee                   	out    %al,(%dx)
   1dee0:	eb 00                	jmp    1dee2 <init+0x64>
   1dee2:	eb 00                	jmp    1dee4 <init+0x66>
	(void)inb(port);											/* read data port to reset things (?) */
   1dee4:	8b 44 24 14          	mov    0x14(%esp),%eax
   1dee8:	89 c2                	mov    %eax,%edx
   1deea:	ec                   	in     (%dx),%al
   1deeb:	88 44 24 0f          	mov    %al,0xf(%esp)
}
   1deef:	90                   	nop
   1def0:	83 c4 10             	add    $0x10,%esp
   1def3:	c3                   	ret    

0001def4 <rs_init>:

// 初始化串行中断程序和串行接口。
// 中断描述符表IDT中的门描述符设置宏set_intr_gate()在include/asm/system.h中实现。
void rs_init(void)
{
   1def4:	53                   	push   %ebx
   1def5:	83 ec 10             	sub    $0x10,%esp
	// 下面两句用于设置两个串行口的中断门描述符。rs1_interrupt是口串1的中断处理过程指针。
	// 串口1使用的中断是int 0x24，串口2的是int 0x23。
	set_intr_gate(0x24, rs1_interrupt);      					// 设置串行口1的中断向量（IRQ4信号）。
   1def8:	b9 d8 55 00 00       	mov    $0x55d8,%ecx
   1defd:	bb dc 55 00 00       	mov    $0x55dc,%ebx
   1df02:	ba d0 df 01 00       	mov    $0x1dfd0,%edx
   1df07:	b8 00 00 08 00       	mov    $0x80000,%eax
   1df0c:	66 89 d0             	mov    %dx,%ax
   1df0f:	66 ba 00 8e          	mov    $0x8e00,%dx
   1df13:	89 01                	mov    %eax,(%ecx)
   1df15:	89 13                	mov    %edx,(%ebx)
	set_intr_gate(0x23, rs2_interrupt);      					// 设置串行口2的中断向量（IRQ3信号）。
   1df17:	b9 d0 55 00 00       	mov    $0x55d0,%ecx
   1df1c:	bb d4 55 00 00       	mov    $0x55d4,%ebx
   1df21:	ba d8 df 01 00       	mov    $0x1dfd8,%edx
   1df26:	b8 00 00 08 00       	mov    $0x80000,%eax
   1df2b:	66 89 d0             	mov    %dx,%ax
   1df2e:	66 ba 00 8e          	mov    $0x8e00,%dx
   1df32:	89 01                	mov    %eax,(%ecx)
   1df34:	89 13                	mov    %edx,(%ebx)
	init(tty_table[64].read_q->data);       					// 初始化串行口1（.data是端口基地址）。
   1df36:	a1 54 28 04 00       	mov    0x42854,%eax
   1df3b:	8b 00                	mov    (%eax),%eax
   1df3d:	50                   	push   %eax
   1df3e:	e8 3b ff ff ff       	call   1de7e <init>
   1df43:	83 c4 04             	add    $0x4,%esp
	init(tty_table[65].read_q->data);       					// 初始化串行口2.
   1df46:	a1 94 28 04 00       	mov    0x42894,%eax
   1df4b:	8b 00                	mov    (%eax),%eax
   1df4d:	50                   	push   %eax
   1df4e:	e8 2b ff ff ff       	call   1de7e <init>
   1df53:	83 c4 04             	add    $0x4,%esp
	outb(inb_p(0x21) & 0xE7, 0x21);            					// 允许主8259A响应IRQ3、IRQ4中断请求。
   1df56:	b8 21 00 00 00       	mov    $0x21,%eax
   1df5b:	89 c2                	mov    %eax,%edx
   1df5d:	ec                   	in     (%dx),%al
   1df5e:	eb 00                	jmp    1df60 <rs_init+0x6c>
   1df60:	eb 00                	jmp    1df62 <rs_init+0x6e>
   1df62:	88 44 24 0f          	mov    %al,0xf(%esp)
   1df66:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   1df6b:	0f b6 c0             	movzbl %al,%eax
   1df6e:	25 e7 00 00 00       	and    $0xe7,%eax
   1df73:	ba 21 00 00 00       	mov    $0x21,%edx
   1df78:	ee                   	out    %al,(%dx)
}
   1df79:	90                   	nop
   1df7a:	83 c4 10             	add    $0x10,%esp
   1df7d:	5b                   	pop    %ebx
   1df7e:	c3                   	ret    

0001df7f <rs_write>:
// 串行数据发送输出。
// 该函数实际上只是开启发送保持寄存器已空中断标志。此后当发送保持寄存器空时，UART就会产生中断请求。而在该串行中断
// 处理过程中，程序会取出写队列尾指针处的字符，并输出到发送保持寄存器中。一旦UART把该字符发送出去，发送保持寄存器
// 中断允许标志复位掉，从而再次禁止发送保持寄存器空引发中断请求。此次“循环”发送操作也随之结束。
void rs_write(struct tty_struct * tty)
{
   1df7f:	83 ec 10             	sub    $0x10,%esp
	// 如果写队列不空，则首先从0x3f9（或0x2f9）读取中断允许寄存器内容，添上发送保持寄存器中断允许标志（位1）后，再写
	// 回该寄存器。这样，当发送保持寄存器空时UART就能够因期望获得欲发送的字符而引发中断。write_q.data中是串行端口基
	// 地址。
	cli();
   1df82:	fa                   	cli    
	if (!EMPTY(tty->write_q))
   1df83:	8b 44 24 14          	mov    0x14(%esp),%eax
   1df87:	8b 40 38             	mov    0x38(%eax),%eax
   1df8a:	8b 50 04             	mov    0x4(%eax),%edx
   1df8d:	8b 44 24 14          	mov    0x14(%esp),%eax
   1df91:	8b 40 38             	mov    0x38(%eax),%eax
   1df94:	8b 40 08             	mov    0x8(%eax),%eax
   1df97:	39 c2                	cmp    %eax,%edx
   1df99:	74 2f                	je     1dfca <rs_write+0x4b>
		outb(inb_p(tty->write_q->data + 1) | 0x02, tty->write_q->data + 1);
   1df9b:	8b 44 24 14          	mov    0x14(%esp),%eax
   1df9f:	8b 40 38             	mov    0x38(%eax),%eax
   1dfa2:	8b 00                	mov    (%eax),%eax
   1dfa4:	83 c0 01             	add    $0x1,%eax
   1dfa7:	89 c2                	mov    %eax,%edx
   1dfa9:	ec                   	in     (%dx),%al
   1dfaa:	eb 00                	jmp    1dfac <rs_write+0x2d>
   1dfac:	eb 00                	jmp    1dfae <rs_write+0x2f>
   1dfae:	88 44 24 0f          	mov    %al,0xf(%esp)
   1dfb2:	0f b6 44 24 0f       	movzbl 0xf(%esp),%eax
   1dfb7:	83 c8 02             	or     $0x2,%eax
   1dfba:	0f b6 c0             	movzbl %al,%eax
   1dfbd:	8b 54 24 14          	mov    0x14(%esp),%edx
   1dfc1:	8b 52 38             	mov    0x38(%edx),%edx
   1dfc4:	8b 12                	mov    (%edx),%edx
   1dfc6:	83 c2 01             	add    $0x1,%edx
   1dfc9:	ee                   	out    %al,(%dx)
	sti();
   1dfca:	fb                   	sti    
}
   1dfcb:	90                   	nop
   1dfcc:	83 c4 10             	add    $0x10,%esp
   1dfcf:	c3                   	ret    

0001dfd0 <rs1_interrupt>:
   1dfd0:	68 2c e5 02 00       	push   $0x2e52c
   1dfd5:	eb 06                	jmp    1dfdd <rs_int>
   1dfd7:	90                   	nop

0001dfd8 <rs2_interrupt>:
   1dfd8:	68 34 e5 02 00       	push   $0x2e534

0001dfdd <rs_int>:
   1dfdd:	52                   	push   %edx
   1dfde:	51                   	push   %ecx
   1dfdf:	53                   	push   %ebx
   1dfe0:	50                   	push   %eax
   1dfe1:	06                   	push   %es
   1dfe2:	1e                   	push   %ds
   1dfe3:	6a 10                	push   $0x10
   1dfe5:	1f                   	pop    %ds
   1dfe6:	6a 10                	push   $0x10
   1dfe8:	07                   	pop    %es
   1dfe9:	8b 54 24 18          	mov    0x18(%esp),%edx
   1dfed:	8b 12                	mov    (%edx),%edx
   1dfef:	8b 12                	mov    (%edx),%edx
   1dff1:	83 c2 02             	add    $0x2,%edx

0001dff4 <rep_int>:
   1dff4:	31 c0                	xor    %eax,%eax
   1dff6:	ec                   	in     (%dx),%al
   1dff7:	a8 01                	test   $0x1,%al
   1dff9:	75 16                	jne    1e011 <end>
   1dffb:	3c 06                	cmp    $0x6,%al
   1dffd:	77 12                	ja     1e011 <end>
   1dfff:	8b 4c 24 18          	mov    0x18(%esp),%ecx
   1e003:	52                   	push   %edx
   1e004:	83 ea 02             	sub    $0x2,%edx
   1e007:	ff 14 45 1f e0 01 00 	call   *0x1e01f(,%eax,2)
   1e00e:	5a                   	pop    %edx
   1e00f:	eb e3                	jmp    1dff4 <rep_int>

0001e011 <end>:
   1e011:	b0 20                	mov    $0x20,%al
   1e013:	e6 20                	out    %al,$0x20
   1e015:	1f                   	pop    %ds
   1e016:	07                   	pop    %es
   1e017:	58                   	pop    %eax
   1e018:	5b                   	pop    %ebx
   1e019:	59                   	pop    %ecx
   1e01a:	5a                   	pop    %edx
   1e01b:	83 c4 04             	add    $0x4,%esp
   1e01e:	cf                   	iret   

0001e01f <jmp_table>:
   1e01f:	30 e0                	xor    %ah,%al
   1e021:	01 00                	add    %eax,(%eax)
   1e023:	74 e0                	je     1e005 <rep_int+0x11>
   1e025:	01 00                	add    %eax,(%eax)
   1e027:	40                   	inc    %eax
   1e028:	e0 01                	loopne 1e02b <jmp_table+0xc>
   1e02a:	00 38                	add    %bh,(%eax)
   1e02c:	e0 01                	loopne 1e02f <jmp_table+0x10>
   1e02e:	00                   	.byte 0x0
   1e02f:	90                   	nop

0001e030 <modem_status>:
   1e030:	83 c2 06             	add    $0x6,%edx
   1e033:	ec                   	in     (%dx),%al
   1e034:	c3                   	ret    
   1e035:	8d 76 00             	lea    0x0(%esi),%esi

0001e038 <line_status>:
   1e038:	83 c2 05             	add    $0x5,%edx
   1e03b:	ec                   	in     (%dx),%al
   1e03c:	c3                   	ret    
   1e03d:	8d 76 00             	lea    0x0(%esi),%esi

0001e040 <read_char>:
   1e040:	ec                   	in     (%dx),%al
   1e041:	89 ca                	mov    %ecx,%edx
   1e043:	81 ea 24 e5 02 00    	sub    $0x2e524,%edx
   1e049:	c1 ea 03             	shr    $0x3,%edx
   1e04c:	8b 09                	mov    (%ecx),%ecx
   1e04e:	8b 59 04             	mov    0x4(%ecx),%ebx
   1e051:	88 44 19 10          	mov    %al,0x10(%ecx,%ebx,1)
   1e055:	43                   	inc    %ebx
   1e056:	81 e3 ff 03 00 00    	and    $0x3ff,%ebx
   1e05c:	3b 59 08             	cmp    0x8(%ecx),%ebx
   1e05f:	74 03                	je     1e064 <read_char+0x24>
   1e061:	89 59 04             	mov    %ebx,0x4(%ecx)
   1e064:	83 c2 3f             	add    $0x3f,%edx
   1e067:	52                   	push   %edx
   1e068:	e8 fe b9 ff ff       	call   19a6b <do_tty_interrupt>
   1e06d:	83 c4 04             	add    $0x4,%esp
   1e070:	c3                   	ret    
   1e071:	8d 76 00             	lea    0x0(%esi),%esi

0001e074 <write_char>:
   1e074:	8b 49 04             	mov    0x4(%ecx),%ecx
   1e077:	8b 59 04             	mov    0x4(%ecx),%ebx
   1e07a:	2b 59 08             	sub    0x8(%ecx),%ebx
   1e07d:	81 e3 ff 03 00 00    	and    $0x3ff,%ebx
   1e083:	74 2f                	je     1e0b4 <write_buffer_empty>
   1e085:	81 fb 00 01 00 00    	cmp    $0x100,%ebx
   1e08b:	77 0d                	ja     1e09a <write_char+0x26>
   1e08d:	8b 59 0c             	mov    0xc(%ecx),%ebx
   1e090:	85 db                	test   %ebx,%ebx
   1e092:	74 06                	je     1e09a <write_char+0x26>
   1e094:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
   1e09a:	8b 59 08             	mov    0x8(%ecx),%ebx
   1e09d:	8a 44 19 10          	mov    0x10(%ecx,%ebx,1),%al
   1e0a1:	ee                   	out    %al,(%dx)
   1e0a2:	43                   	inc    %ebx
   1e0a3:	81 e3 ff 03 00 00    	and    $0x3ff,%ebx
   1e0a9:	89 59 08             	mov    %ebx,0x8(%ecx)
   1e0ac:	3b 59 04             	cmp    0x4(%ecx),%ebx
   1e0af:	74 03                	je     1e0b4 <write_buffer_empty>
   1e0b1:	c3                   	ret    
   1e0b2:	66 90                	xchg   %ax,%ax

0001e0b4 <write_buffer_empty>:
   1e0b4:	8b 59 0c             	mov    0xc(%ecx),%ebx
   1e0b7:	85 db                	test   %ebx,%ebx
   1e0b9:	74 06                	je     1e0c1 <write_buffer_empty+0xd>
   1e0bb:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
   1e0c1:	42                   	inc    %edx
   1e0c2:	ec                   	in     (%dx),%al
   1e0c3:	eb 00                	jmp    1e0c5 <write_buffer_empty+0x11>
   1e0c5:	eb 00                	jmp    1e0c7 <write_buffer_empty+0x13>
   1e0c7:	24 0d                	and    $0xd,%al
   1e0c9:	ee                   	out    %al,(%dx)
   1e0ca:	c3                   	ret    

0001e0cb <get_fs_byte>:
//// 读取fs段中指定地址处的字节.
// 参数:addr - 指定的内存地址.
// %0 - (返回的字节_v);%1 - (内存地址addr)
// 返回:返回内存fs[addr]处的字节.
static inline unsigned char get_fs_byte(const char * addr)
{
   1e0cb:	53                   	push   %ebx
	unsigned register char _v;

	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   1e0cc:	8b 44 24 08          	mov    0x8(%esp),%eax
   1e0d0:	64 8a 00             	mov    %fs:(%eax),%al
   1e0d3:	89 c3                	mov    %eax,%ebx
	return _v;
   1e0d5:	89 d8                	mov    %ebx,%eax
}
   1e0d7:	5b                   	pop    %ebx
   1e0d8:	c3                   	ret    

0001e0d9 <get_fs_long>:
//// 读取fs段中指定地址处的长字(4字节).
// 参数:addr - 指定的内存地址.
// %0 - (返回的长字_v);%1 - (内存地址addr)
// 返回:返回内存fs:[addr]处的长字.
static inline unsigned long get_fs_long(const unsigned long *addr)
{
   1e0d9:	83 ec 10             	sub    $0x10,%esp
	unsigned long _v;

	__asm__ ("movl %%fs:%1,%0":"=q" (_v):"m" (*addr)); \
   1e0dc:	8b 44 24 14          	mov    0x14(%esp),%eax
   1e0e0:	64 8b 00             	mov    %fs:(%eax),%eax
   1e0e3:	89 44 24 0c          	mov    %eax,0xc(%esp)
	return _v;
   1e0e7:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   1e0eb:	83 c4 10             	add    $0x10,%esp
   1e0ee:	c3                   	ret    

0001e0ef <put_fs_byte>:

//// 将一字节存放在fs段中指定内存地址处.
// 参数:val - 字节值;addr - 内存地址.
// %0 - 寄存器(字节值val);%1 - (内存地址addr).
static inline void put_fs_byte(char val,char *addr)
{
   1e0ef:	83 ec 04             	sub    $0x4,%esp
   1e0f2:	8b 44 24 08          	mov    0x8(%esp),%eax
   1e0f6:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
   1e0f9:	0f b6 04 24          	movzbl (%esp),%eax
   1e0fd:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1e101:	64 88 02             	mov    %al,%fs:(%edx)
}
   1e104:	90                   	nop
   1e105:	83 c4 04             	add    $0x4,%esp
   1e108:	c3                   	ret    

0001e109 <put_fs_long>:
//// 将一长字存放在fs段中指定内存地址处.
// 参数:val - 长字值;addr - 内存地址.
// %0 - 寄存器(长字值val);%1 - (内存地址addr).
static inline void put_fs_long(unsigned long val,unsigned long * addr)
{
__asm__ ("movl %0,%%fs:%1"::"q" (val),"m" (*addr));
   1e109:	8b 44 24 04          	mov    0x4(%esp),%eax
   1e10d:	8b 54 24 08          	mov    0x8(%esp),%edx
   1e111:	64 89 02             	mov    %eax,%fs:(%edx)
}
   1e114:	90                   	nop
   1e115:	c3                   	ret    

0001e116 <change_speed>:
// 修改传输波特率。
// 参数：tty - 终端对应的tty数据结构。
// 在除数锁存标志DLAB置位情况下，通过端口0x3f8和0x3f9向UART分别写入波特率因子低字节和高字节。写完后再复位DLAB
// 位。对于串口2,这两个端口分别是0x2f8和0x2f9。
static void change_speed(struct tty_struct * tty)
{
   1e116:	83 ec 10             	sub    $0x10,%esp

	// 函数首先检查参数tty指定的终端是否是串行终端，若不是则退出。对于串口终端的tty结构，其读缓冲队列data字段存放着
	// 串行端口基址（0x3f8或0x2f8），而一般控制台终端的tty结构的read_q.data字段值为0。然后从终端termios结构的控制
	// 模式标志集中取得已设置的波特率索引号，并据此从波特率因子数组quotient[]中取得对应的波特率因子值quot。CBAUD是
	// 控制模式标志集中波特率位屏蔽码。
	if (!(port = tty->read_q->data))
   1e119:	8b 44 24 14          	mov    0x14(%esp),%eax
   1e11d:	8b 40 34             	mov    0x34(%eax),%eax
   1e120:	8b 00                	mov    (%eax),%eax
   1e122:	66 89 44 24 0e       	mov    %ax,0xe(%esp)
   1e127:	66 83 7c 24 0e 00    	cmpw   $0x0,0xe(%esp)
   1e12d:	74 66                	je     1e195 <change_speed+0x7f>
		return;
	quot = quotient[tty->termios.c_cflag & CBAUD];
   1e12f:	8b 44 24 14          	mov    0x14(%esp),%eax
   1e133:	8b 40 08             	mov    0x8(%eax),%eax
   1e136:	83 e0 0f             	and    $0xf,%eax
   1e139:	0f b7 84 00 60 e5 02 	movzwl 0x2e560(%eax,%eax,1),%eax
   1e140:	00 
   1e141:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	// 接着把波特率因子quot写入串行端口对应UART芯片的波特率因子锁存器中。在写之前我们先要把线路控制寄存器LCR的除数锁存
	// 访问位DLAB（位7）置1。然后把16位的波特率因子低、高字节分别写入端口0x3f8、0x3f9（分别对应波特率因子低、高字节
	// 锁存器）。最后再复位LCR的DLAB标志位。
	cli();
   1e146:	fa                   	cli    
	outb_p(0x80, port + 3);									/* set DLAB */          // 首先设置除数锁定标志DLAB。
   1e147:	0f b7 44 24 0e       	movzwl 0xe(%esp),%eax
   1e14c:	8d 50 03             	lea    0x3(%eax),%edx
   1e14f:	b8 80 00 00 00       	mov    $0x80,%eax
   1e154:	ee                   	out    %al,(%dx)
   1e155:	eb 00                	jmp    1e157 <change_speed+0x41>
   1e157:	eb 00                	jmp    1e159 <change_speed+0x43>
	outb_p(quot & 0xff, port);								/* LS of divisor */     // 输出因子低字节。
   1e159:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   1e15e:	0f b6 c0             	movzbl %al,%eax
   1e161:	0f b7 54 24 0e       	movzwl 0xe(%esp),%edx
   1e166:	ee                   	out    %al,(%dx)
   1e167:	eb 00                	jmp    1e169 <change_speed+0x53>
   1e169:	eb 00                	jmp    1e16b <change_speed+0x55>
	outb_p(quot >> 8, port + 1);							/* MS of divisor */     // 输出因子高字节。
   1e16b:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   1e170:	66 c1 e8 08          	shr    $0x8,%ax
   1e174:	0f b7 c0             	movzwl %ax,%eax
   1e177:	0f b7 54 24 0e       	movzwl 0xe(%esp),%edx
   1e17c:	83 c2 01             	add    $0x1,%edx
   1e17f:	ee                   	out    %al,(%dx)
   1e180:	eb 00                	jmp    1e182 <change_speed+0x6c>
   1e182:	eb 00                	jmp    1e184 <change_speed+0x6e>
	outb(0x03, port + 3);									/* reset DLAB */        // 复位DLAB。
   1e184:	0f b7 44 24 0e       	movzwl 0xe(%esp),%eax
   1e189:	8d 50 03             	lea    0x3(%eax),%edx
   1e18c:	b8 03 00 00 00       	mov    $0x3,%eax
   1e191:	ee                   	out    %al,(%dx)
	sti();
   1e192:	fb                   	sti    
   1e193:	eb 01                	jmp    1e196 <change_speed+0x80>
	// 函数首先检查参数tty指定的终端是否是串行终端，若不是则退出。对于串口终端的tty结构，其读缓冲队列data字段存放着
	// 串行端口基址（0x3f8或0x2f8），而一般控制台终端的tty结构的read_q.data字段值为0。然后从终端termios结构的控制
	// 模式标志集中取得已设置的波特率索引号，并据此从波特率因子数组quotient[]中取得对应的波特率因子值quot。CBAUD是
	// 控制模式标志集中波特率位屏蔽码。
	if (!(port = tty->read_q->data))
		return;
   1e195:	90                   	nop
	outb_p(0x80, port + 3);									/* set DLAB */          // 首先设置除数锁定标志DLAB。
	outb_p(quot & 0xff, port);								/* LS of divisor */     // 输出因子低字节。
	outb_p(quot >> 8, port + 1);							/* MS of divisor */     // 输出因子高字节。
	outb(0x03, port + 3);									/* reset DLAB */        // 复位DLAB。
	sti();
}
   1e196:	83 c4 10             	add    $0x10,%esp
   1e199:	c3                   	ret    

0001e19a <flush>:
// 刷新tty缓冲队列。
// 参数：queue - 指定的缓冲队列指针。
// 令缓冲队列的头指针等于尾指针，从而达到清空缓冲区的目的。
static void flush(struct tty_queue * queue)
{
	cli();
   1e19a:	fa                   	cli    
	queue->head = queue->tail;
   1e19b:	8b 44 24 04          	mov    0x4(%esp),%eax
   1e19f:	8b 50 08             	mov    0x8(%eax),%edx
   1e1a2:	8b 44 24 04          	mov    0x4(%esp),%eax
   1e1a6:	89 50 04             	mov    %edx,0x4(%eax)
	sti();
   1e1a9:	fb                   	sti    
}
   1e1aa:	90                   	nop
   1e1ab:	c3                   	ret    

0001e1ac <wait_until_sent>:

// 等待字符发送出去。
static void wait_until_sent(struct tty_struct * tty)
{
	/* do nothing - not implemented */      /* 什么都没做 - 还未实现 */
}
   1e1ac:	90                   	nop
   1e1ad:	c3                   	ret    

0001e1ae <send_break>:

// 发送BREAK控制符。
static void send_break(struct tty_struct * tty)
{
	/* do nothing - not implemented */      /* 什么都没做 - 还未实现 */
}
   1e1ae:	90                   	nop
   1e1af:	c3                   	ret    

0001e1b0 <get_termios>:

// 取终端termios结构信息。
// 参数：tty - 指定终端的tty结构指针；termios - 存放termios结构的用户缓冲区。
static int get_termios(struct tty_struct * tty, struct termios * termios)
{
   1e1b0:	83 ec 1c             	sub    $0x1c,%esp
	int i;

	// 首先验证用户缓冲区指针所指内存区容量是否足够，如不够则分配内存。然后复制指定终端的termios结构信息到用户缓冲区中。
	// 最后返回0.
	verify_area(termios, sizeof (*termios));
   1e1b3:	83 ec 08             	sub    $0x8,%esp
   1e1b6:	6a 24                	push   $0x24
   1e1b8:	ff 74 24 30          	pushl  0x30(%esp)
   1e1bc:	e8 e2 a1 fe ff       	call   83a3 <verify_area>
   1e1c1:	83 c4 10             	add    $0x10,%esp
	for (i = 0 ; i < (sizeof (*termios)) ; i++)
   1e1c4:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   1e1cb:	00 
   1e1cc:	eb 2c                	jmp    1e1fa <get_termios+0x4a>
		put_fs_byte( ((char *) & tty->termios)[i] , i + (char *)termios );
   1e1ce:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1e1d2:	8b 44 24 24          	mov    0x24(%esp),%eax
   1e1d6:	01 c2                	add    %eax,%edx
   1e1d8:	8b 4c 24 20          	mov    0x20(%esp),%ecx
   1e1dc:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e1e0:	01 c8                	add    %ecx,%eax
   1e1e2:	0f b6 00             	movzbl (%eax),%eax
   1e1e5:	0f be c0             	movsbl %al,%eax
   1e1e8:	83 ec 08             	sub    $0x8,%esp
   1e1eb:	52                   	push   %edx
   1e1ec:	50                   	push   %eax
   1e1ed:	e8 fd fe ff ff       	call   1e0ef <put_fs_byte>
   1e1f2:	83 c4 10             	add    $0x10,%esp
	int i;

	// 首先验证用户缓冲区指针所指内存区容量是否足够，如不够则分配内存。然后复制指定终端的termios结构信息到用户缓冲区中。
	// 最后返回0.
	verify_area(termios, sizeof (*termios));
	for (i = 0 ; i < (sizeof (*termios)) ; i++)
   1e1f5:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   1e1fa:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e1fe:	83 f8 23             	cmp    $0x23,%eax
   1e201:	76 cb                	jbe    1e1ce <get_termios+0x1e>
		put_fs_byte( ((char *) & tty->termios)[i] , i + (char *)termios );
	return 0;
   1e203:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1e208:	83 c4 1c             	add    $0x1c,%esp
   1e20b:	c3                   	ret    

0001e20c <set_termios>:

// 设置终端termios结构信息。
// 参数：tty - 指定终端的tty结构指针；termios - 用户数据区termios结构指针。
static int set_termios(struct tty_struct * tty, struct termios * termios,
			int channel)
{
   1e20c:	53                   	push   %ebx
   1e20d:	83 ec 18             	sub    $0x18,%esp
     * 如果试图设置终端的状态但此时终端不在前台，那么我们就需要发送一个SIGTTOU
     * 信号。如果该信号被进程屏蔽或者忽略了，就直接执行本次操作。POSIX 7.2 */
	// 如果当前进程使用的tty终端的进程组号与进程的进程组号不同，即当前进程终端不在前台，表示当前进程试图修改不受控制的终端
	// 的termios结构。因此根据POSIX标准的要求这里需要发送SIGTTOU信号让使用这个终端的进程暂时停止执行，让我们先修改termios
	// 结构。如果发送信号函数tty_signal()返回值是ERESTARTSYS或EINTR，则等一会儿再执行本次操作。
	if ((current->tty == channel) && (tty->pgrp != current->pgrp)) {
   1e210:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1e215:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
   1e21b:	3b 44 24 28          	cmp    0x28(%esp),%eax
   1e21f:	75 42                	jne    1e263 <set_termios+0x57>
   1e221:	8b 44 24 20          	mov    0x20(%esp),%eax
   1e225:	8b 50 24             	mov    0x24(%eax),%edx
   1e228:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1e22d:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
   1e233:	39 c2                	cmp    %eax,%edx
   1e235:	74 2c                	je     1e263 <set_termios+0x57>
		retsig = tty_signal(SIGTTOU, tty);
   1e237:	83 ec 08             	sub    $0x8,%esp
   1e23a:	ff 74 24 28          	pushl  0x28(%esp)
   1e23e:	6a 16                	push   $0x16
   1e240:	e8 5b b0 ff ff       	call   192a0 <tty_signal>
   1e245:	83 c4 10             	add    $0x10,%esp
   1e248:	89 44 24 08          	mov    %eax,0x8(%esp)
		if (retsig == -ERESTARTSYS || retsig == -EINTR)
   1e24c:	81 7c 24 08 00 fe ff 	cmpl   $0xfffffe00,0x8(%esp)
   1e253:	ff 
   1e254:	74 07                	je     1e25d <set_termios+0x51>
   1e256:	83 7c 24 08 fc       	cmpl   $0xfffffffc,0x8(%esp)
   1e25b:	75 06                	jne    1e263 <set_termios+0x57>
			return retsig;
   1e25d:	8b 44 24 08          	mov    0x8(%esp),%eax
   1e261:	eb 4f                	jmp    1e2b2 <set_termios+0xa6>
	}
	// 接着把用户数据区中termios结构信息复制到指定终端tty结构的termios结构中。因为用户有可能已修改了终端串行口传输波特率，
	// 所以这里再根据termios结构中的控制模式标志c_cflag中的波特率信息修改串行UART芯片内的传输波特率。最后返回0。
	for (i = 0 ; i < (sizeof (*termios)) ; i++)
   1e263:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   1e26a:	00 
   1e26b:	eb 28                	jmp    1e295 <set_termios+0x89>
		((char *) & tty->termios)[i] = get_fs_byte(i + (char *)termios);
   1e26d:	8b 54 24 20          	mov    0x20(%esp),%edx
   1e271:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e275:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
   1e278:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1e27c:	8b 44 24 24          	mov    0x24(%esp),%eax
   1e280:	01 d0                	add    %edx,%eax
   1e282:	83 ec 0c             	sub    $0xc,%esp
   1e285:	50                   	push   %eax
   1e286:	e8 40 fe ff ff       	call   1e0cb <get_fs_byte>
   1e28b:	83 c4 10             	add    $0x10,%esp
   1e28e:	88 03                	mov    %al,(%ebx)
		if (retsig == -ERESTARTSYS || retsig == -EINTR)
			return retsig;
	}
	// 接着把用户数据区中termios结构信息复制到指定终端tty结构的termios结构中。因为用户有可能已修改了终端串行口传输波特率，
	// 所以这里再根据termios结构中的控制模式标志c_cflag中的波特率信息修改串行UART芯片内的传输波特率。最后返回0。
	for (i = 0 ; i < (sizeof (*termios)) ; i++)
   1e290:	83 44 24 0c 01       	addl   $0x1,0xc(%esp)
   1e295:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e299:	83 f8 23             	cmp    $0x23,%eax
   1e29c:	76 cf                	jbe    1e26d <set_termios+0x61>
		((char *) & tty->termios)[i] = get_fs_byte(i + (char *)termios);
	change_speed(tty);
   1e29e:	83 ec 0c             	sub    $0xc,%esp
   1e2a1:	ff 74 24 2c          	pushl  0x2c(%esp)
   1e2a5:	e8 6c fe ff ff       	call   1e116 <change_speed>
   1e2aa:	83 c4 10             	add    $0x10,%esp
	return 0;
   1e2ad:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1e2b2:	83 c4 18             	add    $0x18,%esp
   1e2b5:	5b                   	pop    %ebx
   1e2b6:	c3                   	ret    

0001e2b7 <get_termio>:

// 读取termio结构中的信息。
// 参数：tty - 指定终端的tty结构指针；termio - 保存termio结构信息的用户缓冲区。
static int get_termio(struct tty_struct * tty, struct termio * termio)
{
   1e2b7:	83 ec 2c             	sub    $0x2c,%esp
	struct termio tmp_termio;

	// 首先验证用户的缓冲区指针所指内存区容量是否足够，如不够则分配内存。然后将termios结构的信息复制到临时termio结构中，
	// 这两个结构基本相同，输入、输出、控制和本地标志集数据类型不同。前者的是long，而后者的是short。因此先复制到临时
	// termio结构中目的是为了进行数据类型转换。
	verify_area(termio, sizeof (*termio));
   1e2ba:	83 ec 08             	sub    $0x8,%esp
   1e2bd:	6a 12                	push   $0x12
   1e2bf:	ff 74 24 40          	pushl  0x40(%esp)
   1e2c3:	e8 db a0 fe ff       	call   83a3 <verify_area>
   1e2c8:	83 c4 10             	add    $0x10,%esp
	tmp_termio.c_iflag = tty->termios.c_iflag;
   1e2cb:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e2cf:	8b 00                	mov    (%eax),%eax
   1e2d1:	66 89 44 24 0a       	mov    %ax,0xa(%esp)
	tmp_termio.c_oflag = tty->termios.c_oflag;
   1e2d6:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e2da:	8b 40 04             	mov    0x4(%eax),%eax
   1e2dd:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	tmp_termio.c_cflag = tty->termios.c_cflag;
   1e2e2:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e2e6:	8b 40 08             	mov    0x8(%eax),%eax
   1e2e9:	66 89 44 24 0e       	mov    %ax,0xe(%esp)
	tmp_termio.c_lflag = tty->termios.c_lflag;
   1e2ee:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e2f2:	8b 40 0c             	mov    0xc(%eax),%eax
   1e2f5:	66 89 44 24 10       	mov    %ax,0x10(%esp)
	tmp_termio.c_line = tty->termios.c_line;
   1e2fa:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e2fe:	0f b6 40 10          	movzbl 0x10(%eax),%eax
   1e302:	88 44 24 12          	mov    %al,0x12(%esp)
	for(i = 0 ; i < NCC ; i++)
   1e306:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   1e30d:	00 
   1e30e:	eb 21                	jmp    1e331 <get_termio+0x7a>
		tmp_termio.c_cc[i] = tty->termios.c_cc[i];
   1e310:	8b 54 24 30          	mov    0x30(%esp),%edx
   1e314:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1e318:	01 d0                	add    %edx,%eax
   1e31a:	83 c0 11             	add    $0x11,%eax
   1e31d:	0f b6 00             	movzbl (%eax),%eax
   1e320:	8d 4c 24 13          	lea    0x13(%esp),%ecx
   1e324:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1e328:	01 ca                	add    %ecx,%edx
   1e32a:	88 02                	mov    %al,(%edx)
	tmp_termio.c_iflag = tty->termios.c_iflag;
	tmp_termio.c_oflag = tty->termios.c_oflag;
	tmp_termio.c_cflag = tty->termios.c_cflag;
	tmp_termio.c_lflag = tty->termios.c_lflag;
	tmp_termio.c_line = tty->termios.c_line;
	for(i = 0 ; i < NCC ; i++)
   1e32c:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   1e331:	83 7c 24 1c 07       	cmpl   $0x7,0x1c(%esp)
   1e336:	7e d8                	jle    1e310 <get_termio+0x59>
		tmp_termio.c_cc[i] = tty->termios.c_cc[i];
	// 然后逐字节地把临时termio结构中的信息复制到用户termio结构缓冲区中。并返回0。
	for (i = 0 ; i < (sizeof (*termio)) ; i++)
   1e338:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   1e33f:	00 
   1e340:	eb 2c                	jmp    1e36e <get_termio+0xb7>
		put_fs_byte( ((char *) & tmp_termio)[i] , i + (char *)termio );
   1e342:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1e346:	8b 44 24 34          	mov    0x34(%esp),%eax
   1e34a:	01 c2                	add    %eax,%edx
   1e34c:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1e350:	8d 4c 24 0a          	lea    0xa(%esp),%ecx
   1e354:	01 c8                	add    %ecx,%eax
   1e356:	0f b6 00             	movzbl (%eax),%eax
   1e359:	0f be c0             	movsbl %al,%eax
   1e35c:	83 ec 08             	sub    $0x8,%esp
   1e35f:	52                   	push   %edx
   1e360:	50                   	push   %eax
   1e361:	e8 89 fd ff ff       	call   1e0ef <put_fs_byte>
   1e366:	83 c4 10             	add    $0x10,%esp
	tmp_termio.c_lflag = tty->termios.c_lflag;
	tmp_termio.c_line = tty->termios.c_line;
	for(i = 0 ; i < NCC ; i++)
		tmp_termio.c_cc[i] = tty->termios.c_cc[i];
	// 然后逐字节地把临时termio结构中的信息复制到用户termio结构缓冲区中。并返回0。
	for (i = 0 ; i < (sizeof (*termio)) ; i++)
   1e369:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   1e36e:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1e372:	83 f8 11             	cmp    $0x11,%eax
   1e375:	76 cb                	jbe    1e342 <get_termio+0x8b>
		put_fs_byte( ((char *) & tmp_termio)[i] , i + (char *)termio );
	return 0;
   1e377:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1e37c:	83 c4 2c             	add    $0x2c,%esp
   1e37f:	c3                   	ret    

0001e380 <set_termio>:
// 设置终端termio结构信息。
// 参数：tty - 指定终端的tty结构指针；termio - 用户数据区中termio结构。
// 将用户缓冲区termio的信息复制到终端的termios结构中。返回0。
static int set_termio(struct tty_struct * tty, struct termio * termio,
			int channel)
{
   1e380:	53                   	push   %ebx
   1e381:	83 ec 28             	sub    $0x28,%esp

	// 与set_termios()一样，如果进程使用的终端的进程组号的进程组号与进程的进程组号不同，即当前进程终端不在前台，表示当前
	// 进程试图修改不受控制的终端的termios结构。因此根据POSIX标准的要求这里需要发送SIGTTOU信号让使用这个终端的进程先暂
	// 时停止执行，以让我们先修改termios结构。如果发送信号函数tty_signal()返回值是ERESTARTSYS或EINTR，则等一会再执行
	// 本次操作。
	if ((current->tty == channel) && (tty->pgrp != current->pgrp)) {
   1e384:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1e389:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
   1e38f:	3b 44 24 38          	cmp    0x38(%esp),%eax
   1e393:	75 45                	jne    1e3da <set_termio+0x5a>
   1e395:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e399:	8b 50 24             	mov    0x24(%eax),%edx
   1e39c:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1e3a1:	8b 80 30 02 00 00    	mov    0x230(%eax),%eax
   1e3a7:	39 c2                	cmp    %eax,%edx
   1e3a9:	74 2f                	je     1e3da <set_termio+0x5a>
		retsig = tty_signal(SIGTTOU, tty);
   1e3ab:	83 ec 08             	sub    $0x8,%esp
   1e3ae:	ff 74 24 38          	pushl  0x38(%esp)
   1e3b2:	6a 16                	push   $0x16
   1e3b4:	e8 e7 ae ff ff       	call   192a0 <tty_signal>
   1e3b9:	83 c4 10             	add    $0x10,%esp
   1e3bc:	89 44 24 18          	mov    %eax,0x18(%esp)
		if (retsig == -ERESTARTSYS || retsig == -EINTR)
   1e3c0:	81 7c 24 18 00 fe ff 	cmpl   $0xfffffe00,0x18(%esp)
   1e3c7:	ff 
   1e3c8:	74 07                	je     1e3d1 <set_termio+0x51>
   1e3ca:	83 7c 24 18 fc       	cmpl   $0xfffffffc,0x18(%esp)
   1e3cf:	75 09                	jne    1e3da <set_termio+0x5a>
			return retsig;
   1e3d1:	8b 44 24 18          	mov    0x18(%esp),%eax
   1e3d5:	e9 c6 00 00 00       	jmp    1e4a0 <set_termio+0x120>
	}
	// 接着复制用户数据区中termio结构信息到临时termio结构中。然后再将termio结构的信息复制到tty的termios结构中。这样做
	// 的目的是为了对其中模式标志集的类型进行转换，即从termio的短整数类型转换成termios的长整数类型。但两种结构的c_line和
	// c_cc[]字段是完全相同的。
	for (i = 0 ; i< (sizeof (*termio)) ; i++)
   1e3da:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   1e3e1:	00 
   1e3e2:	eb 28                	jmp    1e40c <set_termio+0x8c>
		((char *)&tmp_termio)[i] = get_fs_byte(i + (char *)termio);
   1e3e4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1e3e8:	8d 54 24 06          	lea    0x6(%esp),%edx
   1e3ec:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
   1e3ef:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1e3f3:	8b 44 24 34          	mov    0x34(%esp),%eax
   1e3f7:	01 d0                	add    %edx,%eax
   1e3f9:	83 ec 0c             	sub    $0xc,%esp
   1e3fc:	50                   	push   %eax
   1e3fd:	e8 c9 fc ff ff       	call   1e0cb <get_fs_byte>
   1e402:	83 c4 10             	add    $0x10,%esp
   1e405:	88 03                	mov    %al,(%ebx)
			return retsig;
	}
	// 接着复制用户数据区中termio结构信息到临时termio结构中。然后再将termio结构的信息复制到tty的termios结构中。这样做
	// 的目的是为了对其中模式标志集的类型进行转换，即从termio的短整数类型转换成termios的长整数类型。但两种结构的c_line和
	// c_cc[]字段是完全相同的。
	for (i = 0 ; i< (sizeof (*termio)) ; i++)
   1e407:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   1e40c:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1e410:	83 f8 11             	cmp    $0x11,%eax
   1e413:	76 cf                	jbe    1e3e4 <set_termio+0x64>
		((char *)&tmp_termio)[i] = get_fs_byte(i + (char *)termio);
	*(unsigned short *)&tty->termios.c_iflag = tmp_termio.c_iflag;
   1e415:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e419:	0f b7 54 24 06       	movzwl 0x6(%esp),%edx
   1e41e:	66 89 10             	mov    %dx,(%eax)
	*(unsigned short *)&tty->termios.c_oflag = tmp_termio.c_oflag;
   1e421:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e425:	8d 50 04             	lea    0x4(%eax),%edx
   1e428:	0f b7 44 24 08       	movzwl 0x8(%esp),%eax
   1e42d:	66 89 02             	mov    %ax,(%edx)
	*(unsigned short *)&tty->termios.c_cflag = tmp_termio.c_cflag;
   1e430:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e434:	8d 50 08             	lea    0x8(%eax),%edx
   1e437:	0f b7 44 24 0a       	movzwl 0xa(%esp),%eax
   1e43c:	66 89 02             	mov    %ax,(%edx)
	*(unsigned short *)&tty->termios.c_lflag = tmp_termio.c_lflag;
   1e43f:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e443:	8d 50 0c             	lea    0xc(%eax),%edx
   1e446:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   1e44b:	66 89 02             	mov    %ax,(%edx)
	tty->termios.c_line = tmp_termio.c_line;
   1e44e:	0f b6 54 24 0e       	movzbl 0xe(%esp),%edx
   1e453:	8b 44 24 30          	mov    0x30(%esp),%eax
   1e457:	88 50 10             	mov    %dl,0x10(%eax)
	for(i = 0 ; i < NCC ; i++)
   1e45a:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   1e461:	00 
   1e462:	eb 21                	jmp    1e485 <set_termio+0x105>
		tty->termios.c_cc[i] = tmp_termio.c_cc[i];
   1e464:	8d 54 24 0f          	lea    0xf(%esp),%edx
   1e468:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   1e46c:	01 d0                	add    %edx,%eax
   1e46e:	0f b6 00             	movzbl (%eax),%eax
   1e471:	8b 4c 24 30          	mov    0x30(%esp),%ecx
   1e475:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   1e479:	01 ca                	add    %ecx,%edx
   1e47b:	83 c2 11             	add    $0x11,%edx
   1e47e:	88 02                	mov    %al,(%edx)
	*(unsigned short *)&tty->termios.c_iflag = tmp_termio.c_iflag;
	*(unsigned short *)&tty->termios.c_oflag = tmp_termio.c_oflag;
	*(unsigned short *)&tty->termios.c_cflag = tmp_termio.c_cflag;
	*(unsigned short *)&tty->termios.c_lflag = tmp_termio.c_lflag;
	tty->termios.c_line = tmp_termio.c_line;
	for(i = 0 ; i < NCC ; i++)
   1e480:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   1e485:	83 7c 24 1c 07       	cmpl   $0x7,0x1c(%esp)
   1e48a:	7e d8                	jle    1e464 <set_termio+0xe4>
		tty->termios.c_cc[i] = tmp_termio.c_cc[i];
	// 最后因为用户有可能已修改了终端串行口传输波特率，所以这里再根据termios结构中的控制模式标志c_cflag中的波特率信息修改
	// 串行UART芯片内的传输波特率，并返回0。
	change_speed(tty);
   1e48c:	83 ec 0c             	sub    $0xc,%esp
   1e48f:	ff 74 24 3c          	pushl  0x3c(%esp)
   1e493:	e8 7e fc ff ff       	call   1e116 <change_speed>
   1e498:	83 c4 10             	add    $0x10,%esp
	return 0;
   1e49b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1e4a0:	83 c4 28             	add    $0x28,%esp
   1e4a3:	5b                   	pop    %ebx
   1e4a4:	c3                   	ret    

0001e4a5 <tty_ioctl>:

// tty终端设备输入输出控制函数。
// 参数：dev - 设备号；cmd - ioctl命令；arg - 操作参数指针。
// 该函数首先根据参数给出的设备号找出对应终端的tty结构，然后根据控制命令cmd分别进行处理。
int tty_ioctl(int dev, int cmd, int arg)
{
   1e4a5:	83 ec 1c             	sub    $0x1c,%esp
	int	pgrp;

	// 首先根据设备号取得tty子设备号，从而取得终端的tty结构。若主设备号是5（控制终端），则进程的tty字段即是tty子设备
	// 号。此时如果进程的tty子设备号是负数，表明该进程没有控制终端，即不能发出该ioctl调用，于是显示出错信息并停机。如果
	// 主设备号不是5而是4,我们就可以从设备号中取出子设备号。子设备号可以是0（控制台终端）、1（串口1终端）、2（串口2终端）。
	if (MAJOR(dev) == 5) {
   1e4a8:	8b 44 24 20          	mov    0x20(%esp),%eax
   1e4ac:	c1 e8 08             	shr    $0x8,%eax
   1e4af:	83 f8 05             	cmp    $0x5,%eax
   1e4b2:	75 28                	jne    1e4dc <tty_ioctl+0x37>
		dev = current->tty;
   1e4b4:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1e4b9:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
   1e4bf:	89 44 24 20          	mov    %eax,0x20(%esp)
		if (dev < 0)
   1e4c3:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
   1e4c8:	79 1a                	jns    1e4e4 <tty_ioctl+0x3f>
			panic("tty_ioctl: dev<0");
   1e4ca:	83 ec 0c             	sub    $0xc,%esp
   1e4cd:	68 a0 4f 02 00       	push   $0x24fa0
   1e4d2:	e8 31 a7 fe ff       	call   8c08 <panic>
   1e4d7:	83 c4 10             	add    $0x10,%esp
   1e4da:	eb 08                	jmp    1e4e4 <tty_ioctl+0x3f>
	} else
		dev = MINOR(dev);
   1e4dc:	81 64 24 20 ff 00 00 	andl   $0xff,0x20(%esp)
   1e4e3:	00 
	// ioctl命令cmd进行分别处理。144行后半部分用于根据子设备号dev在tty_table[]表中选择对应的tty结构。如果dev = 0，表示
	// 正在使用前台终端，因此直接使用终端号fg_console作为tty_table[]项索引取tty结构。如果dev大于0,那么就要分两种情况考虑：
	// 1、dev是虚拟终端号；2、dev是串行终端号或者伪终端号。对于虚拟终端其tty结构在tty_table[]中索引项是dev-1（0--63）。
	// 对于其他类型终端，则它们的tty结构索引项就是dev。例如，如果dev = 64，表示是一个串行终端1,则其tty结构就是tty_table[dev]
	// 如果dev = 1，则对应终端的tty结构是tty_table[0]。
	tty = tty_table + (dev ? ((dev < 64)? dev - 1 : dev) : fg_console);
   1e4e4:	83 7c 24 20 00       	cmpl   $0x0,0x20(%esp)
   1e4e9:	74 26                	je     1e511 <tty_ioctl+0x6c>
   1e4eb:	83 7c 24 20 3f       	cmpl   $0x3f,0x20(%esp)
   1e4f0:	7f 11                	jg     1e503 <tty_ioctl+0x5e>
   1e4f2:	8b 44 24 20          	mov    0x20(%esp),%eax
   1e4f6:	83 e8 01             	sub    $0x1,%eax
   1e4f9:	c1 e0 06             	shl    $0x6,%eax
   1e4fc:	05 20 18 04 00       	add    $0x41820,%eax
   1e501:	eb 1b                	jmp    1e51e <tty_ioctl+0x79>
   1e503:	8b 44 24 20          	mov    0x20(%esp),%eax
   1e507:	c1 e0 06             	shl    $0x6,%eax
   1e50a:	05 20 18 04 00       	add    $0x41820,%eax
   1e50f:	eb 0d                	jmp    1e51e <tty_ioctl+0x79>
   1e511:	a1 80 12 03 00       	mov    0x31280,%eax
   1e516:	c1 e0 06             	shl    $0x6,%eax
   1e519:	05 20 18 04 00       	add    $0x41820,%eax
   1e51e:	89 44 24 0c          	mov    %eax,0xc(%esp)
	switch (cmd) {
   1e522:	8b 44 24 24          	mov    0x24(%esp),%eax
   1e526:	2d 01 54 00 00       	sub    $0x5401,%eax
   1e52b:	83 f8 1a             	cmp    $0x1a,%eax
   1e52e:	0f 87 4f 04 00 00    	ja     1e983 <tty_ioctl+0x4de>
   1e534:	8b 04 85 b4 4f 02 00 	mov    0x24fb4(,%eax,4),%eax
   1e53b:	ff e0                	jmp    *%eax
		// 取相应终端termios结构信息。此时参数arg是用户缓冲区指针。
		case TCGETS:
			return get_termios(tty, (struct termios *) arg);
   1e53d:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e541:	83 ec 08             	sub    $0x8,%esp
   1e544:	50                   	push   %eax
   1e545:	ff 74 24 18          	pushl  0x18(%esp)
   1e549:	e8 62 fc ff ff       	call   1e1b0 <get_termios>
   1e54e:	83 c4 10             	add    $0x10,%esp
   1e551:	e9 32 04 00 00       	jmp    1e988 <tty_ioctl+0x4e3>
		// 在设置termios结构信息之前，需要先等待输出队列中所有数据处理完毕，并且刷新（清空）输入队列。再接着执行下面的设置终端termios
		// 结构的操作。
		case TCSETSF:
			flush(tty->read_q); 							/* fallthrough */
   1e556:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e55a:	8b 40 34             	mov    0x34(%eax),%eax
   1e55d:	83 ec 0c             	sub    $0xc,%esp
   1e560:	50                   	push   %eax
   1e561:	e8 34 fc ff ff       	call   1e19a <flush>
   1e566:	83 c4 10             	add    $0x10,%esp
		// 在设置终端termios的信息之前，需要先等待输出队列中所有数据处理完（耗尽）。对于修改参数会影响输出的情况，就需要使用这种形式。
		case TCSETSW:
			wait_until_sent(tty); 							/* fallthrough */
   1e569:	83 ec 0c             	sub    $0xc,%esp
   1e56c:	ff 74 24 18          	pushl  0x18(%esp)
   1e570:	e8 37 fc ff ff       	call   1e1ac <wait_until_sent>
   1e575:	83 c4 10             	add    $0x10,%esp
		// 设置相应终端termios结构信息。此时参数arg是保存termios结构的用户缓冲区指针。
		case TCSETS:
			return set_termios(tty,(struct termios *) arg, dev);
   1e578:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e57c:	83 ec 04             	sub    $0x4,%esp
   1e57f:	ff 74 24 24          	pushl  0x24(%esp)
   1e583:	50                   	push   %eax
   1e584:	ff 74 24 18          	pushl  0x18(%esp)
   1e588:	e8 7f fc ff ff       	call   1e20c <set_termios>
   1e58d:	83 c4 10             	add    $0x10,%esp
   1e590:	e9 f3 03 00 00       	jmp    1e988 <tty_ioctl+0x4e3>
		// 取相应终端termio结构中的信息。此时参数arg是用户缓冲区指针。
		case TCGETA:
			return get_termio(tty,(struct termio *) arg);
   1e595:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e599:	83 ec 08             	sub    $0x8,%esp
   1e59c:	50                   	push   %eax
   1e59d:	ff 74 24 18          	pushl  0x18(%esp)
   1e5a1:	e8 11 fd ff ff       	call   1e2b7 <get_termio>
   1e5a6:	83 c4 10             	add    $0x10,%esp
   1e5a9:	e9 da 03 00 00       	jmp    1e988 <tty_ioctl+0x4e3>
		// 在设置termio结构信息之前，需要先等待输出队列中所有数据处理完毕，并且刷新（清空）输入队列。再接着执行下面的设置终端termio
		// 结构的操作。
		case TCSETAF:
			flush(tty->read_q); 							/* fallthrough */
   1e5ae:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e5b2:	8b 40 34             	mov    0x34(%eax),%eax
   1e5b5:	83 ec 0c             	sub    $0xc,%esp
   1e5b8:	50                   	push   %eax
   1e5b9:	e8 dc fb ff ff       	call   1e19a <flush>
   1e5be:	83 c4 10             	add    $0x10,%esp
		// 在设置终端termios的信息之前，需要先等待输出队列中所有数据处理完（耗尽）。对于修改参数会影响输出的情况，就需要使用这种形式。
		case TCSETAW:
			wait_until_sent(tty); 							/* fallthrough */
   1e5c1:	83 ec 0c             	sub    $0xc,%esp
   1e5c4:	ff 74 24 18          	pushl  0x18(%esp)
   1e5c8:	e8 df fb ff ff       	call   1e1ac <wait_until_sent>
   1e5cd:	83 c4 10             	add    $0x10,%esp
		// 设置相应终端termio结构信息。此时参数arg是保存termio结构的用户缓冲区指针。
		case TCSETA:
			return set_termio(tty,(struct termio *) arg, dev);
   1e5d0:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e5d4:	83 ec 04             	sub    $0x4,%esp
   1e5d7:	ff 74 24 24          	pushl  0x24(%esp)
   1e5db:	50                   	push   %eax
   1e5dc:	ff 74 24 18          	pushl  0x18(%esp)
   1e5e0:	e8 9b fd ff ff       	call   1e380 <set_termio>
   1e5e5:	83 c4 10             	add    $0x10,%esp
   1e5e8:	e9 9b 03 00 00       	jmp    1e988 <tty_ioctl+0x4e3>
		// 如果参数arg值是0，则等待输出队列处理完毕（空），并发送一个break。
		case TCSBRK:
			if (!arg) {
   1e5ed:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   1e5f2:	75 1e                	jne    1e612 <tty_ioctl+0x16d>
				wait_until_sent(tty);
   1e5f4:	83 ec 0c             	sub    $0xc,%esp
   1e5f7:	ff 74 24 18          	pushl  0x18(%esp)
   1e5fb:	e8 ac fb ff ff       	call   1e1ac <wait_until_sent>
   1e600:	83 c4 10             	add    $0x10,%esp
				send_break(tty);
   1e603:	83 ec 0c             	sub    $0xc,%esp
   1e606:	ff 74 24 18          	pushl  0x18(%esp)
   1e60a:	e8 9f fb ff ff       	call   1e1ae <send_break>
   1e60f:	83 c4 10             	add    $0x10,%esp
			}
			return 0;
   1e612:	b8 00 00 00 00       	mov    $0x0,%eax
   1e617:	e9 6c 03 00 00       	jmp    1e988 <tty_ioctl+0x4e3>
		// 开始/停止流控制。如果参数arg是TCOOFF（Terminal Control Output OFF），则挂起输出；如果是TCOON，则恢复挂起的输出。在挂
		// 起或恢复输出同时需要把写队列中的字符输出，以加快用户交互响应速度。如果arg是TCIOFF（Terminal Control Input ON），则挂起
		// 输入；如果是TCION，则重新开启挂起的输入。
		case TCXONC:
			switch (arg) {
   1e61c:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e620:	83 f8 01             	cmp    $0x1,%eax
   1e623:	74 49                	je     1e66e <tty_ioctl+0x1c9>
   1e625:	83 f8 01             	cmp    $0x1,%eax
   1e628:	7f 09                	jg     1e633 <tty_ioctl+0x18e>
   1e62a:	85 c0                	test   %eax,%eax
   1e62c:	74 18                	je     1e646 <tty_ioctl+0x1a1>
   1e62e:	e9 03 01 00 00       	jmp    1e736 <tty_ioctl+0x291>
   1e633:	83 f8 02             	cmp    $0x2,%eax
   1e636:	74 5e                	je     1e696 <tty_ioctl+0x1f1>
   1e638:	83 f8 03             	cmp    $0x3,%eax
   1e63b:	0f 84 a5 00 00 00    	je     1e6e6 <tty_ioctl+0x241>
   1e641:	e9 f0 00 00 00       	jmp    1e736 <tty_ioctl+0x291>
			case TCOOFF:
				tty->stopped = 1;       					// 停止终端输出。
   1e646:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e64a:	c7 40 2c 01 00 00 00 	movl   $0x1,0x2c(%eax)
				tty->write(tty);        					// 写缓冲队列输出。
   1e651:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e655:	8b 40 30             	mov    0x30(%eax),%eax
   1e658:	83 ec 0c             	sub    $0xc,%esp
   1e65b:	ff 74 24 18          	pushl  0x18(%esp)
   1e65f:	ff d0                	call   *%eax
   1e661:	83 c4 10             	add    $0x10,%esp
				return 0;
   1e664:	b8 00 00 00 00       	mov    $0x0,%eax
   1e669:	e9 1a 03 00 00       	jmp    1e988 <tty_ioctl+0x4e3>
			case TCOON:
				tty->stopped = 0;       					// 恢复终端输出。
   1e66e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e672:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
				tty->write(tty);
   1e679:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e67d:	8b 40 30             	mov    0x30(%eax),%eax
   1e680:	83 ec 0c             	sub    $0xc,%esp
   1e683:	ff 74 24 18          	pushl  0x18(%esp)
   1e687:	ff d0                	call   *%eax
   1e689:	83 c4 10             	add    $0x10,%esp
				return 0;
   1e68c:	b8 00 00 00 00       	mov    $0x0,%eax
   1e691:	e9 f2 02 00 00       	jmp    1e988 <tty_ioctl+0x4e3>
			// 如果参数arg是TCIOFF，表示要求终端停止输入，于是我们往终端写队列放入STOP字符。当终端收到该字符时就会暂停输入。如果参数是
			// TCION，表示发送一个START字符，让终端恢复传输。STOP_CHAR(tty)字义为((tty)->termios.c_cc[VSTOP])，即取终端termios
			// 结构控制字符数组对应项值。若内核定义了_POSIX_VDISABLE(\0)，那么当某一项等于_POSIX_VDISABLE的值时，表示禁止使用相应的
			// 特殊字符。因此这里直接判断该值是否为0来确定要不要把停止控制字符放入终端写队列中。以下同。
			case TCIOFF:
				if (STOP_CHAR(tty))
   1e696:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e69a:	0f b6 40 1a          	movzbl 0x1a(%eax),%eax
   1e69e:	84 c0                	test   %al,%al
   1e6a0:	74 3a                	je     1e6dc <tty_ioctl+0x237>
					PUTCH(STOP_CHAR(tty), tty->write_q);
   1e6a2:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e6a6:	8b 50 38             	mov    0x38(%eax),%edx
   1e6a9:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e6ad:	8b 40 38             	mov    0x38(%eax),%eax
   1e6b0:	8b 40 04             	mov    0x4(%eax),%eax
   1e6b3:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   1e6b7:	0f b6 49 1a          	movzbl 0x1a(%ecx),%ecx
   1e6bb:	88 4c 02 10          	mov    %cl,0x10(%edx,%eax,1)
   1e6bf:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e6c3:	8b 40 38             	mov    0x38(%eax),%eax
   1e6c6:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1e6ca:	8b 52 38             	mov    0x38(%edx),%edx
   1e6cd:	8b 52 04             	mov    0x4(%edx),%edx
   1e6d0:	83 c2 01             	add    $0x1,%edx
   1e6d3:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   1e6d9:	89 50 04             	mov    %edx,0x4(%eax)
				return 0;
   1e6dc:	b8 00 00 00 00       	mov    $0x0,%eax
   1e6e1:	e9 a2 02 00 00       	jmp    1e988 <tty_ioctl+0x4e3>
			case TCION:
				if (START_CHAR(tty))
   1e6e6:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e6ea:	0f b6 40 19          	movzbl 0x19(%eax),%eax
   1e6ee:	84 c0                	test   %al,%al
   1e6f0:	74 3a                	je     1e72c <tty_ioctl+0x287>
					PUTCH(START_CHAR(tty), tty->write_q);
   1e6f2:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e6f6:	8b 50 38             	mov    0x38(%eax),%edx
   1e6f9:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e6fd:	8b 40 38             	mov    0x38(%eax),%eax
   1e700:	8b 40 04             	mov    0x4(%eax),%eax
   1e703:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   1e707:	0f b6 49 19          	movzbl 0x19(%ecx),%ecx
   1e70b:	88 4c 02 10          	mov    %cl,0x10(%edx,%eax,1)
   1e70f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e713:	8b 40 38             	mov    0x38(%eax),%eax
   1e716:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1e71a:	8b 52 38             	mov    0x38(%edx),%edx
   1e71d:	8b 52 04             	mov    0x4(%edx),%edx
   1e720:	83 c2 01             	add    $0x1,%edx
   1e723:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   1e729:	89 50 04             	mov    %edx,0x4(%eax)
				return 0;
   1e72c:	b8 00 00 00 00       	mov    $0x0,%eax
   1e731:	e9 52 02 00 00       	jmp    1e988 <tty_ioctl+0x4e3>
			}
			return -EINVAL; 								/* not implemented */
   1e736:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e73b:	e9 48 02 00 00       	jmp    1e988 <tty_ioctl+0x4e3>
		// 刷新已写输出但还没有发送、或已接收但还没有读的数据。如果参数arg是0，则刷新（清空）输入队列；如果是1，则刷新输出队列；如果
		// 2，则刷新输入和输出队列。
		case TCFLSH:
			if (arg == 0)
   1e740:	83 7c 24 28 00       	cmpl   $0x0,0x28(%esp)
   1e745:	75 15                	jne    1e75c <tty_ioctl+0x2b7>
				flush(tty->read_q);
   1e747:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e74b:	8b 40 34             	mov    0x34(%eax),%eax
   1e74e:	83 ec 0c             	sub    $0xc,%esp
   1e751:	50                   	push   %eax
   1e752:	e8 43 fa ff ff       	call   1e19a <flush>
   1e757:	83 c4 10             	add    $0x10,%esp
   1e75a:	eb 55                	jmp    1e7b1 <tty_ioctl+0x30c>
			else if (arg == 1)
   1e75c:	83 7c 24 28 01       	cmpl   $0x1,0x28(%esp)
   1e761:	75 15                	jne    1e778 <tty_ioctl+0x2d3>
				flush(tty->write_q);
   1e763:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e767:	8b 40 38             	mov    0x38(%eax),%eax
   1e76a:	83 ec 0c             	sub    $0xc,%esp
   1e76d:	50                   	push   %eax
   1e76e:	e8 27 fa ff ff       	call   1e19a <flush>
   1e773:	83 c4 10             	add    $0x10,%esp
   1e776:	eb 39                	jmp    1e7b1 <tty_ioctl+0x30c>
			else if (arg == 2) {
   1e778:	83 7c 24 28 02       	cmpl   $0x2,0x28(%esp)
   1e77d:	75 28                	jne    1e7a7 <tty_ioctl+0x302>
				flush(tty->read_q);
   1e77f:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e783:	8b 40 34             	mov    0x34(%eax),%eax
   1e786:	83 ec 0c             	sub    $0xc,%esp
   1e789:	50                   	push   %eax
   1e78a:	e8 0b fa ff ff       	call   1e19a <flush>
   1e78f:	83 c4 10             	add    $0x10,%esp
				flush(tty->write_q);
   1e792:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e796:	8b 40 38             	mov    0x38(%eax),%eax
   1e799:	83 ec 0c             	sub    $0xc,%esp
   1e79c:	50                   	push   %eax
   1e79d:	e8 f8 f9 ff ff       	call   1e19a <flush>
   1e7a2:	83 c4 10             	add    $0x10,%esp
   1e7a5:	eb 0a                	jmp    1e7b1 <tty_ioctl+0x30c>
			} else
				return -EINVAL;
   1e7a7:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e7ac:	e9 d7 01 00 00       	jmp    1e988 <tty_ioctl+0x4e3>
			return 0;
   1e7b1:	b8 00 00 00 00       	mov    $0x0,%eax
   1e7b6:	e9 cd 01 00 00       	jmp    1e988 <tty_ioctl+0x4e3>
		// 设置终端串行线路专用模式。
		case TIOCEXCL:
			return -EINVAL; 							/* not implemented */   /* 未实现 */
   1e7bb:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e7c0:	e9 c3 01 00 00       	jmp    1e988 <tty_ioctl+0x4e3>
		// 复位终端串行线路专用模式。
		case TIOCNXCL:
			return -EINVAL; 							/* not implemented */
   1e7c5:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e7ca:	e9 b9 01 00 00       	jmp    1e988 <tty_ioctl+0x4e3>
		// 设置tty为控制终端。（TIOCNOTTY - 不要控制终端）。
		case TIOCSCTTY:
			return -EINVAL; 							/* set controlling term NI */
   1e7cf:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e7d4:	e9 af 01 00 00       	jmp    1e988 <tty_ioctl+0x4e3>
		// 读取终端进程组号（即读取前台进程组号）。首先验证用户缓冲区长度，然后复制终端tty的pgrp字段到用户缓冲区。此时参数arg是用户
		// 缓冲区指针。
		case TIOCGPGRP:
			verify_area((void *) arg, 4);            	// 实现库函数tcgetpgrp()。
   1e7d9:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e7dd:	83 ec 08             	sub    $0x8,%esp
   1e7e0:	6a 04                	push   $0x4
   1e7e2:	50                   	push   %eax
   1e7e3:	e8 bb 9b fe ff       	call   83a3 <verify_area>
   1e7e8:	83 c4 10             	add    $0x10,%esp
			put_fs_long(tty->pgrp, (unsigned long *) arg);
   1e7eb:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e7ef:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1e7f3:	8b 52 24             	mov    0x24(%edx),%edx
   1e7f6:	83 ec 08             	sub    $0x8,%esp
   1e7f9:	50                   	push   %eax
   1e7fa:	52                   	push   %edx
   1e7fb:	e8 09 f9 ff ff       	call   1e109 <put_fs_long>
   1e800:	83 c4 10             	add    $0x10,%esp
			return 0;
   1e803:	b8 00 00 00 00       	mov    $0x0,%eax
   1e808:	e9 7b 01 00 00       	jmp    1e988 <tty_ioctl+0x4e3>
		// 设置终端进程组号pgrp（即设置前台进程组号）。此时参数arg是用户缓冲区中进程组号pgrp的指针。执行该命令的前提条件是进程必须
		// 有控制终端。如果当前进程没有控制终端，或者dev不是其控制终端，或者控制终端现在的确是正在处理的终端dev，但进程的会话号与该
		// 终端dev的会话号不同，则返回无终端错误信息。
		case TIOCSPGRP:                                 // 实现库函数tcsetpgrp()。
			if ((current->tty < 0) ||
   1e80d:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1e812:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
   1e818:	85 c0                	test   %eax,%eax
   1e81a:	78 27                	js     1e843 <tty_ioctl+0x39e>
			    (current->tty != dev) ||
   1e81c:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1e821:	8b 80 2c 03 00 00    	mov    0x32c(%eax),%eax
			return 0;
		// 设置终端进程组号pgrp（即设置前台进程组号）。此时参数arg是用户缓冲区中进程组号pgrp的指针。执行该命令的前提条件是进程必须
		// 有控制终端。如果当前进程没有控制终端，或者dev不是其控制终端，或者控制终端现在的确是正在处理的终端dev，但进程的会话号与该
		// 终端dev的会话号不同，则返回无终端错误信息。
		case TIOCSPGRP:                                 // 实现库函数tcsetpgrp()。
			if ((current->tty < 0) ||
   1e827:	3b 44 24 20          	cmp    0x20(%esp),%eax
   1e82b:	75 16                	jne    1e843 <tty_ioctl+0x39e>
			    (current->tty != dev) ||
			    (tty->session != current->session))
   1e82d:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e831:	8b 50 28             	mov    0x28(%eax),%edx
   1e834:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1e839:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
		// 设置终端进程组号pgrp（即设置前台进程组号）。此时参数arg是用户缓冲区中进程组号pgrp的指针。执行该命令的前提条件是进程必须
		// 有控制终端。如果当前进程没有控制终端，或者dev不是其控制终端，或者控制终端现在的确是正在处理的终端dev，但进程的会话号与该
		// 终端dev的会话号不同，则返回无终端错误信息。
		case TIOCSPGRP:                                 // 实现库函数tcsetpgrp()。
			if ((current->tty < 0) ||
			    (current->tty != dev) ||
   1e83f:	39 c2                	cmp    %eax,%edx
   1e841:	74 0a                	je     1e84d <tty_ioctl+0x3a8>
			    (tty->session != current->session))
				return -ENOTTY;
   1e843:	b8 e7 ff ff ff       	mov    $0xffffffe7,%eax
   1e848:	e9 3b 01 00 00       	jmp    1e988 <tty_ioctl+0x4e3>
			// 然后我们就从用户缓冲区中取得欲设置的进程号，并对该组号的有效性进行验证。如果组号pgrp小于0,则返回无效组号错误信息；如果pgrp
			// 的会话号与当前进程的不同，则返回许可错误信息。否则我们可以设置终端进程组号为pgrp。此时pgrp成为前台进程组。
			pgrp = get_fs_long((unsigned long *) arg);
   1e84d:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e851:	83 ec 0c             	sub    $0xc,%esp
   1e854:	50                   	push   %eax
   1e855:	e8 7f f8 ff ff       	call   1e0d9 <get_fs_long>
   1e85a:	83 c4 10             	add    $0x10,%esp
   1e85d:	89 44 24 08          	mov    %eax,0x8(%esp)
			if (pgrp < 0)
   1e861:	83 7c 24 08 00       	cmpl   $0x0,0x8(%esp)
   1e866:	79 0a                	jns    1e872 <tty_ioctl+0x3cd>
				return -EINVAL;
   1e868:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e86d:	e9 16 01 00 00       	jmp    1e988 <tty_ioctl+0x4e3>
			if (session_of_pgrp(pgrp) != current->session)
   1e872:	83 ec 0c             	sub    $0xc,%esp
   1e875:	ff 74 24 14          	pushl  0x14(%esp)
   1e879:	e8 64 c2 fe ff       	call   aae2 <session_of_pgrp>
   1e87e:	83 c4 10             	add    $0x10,%esp
   1e881:	89 c2                	mov    %eax,%edx
   1e883:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1e888:	8b 80 34 02 00 00    	mov    0x234(%eax),%eax
   1e88e:	39 c2                	cmp    %eax,%edx
   1e890:	74 0a                	je     1e89c <tty_ioctl+0x3f7>
				return -EPERM;
   1e892:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1e897:	e9 ec 00 00 00       	jmp    1e988 <tty_ioctl+0x4e3>
			tty->pgrp = pgrp;
   1e89c:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1e8a0:	8b 54 24 08          	mov    0x8(%esp),%edx
   1e8a4:	89 50 24             	mov    %edx,0x24(%eax)
			return 0;
   1e8a7:	b8 00 00 00 00       	mov    $0x0,%eax
   1e8ac:	e9 d7 00 00 00       	jmp    1e988 <tty_ioctl+0x4e3>
		// 返回输出队列中还未送出的字符数。首先验证用户缓冲区长度，然后复制队列中字符数给用户。此时参数arg是用户缓冲区指针。
		case TIOCOUTQ:
			verify_area((void *) arg, 4);
   1e8b1:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e8b5:	83 ec 08             	sub    $0x8,%esp
   1e8b8:	6a 04                	push   $0x4
   1e8ba:	50                   	push   %eax
   1e8bb:	e8 e3 9a fe ff       	call   83a3 <verify_area>
   1e8c0:	83 c4 10             	add    $0x10,%esp
			put_fs_long(CHARS(tty->write_q), (unsigned long *) arg);
   1e8c3:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e8c7:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1e8cb:	8b 52 38             	mov    0x38(%edx),%edx
   1e8ce:	8b 4a 04             	mov    0x4(%edx),%ecx
   1e8d1:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1e8d5:	8b 52 38             	mov    0x38(%edx),%edx
   1e8d8:	8b 52 08             	mov    0x8(%edx),%edx
   1e8db:	29 d1                	sub    %edx,%ecx
   1e8dd:	89 ca                	mov    %ecx,%edx
   1e8df:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   1e8e5:	83 ec 08             	sub    $0x8,%esp
   1e8e8:	50                   	push   %eax
   1e8e9:	52                   	push   %edx
   1e8ea:	e8 1a f8 ff ff       	call   1e109 <put_fs_long>
   1e8ef:	83 c4 10             	add    $0x10,%esp
			return 0;
   1e8f2:	b8 00 00 00 00       	mov    $0x0,%eax
   1e8f7:	e9 8c 00 00 00       	jmp    1e988 <tty_ioctl+0x4e3>
		// 返回输入队列中还未读取的字符数。首先验证用户缓冲区长度，然后复制队列中字符数给用户。此时参数arg是用户缓冲区指针。
		case TIOCINQ:
			verify_area((void *) arg, 4);
   1e8fc:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e900:	83 ec 08             	sub    $0x8,%esp
   1e903:	6a 04                	push   $0x4
   1e905:	50                   	push   %eax
   1e906:	e8 98 9a fe ff       	call   83a3 <verify_area>
   1e90b:	83 c4 10             	add    $0x10,%esp
			put_fs_long(CHARS(tty->secondary),
   1e90e:	8b 44 24 28          	mov    0x28(%esp),%eax
   1e912:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1e916:	8b 52 3c             	mov    0x3c(%edx),%edx
   1e919:	8b 4a 04             	mov    0x4(%edx),%ecx
   1e91c:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1e920:	8b 52 3c             	mov    0x3c(%edx),%edx
   1e923:	8b 52 08             	mov    0x8(%edx),%edx
   1e926:	29 d1                	sub    %edx,%ecx
   1e928:	89 ca                	mov    %ecx,%edx
   1e92a:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   1e930:	83 ec 08             	sub    $0x8,%esp
   1e933:	50                   	push   %eax
   1e934:	52                   	push   %edx
   1e935:	e8 cf f7 ff ff       	call   1e109 <put_fs_long>
   1e93a:	83 c4 10             	add    $0x10,%esp
				(unsigned long *) arg);
			return 0;
   1e93d:	b8 00 00 00 00       	mov    $0x0,%eax
   1e942:	eb 44                	jmp    1e988 <tty_ioctl+0x4e3>
		// 模拟终端输入操作。该命令以一个指向字符的指针作为参数，并假设该字符是在终端上键入的。用户终须在该控制终端上具有超级
		// 用户权限或具有读许可权限。
		case TIOCSTI:
			return -EINVAL; 							/* not implemented */
   1e944:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e949:	eb 3d                	jmp    1e988 <tty_ioctl+0x4e3>
		// 读取终端设备窗口大小信息（参见termios.h中的winsize结构）。
		case TIOCGWINSZ:
			return -EINVAL; 							/* not implemented */
   1e94b:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e950:	eb 36                	jmp    1e988 <tty_ioctl+0x4e3>
		// 设置终端设备窗口大小信息（参见winsize结构）。
		case TIOCSWINSZ:
			return -EINVAL; 							/* not implemented */
   1e952:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e957:	eb 2f                	jmp    1e988 <tty_ioctl+0x4e3>
		// 返回MODEM状态控制引线的当前状态位标志集（参见termios.h）。
		case TIOCMGET:
			return -EINVAL; 							/* not implemented */
   1e959:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e95e:	eb 28                	jmp    1e988 <tty_ioctl+0x4e3>
		// 设置单个modem状态控制引线的状态（true或false）。
		case TIOCMBIS:
			return -EINVAL; 							/* not implemented */
   1e960:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e965:	eb 21                	jmp    1e988 <tty_ioctl+0x4e3>
		// 复位ujwhMODEM状态控制引线的状态。
		case TIOCMBIC:
			return -EINVAL; 							/* not implemented */
   1e967:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e96c:	eb 1a                	jmp    1e988 <tty_ioctl+0x4e3>
		// 设置MODEM状态引线的状态。如果某一位置位，则modem对应的状态引线将为有效。
		case TIOCMSET:
			return -EINVAL; 							/* not implemented */
   1e96e:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e973:	eb 13                	jmp    1e988 <tty_ioctl+0x4e3>
		// 读取软件载波检测标志（1 - 开启；0 - 关闭）。
		case TIOCGSOFTCAR:
			return -EINVAL; 							/* not implemented */
   1e975:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e97a:	eb 0c                	jmp    1e988 <tty_ioctl+0x4e3>
		// 设置软件载波检测标志（1 - 开启；0 - 关闭）。
		case TIOCSSOFTCAR:
			return -EINVAL; 							/* not implemented */
   1e97c:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
   1e981:	eb 05                	jmp    1e988 <tty_ioctl+0x4e3>
		default:
			return -EINVAL;
   1e983:	b8 ea ff ff ff       	mov    $0xffffffea,%eax
        }
}
   1e988:	83 c4 1c             	add    $0x1c,%esp
   1e98b:	c3                   	ret    

0001e98c <pty_copy>:
#include <asm/io.h>

// 伪终端写函数。
// 参数：from - 源伪终端结构；to - 目的伪终端结构。
static inline void pty_copy(struct tty_struct * from, struct tty_struct * to)
{
   1e98c:	83 ec 1c             	sub    $0x1c,%esp
	char c;

	// 判断源终端是否停止或源终端写队列是否为空。如果源终端未停止，并且源终端写队列不为空，则循环处理之。
	while (!from->stopped && !EMPTY(from->write_q)) {
   1e98f:	e9 e9 00 00 00       	jmp    1ea7d <pty_copy+0xf1>
		// 判断目的终端读队列是否已满，如果已满则先调用copy_to_cooked函数处理目的终端读队列，然后重新循环处理。
		if (FULL(to->read_q)) {
   1e994:	8b 44 24 24          	mov    0x24(%esp),%eax
   1e998:	8b 40 34             	mov    0x34(%eax),%eax
   1e99b:	8b 50 08             	mov    0x8(%eax),%edx
   1e99e:	8b 44 24 24          	mov    0x24(%esp),%eax
   1e9a2:	8b 40 34             	mov    0x34(%eax),%eax
   1e9a5:	8b 40 04             	mov    0x4(%eax),%eax
   1e9a8:	29 c2                	sub    %eax,%edx
   1e9aa:	89 d0                	mov    %edx,%eax
   1e9ac:	83 e8 01             	sub    $0x1,%eax
   1e9af:	25 ff 03 00 00       	and    $0x3ff,%eax
   1e9b4:	85 c0                	test   %eax,%eax
   1e9b6:	75 3c                	jne    1e9f4 <pty_copy+0x68>
			// 判断目的终端辅助队列是否已满，如果已满则直接退出循环，不再处理源终端写队列中的数据。
			if (FULL(to->secondary))
   1e9b8:	8b 44 24 24          	mov    0x24(%esp),%eax
   1e9bc:	8b 40 3c             	mov    0x3c(%eax),%eax
   1e9bf:	8b 50 08             	mov    0x8(%eax),%edx
   1e9c2:	8b 44 24 24          	mov    0x24(%esp),%eax
   1e9c6:	8b 40 3c             	mov    0x3c(%eax),%eax
   1e9c9:	8b 40 04             	mov    0x4(%eax),%eax
   1e9cc:	29 c2                	sub    %eax,%edx
   1e9ce:	89 d0                	mov    %edx,%eax
   1e9d0:	83 e8 01             	sub    $0x1,%eax
   1e9d3:	25 ff 03 00 00       	and    $0x3ff,%eax
   1e9d8:	85 c0                	test   %eax,%eax
   1e9da:	0f 84 c6 00 00 00    	je     1eaa6 <pty_copy+0x11a>
				break;
			copy_to_cooked(to);     						// 把读队列中的字符处理成成规范模式字符序列放入辅助队列。
   1e9e0:	83 ec 0c             	sub    $0xc,%esp
   1e9e3:	ff 74 24 30          	pushl  0x30(%esp)
   1e9e7:	e8 41 a1 ff ff       	call   18b2d <copy_to_cooked>
   1e9ec:	83 c4 10             	add    $0x10,%esp
			continue;
   1e9ef:	e9 89 00 00 00       	jmp    1ea7d <pty_copy+0xf1>
		}
		GETCH(from->write_q, c);         					// 从源终端写队列中取一个字符，放入c，
   1e9f4:	8b 44 24 20          	mov    0x20(%esp),%eax
   1e9f8:	8b 50 38             	mov    0x38(%eax),%edx
   1e9fb:	8b 44 24 20          	mov    0x20(%esp),%eax
   1e9ff:	8b 40 38             	mov    0x38(%eax),%eax
   1ea02:	8b 40 08             	mov    0x8(%eax),%eax
   1ea05:	0f b6 44 02 10       	movzbl 0x10(%edx,%eax,1),%eax
   1ea0a:	88 44 24 0f          	mov    %al,0xf(%esp)
   1ea0e:	8b 44 24 20          	mov    0x20(%esp),%eax
   1ea12:	8b 40 38             	mov    0x38(%eax),%eax
   1ea15:	8b 54 24 20          	mov    0x20(%esp),%edx
   1ea19:	8b 52 38             	mov    0x38(%edx),%edx
   1ea1c:	8b 52 08             	mov    0x8(%edx),%edx
   1ea1f:	83 c2 01             	add    $0x1,%edx
   1ea22:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   1ea28:	89 50 08             	mov    %edx,0x8(%eax)
		PUTCH(c, to->read_q);            					// 然后把c中的字符放入目的终端读队列中。
   1ea2b:	8b 44 24 24          	mov    0x24(%esp),%eax
   1ea2f:	8b 50 34             	mov    0x34(%eax),%edx
   1ea32:	8b 44 24 24          	mov    0x24(%esp),%eax
   1ea36:	8b 40 34             	mov    0x34(%eax),%eax
   1ea39:	8b 40 04             	mov    0x4(%eax),%eax
   1ea3c:	0f b6 4c 24 0f       	movzbl 0xf(%esp),%ecx
   1ea41:	88 4c 02 10          	mov    %cl,0x10(%edx,%eax,1)
   1ea45:	8b 44 24 24          	mov    0x24(%esp),%eax
   1ea49:	8b 40 34             	mov    0x34(%eax),%eax
   1ea4c:	8b 54 24 24          	mov    0x24(%esp),%edx
   1ea50:	8b 52 34             	mov    0x34(%edx),%edx
   1ea53:	8b 52 04             	mov    0x4(%edx),%edx
   1ea56:	83 c2 01             	add    $0x1,%edx
   1ea59:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
   1ea5f:	89 50 04             	mov    %edx,0x4(%eax)
		// 判断当前进程是否有信号需要处理，如果有，则退出循环。
		if (current->signal & ~current->blocked)
   1ea62:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1ea67:	8b 50 0c             	mov    0xc(%eax),%edx
   1ea6a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1ea6f:	8b 80 10 02 00 00    	mov    0x210(%eax),%eax
   1ea75:	f7 d0                	not    %eax
   1ea77:	21 d0                	and    %edx,%eax
   1ea79:	85 c0                	test   %eax,%eax
   1ea7b:	75 2c                	jne    1eaa9 <pty_copy+0x11d>
static inline void pty_copy(struct tty_struct * from, struct tty_struct * to)
{
	char c;

	// 判断源终端是否停止或源终端写队列是否为空。如果源终端未停止，并且源终端写队列不为空，则循环处理之。
	while (!from->stopped && !EMPTY(from->write_q)) {
   1ea7d:	8b 44 24 20          	mov    0x20(%esp),%eax
   1ea81:	8b 40 2c             	mov    0x2c(%eax),%eax
   1ea84:	85 c0                	test   %eax,%eax
   1ea86:	75 22                	jne    1eaaa <pty_copy+0x11e>
   1ea88:	8b 44 24 20          	mov    0x20(%esp),%eax
   1ea8c:	8b 40 38             	mov    0x38(%eax),%eax
   1ea8f:	8b 50 04             	mov    0x4(%eax),%edx
   1ea92:	8b 44 24 20          	mov    0x20(%esp),%eax
   1ea96:	8b 40 38             	mov    0x38(%eax),%eax
   1ea99:	8b 40 08             	mov    0x8(%eax),%eax
   1ea9c:	39 c2                	cmp    %eax,%edx
   1ea9e:	0f 85 f0 fe ff ff    	jne    1e994 <pty_copy+0x8>
   1eaa4:	eb 04                	jmp    1eaaa <pty_copy+0x11e>
		// 判断目的终端读队列是否已满，如果已满则先调用copy_to_cooked函数处理目的终端读队列，然后重新循环处理。
		if (FULL(to->read_q)) {
			// 判断目的终端辅助队列是否已满，如果已满则直接退出循环，不再处理源终端写队列中的数据。
			if (FULL(to->secondary))
				break;
   1eaa6:	90                   	nop
   1eaa7:	eb 01                	jmp    1eaaa <pty_copy+0x11e>
		}
		GETCH(from->write_q, c);         					// 从源终端写队列中取一个字符，放入c，
		PUTCH(c, to->read_q);            					// 然后把c中的字符放入目的终端读队列中。
		// 判断当前进程是否有信号需要处理，如果有，则退出循环。
		if (current->signal & ~current->blocked)
			break;
   1eaa9:	90                   	nop
	}
	copy_to_cooked(to);     								// 把读队列中的字符处理成成规范模式字符序列放入辅助队列。
   1eaaa:	83 ec 0c             	sub    $0xc,%esp
   1eaad:	ff 74 24 30          	pushl  0x30(%esp)
   1eab1:	e8 77 a0 ff ff       	call   18b2d <copy_to_cooked>
   1eab6:	83 c4 10             	add    $0x10,%esp
	wake_up(&from->write_q->proc_list);     				// 唤醒等待源终端写队列的进程，如果有。
   1eab9:	8b 44 24 20          	mov    0x20(%esp),%eax
   1eabd:	8b 40 38             	mov    0x38(%eax),%eax
   1eac0:	83 c0 0c             	add    $0xc,%eax
   1eac3:	83 ec 0c             	sub    $0xc,%esp
   1eac6:	50                   	push   %eax
   1eac7:	e8 83 86 fe ff       	call   714f <wake_up>
   1eacc:	83 c4 10             	add    $0x10,%esp
}
   1eacf:	90                   	nop
   1ead0:	83 c4 1c             	add    $0x1c,%esp
   1ead3:	c3                   	ret    

0001ead4 <mpty_write>:
 * 这个函数被调用时，tty_write函数已经把一些字符放到写队列write_queue中。它将复制这些输入到它的从伪终端的
 * 输出队列中。
 */
// 主伪终端写函数。
void mpty_write(struct tty_struct * tty)
{
   1ead4:	83 ec 1c             	sub    $0x1c,%esp
	int nr = tty - tty_table;       						// 获取终端号
   1ead7:	8b 44 24 20          	mov    0x20(%esp),%eax
   1eadb:	ba 20 18 04 00       	mov    $0x41820,%edx
   1eae0:	29 d0                	sub    %edx,%eax
   1eae2:	c1 f8 06             	sar    $0x6,%eax
   1eae5:	89 44 24 0c          	mov    %eax,0xc(%esp)

	// 终端号除以64取整如果为2则是“主伪终端”，否则显示出错信息。
	if ((nr >> 6) != 2)
   1eae9:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1eaed:	c1 f8 06             	sar    $0x6,%eax
   1eaf0:	83 f8 02             	cmp    $0x2,%eax
   1eaf3:	74 12                	je     1eb07 <mpty_write+0x33>
		printk("bad mpty\n\r");
   1eaf5:	83 ec 0c             	sub    $0xc,%esp
   1eaf8:	68 20 50 02 00       	push   $0x25020
   1eafd:	e8 45 a1 fe ff       	call   8c47 <printk>
   1eb02:	83 c4 10             	add    $0x10,%esp
	else
		pty_copy(tty, tty + 64);   							// 调用伪终端写函数。
}
   1eb05:	eb 19                	jmp    1eb20 <mpty_write+0x4c>

	// 终端号除以64取整如果为2则是“主伪终端”，否则显示出错信息。
	if ((nr >> 6) != 2)
		printk("bad mpty\n\r");
	else
		pty_copy(tty, tty + 64);   							// 调用伪终端写函数。
   1eb07:	8b 44 24 20          	mov    0x20(%esp),%eax
   1eb0b:	05 00 10 00 00       	add    $0x1000,%eax
   1eb10:	83 ec 08             	sub    $0x8,%esp
   1eb13:	50                   	push   %eax
   1eb14:	ff 74 24 2c          	pushl  0x2c(%esp)
   1eb18:	e8 6f fe ff ff       	call   1e98c <pty_copy>
   1eb1d:	83 c4 10             	add    $0x10,%esp
}
   1eb20:	90                   	nop
   1eb21:	83 c4 1c             	add    $0x1c,%esp
   1eb24:	c3                   	ret    

0001eb25 <spty_write>:

// 从伪终端写函数。
void spty_write(struct tty_struct * tty)
{
   1eb25:	83 ec 1c             	sub    $0x1c,%esp
	int nr = tty - tty_table;       						// 获取终端号
   1eb28:	8b 44 24 20          	mov    0x20(%esp),%eax
   1eb2c:	ba 20 18 04 00       	mov    $0x41820,%edx
   1eb31:	29 d0                	sub    %edx,%eax
   1eb33:	c1 f8 06             	sar    $0x6,%eax
   1eb36:	89 44 24 0c          	mov    %eax,0xc(%esp)

	// 终端号除以64取整如果为3则是“从伪终端”，否则显示出错信息。
	if ((nr >> 6) != 3)
   1eb3a:	8b 44 24 0c          	mov    0xc(%esp),%eax
   1eb3e:	c1 f8 06             	sar    $0x6,%eax
   1eb41:	83 f8 03             	cmp    $0x3,%eax
   1eb44:	74 12                	je     1eb58 <spty_write+0x33>
		printk("bad spty\n\r");
   1eb46:	83 ec 0c             	sub    $0xc,%esp
   1eb49:	68 2b 50 02 00       	push   $0x2502b
   1eb4e:	e8 f4 a0 fe ff       	call   8c47 <printk>
   1eb53:	83 c4 10             	add    $0x10,%esp
	else
		pty_copy(tty, tty - 64);   							// 调用伪终端写函数。
}
   1eb56:	eb 19                	jmp    1eb71 <spty_write+0x4c>

	// 终端号除以64取整如果为3则是“从伪终端”，否则显示出错信息。
	if ((nr >> 6) != 3)
		printk("bad spty\n\r");
	else
		pty_copy(tty, tty - 64);   							// 调用伪终端写函数。
   1eb58:	8b 44 24 20          	mov    0x20(%esp),%eax
   1eb5c:	2d 00 10 00 00       	sub    $0x1000,%eax
   1eb61:	83 ec 08             	sub    $0x8,%esp
   1eb64:	50                   	push   %eax
   1eb65:	ff 74 24 2c          	pushl  0x2c(%esp)
   1eb69:	e8 1e fe ff ff       	call   1e98c <pty_copy>
   1eb6e:	83 c4 10             	add    $0x10,%esp
}
   1eb71:	90                   	nop
   1eb72:	83 c4 1c             	add    $0x1c,%esp
   1eb75:	c3                   	ret    

0001eb76 <get_fs_word>:
//// 读取fs段中指定地址处的字.
// 参数:addr - 指定的内存地址.
// %0 - (返回的字_v);%1 - (内存地址addr)
// 返回:返回内存fs:[addr]处的字.
static inline unsigned short get_fs_word(const unsigned short *addr)
{
   1eb76:	83 ec 10             	sub    $0x10,%esp
	unsigned short _v;

	__asm__ ("movw %%fs:%1,%0":"=q" (_v):"m" (*addr));
   1eb79:	8b 44 24 14          	mov    0x14(%esp),%eax
   1eb7d:	64 66 8b 00          	mov    %fs:(%eax),%ax
   1eb81:	66 89 44 24 0e       	mov    %ax,0xe(%esp)
	return _v;
   1eb86:	0f b7 44 24 0e       	movzwl 0xe(%esp),%eax
}
   1eb8b:	83 c4 10             	add    $0x10,%esp
   1eb8e:	c3                   	ret    

0001eb8f <get_fs_long>:
//// 读取fs段中指定地址处的长字(4字节).
// 参数:addr - 指定的内存地址.
// %0 - (返回的长字_v);%1 - (内存地址addr)
// 返回:返回内存fs:[addr]处的长字.
static inline unsigned long get_fs_long(const unsigned long *addr)
{
   1eb8f:	83 ec 10             	sub    $0x10,%esp
	unsigned long _v;

	__asm__ ("movl %%fs:%1,%0":"=q" (_v):"m" (*addr)); \
   1eb92:	8b 44 24 14          	mov    0x14(%esp),%eax
   1eb96:	64 8b 00             	mov    %fs:(%eax),%eax
   1eb99:	89 44 24 0c          	mov    %eax,0xc(%esp)
	return _v;
   1eb9d:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   1eba1:	83 c4 10             	add    $0x10,%esp
   1eba4:	c3                   	ret    

0001eba5 <put_fs_word>:

//// 将一字存放在fs段中指定内存地址处.
// 参数:val - 字值;addr - 内存地址.
// %0 - 寄存器(字值val);%1 - (内存地址addr).
static inline void put_fs_word(short val,short * addr)
{
   1eba5:	83 ec 04             	sub    $0x4,%esp
   1eba8:	8b 44 24 08          	mov    0x8(%esp),%eax
   1ebac:	66 89 04 24          	mov    %ax,(%esp)
__asm__ ("movw %0,%%fs:%1"::"q" (val),"m" (*addr));
   1ebb0:	0f b7 04 24          	movzwl (%esp),%eax
   1ebb4:	8b 54 24 0c          	mov    0xc(%esp),%edx
   1ebb8:	64 66 89 02          	mov    %ax,%fs:(%edx)
}
   1ebbc:	90                   	nop
   1ebbd:	83 c4 04             	add    $0x4,%esp
   1ebc0:	c3                   	ret    

0001ebc1 <put_fs_long>:
//// 将一长字存放在fs段中指定内存地址处.
// 参数:val - 长字值;addr - 内存地址.
// %0 - 寄存器(长字值val);%1 - (内存地址addr).
static inline void put_fs_long(unsigned long val,unsigned long * addr)
{
__asm__ ("movl %0,%%fs:%1"::"q" (val),"m" (*addr));
   1ebc1:	8b 44 24 04          	mov    0x4(%esp),%eax
   1ebc5:	8b 54 24 08          	mov    0x8(%esp),%edx
   1ebc9:	64 89 02             	mov    %eax,%fs:(%edx)
}
   1ebcc:	90                   	nop
   1ebcd:	c3                   	ret    

0001ebce <do_emu>:
// 该函数首先检测仿真的I387结构状态字寄存器中是否有未屏蔽的异常标志置位。若有则对状态字中忙标志B进行设置。然后把指令指针
// 保存起来，并取出代码指针EIP处的2字节浮点指令代码code。接着分析代码code，并根据其含义进行处理。针对不同代码类型值，Linus
// 使用了几个不同的switch程序块进行仿真处理。
// 参数是info结构指针。
static void do_emu(struct info * info)
{
   1ebce:	53                   	push   %ebx
   1ebcf:	83 ec 28             	sub    $0x28,%esp
	char * address;

// 该函数首先检测仿真的I387结构状态字寄存器中是否有未屏蔽的异常标志置位。若有就设置状态字中忙标志B（位15），否则复位B标
// 志。然后我们把指令指针保存起来。再看看执行本函数的代码是不是用户代码。如是不是，即调用者的代码段选择符不等于0x0f，则
// 说明内核中有代码使用了浮点指令。于是在显示出浮点指令处的CS、EIP值和信息“内核中需要数学仿真”后停机。
	if (I387.cwd & I387.swd & 0x3f)
   1ebd2:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1ebd7:	8b 90 18 04 00 00    	mov    0x418(%eax),%edx
   1ebdd:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1ebe2:	8b 80 1c 04 00 00    	mov    0x41c(%eax),%eax
   1ebe8:	21 d0                	and    %edx,%eax
   1ebea:	83 e0 3f             	and    $0x3f,%eax
   1ebed:	85 c0                	test   %eax,%eax
   1ebef:	74 1c                	je     1ec0d <do_emu+0x3f>
		I387.swd |= 0x8000;             // 设置忙标志B。
   1ebf1:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1ebf6:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   1ebfc:	8b 92 1c 04 00 00    	mov    0x41c(%edx),%edx
   1ec02:	80 ce 80             	or     $0x80,%dh
   1ec05:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
   1ec0b:	eb 1d                	jmp    1ec2a <do_emu+0x5c>
	else
		I387.swd &= 0x7fff;             // 清忙标志B。
   1ec0d:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1ec12:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   1ec18:	8b 92 1c 04 00 00    	mov    0x41c(%edx),%edx
   1ec1e:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
   1ec24:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
	ORIG_EIP = EIP;                         // 保存浮点指令指针。
   1ec2a:	8b 44 24 30          	mov    0x30(%esp),%eax
   1ec2e:	8b 50 38             	mov    0x38(%eax),%edx
   1ec31:	8b 44 24 30          	mov    0x30(%esp),%eax
   1ec35:	89 50 04             	mov    %edx,0x4(%eax)
/* 0x0007 means user code space */
	if (CS != 0x000F) {                     // 不是用户代码则停机。
   1ec38:	8b 44 24 30          	mov    0x30(%esp),%eax
   1ec3c:	83 c0 3c             	add    $0x3c,%eax
   1ec3f:	0f b7 00             	movzwl (%eax),%eax
   1ec42:	66 83 f8 0f          	cmp    $0xf,%ax
   1ec46:	74 36                	je     1ec7e <do_emu+0xb0>
		printk("math_emulate: %04x:%08x\n\r",CS,EIP);
   1ec48:	8b 44 24 30          	mov    0x30(%esp),%eax
   1ec4c:	8b 50 38             	mov    0x38(%eax),%edx
   1ec4f:	8b 44 24 30          	mov    0x30(%esp),%eax
   1ec53:	83 c0 3c             	add    $0x3c,%eax
   1ec56:	0f b7 00             	movzwl (%eax),%eax
   1ec59:	0f b7 c0             	movzwl %ax,%eax
   1ec5c:	83 ec 04             	sub    $0x4,%esp
   1ec5f:	52                   	push   %edx
   1ec60:	50                   	push   %eax
   1ec61:	68 38 50 02 00       	push   $0x25038
   1ec66:	e8 dc 9f fe ff       	call   8c47 <printk>
   1ec6b:	83 c4 10             	add    $0x10,%esp
		panic("Math emulation needed in kernel");
   1ec6e:	83 ec 0c             	sub    $0xc,%esp
   1ec71:	68 54 50 02 00       	push   $0x25054
   1ec76:	e8 8d 9f fe ff       	call   8c08 <panic>
   1ec7b:	83 c4 10             	add    $0x10,%esp
// 然后我们取出代码指针EIP处的2字节浮点指令代码code。由于Inter CPU存储数据时是“小头”（Little endian）在前的，此时取出
// 的代码正好与指令第1、第2字节顺序颠倒。因此我们需要交换一下code中两个字节的顺序。然后再屏蔽掉第1个代码字节中的ESC位（二
// 进制11011）。接着把浮点指令指针EIP保存到TSS段i387结构中的fip字段中，而CS保存到fcs字段中，同时把略微处理过的浮点指令
// 代码code放到fcs字段的高16位中。保存这些值是为了在出现仿真的处理器异常时程序可以像使用真实的协处理器一样进行处理。最后
// 让EIP指向随后的浮点指令或操作数。
	code = get_fs_word((unsigned short *) EIP);     // 取2字节的浮点指令或操作数。
   1ec7e:	8b 44 24 30          	mov    0x30(%esp),%eax
   1ec82:	8b 40 38             	mov    0x38(%eax),%eax
   1ec85:	83 ec 0c             	sub    $0xc,%esp
   1ec88:	50                   	push   %eax
   1ec89:	e8 e8 fe ff ff       	call   1eb76 <get_fs_word>
   1ec8e:	83 c4 10             	add    $0x10,%esp
   1ec91:	66 89 44 24 1e       	mov    %ax,0x1e(%esp)
	bswapw(code);                                   // 交换高低字节。
   1ec96:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1ec9b:	86 c4                	xchg   %al,%ah
   1ec9d:	66 89 44 24 1e       	mov    %ax,0x1e(%esp)
	code &= 0x7ff;                                  // 屏蔽代码中的ESC码。
   1eca2:	66 81 64 24 1e ff 07 	andw   $0x7ff,0x1e(%esp)
	I387.fip = EIP;                                 // 保存指令指针。
   1eca9:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1ecae:	8b 54 24 30          	mov    0x30(%esp),%edx
   1ecb2:	8b 52 38             	mov    0x38(%edx),%edx
   1ecb5:	89 90 24 04 00 00    	mov    %edx,0x424(%eax)
	*(unsigned short *) &I387.fcs = CS;             // 保存代码段选择符。
   1ecbb:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1ecc0:	8d 90 28 04 00 00    	lea    0x428(%eax),%edx
   1ecc6:	8b 44 24 30          	mov    0x30(%esp),%eax
   1ecca:	83 c0 3c             	add    $0x3c,%eax
   1eccd:	0f b7 00             	movzwl (%eax),%eax
   1ecd0:	66 89 02             	mov    %ax,(%edx)
	*(1+(unsigned short *) &I387.fcs) = code;       // 保存代码。
   1ecd3:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1ecd8:	05 28 04 00 00       	add    $0x428,%eax
   1ecdd:	8d 50 02             	lea    0x2(%eax),%edx
   1ece0:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1ece5:	66 89 02             	mov    %ax,(%edx)
	EIP += 2;                                       // 指令指针指向下一个字节。
   1ece8:	8b 44 24 30          	mov    0x30(%esp),%eax
   1ecec:	8b 40 38             	mov    0x38(%eax),%eax
   1ecef:	8d 50 02             	lea    0x2(%eax),%edx
   1ecf2:	8b 44 24 30          	mov    0x30(%esp),%eax
   1ecf6:	89 50 38             	mov    %edx,0x38(%eax)
        switch (code) {
   1ecf9:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1ecfe:	3d eb 01 00 00       	cmp    $0x1eb,%eax
   1ed03:	0f 84 a6 02 00 00    	je     1efaf <do_emu+0x3e1>
   1ed09:	3d eb 01 00 00       	cmp    $0x1eb,%eax
   1ed0e:	0f 8f 97 00 00 00    	jg     1edab <do_emu+0x1dd>
   1ed14:	3d e3 01 00 00       	cmp    $0x1e3,%eax
   1ed19:	7f 48                	jg     1ed63 <do_emu+0x195>
   1ed1b:	3d e2 01 00 00       	cmp    $0x1e2,%eax
   1ed20:	0f 8d 8c 01 00 00    	jge    1eeb2 <do_emu+0x2e4>
   1ed26:	3d d7 01 00 00       	cmp    $0x1d7,%eax
   1ed2b:	7f 1b                	jg     1ed48 <do_emu+0x17a>
   1ed2d:	3d d1 01 00 00       	cmp    $0x1d1,%eax
   1ed32:	0f 8d 2b 01 00 00    	jge    1ee63 <do_emu+0x295>
   1ed38:	3d d0 01 00 00       	cmp    $0x1d0,%eax
   1ed3d:	0f 84 df 1b 00 00    	je     20922 <do_emu+0x1d54>
   1ed43:	e9 52 04 00 00       	jmp    1f19a <do_emu+0x5cc>
   1ed48:	3d e0 01 00 00       	cmp    $0x1e0,%eax
   1ed4d:	0f 84 21 01 00 00    	je     1ee74 <do_emu+0x2a6>
   1ed53:	3d e1 01 00 00       	cmp    $0x1e1,%eax
   1ed58:	0f 84 35 01 00 00    	je     1ee93 <do_emu+0x2c5>
   1ed5e:	e9 37 04 00 00       	jmp    1f19a <do_emu+0x5cc>
   1ed63:	3d e7 01 00 00       	cmp    $0x1e7,%eax
   1ed68:	7f 26                	jg     1ed90 <do_emu+0x1c2>
   1ed6a:	3d e6 01 00 00       	cmp    $0x1e6,%eax
   1ed6f:	0f 8d 8d 01 00 00    	jge    1ef02 <do_emu+0x334>
   1ed75:	3d e4 01 00 00       	cmp    $0x1e4,%eax
   1ed7a:	0f 84 43 01 00 00    	je     1eec3 <do_emu+0x2f5>
   1ed80:	3d e5 01 00 00       	cmp    $0x1e5,%eax
   1ed85:	0f 84 56 01 00 00    	je     1eee1 <do_emu+0x313>
   1ed8b:	e9 0a 04 00 00       	jmp    1f19a <do_emu+0x5cc>
   1ed90:	3d e9 01 00 00       	cmp    $0x1e9,%eax
   1ed95:	0f 84 ac 01 00 00    	je     1ef47 <do_emu+0x379>
   1ed9b:	3d e9 01 00 00       	cmp    $0x1e9,%eax
   1eda0:	0f 8f d5 01 00 00    	jg     1ef7b <do_emu+0x3ad>
   1eda6:	e9 68 01 00 00       	jmp    1ef13 <do_emu+0x345>
   1edab:	3d e9 02 00 00       	cmp    $0x2e9,%eax
   1edb0:	0f 84 06 03 00 00    	je     1f0bc <do_emu+0x4ee>
   1edb6:	3d e9 02 00 00       	cmp    $0x2e9,%eax
   1edbb:	7f 48                	jg     1ee05 <do_emu+0x237>
   1edbd:	3d ee 01 00 00       	cmp    $0x1ee,%eax
   1edc2:	0f 84 83 02 00 00    	je     1f04b <do_emu+0x47d>
   1edc8:	3d ee 01 00 00       	cmp    $0x1ee,%eax
   1edcd:	7f 1b                	jg     1edea <do_emu+0x21c>
   1edcf:	3d ec 01 00 00       	cmp    $0x1ec,%eax
   1edd4:	0f 84 09 02 00 00    	je     1efe3 <do_emu+0x415>
   1edda:	3d ed 01 00 00       	cmp    $0x1ed,%eax
   1eddf:	0f 84 32 02 00 00    	je     1f017 <do_emu+0x449>
   1ede5:	e9 b0 03 00 00       	jmp    1f19a <do_emu+0x5cc>
   1edea:	3d ef 01 00 00       	cmp    $0x1ef,%eax
   1edef:	0f 84 8a 02 00 00    	je     1f07f <do_emu+0x4b1>
   1edf5:	3d ff 01 00 00       	cmp    $0x1ff,%eax
   1edfa:	0f 8f 9a 03 00 00    	jg     1f19a <do_emu+0x5cc>
   1ee00:	e9 8b 02 00 00       	jmp    1f090 <do_emu+0x4c2>
   1ee05:	3d e3 03 00 00       	cmp    $0x3e3,%eax
   1ee0a:	0f 84 06 03 00 00    	je     1f116 <do_emu+0x548>
   1ee10:	3d e3 03 00 00       	cmp    $0x3e3,%eax
   1ee15:	7f 26                	jg     1ee3d <do_emu+0x26f>
   1ee17:	3d d0 03 00 00       	cmp    $0x3d0,%eax
   1ee1c:	0f 8c 78 03 00 00    	jl     1f19a <do_emu+0x5cc>
   1ee22:	3d d1 03 00 00       	cmp    $0x3d1,%eax
   1ee27:	0f 8e f8 1a 00 00    	jle    20925 <do_emu+0x1d57>
   1ee2d:	3d e2 03 00 00       	cmp    $0x3e2,%eax
   1ee32:	0f 84 bc 02 00 00    	je     1f0f4 <do_emu+0x526>
   1ee38:	e9 5d 03 00 00       	jmp    1f19a <do_emu+0x5cc>
   1ee3d:	3d d9 06 00 00       	cmp    $0x6d9,%eax
   1ee42:	0f 84 00 03 00 00    	je     1f148 <do_emu+0x57a>
   1ee48:	3d e0 07 00 00       	cmp    $0x7e0,%eax
   1ee4d:	0f 84 2d 03 00 00    	je     1f180 <do_emu+0x5b2>
   1ee53:	3d e4 03 00 00       	cmp    $0x3e4,%eax
   1ee58:	0f 84 ca 1a 00 00    	je     20928 <do_emu+0x1d5a>
   1ee5e:	e9 37 03 00 00       	jmp    1f19a <do_emu+0x5cc>
		case 0x1d0: /* fnop */          // 空操作指令FNOP
			return;
		case 0x1d1: case 0x1d2: case 0x1d3:     // 无效指令代码。必信号，退出。
		case 0x1d4: case 0x1d5: case 0x1d6: case 0x1d7:
			math_abort(info,1<<(SIGILL-1));
   1ee63:	83 ec 08             	sub    $0x8,%esp
   1ee66:	6a 08                	push   $0x8
   1ee68:	ff 74 24 3c          	pushl  0x3c(%esp)
   1ee6c:	e8 21 1b 00 00       	call   20992 <__math_abort>
   1ee71:	83 c4 10             	add    $0x10,%esp
		case 0x1e0:                     // FCHS - 改变ST符号位。即ST = -ST。
			ST(0).exponent ^= 0x8000;
   1ee74:	83 ec 0c             	sub    $0xc,%esp
   1ee77:	6a 00                	push   $0x0
   1ee79:	e8 74 1c 00 00       	call   20af2 <__st>
   1ee7e:	83 c4 10             	add    $0x10,%esp
   1ee81:	0f b7 50 08          	movzwl 0x8(%eax),%edx
   1ee85:	66 81 f2 00 80       	xor    $0x8000,%dx
   1ee8a:	66 89 50 08          	mov    %dx,0x8(%eax)
			return;
   1ee8e:	e9 96 1a 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0x1e1:                     // FABS - 取绝对值。即ST = |ST|。
			ST(0).exponent &= 0x7fff;
   1ee93:	83 ec 0c             	sub    $0xc,%esp
   1ee96:	6a 00                	push   $0x0
   1ee98:	e8 55 1c 00 00       	call   20af2 <__st>
   1ee9d:	83 c4 10             	add    $0x10,%esp
   1eea0:	0f b7 50 08          	movzwl 0x8(%eax),%edx
   1eea4:	66 81 e2 ff 7f       	and    $0x7fff,%dx
   1eea9:	66 89 50 08          	mov    %dx,0x8(%eax)
			return;
   1eead:	e9 77 1a 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0x1e2: case 0x1e3:         // 无效指令代码。发信号，退出。
			math_abort(info,1<<(SIGILL-1));
   1eeb2:	83 ec 08             	sub    $0x8,%esp
   1eeb5:	6a 08                	push   $0x8
   1eeb7:	ff 74 24 3c          	pushl  0x3c(%esp)
   1eebb:	e8 d2 1a 00 00       	call   20992 <__math_abort>
   1eec0:	83 c4 10             	add    $0x10,%esp
		case 0x1e4:                     // FTST - 测试TS，同时设置状态字中Cn。
			ftst(PST(0));
   1eec3:	83 ec 0c             	sub    $0xc,%esp
   1eec6:	6a 00                	push   $0x0
   1eec8:	e8 25 1c 00 00       	call   20af2 <__st>
   1eecd:	83 c4 10             	add    $0x10,%esp
   1eed0:	83 ec 0c             	sub    $0xc,%esp
   1eed3:	50                   	push   %eax
   1eed4:	e8 61 30 00 00       	call   21f3a <ftst>
   1eed9:	83 c4 10             	add    $0x10,%esp
			return;
   1eedc:	e9 48 1a 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0x1e5:                     // FXAM - 检查TS值，同时修改状态字中Cn。
			printk("fxam not implemented\n\r");     // 未实现。发信号退出。
   1eee1:	83 ec 0c             	sub    $0xc,%esp
   1eee4:	68 74 50 02 00       	push   $0x25074
   1eee9:	e8 59 9d fe ff       	call   8c47 <printk>
   1eeee:	83 c4 10             	add    $0x10,%esp
			math_abort(info,1<<(SIGILL-1));
   1eef1:	83 ec 08             	sub    $0x8,%esp
   1eef4:	6a 08                	push   $0x8
   1eef6:	ff 74 24 3c          	pushl  0x3c(%esp)
   1eefa:	e8 93 1a 00 00       	call   20992 <__math_abort>
   1eeff:	83 c4 10             	add    $0x10,%esp
		case 0x1e6: case 0x1e7:         // 无效指令代码。发信号，退出。
			math_abort(info,1<<(SIGILL-1));
   1ef02:	83 ec 08             	sub    $0x8,%esp
   1ef05:	6a 08                	push   $0x8
   1ef07:	ff 74 24 3c          	pushl  0x3c(%esp)
   1ef0b:	e8 82 1a 00 00       	call   20992 <__math_abort>
   1ef10:	83 c4 10             	add    $0x10,%esp
		case 0x1e8:                     // FLD1 - 加载常数1.0到累加器ST。
			fpush();
   1ef13:	e8 15 1b 00 00       	call   20a2d <fpush>
			ST(0) = CONST1;
   1ef18:	83 ec 0c             	sub    $0xc,%esp
   1ef1b:	6a 00                	push   $0x0
   1ef1d:	e8 d0 1b 00 00       	call   20af2 <__st>
   1ef22:	83 c4 10             	add    $0x10,%esp
   1ef25:	66 c7 00 00 00       	movw   $0x0,(%eax)
   1ef2a:	66 c7 40 02 00 00    	movw   $0x0,0x2(%eax)
   1ef30:	66 c7 40 04 00 00    	movw   $0x0,0x4(%eax)
   1ef36:	66 c7 40 06 00 80    	movw   $0x8000,0x6(%eax)
   1ef3c:	66 c7 40 08 ff 3f    	movw   $0x3fff,0x8(%eax)
			return;
   1ef42:	e9 e2 19 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0x1e9:                     // FLDL2T - 加载常数Log2(10)到累加器ST。
			fpush();
   1ef47:	e8 e1 1a 00 00       	call   20a2d <fpush>
			ST(0) = CONSTL2T;
   1ef4c:	83 ec 0c             	sub    $0xc,%esp
   1ef4f:	6a 00                	push   $0x0
   1ef51:	e8 9c 1b 00 00       	call   20af2 <__st>
   1ef56:	83 c4 10             	add    $0x10,%esp
   1ef59:	66 c7 00 fe 8a       	movw   $0x8afe,(%eax)
   1ef5e:	66 c7 40 02 1b cd    	movw   $0xcd1b,0x2(%eax)
   1ef64:	66 c7 40 04 4b 78    	movw   $0x784b,0x4(%eax)
   1ef6a:	66 c7 40 06 9a d4    	movw   $0xd49a,0x6(%eax)
   1ef70:	66 c7 40 08 00 40    	movw   $0x4000,0x8(%eax)
			return;
   1ef76:	e9 ae 19 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0x1ea:                     // FLDL2E - 加载常数Log2(e)到累加器ST。
			fpush();
   1ef7b:	e8 ad 1a 00 00       	call   20a2d <fpush>
			ST(0) = CONSTL2E;
   1ef80:	83 ec 0c             	sub    $0xc,%esp
   1ef83:	6a 00                	push   $0x0
   1ef85:	e8 68 1b 00 00       	call   20af2 <__st>
   1ef8a:	83 c4 10             	add    $0x10,%esp
   1ef8d:	66 c7 00 bc f0       	movw   $0xf0bc,(%eax)
   1ef92:	66 c7 40 02 17 5c    	movw   $0x5c17,0x2(%eax)
   1ef98:	66 c7 40 04 29 3b    	movw   $0x3b29,0x4(%eax)
   1ef9e:	66 c7 40 06 aa b8    	movw   $0xb8aa,0x6(%eax)
   1efa4:	66 c7 40 08 ff 3f    	movw   $0x3fff,0x8(%eax)
			return;
   1efaa:	e9 7a 19 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0x1eb:                     // FLDPI - 加载常数Pi到累加器ST。
			fpush();
   1efaf:	e8 79 1a 00 00       	call   20a2d <fpush>
			ST(0) = CONSTPI;
   1efb4:	83 ec 0c             	sub    $0xc,%esp
   1efb7:	6a 00                	push   $0x0
   1efb9:	e8 34 1b 00 00       	call   20af2 <__st>
   1efbe:	83 c4 10             	add    $0x10,%esp
   1efc1:	66 c7 00 35 c2       	movw   $0xc235,(%eax)
   1efc6:	66 c7 40 02 68 21    	movw   $0x2168,0x2(%eax)
   1efcc:	66 c7 40 04 a2 da    	movw   $0xdaa2,0x4(%eax)
   1efd2:	66 c7 40 06 0f c9    	movw   $0xc90f,0x6(%eax)
   1efd8:	66 c7 40 08 00 40    	movw   $0x4000,0x8(%eax)
			return;
   1efde:	e9 46 19 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0x1ec:                     // FLDLG2 - 加载常数Log10(2)到累加器ST。
			fpush();
   1efe3:	e8 45 1a 00 00       	call   20a2d <fpush>
			ST(0) = CONSTLG2;
   1efe8:	83 ec 0c             	sub    $0xc,%esp
   1efeb:	6a 00                	push   $0x0
   1efed:	e8 00 1b 00 00       	call   20af2 <__st>
   1eff2:	83 c4 10             	add    $0x10,%esp
   1eff5:	66 c7 00 99 f7       	movw   $0xf799,(%eax)
   1effa:	66 c7 40 02 cf fb    	movw   $0xfbcf,0x2(%eax)
   1f000:	66 c7 40 04 84 9a    	movw   $0x9a84,0x4(%eax)
   1f006:	66 c7 40 06 20 9a    	movw   $0x9a20,0x6(%eax)
   1f00c:	66 c7 40 08 fd 3f    	movw   $0x3ffd,0x8(%eax)
			return;
   1f012:	e9 12 19 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0x1ed:                     // FLDLN2 - 加载常数Loge(2)到累加器ST。
			fpush();
   1f017:	e8 11 1a 00 00       	call   20a2d <fpush>
			ST(0) = CONSTLN2;
   1f01c:	83 ec 0c             	sub    $0xc,%esp
   1f01f:	6a 00                	push   $0x0
   1f021:	e8 cc 1a 00 00       	call   20af2 <__st>
   1f026:	83 c4 10             	add    $0x10,%esp
   1f029:	66 c7 00 ac 79       	movw   $0x79ac,(%eax)
   1f02e:	66 c7 40 02 cf d1    	movw   $0xd1cf,0x2(%eax)
   1f034:	66 c7 40 04 f7 17    	movw   $0x17f7,0x4(%eax)
   1f03a:	66 c7 40 06 72 b1    	movw   $0xb172,0x6(%eax)
   1f040:	66 c7 40 08 fe 3f    	movw   $0x3ffe,0x8(%eax)
			return;
   1f046:	e9 de 18 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0x1ee:                     // FLDZ - 加载常数0.0到累加器ST。
			fpush();
   1f04b:	e8 dd 19 00 00       	call   20a2d <fpush>
			ST(0) = CONSTZ;
   1f050:	83 ec 0c             	sub    $0xc,%esp
   1f053:	6a 00                	push   $0x0
   1f055:	e8 98 1a 00 00       	call   20af2 <__st>
   1f05a:	83 c4 10             	add    $0x10,%esp
   1f05d:	66 c7 00 00 00       	movw   $0x0,(%eax)
   1f062:	66 c7 40 02 00 00    	movw   $0x0,0x2(%eax)
   1f068:	66 c7 40 04 00 00    	movw   $0x0,0x4(%eax)
   1f06e:	66 c7 40 06 00 00    	movw   $0x0,0x6(%eax)
   1f074:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
			return;
   1f07a:	e9 aa 18 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0x1ef:                     // 无效和未实现仿真指令代码。发信号，退出。
			math_abort(info,1<<(SIGILL-1));
   1f07f:	83 ec 08             	sub    $0x8,%esp
   1f082:	6a 08                	push   $0x8
   1f084:	ff 74 24 3c          	pushl  0x3c(%esp)
   1f088:	e8 05 19 00 00       	call   20992 <__math_abort>
   1f08d:	83 c4 10             	add    $0x10,%esp
		case 0x1f0: case 0x1f1: case 0x1f2: case 0x1f3:
		case 0x1f4: case 0x1f5: case 0x1f6: case 0x1f7:
		case 0x1f8: case 0x1f9: case 0x1fa: case 0x1fb:
		case 0x1fc: case 0x1fd: case 0x1fe: case 0x1ff:
			printk("%04x fxxx not implemented\n\r",code + 0xc800);
   1f090:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f095:	05 00 c8 00 00       	add    $0xc800,%eax
   1f09a:	83 ec 08             	sub    $0x8,%esp
   1f09d:	50                   	push   %eax
   1f09e:	68 8b 50 02 00       	push   $0x2508b
   1f0a3:	e8 9f 9b fe ff       	call   8c47 <printk>
   1f0a8:	83 c4 10             	add    $0x10,%esp
			math_abort(info,1<<(SIGILL-1));
   1f0ab:	83 ec 08             	sub    $0x8,%esp
   1f0ae:	6a 08                	push   $0x8
   1f0b0:	ff 74 24 3c          	pushl  0x3c(%esp)
   1f0b4:	e8 d9 18 00 00       	call   20992 <__math_abort>
   1f0b9:	83 c4 10             	add    $0x10,%esp
		case 0x2e9:                     // FUCOMPP - 无次序比较。
			fucom(PST(1),PST(0));
   1f0bc:	83 ec 0c             	sub    $0xc,%esp
   1f0bf:	6a 00                	push   $0x0
   1f0c1:	e8 2c 1a 00 00       	call   20af2 <__st>
   1f0c6:	83 c4 10             	add    $0x10,%esp
   1f0c9:	89 c3                	mov    %eax,%ebx
   1f0cb:	83 ec 0c             	sub    $0xc,%esp
   1f0ce:	6a 01                	push   $0x1
   1f0d0:	e8 1d 1a 00 00       	call   20af2 <__st>
   1f0d5:	83 c4 10             	add    $0x10,%esp
   1f0d8:	83 ec 08             	sub    $0x8,%esp
   1f0db:	53                   	push   %ebx
   1f0dc:	50                   	push   %eax
   1f0dd:	e8 50 2f 00 00       	call   22032 <fucom>
   1f0e2:	83 c4 10             	add    $0x10,%esp
			fpop(); fpop();
   1f0e5:	e8 d4 18 00 00       	call   209be <fpop>
   1f0ea:	e8 cf 18 00 00       	call   209be <fpop>
			return;
   1f0ef:	e9 35 18 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0x3d0: case 0x3d1:         // FNOP - 对387。！！应该是0x3e0，0x3e1。
			return;
		case 0x3e2:                     // FCLEX - 清状态字中异常标志。
			I387.swd &= 0x7f00;
   1f0f4:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1f0f9:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   1f0ff:	8b 92 1c 04 00 00    	mov    0x41c(%edx),%edx
   1f105:	81 e2 00 7f 00 00    	and    $0x7f00,%edx
   1f10b:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
			return;
   1f111:	e9 13 18 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0x3e3:                     // FINIT - 初始化协处理器。
			I387.cwd = 0x037f;
   1f116:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1f11b:	c7 80 18 04 00 00 7f 	movl   $0x37f,0x418(%eax)
   1f122:	03 00 00 
			I387.swd = 0x0000;
   1f125:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1f12a:	c7 80 1c 04 00 00 00 	movl   $0x0,0x41c(%eax)
   1f131:	00 00 00 
			I387.twd = 0x0000;
   1f134:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1f139:	c7 80 20 04 00 00 00 	movl   $0x0,0x420(%eax)
   1f140:	00 00 00 
			return;
   1f143:	e9 e1 17 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0x3e4:                     // FNOP - 对80387。
			return;
		case 0x6d9:                     // FCOMPP - ST(i)与ST比较，出栈操作两次。
			fcom(PST(1),PST(0));
   1f148:	83 ec 0c             	sub    $0xc,%esp
   1f14b:	6a 00                	push   $0x0
   1f14d:	e8 a0 19 00 00       	call   20af2 <__st>
   1f152:	83 c4 10             	add    $0x10,%esp
   1f155:	89 c3                	mov    %eax,%ebx
   1f157:	83 ec 0c             	sub    $0xc,%esp
   1f15a:	6a 01                	push   $0x1
   1f15c:	e8 91 19 00 00       	call   20af2 <__st>
   1f161:	83 c4 10             	add    $0x10,%esp
   1f164:	83 ec 08             	sub    $0x8,%esp
   1f167:	53                   	push   %ebx
   1f168:	50                   	push   %eax
   1f169:	e8 6d 2e 00 00       	call   21fdb <fcom>
   1f16e:	83 c4 10             	add    $0x10,%esp
			fpop(); fpop();
   1f171:	e8 48 18 00 00       	call   209be <fpop>
   1f176:	e8 43 18 00 00       	call   209be <fpop>
			return;
   1f17b:	e9 a9 17 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0x7e0:                     // FSTSW AX - 保存当前状态字到AX寄存器中。
			*(short *) &EAX = I387.swd;
   1f180:	8b 44 24 30          	mov    0x30(%esp),%eax
   1f184:	8d 50 18             	lea    0x18(%eax),%edx
   1f187:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   1f18c:	8b 80 1c 04 00 00    	mov    0x41c(%eax),%eax
   1f192:	66 89 02             	mov    %ax,(%edx)
			return;
   1f195:	e9 8f 17 00 00       	jmp    20929 <do_emu+0x1d5b>
	}
// 下面开始处理第2字节最后3位是REG的指令。即11011,XXXXXXXX，REG形式的代码。
	switch (code >> 3) {
   1f19a:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f19f:	66 c1 e8 03          	shr    $0x3,%ax
   1f1a3:	0f b7 c0             	movzwl %ax,%eax
   1f1a6:	83 e8 18             	sub    $0x18,%eax
   1f1a9:	3d e3 00 00 00       	cmp    $0xe3,%eax
   1f1ae:	0f 87 c3 0d 00 00    	ja     1ff77 <do_emu+0x13a9>
   1f1b4:	8b 04 85 14 51 02 00 	mov    0x25114(,%eax,4),%eax
   1f1bb:	ff e0                	jmp    *%eax
		case 0x18:                      // FADD ST, ST(i)。
			fadd(PST(0),PST(code & 7),&tmp);
   1f1bd:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f1c2:	83 e0 07             	and    $0x7,%eax
   1f1c5:	83 ec 0c             	sub    $0xc,%esp
   1f1c8:	50                   	push   %eax
   1f1c9:	e8 24 19 00 00       	call   20af2 <__st>
   1f1ce:	83 c4 10             	add    $0x10,%esp
   1f1d1:	89 c3                	mov    %eax,%ebx
   1f1d3:	83 ec 0c             	sub    $0xc,%esp
   1f1d6:	6a 00                	push   $0x0
   1f1d8:	e8 15 19 00 00       	call   20af2 <__st>
   1f1dd:	83 c4 10             	add    $0x10,%esp
   1f1e0:	89 c2                	mov    %eax,%edx
   1f1e2:	83 ec 04             	sub    $0x4,%esp
   1f1e5:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f1e9:	50                   	push   %eax
   1f1ea:	53                   	push   %ebx
   1f1eb:	52                   	push   %edx
   1f1ec:	e8 09 26 00 00       	call   217fa <fadd>
   1f1f1:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   1f1f4:	83 ec 0c             	sub    $0xc,%esp
   1f1f7:	6a 00                	push   $0x0
   1f1f9:	e8 f4 18 00 00       	call   20af2 <__st>
   1f1fe:	83 c4 10             	add    $0x10,%esp
   1f201:	89 c1                	mov    %eax,%ecx
   1f203:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1f207:	8b 50 04             	mov    0x4(%eax),%edx
   1f20a:	8b 00                	mov    (%eax),%eax
   1f20c:	89 01                	mov    %eax,(%ecx)
   1f20e:	89 51 04             	mov    %edx,0x4(%ecx)
   1f211:	83 ec 0c             	sub    $0xc,%esp
   1f214:	6a 00                	push   $0x0
   1f216:	e8 d7 18 00 00       	call   20af2 <__st>
   1f21b:	83 c4 10             	add    $0x10,%esp
   1f21e:	89 c2                	mov    %eax,%edx
   1f220:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f225:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f229:	e9 fb 16 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0x19:                      // FMUL ST, ST(i)。
			fmul(PST(0),PST(code & 7),&tmp);
   1f22e:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f233:	83 e0 07             	and    $0x7,%eax
   1f236:	83 ec 0c             	sub    $0xc,%esp
   1f239:	50                   	push   %eax
   1f23a:	e8 b3 18 00 00       	call   20af2 <__st>
   1f23f:	83 c4 10             	add    $0x10,%esp
   1f242:	89 c3                	mov    %eax,%ebx
   1f244:	83 ec 0c             	sub    $0xc,%esp
   1f247:	6a 00                	push   $0x0
   1f249:	e8 a4 18 00 00       	call   20af2 <__st>
   1f24e:	83 c4 10             	add    $0x10,%esp
   1f251:	89 c2                	mov    %eax,%edx
   1f253:	83 ec 04             	sub    $0x4,%esp
   1f256:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f25a:	50                   	push   %eax
   1f25b:	53                   	push   %ebx
   1f25c:	52                   	push   %edx
   1f25d:	e8 62 27 00 00       	call   219c4 <fmul>
   1f262:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   1f265:	83 ec 0c             	sub    $0xc,%esp
   1f268:	6a 00                	push   $0x0
   1f26a:	e8 83 18 00 00       	call   20af2 <__st>
   1f26f:	83 c4 10             	add    $0x10,%esp
   1f272:	89 c1                	mov    %eax,%ecx
   1f274:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1f278:	8b 50 04             	mov    0x4(%eax),%edx
   1f27b:	8b 00                	mov    (%eax),%eax
   1f27d:	89 01                	mov    %eax,(%ecx)
   1f27f:	89 51 04             	mov    %edx,0x4(%ecx)
   1f282:	83 ec 0c             	sub    $0xc,%esp
   1f285:	6a 00                	push   $0x0
   1f287:	e8 66 18 00 00       	call   20af2 <__st>
   1f28c:	83 c4 10             	add    $0x10,%esp
   1f28f:	89 c2                	mov    %eax,%edx
   1f291:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f296:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f29a:	e9 8a 16 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0x1a:                      // FCOM ST(i)。
			fcom(PST(code & 7),&tmp);
   1f29f:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f2a4:	83 e0 07             	and    $0x7,%eax
   1f2a7:	83 ec 0c             	sub    $0xc,%esp
   1f2aa:	50                   	push   %eax
   1f2ab:	e8 42 18 00 00       	call   20af2 <__st>
   1f2b0:	83 c4 10             	add    $0x10,%esp
   1f2b3:	89 c2                	mov    %eax,%edx
   1f2b5:	83 ec 08             	sub    $0x8,%esp
   1f2b8:	8d 44 24 14          	lea    0x14(%esp),%eax
   1f2bc:	50                   	push   %eax
   1f2bd:	52                   	push   %edx
   1f2be:	e8 18 2d 00 00       	call   21fdb <fcom>
   1f2c3:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   1f2c6:	83 ec 0c             	sub    $0xc,%esp
   1f2c9:	6a 00                	push   $0x0
   1f2cb:	e8 22 18 00 00       	call   20af2 <__st>
   1f2d0:	83 c4 10             	add    $0x10,%esp
   1f2d3:	89 c1                	mov    %eax,%ecx
   1f2d5:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1f2d9:	8b 50 04             	mov    0x4(%eax),%edx
   1f2dc:	8b 00                	mov    (%eax),%eax
   1f2de:	89 01                	mov    %eax,(%ecx)
   1f2e0:	89 51 04             	mov    %edx,0x4(%ecx)
   1f2e3:	83 ec 0c             	sub    $0xc,%esp
   1f2e6:	6a 00                	push   $0x0
   1f2e8:	e8 05 18 00 00       	call   20af2 <__st>
   1f2ed:	83 c4 10             	add    $0x10,%esp
   1f2f0:	89 c2                	mov    %eax,%edx
   1f2f2:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f2f7:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f2fb:	e9 29 16 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0x1b:                      // FCOMP ST(i)。
			fcom(PST(code & 7),&tmp);
   1f300:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f305:	83 e0 07             	and    $0x7,%eax
   1f308:	83 ec 0c             	sub    $0xc,%esp
   1f30b:	50                   	push   %eax
   1f30c:	e8 e1 17 00 00       	call   20af2 <__st>
   1f311:	83 c4 10             	add    $0x10,%esp
   1f314:	89 c2                	mov    %eax,%edx
   1f316:	83 ec 08             	sub    $0x8,%esp
   1f319:	8d 44 24 14          	lea    0x14(%esp),%eax
   1f31d:	50                   	push   %eax
   1f31e:	52                   	push   %edx
   1f31f:	e8 b7 2c 00 00       	call   21fdb <fcom>
   1f324:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   1f327:	83 ec 0c             	sub    $0xc,%esp
   1f32a:	6a 00                	push   $0x0
   1f32c:	e8 c1 17 00 00       	call   20af2 <__st>
   1f331:	83 c4 10             	add    $0x10,%esp
   1f334:	89 c1                	mov    %eax,%ecx
   1f336:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1f33a:	8b 50 04             	mov    0x4(%eax),%edx
   1f33d:	8b 00                	mov    (%eax),%eax
   1f33f:	89 01                	mov    %eax,(%ecx)
   1f341:	89 51 04             	mov    %edx,0x4(%ecx)
   1f344:	83 ec 0c             	sub    $0xc,%esp
   1f347:	6a 00                	push   $0x0
   1f349:	e8 a4 17 00 00       	call   20af2 <__st>
   1f34e:	83 c4 10             	add    $0x10,%esp
   1f351:	89 c2                	mov    %eax,%edx
   1f353:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f358:	66 89 42 08          	mov    %ax,0x8(%edx)
			fpop();
   1f35c:	e8 5d 16 00 00       	call   209be <fpop>
			return;
   1f361:	e9 c3 15 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0x1c:                      // FSUB ST, ST(i)。
			real_to_real(&ST(code & 7),&tmp);
   1f366:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1f36a:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f36f:	83 e0 07             	and    $0x7,%eax
   1f372:	83 ec 0c             	sub    $0xc,%esp
   1f375:	50                   	push   %eax
   1f376:	e8 77 17 00 00       	call   20af2 <__st>
   1f37b:	83 c4 10             	add    $0x10,%esp
   1f37e:	8b 50 04             	mov    0x4(%eax),%edx
   1f381:	8b 00                	mov    (%eax),%eax
   1f383:	89 03                	mov    %eax,(%ebx)
   1f385:	89 53 04             	mov    %edx,0x4(%ebx)
   1f388:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f38d:	83 e0 07             	and    $0x7,%eax
   1f390:	83 ec 0c             	sub    $0xc,%esp
   1f393:	50                   	push   %eax
   1f394:	e8 59 17 00 00       	call   20af2 <__st>
   1f399:	83 c4 10             	add    $0x10,%esp
   1f39c:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   1f3a0:	66 89 44 24 14       	mov    %ax,0x14(%esp)
			tmp.exponent ^= 0x8000;
   1f3a5:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f3aa:	66 35 00 80          	xor    $0x8000,%ax
   1f3ae:	66 89 44 24 14       	mov    %ax,0x14(%esp)
			fadd(PST(0),&tmp,&tmp);
   1f3b3:	83 ec 0c             	sub    $0xc,%esp
   1f3b6:	6a 00                	push   $0x0
   1f3b8:	e8 35 17 00 00       	call   20af2 <__st>
   1f3bd:	83 c4 10             	add    $0x10,%esp
   1f3c0:	89 c2                	mov    %eax,%edx
   1f3c2:	83 ec 04             	sub    $0x4,%esp
   1f3c5:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f3c9:	50                   	push   %eax
   1f3ca:	8d 44 24 14          	lea    0x14(%esp),%eax
   1f3ce:	50                   	push   %eax
   1f3cf:	52                   	push   %edx
   1f3d0:	e8 25 24 00 00       	call   217fa <fadd>
   1f3d5:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   1f3d8:	83 ec 0c             	sub    $0xc,%esp
   1f3db:	6a 00                	push   $0x0
   1f3dd:	e8 10 17 00 00       	call   20af2 <__st>
   1f3e2:	83 c4 10             	add    $0x10,%esp
   1f3e5:	89 c1                	mov    %eax,%ecx
   1f3e7:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1f3eb:	8b 50 04             	mov    0x4(%eax),%edx
   1f3ee:	8b 00                	mov    (%eax),%eax
   1f3f0:	89 01                	mov    %eax,(%ecx)
   1f3f2:	89 51 04             	mov    %edx,0x4(%ecx)
   1f3f5:	83 ec 0c             	sub    $0xc,%esp
   1f3f8:	6a 00                	push   $0x0
   1f3fa:	e8 f3 16 00 00       	call   20af2 <__st>
   1f3ff:	83 c4 10             	add    $0x10,%esp
   1f402:	89 c2                	mov    %eax,%edx
   1f404:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f409:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f40d:	e9 17 15 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0x1d:                      // FSUBR ST, ST(i)。
			ST(0).exponent ^= 0x8000;
   1f412:	83 ec 0c             	sub    $0xc,%esp
   1f415:	6a 00                	push   $0x0
   1f417:	e8 d6 16 00 00       	call   20af2 <__st>
   1f41c:	83 c4 10             	add    $0x10,%esp
   1f41f:	0f b7 50 08          	movzwl 0x8(%eax),%edx
   1f423:	66 81 f2 00 80       	xor    $0x8000,%dx
   1f428:	66 89 50 08          	mov    %dx,0x8(%eax)
			fadd(PST(0),PST(code & 7),&tmp);
   1f42c:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f431:	83 e0 07             	and    $0x7,%eax
   1f434:	83 ec 0c             	sub    $0xc,%esp
   1f437:	50                   	push   %eax
   1f438:	e8 b5 16 00 00       	call   20af2 <__st>
   1f43d:	83 c4 10             	add    $0x10,%esp
   1f440:	89 c3                	mov    %eax,%ebx
   1f442:	83 ec 0c             	sub    $0xc,%esp
   1f445:	6a 00                	push   $0x0
   1f447:	e8 a6 16 00 00       	call   20af2 <__st>
   1f44c:	83 c4 10             	add    $0x10,%esp
   1f44f:	89 c2                	mov    %eax,%edx
   1f451:	83 ec 04             	sub    $0x4,%esp
   1f454:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f458:	50                   	push   %eax
   1f459:	53                   	push   %ebx
   1f45a:	52                   	push   %edx
   1f45b:	e8 9a 23 00 00       	call   217fa <fadd>
   1f460:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   1f463:	83 ec 0c             	sub    $0xc,%esp
   1f466:	6a 00                	push   $0x0
   1f468:	e8 85 16 00 00       	call   20af2 <__st>
   1f46d:	83 c4 10             	add    $0x10,%esp
   1f470:	89 c1                	mov    %eax,%ecx
   1f472:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1f476:	8b 50 04             	mov    0x4(%eax),%edx
   1f479:	8b 00                	mov    (%eax),%eax
   1f47b:	89 01                	mov    %eax,(%ecx)
   1f47d:	89 51 04             	mov    %edx,0x4(%ecx)
   1f480:	83 ec 0c             	sub    $0xc,%esp
   1f483:	6a 00                	push   $0x0
   1f485:	e8 68 16 00 00       	call   20af2 <__st>
   1f48a:	83 c4 10             	add    $0x10,%esp
   1f48d:	89 c2                	mov    %eax,%edx
   1f48f:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f494:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f498:	e9 8c 14 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0x1e:                      // FDIV ST, ST(i)。
			fdiv(PST(0),PST(code & 7),&tmp);
   1f49d:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f4a2:	83 e0 07             	and    $0x7,%eax
   1f4a5:	83 ec 0c             	sub    $0xc,%esp
   1f4a8:	50                   	push   %eax
   1f4a9:	e8 44 16 00 00       	call   20af2 <__st>
   1f4ae:	83 c4 10             	add    $0x10,%esp
   1f4b1:	89 c3                	mov    %eax,%ebx
   1f4b3:	83 ec 0c             	sub    $0xc,%esp
   1f4b6:	6a 00                	push   $0x0
   1f4b8:	e8 35 16 00 00       	call   20af2 <__st>
   1f4bd:	83 c4 10             	add    $0x10,%esp
   1f4c0:	89 c2                	mov    %eax,%edx
   1f4c2:	83 ec 04             	sub    $0x4,%esp
   1f4c5:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f4c9:	50                   	push   %eax
   1f4ca:	53                   	push   %ebx
   1f4cb:	52                   	push   %edx
   1f4cc:	e8 81 27 00 00       	call   21c52 <fdiv>
   1f4d1:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   1f4d4:	83 ec 0c             	sub    $0xc,%esp
   1f4d7:	6a 00                	push   $0x0
   1f4d9:	e8 14 16 00 00       	call   20af2 <__st>
   1f4de:	83 c4 10             	add    $0x10,%esp
   1f4e1:	89 c1                	mov    %eax,%ecx
   1f4e3:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1f4e7:	8b 50 04             	mov    0x4(%eax),%edx
   1f4ea:	8b 00                	mov    (%eax),%eax
   1f4ec:	89 01                	mov    %eax,(%ecx)
   1f4ee:	89 51 04             	mov    %edx,0x4(%ecx)
   1f4f1:	83 ec 0c             	sub    $0xc,%esp
   1f4f4:	6a 00                	push   $0x0
   1f4f6:	e8 f7 15 00 00       	call   20af2 <__st>
   1f4fb:	83 c4 10             	add    $0x10,%esp
   1f4fe:	89 c2                	mov    %eax,%edx
   1f500:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f505:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f509:	e9 1b 14 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0x1f:                      // FDIVR ST, ST(i)。
			fdiv(PST(code & 7),PST(0),&tmp);
   1f50e:	83 ec 0c             	sub    $0xc,%esp
   1f511:	6a 00                	push   $0x0
   1f513:	e8 da 15 00 00       	call   20af2 <__st>
   1f518:	83 c4 10             	add    $0x10,%esp
   1f51b:	89 c3                	mov    %eax,%ebx
   1f51d:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f522:	83 e0 07             	and    $0x7,%eax
   1f525:	83 ec 0c             	sub    $0xc,%esp
   1f528:	50                   	push   %eax
   1f529:	e8 c4 15 00 00       	call   20af2 <__st>
   1f52e:	83 c4 10             	add    $0x10,%esp
   1f531:	89 c2                	mov    %eax,%edx
   1f533:	83 ec 04             	sub    $0x4,%esp
   1f536:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f53a:	50                   	push   %eax
   1f53b:	53                   	push   %ebx
   1f53c:	52                   	push   %edx
   1f53d:	e8 10 27 00 00       	call   21c52 <fdiv>
   1f542:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   1f545:	83 ec 0c             	sub    $0xc,%esp
   1f548:	6a 00                	push   $0x0
   1f54a:	e8 a3 15 00 00       	call   20af2 <__st>
   1f54f:	83 c4 10             	add    $0x10,%esp
   1f552:	89 c1                	mov    %eax,%ecx
   1f554:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1f558:	8b 50 04             	mov    0x4(%eax),%edx
   1f55b:	8b 00                	mov    (%eax),%eax
   1f55d:	89 01                	mov    %eax,(%ecx)
   1f55f:	89 51 04             	mov    %edx,0x4(%ecx)
   1f562:	83 ec 0c             	sub    $0xc,%esp
   1f565:	6a 00                	push   $0x0
   1f567:	e8 86 15 00 00       	call   20af2 <__st>
   1f56c:	83 c4 10             	add    $0x10,%esp
   1f56f:	89 c2                	mov    %eax,%edx
   1f571:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f576:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f57a:	e9 aa 13 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0x38:                      // FLD ST(i)。
			fpush();
   1f57f:	e8 a9 14 00 00       	call   20a2d <fpush>
			ST(0) = ST((code & 7)+1);
   1f584:	83 ec 0c             	sub    $0xc,%esp
   1f587:	6a 00                	push   $0x0
   1f589:	e8 64 15 00 00       	call   20af2 <__st>
   1f58e:	83 c4 10             	add    $0x10,%esp
   1f591:	89 c3                	mov    %eax,%ebx
   1f593:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f598:	83 e0 07             	and    $0x7,%eax
   1f59b:	83 c0 01             	add    $0x1,%eax
   1f59e:	83 ec 0c             	sub    $0xc,%esp
   1f5a1:	50                   	push   %eax
   1f5a2:	e8 4b 15 00 00       	call   20af2 <__st>
   1f5a7:	83 c4 10             	add    $0x10,%esp
   1f5aa:	8b 10                	mov    (%eax),%edx
   1f5ac:	89 13                	mov    %edx,(%ebx)
   1f5ae:	8b 50 04             	mov    0x4(%eax),%edx
   1f5b1:	89 53 04             	mov    %edx,0x4(%ebx)
   1f5b4:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   1f5b8:	66 89 43 08          	mov    %ax,0x8(%ebx)
			return;
   1f5bc:	e9 68 13 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0x39:                      // FXCH ST(i)。
			fxchg(&ST(0),&ST(code & 7));
   1f5c1:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f5c6:	83 e0 07             	and    $0x7,%eax
   1f5c9:	83 ec 0c             	sub    $0xc,%esp
   1f5cc:	50                   	push   %eax
   1f5cd:	e8 20 15 00 00       	call   20af2 <__st>
   1f5d2:	83 c4 10             	add    $0x10,%esp
   1f5d5:	89 c3                	mov    %eax,%ebx
   1f5d7:	83 ec 0c             	sub    $0xc,%esp
   1f5da:	6a 00                	push   $0x0
   1f5dc:	e8 11 15 00 00       	call   20af2 <__st>
   1f5e1:	83 c4 10             	add    $0x10,%esp
   1f5e4:	83 ec 08             	sub    $0x8,%esp
   1f5e7:	53                   	push   %ebx
   1f5e8:	50                   	push   %eax
   1f5e9:	e8 ae 14 00 00       	call   20a9c <fxchg>
   1f5ee:	83 c4 10             	add    $0x10,%esp
			return;
   1f5f1:	e9 33 13 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0x3b:                      // FSTP ST(i)。
			ST(code & 7) = ST(0);
   1f5f6:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f5fb:	83 e0 07             	and    $0x7,%eax
   1f5fe:	83 ec 0c             	sub    $0xc,%esp
   1f601:	50                   	push   %eax
   1f602:	e8 eb 14 00 00       	call   20af2 <__st>
   1f607:	83 c4 10             	add    $0x10,%esp
   1f60a:	89 c3                	mov    %eax,%ebx
   1f60c:	83 ec 0c             	sub    $0xc,%esp
   1f60f:	6a 00                	push   $0x0
   1f611:	e8 dc 14 00 00       	call   20af2 <__st>
   1f616:	83 c4 10             	add    $0x10,%esp
   1f619:	8b 10                	mov    (%eax),%edx
   1f61b:	89 13                	mov    %edx,(%ebx)
   1f61d:	8b 50 04             	mov    0x4(%eax),%edx
   1f620:	89 53 04             	mov    %edx,0x4(%ebx)
   1f623:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   1f627:	66 89 43 08          	mov    %ax,0x8(%ebx)
			fpop();
   1f62b:	e8 8e 13 00 00       	call   209be <fpop>
			return;
   1f630:	e9 f4 12 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0x98:                      // FADD ST(i)， ST。
			fadd(PST(0),PST(code & 7),&tmp);
   1f635:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f63a:	83 e0 07             	and    $0x7,%eax
   1f63d:	83 ec 0c             	sub    $0xc,%esp
   1f640:	50                   	push   %eax
   1f641:	e8 ac 14 00 00       	call   20af2 <__st>
   1f646:	83 c4 10             	add    $0x10,%esp
   1f649:	89 c3                	mov    %eax,%ebx
   1f64b:	83 ec 0c             	sub    $0xc,%esp
   1f64e:	6a 00                	push   $0x0
   1f650:	e8 9d 14 00 00       	call   20af2 <__st>
   1f655:	83 c4 10             	add    $0x10,%esp
   1f658:	89 c2                	mov    %eax,%edx
   1f65a:	83 ec 04             	sub    $0x4,%esp
   1f65d:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f661:	50                   	push   %eax
   1f662:	53                   	push   %ebx
   1f663:	52                   	push   %edx
   1f664:	e8 91 21 00 00       	call   217fa <fadd>
   1f669:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1f66c:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f671:	83 e0 07             	and    $0x7,%eax
   1f674:	83 ec 0c             	sub    $0xc,%esp
   1f677:	50                   	push   %eax
   1f678:	e8 75 14 00 00       	call   20af2 <__st>
   1f67d:	83 c4 10             	add    $0x10,%esp
   1f680:	89 c1                	mov    %eax,%ecx
   1f682:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1f686:	8b 50 04             	mov    0x4(%eax),%edx
   1f689:	8b 00                	mov    (%eax),%eax
   1f68b:	89 01                	mov    %eax,(%ecx)
   1f68d:	89 51 04             	mov    %edx,0x4(%ecx)
   1f690:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f695:	83 e0 07             	and    $0x7,%eax
   1f698:	83 ec 0c             	sub    $0xc,%esp
   1f69b:	50                   	push   %eax
   1f69c:	e8 51 14 00 00       	call   20af2 <__st>
   1f6a1:	83 c4 10             	add    $0x10,%esp
   1f6a4:	89 c2                	mov    %eax,%edx
   1f6a6:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f6ab:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f6af:	e9 75 12 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0x99:                      // FMUL ST(i)， ST。
			fmul(PST(0),PST(code & 7),&tmp);
   1f6b4:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f6b9:	83 e0 07             	and    $0x7,%eax
   1f6bc:	83 ec 0c             	sub    $0xc,%esp
   1f6bf:	50                   	push   %eax
   1f6c0:	e8 2d 14 00 00       	call   20af2 <__st>
   1f6c5:	83 c4 10             	add    $0x10,%esp
   1f6c8:	89 c3                	mov    %eax,%ebx
   1f6ca:	83 ec 0c             	sub    $0xc,%esp
   1f6cd:	6a 00                	push   $0x0
   1f6cf:	e8 1e 14 00 00       	call   20af2 <__st>
   1f6d4:	83 c4 10             	add    $0x10,%esp
   1f6d7:	89 c2                	mov    %eax,%edx
   1f6d9:	83 ec 04             	sub    $0x4,%esp
   1f6dc:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f6e0:	50                   	push   %eax
   1f6e1:	53                   	push   %ebx
   1f6e2:	52                   	push   %edx
   1f6e3:	e8 dc 22 00 00       	call   219c4 <fmul>
   1f6e8:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1f6eb:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f6f0:	83 e0 07             	and    $0x7,%eax
   1f6f3:	83 ec 0c             	sub    $0xc,%esp
   1f6f6:	50                   	push   %eax
   1f6f7:	e8 f6 13 00 00       	call   20af2 <__st>
   1f6fc:	83 c4 10             	add    $0x10,%esp
   1f6ff:	89 c1                	mov    %eax,%ecx
   1f701:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1f705:	8b 50 04             	mov    0x4(%eax),%edx
   1f708:	8b 00                	mov    (%eax),%eax
   1f70a:	89 01                	mov    %eax,(%ecx)
   1f70c:	89 51 04             	mov    %edx,0x4(%ecx)
   1f70f:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f714:	83 e0 07             	and    $0x7,%eax
   1f717:	83 ec 0c             	sub    $0xc,%esp
   1f71a:	50                   	push   %eax
   1f71b:	e8 d2 13 00 00       	call   20af2 <__st>
   1f720:	83 c4 10             	add    $0x10,%esp
   1f723:	89 c2                	mov    %eax,%edx
   1f725:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f72a:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f72e:	e9 f6 11 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0x9a:                      // FCOM ST(i)。
			fcom(PST(code & 7),PST(0));
   1f733:	83 ec 0c             	sub    $0xc,%esp
   1f736:	6a 00                	push   $0x0
   1f738:	e8 b5 13 00 00       	call   20af2 <__st>
   1f73d:	83 c4 10             	add    $0x10,%esp
   1f740:	89 c3                	mov    %eax,%ebx
   1f742:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f747:	83 e0 07             	and    $0x7,%eax
   1f74a:	83 ec 0c             	sub    $0xc,%esp
   1f74d:	50                   	push   %eax
   1f74e:	e8 9f 13 00 00       	call   20af2 <__st>
   1f753:	83 c4 10             	add    $0x10,%esp
   1f756:	83 ec 08             	sub    $0x8,%esp
   1f759:	53                   	push   %ebx
   1f75a:	50                   	push   %eax
   1f75b:	e8 7b 28 00 00       	call   21fdb <fcom>
   1f760:	83 c4 10             	add    $0x10,%esp
			return;
   1f763:	e9 c1 11 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0x9b:                      // FCOMP ST(i)。
			fcom(PST(code & 7),PST(0));
   1f768:	83 ec 0c             	sub    $0xc,%esp
   1f76b:	6a 00                	push   $0x0
   1f76d:	e8 80 13 00 00       	call   20af2 <__st>
   1f772:	83 c4 10             	add    $0x10,%esp
   1f775:	89 c3                	mov    %eax,%ebx
   1f777:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f77c:	83 e0 07             	and    $0x7,%eax
   1f77f:	83 ec 0c             	sub    $0xc,%esp
   1f782:	50                   	push   %eax
   1f783:	e8 6a 13 00 00       	call   20af2 <__st>
   1f788:	83 c4 10             	add    $0x10,%esp
   1f78b:	83 ec 08             	sub    $0x8,%esp
   1f78e:	53                   	push   %ebx
   1f78f:	50                   	push   %eax
   1f790:	e8 46 28 00 00       	call   21fdb <fcom>
   1f795:	83 c4 10             	add    $0x10,%esp
			fpop();
   1f798:	e8 21 12 00 00       	call   209be <fpop>
			return;			
   1f79d:	e9 87 11 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0x9c:                      // FSUBR ST(i), ST。
			ST(code & 7).exponent ^= 0x8000;
   1f7a2:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f7a7:	83 e0 07             	and    $0x7,%eax
   1f7aa:	83 ec 0c             	sub    $0xc,%esp
   1f7ad:	50                   	push   %eax
   1f7ae:	e8 3f 13 00 00       	call   20af2 <__st>
   1f7b3:	83 c4 10             	add    $0x10,%esp
   1f7b6:	0f b7 50 08          	movzwl 0x8(%eax),%edx
   1f7ba:	66 81 f2 00 80       	xor    $0x8000,%dx
   1f7bf:	66 89 50 08          	mov    %dx,0x8(%eax)
			fadd(PST(0),PST(code & 7),&tmp);
   1f7c3:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f7c8:	83 e0 07             	and    $0x7,%eax
   1f7cb:	83 ec 0c             	sub    $0xc,%esp
   1f7ce:	50                   	push   %eax
   1f7cf:	e8 1e 13 00 00       	call   20af2 <__st>
   1f7d4:	83 c4 10             	add    $0x10,%esp
   1f7d7:	89 c3                	mov    %eax,%ebx
   1f7d9:	83 ec 0c             	sub    $0xc,%esp
   1f7dc:	6a 00                	push   $0x0
   1f7de:	e8 0f 13 00 00       	call   20af2 <__st>
   1f7e3:	83 c4 10             	add    $0x10,%esp
   1f7e6:	89 c2                	mov    %eax,%edx
   1f7e8:	83 ec 04             	sub    $0x4,%esp
   1f7eb:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f7ef:	50                   	push   %eax
   1f7f0:	53                   	push   %ebx
   1f7f1:	52                   	push   %edx
   1f7f2:	e8 03 20 00 00       	call   217fa <fadd>
   1f7f7:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1f7fa:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f7ff:	83 e0 07             	and    $0x7,%eax
   1f802:	83 ec 0c             	sub    $0xc,%esp
   1f805:	50                   	push   %eax
   1f806:	e8 e7 12 00 00       	call   20af2 <__st>
   1f80b:	83 c4 10             	add    $0x10,%esp
   1f80e:	89 c1                	mov    %eax,%ecx
   1f810:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1f814:	8b 50 04             	mov    0x4(%eax),%edx
   1f817:	8b 00                	mov    (%eax),%eax
   1f819:	89 01                	mov    %eax,(%ecx)
   1f81b:	89 51 04             	mov    %edx,0x4(%ecx)
   1f81e:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f823:	83 e0 07             	and    $0x7,%eax
   1f826:	83 ec 0c             	sub    $0xc,%esp
   1f829:	50                   	push   %eax
   1f82a:	e8 c3 12 00 00       	call   20af2 <__st>
   1f82f:	83 c4 10             	add    $0x10,%esp
   1f832:	89 c2                	mov    %eax,%edx
   1f834:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f839:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f83d:	e9 e7 10 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0x9d:                      // FSUB ST(i), ST。
			real_to_real(&ST(0),&tmp);
   1f842:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1f846:	83 ec 0c             	sub    $0xc,%esp
   1f849:	6a 00                	push   $0x0
   1f84b:	e8 a2 12 00 00       	call   20af2 <__st>
   1f850:	83 c4 10             	add    $0x10,%esp
   1f853:	8b 50 04             	mov    0x4(%eax),%edx
   1f856:	8b 00                	mov    (%eax),%eax
   1f858:	89 03                	mov    %eax,(%ebx)
   1f85a:	89 53 04             	mov    %edx,0x4(%ebx)
   1f85d:	83 ec 0c             	sub    $0xc,%esp
   1f860:	6a 00                	push   $0x0
   1f862:	e8 8b 12 00 00       	call   20af2 <__st>
   1f867:	83 c4 10             	add    $0x10,%esp
   1f86a:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   1f86e:	66 89 44 24 14       	mov    %ax,0x14(%esp)
			tmp.exponent ^= 0x8000;
   1f873:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f878:	66 35 00 80          	xor    $0x8000,%ax
   1f87c:	66 89 44 24 14       	mov    %ax,0x14(%esp)
			fadd(PST(code & 7),&tmp,&tmp);
   1f881:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f886:	83 e0 07             	and    $0x7,%eax
   1f889:	83 ec 0c             	sub    $0xc,%esp
   1f88c:	50                   	push   %eax
   1f88d:	e8 60 12 00 00       	call   20af2 <__st>
   1f892:	83 c4 10             	add    $0x10,%esp
   1f895:	89 c2                	mov    %eax,%edx
   1f897:	83 ec 04             	sub    $0x4,%esp
   1f89a:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f89e:	50                   	push   %eax
   1f89f:	8d 44 24 14          	lea    0x14(%esp),%eax
   1f8a3:	50                   	push   %eax
   1f8a4:	52                   	push   %edx
   1f8a5:	e8 50 1f 00 00       	call   217fa <fadd>
   1f8aa:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1f8ad:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f8b2:	83 e0 07             	and    $0x7,%eax
   1f8b5:	83 ec 0c             	sub    $0xc,%esp
   1f8b8:	50                   	push   %eax
   1f8b9:	e8 34 12 00 00       	call   20af2 <__st>
   1f8be:	83 c4 10             	add    $0x10,%esp
   1f8c1:	89 c1                	mov    %eax,%ecx
   1f8c3:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1f8c7:	8b 50 04             	mov    0x4(%eax),%edx
   1f8ca:	8b 00                	mov    (%eax),%eax
   1f8cc:	89 01                	mov    %eax,(%ecx)
   1f8ce:	89 51 04             	mov    %edx,0x4(%ecx)
   1f8d1:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f8d6:	83 e0 07             	and    $0x7,%eax
   1f8d9:	83 ec 0c             	sub    $0xc,%esp
   1f8dc:	50                   	push   %eax
   1f8dd:	e8 10 12 00 00       	call   20af2 <__st>
   1f8e2:	83 c4 10             	add    $0x10,%esp
   1f8e5:	89 c2                	mov    %eax,%edx
   1f8e7:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f8ec:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f8f0:	e9 34 10 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0x9e:                      // FDIVR ST(i), ST。
			fdiv(PST(0),PST(code & 7),&tmp);
   1f8f5:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f8fa:	83 e0 07             	and    $0x7,%eax
   1f8fd:	83 ec 0c             	sub    $0xc,%esp
   1f900:	50                   	push   %eax
   1f901:	e8 ec 11 00 00       	call   20af2 <__st>
   1f906:	83 c4 10             	add    $0x10,%esp
   1f909:	89 c3                	mov    %eax,%ebx
   1f90b:	83 ec 0c             	sub    $0xc,%esp
   1f90e:	6a 00                	push   $0x0
   1f910:	e8 dd 11 00 00       	call   20af2 <__st>
   1f915:	83 c4 10             	add    $0x10,%esp
   1f918:	89 c2                	mov    %eax,%edx
   1f91a:	83 ec 04             	sub    $0x4,%esp
   1f91d:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f921:	50                   	push   %eax
   1f922:	53                   	push   %ebx
   1f923:	52                   	push   %edx
   1f924:	e8 29 23 00 00       	call   21c52 <fdiv>
   1f929:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1f92c:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f931:	83 e0 07             	and    $0x7,%eax
   1f934:	83 ec 0c             	sub    $0xc,%esp
   1f937:	50                   	push   %eax
   1f938:	e8 b5 11 00 00       	call   20af2 <__st>
   1f93d:	83 c4 10             	add    $0x10,%esp
   1f940:	89 c1                	mov    %eax,%ecx
   1f942:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1f946:	8b 50 04             	mov    0x4(%eax),%edx
   1f949:	8b 00                	mov    (%eax),%eax
   1f94b:	89 01                	mov    %eax,(%ecx)
   1f94d:	89 51 04             	mov    %edx,0x4(%ecx)
   1f950:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f955:	83 e0 07             	and    $0x7,%eax
   1f958:	83 ec 0c             	sub    $0xc,%esp
   1f95b:	50                   	push   %eax
   1f95c:	e8 91 11 00 00       	call   20af2 <__st>
   1f961:	83 c4 10             	add    $0x10,%esp
   1f964:	89 c2                	mov    %eax,%edx
   1f966:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f96b:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f96f:	e9 b5 0f 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0x9f:                      // FDIV ST(i), ST。
			fdiv(PST(code & 7),PST(0),&tmp);
   1f974:	83 ec 0c             	sub    $0xc,%esp
   1f977:	6a 00                	push   $0x0
   1f979:	e8 74 11 00 00       	call   20af2 <__st>
   1f97e:	83 c4 10             	add    $0x10,%esp
   1f981:	89 c3                	mov    %eax,%ebx
   1f983:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f988:	83 e0 07             	and    $0x7,%eax
   1f98b:	83 ec 0c             	sub    $0xc,%esp
   1f98e:	50                   	push   %eax
   1f98f:	e8 5e 11 00 00       	call   20af2 <__st>
   1f994:	83 c4 10             	add    $0x10,%esp
   1f997:	89 c2                	mov    %eax,%edx
   1f999:	83 ec 04             	sub    $0x4,%esp
   1f99c:	8d 44 24 10          	lea    0x10(%esp),%eax
   1f9a0:	50                   	push   %eax
   1f9a1:	53                   	push   %ebx
   1f9a2:	52                   	push   %edx
   1f9a3:	e8 aa 22 00 00       	call   21c52 <fdiv>
   1f9a8:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1f9ab:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f9b0:	83 e0 07             	and    $0x7,%eax
   1f9b3:	83 ec 0c             	sub    $0xc,%esp
   1f9b6:	50                   	push   %eax
   1f9b7:	e8 36 11 00 00       	call   20af2 <__st>
   1f9bc:	83 c4 10             	add    $0x10,%esp
   1f9bf:	89 c1                	mov    %eax,%ecx
   1f9c1:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1f9c5:	8b 50 04             	mov    0x4(%eax),%edx
   1f9c8:	8b 00                	mov    (%eax),%eax
   1f9ca:	89 01                	mov    %eax,(%ecx)
   1f9cc:	89 51 04             	mov    %edx,0x4(%ecx)
   1f9cf:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1f9d4:	83 e0 07             	and    $0x7,%eax
   1f9d7:	83 ec 0c             	sub    $0xc,%esp
   1f9da:	50                   	push   %eax
   1f9db:	e8 12 11 00 00       	call   20af2 <__st>
   1f9e0:	83 c4 10             	add    $0x10,%esp
   1f9e3:	89 c2                	mov    %eax,%edx
   1f9e5:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1f9ea:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   1f9ee:	e9 36 0f 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0xb8:                      // FFREE ST(i), ST。未实现。
			printk("ffree not implemented\n\r");
   1f9f3:	83 ec 0c             	sub    $0xc,%esp
   1f9f6:	68 a7 50 02 00       	push   $0x250a7
   1f9fb:	e8 47 92 fe ff       	call   8c47 <printk>
   1fa00:	83 c4 10             	add    $0x10,%esp
			math_abort(info,1<<(SIGILL-1));
   1fa03:	83 ec 08             	sub    $0x8,%esp
   1fa06:	6a 08                	push   $0x8
   1fa08:	ff 74 24 3c          	pushl  0x3c(%esp)
   1fa0c:	e8 81 0f 00 00       	call   20992 <__math_abort>
   1fa11:	83 c4 10             	add    $0x10,%esp
		case 0xb9:                      // FXCH ST(i)。
			fxchg(&ST(0),&ST(code & 7));
   1fa14:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fa19:	83 e0 07             	and    $0x7,%eax
   1fa1c:	83 ec 0c             	sub    $0xc,%esp
   1fa1f:	50                   	push   %eax
   1fa20:	e8 cd 10 00 00       	call   20af2 <__st>
   1fa25:	83 c4 10             	add    $0x10,%esp
   1fa28:	89 c3                	mov    %eax,%ebx
   1fa2a:	83 ec 0c             	sub    $0xc,%esp
   1fa2d:	6a 00                	push   $0x0
   1fa2f:	e8 be 10 00 00       	call   20af2 <__st>
   1fa34:	83 c4 10             	add    $0x10,%esp
   1fa37:	83 ec 08             	sub    $0x8,%esp
   1fa3a:	53                   	push   %ebx
   1fa3b:	50                   	push   %eax
   1fa3c:	e8 5b 10 00 00       	call   20a9c <fxchg>
   1fa41:	83 c4 10             	add    $0x10,%esp
			return;
   1fa44:	e9 e0 0e 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0xba:                      // FST ST(i)。
			ST(code & 7) = ST(0);
   1fa49:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fa4e:	83 e0 07             	and    $0x7,%eax
   1fa51:	83 ec 0c             	sub    $0xc,%esp
   1fa54:	50                   	push   %eax
   1fa55:	e8 98 10 00 00       	call   20af2 <__st>
   1fa5a:	83 c4 10             	add    $0x10,%esp
   1fa5d:	89 c3                	mov    %eax,%ebx
   1fa5f:	83 ec 0c             	sub    $0xc,%esp
   1fa62:	6a 00                	push   $0x0
   1fa64:	e8 89 10 00 00       	call   20af2 <__st>
   1fa69:	83 c4 10             	add    $0x10,%esp
   1fa6c:	8b 10                	mov    (%eax),%edx
   1fa6e:	89 13                	mov    %edx,(%ebx)
   1fa70:	8b 50 04             	mov    0x4(%eax),%edx
   1fa73:	89 53 04             	mov    %edx,0x4(%ebx)
   1fa76:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   1fa7a:	66 89 43 08          	mov    %ax,0x8(%ebx)
			return;
   1fa7e:	e9 a6 0e 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0xbb:                      // FSTP ST(i)。
			ST(code & 7) = ST(0);
   1fa83:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fa88:	83 e0 07             	and    $0x7,%eax
   1fa8b:	83 ec 0c             	sub    $0xc,%esp
   1fa8e:	50                   	push   %eax
   1fa8f:	e8 5e 10 00 00       	call   20af2 <__st>
   1fa94:	83 c4 10             	add    $0x10,%esp
   1fa97:	89 c3                	mov    %eax,%ebx
   1fa99:	83 ec 0c             	sub    $0xc,%esp
   1fa9c:	6a 00                	push   $0x0
   1fa9e:	e8 4f 10 00 00       	call   20af2 <__st>
   1faa3:	83 c4 10             	add    $0x10,%esp
   1faa6:	8b 10                	mov    (%eax),%edx
   1faa8:	89 13                	mov    %edx,(%ebx)
   1faaa:	8b 50 04             	mov    0x4(%eax),%edx
   1faad:	89 53 04             	mov    %edx,0x4(%ebx)
   1fab0:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   1fab4:	66 89 43 08          	mov    %ax,0x8(%ebx)
			fpop();
   1fab8:	e8 01 0f 00 00       	call   209be <fpop>
			return;
   1fabd:	e9 67 0e 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0xbc:                      // FUCOM ST(i)。
			fucom(PST(code & 7),PST(0));
   1fac2:	83 ec 0c             	sub    $0xc,%esp
   1fac5:	6a 00                	push   $0x0
   1fac7:	e8 26 10 00 00       	call   20af2 <__st>
   1facc:	83 c4 10             	add    $0x10,%esp
   1facf:	89 c3                	mov    %eax,%ebx
   1fad1:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fad6:	83 e0 07             	and    $0x7,%eax
   1fad9:	83 ec 0c             	sub    $0xc,%esp
   1fadc:	50                   	push   %eax
   1fadd:	e8 10 10 00 00       	call   20af2 <__st>
   1fae2:	83 c4 10             	add    $0x10,%esp
   1fae5:	83 ec 08             	sub    $0x8,%esp
   1fae8:	53                   	push   %ebx
   1fae9:	50                   	push   %eax
   1faea:	e8 43 25 00 00       	call   22032 <fucom>
   1faef:	83 c4 10             	add    $0x10,%esp
			return;
   1faf2:	e9 32 0e 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0xbd:                      // FUCOMP ST(i)。
			fucom(PST(code & 7),PST(0));
   1faf7:	83 ec 0c             	sub    $0xc,%esp
   1fafa:	6a 00                	push   $0x0
   1fafc:	e8 f1 0f 00 00       	call   20af2 <__st>
   1fb01:	83 c4 10             	add    $0x10,%esp
   1fb04:	89 c3                	mov    %eax,%ebx
   1fb06:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fb0b:	83 e0 07             	and    $0x7,%eax
   1fb0e:	83 ec 0c             	sub    $0xc,%esp
   1fb11:	50                   	push   %eax
   1fb12:	e8 db 0f 00 00       	call   20af2 <__st>
   1fb17:	83 c4 10             	add    $0x10,%esp
   1fb1a:	83 ec 08             	sub    $0x8,%esp
   1fb1d:	53                   	push   %ebx
   1fb1e:	50                   	push   %eax
   1fb1f:	e8 0e 25 00 00       	call   22032 <fucom>
   1fb24:	83 c4 10             	add    $0x10,%esp
			fpop();
   1fb27:	e8 92 0e 00 00       	call   209be <fpop>
			return;
   1fb2c:	e9 f8 0d 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0xd8:                      // FADDP ST(i), ST。
			fadd(PST(code & 7),PST(0),&tmp);
   1fb31:	83 ec 0c             	sub    $0xc,%esp
   1fb34:	6a 00                	push   $0x0
   1fb36:	e8 b7 0f 00 00       	call   20af2 <__st>
   1fb3b:	83 c4 10             	add    $0x10,%esp
   1fb3e:	89 c3                	mov    %eax,%ebx
   1fb40:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fb45:	83 e0 07             	and    $0x7,%eax
   1fb48:	83 ec 0c             	sub    $0xc,%esp
   1fb4b:	50                   	push   %eax
   1fb4c:	e8 a1 0f 00 00       	call   20af2 <__st>
   1fb51:	83 c4 10             	add    $0x10,%esp
   1fb54:	89 c2                	mov    %eax,%edx
   1fb56:	83 ec 04             	sub    $0x4,%esp
   1fb59:	8d 44 24 10          	lea    0x10(%esp),%eax
   1fb5d:	50                   	push   %eax
   1fb5e:	53                   	push   %ebx
   1fb5f:	52                   	push   %edx
   1fb60:	e8 95 1c 00 00       	call   217fa <fadd>
   1fb65:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1fb68:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fb6d:	83 e0 07             	and    $0x7,%eax
   1fb70:	83 ec 0c             	sub    $0xc,%esp
   1fb73:	50                   	push   %eax
   1fb74:	e8 79 0f 00 00       	call   20af2 <__st>
   1fb79:	83 c4 10             	add    $0x10,%esp
   1fb7c:	89 c1                	mov    %eax,%ecx
   1fb7e:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1fb82:	8b 50 04             	mov    0x4(%eax),%edx
   1fb85:	8b 00                	mov    (%eax),%eax
   1fb87:	89 01                	mov    %eax,(%ecx)
   1fb89:	89 51 04             	mov    %edx,0x4(%ecx)
   1fb8c:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fb91:	83 e0 07             	and    $0x7,%eax
   1fb94:	83 ec 0c             	sub    $0xc,%esp
   1fb97:	50                   	push   %eax
   1fb98:	e8 55 0f 00 00       	call   20af2 <__st>
   1fb9d:	83 c4 10             	add    $0x10,%esp
   1fba0:	89 c2                	mov    %eax,%edx
   1fba2:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1fba7:	66 89 42 08          	mov    %ax,0x8(%edx)
			fpop();
   1fbab:	e8 0e 0e 00 00       	call   209be <fpop>
			return;
   1fbb0:	e9 74 0d 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0xd9:                      // FMULP ST(i), ST。
			fmul(PST(code & 7),PST(0),&tmp);
   1fbb5:	83 ec 0c             	sub    $0xc,%esp
   1fbb8:	6a 00                	push   $0x0
   1fbba:	e8 33 0f 00 00       	call   20af2 <__st>
   1fbbf:	83 c4 10             	add    $0x10,%esp
   1fbc2:	89 c3                	mov    %eax,%ebx
   1fbc4:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fbc9:	83 e0 07             	and    $0x7,%eax
   1fbcc:	83 ec 0c             	sub    $0xc,%esp
   1fbcf:	50                   	push   %eax
   1fbd0:	e8 1d 0f 00 00       	call   20af2 <__st>
   1fbd5:	83 c4 10             	add    $0x10,%esp
   1fbd8:	89 c2                	mov    %eax,%edx
   1fbda:	83 ec 04             	sub    $0x4,%esp
   1fbdd:	8d 44 24 10          	lea    0x10(%esp),%eax
   1fbe1:	50                   	push   %eax
   1fbe2:	53                   	push   %ebx
   1fbe3:	52                   	push   %edx
   1fbe4:	e8 db 1d 00 00       	call   219c4 <fmul>
   1fbe9:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1fbec:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fbf1:	83 e0 07             	and    $0x7,%eax
   1fbf4:	83 ec 0c             	sub    $0xc,%esp
   1fbf7:	50                   	push   %eax
   1fbf8:	e8 f5 0e 00 00       	call   20af2 <__st>
   1fbfd:	83 c4 10             	add    $0x10,%esp
   1fc00:	89 c1                	mov    %eax,%ecx
   1fc02:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1fc06:	8b 50 04             	mov    0x4(%eax),%edx
   1fc09:	8b 00                	mov    (%eax),%eax
   1fc0b:	89 01                	mov    %eax,(%ecx)
   1fc0d:	89 51 04             	mov    %edx,0x4(%ecx)
   1fc10:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fc15:	83 e0 07             	and    $0x7,%eax
   1fc18:	83 ec 0c             	sub    $0xc,%esp
   1fc1b:	50                   	push   %eax
   1fc1c:	e8 d1 0e 00 00       	call   20af2 <__st>
   1fc21:	83 c4 10             	add    $0x10,%esp
   1fc24:	89 c2                	mov    %eax,%edx
   1fc26:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1fc2b:	66 89 42 08          	mov    %ax,0x8(%edx)
			fpop();
   1fc2f:	e8 8a 0d 00 00       	call   209be <fpop>
			return;
   1fc34:	e9 f0 0c 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0xda:                      // FCOMP ST(i)。
			fcom(PST(code & 7),PST(0));
   1fc39:	83 ec 0c             	sub    $0xc,%esp
   1fc3c:	6a 00                	push   $0x0
   1fc3e:	e8 af 0e 00 00       	call   20af2 <__st>
   1fc43:	83 c4 10             	add    $0x10,%esp
   1fc46:	89 c3                	mov    %eax,%ebx
   1fc48:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fc4d:	83 e0 07             	and    $0x7,%eax
   1fc50:	83 ec 0c             	sub    $0xc,%esp
   1fc53:	50                   	push   %eax
   1fc54:	e8 99 0e 00 00       	call   20af2 <__st>
   1fc59:	83 c4 10             	add    $0x10,%esp
   1fc5c:	83 ec 08             	sub    $0x8,%esp
   1fc5f:	53                   	push   %ebx
   1fc60:	50                   	push   %eax
   1fc61:	e8 75 23 00 00       	call   21fdb <fcom>
   1fc66:	83 c4 10             	add    $0x10,%esp
			fpop();
   1fc69:	e8 50 0d 00 00       	call   209be <fpop>
			return;
   1fc6e:	e9 b6 0c 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0xdc:                      // FSUBRP ST(i)。
			ST(code & 7).exponent ^= 0x8000;
   1fc73:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fc78:	83 e0 07             	and    $0x7,%eax
   1fc7b:	83 ec 0c             	sub    $0xc,%esp
   1fc7e:	50                   	push   %eax
   1fc7f:	e8 6e 0e 00 00       	call   20af2 <__st>
   1fc84:	83 c4 10             	add    $0x10,%esp
   1fc87:	0f b7 50 08          	movzwl 0x8(%eax),%edx
   1fc8b:	66 81 f2 00 80       	xor    $0x8000,%dx
   1fc90:	66 89 50 08          	mov    %dx,0x8(%eax)
			fadd(PST(0),PST(code & 7),&tmp);
   1fc94:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fc99:	83 e0 07             	and    $0x7,%eax
   1fc9c:	83 ec 0c             	sub    $0xc,%esp
   1fc9f:	50                   	push   %eax
   1fca0:	e8 4d 0e 00 00       	call   20af2 <__st>
   1fca5:	83 c4 10             	add    $0x10,%esp
   1fca8:	89 c3                	mov    %eax,%ebx
   1fcaa:	83 ec 0c             	sub    $0xc,%esp
   1fcad:	6a 00                	push   $0x0
   1fcaf:	e8 3e 0e 00 00       	call   20af2 <__st>
   1fcb4:	83 c4 10             	add    $0x10,%esp
   1fcb7:	89 c2                	mov    %eax,%edx
   1fcb9:	83 ec 04             	sub    $0x4,%esp
   1fcbc:	8d 44 24 10          	lea    0x10(%esp),%eax
   1fcc0:	50                   	push   %eax
   1fcc1:	53                   	push   %ebx
   1fcc2:	52                   	push   %edx
   1fcc3:	e8 32 1b 00 00       	call   217fa <fadd>
   1fcc8:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1fccb:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fcd0:	83 e0 07             	and    $0x7,%eax
   1fcd3:	83 ec 0c             	sub    $0xc,%esp
   1fcd6:	50                   	push   %eax
   1fcd7:	e8 16 0e 00 00       	call   20af2 <__st>
   1fcdc:	83 c4 10             	add    $0x10,%esp
   1fcdf:	89 c1                	mov    %eax,%ecx
   1fce1:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1fce5:	8b 50 04             	mov    0x4(%eax),%edx
   1fce8:	8b 00                	mov    (%eax),%eax
   1fcea:	89 01                	mov    %eax,(%ecx)
   1fcec:	89 51 04             	mov    %edx,0x4(%ecx)
   1fcef:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fcf4:	83 e0 07             	and    $0x7,%eax
   1fcf7:	83 ec 0c             	sub    $0xc,%esp
   1fcfa:	50                   	push   %eax
   1fcfb:	e8 f2 0d 00 00       	call   20af2 <__st>
   1fd00:	83 c4 10             	add    $0x10,%esp
   1fd03:	89 c2                	mov    %eax,%edx
   1fd05:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1fd0a:	66 89 42 08          	mov    %ax,0x8(%edx)
			fpop();
   1fd0e:	e8 ab 0c 00 00       	call   209be <fpop>
			return;
   1fd13:	e9 11 0c 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0xdd:                      // FSUBP ST(I), ST。
			real_to_real(&ST(0),&tmp);
   1fd18:	8d 5c 24 0c          	lea    0xc(%esp),%ebx
   1fd1c:	83 ec 0c             	sub    $0xc,%esp
   1fd1f:	6a 00                	push   $0x0
   1fd21:	e8 cc 0d 00 00       	call   20af2 <__st>
   1fd26:	83 c4 10             	add    $0x10,%esp
   1fd29:	8b 50 04             	mov    0x4(%eax),%edx
   1fd2c:	8b 00                	mov    (%eax),%eax
   1fd2e:	89 03                	mov    %eax,(%ebx)
   1fd30:	89 53 04             	mov    %edx,0x4(%ebx)
   1fd33:	83 ec 0c             	sub    $0xc,%esp
   1fd36:	6a 00                	push   $0x0
   1fd38:	e8 b5 0d 00 00       	call   20af2 <__st>
   1fd3d:	83 c4 10             	add    $0x10,%esp
   1fd40:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   1fd44:	66 89 44 24 14       	mov    %ax,0x14(%esp)
			tmp.exponent ^= 0x8000;
   1fd49:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1fd4e:	66 35 00 80          	xor    $0x8000,%ax
   1fd52:	66 89 44 24 14       	mov    %ax,0x14(%esp)
			fadd(PST(code & 7),&tmp,&tmp);
   1fd57:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fd5c:	83 e0 07             	and    $0x7,%eax
   1fd5f:	83 ec 0c             	sub    $0xc,%esp
   1fd62:	50                   	push   %eax
   1fd63:	e8 8a 0d 00 00       	call   20af2 <__st>
   1fd68:	83 c4 10             	add    $0x10,%esp
   1fd6b:	89 c2                	mov    %eax,%edx
   1fd6d:	83 ec 04             	sub    $0x4,%esp
   1fd70:	8d 44 24 10          	lea    0x10(%esp),%eax
   1fd74:	50                   	push   %eax
   1fd75:	8d 44 24 14          	lea    0x14(%esp),%eax
   1fd79:	50                   	push   %eax
   1fd7a:	52                   	push   %edx
   1fd7b:	e8 7a 1a 00 00       	call   217fa <fadd>
   1fd80:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1fd83:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fd88:	83 e0 07             	and    $0x7,%eax
   1fd8b:	83 ec 0c             	sub    $0xc,%esp
   1fd8e:	50                   	push   %eax
   1fd8f:	e8 5e 0d 00 00       	call   20af2 <__st>
   1fd94:	83 c4 10             	add    $0x10,%esp
   1fd97:	89 c1                	mov    %eax,%ecx
   1fd99:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1fd9d:	8b 50 04             	mov    0x4(%eax),%edx
   1fda0:	8b 00                	mov    (%eax),%eax
   1fda2:	89 01                	mov    %eax,(%ecx)
   1fda4:	89 51 04             	mov    %edx,0x4(%ecx)
   1fda7:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fdac:	83 e0 07             	and    $0x7,%eax
   1fdaf:	83 ec 0c             	sub    $0xc,%esp
   1fdb2:	50                   	push   %eax
   1fdb3:	e8 3a 0d 00 00       	call   20af2 <__st>
   1fdb8:	83 c4 10             	add    $0x10,%esp
   1fdbb:	89 c2                	mov    %eax,%edx
   1fdbd:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1fdc2:	66 89 42 08          	mov    %ax,0x8(%edx)
			fpop();
   1fdc6:	e8 f3 0b 00 00       	call   209be <fpop>
			return;
   1fdcb:	e9 59 0b 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0xde:                      // FDIVRP ST(i), ST。
			fdiv(PST(0),PST(code & 7),&tmp);
   1fdd0:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fdd5:	83 e0 07             	and    $0x7,%eax
   1fdd8:	83 ec 0c             	sub    $0xc,%esp
   1fddb:	50                   	push   %eax
   1fddc:	e8 11 0d 00 00       	call   20af2 <__st>
   1fde1:	83 c4 10             	add    $0x10,%esp
   1fde4:	89 c3                	mov    %eax,%ebx
   1fde6:	83 ec 0c             	sub    $0xc,%esp
   1fde9:	6a 00                	push   $0x0
   1fdeb:	e8 02 0d 00 00       	call   20af2 <__st>
   1fdf0:	83 c4 10             	add    $0x10,%esp
   1fdf3:	89 c2                	mov    %eax,%edx
   1fdf5:	83 ec 04             	sub    $0x4,%esp
   1fdf8:	8d 44 24 10          	lea    0x10(%esp),%eax
   1fdfc:	50                   	push   %eax
   1fdfd:	53                   	push   %ebx
   1fdfe:	52                   	push   %edx
   1fdff:	e8 4e 1e 00 00       	call   21c52 <fdiv>
   1fe04:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1fe07:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fe0c:	83 e0 07             	and    $0x7,%eax
   1fe0f:	83 ec 0c             	sub    $0xc,%esp
   1fe12:	50                   	push   %eax
   1fe13:	e8 da 0c 00 00       	call   20af2 <__st>
   1fe18:	83 c4 10             	add    $0x10,%esp
   1fe1b:	89 c1                	mov    %eax,%ecx
   1fe1d:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1fe21:	8b 50 04             	mov    0x4(%eax),%edx
   1fe24:	8b 00                	mov    (%eax),%eax
   1fe26:	89 01                	mov    %eax,(%ecx)
   1fe28:	89 51 04             	mov    %edx,0x4(%ecx)
   1fe2b:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fe30:	83 e0 07             	and    $0x7,%eax
   1fe33:	83 ec 0c             	sub    $0xc,%esp
   1fe36:	50                   	push   %eax
   1fe37:	e8 b6 0c 00 00       	call   20af2 <__st>
   1fe3c:	83 c4 10             	add    $0x10,%esp
   1fe3f:	89 c2                	mov    %eax,%edx
   1fe41:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1fe46:	66 89 42 08          	mov    %ax,0x8(%edx)
			fpop();
   1fe4a:	e8 6f 0b 00 00       	call   209be <fpop>
			return;
   1fe4f:	e9 d5 0a 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0xdf:                      // FDIVP ST(i), ST。
			fdiv(PST(code & 7),PST(0),&tmp);
   1fe54:	83 ec 0c             	sub    $0xc,%esp
   1fe57:	6a 00                	push   $0x0
   1fe59:	e8 94 0c 00 00       	call   20af2 <__st>
   1fe5e:	83 c4 10             	add    $0x10,%esp
   1fe61:	89 c3                	mov    %eax,%ebx
   1fe63:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fe68:	83 e0 07             	and    $0x7,%eax
   1fe6b:	83 ec 0c             	sub    $0xc,%esp
   1fe6e:	50                   	push   %eax
   1fe6f:	e8 7e 0c 00 00       	call   20af2 <__st>
   1fe74:	83 c4 10             	add    $0x10,%esp
   1fe77:	89 c2                	mov    %eax,%edx
   1fe79:	83 ec 04             	sub    $0x4,%esp
   1fe7c:	8d 44 24 10          	lea    0x10(%esp),%eax
   1fe80:	50                   	push   %eax
   1fe81:	53                   	push   %ebx
   1fe82:	52                   	push   %edx
   1fe83:	e8 ca 1d 00 00       	call   21c52 <fdiv>
   1fe88:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(code & 7));
   1fe8b:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1fe90:	83 e0 07             	and    $0x7,%eax
   1fe93:	83 ec 0c             	sub    $0xc,%esp
   1fe96:	50                   	push   %eax
   1fe97:	e8 56 0c 00 00       	call   20af2 <__st>
   1fe9c:	83 c4 10             	add    $0x10,%esp
   1fe9f:	89 c1                	mov    %eax,%ecx
   1fea1:	8d 44 24 0c          	lea    0xc(%esp),%eax
   1fea5:	8b 50 04             	mov    0x4(%eax),%edx
   1fea8:	8b 00                	mov    (%eax),%eax
   1feaa:	89 01                	mov    %eax,(%ecx)
   1feac:	89 51 04             	mov    %edx,0x4(%ecx)
   1feaf:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1feb4:	83 e0 07             	and    $0x7,%eax
   1feb7:	83 ec 0c             	sub    $0xc,%esp
   1feba:	50                   	push   %eax
   1febb:	e8 32 0c 00 00       	call   20af2 <__st>
   1fec0:	83 c4 10             	add    $0x10,%esp
   1fec3:	89 c2                	mov    %eax,%edx
   1fec5:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   1feca:	66 89 42 08          	mov    %ax,0x8(%edx)
			fpop();
   1fece:	e8 eb 0a 00 00       	call   209be <fpop>
			return;
   1fed3:	e9 51 0a 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0xf8:                      // FFREE ST(i)。未实现。
			printk("ffree not implemented\n\r");
   1fed8:	83 ec 0c             	sub    $0xc,%esp
   1fedb:	68 a7 50 02 00       	push   $0x250a7
   1fee0:	e8 62 8d fe ff       	call   8c47 <printk>
   1fee5:	83 c4 10             	add    $0x10,%esp
			math_abort(info,1<<(SIGILL-1));
   1fee8:	83 ec 08             	sub    $0x8,%esp
   1feeb:	6a 08                	push   $0x8
   1feed:	ff 74 24 3c          	pushl  0x3c(%esp)
   1fef1:	e8 9c 0a 00 00       	call   20992 <__math_abort>
   1fef6:	83 c4 10             	add    $0x10,%esp
			fpop();
   1fef9:	e8 c0 0a 00 00       	call   209be <fpop>
			return;
   1fefe:	e9 26 0a 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0xf9:                      // FXCH ST(i)。
			fxchg(&ST(0),&ST(code & 7));
   1ff03:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1ff08:	83 e0 07             	and    $0x7,%eax
   1ff0b:	83 ec 0c             	sub    $0xc,%esp
   1ff0e:	50                   	push   %eax
   1ff0f:	e8 de 0b 00 00       	call   20af2 <__st>
   1ff14:	83 c4 10             	add    $0x10,%esp
   1ff17:	89 c3                	mov    %eax,%ebx
   1ff19:	83 ec 0c             	sub    $0xc,%esp
   1ff1c:	6a 00                	push   $0x0
   1ff1e:	e8 cf 0b 00 00       	call   20af2 <__st>
   1ff23:	83 c4 10             	add    $0x10,%esp
   1ff26:	83 ec 08             	sub    $0x8,%esp
   1ff29:	53                   	push   %ebx
   1ff2a:	50                   	push   %eax
   1ff2b:	e8 6c 0b 00 00       	call   20a9c <fxchg>
   1ff30:	83 c4 10             	add    $0x10,%esp
			return;
   1ff33:	e9 f1 09 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0xfa:                      // FSTP ST(i)。
		case 0xfb:                      // FSTP ST(i)。
			ST(code & 7) = ST(0);
   1ff38:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1ff3d:	83 e0 07             	and    $0x7,%eax
   1ff40:	83 ec 0c             	sub    $0xc,%esp
   1ff43:	50                   	push   %eax
   1ff44:	e8 a9 0b 00 00       	call   20af2 <__st>
   1ff49:	83 c4 10             	add    $0x10,%esp
   1ff4c:	89 c3                	mov    %eax,%ebx
   1ff4e:	83 ec 0c             	sub    $0xc,%esp
   1ff51:	6a 00                	push   $0x0
   1ff53:	e8 9a 0b 00 00       	call   20af2 <__st>
   1ff58:	83 c4 10             	add    $0x10,%esp
   1ff5b:	8b 10                	mov    (%eax),%edx
   1ff5d:	89 13                	mov    %edx,(%ebx)
   1ff5f:	8b 50 04             	mov    0x4(%eax),%edx
   1ff62:	89 53 04             	mov    %edx,0x4(%ebx)
   1ff65:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   1ff69:	66 89 43 08          	mov    %ax,0x8(%ebx)
			fpop();
   1ff6d:	e8 4c 0a 00 00       	call   209be <fpop>
			return;
   1ff72:	e9 b2 09 00 00       	jmp    20929 <do_emu+0x1d5b>
	}
// 处理第2个字节位7--6是MOD、位2--0是R/M的指令，即11011,XXX，MOD，XXX，R/M形式的代码。MOD在各子程序中处理，因此这里首先
// 让代码与上0xe7（0b11100111）屏蔽掉MOD。
	switch ((code>>3) & 0xe7) {
   1ff77:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1ff7c:	66 c1 e8 03          	shr    $0x3,%ax
   1ff80:	0f b7 c0             	movzwl %ax,%eax
   1ff83:	25 e7 00 00 00       	and    $0xe7,%eax
   1ff88:	83 e8 22             	sub    $0x22,%eax
   1ff8b:	3d c5 00 00 00       	cmp    $0xc5,%eax
   1ff90:	0f 87 9c 05 00 00    	ja     20532 <do_emu+0x1964>
   1ff96:	8b 04 85 a4 54 02 00 	mov    0x254a4(,%eax,4),%eax
   1ff9d:	ff e0                	jmp    *%eax
		case 0x22:
//			put_short_real(PST(0),info,code);
                    panic("kernel/math/math_emulate.c->do_emu(),394");
   1ff9f:	83 ec 0c             	sub    $0xc,%esp
   1ffa2:	68 c0 50 02 00       	push   $0x250c0
   1ffa7:	e8 5c 8c fe ff       	call   8c08 <panic>
   1ffac:	83 c4 10             	add    $0x10,%esp
			return;
   1ffaf:	e9 75 09 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0x23:                      // FSTP - 保存单精度实数（短实数）。
			put_short_real(PST(0),info,code);
   1ffb4:	0f b7 5c 24 1e       	movzwl 0x1e(%esp),%ebx
   1ffb9:	83 ec 0c             	sub    $0xc,%esp
   1ffbc:	6a 00                	push   $0x0
   1ffbe:	e8 2f 0b 00 00       	call   20af2 <__st>
   1ffc3:	83 c4 10             	add    $0x10,%esp
   1ffc6:	83 ec 04             	sub    $0x4,%esp
   1ffc9:	53                   	push   %ebx
   1ffca:	ff 74 24 38          	pushl  0x38(%esp)
   1ffce:	50                   	push   %eax
   1ffcf:	e8 d8 12 00 00       	call   212ac <put_short_real>
   1ffd4:	83 c4 10             	add    $0x10,%esp
			fpop();
   1ffd7:	e8 e2 09 00 00       	call   209be <fpop>
			return;
   1ffdc:	e9 48 09 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0x24:                      // FLDENV - 加载协处理器状态和控制寄存器等。
			address = ea(info,code);
   1ffe1:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   1ffe6:	83 ec 08             	sub    $0x8,%esp
   1ffe9:	50                   	push   %eax
   1ffea:	ff 74 24 3c          	pushl  0x3c(%esp)
   1ffee:	e8 ae 0c 00 00       	call   20ca1 <ea>
   1fff3:	83 c4 10             	add    $0x10,%esp
   1fff6:	89 44 24 18          	mov    %eax,0x18(%esp)
			for (code = 0 ; code < 7 ; code++) {
   1fffa:	66 c7 44 24 1e 00 00 	movw   $0x0,0x1e(%esp)
   20001:	eb 39                	jmp    2003c <do_emu+0x146e>
				((long *) & I387)[code] =
   20003:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20008:	8d 90 18 04 00 00    	lea    0x418(%eax),%edx
   2000e:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20013:	c1 e0 02             	shl    $0x2,%eax
   20016:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
				   get_fs_long((unsigned long *) address);
   20019:	83 ec 0c             	sub    $0xc,%esp
   2001c:	ff 74 24 24          	pushl  0x24(%esp)
   20020:	e8 6a eb ff ff       	call   1eb8f <get_fs_long>
   20025:	83 c4 10             	add    $0x10,%esp
			fpop();
			return;
		case 0x24:                      // FLDENV - 加载协处理器状态和控制寄存器等。
			address = ea(info,code);
			for (code = 0 ; code < 7 ; code++) {
				((long *) & I387)[code] =
   20028:	89 03                	mov    %eax,(%ebx)
				   get_fs_long((unsigned long *) address);
				address += 4;
   2002a:	83 44 24 18 04       	addl   $0x4,0x18(%esp)
			put_short_real(PST(0),info,code);
			fpop();
			return;
		case 0x24:                      // FLDENV - 加载协处理器状态和控制寄存器等。
			address = ea(info,code);
			for (code = 0 ; code < 7 ; code++) {
   2002f:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20034:	83 c0 01             	add    $0x1,%eax
   20037:	66 89 44 24 1e       	mov    %ax,0x1e(%esp)
   2003c:	66 83 7c 24 1e 06    	cmpw   $0x6,0x1e(%esp)
   20042:	76 bf                	jbe    20003 <do_emu+0x1435>
				((long *) & I387)[code] =
				   get_fs_long((unsigned long *) address);
				address += 4;
			}
			return;
   20044:	e9 e0 08 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0x25:                      // FLDCW - 加载控制字。
			address = ea(info,code);
   20049:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   2004e:	83 ec 08             	sub    $0x8,%esp
   20051:	50                   	push   %eax
   20052:	ff 74 24 3c          	pushl  0x3c(%esp)
   20056:	e8 46 0c 00 00       	call   20ca1 <ea>
   2005b:	83 c4 10             	add    $0x10,%esp
   2005e:	89 44 24 18          	mov    %eax,0x18(%esp)
			*(unsigned short *) &I387.cwd =
   20062:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20067:	8d 98 18 04 00 00    	lea    0x418(%eax),%ebx
				get_fs_word((unsigned short *) address);
   2006d:	83 ec 0c             	sub    $0xc,%esp
   20070:	ff 74 24 24          	pushl  0x24(%esp)
   20074:	e8 fd ea ff ff       	call   1eb76 <get_fs_word>
   20079:	83 c4 10             	add    $0x10,%esp
				address += 4;
			}
			return;
		case 0x25:                      // FLDCW - 加载控制字。
			address = ea(info,code);
			*(unsigned short *) &I387.cwd =
   2007c:	66 89 03             	mov    %ax,(%ebx)
				get_fs_word((unsigned short *) address);
			return;
   2007f:	e9 a5 08 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0x26:                      // FSTENV - 储存协处理器状态和控制寄存器等。
			address = ea(info,code);
   20084:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20089:	83 ec 08             	sub    $0x8,%esp
   2008c:	50                   	push   %eax
   2008d:	ff 74 24 3c          	pushl  0x3c(%esp)
   20091:	e8 0b 0c 00 00       	call   20ca1 <ea>
   20096:	83 c4 10             	add    $0x10,%esp
   20099:	89 44 24 18          	mov    %eax,0x18(%esp)
			verify_area(address,28);
   2009d:	83 ec 08             	sub    $0x8,%esp
   200a0:	6a 1c                	push   $0x1c
   200a2:	ff 74 24 24          	pushl  0x24(%esp)
   200a6:	e8 f8 82 fe ff       	call   83a3 <verify_area>
   200ab:	83 c4 10             	add    $0x10,%esp
			for (code = 0 ; code < 7 ; code++) {
   200ae:	66 c7 44 24 1e 00 00 	movw   $0x0,0x1e(%esp)
   200b5:	eb 39                	jmp    200f0 <do_emu+0x1522>
				put_fs_long( ((long *) & I387)[code],
   200b7:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   200bc:	8d 90 18 04 00 00    	lea    0x418(%eax),%edx
   200c2:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   200c7:	c1 e0 02             	shl    $0x2,%eax
   200ca:	01 d0                	add    %edx,%eax
   200cc:	8b 00                	mov    (%eax),%eax
   200ce:	83 ec 08             	sub    $0x8,%esp
   200d1:	ff 74 24 20          	pushl  0x20(%esp)
   200d5:	50                   	push   %eax
   200d6:	e8 e6 ea ff ff       	call   1ebc1 <put_fs_long>
   200db:	83 c4 10             	add    $0x10,%esp
					(unsigned long *) address);
				address += 4;
   200de:	83 44 24 18 04       	addl   $0x4,0x18(%esp)
				get_fs_word((unsigned short *) address);
			return;
		case 0x26:                      // FSTENV - 储存协处理器状态和控制寄存器等。
			address = ea(info,code);
			verify_area(address,28);
			for (code = 0 ; code < 7 ; code++) {
   200e3:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   200e8:	83 c0 01             	add    $0x1,%eax
   200eb:	66 89 44 24 1e       	mov    %ax,0x1e(%esp)
   200f0:	66 83 7c 24 1e 06    	cmpw   $0x6,0x1e(%esp)
   200f6:	76 bf                	jbe    200b7 <do_emu+0x14e9>
				put_fs_long( ((long *) & I387)[code],
					(unsigned long *) address);
				address += 4;
			}
			return;
   200f8:	e9 2c 08 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0x27:                      // FSTCW - 存储控制字。
			address = ea(info,code);
   200fd:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20102:	83 ec 08             	sub    $0x8,%esp
   20105:	50                   	push   %eax
   20106:	ff 74 24 3c          	pushl  0x3c(%esp)
   2010a:	e8 92 0b 00 00       	call   20ca1 <ea>
   2010f:	83 c4 10             	add    $0x10,%esp
   20112:	89 44 24 18          	mov    %eax,0x18(%esp)
			verify_area(address,2);
   20116:	83 ec 08             	sub    $0x8,%esp
   20119:	6a 02                	push   $0x2
   2011b:	ff 74 24 24          	pushl  0x24(%esp)
   2011f:	e8 7f 82 fe ff       	call   83a3 <verify_area>
   20124:	83 c4 10             	add    $0x10,%esp
			put_fs_word(I387.cwd,(short *) address);
   20127:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   2012c:	8b 80 18 04 00 00    	mov    0x418(%eax),%eax
   20132:	98                   	cwtl   
   20133:	83 ec 08             	sub    $0x8,%esp
   20136:	ff 74 24 20          	pushl  0x20(%esp)
   2013a:	50                   	push   %eax
   2013b:	e8 65 ea ff ff       	call   1eba5 <put_fs_word>
   20140:	83 c4 10             	add    $0x10,%esp
			return;
   20143:	e9 e1 07 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0x62:                      // FIST - 存储短整形数。
			put_long_int(PST(0),info,code);
   20148:	0f b7 5c 24 1e       	movzwl 0x1e(%esp),%ebx
   2014d:	83 ec 0c             	sub    $0xc,%esp
   20150:	6a 00                	push   $0x0
   20152:	e8 9b 09 00 00       	call   20af2 <__st>
   20157:	83 c4 10             	add    $0x10,%esp
   2015a:	83 ec 04             	sub    $0x4,%esp
   2015d:	53                   	push   %ebx
   2015e:	ff 74 24 38          	pushl  0x38(%esp)
   20162:	50                   	push   %eax
   20163:	e8 23 13 00 00       	call   2148b <put_long_int>
   20168:	83 c4 10             	add    $0x10,%esp
			return;
   2016b:	e9 b9 07 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0x63:                      // FISTP - 存储短整型数。
			put_long_int(PST(0),info,code);
   20170:	0f b7 5c 24 1e       	movzwl 0x1e(%esp),%ebx
   20175:	83 ec 0c             	sub    $0xc,%esp
   20178:	6a 00                	push   $0x0
   2017a:	e8 73 09 00 00       	call   20af2 <__st>
   2017f:	83 c4 10             	add    $0x10,%esp
   20182:	83 ec 04             	sub    $0x4,%esp
   20185:	53                   	push   %ebx
   20186:	ff 74 24 38          	pushl  0x38(%esp)
   2018a:	50                   	push   %eax
   2018b:	e8 fb 12 00 00       	call   2148b <put_long_int>
   20190:	83 c4 10             	add    $0x10,%esp
			fpop();
   20193:	e8 26 08 00 00       	call   209be <fpop>
			return;
   20198:	e9 8c 07 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0x65:                      // FLD - 加载扩展（临时）实数。
			fpush();
   2019d:	e8 8b 08 00 00       	call   20a2d <fpush>
			get_temp_real(&tmp,info,code);
   201a2:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   201a7:	83 ec 04             	sub    $0x4,%esp
   201aa:	50                   	push   %eax
   201ab:	ff 74 24 38          	pushl  0x38(%esp)
   201af:	8d 44 24 18          	lea    0x18(%esp),%eax
   201b3:	50                   	push   %eax
   201b4:	e8 b0 0d 00 00       	call   20f69 <get_temp_real>
   201b9:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   201bc:	83 ec 0c             	sub    $0xc,%esp
   201bf:	6a 00                	push   $0x0
   201c1:	e8 2c 09 00 00       	call   20af2 <__st>
   201c6:	83 c4 10             	add    $0x10,%esp
   201c9:	89 c1                	mov    %eax,%ecx
   201cb:	8d 44 24 0c          	lea    0xc(%esp),%eax
   201cf:	8b 50 04             	mov    0x4(%eax),%edx
   201d2:	8b 00                	mov    (%eax),%eax
   201d4:	89 01                	mov    %eax,(%ecx)
   201d6:	89 51 04             	mov    %edx,0x4(%ecx)
   201d9:	83 ec 0c             	sub    $0xc,%esp
   201dc:	6a 00                	push   $0x0
   201de:	e8 0f 09 00 00       	call   20af2 <__st>
   201e3:	83 c4 10             	add    $0x10,%esp
   201e6:	89 c2                	mov    %eax,%edx
   201e8:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   201ed:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   201f1:	e9 33 07 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0x67:                      // FSTP - 储存扩展实数。
			put_temp_real(PST(0),info,code);
   201f6:	0f b7 5c 24 1e       	movzwl 0x1e(%esp),%ebx
   201fb:	83 ec 0c             	sub    $0xc,%esp
   201fe:	6a 00                	push   $0x0
   20200:	e8 ed 08 00 00       	call   20af2 <__st>
   20205:	83 c4 10             	add    $0x10,%esp
   20208:	83 ec 04             	sub    $0x4,%esp
   2020b:	53                   	push   %ebx
   2020c:	ff 74 24 38          	pushl  0x38(%esp)
   20210:	50                   	push   %eax
   20211:	e8 74 11 00 00       	call   2138a <put_temp_real>
   20216:	83 c4 10             	add    $0x10,%esp
			fpop();
   20219:	e8 a0 07 00 00       	call   209be <fpop>
			return;
   2021e:	e9 06 07 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0xa2:                      // FST - 储存双精度实数。
			put_long_real(PST(0),info,code);
   20223:	0f b7 5c 24 1e       	movzwl 0x1e(%esp),%ebx
   20228:	83 ec 0c             	sub    $0xc,%esp
   2022b:	6a 00                	push   $0x0
   2022d:	e8 c0 08 00 00       	call   20af2 <__st>
   20232:	83 c4 10             	add    $0x10,%esp
   20235:	83 ec 04             	sub    $0x4,%esp
   20238:	53                   	push   %ebx
   20239:	ff 74 24 38          	pushl  0x38(%esp)
   2023d:	50                   	push   %eax
   2023e:	e8 cc 10 00 00       	call   2130f <put_long_real>
   20243:	83 c4 10             	add    $0x10,%esp
			return;
   20246:	e9 de 06 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0xa3:                      // FSTP - 存储双精度实数。
			put_long_real(PST(0),info,code);
   2024b:	0f b7 5c 24 1e       	movzwl 0x1e(%esp),%ebx
   20250:	83 ec 0c             	sub    $0xc,%esp
   20253:	6a 00                	push   $0x0
   20255:	e8 98 08 00 00       	call   20af2 <__st>
   2025a:	83 c4 10             	add    $0x10,%esp
   2025d:	83 ec 04             	sub    $0x4,%esp
   20260:	53                   	push   %ebx
   20261:	ff 74 24 38          	pushl  0x38(%esp)
   20265:	50                   	push   %eax
   20266:	e8 a4 10 00 00       	call   2130f <put_long_real>
   2026b:	83 c4 10             	add    $0x10,%esp
			fpop();
   2026e:	e8 4b 07 00 00       	call   209be <fpop>
			return;
   20273:	e9 b1 06 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0xa4:                      // FRSTOR - 恢复所有108字节的寄存器内容。
			address = ea(info,code);
   20278:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   2027d:	83 ec 08             	sub    $0x8,%esp
   20280:	50                   	push   %eax
   20281:	ff 74 24 3c          	pushl  0x3c(%esp)
   20285:	e8 17 0a 00 00       	call   20ca1 <ea>
   2028a:	83 c4 10             	add    $0x10,%esp
   2028d:	89 44 24 18          	mov    %eax,0x18(%esp)
			for (code = 0 ; code < 27 ; code++) {
   20291:	66 c7 44 24 1e 00 00 	movw   $0x0,0x1e(%esp)
   20298:	eb 39                	jmp    202d3 <do_emu+0x1705>
				((long *) & I387)[code] =
   2029a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   2029f:	8d 90 18 04 00 00    	lea    0x418(%eax),%edx
   202a5:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   202aa:	c1 e0 02             	shl    $0x2,%eax
   202ad:	8d 1c 02             	lea    (%edx,%eax,1),%ebx
				   get_fs_long((unsigned long *) address);
   202b0:	83 ec 0c             	sub    $0xc,%esp
   202b3:	ff 74 24 24          	pushl  0x24(%esp)
   202b7:	e8 d3 e8 ff ff       	call   1eb8f <get_fs_long>
   202bc:	83 c4 10             	add    $0x10,%esp
			fpop();
			return;
		case 0xa4:                      // FRSTOR - 恢复所有108字节的寄存器内容。
			address = ea(info,code);
			for (code = 0 ; code < 27 ; code++) {
				((long *) & I387)[code] =
   202bf:	89 03                	mov    %eax,(%ebx)
				   get_fs_long((unsigned long *) address);
				address += 4;
   202c1:	83 44 24 18 04       	addl   $0x4,0x18(%esp)
			put_long_real(PST(0),info,code);
			fpop();
			return;
		case 0xa4:                      // FRSTOR - 恢复所有108字节的寄存器内容。
			address = ea(info,code);
			for (code = 0 ; code < 27 ; code++) {
   202c6:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   202cb:	83 c0 01             	add    $0x1,%eax
   202ce:	66 89 44 24 1e       	mov    %ax,0x1e(%esp)
   202d3:	66 83 7c 24 1e 1a    	cmpw   $0x1a,0x1e(%esp)
   202d9:	76 bf                	jbe    2029a <do_emu+0x16cc>
				((long *) & I387)[code] =
				   get_fs_long((unsigned long *) address);
				address += 4;
			}
			return;
   202db:	e9 49 06 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0xa6:                      // FSAVE - 保存所有108字节寄存器内容。
			address = ea(info,code);
   202e0:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   202e5:	83 ec 08             	sub    $0x8,%esp
   202e8:	50                   	push   %eax
   202e9:	ff 74 24 3c          	pushl  0x3c(%esp)
   202ed:	e8 af 09 00 00       	call   20ca1 <ea>
   202f2:	83 c4 10             	add    $0x10,%esp
   202f5:	89 44 24 18          	mov    %eax,0x18(%esp)
			verify_area(address,108);
   202f9:	83 ec 08             	sub    $0x8,%esp
   202fc:	6a 6c                	push   $0x6c
   202fe:	ff 74 24 24          	pushl  0x24(%esp)
   20302:	e8 9c 80 fe ff       	call   83a3 <verify_area>
   20307:	83 c4 10             	add    $0x10,%esp
			for (code = 0 ; code < 27 ; code++) {
   2030a:	66 c7 44 24 1e 00 00 	movw   $0x0,0x1e(%esp)
   20311:	eb 39                	jmp    2034c <do_emu+0x177e>
				put_fs_long( ((long *) & I387)[code],
   20313:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20318:	8d 90 18 04 00 00    	lea    0x418(%eax),%edx
   2031e:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20323:	c1 e0 02             	shl    $0x2,%eax
   20326:	01 d0                	add    %edx,%eax
   20328:	8b 00                	mov    (%eax),%eax
   2032a:	83 ec 08             	sub    $0x8,%esp
   2032d:	ff 74 24 20          	pushl  0x20(%esp)
   20331:	50                   	push   %eax
   20332:	e8 8a e8 ff ff       	call   1ebc1 <put_fs_long>
   20337:	83 c4 10             	add    $0x10,%esp
					(unsigned long *) address);
				address += 4;
   2033a:	83 44 24 18 04       	addl   $0x4,0x18(%esp)
			}
			return;
		case 0xa6:                      // FSAVE - 保存所有108字节寄存器内容。
			address = ea(info,code);
			verify_area(address,108);
			for (code = 0 ; code < 27 ; code++) {
   2033f:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20344:	83 c0 01             	add    $0x1,%eax
   20347:	66 89 44 24 1e       	mov    %ax,0x1e(%esp)
   2034c:	66 83 7c 24 1e 1a    	cmpw   $0x1a,0x1e(%esp)
   20352:	76 bf                	jbe    20313 <do_emu+0x1745>
				put_fs_long( ((long *) & I387)[code],
					(unsigned long *) address);
				address += 4;
			}
			I387.cwd = 0x037f;
   20354:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20359:	c7 80 18 04 00 00 7f 	movl   $0x37f,0x418(%eax)
   20360:	03 00 00 
			I387.swd = 0x0000;
   20363:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20368:	c7 80 1c 04 00 00 00 	movl   $0x0,0x41c(%eax)
   2036f:	00 00 00 
			I387.twd = 0x0000;
   20372:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20377:	c7 80 20 04 00 00 00 	movl   $0x0,0x420(%eax)
   2037e:	00 00 00 
			return;
   20381:	e9 a3 05 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0xa7:                      // FSTSW - 保存状态状态字。
			address = ea(info,code);
   20386:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   2038b:	83 ec 08             	sub    $0x8,%esp
   2038e:	50                   	push   %eax
   2038f:	ff 74 24 3c          	pushl  0x3c(%esp)
   20393:	e8 09 09 00 00       	call   20ca1 <ea>
   20398:	83 c4 10             	add    $0x10,%esp
   2039b:	89 44 24 18          	mov    %eax,0x18(%esp)
			verify_area(address,2);
   2039f:	83 ec 08             	sub    $0x8,%esp
   203a2:	6a 02                	push   $0x2
   203a4:	ff 74 24 24          	pushl  0x24(%esp)
   203a8:	e8 f6 7f fe ff       	call   83a3 <verify_area>
   203ad:	83 c4 10             	add    $0x10,%esp
			put_fs_word(I387.swd,(short *) address);
   203b0:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   203b5:	8b 80 1c 04 00 00    	mov    0x41c(%eax),%eax
   203bb:	98                   	cwtl   
   203bc:	83 ec 08             	sub    $0x8,%esp
   203bf:	ff 74 24 20          	pushl  0x20(%esp)
   203c3:	50                   	push   %eax
   203c4:	e8 dc e7 ff ff       	call   1eba5 <put_fs_word>
   203c9:	83 c4 10             	add    $0x10,%esp
			return;
   203cc:	e9 58 05 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0xe2:                      // FIST - 保存短整型数。
			put_short_int(PST(0),info,code);
   203d1:	0f b7 5c 24 1e       	movzwl 0x1e(%esp),%ebx
   203d6:	83 ec 0c             	sub    $0xc,%esp
   203d9:	6a 00                	push   $0x0
   203db:	e8 12 07 00 00       	call   20af2 <__st>
   203e0:	83 c4 10             	add    $0x10,%esp
   203e3:	83 ec 04             	sub    $0x4,%esp
   203e6:	53                   	push   %ebx
   203e7:	ff 74 24 38          	pushl  0x38(%esp)
   203eb:	50                   	push   %eax
   203ec:	e8 22 10 00 00       	call   21413 <put_short_int>
   203f1:	83 c4 10             	add    $0x10,%esp
			return;
   203f4:	e9 30 05 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0xe3:                      // FISTP - 保存短整型数。
			put_short_int(PST(0),info,code);
   203f9:	0f b7 5c 24 1e       	movzwl 0x1e(%esp),%ebx
   203fe:	83 ec 0c             	sub    $0xc,%esp
   20401:	6a 00                	push   $0x0
   20403:	e8 ea 06 00 00       	call   20af2 <__st>
   20408:	83 c4 10             	add    $0x10,%esp
   2040b:	83 ec 04             	sub    $0x4,%esp
   2040e:	53                   	push   %ebx
   2040f:	ff 74 24 38          	pushl  0x38(%esp)
   20413:	50                   	push   %eax
   20414:	e8 fa 0f 00 00       	call   21413 <put_short_int>
   20419:	83 c4 10             	add    $0x10,%esp
			fpop();
   2041c:	e8 9d 05 00 00       	call   209be <fpop>
			return;
   20421:	e9 03 05 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0xe4:                      // FBLD - 加载BCD类型数。
			fpush();
   20426:	e8 02 06 00 00       	call   20a2d <fpush>
			get_BCD(&tmp,info,code);
   2042b:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20430:	83 ec 04             	sub    $0x4,%esp
   20433:	50                   	push   %eax
   20434:	ff 74 24 38          	pushl  0x38(%esp)
   20438:	8d 44 24 18          	lea    0x18(%esp),%eax
   2043c:	50                   	push   %eax
   2043d:	e8 35 0d 00 00       	call   21177 <get_BCD>
   20442:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   20445:	83 ec 0c             	sub    $0xc,%esp
   20448:	6a 00                	push   $0x0
   2044a:	e8 a3 06 00 00       	call   20af2 <__st>
   2044f:	83 c4 10             	add    $0x10,%esp
   20452:	89 c1                	mov    %eax,%ecx
   20454:	8d 44 24 0c          	lea    0xc(%esp),%eax
   20458:	8b 50 04             	mov    0x4(%eax),%edx
   2045b:	8b 00                	mov    (%eax),%eax
   2045d:	89 01                	mov    %eax,(%ecx)
   2045f:	89 51 04             	mov    %edx,0x4(%ecx)
   20462:	83 ec 0c             	sub    $0xc,%esp
   20465:	6a 00                	push   $0x0
   20467:	e8 86 06 00 00       	call   20af2 <__st>
   2046c:	83 c4 10             	add    $0x10,%esp
   2046f:	89 c2                	mov    %eax,%edx
   20471:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   20476:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   2047a:	e9 aa 04 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0xe5:                      // FILD - 加载长整型数。
			fpush();
   2047f:	e8 a9 05 00 00       	call   20a2d <fpush>
			get_longlong_int(&tmp,info,code);
   20484:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20489:	83 ec 04             	sub    $0x4,%esp
   2048c:	50                   	push   %eax
   2048d:	ff 74 24 38          	pushl  0x38(%esp)
   20491:	8d 44 24 18          	lea    0x18(%esp),%eax
   20495:	50                   	push   %eax
   20496:	e8 41 0c 00 00       	call   210dc <get_longlong_int>
   2049b:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   2049e:	83 ec 0c             	sub    $0xc,%esp
   204a1:	6a 00                	push   $0x0
   204a3:	e8 4a 06 00 00       	call   20af2 <__st>
   204a8:	83 c4 10             	add    $0x10,%esp
   204ab:	89 c1                	mov    %eax,%ecx
   204ad:	8d 44 24 0c          	lea    0xc(%esp),%eax
   204b1:	8b 50 04             	mov    0x4(%eax),%edx
   204b4:	8b 00                	mov    (%eax),%eax
   204b6:	89 01                	mov    %eax,(%ecx)
   204b8:	89 51 04             	mov    %edx,0x4(%ecx)
   204bb:	83 ec 0c             	sub    $0xc,%esp
   204be:	6a 00                	push   $0x0
   204c0:	e8 2d 06 00 00       	call   20af2 <__st>
   204c5:	83 c4 10             	add    $0x10,%esp
   204c8:	89 c2                	mov    %eax,%edx
   204ca:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   204cf:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   204d3:	e9 51 04 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0xe6:                      // FBSTP - 保存BCD类型数。
			put_BCD(PST(0),info,code);
   204d8:	0f b7 5c 24 1e       	movzwl 0x1e(%esp),%ebx
   204dd:	83 ec 0c             	sub    $0xc,%esp
   204e0:	6a 00                	push   $0x0
   204e2:	e8 0b 06 00 00       	call   20af2 <__st>
   204e7:	83 c4 10             	add    $0x10,%esp
   204ea:	83 ec 04             	sub    $0x4,%esp
   204ed:	53                   	push   %ebx
   204ee:	ff 74 24 38          	pushl  0x38(%esp)
   204f2:	50                   	push   %eax
   204f3:	e8 a9 10 00 00       	call   215a1 <put_BCD>
   204f8:	83 c4 10             	add    $0x10,%esp
			fpop();
   204fb:	e8 be 04 00 00       	call   209be <fpop>
			return;
   20500:	e9 24 04 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 0xe7:                      // BISTP - 保存长整型数。
			put_longlong_int(PST(0),info,code);
   20505:	0f b7 5c 24 1e       	movzwl 0x1e(%esp),%ebx
   2050a:	83 ec 0c             	sub    $0xc,%esp
   2050d:	6a 00                	push   $0x0
   2050f:	e8 de 05 00 00       	call   20af2 <__st>
   20514:	83 c4 10             	add    $0x10,%esp
   20517:	83 ec 04             	sub    $0x4,%esp
   2051a:	53                   	push   %ebx
   2051b:	ff 74 24 38          	pushl  0x38(%esp)
   2051f:	50                   	push   %eax
   20520:	e8 dd 0f 00 00       	call   21502 <put_longlong_int>
   20525:	83 c4 10             	add    $0x10,%esp
			fpop();
   20528:	e8 91 04 00 00       	call   209be <fpop>
			return;
   2052d:	e9 f7 03 00 00       	jmp    20929 <do_emu+0x1d5b>
	}
// 下面处理第2类浮点指令。首先根据指令代码的位10--9的MF值取指定类型的数，然后根据OPA和OPB的组合值进行分别处理。即处理11011，
// MF，000,XXX，R/M形式的指令代码。
	switch (code >> 9) {
   20532:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20537:	66 c1 e8 09          	shr    $0x9,%ax
   2053b:	0f b7 c0             	movzwl %ax,%eax
   2053e:	83 f8 01             	cmp    $0x1,%eax
   20541:	74 33                	je     20576 <do_emu+0x19a8>
   20543:	83 f8 01             	cmp    $0x1,%eax
   20546:	7f 06                	jg     2054e <do_emu+0x1980>
   20548:	85 c0                	test   %eax,%eax
   2054a:	74 0e                	je     2055a <do_emu+0x198c>
   2054c:	eb 7a                	jmp    205c8 <do_emu+0x19fa>
   2054e:	83 f8 02             	cmp    $0x2,%eax
   20551:	74 3f                	je     20592 <do_emu+0x19c4>
   20553:	83 f8 04             	cmp    $0x4,%eax
   20556:	74 56                	je     205ae <do_emu+0x19e0>
   20558:	eb 6e                	jmp    205c8 <do_emu+0x19fa>
		case 0:                 // MF = 00，短实数（32位整数）。
			get_short_real(&tmp,info,code);
   2055a:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   2055f:	83 ec 04             	sub    $0x4,%esp
   20562:	50                   	push   %eax
   20563:	ff 74 24 38          	pushl  0x38(%esp)
   20567:	8d 44 24 18          	lea    0x18(%esp),%eax
   2056b:	50                   	push   %eax
   2056c:	e8 3f 09 00 00       	call   20eb0 <get_short_real>
   20571:	83 c4 10             	add    $0x10,%esp
			break;
   20574:	eb 52                	jmp    205c8 <do_emu+0x19fa>
		case 1:                 // MF = 01，短整数（32位整数）。
			get_long_int(&tmp,info,code);
   20576:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   2057b:	83 ec 04             	sub    $0x4,%esp
   2057e:	50                   	push   %eax
   2057f:	ff 74 24 38          	pushl  0x38(%esp)
   20583:	8d 44 24 18          	lea    0x18(%esp),%eax
   20587:	50                   	push   %eax
   20588:	e8 d3 0a 00 00       	call   21060 <get_long_int>
   2058d:	83 c4 10             	add    $0x10,%esp
			break;
   20590:	eb 36                	jmp    205c8 <do_emu+0x19fa>
		case 2:                 // MF = 10，长实数（64位实数）。
			get_long_real(&tmp,info,code);
   20592:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   20597:	83 ec 04             	sub    $0x4,%esp
   2059a:	50                   	push   %eax
   2059b:	ff 74 24 38          	pushl  0x38(%esp)
   2059f:	8d 44 24 18          	lea    0x18(%esp),%eax
   205a3:	50                   	push   %eax
   205a4:	e8 58 09 00 00       	call   20f01 <get_long_real>
   205a9:	83 c4 10             	add    $0x10,%esp
			break;
   205ac:	eb 1a                	jmp    205c8 <do_emu+0x19fa>
		case 4:                 // MF = 11，长整数（64位整数）！应该是case 3。
			get_short_int(&tmp,info,code);
   205ae:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   205b3:	83 ec 04             	sub    $0x4,%esp
   205b6:	50                   	push   %eax
   205b7:	ff 74 24 38          	pushl  0x38(%esp)
   205bb:	8d 44 24 18          	lea    0x18(%esp),%eax
   205bf:	50                   	push   %eax
   205c0:	e8 1e 0a 00 00       	call   20fe3 <get_short_int>
   205c5:	83 c4 10             	add    $0x10,%esp
	}
	switch ((code>>3) & 0x27) {
   205c8:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   205cd:	66 c1 e8 03          	shr    $0x3,%ax
   205d1:	0f b7 c0             	movzwl %ax,%eax
   205d4:	83 e0 27             	and    $0x27,%eax
   205d7:	83 f8 07             	cmp    $0x7,%eax
   205da:	0f 87 b6 02 00 00    	ja     20896 <do_emu+0x1cc8>
   205e0:	8b 04 85 bc 57 02 00 	mov    0x257bc(,%eax,4),%eax
   205e7:	ff e0                	jmp    *%eax
		case 0:                 // FADD。
			fadd(&tmp,PST(0),&tmp);
   205e9:	83 ec 0c             	sub    $0xc,%esp
   205ec:	6a 00                	push   $0x0
   205ee:	e8 ff 04 00 00       	call   20af2 <__st>
   205f3:	83 c4 10             	add    $0x10,%esp
   205f6:	89 c2                	mov    %eax,%edx
   205f8:	83 ec 04             	sub    $0x4,%esp
   205fb:	8d 44 24 10          	lea    0x10(%esp),%eax
   205ff:	50                   	push   %eax
   20600:	52                   	push   %edx
   20601:	8d 44 24 18          	lea    0x18(%esp),%eax
   20605:	50                   	push   %eax
   20606:	e8 ef 11 00 00       	call   217fa <fadd>
   2060b:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   2060e:	83 ec 0c             	sub    $0xc,%esp
   20611:	6a 00                	push   $0x0
   20613:	e8 da 04 00 00       	call   20af2 <__st>
   20618:	83 c4 10             	add    $0x10,%esp
   2061b:	89 c1                	mov    %eax,%ecx
   2061d:	8d 44 24 0c          	lea    0xc(%esp),%eax
   20621:	8b 50 04             	mov    0x4(%eax),%edx
   20624:	8b 00                	mov    (%eax),%eax
   20626:	89 01                	mov    %eax,(%ecx)
   20628:	89 51 04             	mov    %edx,0x4(%ecx)
   2062b:	83 ec 0c             	sub    $0xc,%esp
   2062e:	6a 00                	push   $0x0
   20630:	e8 bd 04 00 00       	call   20af2 <__st>
   20635:	83 c4 10             	add    $0x10,%esp
   20638:	89 c2                	mov    %eax,%edx
   2063a:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   2063f:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   20643:	e9 e1 02 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 1:                 // FMUL。
			fmul(&tmp,PST(0),&tmp);
   20648:	83 ec 0c             	sub    $0xc,%esp
   2064b:	6a 00                	push   $0x0
   2064d:	e8 a0 04 00 00       	call   20af2 <__st>
   20652:	83 c4 10             	add    $0x10,%esp
   20655:	89 c2                	mov    %eax,%edx
   20657:	83 ec 04             	sub    $0x4,%esp
   2065a:	8d 44 24 10          	lea    0x10(%esp),%eax
   2065e:	50                   	push   %eax
   2065f:	52                   	push   %edx
   20660:	8d 44 24 18          	lea    0x18(%esp),%eax
   20664:	50                   	push   %eax
   20665:	e8 5a 13 00 00       	call   219c4 <fmul>
   2066a:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   2066d:	83 ec 0c             	sub    $0xc,%esp
   20670:	6a 00                	push   $0x0
   20672:	e8 7b 04 00 00       	call   20af2 <__st>
   20677:	83 c4 10             	add    $0x10,%esp
   2067a:	89 c1                	mov    %eax,%ecx
   2067c:	8d 44 24 0c          	lea    0xc(%esp),%eax
   20680:	8b 50 04             	mov    0x4(%eax),%edx
   20683:	8b 00                	mov    (%eax),%eax
   20685:	89 01                	mov    %eax,(%ecx)
   20687:	89 51 04             	mov    %edx,0x4(%ecx)
   2068a:	83 ec 0c             	sub    $0xc,%esp
   2068d:	6a 00                	push   $0x0
   2068f:	e8 5e 04 00 00       	call   20af2 <__st>
   20694:	83 c4 10             	add    $0x10,%esp
   20697:	89 c2                	mov    %eax,%edx
   20699:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   2069e:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   206a2:	e9 82 02 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 2:                 // FCOM。
			fcom(&tmp,PST(0));
   206a7:	83 ec 0c             	sub    $0xc,%esp
   206aa:	6a 00                	push   $0x0
   206ac:	e8 41 04 00 00       	call   20af2 <__st>
   206b1:	83 c4 10             	add    $0x10,%esp
   206b4:	83 ec 08             	sub    $0x8,%esp
   206b7:	50                   	push   %eax
   206b8:	8d 44 24 18          	lea    0x18(%esp),%eax
   206bc:	50                   	push   %eax
   206bd:	e8 19 19 00 00       	call   21fdb <fcom>
   206c2:	83 c4 10             	add    $0x10,%esp
			return;
   206c5:	e9 5f 02 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 3:                 // FCOMP。
			fcom(&tmp,PST(0));
   206ca:	83 ec 0c             	sub    $0xc,%esp
   206cd:	6a 00                	push   $0x0
   206cf:	e8 1e 04 00 00       	call   20af2 <__st>
   206d4:	83 c4 10             	add    $0x10,%esp
   206d7:	83 ec 08             	sub    $0x8,%esp
   206da:	50                   	push   %eax
   206db:	8d 44 24 18          	lea    0x18(%esp),%eax
   206df:	50                   	push   %eax
   206e0:	e8 f6 18 00 00       	call   21fdb <fcom>
   206e5:	83 c4 10             	add    $0x10,%esp
			fpop();
   206e8:	e8 d1 02 00 00       	call   209be <fpop>
			return;
   206ed:	e9 37 02 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 4:                 // FSUB。
			tmp.exponent ^= 0x8000;
   206f2:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   206f7:	66 35 00 80          	xor    $0x8000,%ax
   206fb:	66 89 44 24 14       	mov    %ax,0x14(%esp)
			fadd(&tmp,PST(0),&tmp);
   20700:	83 ec 0c             	sub    $0xc,%esp
   20703:	6a 00                	push   $0x0
   20705:	e8 e8 03 00 00       	call   20af2 <__st>
   2070a:	83 c4 10             	add    $0x10,%esp
   2070d:	89 c2                	mov    %eax,%edx
   2070f:	83 ec 04             	sub    $0x4,%esp
   20712:	8d 44 24 10          	lea    0x10(%esp),%eax
   20716:	50                   	push   %eax
   20717:	52                   	push   %edx
   20718:	8d 44 24 18          	lea    0x18(%esp),%eax
   2071c:	50                   	push   %eax
   2071d:	e8 d8 10 00 00       	call   217fa <fadd>
   20722:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   20725:	83 ec 0c             	sub    $0xc,%esp
   20728:	6a 00                	push   $0x0
   2072a:	e8 c3 03 00 00       	call   20af2 <__st>
   2072f:	83 c4 10             	add    $0x10,%esp
   20732:	89 c1                	mov    %eax,%ecx
   20734:	8d 44 24 0c          	lea    0xc(%esp),%eax
   20738:	8b 50 04             	mov    0x4(%eax),%edx
   2073b:	8b 00                	mov    (%eax),%eax
   2073d:	89 01                	mov    %eax,(%ecx)
   2073f:	89 51 04             	mov    %edx,0x4(%ecx)
   20742:	83 ec 0c             	sub    $0xc,%esp
   20745:	6a 00                	push   $0x0
   20747:	e8 a6 03 00 00       	call   20af2 <__st>
   2074c:	83 c4 10             	add    $0x10,%esp
   2074f:	89 c2                	mov    %eax,%edx
   20751:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   20756:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   2075a:	e9 ca 01 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 5:                 // FSUBR。
			ST(0).exponent ^= 0x8000;
   2075f:	83 ec 0c             	sub    $0xc,%esp
   20762:	6a 00                	push   $0x0
   20764:	e8 89 03 00 00       	call   20af2 <__st>
   20769:	83 c4 10             	add    $0x10,%esp
   2076c:	0f b7 50 08          	movzwl 0x8(%eax),%edx
   20770:	66 81 f2 00 80       	xor    $0x8000,%dx
   20775:	66 89 50 08          	mov    %dx,0x8(%eax)
			fadd(&tmp,PST(0),&tmp);
   20779:	83 ec 0c             	sub    $0xc,%esp
   2077c:	6a 00                	push   $0x0
   2077e:	e8 6f 03 00 00       	call   20af2 <__st>
   20783:	83 c4 10             	add    $0x10,%esp
   20786:	89 c2                	mov    %eax,%edx
   20788:	83 ec 04             	sub    $0x4,%esp
   2078b:	8d 44 24 10          	lea    0x10(%esp),%eax
   2078f:	50                   	push   %eax
   20790:	52                   	push   %edx
   20791:	8d 44 24 18          	lea    0x18(%esp),%eax
   20795:	50                   	push   %eax
   20796:	e8 5f 10 00 00       	call   217fa <fadd>
   2079b:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   2079e:	83 ec 0c             	sub    $0xc,%esp
   207a1:	6a 00                	push   $0x0
   207a3:	e8 4a 03 00 00       	call   20af2 <__st>
   207a8:	83 c4 10             	add    $0x10,%esp
   207ab:	89 c1                	mov    %eax,%ecx
   207ad:	8d 44 24 0c          	lea    0xc(%esp),%eax
   207b1:	8b 50 04             	mov    0x4(%eax),%edx
   207b4:	8b 00                	mov    (%eax),%eax
   207b6:	89 01                	mov    %eax,(%ecx)
   207b8:	89 51 04             	mov    %edx,0x4(%ecx)
   207bb:	83 ec 0c             	sub    $0xc,%esp
   207be:	6a 00                	push   $0x0
   207c0:	e8 2d 03 00 00       	call   20af2 <__st>
   207c5:	83 c4 10             	add    $0x10,%esp
   207c8:	89 c2                	mov    %eax,%edx
   207ca:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   207cf:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   207d3:	e9 51 01 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 6:                 // FDIV。
			fdiv(PST(0),&tmp,&tmp);
   207d8:	83 ec 0c             	sub    $0xc,%esp
   207db:	6a 00                	push   $0x0
   207dd:	e8 10 03 00 00       	call   20af2 <__st>
   207e2:	83 c4 10             	add    $0x10,%esp
   207e5:	89 c2                	mov    %eax,%edx
   207e7:	83 ec 04             	sub    $0x4,%esp
   207ea:	8d 44 24 10          	lea    0x10(%esp),%eax
   207ee:	50                   	push   %eax
   207ef:	8d 44 24 14          	lea    0x14(%esp),%eax
   207f3:	50                   	push   %eax
   207f4:	52                   	push   %edx
   207f5:	e8 58 14 00 00       	call   21c52 <fdiv>
   207fa:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   207fd:	83 ec 0c             	sub    $0xc,%esp
   20800:	6a 00                	push   $0x0
   20802:	e8 eb 02 00 00       	call   20af2 <__st>
   20807:	83 c4 10             	add    $0x10,%esp
   2080a:	89 c1                	mov    %eax,%ecx
   2080c:	8d 44 24 0c          	lea    0xc(%esp),%eax
   20810:	8b 50 04             	mov    0x4(%eax),%edx
   20813:	8b 00                	mov    (%eax),%eax
   20815:	89 01                	mov    %eax,(%ecx)
   20817:	89 51 04             	mov    %edx,0x4(%ecx)
   2081a:	83 ec 0c             	sub    $0xc,%esp
   2081d:	6a 00                	push   $0x0
   2081f:	e8 ce 02 00 00       	call   20af2 <__st>
   20824:	83 c4 10             	add    $0x10,%esp
   20827:	89 c2                	mov    %eax,%edx
   20829:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   2082e:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   20832:	e9 f2 00 00 00       	jmp    20929 <do_emu+0x1d5b>
		case 7:                 // FDIVR。
			fdiv(&tmp,PST(0),&tmp);
   20837:	83 ec 0c             	sub    $0xc,%esp
   2083a:	6a 00                	push   $0x0
   2083c:	e8 b1 02 00 00       	call   20af2 <__st>
   20841:	83 c4 10             	add    $0x10,%esp
   20844:	89 c2                	mov    %eax,%edx
   20846:	83 ec 04             	sub    $0x4,%esp
   20849:	8d 44 24 10          	lea    0x10(%esp),%eax
   2084d:	50                   	push   %eax
   2084e:	52                   	push   %edx
   2084f:	8d 44 24 18          	lea    0x18(%esp),%eax
   20853:	50                   	push   %eax
   20854:	e8 f9 13 00 00       	call   21c52 <fdiv>
   20859:	83 c4 10             	add    $0x10,%esp
			real_to_real(&tmp,&ST(0));
   2085c:	83 ec 0c             	sub    $0xc,%esp
   2085f:	6a 00                	push   $0x0
   20861:	e8 8c 02 00 00       	call   20af2 <__st>
   20866:	83 c4 10             	add    $0x10,%esp
   20869:	89 c1                	mov    %eax,%ecx
   2086b:	8d 44 24 0c          	lea    0xc(%esp),%eax
   2086f:	8b 50 04             	mov    0x4(%eax),%edx
   20872:	8b 00                	mov    (%eax),%eax
   20874:	89 01                	mov    %eax,(%ecx)
   20876:	89 51 04             	mov    %edx,0x4(%ecx)
   20879:	83 ec 0c             	sub    $0xc,%esp
   2087c:	6a 00                	push   $0x0
   2087e:	e8 6f 02 00 00       	call   20af2 <__st>
   20883:	83 c4 10             	add    $0x10,%esp
   20886:	89 c2                	mov    %eax,%edx
   20888:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   2088d:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   20891:	e9 93 00 00 00       	jmp    20929 <do_emu+0x1d5b>
	}
// 处理形如11011,XX,1,XX，000,R/M的指令代码。
	if ((code & 0x138) == 0x100) {
   20896:	0f b7 44 24 1e       	movzwl 0x1e(%esp),%eax
   2089b:	25 38 01 00 00       	and    $0x138,%eax
   208a0:	3d 00 01 00 00       	cmp    $0x100,%eax
   208a5:	75 3c                	jne    208e3 <do_emu+0x1d15>
			fpush();
   208a7:	e8 81 01 00 00       	call   20a2d <fpush>
			real_to_real(&tmp,&ST(0));
   208ac:	83 ec 0c             	sub    $0xc,%esp
   208af:	6a 00                	push   $0x0
   208b1:	e8 3c 02 00 00       	call   20af2 <__st>
   208b6:	83 c4 10             	add    $0x10,%esp
   208b9:	89 c1                	mov    %eax,%ecx
   208bb:	8d 44 24 0c          	lea    0xc(%esp),%eax
   208bf:	8b 50 04             	mov    0x4(%eax),%edx
   208c2:	8b 00                	mov    (%eax),%eax
   208c4:	89 01                	mov    %eax,(%ecx)
   208c6:	89 51 04             	mov    %edx,0x4(%ecx)
   208c9:	83 ec 0c             	sub    $0xc,%esp
   208cc:	6a 00                	push   $0x0
   208ce:	e8 1f 02 00 00       	call   20af2 <__st>
   208d3:	83 c4 10             	add    $0x10,%esp
   208d6:	89 c2                	mov    %eax,%edx
   208d8:	0f b7 44 24 14       	movzwl 0x14(%esp),%eax
   208dd:	66 89 42 08          	mov    %ax,0x8(%edx)
			return;
   208e1:	eb 46                	jmp    20929 <do_emu+0x1d5b>
	}
// 其余均为无效指令。
	printk("Unknown math-insns: %04x:%08x %04x\n\r",CS,EIP,code);
   208e3:	0f b7 4c 24 1e       	movzwl 0x1e(%esp),%ecx
   208e8:	8b 44 24 30          	mov    0x30(%esp),%eax
   208ec:	8b 50 38             	mov    0x38(%eax),%edx
   208ef:	8b 44 24 30          	mov    0x30(%esp),%eax
   208f3:	83 c0 3c             	add    $0x3c,%eax
   208f6:	0f b7 00             	movzwl (%eax),%eax
   208f9:	0f b7 c0             	movzwl %ax,%eax
   208fc:	51                   	push   %ecx
   208fd:	52                   	push   %edx
   208fe:	50                   	push   %eax
   208ff:	68 ec 50 02 00       	push   $0x250ec
   20904:	e8 3e 83 fe ff       	call   8c47 <printk>
   20909:	83 c4 10             	add    $0x10,%esp
	math_abort(info,1<<(SIGFPE-1));
   2090c:	83 ec 08             	sub    $0x8,%esp
   2090f:	68 80 00 00 00       	push   $0x80
   20914:	ff 74 24 3c          	pushl  0x3c(%esp)
   20918:	e8 75 00 00 00       	call   20992 <__math_abort>
   2091d:	83 c4 10             	add    $0x10,%esp
   20920:	eb 07                	jmp    20929 <do_emu+0x1d5b>
	*(unsigned short *) &I387.fcs = CS;             // 保存代码段选择符。
	*(1+(unsigned short *) &I387.fcs) = code;       // 保存代码。
	EIP += 2;                                       // 指令指针指向下一个字节。
        switch (code) {
		case 0x1d0: /* fnop */          // 空操作指令FNOP
			return;
   20922:	90                   	nop
   20923:	eb 04                	jmp    20929 <do_emu+0x1d5b>
		case 0x2e9:                     // FUCOMPP - 无次序比较。
			fucom(PST(1),PST(0));
			fpop(); fpop();
			return;
		case 0x3d0: case 0x3d1:         // FNOP - 对387。！！应该是0x3e0，0x3e1。
			return;
   20925:	90                   	nop
   20926:	eb 01                	jmp    20929 <do_emu+0x1d5b>
			I387.cwd = 0x037f;
			I387.swd = 0x0000;
			I387.twd = 0x0000;
			return;
		case 0x3e4:                     // FNOP - 对80387。
			return;
   20928:	90                   	nop
			return;
	}
// 其余均为无效指令。
	printk("Unknown math-insns: %04x:%08x %04x\n\r",CS,EIP,code);
	math_abort(info,1<<(SIGFPE-1));
}
   20929:	83 c4 28             	add    $0x28,%esp
   2092c:	5b                   	pop    %ebx
   2092d:	c3                   	ret    

0002092e <math_emulate>:
// CPU异常中断int 7调用的80387仿真接口函数。
// 若当前进程没有使用过协处理器，就设置使用协处理器标志used_math，然后初始化80387的控制字、状态字和特征字。最后使用中断
// int 7调用本函数的返回地址指针作为参数调用浮点指令仿真主函数do_emu()。
// 参数____false是_orig_eip。
void math_emulate(long ___false)
{
   2092e:	83 ec 0c             	sub    $0xc,%esp
	if (!current->used_math) {
   20931:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20936:	0f b7 80 28 03 00 00 	movzwl 0x328(%eax),%eax
   2093d:	66 85 c0             	test   %ax,%ax
   20940:	75 3b                	jne    2097d <math_emulate+0x4f>
		current->used_math = 1;
   20942:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20947:	66 c7 80 28 03 00 00 	movw   $0x1,0x328(%eax)
   2094e:	01 00 
		I387.cwd = 0x037f;
   20950:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20955:	c7 80 18 04 00 00 7f 	movl   $0x37f,0x418(%eax)
   2095c:	03 00 00 
		I387.swd = 0x0000;
   2095f:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20964:	c7 80 1c 04 00 00 00 	movl   $0x0,0x41c(%eax)
   2096b:	00 00 00 
		I387.twd = 0x0000;
   2096e:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20973:	c7 80 20 04 00 00 00 	movl   $0x0,0x420(%eax)
   2097a:	00 00 00 
	}
/* &___false points to info->___orig_eip, so subtract 1 to get info */
	do_emu((struct info *) ((&___false) - 1));
   2097d:	8d 44 24 0c          	lea    0xc(%esp),%eax
   20981:	83 ec 0c             	sub    $0xc,%esp
   20984:	50                   	push   %eax
   20985:	e8 44 e2 ff ff       	call   1ebce <do_emu>
   2098a:	83 c4 10             	add    $0x10,%esp
}
   2098d:	90                   	nop
   2098e:	83 c4 0c             	add    $0xc,%esp
   20991:	c3                   	ret    

00020992 <__math_abort>:
// 终止仿真操作。
// 当处理到无效指令代码或者未实现的指令代码时，该函数首先恢复程序的原EIP，并发送指定信号给当前进程。最后将栈指针指向中断
// int 7处理过程调用本函数的返回地址，直接返回到中断处理过程中。
void __math_abort(struct info * info, unsigned int signal)
{
	EIP = ORIG_EIP;
   20992:	8b 44 24 04          	mov    0x4(%esp),%eax
   20996:	8b 50 04             	mov    0x4(%eax),%edx
   20999:	8b 44 24 04          	mov    0x4(%esp),%eax
   2099d:	89 50 38             	mov    %edx,0x38(%eax)
	current->signal |= signal;
   209a0:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   209a5:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   209ab:	8b 52 0c             	mov    0xc(%edx),%edx
   209ae:	0b 54 24 08          	or     0x8(%esp),%edx
   209b2:	89 50 0c             	mov    %edx,0xc(%eax)
	__asm__("movl %0,%%esp ; ret"::"g" ((long) info));
   209b5:	8b 44 24 04          	mov    0x4(%esp),%eax
   209b9:	89 c4                	mov    %eax,%esp
   209bb:	c3                   	ret    
}
   209bc:	90                   	nop
   209bd:	c3                   	ret    

000209be <fpop>:

// 累加器栈弹出操作。
// 将状态字TOP字段值加1，并以7取模。
static void fpop(void)
{
   209be:	83 ec 10             	sub    $0x10,%esp
	unsigned long tmp;

	tmp = I387.swd & 0xffffc7ff;
   209c1:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   209c6:	8b 80 1c 04 00 00    	mov    0x41c(%eax),%eax
   209cc:	80 e4 c7             	and    $0xc7,%ah
   209cf:	89 44 24 0c          	mov    %eax,0xc(%esp)
	I387.swd += 0x00000800;
   209d3:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   209d8:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   209de:	8b 92 1c 04 00 00    	mov    0x41c(%edx),%edx
   209e4:	81 c2 00 08 00 00    	add    $0x800,%edx
   209ea:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
	I387.swd &= 0x00003800;
   209f0:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   209f5:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   209fb:	8b 92 1c 04 00 00    	mov    0x41c(%edx),%edx
   20a01:	81 e2 00 38 00 00    	and    $0x3800,%edx
   20a07:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
	I387.swd |= tmp;
   20a0d:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20a12:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   20a18:	8b 92 1c 04 00 00    	mov    0x41c(%edx),%edx
   20a1e:	0b 54 24 0c          	or     0xc(%esp),%edx
   20a22:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
}
   20a28:	90                   	nop
   20a29:	83 c4 10             	add    $0x10,%esp
   20a2c:	c3                   	ret    

00020a2d <fpush>:

// 累加器栈入栈操作。
// 将状态字TOP字段减1（即加7），并以7取模。
static void fpush(void)
{
   20a2d:	83 ec 10             	sub    $0x10,%esp
	unsigned long tmp;

	tmp = I387.swd & 0xffffc7ff;
   20a30:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20a35:	8b 80 1c 04 00 00    	mov    0x41c(%eax),%eax
   20a3b:	80 e4 c7             	and    $0xc7,%ah
   20a3e:	89 44 24 0c          	mov    %eax,0xc(%esp)
	I387.swd += 0x00003800;
   20a42:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20a47:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   20a4d:	8b 92 1c 04 00 00    	mov    0x41c(%edx),%edx
   20a53:	81 c2 00 38 00 00    	add    $0x3800,%edx
   20a59:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
	I387.swd &= 0x00003800;
   20a5f:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20a64:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   20a6a:	8b 92 1c 04 00 00    	mov    0x41c(%edx),%edx
   20a70:	81 e2 00 38 00 00    	and    $0x3800,%edx
   20a76:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
	I387.swd |= tmp;
   20a7c:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20a81:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   20a87:	8b 92 1c 04 00 00    	mov    0x41c(%edx),%edx
   20a8d:	0b 54 24 0c          	or     0xc(%esp),%edx
   20a91:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
}
   20a97:	90                   	nop
   20a98:	83 c4 10             	add    $0x10,%esp
   20a9b:	c3                   	ret    

00020a9c <fxchg>:

// 交换两个累加器的值。
static void fxchg(temp_real_unaligned * a, temp_real_unaligned * b)
{
   20a9c:	83 ec 10             	sub    $0x10,%esp
	temp_real_unaligned c;

	c = *a;
   20a9f:	8b 44 24 14          	mov    0x14(%esp),%eax
   20aa3:	8b 10                	mov    (%eax),%edx
   20aa5:	89 54 24 06          	mov    %edx,0x6(%esp)
   20aa9:	8b 50 04             	mov    0x4(%eax),%edx
   20aac:	89 54 24 0a          	mov    %edx,0xa(%esp)
   20ab0:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   20ab4:	66 89 44 24 0e       	mov    %ax,0xe(%esp)
	*a = *b;
   20ab9:	8b 44 24 14          	mov    0x14(%esp),%eax
   20abd:	8b 54 24 18          	mov    0x18(%esp),%edx
   20ac1:	8b 0a                	mov    (%edx),%ecx
   20ac3:	89 08                	mov    %ecx,(%eax)
   20ac5:	8b 4a 04             	mov    0x4(%edx),%ecx
   20ac8:	89 48 04             	mov    %ecx,0x4(%eax)
   20acb:	0f b7 52 08          	movzwl 0x8(%edx),%edx
   20acf:	66 89 50 08          	mov    %dx,0x8(%eax)
	*b = c;
   20ad3:	8b 44 24 18          	mov    0x18(%esp),%eax
   20ad7:	8b 54 24 06          	mov    0x6(%esp),%edx
   20adb:	89 10                	mov    %edx,(%eax)
   20add:	8b 54 24 0a          	mov    0xa(%esp),%edx
   20ae1:	89 50 04             	mov    %edx,0x4(%eax)
   20ae4:	0f b7 54 24 0e       	movzwl 0xe(%esp),%edx
   20ae9:	66 89 50 08          	mov    %dx,0x8(%eax)
}
   20aed:	90                   	nop
   20aee:	83 c4 10             	add    $0x10,%esp
   20af1:	c3                   	ret    

00020af2 <__st>:

// 取ST(i)的内存指针。
// 取状态字中TOP字段值。加上指定的物理数据寄存器号并取模，最后返回ST(i)对应的指针。
static temp_real_unaligned * __st(int i)
{
	i += I387.swd >> 11;            // 取状态字中TOP字段值。
   20af2:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20af7:	8b 80 1c 04 00 00    	mov    0x41c(%eax),%eax
   20afd:	c1 f8 0b             	sar    $0xb,%eax
   20b00:	01 44 24 04          	add    %eax,0x4(%esp)
	i &= 7;
   20b04:	83 64 24 04 07       	andl   $0x7,0x4(%esp)
	return (temp_real_unaligned *) (i*10 + (char *)(I387.st_space));
   20b09:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20b0e:	8d 88 34 04 00 00    	lea    0x434(%eax),%ecx
   20b14:	8b 54 24 04          	mov    0x4(%esp),%edx
   20b18:	89 d0                	mov    %edx,%eax
   20b1a:	c1 e0 02             	shl    $0x2,%eax
   20b1d:	01 d0                	add    %edx,%eax
   20b1f:	01 c0                	add    %eax,%eax
   20b21:	01 c8                	add    %ecx,%eax
   20b23:	c3                   	ret    

00020b24 <math_error>:
// 协处理器错误中断int 16调用的处理函数。
// 当协处理器检测到自己发生错误时，就会通过ERROR引脚通知CPU。下面代码用于处理协处理器发出的出错信号。并跳转去执行math_error()
// 返回后将跳转到标号ret_from_sys_call处继续执行。
void math_error(void)
{
	__asm__("fnclex");              // 让80387清除状态字中所有异常标志位和忙位。
   20b24:	db e2                	fnclex 
	if (last_task_used_math)        // 若使用了协处理器，则设置协处理器出错信号。
   20b26:	a1 0c eb 02 00       	mov    0x2eb0c,%eax
   20b2b:	85 c0                	test   %eax,%eax
   20b2d:	74 14                	je     20b43 <math_error+0x1f>
		last_task_used_math->signal |= 1<<(SIGFPE-1);
   20b2f:	a1 0c eb 02 00       	mov    0x2eb0c,%eax
   20b34:	8b 15 0c eb 02 00    	mov    0x2eb0c,%edx
   20b3a:	8b 52 0c             	mov    0xc(%edx),%edx
   20b3d:	80 ca 80             	or     $0x80,%dl
   20b40:	89 50 0c             	mov    %edx,0xc(%eax)
}
   20b43:	90                   	nop
   20b44:	c3                   	ret    

00020b45 <get_fs_byte>:
//// 读取fs段中指定地址处的字节.
// 参数:addr - 指定的内存地址.
// %0 - (返回的字节_v);%1 - (内存地址addr)
// 返回:返回内存fs[addr]处的字节.
static inline unsigned char get_fs_byte(const char * addr)
{
   20b45:	53                   	push   %ebx
	unsigned register char _v;

	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   20b46:	8b 44 24 08          	mov    0x8(%esp),%eax
   20b4a:	64 8a 00             	mov    %fs:(%eax),%al
   20b4d:	89 c3                	mov    %eax,%ebx
	return _v;
   20b4f:	89 d8                	mov    %ebx,%eax
}
   20b51:	5b                   	pop    %ebx
   20b52:	c3                   	ret    

00020b53 <get_fs_long>:
//// 读取fs段中指定地址处的长字(4字节).
// 参数:addr - 指定的内存地址.
// %0 - (返回的长字_v);%1 - (内存地址addr)
// 返回:返回内存fs:[addr]处的长字.
static inline unsigned long get_fs_long(const unsigned long *addr)
{
   20b53:	83 ec 10             	sub    $0x10,%esp
	unsigned long _v;

	__asm__ ("movl %%fs:%1,%0":"=q" (_v):"m" (*addr)); \
   20b56:	8b 44 24 14          	mov    0x14(%esp),%eax
   20b5a:	64 8b 00             	mov    %fs:(%eax),%eax
   20b5d:	89 44 24 0c          	mov    %eax,0xc(%esp)
	return _v;
   20b61:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   20b65:	83 c4 10             	add    $0x10,%esp
   20b68:	c3                   	ret    

00020b69 <sib>:
// 取info结构中指定位置处寄存器内容。
#define REG(x) (*(long *)(__regoffset[(x)]+(char *) info))

// 求2字节寻址模式中第2操作数指示字节SIB（Scale, Index, Base）的值。
static char * sib(struct info * info, int mod)
{
   20b69:	83 ec 10             	sub    $0x10,%esp
	unsigned char ss,index,base;
	long offset = 0;
   20b6c:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   20b73:	00 

// 首先从用户代码段中取得SIB字节，然后取出各个字段位值。
	base = get_fs_byte((char *) EIP);
   20b74:	8b 44 24 14          	mov    0x14(%esp),%eax
   20b78:	8b 40 38             	mov    0x38(%eax),%eax
   20b7b:	50                   	push   %eax
   20b7c:	e8 c4 ff ff ff       	call   20b45 <get_fs_byte>
   20b81:	83 c4 04             	add    $0x4,%esp
   20b84:	88 44 24 0b          	mov    %al,0xb(%esp)
	EIP++;
   20b88:	8b 44 24 14          	mov    0x14(%esp),%eax
   20b8c:	8b 40 38             	mov    0x38(%eax),%eax
   20b8f:	8d 50 01             	lea    0x1(%eax),%edx
   20b92:	8b 44 24 14          	mov    0x14(%esp),%eax
   20b96:	89 50 38             	mov    %edx,0x38(%eax)
	ss = base >> 6;                 // 比例因子大小ss。
   20b99:	0f b6 44 24 0b       	movzbl 0xb(%esp),%eax
   20b9e:	c0 e8 06             	shr    $0x6,%al
   20ba1:	88 44 24 0a          	mov    %al,0xa(%esp)
	index = (base >> 3) & 7;        // 索引值索引代号index。
   20ba5:	0f b6 44 24 0b       	movzbl 0xb(%esp),%eax
   20baa:	c0 e8 03             	shr    $0x3,%al
   20bad:	83 e0 07             	and    $0x7,%eax
   20bb0:	88 44 24 09          	mov    %al,0x9(%esp)
	base &= 7;                      // 基地址代号base。
   20bb4:	80 64 24 0b 07       	andb   $0x7,0xb(%esp)
// 如果索引代号为0b100，表示无索引偏移值。否则索引偏移值offset=对应寄存器内容×比例因子。
	if (index == 4)
   20bb9:	80 7c 24 09 04       	cmpb   $0x4,0x9(%esp)
   20bbe:	75 0a                	jne    20bca <sib+0x61>
		offset = 0;
   20bc0:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   20bc7:	00 
   20bc8:	eb 1a                	jmp    20be4 <sib+0x7b>
	else
		offset = REG(index);
   20bca:	0f b6 44 24 09       	movzbl 0x9(%esp),%eax
   20bcf:	8b 04 85 80 e5 02 00 	mov    0x2e580(,%eax,4),%eax
   20bd6:	89 c2                	mov    %eax,%edx
   20bd8:	8b 44 24 14          	mov    0x14(%esp),%eax
   20bdc:	01 d0                	add    %edx,%eax
   20bde:	8b 00                	mov    (%eax),%eax
   20be0:	89 44 24 0c          	mov    %eax,0xc(%esp)
	offset <<= ss;
   20be4:	0f b6 44 24 0a       	movzbl 0xa(%esp),%eax
   20be9:	89 c1                	mov    %eax,%ecx
   20beb:	d3 64 24 0c          	shll   %cl,0xc(%esp)
// 如果上一MODRM字节中的MOD不为零，或者Base不等于0b101，则表示有偏移值在base指定的寄存器中。因此偏移offset需要再加上base
// 对应寄存器中的内容。
	if (mod || base != 5)
   20bef:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   20bf4:	75 07                	jne    20bfd <sib+0x94>
   20bf6:	80 7c 24 0b 05       	cmpb   $0x5,0xb(%esp)
   20bfb:	74 1a                	je     20c17 <sib+0xae>
		offset += REG(base);
   20bfd:	0f b6 44 24 0b       	movzbl 0xb(%esp),%eax
   20c02:	8b 04 85 80 e5 02 00 	mov    0x2e580(,%eax,4),%eax
   20c09:	89 c2                	mov    %eax,%edx
   20c0b:	8b 44 24 14          	mov    0x14(%esp),%eax
   20c0f:	01 d0                	add    %edx,%eax
   20c11:	8b 00                	mov    (%eax),%eax
   20c13:	01 44 24 0c          	add    %eax,0xc(%esp)
// 如果MOD=1，则表示偏移值为1字节。否则，若MOD=2，或者base=0b101，则偏移值为4字节。
	if (mod == 1) {
   20c17:	83 7c 24 18 01       	cmpl   $0x1,0x18(%esp)
   20c1c:	75 2a                	jne    20c48 <sib+0xdf>
		offset += (signed char) get_fs_byte((char *) EIP);
   20c1e:	8b 44 24 14          	mov    0x14(%esp),%eax
   20c22:	8b 40 38             	mov    0x38(%eax),%eax
   20c25:	50                   	push   %eax
   20c26:	e8 1a ff ff ff       	call   20b45 <get_fs_byte>
   20c2b:	83 c4 04             	add    $0x4,%esp
   20c2e:	0f be c0             	movsbl %al,%eax
   20c31:	01 44 24 0c          	add    %eax,0xc(%esp)
		EIP++;
   20c35:	8b 44 24 14          	mov    0x14(%esp),%eax
   20c39:	8b 40 38             	mov    0x38(%eax),%eax
   20c3c:	8d 50 01             	lea    0x1(%eax),%edx
   20c3f:	8b 44 24 14          	mov    0x14(%esp),%eax
   20c43:	89 50 38             	mov    %edx,0x38(%eax)
   20c46:	eb 33                	jmp    20c7b <sib+0x112>
	} else if (mod == 2 || base == 5) {
   20c48:	83 7c 24 18 02       	cmpl   $0x2,0x18(%esp)
   20c4d:	74 07                	je     20c56 <sib+0xed>
   20c4f:	80 7c 24 0b 05       	cmpb   $0x5,0xb(%esp)
   20c54:	75 25                	jne    20c7b <sib+0x112>
		offset += (signed) get_fs_long((unsigned long *) EIP);
   20c56:	8b 44 24 14          	mov    0x14(%esp),%eax
   20c5a:	8b 40 38             	mov    0x38(%eax),%eax
   20c5d:	50                   	push   %eax
   20c5e:	e8 f0 fe ff ff       	call   20b53 <get_fs_long>
   20c63:	83 c4 04             	add    $0x4,%esp
   20c66:	01 44 24 0c          	add    %eax,0xc(%esp)
		EIP += 4;
   20c6a:	8b 44 24 14          	mov    0x14(%esp),%eax
   20c6e:	8b 40 38             	mov    0x38(%eax),%eax
   20c71:	8d 50 04             	lea    0x4(%eax),%edx
   20c74:	8b 44 24 14          	mov    0x14(%esp),%eax
   20c78:	89 50 38             	mov    %edx,0x38(%eax)
	}
// 最后保存并返回偏移值。
	I387.foo = offset;
   20c7b:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20c80:	8b 54 24 0c          	mov    0xc(%esp),%edx
   20c84:	89 90 2c 04 00 00    	mov    %edx,0x42c(%eax)
	I387.fos = 0x17;
   20c8a:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20c8f:	c7 80 30 04 00 00 17 	movl   $0x17,0x430(%eax)
   20c96:	00 00 00 
	return (char *) offset;
   20c99:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   20c9d:	83 c4 10             	add    $0x10,%esp
   20ca0:	c3                   	ret    

00020ca1 <ea>:

// 根据指令中寻址模式字节计算有效地址值。
char * ea(struct info * info, unsigned short code)
{
   20ca1:	83 ec 2c             	sub    $0x2c,%esp
   20ca4:	8b 44 24 34          	mov    0x34(%esp),%eax
   20ca8:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	unsigned char mod,rm;
	long * tmp = &EAX;
   20cad:	8b 44 24 30          	mov    0x30(%esp),%eax
   20cb1:	83 c0 18             	add    $0x18,%eax
   20cb4:	89 44 24 18          	mov    %eax,0x18(%esp)
	int offset = 0;
   20cb8:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   20cbf:	00 

// 首先取代码中的MOD字段和R/M字段值。如果MOD=0b11，表示是单字节指令，没有偏移字段。如果R/M字段=0b100，并且MOD不为0b11，
// 表示是2字节地址模式寻址，因此调用sib()求出偏移值并返回即可。
	mod = (code >> 6) & 3;          // MOD字段。
   20cc0:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   20cc5:	66 c1 e8 06          	shr    $0x6,%ax
   20cc9:	83 e0 03             	and    $0x3,%eax
   20ccc:	88 44 24 17          	mov    %al,0x17(%esp)
	rm = code & 7;                  // R/M字段。
   20cd0:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   20cd5:	83 e0 07             	and    $0x7,%eax
   20cd8:	88 44 24 16          	mov    %al,0x16(%esp)
	if (rm == 4 && mod != 3)
   20cdc:	80 7c 24 16 04       	cmpb   $0x4,0x16(%esp)
   20ce1:	75 1e                	jne    20d01 <ea+0x60>
   20ce3:	80 7c 24 17 03       	cmpb   $0x3,0x17(%esp)
   20ce8:	74 17                	je     20d01 <ea+0x60>
		return sib(info,mod);
   20cea:	0f b6 44 24 17       	movzbl 0x17(%esp),%eax
   20cef:	50                   	push   %eax
   20cf0:	ff 74 24 34          	pushl  0x34(%esp)
   20cf4:	e8 70 fe ff ff       	call   20b69 <sib>
   20cf9:	83 c4 08             	add    $0x8,%esp
   20cfc:	e9 2b 01 00 00       	jmp    20e2c <ea+0x18b>
// 如果R/M字段为0b101，并且MOD为0，表示是单字节地址模式编码且后随32字节偏移值。于是取出用户代码中4字节偏移值，保存并返回
// 之。
	if (rm == 5 && !mod) {
   20d01:	80 7c 24 16 05       	cmpb   $0x5,0x16(%esp)
   20d06:	75 53                	jne    20d5b <ea+0xba>
   20d08:	80 7c 24 17 00       	cmpb   $0x0,0x17(%esp)
   20d0d:	75 4c                	jne    20d5b <ea+0xba>
		offset = get_fs_long((unsigned long *) EIP);
   20d0f:	8b 44 24 30          	mov    0x30(%esp),%eax
   20d13:	8b 40 38             	mov    0x38(%eax),%eax
   20d16:	50                   	push   %eax
   20d17:	e8 37 fe ff ff       	call   20b53 <get_fs_long>
   20d1c:	83 c4 04             	add    $0x4,%esp
   20d1f:	89 44 24 1c          	mov    %eax,0x1c(%esp)
		EIP += 4;
   20d23:	8b 44 24 30          	mov    0x30(%esp),%eax
   20d27:	8b 40 38             	mov    0x38(%eax),%eax
   20d2a:	8d 50 04             	lea    0x4(%eax),%edx
   20d2d:	8b 44 24 30          	mov    0x30(%esp),%eax
   20d31:	89 50 38             	mov    %edx,0x38(%eax)
		I387.foo = offset;
   20d34:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20d39:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   20d3d:	89 90 2c 04 00 00    	mov    %edx,0x42c(%eax)
		I387.fos = 0x17;
   20d43:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20d48:	c7 80 30 04 00 00 17 	movl   $0x17,0x430(%eax)
   20d4f:	00 00 00 
		return (char *) offset;
   20d52:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   20d56:	e9 d1 00 00 00       	jmp    20e2c <ea+0x18b>
	}
// 对于其余情况，则根据MOD进行处理。首先取出R/M代码对应寄存器内容的值作为指针tmp。对于MOD=0，无偏移值。对于MOD=1，代码后
// 随1字节偏移值。对于MOD=2，代码后有4字节偏移值。最后保存并返回有效地址值。
	tmp = & REG(rm);
   20d5b:	0f b6 44 24 16       	movzbl 0x16(%esp),%eax
   20d60:	8b 04 85 80 e5 02 00 	mov    0x2e580(,%eax,4),%eax
   20d67:	89 c2                	mov    %eax,%edx
   20d69:	8b 44 24 30          	mov    0x30(%esp),%eax
   20d6d:	01 d0                	add    %edx,%eax
   20d6f:	89 44 24 18          	mov    %eax,0x18(%esp)
	switch (mod) {
   20d73:	0f b6 44 24 17       	movzbl 0x17(%esp),%eax
   20d78:	83 f8 01             	cmp    $0x1,%eax
   20d7b:	74 21                	je     20d9e <ea+0xfd>
   20d7d:	83 f8 01             	cmp    $0x1,%eax
   20d80:	7f 06                	jg     20d88 <ea+0xe7>
   20d82:	85 c0                	test   %eax,%eax
   20d84:	74 0e                	je     20d94 <ea+0xf3>
   20d86:	eb 78                	jmp    20e00 <ea+0x15f>
   20d88:	83 f8 02             	cmp    $0x2,%eax
   20d8b:	74 3b                	je     20dc8 <ea+0x127>
   20d8d:	83 f8 03             	cmp    $0x3,%eax
   20d90:	74 5d                	je     20def <ea+0x14e>
   20d92:	eb 6c                	jmp    20e00 <ea+0x15f>
		case 0: offset = 0; break;
   20d94:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   20d9b:	00 
   20d9c:	eb 62                	jmp    20e00 <ea+0x15f>
		case 1:
			offset = (signed char) get_fs_byte((char *) EIP);
   20d9e:	8b 44 24 30          	mov    0x30(%esp),%eax
   20da2:	8b 40 38             	mov    0x38(%eax),%eax
   20da5:	50                   	push   %eax
   20da6:	e8 9a fd ff ff       	call   20b45 <get_fs_byte>
   20dab:	83 c4 04             	add    $0x4,%esp
   20dae:	0f be c0             	movsbl %al,%eax
   20db1:	89 44 24 1c          	mov    %eax,0x1c(%esp)
			EIP++;
   20db5:	8b 44 24 30          	mov    0x30(%esp),%eax
   20db9:	8b 40 38             	mov    0x38(%eax),%eax
   20dbc:	8d 50 01             	lea    0x1(%eax),%edx
   20dbf:	8b 44 24 30          	mov    0x30(%esp),%eax
   20dc3:	89 50 38             	mov    %edx,0x38(%eax)
			break;
   20dc6:	eb 38                	jmp    20e00 <ea+0x15f>
		case 2:
			offset = (signed) get_fs_long((unsigned long *) EIP);
   20dc8:	8b 44 24 30          	mov    0x30(%esp),%eax
   20dcc:	8b 40 38             	mov    0x38(%eax),%eax
   20dcf:	50                   	push   %eax
   20dd0:	e8 7e fd ff ff       	call   20b53 <get_fs_long>
   20dd5:	83 c4 04             	add    $0x4,%esp
   20dd8:	89 44 24 1c          	mov    %eax,0x1c(%esp)
			EIP += 4;
   20ddc:	8b 44 24 30          	mov    0x30(%esp),%eax
   20de0:	8b 40 38             	mov    0x38(%eax),%eax
   20de3:	8d 50 04             	lea    0x4(%eax),%edx
   20de6:	8b 44 24 30          	mov    0x30(%esp),%eax
   20dea:	89 50 38             	mov    %edx,0x38(%eax)
			break;
   20ded:	eb 11                	jmp    20e00 <ea+0x15f>
		case 3:
			math_abort(info,1<<(SIGILL-1));
   20def:	83 ec 08             	sub    $0x8,%esp
   20df2:	6a 08                	push   $0x8
   20df4:	ff 74 24 3c          	pushl  0x3c(%esp)
   20df8:	e8 95 fb ff ff       	call   20992 <__math_abort>
   20dfd:	83 c4 10             	add    $0x10,%esp
	}
	I387.foo = offset;
   20e00:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20e05:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   20e09:	89 90 2c 04 00 00    	mov    %edx,0x42c(%eax)
	I387.fos = 0x17;
   20e0f:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   20e14:	c7 80 30 04 00 00 17 	movl   $0x17,0x430(%eax)
   20e1b:	00 00 00 
	return offset + (char *) *tmp;
   20e1e:	8b 44 24 18          	mov    0x18(%esp),%eax
   20e22:	8b 00                	mov    (%eax),%eax
   20e24:	89 c2                	mov    %eax,%edx
   20e26:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   20e2a:	01 d0                	add    %edx,%eax
}
   20e2c:	83 c4 2c             	add    $0x2c,%esp
   20e2f:	c3                   	ret    

00020e30 <get_fs_byte>:
//// 读取fs段中指定地址处的字节.
// 参数:addr - 指定的内存地址.
// %0 - (返回的字节_v);%1 - (内存地址addr)
// 返回:返回内存fs[addr]处的字节.
static inline unsigned char get_fs_byte(const char * addr)
{
   20e30:	53                   	push   %ebx
	unsigned register char _v;

	__asm__ ("movb %%fs:%1,%0":"=q" (_v):"m" (*addr));
   20e31:	8b 44 24 08          	mov    0x8(%esp),%eax
   20e35:	64 8a 00             	mov    %fs:(%eax),%al
   20e38:	89 c3                	mov    %eax,%ebx
	return _v;
   20e3a:	89 d8                	mov    %ebx,%eax
}
   20e3c:	5b                   	pop    %ebx
   20e3d:	c3                   	ret    

00020e3e <get_fs_word>:
//// 读取fs段中指定地址处的字.
// 参数:addr - 指定的内存地址.
// %0 - (返回的字_v);%1 - (内存地址addr)
// 返回:返回内存fs:[addr]处的字.
static inline unsigned short get_fs_word(const unsigned short *addr)
{
   20e3e:	83 ec 10             	sub    $0x10,%esp
	unsigned short _v;

	__asm__ ("movw %%fs:%1,%0":"=q" (_v):"m" (*addr));
   20e41:	8b 44 24 14          	mov    0x14(%esp),%eax
   20e45:	64 66 8b 00          	mov    %fs:(%eax),%ax
   20e49:	66 89 44 24 0e       	mov    %ax,0xe(%esp)
	return _v;
   20e4e:	0f b7 44 24 0e       	movzwl 0xe(%esp),%eax
}
   20e53:	83 c4 10             	add    $0x10,%esp
   20e56:	c3                   	ret    

00020e57 <get_fs_long>:
//// 读取fs段中指定地址处的长字(4字节).
// 参数:addr - 指定的内存地址.
// %0 - (返回的长字_v);%1 - (内存地址addr)
// 返回:返回内存fs:[addr]处的长字.
static inline unsigned long get_fs_long(const unsigned long *addr)
{
   20e57:	83 ec 10             	sub    $0x10,%esp
	unsigned long _v;

	__asm__ ("movl %%fs:%1,%0":"=q" (_v):"m" (*addr)); \
   20e5a:	8b 44 24 14          	mov    0x14(%esp),%eax
   20e5e:	64 8b 00             	mov    %fs:(%eax),%eax
   20e61:	89 44 24 0c          	mov    %eax,0xc(%esp)
	return _v;
   20e65:	8b 44 24 0c          	mov    0xc(%esp),%eax
}
   20e69:	83 c4 10             	add    $0x10,%esp
   20e6c:	c3                   	ret    

00020e6d <put_fs_byte>:

//// 将一字节存放在fs段中指定内存地址处.
// 参数:val - 字节值;addr - 内存地址.
// %0 - 寄存器(字节值val);%1 - (内存地址addr).
static inline void put_fs_byte(char val,char *addr)
{
   20e6d:	83 ec 04             	sub    $0x4,%esp
   20e70:	8b 44 24 08          	mov    0x8(%esp),%eax
   20e74:	88 04 24             	mov    %al,(%esp)
__asm__ ("movb %0,%%fs:%1"::"q" (val),"m" (*addr));
   20e77:	0f b6 04 24          	movzbl (%esp),%eax
   20e7b:	8b 54 24 0c          	mov    0xc(%esp),%edx
   20e7f:	64 88 02             	mov    %al,%fs:(%edx)
}
   20e82:	90                   	nop
   20e83:	83 c4 04             	add    $0x4,%esp
   20e86:	c3                   	ret    

00020e87 <put_fs_word>:

//// 将一字存放在fs段中指定内存地址处.
// 参数:val - 字值;addr - 内存地址.
// %0 - 寄存器(字值val);%1 - (内存地址addr).
static inline void put_fs_word(short val,short * addr)
{
   20e87:	83 ec 04             	sub    $0x4,%esp
   20e8a:	8b 44 24 08          	mov    0x8(%esp),%eax
   20e8e:	66 89 04 24          	mov    %ax,(%esp)
__asm__ ("movw %0,%%fs:%1"::"q" (val),"m" (*addr));
   20e92:	0f b7 04 24          	movzwl (%esp),%eax
   20e96:	8b 54 24 0c          	mov    0xc(%esp),%edx
   20e9a:	64 66 89 02          	mov    %ax,%fs:(%edx)
}
   20e9e:	90                   	nop
   20e9f:	83 c4 04             	add    $0x4,%esp
   20ea2:	c3                   	ret    

00020ea3 <put_fs_long>:
//// 将一长字存放在fs段中指定内存地址处.
// 参数:val - 长字值;addr - 内存地址.
// %0 - 寄存器(长字值val);%1 - (内存地址addr).
static inline void put_fs_long(unsigned long val,unsigned long * addr)
{
__asm__ ("movl %0,%%fs:%1"::"q" (val),"m" (*addr));
   20ea3:	8b 44 24 04          	mov    0x4(%esp),%eax
   20ea7:	8b 54 24 08          	mov    0x8(%esp),%edx
   20eab:	64 89 02             	mov    %eax,%fs:(%edx)
}
   20eae:	90                   	nop
   20eaf:	c3                   	ret    

00020eb0 <get_short_real>:
// 根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得短实数所在有效地址（math/ea.c），然后从用户
// 数据区读取相应实数值。最后把用户短实数转换成临时实数（math/convert.c）。
// 参数：tmp - 转换成临时实数后的指针；info - info结构指针；code - 指令代码。
void get_short_real(temp_real * tmp,
	struct info * info, unsigned short code)
{
   20eb0:	83 ec 2c             	sub    $0x2c,%esp
   20eb3:	8b 44 24 38          	mov    0x38(%esp),%eax
   20eb7:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;
	short_real sr;

	addr = ea(info,code);                           // 计算有效地址。
   20ebc:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   20ec1:	83 ec 08             	sub    $0x8,%esp
   20ec4:	50                   	push   %eax
   20ec5:	ff 74 24 40          	pushl  0x40(%esp)
   20ec9:	e8 d3 fd ff ff       	call   20ca1 <ea>
   20ece:	83 c4 10             	add    $0x10,%esp
   20ed1:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	sr = get_fs_long((unsigned long *) addr);       // 取用户数据区中的值。
   20ed5:	83 ec 0c             	sub    $0xc,%esp
   20ed8:	ff 74 24 28          	pushl  0x28(%esp)
   20edc:	e8 76 ff ff ff       	call   20e57 <get_fs_long>
   20ee1:	83 c4 10             	add    $0x10,%esp
   20ee4:	89 44 24 18          	mov    %eax,0x18(%esp)
	short_to_temp(&sr,tmp);                         // 转换成临时实数格式。
   20ee8:	83 ec 08             	sub    $0x8,%esp
   20eeb:	ff 74 24 38          	pushl  0x38(%esp)
   20eef:	8d 44 24 24          	lea    0x24(%esp),%eax
   20ef3:	50                   	push   %eax
   20ef4:	e8 54 11 00 00       	call   2204d <short_to_temp>
   20ef9:	83 c4 10             	add    $0x10,%esp
}
   20efc:	90                   	nop
   20efd:	83 c4 2c             	add    $0x2c,%esp
   20f00:	c3                   	ret    

00020f01 <get_long_real>:
// 首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得长实数所在有效地址（math/ec.c），然后从
// 用户数据区读取相应实数值。最后把用户实数值转换成临时实数（math/convert.c）。
// 参数：tmp - 转换成临时实数后的指针；info - info结构指针；code - 指令代码。
void get_long_real(temp_real * tmp,
	struct info * info, unsigned short code)
{
   20f01:	83 ec 2c             	sub    $0x2c,%esp
   20f04:	8b 44 24 38          	mov    0x38(%esp),%eax
   20f08:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;
	long_real lr;

	addr = ea(info,code);                           // 取指令中的有效地址。
   20f0d:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   20f12:	83 ec 08             	sub    $0x8,%esp
   20f15:	50                   	push   %eax
   20f16:	ff 74 24 40          	pushl  0x40(%esp)
   20f1a:	e8 82 fd ff ff       	call   20ca1 <ea>
   20f1f:	83 c4 10             	add    $0x10,%esp
   20f22:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	lr.a = get_fs_long((unsigned long *) addr);     // 取长8字节实数。
   20f26:	83 ec 0c             	sub    $0xc,%esp
   20f29:	ff 74 24 28          	pushl  0x28(%esp)
   20f2d:	e8 25 ff ff ff       	call   20e57 <get_fs_long>
   20f32:	83 c4 10             	add    $0x10,%esp
   20f35:	89 44 24 14          	mov    %eax,0x14(%esp)
	lr.b = get_fs_long(1 + (unsigned long *) addr); // 转换成临时实数格式。
   20f39:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   20f3d:	83 c0 04             	add    $0x4,%eax
   20f40:	83 ec 0c             	sub    $0xc,%esp
   20f43:	50                   	push   %eax
   20f44:	e8 0e ff ff ff       	call   20e57 <get_fs_long>
   20f49:	83 c4 10             	add    $0x10,%esp
   20f4c:	89 44 24 18          	mov    %eax,0x18(%esp)
	long_to_temp(&lr,tmp);
   20f50:	83 ec 08             	sub    $0x8,%esp
   20f53:	ff 74 24 38          	pushl  0x38(%esp)
   20f57:	8d 44 24 20          	lea    0x20(%esp),%eax
   20f5b:	50                   	push   %eax
   20f5c:	e8 91 11 00 00       	call   220f2 <long_to_temp>
   20f61:	83 c4 10             	add    $0x10,%esp
}
   20f64:	90                   	nop
   20f65:	83 c4 2c             	add    $0x2c,%esp
   20f68:	c3                   	ret    

00020f69 <get_temp_real>:
// 首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得临时实数所在有效地址（math/ea.c），然后
// 从用户数据区读取相应临时实数值。
// 参数：tmp - 转换成临时实数后的指针；info - info结构指针；code - 指令代码。
void get_temp_real(temp_real * tmp,
	struct info * info, unsigned short code)
{
   20f69:	83 ec 2c             	sub    $0x2c,%esp
   20f6c:	8b 44 24 38          	mov    0x38(%esp),%eax
   20f70:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;

	addr = ea(info,code);           // 取指令中的有效地址值。
   20f75:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   20f7a:	83 ec 08             	sub    $0x8,%esp
   20f7d:	50                   	push   %eax
   20f7e:	ff 74 24 40          	pushl  0x40(%esp)
   20f82:	e8 1a fd ff ff       	call   20ca1 <ea>
   20f87:	83 c4 10             	add    $0x10,%esp
   20f8a:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	tmp->a = get_fs_long((unsigned long *) addr);
   20f8e:	83 ec 0c             	sub    $0xc,%esp
   20f91:	ff 74 24 28          	pushl  0x28(%esp)
   20f95:	e8 bd fe ff ff       	call   20e57 <get_fs_long>
   20f9a:	83 c4 10             	add    $0x10,%esp
   20f9d:	89 c2                	mov    %eax,%edx
   20f9f:	8b 44 24 30          	mov    0x30(%esp),%eax
   20fa3:	89 10                	mov    %edx,(%eax)
	tmp->b = get_fs_long(1 + (unsigned long *) addr);
   20fa5:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   20fa9:	83 c0 04             	add    $0x4,%eax
   20fac:	83 ec 0c             	sub    $0xc,%esp
   20faf:	50                   	push   %eax
   20fb0:	e8 a2 fe ff ff       	call   20e57 <get_fs_long>
   20fb5:	83 c4 10             	add    $0x10,%esp
   20fb8:	89 c2                	mov    %eax,%edx
   20fba:	8b 44 24 30          	mov    0x30(%esp),%eax
   20fbe:	89 50 04             	mov    %edx,0x4(%eax)
	tmp->exponent = get_fs_word(4 + (unsigned short *) addr);
   20fc1:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   20fc5:	83 c0 08             	add    $0x8,%eax
   20fc8:	83 ec 0c             	sub    $0xc,%esp
   20fcb:	50                   	push   %eax
   20fcc:	e8 6d fe ff ff       	call   20e3e <get_fs_word>
   20fd1:	83 c4 10             	add    $0x10,%esp
   20fd4:	89 c2                	mov    %eax,%edx
   20fd6:	8b 44 24 30          	mov    0x30(%esp),%eax
   20fda:	66 89 50 08          	mov    %dx,0x8(%eax)
}
   20fde:	90                   	nop
   20fdf:	83 c4 2c             	add    $0x2c,%esp
   20fe2:	c3                   	ret    

00020fe3 <get_short_int>:
// 该函数首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得短整数所在有效地址（math/ea.c）
// 然后从用户数据区读取相应整数值，并保存为临时整数格式。最后把临时整数值转换成临时实数（math/convert.c）。
// 参数：tmp - 转换成临时实数后的指针；info - info结构指针；code - 指令代码。
void get_short_int(temp_real * tmp,
	struct info * info, unsigned short code)
{
   20fe3:	83 ec 2c             	sub    $0x2c,%esp
   20fe6:	8b 44 24 38          	mov    0x38(%esp),%eax
   20fea:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;
	temp_int ti;

	addr = ea(info,code);           // 取指令中的有效地址值。
   20fef:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   20ff4:	83 ec 08             	sub    $0x8,%esp
   20ff7:	50                   	push   %eax
   20ff8:	ff 74 24 40          	pushl  0x40(%esp)
   20ffc:	e8 a0 fc ff ff       	call   20ca1 <ea>
   21001:	83 c4 10             	add    $0x10,%esp
   21004:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	ti.a = (signed short) get_fs_word((unsigned short *) addr);
   21008:	83 ec 0c             	sub    $0xc,%esp
   2100b:	ff 74 24 28          	pushl  0x28(%esp)
   2100f:	e8 2a fe ff ff       	call   20e3e <get_fs_word>
   21014:	83 c4 10             	add    $0x10,%esp
   21017:	98                   	cwtl   
   21018:	89 44 24 10          	mov    %eax,0x10(%esp)
	ti.b = 0;
   2101c:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
   21023:	00 
	if (ti.sign = (ti.a < 0))       // 若是负数，则设置临时整数符号位。
   21024:	8b 44 24 10          	mov    0x10(%esp),%eax
   21028:	c1 e8 1f             	shr    $0x1f,%eax
   2102b:	0f b6 c0             	movzbl %al,%eax
   2102e:	66 89 44 24 18       	mov    %ax,0x18(%esp)
   21033:	0f b7 44 24 18       	movzwl 0x18(%esp),%eax
   21038:	66 85 c0             	test   %ax,%ax
   2103b:	74 0a                	je     21047 <get_short_int+0x64>
		ti.a = - ti.a;          // 临时整数“尾数”部分为无符号数。
   2103d:	8b 44 24 10          	mov    0x10(%esp),%eax
   21041:	f7 d8                	neg    %eax
   21043:	89 44 24 10          	mov    %eax,0x10(%esp)
	int_to_real(&ti,tmp);           // 把临时整数转换成临时实数格式。
   21047:	83 ec 08             	sub    $0x8,%esp
   2104a:	ff 74 24 38          	pushl  0x38(%esp)
   2104e:	8d 44 24 1c          	lea    0x1c(%esp),%eax
   21052:	50                   	push   %eax
   21053:	e8 53 16 00 00       	call   226ab <int_to_real>
   21058:	83 c4 10             	add    $0x10,%esp
}
   2105b:	90                   	nop
   2105c:	83 c4 2c             	add    $0x2c,%esp
   2105f:	c3                   	ret    

00021060 <get_long_int>:
// 首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得长整数所在有效地址（math/ea.c），然后从
// 用户数据区读取相应整数值，并保存为临时整数格式。最后把临时整数值转换成临时实数（math/convert.c）。
// 参数：tmp - 转换成临时实数后的指针；info - info结构指针；code - 指令代码。
void get_long_int(temp_real * tmp,
	struct info * info, unsigned short code)
{
   21060:	83 ec 2c             	sub    $0x2c,%esp
   21063:	8b 44 24 38          	mov    0x38(%esp),%eax
   21067:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;
	temp_int ti;

	addr = ea(info,code);           // 取指令中的有效地址值。
   2106c:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   21071:	83 ec 08             	sub    $0x8,%esp
   21074:	50                   	push   %eax
   21075:	ff 74 24 40          	pushl  0x40(%esp)
   21079:	e8 23 fc ff ff       	call   20ca1 <ea>
   2107e:	83 c4 10             	add    $0x10,%esp
   21081:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	ti.a = get_fs_long((unsigned long *) addr);
   21085:	83 ec 0c             	sub    $0xc,%esp
   21088:	ff 74 24 28          	pushl  0x28(%esp)
   2108c:	e8 c6 fd ff ff       	call   20e57 <get_fs_long>
   21091:	83 c4 10             	add    $0x10,%esp
   21094:	89 44 24 10          	mov    %eax,0x10(%esp)
	ti.b = 0;
   21098:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
   2109f:	00 
	if (ti.sign = (ti.a < 0))       // 若是负数，则设置临时整数符号位。
   210a0:	8b 44 24 10          	mov    0x10(%esp),%eax
   210a4:	c1 e8 1f             	shr    $0x1f,%eax
   210a7:	0f b6 c0             	movzbl %al,%eax
   210aa:	66 89 44 24 18       	mov    %ax,0x18(%esp)
   210af:	0f b7 44 24 18       	movzwl 0x18(%esp),%eax
   210b4:	66 85 c0             	test   %ax,%ax
   210b7:	74 0a                	je     210c3 <get_long_int+0x63>
		ti.a = - ti.a;          // 临时整数“尾数”部分为无符号数。
   210b9:	8b 44 24 10          	mov    0x10(%esp),%eax
   210bd:	f7 d8                	neg    %eax
   210bf:	89 44 24 10          	mov    %eax,0x10(%esp)
	int_to_real(&ti,tmp);           // 把临时整数转换成临时实数格式。
   210c3:	83 ec 08             	sub    $0x8,%esp
   210c6:	ff 74 24 38          	pushl  0x38(%esp)
   210ca:	8d 44 24 1c          	lea    0x1c(%esp),%eax
   210ce:	50                   	push   %eax
   210cf:	e8 d7 15 00 00       	call   226ab <int_to_real>
   210d4:	83 c4 10             	add    $0x10,%esp
}
   210d7:	90                   	nop
   210d8:	83 c4 2c             	add    $0x2c,%esp
   210db:	c3                   	ret    

000210dc <get_longlong_int>:
// 首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得64位长整数所有有效地址（math/ea.c），
// 然后从用户数据区读取相应整数值，并保存为临时整数格式。最后再把临时整数值转换成临时实数（math/convert.c）。
// 参数：tmp - 转换成临时实数后的指针；info - info结构指针；code - 指令代码。
void get_longlong_int(temp_real * tmp,
	struct info * info, unsigned short code)
{
   210dc:	83 ec 2c             	sub    $0x2c,%esp
   210df:	8b 44 24 38          	mov    0x38(%esp),%eax
   210e3:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;
	temp_int ti;

	addr = ea(info,code);                           // 取指令中的有效地址值。
   210e8:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   210ed:	83 ec 08             	sub    $0x8,%esp
   210f0:	50                   	push   %eax
   210f1:	ff 74 24 40          	pushl  0x40(%esp)
   210f5:	e8 a7 fb ff ff       	call   20ca1 <ea>
   210fa:	83 c4 10             	add    $0x10,%esp
   210fd:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	ti.a = get_fs_long((unsigned long *) addr);     // 取用户64位长整数。
   21101:	83 ec 0c             	sub    $0xc,%esp
   21104:	ff 74 24 28          	pushl  0x28(%esp)
   21108:	e8 4a fd ff ff       	call   20e57 <get_fs_long>
   2110d:	83 c4 10             	add    $0x10,%esp
   21110:	89 44 24 10          	mov    %eax,0x10(%esp)
	ti.b = get_fs_long(1 + (unsigned long *) addr);
   21114:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   21118:	83 c0 04             	add    $0x4,%eax
   2111b:	83 ec 0c             	sub    $0xc,%esp
   2111e:	50                   	push   %eax
   2111f:	e8 33 fd ff ff       	call   20e57 <get_fs_long>
   21124:	83 c4 10             	add    $0x10,%esp
   21127:	89 44 24 14          	mov    %eax,0x14(%esp)
	if (ti.sign = (ti.b < 0))                       // 若是负数则设置临时整数符号位。
   2112b:	8b 44 24 14          	mov    0x14(%esp),%eax
   2112f:	c1 e8 1f             	shr    $0x1f,%eax
   21132:	0f b6 c0             	movzbl %al,%eax
   21135:	66 89 44 24 18       	mov    %ax,0x18(%esp)
   2113a:	0f b7 44 24 18       	movzwl 0x18(%esp),%eax
   2113f:	66 85 c0             	test   %ax,%ax
   21142:	74 1a                	je     2115e <get_longlong_int+0x82>
		__asm__("notl %0 ; notl %1\n\t"         // 同时取反加1和进位调整。
			"addl $1,%0 ; adcl $0,%1"
			:"=r" (ti.a),"=r" (ti.b)
			:"0" (ti.a),"1" (ti.b));
   21144:	8b 54 24 10          	mov    0x10(%esp),%edx
   21148:	8b 44 24 14          	mov    0x14(%esp),%eax

	addr = ea(info,code);                           // 取指令中的有效地址值。
	ti.a = get_fs_long((unsigned long *) addr);     // 取用户64位长整数。
	ti.b = get_fs_long(1 + (unsigned long *) addr);
	if (ti.sign = (ti.b < 0))                       // 若是负数则设置临时整数符号位。
		__asm__("notl %0 ; notl %1\n\t"         // 同时取反加1和进位调整。
   2114c:	f7 d2                	not    %edx
   2114e:	f7 d0                	not    %eax
   21150:	83 c2 01             	add    $0x1,%edx
   21153:	83 d0 00             	adc    $0x0,%eax
   21156:	89 54 24 10          	mov    %edx,0x10(%esp)
   2115a:	89 44 24 14          	mov    %eax,0x14(%esp)
			"addl $1,%0 ; adcl $0,%1"
			:"=r" (ti.a),"=r" (ti.b)
			:"0" (ti.a),"1" (ti.b));
	int_to_real(&ti,tmp);                           // 把临时整数转换成临时实数格式。
   2115e:	83 ec 08             	sub    $0x8,%esp
   21161:	ff 74 24 38          	pushl  0x38(%esp)
   21165:	8d 44 24 1c          	lea    0x1c(%esp),%eax
   21169:	50                   	push   %eax
   2116a:	e8 3c 15 00 00       	call   226ab <int_to_real>
   2116f:	83 c4 10             	add    $0x10,%esp
}
   21172:	90                   	nop
   21173:	83 c4 2c             	add    $0x2c,%esp
   21176:	c3                   	ret    

00021177 <get_BCD>:
// 取用户内存中的BCD码数值并转换成临时实数格式。
// 该函数首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得BCD码所在有效地址（math/ea.c），
// 然后从用户数据区读取10字节相应BCD码值（其中1字节用于符号），同时转换成临时整数形式。最后把临时整数值转换成临时实数。
// 参数：tmp - 转换成临时实数后的指针；info - info结构指针；code - 指令代码。
void get_BCD(temp_real * tmp, struct info * info, unsigned short code)
{
   21177:	53                   	push   %ebx
   21178:	83 ec 38             	sub    $0x38,%esp
   2117b:	8b 44 24 48          	mov    0x48(%esp),%eax
   2117f:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	unsigned char c;

// 取得BCD码数值所在内存有效地址。然后从最后1个BCD码字节（最高有效位）开始处理。
// 先取得BCD码数值的符号位，并设置临时整数的符号位。然后把9字节的BCD码值转换成临时整数格式，最后把临时整数值转换成临时
// 实数。
	addr = ea(info,code);                   // 取有效地址。
   21184:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   21189:	83 ec 08             	sub    $0x8,%esp
   2118c:	50                   	push   %eax
   2118d:	ff 74 24 50          	pushl  0x50(%esp)
   21191:	e8 0b fb ff ff       	call   20ca1 <ea>
   21196:	83 c4 10             	add    $0x10,%esp
   21199:	89 44 24 28          	mov    %eax,0x28(%esp)
	addr += 9;                              // 指向最后一个（第10个）字节。
   2119d:	83 44 24 28 09       	addl   $0x9,0x28(%esp)
	i.sign = 0x80 & get_fs_byte(addr--);    // 取其中符号位。
   211a2:	8b 44 24 28          	mov    0x28(%esp),%eax
   211a6:	8d 50 ff             	lea    -0x1(%eax),%edx
   211a9:	89 54 24 28          	mov    %edx,0x28(%esp)
   211ad:	83 ec 0c             	sub    $0xc,%esp
   211b0:	50                   	push   %eax
   211b1:	e8 7a fc ff ff       	call   20e30 <get_fs_byte>
   211b6:	83 c4 10             	add    $0x10,%esp
   211b9:	0f b6 c0             	movzbl %al,%eax
   211bc:	66 25 80 00          	and    $0x80,%ax
   211c0:	66 89 44 24 20       	mov    %ax,0x20(%esp)
	i.a = i.b = 0;
   211c5:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   211cc:	00 
   211cd:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   211d1:	89 44 24 18          	mov    %eax,0x18(%esp)
	for (k = 0; k < 9; k++) {               // 转换成临时整数格式。
   211d5:	c7 44 24 2c 00 00 00 	movl   $0x0,0x2c(%esp)
   211dc:	00 
   211dd:	e9 a5 00 00 00       	jmp    21287 <get_BCD+0x110>
		c = get_fs_byte(addr--);
   211e2:	8b 44 24 28          	mov    0x28(%esp),%eax
   211e6:	8d 50 ff             	lea    -0x1(%eax),%edx
   211e9:	89 54 24 28          	mov    %edx,0x28(%esp)
   211ed:	83 ec 0c             	sub    $0xc,%esp
   211f0:	50                   	push   %eax
   211f1:	e8 3a fc ff ff       	call   20e30 <get_fs_byte>
   211f6:	83 c4 10             	add    $0x10,%esp
   211f9:	88 44 24 27          	mov    %al,0x27(%esp)
		MUL10(i.a, i.b);
   211fd:	8b 44 24 18          	mov    0x18(%esp),%eax
   21201:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   21205:	01 c0                	add    %eax,%eax
   21207:	11 d2                	adc    %edx,%edx
   21209:	89 c1                	mov    %eax,%ecx
   2120b:	89 d3                	mov    %edx,%ebx
   2120d:	01 c0                	add    %eax,%eax
   2120f:	11 d2                	adc    %edx,%edx
   21211:	01 c0                	add    %eax,%eax
   21213:	11 d2                	adc    %edx,%edx
   21215:	01 c8                	add    %ecx,%eax
   21217:	11 da                	adc    %ebx,%edx
   21219:	89 44 24 18          	mov    %eax,0x18(%esp)
   2121d:	89 54 24 1c          	mov    %edx,0x1c(%esp)
		ADD64((c>>4), i.a, i.b);
   21221:	8b 54 24 18          	mov    0x18(%esp),%edx
   21225:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   21229:	0f b6 4c 24 27       	movzbl 0x27(%esp),%ecx
   2122e:	c0 e9 04             	shr    $0x4,%cl
   21231:	0f b6 c9             	movzbl %cl,%ecx
   21234:	01 ca                	add    %ecx,%edx
   21236:	83 d0 00             	adc    $0x0,%eax
   21239:	89 54 24 18          	mov    %edx,0x18(%esp)
   2123d:	89 44 24 1c          	mov    %eax,0x1c(%esp)
		MUL10(i.a, i.b);
   21241:	8b 44 24 18          	mov    0x18(%esp),%eax
   21245:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   21249:	01 c0                	add    %eax,%eax
   2124b:	11 d2                	adc    %edx,%edx
   2124d:	89 c1                	mov    %eax,%ecx
   2124f:	89 d3                	mov    %edx,%ebx
   21251:	01 c0                	add    %eax,%eax
   21253:	11 d2                	adc    %edx,%edx
   21255:	01 c0                	add    %eax,%eax
   21257:	11 d2                	adc    %edx,%edx
   21259:	01 c8                	add    %ecx,%eax
   2125b:	11 da                	adc    %ebx,%edx
   2125d:	89 44 24 18          	mov    %eax,0x18(%esp)
   21261:	89 54 24 1c          	mov    %edx,0x1c(%esp)
		ADD64((c&0xf), i.a, i.b);
   21265:	8b 54 24 18          	mov    0x18(%esp),%edx
   21269:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   2126d:	0f b6 4c 24 27       	movzbl 0x27(%esp),%ecx
   21272:	83 e1 0f             	and    $0xf,%ecx
   21275:	01 ca                	add    %ecx,%edx
   21277:	83 d0 00             	adc    $0x0,%eax
   2127a:	89 54 24 18          	mov    %edx,0x18(%esp)
   2127e:	89 44 24 1c          	mov    %eax,0x1c(%esp)
// 实数。
	addr = ea(info,code);                   // 取有效地址。
	addr += 9;                              // 指向最后一个（第10个）字节。
	i.sign = 0x80 & get_fs_byte(addr--);    // 取其中符号位。
	i.a = i.b = 0;
	for (k = 0; k < 9; k++) {               // 转换成临时整数格式。
   21282:	83 44 24 2c 01       	addl   $0x1,0x2c(%esp)
   21287:	83 7c 24 2c 08       	cmpl   $0x8,0x2c(%esp)
   2128c:	0f 8e 50 ff ff ff    	jle    211e2 <get_BCD+0x6b>
		MUL10(i.a, i.b);
		ADD64((c>>4), i.a, i.b);
		MUL10(i.a, i.b);
		ADD64((c&0xf), i.a, i.b);
	}
	int_to_real(&i,tmp);                    // 转换成临时实数格式。
   21292:	83 ec 08             	sub    $0x8,%esp
   21295:	ff 74 24 48          	pushl  0x48(%esp)
   21299:	8d 44 24 24          	lea    0x24(%esp),%eax
   2129d:	50                   	push   %eax
   2129e:	e8 08 14 00 00       	call   226ab <int_to_real>
   212a3:	83 c4 10             	add    $0x10,%esp
}
   212a6:	90                   	nop
   212a7:	83 c4 38             	add    $0x38,%esp
   212aa:	5b                   	pop    %ebx
   212ab:	c3                   	ret    

000212ac <put_short_real>:
// 该函数首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得保存结果的有效地址addr，然后把临时实
// 数格式的结果转换成短实数格式并存储到有效地址addr处。
// 参数：tmp - 临时实数格式结果值；info - info结构指针；code - 指令代码。
void put_short_real(const temp_real * tmp,
	struct info * info, unsigned short code)
{
   212ac:	83 ec 2c             	sub    $0x2c,%esp
   212af:	8b 44 24 38          	mov    0x38(%esp),%eax
   212b3:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;
	short_real sr;

	addr = ea(info,code);                           // 取有效地址。
   212b8:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   212bd:	83 ec 08             	sub    $0x8,%esp
   212c0:	50                   	push   %eax
   212c1:	ff 74 24 40          	pushl  0x40(%esp)
   212c5:	e8 d7 f9 ff ff       	call   20ca1 <ea>
   212ca:	83 c4 10             	add    $0x10,%esp
   212cd:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	verify_area(addr,4);                            // 为保存结果验证或分配内存。
   212d1:	83 ec 08             	sub    $0x8,%esp
   212d4:	6a 04                	push   $0x4
   212d6:	ff 74 24 28          	pushl  0x28(%esp)
   212da:	e8 c4 70 fe ff       	call   83a3 <verify_area>
   212df:	83 c4 10             	add    $0x10,%esp
	temp_to_short(tmp,&sr);                         // 结果转换成短实数格式。
   212e2:	83 ec 08             	sub    $0x8,%esp
   212e5:	8d 44 24 20          	lea    0x20(%esp),%eax
   212e9:	50                   	push   %eax
   212ea:	ff 74 24 3c          	pushl  0x3c(%esp)
   212ee:	e8 c8 0e 00 00       	call   221bb <temp_to_short>
   212f3:	83 c4 10             	add    $0x10,%esp
	put_fs_long(sr,(unsigned long *) addr);         // 存储数据到用户内存区。
   212f6:	8b 44 24 18          	mov    0x18(%esp),%eax
   212fa:	83 ec 08             	sub    $0x8,%esp
   212fd:	ff 74 24 24          	pushl  0x24(%esp)
   21301:	50                   	push   %eax
   21302:	e8 9c fb ff ff       	call   20ea3 <put_fs_long>
   21307:	83 c4 10             	add    $0x10,%esp
}
   2130a:	90                   	nop
   2130b:	83 c4 2c             	add    $0x2c,%esp
   2130e:	c3                   	ret    

0002130f <put_long_real>:
// 该函数首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得保存结果的有效地址addr，然后把临时
// 实数格式的结果转换成长实数格式，并存储到有效地址addr处。
// 参数：tmp - 临时实数格式结果值；info - info结构指针；code - 指令代码。
void put_long_real(const temp_real * tmp,
	struct info * info, unsigned short code)
{
   2130f:	83 ec 2c             	sub    $0x2c,%esp
   21312:	8b 44 24 38          	mov    0x38(%esp),%eax
   21316:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;
	long_real lr;

	addr = ea(info,code);                           // 取有效地址。
   2131b:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   21320:	83 ec 08             	sub    $0x8,%esp
   21323:	50                   	push   %eax
   21324:	ff 74 24 40          	pushl  0x40(%esp)
   21328:	e8 74 f9 ff ff       	call   20ca1 <ea>
   2132d:	83 c4 10             	add    $0x10,%esp
   21330:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	verify_area(addr,8);                            // 为保存结果验证或分配内存。
   21334:	83 ec 08             	sub    $0x8,%esp
   21337:	6a 08                	push   $0x8
   21339:	ff 74 24 28          	pushl  0x28(%esp)
   2133d:	e8 61 70 fe ff       	call   83a3 <verify_area>
   21342:	83 c4 10             	add    $0x10,%esp
	temp_to_long(tmp,&lr);                          // 结果转换成长实数格式。
   21345:	83 ec 08             	sub    $0x8,%esp
   21348:	8d 44 24 1c          	lea    0x1c(%esp),%eax
   2134c:	50                   	push   %eax
   2134d:	ff 74 24 3c          	pushl  0x3c(%esp)
   21351:	e8 9c 0f 00 00       	call   222f2 <temp_to_long>
   21356:	83 c4 10             	add    $0x10,%esp
	put_fs_long(lr.a, (unsigned long *) addr);      // 存储数据到用户内存区。
   21359:	8b 44 24 14          	mov    0x14(%esp),%eax
   2135d:	83 ec 08             	sub    $0x8,%esp
   21360:	ff 74 24 24          	pushl  0x24(%esp)
   21364:	50                   	push   %eax
   21365:	e8 39 fb ff ff       	call   20ea3 <put_fs_long>
   2136a:	83 c4 10             	add    $0x10,%esp
	put_fs_long(lr.b, 1 + (unsigned long *) addr);
   2136d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   21371:	83 c0 04             	add    $0x4,%eax
   21374:	8b 54 24 18          	mov    0x18(%esp),%edx
   21378:	83 ec 08             	sub    $0x8,%esp
   2137b:	50                   	push   %eax
   2137c:	52                   	push   %edx
   2137d:	e8 21 fb ff ff       	call   20ea3 <put_fs_long>
   21382:	83 c4 10             	add    $0x10,%esp
}
   21385:	90                   	nop
   21386:	83 c4 2c             	add    $0x2c,%esp
   21389:	c3                   	ret    

0002138a <put_temp_real>:
// 该函数首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得保存结果的有效地址addr，然后把临
// 时实数存储到有效地址addr处。
// 参数：tmp - 临时实数格式结果值；info - info结构指针；code - 指令代码。
void put_temp_real(const temp_real * tmp,
	struct info * info, unsigned short code)
{
   2138a:	83 ec 2c             	sub    $0x2c,%esp
   2138d:	8b 44 24 38          	mov    0x38(%esp),%eax
   21391:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;

	addr = ea(info,code);                           // 取有效地址。
   21396:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   2139b:	83 ec 08             	sub    $0x8,%esp
   2139e:	50                   	push   %eax
   2139f:	ff 74 24 40          	pushl  0x40(%esp)
   213a3:	e8 f9 f8 ff ff       	call   20ca1 <ea>
   213a8:	83 c4 10             	add    $0x10,%esp
   213ab:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	verify_area(addr,10);                           // 为保存结果验证或分配内存。
   213af:	83 ec 08             	sub    $0x8,%esp
   213b2:	6a 0a                	push   $0xa
   213b4:	ff 74 24 28          	pushl  0x28(%esp)
   213b8:	e8 e6 6f fe ff       	call   83a3 <verify_area>
   213bd:	83 c4 10             	add    $0x10,%esp
	put_fs_long(tmp->a, (unsigned long *) addr);    // 存储数据到用户内存区。
   213c0:	8b 44 24 30          	mov    0x30(%esp),%eax
   213c4:	8b 00                	mov    (%eax),%eax
   213c6:	83 ec 08             	sub    $0x8,%esp
   213c9:	ff 74 24 24          	pushl  0x24(%esp)
   213cd:	50                   	push   %eax
   213ce:	e8 d0 fa ff ff       	call   20ea3 <put_fs_long>
   213d3:	83 c4 10             	add    $0x10,%esp
	put_fs_long(tmp->b, 1 + (unsigned long *) addr);
   213d6:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   213da:	8d 50 04             	lea    0x4(%eax),%edx
   213dd:	8b 44 24 30          	mov    0x30(%esp),%eax
   213e1:	8b 40 04             	mov    0x4(%eax),%eax
   213e4:	83 ec 08             	sub    $0x8,%esp
   213e7:	52                   	push   %edx
   213e8:	50                   	push   %eax
   213e9:	e8 b5 fa ff ff       	call   20ea3 <put_fs_long>
   213ee:	83 c4 10             	add    $0x10,%esp
	put_fs_word(tmp->exponent, 4 + (short *) addr);
   213f1:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   213f5:	8d 50 08             	lea    0x8(%eax),%edx
   213f8:	8b 44 24 30          	mov    0x30(%esp),%eax
   213fc:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21400:	98                   	cwtl   
   21401:	83 ec 08             	sub    $0x8,%esp
   21404:	52                   	push   %edx
   21405:	50                   	push   %eax
   21406:	e8 7c fa ff ff       	call   20e87 <put_fs_word>
   2140b:	83 c4 10             	add    $0x10,%esp
}
   2140e:	90                   	nop
   2140f:	83 c4 2c             	add    $0x2c,%esp
   21412:	c3                   	ret    

00021413 <put_short_int>:
// 该函数首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得保存结果的有效地址addr，然后把临
// 时实数格式的结果转换成临时整数格式。如果是负数则设置整数符号位。最后把整数保存到用户内存中。
// 参数：tmp - 临时实数格式结果值；info - info结构指针；code - 指令代码。
void put_short_int(const temp_real * tmp,
	struct info * info, unsigned short code)
{
   21413:	83 ec 2c             	sub    $0x2c,%esp
   21416:	8b 44 24 38          	mov    0x38(%esp),%eax
   2141a:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;
	temp_int ti;

	addr = ea(info,code);           // 取有效地址。
   2141f:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   21424:	83 ec 08             	sub    $0x8,%esp
   21427:	50                   	push   %eax
   21428:	ff 74 24 40          	pushl  0x40(%esp)
   2142c:	e8 70 f8 ff ff       	call   20ca1 <ea>
   21431:	83 c4 10             	add    $0x10,%esp
   21434:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	real_to_int(tmp,&ti);           // 转换成临时整数格式。
   21438:	83 ec 08             	sub    $0x8,%esp
   2143b:	8d 44 24 18          	lea    0x18(%esp),%eax
   2143f:	50                   	push   %eax
   21440:	ff 74 24 3c          	pushl  0x3c(%esp)
   21444:	e8 56 10 00 00       	call   2249f <real_to_int>
   21449:	83 c4 10             	add    $0x10,%esp
	verify_area(addr,2);            // 验证或分配存储内存。
   2144c:	83 ec 08             	sub    $0x8,%esp
   2144f:	6a 02                	push   $0x2
   21451:	ff 74 24 28          	pushl  0x28(%esp)
   21455:	e8 49 6f fe ff       	call   83a3 <verify_area>
   2145a:	83 c4 10             	add    $0x10,%esp
	if (ti.sign)                    // 若有符号位，则取负数值。
   2145d:	0f b7 44 24 18       	movzwl 0x18(%esp),%eax
   21462:	66 85 c0             	test   %ax,%ax
   21465:	74 0a                	je     21471 <put_short_int+0x5e>
		ti.a = -ti.a;
   21467:	8b 44 24 10          	mov    0x10(%esp),%eax
   2146b:	f7 d8                	neg    %eax
   2146d:	89 44 24 10          	mov    %eax,0x10(%esp)
	put_fs_word(ti.a,(short *) addr);       // 存储到用户数据区中。
   21471:	8b 44 24 10          	mov    0x10(%esp),%eax
   21475:	98                   	cwtl   
   21476:	83 ec 08             	sub    $0x8,%esp
   21479:	ff 74 24 24          	pushl  0x24(%esp)
   2147d:	50                   	push   %eax
   2147e:	e8 04 fa ff ff       	call   20e87 <put_fs_word>
   21483:	83 c4 10             	add    $0x10,%esp
}
   21486:	90                   	nop
   21487:	83 c4 2c             	add    $0x2c,%esp
   2148a:	c3                   	ret    

0002148b <put_long_int>:
// 该函数首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得保存结果的有效地址addr，然后把临时
// 实数格式的结果转换成临时整数格式。如果是负数则设置整数符号位。最后把整数保存到用户内存中。
// 参数：tmp - 临时实数格式结果值；info - info结构指针；code - 指令代码。
void put_long_int(const temp_real * tmp,
	struct info * info, unsigned short code)
{
   2148b:	83 ec 2c             	sub    $0x2c,%esp
   2148e:	8b 44 24 38          	mov    0x38(%esp),%eax
   21492:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;
	temp_int ti;

	addr = ea(info,code);                           // 取有效地址值。
   21497:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   2149c:	83 ec 08             	sub    $0x8,%esp
   2149f:	50                   	push   %eax
   214a0:	ff 74 24 40          	pushl  0x40(%esp)
   214a4:	e8 f8 f7 ff ff       	call   20ca1 <ea>
   214a9:	83 c4 10             	add    $0x10,%esp
   214ac:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	real_to_int(tmp,&ti);                           // 转换成临时整数格式。
   214b0:	83 ec 08             	sub    $0x8,%esp
   214b3:	8d 44 24 18          	lea    0x18(%esp),%eax
   214b7:	50                   	push   %eax
   214b8:	ff 74 24 3c          	pushl  0x3c(%esp)
   214bc:	e8 de 0f 00 00       	call   2249f <real_to_int>
   214c1:	83 c4 10             	add    $0x10,%esp
	verify_area(addr,4);                            // 验证或分配存储内存。
   214c4:	83 ec 08             	sub    $0x8,%esp
   214c7:	6a 04                	push   $0x4
   214c9:	ff 74 24 28          	pushl  0x28(%esp)
   214cd:	e8 d1 6e fe ff       	call   83a3 <verify_area>
   214d2:	83 c4 10             	add    $0x10,%esp
	if (ti.sign)                                    // 若有符号位，则取负数值。
   214d5:	0f b7 44 24 18       	movzwl 0x18(%esp),%eax
   214da:	66 85 c0             	test   %ax,%ax
   214dd:	74 0a                	je     214e9 <put_long_int+0x5e>
		ti.a = -ti.a;
   214df:	8b 44 24 10          	mov    0x10(%esp),%eax
   214e3:	f7 d8                	neg    %eax
   214e5:	89 44 24 10          	mov    %eax,0x10(%esp)
	put_fs_long(ti.a,(unsigned long *) addr);       // 存储到用户数据区中。
   214e9:	8b 44 24 10          	mov    0x10(%esp),%eax
   214ed:	83 ec 08             	sub    $0x8,%esp
   214f0:	ff 74 24 24          	pushl  0x24(%esp)
   214f4:	50                   	push   %eax
   214f5:	e8 a9 f9 ff ff       	call   20ea3 <put_fs_long>
   214fa:	83 c4 10             	add    $0x10,%esp
}
   214fd:	90                   	nop
   214fe:	83 c4 2c             	add    $0x2c,%esp
   21501:	c3                   	ret    

00021502 <put_longlong_int>:
// 该函数首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得保存结果的有效地址addr，然后把临时
// 实数格式的结果转换成临时整数格式。如果是负数则设置整数符号位。最后把整数保存到用户内存中。
// 参数：tmp - 临时实数格式结果值；info - info结构指针；code - 指令代码。
void put_longlong_int(const temp_real * tmp,
	struct info * info, unsigned short code)
{
   21502:	83 ec 2c             	sub    $0x2c,%esp
   21505:	8b 44 24 38          	mov    0x38(%esp),%eax
   21509:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	char * addr;
	temp_int ti;

	addr = ea(info,code);           // 取有效地址。
   2150e:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   21513:	83 ec 08             	sub    $0x8,%esp
   21516:	50                   	push   %eax
   21517:	ff 74 24 40          	pushl  0x40(%esp)
   2151b:	e8 81 f7 ff ff       	call   20ca1 <ea>
   21520:	83 c4 10             	add    $0x10,%esp
   21523:	89 44 24 1c          	mov    %eax,0x1c(%esp)
	real_to_int(tmp,&ti);           // 转换成临时整数格式。
   21527:	83 ec 08             	sub    $0x8,%esp
   2152a:	8d 44 24 18          	lea    0x18(%esp),%eax
   2152e:	50                   	push   %eax
   2152f:	ff 74 24 3c          	pushl  0x3c(%esp)
   21533:	e8 67 0f 00 00       	call   2249f <real_to_int>
   21538:	83 c4 10             	add    $0x10,%esp
	verify_area(addr,8);            // 验证存储区域。
   2153b:	83 ec 08             	sub    $0x8,%esp
   2153e:	6a 08                	push   $0x8
   21540:	ff 74 24 28          	pushl  0x28(%esp)
   21544:	e8 5a 6e fe ff       	call   83a3 <verify_area>
   21549:	83 c4 10             	add    $0x10,%esp
	if (ti.sign)                    // 若是负数，则取反加1。
   2154c:	0f b7 44 24 18       	movzwl 0x18(%esp),%eax
   21551:	66 85 c0             	test   %ax,%ax
   21554:	74 1a                	je     21570 <put_longlong_int+0x6e>
		__asm__("notl %0 ; notl %1\n\t"
			"addl $1,%0 ; adcl $0,%1"
			:"=r" (ti.a),"=r" (ti.b)
			:"0" (ti.a),"1" (ti.b));
   21556:	8b 54 24 10          	mov    0x10(%esp),%edx
   2155a:	8b 44 24 14          	mov    0x14(%esp),%eax

	addr = ea(info,code);           // 取有效地址。
	real_to_int(tmp,&ti);           // 转换成临时整数格式。
	verify_area(addr,8);            // 验证存储区域。
	if (ti.sign)                    // 若是负数，则取反加1。
		__asm__("notl %0 ; notl %1\n\t"
   2155e:	f7 d2                	not    %edx
   21560:	f7 d0                	not    %eax
   21562:	83 c2 01             	add    $0x1,%edx
   21565:	83 d0 00             	adc    $0x0,%eax
   21568:	89 54 24 10          	mov    %edx,0x10(%esp)
   2156c:	89 44 24 14          	mov    %eax,0x14(%esp)
			"addl $1,%0 ; adcl $0,%1"
			:"=r" (ti.a),"=r" (ti.b)
			:"0" (ti.a),"1" (ti.b));
	put_fs_long(ti.a,(unsigned long *) addr);       // 存储到用户数据区中。
   21570:	8b 44 24 10          	mov    0x10(%esp),%eax
   21574:	83 ec 08             	sub    $0x8,%esp
   21577:	ff 74 24 24          	pushl  0x24(%esp)
   2157b:	50                   	push   %eax
   2157c:	e8 22 f9 ff ff       	call   20ea3 <put_fs_long>
   21581:	83 c4 10             	add    $0x10,%esp
	put_fs_long(ti.b,1 + (unsigned long *) addr);
   21584:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   21588:	83 c0 04             	add    $0x4,%eax
   2158b:	8b 54 24 14          	mov    0x14(%esp),%edx
   2158f:	83 ec 08             	sub    $0x8,%esp
   21592:	50                   	push   %eax
   21593:	52                   	push   %edx
   21594:	e8 0a f9 ff ff       	call   20ea3 <put_fs_long>
   21599:	83 c4 10             	add    $0x10,%esp
}
   2159c:	90                   	nop
   2159d:	83 c4 2c             	add    $0x2c,%esp
   215a0:	c3                   	ret    

000215a1 <put_BCD>:
// 该函数首先根据浮点指令代码中寻址模式字节中的内容和info结构中当前寄存器中的内容，取得保存结果的有效地址addr，并验证保
// 存10字节BCD码的用户空间。然后把临时实数格式的结果转换成BCD码格式的数据并保存到用户内存中。如果是负数则设置最高存储字
// 节的最高有效位。
// 参数：tmp - 临时实数格式结果值；info - info结构指针；code - 指令代码。
void put_BCD(const temp_real * tmp,struct info * info, unsigned short code)
{
   215a1:	53                   	push   %ebx
   215a2:	83 ec 38             	sub    $0x38,%esp
   215a5:	8b 44 24 48          	mov    0x48(%esp),%eax
   215a9:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	int k,rem;
	char * addr;
	temp_int i;
	unsigned char c;

	addr = ea(info,code);                   // 取有效地址。
   215ae:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   215b3:	83 ec 08             	sub    $0x8,%esp
   215b6:	50                   	push   %eax
   215b7:	ff 74 24 50          	pushl  0x50(%esp)
   215bb:	e8 e1 f6 ff ff       	call   20ca1 <ea>
   215c0:	83 c4 10             	add    $0x10,%esp
   215c3:	89 44 24 28          	mov    %eax,0x28(%esp)
	verify_area(addr,10);                   // 验证存储空间容量。
   215c7:	83 ec 08             	sub    $0x8,%esp
   215ca:	6a 0a                	push   $0xa
   215cc:	ff 74 24 34          	pushl  0x34(%esp)
   215d0:	e8 ce 6d fe ff       	call   83a3 <verify_area>
   215d5:	83 c4 10             	add    $0x10,%esp
	real_to_int(tmp,&i);                    // 转换成临时整数格式。
   215d8:	83 ec 08             	sub    $0x8,%esp
   215db:	8d 44 24 1c          	lea    0x1c(%esp),%eax
   215df:	50                   	push   %eax
   215e0:	ff 74 24 4c          	pushl  0x4c(%esp)
   215e4:	e8 b6 0e 00 00       	call   2249f <real_to_int>
   215e9:	83 c4 10             	add    $0x10,%esp
	if (i.sign)                             // 若是负数，则设置符号字节最高有效位。
   215ec:	0f b7 44 24 1c       	movzwl 0x1c(%esp),%eax
   215f1:	66 85 c0             	test   %ax,%ax
   215f4:	74 17                	je     2160d <put_BCD+0x6c>
		put_fs_byte(0x80, addr+9);
   215f6:	8b 44 24 28          	mov    0x28(%esp),%eax
   215fa:	83 c0 09             	add    $0x9,%eax
   215fd:	83 ec 08             	sub    $0x8,%esp
   21600:	50                   	push   %eax
   21601:	6a 80                	push   $0xffffff80
   21603:	e8 65 f8 ff ff       	call   20e6d <put_fs_byte>
   21608:	83 c4 10             	add    $0x10,%esp
   2160b:	eb 15                	jmp    21622 <put_BCD+0x81>
	else                                    // 否则符号字节设置为0。
		put_fs_byte(0, addr+9);
   2160d:	8b 44 24 28          	mov    0x28(%esp),%eax
   21611:	83 c0 09             	add    $0x9,%eax
   21614:	83 ec 08             	sub    $0x8,%esp
   21617:	50                   	push   %eax
   21618:	6a 00                	push   $0x0
   2161a:	e8 4e f8 ff ff       	call   20e6d <put_fs_byte>
   2161f:	83 c4 10             	add    $0x10,%esp
	for (k = 0; k < 9; k++) {               // 临时整数转换成BCD码并保存。
   21622:	c7 44 24 2c 00 00 00 	movl   $0x0,0x2c(%esp)
   21629:	00 
   2162a:	eb 7e                	jmp    216aa <put_BCD+0x109>
		DIV10(i.a,i.b,rem);
   2162c:	8b 44 24 18          	mov    0x18(%esp),%eax
   21630:	8b 5c 24 14          	mov    0x14(%esp),%ebx
   21634:	ba 00 00 00 00       	mov    $0x0,%edx
   21639:	b9 0a 00 00 00       	mov    $0xa,%ecx
   2163e:	f7 f1                	div    %ecx
   21640:	93                   	xchg   %eax,%ebx
   21641:	f7 f1                	div    %ecx
   21643:	89 54 24 24          	mov    %edx,0x24(%esp)
   21647:	89 44 24 14          	mov    %eax,0x14(%esp)
   2164b:	89 5c 24 18          	mov    %ebx,0x18(%esp)
		c = rem;
   2164f:	8b 44 24 24          	mov    0x24(%esp),%eax
   21653:	88 44 24 23          	mov    %al,0x23(%esp)
		DIV10(i.a,i.b,rem);
   21657:	8b 44 24 18          	mov    0x18(%esp),%eax
   2165b:	8b 5c 24 14          	mov    0x14(%esp),%ebx
   2165f:	ba 00 00 00 00       	mov    $0x0,%edx
   21664:	b9 0a 00 00 00       	mov    $0xa,%ecx
   21669:	f7 f1                	div    %ecx
   2166b:	93                   	xchg   %eax,%ebx
   2166c:	f7 f1                	div    %ecx
   2166e:	89 54 24 24          	mov    %edx,0x24(%esp)
   21672:	89 44 24 14          	mov    %eax,0x14(%esp)
   21676:	89 5c 24 18          	mov    %ebx,0x18(%esp)
		c += rem<<4;
   2167a:	8b 44 24 24          	mov    0x24(%esp),%eax
   2167e:	c1 e0 04             	shl    $0x4,%eax
   21681:	00 44 24 23          	add    %al,0x23(%esp)
		put_fs_byte(c,addr++);
   21685:	8b 44 24 28          	mov    0x28(%esp),%eax
   21689:	8d 50 01             	lea    0x1(%eax),%edx
   2168c:	89 54 24 28          	mov    %edx,0x28(%esp)
   21690:	0f b6 54 24 23       	movzbl 0x23(%esp),%edx
   21695:	0f be d2             	movsbl %dl,%edx
   21698:	83 ec 08             	sub    $0x8,%esp
   2169b:	50                   	push   %eax
   2169c:	52                   	push   %edx
   2169d:	e8 cb f7 ff ff       	call   20e6d <put_fs_byte>
   216a2:	83 c4 10             	add    $0x10,%esp
	real_to_int(tmp,&i);                    // 转换成临时整数格式。
	if (i.sign)                             // 若是负数，则设置符号字节最高有效位。
		put_fs_byte(0x80, addr+9);
	else                                    // 否则符号字节设置为0。
		put_fs_byte(0, addr+9);
	for (k = 0; k < 9; k++) {               // 临时整数转换成BCD码并保存。
   216a5:	83 44 24 2c 01       	addl   $0x1,0x2c(%esp)
   216aa:	83 7c 24 2c 08       	cmpl   $0x8,0x2c(%esp)
   216af:	0f 8e 77 ff ff ff    	jle    2162c <put_BCD+0x8b>
		c = rem;
		DIV10(i.a,i.b,rem);
		c += rem<<4;
		put_fs_byte(c,addr++);
	}
   216b5:	90                   	nop
   216b6:	83 c4 38             	add    $0x38,%esp
   216b9:	5b                   	pop    %ebx
   216ba:	c3                   	ret    

000216bb <signify>:
{
// 把64位二进制尾数右移2位（因此指数需要加2）。因为指针字段exponent的最高位是符号位，所以若指数值小于零，说明该数是负数。
// 于是则把尾数用补码表示（取负）。然后把指数取正值。此时尾数中不仅包含移过2位的有效数，而且还包含数值的符号位。
// 30行上：%0 - a->a；%1 - a->b。汇编指令“shrdl $2, %1, %0”执行双精度（64位）右移，即把组合尾数<b,a>右移2位。由于
// 该移动操作不会改变%1（a->b）中的值，因此还需要单独对其右移2位。
	a->exponent += 2;
   216bb:	8b 44 24 04          	mov    0x4(%esp),%eax
   216bf:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   216c3:	83 c0 02             	add    $0x2,%eax
   216c6:	89 c2                	mov    %eax,%edx
   216c8:	8b 44 24 04          	mov    0x4(%esp),%eax
   216cc:	66 89 50 08          	mov    %dx,0x8(%eax)
	__asm__("shrdl $2,%1,%0 ; shrl $2,%1"   // 使用双精度指令把尾数右移2位。
		:"=r" (a->a),"=r" (a->b)
		:"0" (a->a),"1" (a->b));
   216d0:	8b 44 24 04          	mov    0x4(%esp),%eax
   216d4:	8b 10                	mov    (%eax),%edx
   216d6:	8b 44 24 04          	mov    0x4(%esp),%eax
   216da:	8b 40 04             	mov    0x4(%eax),%eax
// 把64位二进制尾数右移2位（因此指数需要加2）。因为指针字段exponent的最高位是符号位，所以若指数值小于零，说明该数是负数。
// 于是则把尾数用补码表示（取负）。然后把指数取正值。此时尾数中不仅包含移过2位的有效数，而且还包含数值的符号位。
// 30行上：%0 - a->a；%1 - a->b。汇编指令“shrdl $2, %1, %0”执行双精度（64位）右移，即把组合尾数<b,a>右移2位。由于
// 该移动操作不会改变%1（a->b）中的值，因此还需要单独对其右移2位。
	a->exponent += 2;
	__asm__("shrdl $2,%1,%0 ; shrl $2,%1"   // 使用双精度指令把尾数右移2位。
   216dd:	0f ac c2 02          	shrd   $0x2,%eax,%edx
   216e1:	c1 e8 02             	shr    $0x2,%eax
   216e4:	8b 4c 24 04          	mov    0x4(%esp),%ecx
   216e8:	89 11                	mov    %edx,(%ecx)
   216ea:	8b 54 24 04          	mov    0x4(%esp),%edx
   216ee:	89 42 04             	mov    %eax,0x4(%edx)
		:"=r" (a->a),"=r" (a->b)
		:"0" (a->a),"1" (a->b));
	if (a->exponent < 0)                    // 是负数，则尾数用补码表示（取负值）。
   216f1:	8b 44 24 04          	mov    0x4(%esp),%eax
   216f5:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   216f9:	66 85 c0             	test   %ax,%ax
   216fc:	79 24                	jns    21722 <signify+0x67>
		NEGINT(a);
   216fe:	8b 44 24 04          	mov    0x4(%esp),%eax
   21702:	8b 10                	mov    (%eax),%edx
   21704:	8b 44 24 04          	mov    0x4(%esp),%eax
   21708:	8b 40 04             	mov    0x4(%eax),%eax
   2170b:	f7 d2                	not    %edx
   2170d:	f7 d0                	not    %eax
   2170f:	83 c2 01             	add    $0x1,%edx
   21712:	83 d0 00             	adc    $0x0,%eax
   21715:	8b 4c 24 04          	mov    0x4(%esp),%ecx
   21719:	89 11                	mov    %edx,(%ecx)
   2171b:	8b 54 24 04          	mov    0x4(%esp),%edx
   2171f:	89 42 04             	mov    %eax,0x4(%edx)
	a->exponent &= 0x7fff;                  // 去掉符号位（若有）。
   21722:	8b 44 24 04          	mov    0x4(%esp),%eax
   21726:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   2172a:	66 25 ff 7f          	and    $0x7fff,%ax
   2172e:	89 c2                	mov    %eax,%edx
   21730:	8b 44 24 04          	mov    0x4(%esp),%eax
   21734:	66 89 50 08          	mov    %dx,0x8(%eax)
}
   21738:	90                   	nop
   21739:	c3                   	ret    

0002173a <unsignify>:
static void unsignify(temp_real * a)
{
// 对于值为0的数不用处理，直接返回。否则，我们先复位临时实数格式的符号位。然后判断尾数的高位long字段a->b是否带有符号位。
// 若有，则在exponent字段添加符号位，同时把尾数用无符号数形式表示（取补）。最后对尾数进行规格化处理，同时指数值作相应递
// 减。即执行左移操作，使得尾数最高有效位不为0（最后a->b值表现为负值）。
	if (!(a->a || a->b)) {                          // 若值为0就返回。
   2173a:	8b 44 24 04          	mov    0x4(%esp),%eax
   2173e:	8b 00                	mov    (%eax),%eax
   21740:	85 c0                	test   %eax,%eax
   21742:	75 1a                	jne    2175e <unsignify+0x24>
   21744:	8b 44 24 04          	mov    0x4(%esp),%eax
   21748:	8b 40 04             	mov    0x4(%eax),%eax
   2174b:	85 c0                	test   %eax,%eax
   2174d:	75 0f                	jne    2175e <unsignify+0x24>
		a->exponent = 0;
   2174f:	8b 44 24 04          	mov    0x4(%esp),%eax
   21753:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		return;
   21759:	e9 9b 00 00 00       	jmp    217f9 <unsignify+0xbf>
	}
	a->exponent &= 0x7fff;                          // 去掉符号位（若有）。
   2175e:	8b 44 24 04          	mov    0x4(%esp),%eax
   21762:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21766:	66 25 ff 7f          	and    $0x7fff,%ax
   2176a:	89 c2                	mov    %eax,%edx
   2176c:	8b 44 24 04          	mov    0x4(%esp),%eax
   21770:	66 89 50 08          	mov    %dx,0x8(%eax)
	if (a->b < 0) {                                 // 去负数，则尾数取正值。
   21774:	8b 44 24 04          	mov    0x4(%esp),%eax
   21778:	8b 40 04             	mov    0x4(%eax),%eax
   2177b:	85 c0                	test   %eax,%eax
   2177d:	79 6f                	jns    217ee <unsignify+0xb4>
		NEGINT(a);
   2177f:	8b 44 24 04          	mov    0x4(%esp),%eax
   21783:	8b 10                	mov    (%eax),%edx
   21785:	8b 44 24 04          	mov    0x4(%esp),%eax
   21789:	8b 40 04             	mov    0x4(%eax),%eax
   2178c:	f7 d2                	not    %edx
   2178e:	f7 d0                	not    %eax
   21790:	83 c2 01             	add    $0x1,%edx
   21793:	83 d0 00             	adc    $0x0,%eax
   21796:	8b 4c 24 04          	mov    0x4(%esp),%ecx
   2179a:	89 11                	mov    %edx,(%ecx)
   2179c:	8b 54 24 04          	mov    0x4(%esp),%edx
   217a0:	89 42 04             	mov    %eax,0x4(%edx)
		a->exponent |= 0x8000;                  // 临时实数添加置符号位。
   217a3:	8b 44 24 04          	mov    0x4(%esp),%eax
   217a7:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   217ab:	66 0d 00 80          	or     $0x8000,%ax
   217af:	89 c2                	mov    %eax,%edx
   217b1:	8b 44 24 04          	mov    0x4(%esp),%eax
   217b5:	66 89 50 08          	mov    %dx,0x8(%eax)
	}
	while (a->b >= 0) {                             // 对尾数进行规格化处理。
   217b9:	eb 33                	jmp    217ee <unsignify+0xb4>
		a->exponent--;
   217bb:	8b 44 24 04          	mov    0x4(%esp),%eax
   217bf:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   217c3:	83 e8 01             	sub    $0x1,%eax
   217c6:	89 c2                	mov    %eax,%edx
   217c8:	8b 44 24 04          	mov    0x4(%esp),%eax
   217cc:	66 89 50 08          	mov    %dx,0x8(%eax)
		__asm__("addl %0,%0 ; adcl %1,%1"
			:"=r" (a->a),"=r" (a->b)
			:"0" (a->a),"1" (a->b));
   217d0:	8b 44 24 04          	mov    0x4(%esp),%eax
   217d4:	8b 10                	mov    (%eax),%edx
   217d6:	8b 44 24 04          	mov    0x4(%esp),%eax
   217da:	8b 40 04             	mov    0x4(%eax),%eax
		NEGINT(a);
		a->exponent |= 0x8000;                  // 临时实数添加置符号位。
	}
	while (a->b >= 0) {                             // 对尾数进行规格化处理。
		a->exponent--;
		__asm__("addl %0,%0 ; adcl %1,%1"
   217dd:	01 d2                	add    %edx,%edx
   217df:	11 c0                	adc    %eax,%eax
   217e1:	8b 4c 24 04          	mov    0x4(%esp),%ecx
   217e5:	89 11                	mov    %edx,(%ecx)
   217e7:	8b 54 24 04          	mov    0x4(%esp),%edx
   217eb:	89 42 04             	mov    %eax,0x4(%edx)
	a->exponent &= 0x7fff;                          // 去掉符号位（若有）。
	if (a->b < 0) {                                 // 去负数，则尾数取正值。
		NEGINT(a);
		a->exponent |= 0x8000;                  // 临时实数添加置符号位。
	}
	while (a->b >= 0) {                             // 对尾数进行规格化处理。
   217ee:	8b 44 24 04          	mov    0x4(%esp),%eax
   217f2:	8b 40 04             	mov    0x4(%eax),%eax
   217f5:	85 c0                	test   %eax,%eax
   217f7:	79 c2                	jns    217bb <unsignify+0x81>
		a->exponent--;
		__asm__("addl %0,%0 ; adcl %1,%1"
			:"=r" (a->a),"=r" (a->b)
			:"0" (a->a),"1" (a->b));
	}
}
   217f9:	c3                   	ret    

000217fa <fadd>:

// 仿真浮点加法指令运算。
// 临时实数参数src1 + src2 -> result。
void fadd(const temp_real * src1, const temp_real * src2, temp_real * result)
{
   217fa:	53                   	push   %ebx
   217fb:	83 ec 30             	sub    $0x30,%esp
	temp_real a,b;
	int x1,x2,shift;

// 首先取两个数的指数值x1、x2（去掉符号位）。然后让变量a等于基中最大值，shift为指数差值（即相差2的倍数值）。
	x1 = src1->exponent & 0x7fff;
   217fe:	8b 44 24 38          	mov    0x38(%esp),%eax
   21802:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21806:	98                   	cwtl   
   21807:	25 ff 7f 00 00       	and    $0x7fff,%eax
   2180c:	89 44 24 28          	mov    %eax,0x28(%esp)
	x2 = src2->exponent & 0x7fff;
   21810:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   21814:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21818:	98                   	cwtl   
   21819:	25 ff 7f 00 00       	and    $0x7fff,%eax
   2181e:	89 44 24 24          	mov    %eax,0x24(%esp)
	if (x1 > x2) {
   21822:	8b 44 24 28          	mov    0x28(%esp),%eax
   21826:	3b 44 24 24          	cmp    0x24(%esp),%eax
   2182a:	7e 3e                	jle    2186a <fadd+0x70>
		a = *src1;
   2182c:	8b 44 24 38          	mov    0x38(%esp),%eax
   21830:	8b 10                	mov    (%eax),%edx
   21832:	89 54 24 18          	mov    %edx,0x18(%esp)
   21836:	8b 50 04             	mov    0x4(%eax),%edx
   21839:	89 54 24 1c          	mov    %edx,0x1c(%esp)
   2183d:	8b 40 08             	mov    0x8(%eax),%eax
   21840:	89 44 24 20          	mov    %eax,0x20(%esp)
		b = *src2;
   21844:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   21848:	8b 10                	mov    (%eax),%edx
   2184a:	89 54 24 0c          	mov    %edx,0xc(%esp)
   2184e:	8b 50 04             	mov    0x4(%eax),%edx
   21851:	89 54 24 10          	mov    %edx,0x10(%esp)
   21855:	8b 40 08             	mov    0x8(%eax),%eax
   21858:	89 44 24 14          	mov    %eax,0x14(%esp)
		shift = x1-x2;
   2185c:	8b 44 24 28          	mov    0x28(%esp),%eax
   21860:	2b 44 24 24          	sub    0x24(%esp),%eax
   21864:	89 44 24 2c          	mov    %eax,0x2c(%esp)
   21868:	eb 3c                	jmp    218a6 <fadd+0xac>
	} else {
		a = *src2;
   2186a:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   2186e:	8b 10                	mov    (%eax),%edx
   21870:	89 54 24 18          	mov    %edx,0x18(%esp)
   21874:	8b 50 04             	mov    0x4(%eax),%edx
   21877:	89 54 24 1c          	mov    %edx,0x1c(%esp)
   2187b:	8b 40 08             	mov    0x8(%eax),%eax
   2187e:	89 44 24 20          	mov    %eax,0x20(%esp)
		b = *src1;
   21882:	8b 44 24 38          	mov    0x38(%esp),%eax
   21886:	8b 10                	mov    (%eax),%edx
   21888:	89 54 24 0c          	mov    %edx,0xc(%esp)
   2188c:	8b 50 04             	mov    0x4(%eax),%edx
   2188f:	89 54 24 10          	mov    %edx,0x10(%esp)
   21893:	8b 40 08             	mov    0x8(%eax),%eax
   21896:	89 44 24 14          	mov    %eax,0x14(%esp)
		shift = x2-x1;
   2189a:	8b 44 24 24          	mov    0x24(%esp),%eax
   2189e:	2b 44 24 28          	sub    0x28(%esp),%eax
   218a2:	89 44 24 2c          	mov    %eax,0x2c(%esp)
	}
// 若两者相差太大，大于等于2的64次方，则我们可以忽略小的那个数，即b值。于是直接返回a值即可。否则，若相差大于等于2的32次
// 方，那么我们可以忽略小值b中的低32位值。于是我们把b的高long字段值b.b右移32位，即放到b.a中。然后把b的指数值相应地增加
// 32次方。即指数差值减去32。这样调整之后，相加的两个数的尾数基本上落在相同区域中。
	if (shift >= 64) {
   218a6:	83 7c 24 2c 3f       	cmpl   $0x3f,0x2c(%esp)
   218ab:	7e 1d                	jle    218ca <fadd+0xd0>
		*result = a;
   218ad:	8b 44 24 40          	mov    0x40(%esp),%eax
   218b1:	8b 54 24 18          	mov    0x18(%esp),%edx
   218b5:	89 10                	mov    %edx,(%eax)
   218b7:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   218bb:	89 50 04             	mov    %edx,0x4(%eax)
   218be:	8b 54 24 20          	mov    0x20(%esp),%edx
   218c2:	89 50 08             	mov    %edx,0x8(%eax)
   218c5:	e9 90 00 00 00       	jmp    2195a <fadd+0x160>
		return;
	}
	if (shift >= 32) {
   218ca:	83 7c 24 2c 1f       	cmpl   $0x1f,0x2c(%esp)
   218cf:	7e 15                	jle    218e6 <fadd+0xec>
		b.a = b.b;
   218d1:	8b 44 24 10          	mov    0x10(%esp),%eax
   218d5:	89 44 24 0c          	mov    %eax,0xc(%esp)
		b.b = 0;
   218d9:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
   218e0:	00 
		shift -= 32;
   218e1:	83 6c 24 2c 20       	subl   $0x20,0x2c(%esp)
	}
// 接着再进行细致的调整，以将相加两者调整成相同。调整方法是把小值b的尾数右移shift各位。这样两者的指数相同，处于同一个数量级。
// 我们就要以对尾数进行相加运算了。相加之前我们需要先把它们转换成仿真运算格式。在加法运算后再变换回临时实数格式。
	__asm__("shrdl %4,%1,%0 ; shrl %4,%1"                   // 双精度（64位）右移。
		:"=r" (b.a),"=r" (b.b)
		:"0" (b.a),"1" (b.b),"c" ((char) shift));
   218e6:	8b 54 24 0c          	mov    0xc(%esp),%edx
   218ea:	8b 44 24 10          	mov    0x10(%esp),%eax
   218ee:	8b 4c 24 2c          	mov    0x2c(%esp),%ecx
		b.b = 0;
		shift -= 32;
	}
// 接着再进行细致的调整，以将相加两者调整成相同。调整方法是把小值b的尾数右移shift各位。这样两者的指数相同，处于同一个数量级。
// 我们就要以对尾数进行相加运算了。相加之前我们需要先把它们转换成仿真运算格式。在加法运算后再变换回临时实数格式。
	__asm__("shrdl %4,%1,%0 ; shrl %4,%1"                   // 双精度（64位）右移。
   218f2:	0f ad c2             	shrd   %cl,%eax,%edx
   218f5:	d3 e8                	shr    %cl,%eax
   218f7:	89 54 24 0c          	mov    %edx,0xc(%esp)
   218fb:	89 44 24 10          	mov    %eax,0x10(%esp)
		:"=r" (b.a),"=r" (b.b)
		:"0" (b.a),"1" (b.b),"c" ((char) shift));
	signify(&a);                                            // 变换格式。
   218ff:	8d 44 24 18          	lea    0x18(%esp),%eax
   21903:	50                   	push   %eax
   21904:	e8 b2 fd ff ff       	call   216bb <signify>
   21909:	83 c4 04             	add    $0x4,%esp
	signify(&b);
   2190c:	8d 44 24 0c          	lea    0xc(%esp),%eax
   21910:	50                   	push   %eax
   21911:	e8 a5 fd ff ff       	call   216bb <signify>
   21916:	83 c4 04             	add    $0x4,%esp
	__asm__("addl %4,%0 ; adcl %5,%1"                       // 执行加法运算。
		:"=r" (a.a),"=r" (a.b)
		:"0" (a.a),"1" (a.b),"g" (b.a),"g" (b.b));
   21919:	8b 54 24 18          	mov    0x18(%esp),%edx
   2191d:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   21921:	8b 4c 24 0c          	mov    0xc(%esp),%ecx
   21925:	8b 5c 24 10          	mov    0x10(%esp),%ebx
	__asm__("shrdl %4,%1,%0 ; shrl %4,%1"                   // 双精度（64位）右移。
		:"=r" (b.a),"=r" (b.b)
		:"0" (b.a),"1" (b.b),"c" ((char) shift));
	signify(&a);                                            // 变换格式。
	signify(&b);
	__asm__("addl %4,%0 ; adcl %5,%1"                       // 执行加法运算。
   21929:	01 ca                	add    %ecx,%edx
   2192b:	11 d8                	adc    %ebx,%eax
   2192d:	89 54 24 18          	mov    %edx,0x18(%esp)
   21931:	89 44 24 1c          	mov    %eax,0x1c(%esp)
		:"=r" (a.a),"=r" (a.b)
		:"0" (a.a),"1" (a.b),"g" (b.a),"g" (b.b));
	unsignify(&a);                                          // 再变换回临时实数格式。
   21935:	8d 44 24 18          	lea    0x18(%esp),%eax
   21939:	50                   	push   %eax
   2193a:	e8 fb fd ff ff       	call   2173a <unsignify>
   2193f:	83 c4 04             	add    $0x4,%esp
	*result = a;
   21942:	8b 44 24 40          	mov    0x40(%esp),%eax
   21946:	8b 54 24 18          	mov    0x18(%esp),%edx
   2194a:	89 10                	mov    %edx,(%eax)
   2194c:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   21950:	89 50 04             	mov    %edx,0x4(%eax)
   21953:	8b 54 24 20          	mov    0x20(%esp),%edx
   21957:	89 50 08             	mov    %edx,0x8(%eax)
}
   2195a:	83 c4 30             	add    $0x30,%esp
   2195d:	5b                   	pop    %ebx
   2195e:	c3                   	ret    

0002195f <shift>:
{
	__asm__("movl (%0),%%eax ; addl %%eax,(%0)\n\t"
		"movl 4(%0),%%eax ; adcl %%eax,4(%0)\n\t"
		"movl 8(%0),%%eax ; adcl %%eax,8(%0)\n\t"
		"movl 12(%0),%%eax ; adcl %%eax,12(%0)"
		::"r" ((long) c):"ax");
   2195f:	8b 54 24 04          	mov    0x4(%esp),%edx
#include <linux/math_emu.h>

// 把c指针处的16字节值左移1位（乘2）。
static void shift(int * c)
{
	__asm__("movl (%0),%%eax ; addl %%eax,(%0)\n\t"
   21963:	8b 02                	mov    (%edx),%eax
   21965:	01 02                	add    %eax,(%edx)
   21967:	8b 42 04             	mov    0x4(%edx),%eax
   2196a:	11 42 04             	adc    %eax,0x4(%edx)
   2196d:	8b 42 08             	mov    0x8(%edx),%eax
   21970:	11 42 08             	adc    %eax,0x8(%edx)
   21973:	8b 42 0c             	mov    0xc(%edx),%eax
   21976:	11 42 0c             	adc    %eax,0xc(%edx)
		"movl 4(%0),%%eax ; adcl %%eax,4(%0)\n\t"
		"movl 8(%0),%%eax ; adcl %%eax,8(%0)\n\t"
		"movl 12(%0),%%eax ; adcl %%eax,12(%0)"
		::"r" ((long) c):"ax");
}
   21979:	90                   	nop
   2197a:	c3                   	ret    

0002197b <mul64>:

// 2个临时实数相乘，结果放在c指针处（16字节）。
static void mul64(const temp_real * a, const temp_real * b, int * c)
{
   2197b:	57                   	push   %edi
   2197c:	56                   	push   %esi
   2197d:	53                   	push   %ebx
		"movl 4(%0),%%eax\n\t"          // 取a->b的值到eax。
		"mull (%1)\n\t"                 // 与b->a的值相乘。
		"addl %%eax,4(%2)\n\t"          // 乘积的低位与c[1]相加放入c[1]。
		"adcl %%edx,8(%2)\n\t"          // 乘积的高位与c[2]相加再加进位，然后放入a[2]。
		"adcl $0,12(%2)"                // 把0与c[3]相加再加进位，然后放入c[3]。
		::"b" ((long) a),"c" ((long) b),"D" ((long) c)
   2197e:	8b 5c 24 10          	mov    0x10(%esp),%ebx
   21982:	8b 4c 24 14          	mov    0x14(%esp),%ecx
   21986:	8b 74 24 18          	mov    0x18(%esp),%esi
}

// 2个临时实数相乘，结果放在c指针处（16字节）。
static void mul64(const temp_real * a, const temp_real * b, int * c)
{
	__asm__("movl (%0),%%eax\n\t"           // 取a->a的值到eax。
   2198a:	89 f7                	mov    %esi,%edi
   2198c:	8b 03                	mov    (%ebx),%eax
   2198e:	f7 21                	mull   (%ecx)
   21990:	89 07                	mov    %eax,(%edi)
   21992:	89 57 04             	mov    %edx,0x4(%edi)
   21995:	8b 43 04             	mov    0x4(%ebx),%eax
   21998:	f7 61 04             	mull   0x4(%ecx)
   2199b:	89 47 08             	mov    %eax,0x8(%edi)
   2199e:	89 57 0c             	mov    %edx,0xc(%edi)
   219a1:	8b 03                	mov    (%ebx),%eax
   219a3:	f7 61 04             	mull   0x4(%ecx)
   219a6:	01 47 04             	add    %eax,0x4(%edi)
   219a9:	11 57 08             	adc    %edx,0x8(%edi)
   219ac:	83 57 0c 00          	adcl   $0x0,0xc(%edi)
   219b0:	8b 43 04             	mov    0x4(%ebx),%eax
   219b3:	f7 21                	mull   (%ecx)
   219b5:	01 47 04             	add    %eax,0x4(%edi)
   219b8:	11 57 08             	adc    %edx,0x8(%edi)
   219bb:	83 57 0c 00          	adcl   $0x0,0xc(%edi)
		"addl %%eax,4(%2)\n\t"          // 乘积的低位与c[1]相加放入c[1]。
		"adcl %%edx,8(%2)\n\t"          // 乘积的高位与c[2]相加再加进位，然后放入a[2]。
		"adcl $0,12(%2)"                // 把0与c[3]相加再加进位，然后放入c[3]。
		::"b" ((long) a),"c" ((long) b),"D" ((long) c)
		:"ax","dx");
}
   219bf:	90                   	nop
   219c0:	5b                   	pop    %ebx
   219c1:	5e                   	pop    %esi
   219c2:	5f                   	pop    %edi
   219c3:	c3                   	ret    

000219c4 <fmul>:

// 仿真浮点指令FMUL。
// 临时实数src1 * src2 -> result处。
void fmul(const temp_real * src1, const temp_real * src2, temp_real * result)
{
   219c4:	83 ec 20             	sub    $0x20,%esp
	int i,sign;
	int tmp[4] = {0,0,0,0};
   219c7:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
   219ce:	00 
   219cf:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   219d6:	00 
   219d7:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
   219de:	00 
   219df:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
   219e6:	00 

// 首先确定两数相乘的符号。符号值等于两者符号位异或值。然后计算乘后的指数值。相乘时指数值需要相加。但是由于指数使用偏置
// 格式保存，两个数的指数相加时偏置量也被加了两次，因此需要减掉一个偏置量值（临时实数的偏置量是16383）。
	sign = (src1->exponent ^ src2->exponent) & 0x8000;
   219e7:	8b 44 24 24          	mov    0x24(%esp),%eax
   219eb:	0f b7 50 08          	movzwl 0x8(%eax),%edx
   219ef:	8b 44 24 28          	mov    0x28(%esp),%eax
   219f3:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   219f7:	31 d0                	xor    %edx,%eax
   219f9:	98                   	cwtl   
   219fa:	25 00 80 00 00       	and    $0x8000,%eax
   219ff:	89 44 24 18          	mov    %eax,0x18(%esp)
	i = (src1->exponent & 0x7fff) + (src2->exponent & 0x7fff) - 16383 + 1;
   21a03:	8b 44 24 24          	mov    0x24(%esp),%eax
   21a07:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21a0b:	98                   	cwtl   
   21a0c:	25 ff 7f 00 00       	and    $0x7fff,%eax
   21a11:	89 c2                	mov    %eax,%edx
   21a13:	8b 44 24 28          	mov    0x28(%esp),%eax
   21a17:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21a1b:	98                   	cwtl   
   21a1c:	25 ff 7f 00 00       	and    $0x7fff,%eax
   21a21:	01 d0                	add    %edx,%eax
   21a23:	2d fe 3f 00 00       	sub    $0x3ffe,%eax
   21a28:	89 44 24 1c          	mov    %eax,0x1c(%esp)
// 如果结果指数变成了负值，表示两数相乘后产生下溢。于是直接返回带符号的零值。如果结果指数大于0x7fff，表示产生上溢，于是
// 设置状态字溢出异常标志位，并返回。
	if (i<0) {
   21a2c:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   21a31:	79 2b                	jns    21a5e <fmul+0x9a>
		result->exponent = sign;
   21a33:	8b 44 24 18          	mov    0x18(%esp),%eax
   21a37:	89 c2                	mov    %eax,%edx
   21a39:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   21a3d:	66 89 50 08          	mov    %dx,0x8(%eax)
		result->a = result->b = 0;
   21a41:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   21a45:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   21a4c:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   21a50:	8b 50 04             	mov    0x4(%eax),%edx
   21a53:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   21a57:	89 10                	mov    %edx,(%eax)
		return;
   21a59:	e9 b7 00 00 00       	jmp    21b15 <fmul+0x151>
	}
	if (i>0x7fff) {
   21a5e:	81 7c 24 1c ff 7f 00 	cmpl   $0x7fff,0x1c(%esp)
   21a65:	00 
   21a66:	7e 1f                	jle    21a87 <fmul+0xc3>
		set_OE();       // 置位溢出标志位。
   21a68:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   21a6d:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   21a73:	8b 92 1c 04 00 00    	mov    0x41c(%edx),%edx
   21a79:	83 ca 08             	or     $0x8,%edx
   21a7c:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
		return;
   21a82:	e9 8e 00 00 00       	jmp    21b15 <fmul+0x151>
	}
// 如果两数尾数相乘后结果不为0，则对结果尾数进行规格化处理。即左移结果尾数值，使得最高有效位为1。同时相应地调整指数值。如果
// 两数相乘后16字节的结尾数为0，则也设置指数值为0。最后把相乘结果保存在临时实数变量result中。
	mul64(src1,src2,tmp);
   21a87:	8d 44 24 08          	lea    0x8(%esp),%eax
   21a8b:	50                   	push   %eax
   21a8c:	ff 74 24 2c          	pushl  0x2c(%esp)
   21a90:	ff 74 24 2c          	pushl  0x2c(%esp)
   21a94:	e8 e2 fe ff ff       	call   2197b <mul64>
   21a99:	83 c4 0c             	add    $0xc,%esp
	if (tmp[0] || tmp[1] || tmp[2] || tmp[3])
   21a9c:	8b 44 24 08          	mov    0x8(%esp),%eax
   21aa0:	85 c0                	test   %eax,%eax
   21aa2:	75 2c                	jne    21ad0 <fmul+0x10c>
   21aa4:	8b 44 24 0c          	mov    0xc(%esp),%eax
   21aa8:	85 c0                	test   %eax,%eax
   21aaa:	75 24                	jne    21ad0 <fmul+0x10c>
   21aac:	8b 44 24 10          	mov    0x10(%esp),%eax
   21ab0:	85 c0                	test   %eax,%eax
   21ab2:	75 1c                	jne    21ad0 <fmul+0x10c>
   21ab4:	8b 44 24 14          	mov    0x14(%esp),%eax
   21ab8:	85 c0                	test   %eax,%eax
   21aba:	74 25                	je     21ae1 <fmul+0x11d>
		while (i && tmp[3] >= 0) {
   21abc:	eb 12                	jmp    21ad0 <fmul+0x10c>
			i--;
   21abe:	83 6c 24 1c 01       	subl   $0x1,0x1c(%esp)
			shift(tmp);
   21ac3:	8d 44 24 08          	lea    0x8(%esp),%eax
   21ac7:	50                   	push   %eax
   21ac8:	e8 92 fe ff ff       	call   2195f <shift>
   21acd:	83 c4 04             	add    $0x4,%esp
	}
// 如果两数尾数相乘后结果不为0，则对结果尾数进行规格化处理。即左移结果尾数值，使得最高有效位为1。同时相应地调整指数值。如果
// 两数相乘后16字节的结尾数为0，则也设置指数值为0。最后把相乘结果保存在临时实数变量result中。
	mul64(src1,src2,tmp);
	if (tmp[0] || tmp[1] || tmp[2] || tmp[3])
		while (i && tmp[3] >= 0) {
   21ad0:	83 7c 24 1c 00       	cmpl   $0x0,0x1c(%esp)
   21ad5:	74 14                	je     21aeb <fmul+0x127>
   21ad7:	8b 44 24 14          	mov    0x14(%esp),%eax
   21adb:	85 c0                	test   %eax,%eax
   21add:	79 df                	jns    21abe <fmul+0xfa>
		return;
	}
// 如果两数尾数相乘后结果不为0，则对结果尾数进行规格化处理。即左移结果尾数值，使得最高有效位为1。同时相应地调整指数值。如果
// 两数相乘后16字节的结尾数为0，则也设置指数值为0。最后把相乘结果保存在临时实数变量result中。
	mul64(src1,src2,tmp);
	if (tmp[0] || tmp[1] || tmp[2] || tmp[3])
   21adf:	eb 0a                	jmp    21aeb <fmul+0x127>
		while (i && tmp[3] >= 0) {
			i--;
			shift(tmp);
		}
	else
		i = 0;
   21ae1:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   21ae8:	00 
   21ae9:	eb 01                	jmp    21aec <fmul+0x128>
		return;
	}
// 如果两数尾数相乘后结果不为0，则对结果尾数进行规格化处理。即左移结果尾数值，使得最高有效位为1。同时相应地调整指数值。如果
// 两数相乘后16字节的结尾数为0，则也设置指数值为0。最后把相乘结果保存在临时实数变量result中。
	mul64(src1,src2,tmp);
	if (tmp[0] || tmp[1] || tmp[2] || tmp[3])
   21aeb:	90                   	nop
			i--;
			shift(tmp);
		}
	else
		i = 0;
	result->exponent = i | sign;
   21aec:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   21af0:	89 c2                	mov    %eax,%edx
   21af2:	8b 44 24 18          	mov    0x18(%esp),%eax
   21af6:	09 c2                	or     %eax,%edx
   21af8:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   21afc:	66 89 50 08          	mov    %dx,0x8(%eax)
	result->a = tmp[2];
   21b00:	8b 54 24 10          	mov    0x10(%esp),%edx
   21b04:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   21b08:	89 10                	mov    %edx,(%eax)
	result->b = tmp[3];
   21b0a:	8b 54 24 14          	mov    0x14(%esp),%edx
   21b0e:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   21b12:	89 50 04             	mov    %edx,0x4(%eax)
}
   21b15:	83 c4 20             	add    $0x20,%esp
   21b18:	c3                   	ret    

00021b19 <shift_left>:
{
	__asm__ __volatile__("movl (%0),%%eax ; addl %%eax,(%0)\n\t"
		"movl 4(%0),%%eax ; adcl %%eax,4(%0)\n\t"
		"movl 8(%0),%%eax ; adcl %%eax,8(%0)\n\t"
		"movl 12(%0),%%eax ; adcl %%eax,12(%0)"
		::"r" ((long) c):"ax");
   21b19:	8b 54 24 04          	mov    0x4(%esp),%edx
#include <linux/math_emu.h>

// 将指针c指向的4字节中内容左移1位。
static void shift_left(int * c)
{
	__asm__ __volatile__("movl (%0),%%eax ; addl %%eax,(%0)\n\t"
   21b1d:	8b 02                	mov    (%edx),%eax
   21b1f:	01 02                	add    %eax,(%edx)
   21b21:	8b 42 04             	mov    0x4(%edx),%eax
   21b24:	11 42 04             	adc    %eax,0x4(%edx)
   21b27:	8b 42 08             	mov    0x8(%edx),%eax
   21b2a:	11 42 08             	adc    %eax,0x8(%edx)
   21b2d:	8b 42 0c             	mov    0xc(%edx),%eax
   21b30:	11 42 0c             	adc    %eax,0xc(%edx)
		"movl 4(%0),%%eax ; adcl %%eax,4(%0)\n\t"
		"movl 8(%0),%%eax ; adcl %%eax,8(%0)\n\t"
		"movl 12(%0),%%eax ; adcl %%eax,12(%0)"
		::"r" ((long) c):"ax");
}
   21b33:	90                   	nop
   21b34:	c3                   	ret    

00021b35 <shift_right>:

// 将指针c指向的4字节中内容右移1位。
static void shift_right(int * c)
{
	__asm__("shrl $1,12(%0) ; rcrl $1,8(%0) ; rcrl $1,4(%0) ; rcrl $1,(%0)"
		::"r" ((long) c));
   21b35:	8b 44 24 04          	mov    0x4(%esp),%eax
}

// 将指针c指向的4字节中内容右移1位。
static void shift_right(int * c)
{
	__asm__("shrl $1,12(%0) ; rcrl $1,8(%0) ; rcrl $1,4(%0) ; rcrl $1,(%0)"
   21b39:	d1 68 0c             	shrl   0xc(%eax)
   21b3c:	d1 58 08             	rcrl   0x8(%eax)
   21b3f:	d1 58 04             	rcrl   0x4(%eax)
   21b42:	d1 18                	rcrl   (%eax)
		::"r" ((long) c));
}
   21b44:	90                   	nop
   21b45:	c3                   	ret    

00021b46 <try_sub>:

// 减法运算。
// 16字节减法运算，b-a ->a。最后根据是否有借位（CF=1）设置OK。若无借位（CF=0）则ok = 1。否则ok = 0。
static int try_sub(int * a, int * b)
{
   21b46:	83 ec 10             	sub    $0x10,%esp

	__asm__ __volatile__("movl (%1),%%eax ; subl %%eax,(%2)\n\t"
		"movl 4(%1),%%eax ; sbbl %%eax,4(%2)\n\t"
		"movl 8(%1),%%eax ; sbbl %%eax,8(%2)\n\t"
		"movl 12(%1),%%eax ; sbbl %%eax,12(%2)\n\t"
		"setae %%al":"=a" (ok):"c" ((long) a),"d" ((long) b));
   21b49:	8b 44 24 14          	mov    0x14(%esp),%eax
   21b4d:	8b 54 24 18          	mov    0x18(%esp),%edx
// 16字节减法运算，b-a ->a。最后根据是否有借位（CF=1）设置OK。若无借位（CF=0）则ok = 1。否则ok = 0。
static int try_sub(int * a, int * b)
{
	char ok;

	__asm__ __volatile__("movl (%1),%%eax ; subl %%eax,(%2)\n\t"
   21b51:	89 c1                	mov    %eax,%ecx
   21b53:	8b 01                	mov    (%ecx),%eax
   21b55:	29 02                	sub    %eax,(%edx)
   21b57:	8b 41 04             	mov    0x4(%ecx),%eax
   21b5a:	19 42 04             	sbb    %eax,0x4(%edx)
   21b5d:	8b 41 08             	mov    0x8(%ecx),%eax
   21b60:	19 42 08             	sbb    %eax,0x8(%edx)
   21b63:	8b 41 0c             	mov    0xc(%ecx),%eax
   21b66:	19 42 0c             	sbb    %eax,0xc(%edx)
   21b69:	0f 93 c0             	setae  %al
   21b6c:	88 44 24 0f          	mov    %al,0xf(%esp)
		"movl 4(%1),%%eax ; sbbl %%eax,4(%2)\n\t"
		"movl 8(%1),%%eax ; sbbl %%eax,8(%2)\n\t"
		"movl 12(%1),%%eax ; sbbl %%eax,12(%2)\n\t"
		"setae %%al":"=a" (ok):"c" ((long) a),"d" ((long) b));
	return ok;
   21b70:	0f be 44 24 0f       	movsbl 0xf(%esp),%eax
}
   21b75:	83 c4 10             	add    $0x10,%esp
   21b78:	c3                   	ret    

00021b79 <div64>:

// 16字节除法。
// 参数a/b -> c。利用减法模拟多字节除法。
static void div64(int * a, int * b, int * c)
{
   21b79:	83 ec 20             	sub    $0x20,%esp
	int tmp[4];     // 余数变量。
	int i;
	unsigned int mask = 0;  // 操作位。
   21b7c:	c7 44 24 18 00 00 00 	movl   $0x0,0x18(%esp)
   21b83:	00 

	c += 4;
   21b84:	83 44 24 2c 10       	addl   $0x10,0x2c(%esp)
// 16字节共64位。
	for (i = 0 ; i<64 ; i++) {
   21b89:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   21b90:	00 
   21b91:	e9 ac 00 00 00       	jmp    21c42 <div64+0xc9>
		if (!(mask >>= 1)) {
   21b96:	d1 6c 24 18          	shrl   0x18(%esp)
   21b9a:	83 7c 24 18 00       	cmpl   $0x0,0x18(%esp)
   21b9f:	75 0d                	jne    21bae <div64+0x35>
			c--;
   21ba1:	83 6c 24 2c 04       	subl   $0x4,0x2c(%esp)
			mask = 0x80000000;
   21ba6:	c7 44 24 18 00 00 00 	movl   $0x80000000,0x18(%esp)
   21bad:	80 
		}
// 把余数值tmp初始化为a值。
		tmp[0] = a[0]; tmp[1] = a[1];
   21bae:	8b 44 24 24          	mov    0x24(%esp),%eax
   21bb2:	8b 00                	mov    (%eax),%eax
   21bb4:	89 44 24 08          	mov    %eax,0x8(%esp)
   21bb8:	8b 44 24 24          	mov    0x24(%esp),%eax
   21bbc:	8b 40 04             	mov    0x4(%eax),%eax
   21bbf:	89 44 24 0c          	mov    %eax,0xc(%esp)
		tmp[2] = a[2]; tmp[3] = a[3];
   21bc3:	8b 44 24 24          	mov    0x24(%esp),%eax
   21bc7:	8b 40 08             	mov    0x8(%eax),%eax
   21bca:	89 44 24 10          	mov    %eax,0x10(%esp)
   21bce:	8b 44 24 24          	mov    0x24(%esp),%eax
   21bd2:	8b 40 0c             	mov    0xc(%eax),%eax
   21bd5:	89 44 24 14          	mov    %eax,0x14(%esp)
		if (try_sub(b,tmp)) {           // 是否有借位。
   21bd9:	8d 44 24 08          	lea    0x8(%esp),%eax
   21bdd:	50                   	push   %eax
   21bde:	ff 74 24 2c          	pushl  0x2c(%esp)
   21be2:	e8 5f ff ff ff       	call   21b46 <try_sub>
   21be7:	83 c4 08             	add    $0x8,%esp
   21bea:	85 c0                	test   %eax,%eax
   21bec:	74 43                	je     21c31 <div64+0xb8>
			*c |= mask;             // 如果无借位，置当前操作位，把余数存入a，用于下次操作。
   21bee:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   21bf2:	8b 00                	mov    (%eax),%eax
   21bf4:	0b 44 24 18          	or     0x18(%esp),%eax
   21bf8:	89 c2                	mov    %eax,%edx
   21bfa:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   21bfe:	89 10                	mov    %edx,(%eax)
			a[0] = tmp[0]; a[1] = tmp[1];
   21c00:	8b 54 24 08          	mov    0x8(%esp),%edx
   21c04:	8b 44 24 24          	mov    0x24(%esp),%eax
   21c08:	89 10                	mov    %edx,(%eax)
   21c0a:	8b 44 24 24          	mov    0x24(%esp),%eax
   21c0e:	8d 50 04             	lea    0x4(%eax),%edx
   21c11:	8b 44 24 0c          	mov    0xc(%esp),%eax
   21c15:	89 02                	mov    %eax,(%edx)
			a[2] = tmp[2]; a[3] = tmp[3];
   21c17:	8b 44 24 24          	mov    0x24(%esp),%eax
   21c1b:	8d 50 08             	lea    0x8(%eax),%edx
   21c1e:	8b 44 24 10          	mov    0x10(%esp),%eax
   21c22:	89 02                	mov    %eax,(%edx)
   21c24:	8b 44 24 24          	mov    0x24(%esp),%eax
   21c28:	8d 50 0c             	lea    0xc(%eax),%edx
   21c2b:	8b 44 24 14          	mov    0x14(%esp),%eax
   21c2f:	89 02                	mov    %eax,(%edx)
		}
		shift_right(b);         // 右移一位，使b的值与值数处于同一级别。
   21c31:	ff 74 24 28          	pushl  0x28(%esp)
   21c35:	e8 fb fe ff ff       	call   21b35 <shift_right>
   21c3a:	83 c4 04             	add    $0x4,%esp
	int i;
	unsigned int mask = 0;  // 操作位。

	c += 4;
// 16字节共64位。
	for (i = 0 ; i<64 ; i++) {
   21c3d:	83 44 24 1c 01       	addl   $0x1,0x1c(%esp)
   21c42:	83 7c 24 1c 3f       	cmpl   $0x3f,0x1c(%esp)
   21c47:	0f 8e 49 ff ff ff    	jle    21b96 <div64+0x1d>
			a[0] = tmp[0]; a[1] = tmp[1];
			a[2] = tmp[2]; a[3] = tmp[3];
		}
		shift_right(b);         // 右移一位，使b的值与值数处于同一级别。
	}
}
   21c4d:	90                   	nop
   21c4e:	83 c4 20             	add    $0x20,%esp
   21c51:	c3                   	ret    

00021c52 <fdiv>:

// 仿真浮点指令FDIV。
// 临时实数src1 / src2 -> result处。
void fdiv(const temp_real * src1, const temp_real * src2, temp_real * result)
{
   21c52:	83 ec 40             	sub    $0x40,%esp
	int i,sign;
	int a[4],b[4],tmp[4] = {0,0,0,0};
   21c55:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
   21c5c:	00 
   21c5d:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%esp)
   21c64:	00 
   21c65:	c7 44 24 10 00 00 00 	movl   $0x0,0x10(%esp)
   21c6c:	00 
   21c6d:	c7 44 24 14 00 00 00 	movl   $0x0,0x14(%esp)
   21c74:	00 

// 首先确定两个数相除的符号。符号值等于两者符号位异或值。然后判断除数src2值是否为0，如果是，则置被零除异常。
	sign = (src1->exponent ^ src2->exponent) & 0x8000;
   21c75:	8b 44 24 44          	mov    0x44(%esp),%eax
   21c79:	0f b7 50 08          	movzwl 0x8(%eax),%edx
   21c7d:	8b 44 24 48          	mov    0x48(%esp),%eax
   21c81:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21c85:	31 d0                	xor    %edx,%eax
   21c87:	98                   	cwtl   
   21c88:	25 00 80 00 00       	and    $0x8000,%eax
   21c8d:	89 44 24 38          	mov    %eax,0x38(%esp)
	if (!(src2->a || src2->b)) {
   21c91:	8b 44 24 48          	mov    0x48(%esp),%eax
   21c95:	8b 00                	mov    (%eax),%eax
   21c97:	85 c0                	test   %eax,%eax
   21c99:	75 2a                	jne    21cc5 <fdiv+0x73>
   21c9b:	8b 44 24 48          	mov    0x48(%esp),%eax
   21c9f:	8b 40 04             	mov    0x4(%eax),%eax
   21ca2:	85 c0                	test   %eax,%eax
   21ca4:	75 1f                	jne    21cc5 <fdiv+0x73>
		set_ZE();               // 置被零除异常。
   21ca6:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   21cab:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   21cb1:	8b 92 1c 04 00 00    	mov    0x41c(%edx),%edx
   21cb7:	83 ca 04             	or     $0x4,%edx
   21cba:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
		return;
   21cc0:	e9 dc 01 00 00       	jmp    21ea1 <fdiv+0x24f>
	}
// 然后计算除后的指数值。相除时指数值需要相减。但是由于指数使用偏置格式保存，两个数的指数相减时偏置量也被减去了，因此需
// 要加上偏置量值（临时实数的偏置量是16383）。
        i = (src1->exponent & 0x7fff) - (src2->exponent & 0x7fff) + 16383;
   21cc5:	8b 44 24 44          	mov    0x44(%esp),%eax
   21cc9:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21ccd:	98                   	cwtl   
   21cce:	25 ff 7f 00 00       	and    $0x7fff,%eax
   21cd3:	89 c2                	mov    %eax,%edx
   21cd5:	8b 44 24 48          	mov    0x48(%esp),%eax
   21cd9:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21cdd:	98                   	cwtl   
   21cde:	25 ff 7f 00 00       	and    $0x7fff,%eax
   21ce3:	29 c2                	sub    %eax,%edx
   21ce5:	89 d0                	mov    %edx,%eax
   21ce7:	05 ff 3f 00 00       	add    $0x3fff,%eax
   21cec:	89 44 24 3c          	mov    %eax,0x3c(%esp)
// 如果结果指数变成了负值，表示两数相除后产生下溢。于是直接返回带符号的零值。
	if (i<0) {
   21cf0:	83 7c 24 3c 00       	cmpl   $0x0,0x3c(%esp)
   21cf5:	79 45                	jns    21d3c <fdiv+0xea>
		set_UE();
   21cf7:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   21cfc:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   21d02:	8b 92 1c 04 00 00    	mov    0x41c(%edx),%edx
   21d08:	83 ca 10             	or     $0x10,%edx
   21d0b:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
		result->exponent = sign;        // 设置符号位。
   21d11:	8b 44 24 38          	mov    0x38(%esp),%eax
   21d15:	89 c2                	mov    %eax,%edx
   21d17:	8b 44 24 4c          	mov    0x4c(%esp),%eax
   21d1b:	66 89 50 08          	mov    %dx,0x8(%eax)
		result->a = result->b = 0;      // 设置返回值为0。
   21d1f:	8b 44 24 4c          	mov    0x4c(%esp),%eax
   21d23:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   21d2a:	8b 44 24 4c          	mov    0x4c(%esp),%eax
   21d2e:	8b 50 04             	mov    0x4(%eax),%edx
   21d31:	8b 44 24 4c          	mov    0x4c(%esp),%eax
   21d35:	89 10                	mov    %edx,(%eax)
		return;
   21d37:	e9 65 01 00 00       	jmp    21ea1 <fdiv+0x24f>
	}
// 把临时实数src1、src2有效数放入整型数组a和b。
	a[0] = a[1] = 0;
   21d3c:	c7 44 24 2c 00 00 00 	movl   $0x0,0x2c(%esp)
   21d43:	00 
   21d44:	8b 44 24 2c          	mov    0x2c(%esp),%eax
   21d48:	89 44 24 28          	mov    %eax,0x28(%esp)
	a[2] = src1->a;
   21d4c:	8b 44 24 44          	mov    0x44(%esp),%eax
   21d50:	8b 00                	mov    (%eax),%eax
   21d52:	89 44 24 30          	mov    %eax,0x30(%esp)
	a[3] = src1->b;
   21d56:	8b 44 24 44          	mov    0x44(%esp),%eax
   21d5a:	8b 40 04             	mov    0x4(%eax),%eax
   21d5d:	89 44 24 34          	mov    %eax,0x34(%esp)
	b[0] = b[1] = 0;
   21d61:	c7 44 24 1c 00 00 00 	movl   $0x0,0x1c(%esp)
   21d68:	00 
   21d69:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   21d6d:	89 44 24 18          	mov    %eax,0x18(%esp)
	b[2] = src2->a;
   21d71:	8b 44 24 48          	mov    0x48(%esp),%eax
   21d75:	8b 00                	mov    (%eax),%eax
   21d77:	89 44 24 20          	mov    %eax,0x20(%esp)
	b[3] = src2->b;
   21d7b:	8b 44 24 48          	mov    0x48(%esp),%eax
   21d7f:	8b 40 04             	mov    0x4(%eax),%eax
   21d82:	89 44 24 24          	mov    %eax,0x24(%esp)
// 如果b[3]大于等于0，则进行规格化处理，即对b进行左移调整b[3]为负数。
	while (b[3] >= 0) {
   21d86:	eb 12                	jmp    21d9a <fdiv+0x148>
		i++;
   21d88:	83 44 24 3c 01       	addl   $0x1,0x3c(%esp)
		shift_left(b);
   21d8d:	8d 44 24 18          	lea    0x18(%esp),%eax
   21d91:	50                   	push   %eax
   21d92:	e8 82 fd ff ff       	call   21b19 <shift_left>
   21d97:	83 c4 04             	add    $0x4,%esp
	a[3] = src1->b;
	b[0] = b[1] = 0;
	b[2] = src2->a;
	b[3] = src2->b;
// 如果b[3]大于等于0，则进行规格化处理，即对b进行左移调整b[3]为负数。
	while (b[3] >= 0) {
   21d9a:	8b 44 24 24          	mov    0x24(%esp),%eax
   21d9e:	85 c0                	test   %eax,%eax
   21da0:	79 e6                	jns    21d88 <fdiv+0x136>
		i++;
		shift_left(b);
	}
// 进行64位除法操作。
	div64(a,b,tmp);
   21da2:	8d 44 24 08          	lea    0x8(%esp),%eax
   21da6:	50                   	push   %eax
   21da7:	8d 44 24 1c          	lea    0x1c(%esp),%eax
   21dab:	50                   	push   %eax
   21dac:	8d 44 24 30          	lea    0x30(%esp),%eax
   21db0:	50                   	push   %eax
   21db1:	e8 c3 fd ff ff       	call   21b79 <div64>
   21db6:	83 c4 0c             	add    $0xc,%esp
// 如果除结果tmp[0]、tmp[1]、tmp[2]和tmp[3]都为0的话，说明结果为0,则设置指数i为0。否则进行规格化处理。
	if (tmp[0] || tmp[1] || tmp[2] || tmp[3]) {
   21db9:	8b 44 24 08          	mov    0x8(%esp),%eax
   21dbd:	85 c0                	test   %eax,%eax
   21dbf:	75 2c                	jne    21ded <fdiv+0x19b>
   21dc1:	8b 44 24 0c          	mov    0xc(%esp),%eax
   21dc5:	85 c0                	test   %eax,%eax
   21dc7:	75 24                	jne    21ded <fdiv+0x19b>
   21dc9:	8b 44 24 10          	mov    0x10(%esp),%eax
   21dcd:	85 c0                	test   %eax,%eax
   21dcf:	75 1c                	jne    21ded <fdiv+0x19b>
   21dd1:	8b 44 24 14          	mov    0x14(%esp),%eax
   21dd5:	85 c0                	test   %eax,%eax
   21dd7:	74 47                	je     21e20 <fdiv+0x1ce>
		while (i && tmp[3] >= 0) {      // 进行规格化处理。
   21dd9:	eb 12                	jmp    21ded <fdiv+0x19b>
			i--;
   21ddb:	83 6c 24 3c 01       	subl   $0x1,0x3c(%esp)
			shift_left(tmp);
   21de0:	8d 44 24 08          	lea    0x8(%esp),%eax
   21de4:	50                   	push   %eax
   21de5:	e8 2f fd ff ff       	call   21b19 <shift_left>
   21dea:	83 c4 04             	add    $0x4,%esp
	}
// 进行64位除法操作。
	div64(a,b,tmp);
// 如果除结果tmp[0]、tmp[1]、tmp[2]和tmp[3]都为0的话，说明结果为0,则设置指数i为0。否则进行规格化处理。
	if (tmp[0] || tmp[1] || tmp[2] || tmp[3]) {
		while (i && tmp[3] >= 0) {      // 进行规格化处理。
   21ded:	83 7c 24 3c 00       	cmpl   $0x0,0x3c(%esp)
   21df2:	74 08                	je     21dfc <fdiv+0x1aa>
   21df4:	8b 44 24 14          	mov    0x14(%esp),%eax
   21df8:	85 c0                	test   %eax,%eax
   21dfa:	79 df                	jns    21ddb <fdiv+0x189>
			i--;
			shift_left(tmp);
		}
		if (tmp[3] >= 0)                // 如果tmp[3]大于等于0，设置状态字非格式化异常标志位。
   21dfc:	8b 44 24 14          	mov    0x14(%esp),%eax
   21e00:	85 c0                	test   %eax,%eax
   21e02:	78 24                	js     21e28 <fdiv+0x1d6>
			set_DE();
   21e04:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   21e09:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   21e0f:	8b 92 1c 04 00 00    	mov    0x41c(%edx),%edx
   21e15:	83 ca 02             	or     $0x2,%edx
   21e18:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
	if (tmp[0] || tmp[1] || tmp[2] || tmp[3]) {
		while (i && tmp[3] >= 0) {      // 进行规格化处理。
			i--;
			shift_left(tmp);
		}
		if (tmp[3] >= 0)                // 如果tmp[3]大于等于0，设置状态字非格式化异常标志位。
   21e1e:	eb 08                	jmp    21e28 <fdiv+0x1d6>
			set_DE();
	} else
		i = 0;          // 设置结果指数为0。
   21e20:	c7 44 24 3c 00 00 00 	movl   $0x0,0x3c(%esp)
   21e27:	00 
// 如果结果指数大于0x7fff，表示产生上溢，于是设置状态字溢出异常标志位，并返回。
	if (i>0x7fff) {
   21e28:	81 7c 24 3c ff 7f 00 	cmpl   $0x7fff,0x3c(%esp)
   21e2f:	00 
   21e30:	7e 1c                	jle    21e4e <fdiv+0x1fc>
		set_OE();
   21e32:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   21e37:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   21e3d:	8b 92 1c 04 00 00    	mov    0x41c(%edx),%edx
   21e43:	83 ca 08             	or     $0x8,%edx
   21e46:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
		return;
   21e4c:	eb 53                	jmp    21ea1 <fdiv+0x24f>
	}
// 如果tmp[0]或tmp[1]不为0，则设置状态字精度异常标志位
	if (tmp[0] || tmp[1])
   21e4e:	8b 44 24 08          	mov    0x8(%esp),%eax
   21e52:	85 c0                	test   %eax,%eax
   21e54:	75 08                	jne    21e5e <fdiv+0x20c>
   21e56:	8b 44 24 0c          	mov    0xc(%esp),%eax
   21e5a:	85 c0                	test   %eax,%eax
   21e5c:	74 1a                	je     21e78 <fdiv+0x226>
		set_PE();
   21e5e:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   21e63:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   21e69:	8b 92 1c 04 00 00    	mov    0x41c(%edx),%edx
   21e6f:	83 ca 20             	or     $0x20,%edx
   21e72:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
	result->exponent = i | sign;            // 设置返回临时实数的符号位和指数值。
   21e78:	8b 44 24 3c          	mov    0x3c(%esp),%eax
   21e7c:	89 c2                	mov    %eax,%edx
   21e7e:	8b 44 24 38          	mov    0x38(%esp),%eax
   21e82:	09 c2                	or     %eax,%edx
   21e84:	8b 44 24 4c          	mov    0x4c(%esp),%eax
   21e88:	66 89 50 08          	mov    %dx,0x8(%eax)
	result->a = tmp[2];                     // 设置返回临时实数的有效值。
   21e8c:	8b 54 24 10          	mov    0x10(%esp),%edx
   21e90:	8b 44 24 4c          	mov    0x4c(%esp),%eax
   21e94:	89 10                	mov    %edx,(%eax)
	result->b = tmp[3];
   21e96:	8b 54 24 14          	mov    0x14(%esp),%edx
   21e9a:	8b 44 24 4c          	mov    0x4c(%esp),%eax
   21e9e:	89 50 04             	mov    %edx,0x4(%eax)
}
   21ea1:	83 c4 40             	add    $0x40,%esp
   21ea4:	c3                   	ret    

00021ea5 <normalize>:
#define clear_Cx() (I387.swd &= ~0x4500)

// 对临时实数a进行规格化处理。即表示成指数、有效数形式。
// 例如：102.345表示成1.02345 X 10^2。0.0001234表示成1.234 X 10^-1。当然，函数中是二进制表示。
static void normalize(temp_real * a)
{
   21ea5:	83 ec 10             	sub    $0x10,%esp
	int i = a->exponent & 0x7fff;           // 取指数值（略去符号位）。
   21ea8:	8b 44 24 14          	mov    0x14(%esp),%eax
   21eac:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21eb0:	98                   	cwtl   
   21eb1:	25 ff 7f 00 00       	and    $0x7fff,%eax
   21eb6:	89 44 24 0c          	mov    %eax,0xc(%esp)
	int sign = a->exponent & 0x8000;        // 取符号位。
   21eba:	8b 44 24 14          	mov    0x14(%esp),%eax
   21ebe:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   21ec2:	98                   	cwtl   
   21ec3:	25 00 80 00 00       	and    $0x8000,%eax
   21ec8:	89 44 24 08          	mov    %eax,0x8(%esp)

// 如果临时实数a的64位有效数（尾数）为0，那么说明a等于0。于是清a的指数，返回。
	if (!(a->a || a->b)) {
   21ecc:	8b 44 24 14          	mov    0x14(%esp),%eax
   21ed0:	8b 00                	mov    (%eax),%eax
   21ed2:	85 c0                	test   %eax,%eax
   21ed4:	75 3a                	jne    21f10 <normalize+0x6b>
   21ed6:	8b 44 24 14          	mov    0x14(%esp),%eax
   21eda:	8b 40 04             	mov    0x4(%eax),%eax
   21edd:	85 c0                	test   %eax,%eax
   21edf:	75 2f                	jne    21f10 <normalize+0x6b>
		a->exponent = 0;
   21ee1:	8b 44 24 14          	mov    0x14(%esp),%eax
   21ee5:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		return;
   21eeb:	eb 49                	jmp    21f36 <normalize+0x91>
	}
// 如果a的尾数最左端有0值位，那么将尾数左移，同时调整指数值（递减）。直到尾数的b字段最高有效位MSB是1位置（此时b表现为负值）
// 最后再添加符号位。
	while (i && a->b >= 0) {
		i--;
   21eed:	83 6c 24 0c 01       	subl   $0x1,0xc(%esp)
		__asm__("addl %0,%0 ; adcl %1,%1"
			:"=r" (a->a),"=r" (a->b)
			:"0" (a->a),"1" (a->b));
   21ef2:	8b 44 24 14          	mov    0x14(%esp),%eax
   21ef6:	8b 10                	mov    (%eax),%edx
   21ef8:	8b 44 24 14          	mov    0x14(%esp),%eax
   21efc:	8b 40 04             	mov    0x4(%eax),%eax
	}
// 如果a的尾数最左端有0值位，那么将尾数左移，同时调整指数值（递减）。直到尾数的b字段最高有效位MSB是1位置（此时b表现为负值）
// 最后再添加符号位。
	while (i && a->b >= 0) {
		i--;
		__asm__("addl %0,%0 ; adcl %1,%1"
   21eff:	01 d2                	add    %edx,%edx
   21f01:	11 c0                	adc    %eax,%eax
   21f03:	8b 4c 24 14          	mov    0x14(%esp),%ecx
   21f07:	89 11                	mov    %edx,(%ecx)
   21f09:	8b 54 24 14          	mov    0x14(%esp),%edx
   21f0d:	89 42 04             	mov    %eax,0x4(%edx)
		a->exponent = 0;
		return;
	}
// 如果a的尾数最左端有0值位，那么将尾数左移，同时调整指数值（递减）。直到尾数的b字段最高有效位MSB是1位置（此时b表现为负值）
// 最后再添加符号位。
	while (i && a->b >= 0) {
   21f10:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   21f15:	74 0b                	je     21f22 <normalize+0x7d>
   21f17:	8b 44 24 14          	mov    0x14(%esp),%eax
   21f1b:	8b 40 04             	mov    0x4(%eax),%eax
   21f1e:	85 c0                	test   %eax,%eax
   21f20:	79 cb                	jns    21eed <normalize+0x48>
		i--;
		__asm__("addl %0,%0 ; adcl %1,%1"
			:"=r" (a->a),"=r" (a->b)
			:"0" (a->a),"1" (a->b));
	}
	a->exponent = i | sign;
   21f22:	8b 44 24 0c          	mov    0xc(%esp),%eax
   21f26:	89 c2                	mov    %eax,%edx
   21f28:	8b 44 24 08          	mov    0x8(%esp),%eax
   21f2c:	09 c2                	or     %eax,%edx
   21f2e:	8b 44 24 14          	mov    0x14(%esp),%eax
   21f32:	66 89 50 08          	mov    %dx,0x8(%eax)
}
   21f36:	83 c4 10             	add    $0x10,%esp
   21f39:	c3                   	ret    

00021f3a <ftst>:

// 仿真浮点指令FTST。
// 即栈定累加器ST(0)与0比较，并根据比较结果设置条件位。若ST > 0.0，则C3，C2，C0分别为000；若ST < 0.0，则条件位为001；若
// ST == 0.0，则条件位是100；若不可比较，则条件位为111。
void ftst(const temp_real * a)
{
   21f3a:	83 ec 10             	sub    $0x10,%esp
	temp_real b;

// 首先清状态字中条件标志位，并对比较值b（ST）进行规格化处理。若b不等于零并且设置了符号位（是负数），则设置条件位C0。否则设置
// 条件位C3。
	clear_Cx();
   21f3d:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   21f42:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   21f48:	8b 92 1c 04 00 00    	mov    0x41c(%edx),%edx
   21f4e:	80 e6 ba             	and    $0xba,%dh
   21f51:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
	b = *a;
   21f57:	8b 44 24 14          	mov    0x14(%esp),%eax
   21f5b:	8b 10                	mov    (%eax),%edx
   21f5d:	89 54 24 04          	mov    %edx,0x4(%esp)
   21f61:	8b 50 04             	mov    0x4(%eax),%edx
   21f64:	89 54 24 08          	mov    %edx,0x8(%esp)
   21f68:	8b 40 08             	mov    0x8(%eax),%eax
   21f6b:	89 44 24 0c          	mov    %eax,0xc(%esp)
	normalize(&b);
   21f6f:	8d 44 24 04          	lea    0x4(%esp),%eax
   21f73:	50                   	push   %eax
   21f74:	e8 2c ff ff ff       	call   21ea5 <normalize>
   21f79:	83 c4 04             	add    $0x4,%esp
	if (b.a || b.b || b.exponent) {
   21f7c:	8b 44 24 04          	mov    0x4(%esp),%eax
   21f80:	85 c0                	test   %eax,%eax
   21f82:	75 12                	jne    21f96 <ftst+0x5c>
   21f84:	8b 44 24 08          	mov    0x8(%esp),%eax
   21f88:	85 c0                	test   %eax,%eax
   21f8a:	75 0a                	jne    21f96 <ftst+0x5c>
   21f8c:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   21f91:	66 85 c0             	test   %ax,%ax
   21f94:	74 26                	je     21fbc <ftst+0x82>
		if (b.exponent < 0)
   21f96:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   21f9b:	66 85 c0             	test   %ax,%ax
   21f9e:	79 36                	jns    21fd6 <ftst+0x9c>
			set_C0();
   21fa0:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   21fa5:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   21fab:	8b 92 1c 04 00 00    	mov    0x41c(%edx),%edx
   21fb1:	80 ce 01             	or     $0x1,%dh
   21fb4:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
// 条件位C3。
	clear_Cx();
	b = *a;
	normalize(&b);
	if (b.a || b.b || b.exponent) {
		if (b.exponent < 0)
   21fba:	eb 1a                	jmp    21fd6 <ftst+0x9c>
			set_C0();
	} else
		set_C3();
   21fbc:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   21fc1:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   21fc7:	8b 92 1c 04 00 00    	mov    0x41c(%edx),%edx
   21fcd:	80 ce 40             	or     $0x40,%dh
   21fd0:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
}
   21fd6:	90                   	nop
   21fd7:	83 c4 10             	add    $0x10,%esp
   21fda:	c3                   	ret    

00021fdb <fcom>:

// 仿真浮点指令FCOM。
// 比较两个参数src1、src2。并根据比较结果设置条件位。若src1 > src2，则C3，C2，C0分别为000；若src1 < src2，则条件位为
// 001；若两者相等，则条件位是100。
void fcom(const temp_real * src1, const temp_real * src2)
{
   21fdb:	83 ec 1c             	sub    $0x1c,%esp
	temp_real a;

	a = *src1;
   21fde:	8b 44 24 20          	mov    0x20(%esp),%eax
   21fe2:	8b 10                	mov    (%eax),%edx
   21fe4:	89 54 24 04          	mov    %edx,0x4(%esp)
   21fe8:	8b 50 04             	mov    0x4(%eax),%edx
   21feb:	89 54 24 08          	mov    %edx,0x8(%esp)
   21fef:	8b 40 08             	mov    0x8(%eax),%eax
   21ff2:	89 44 24 0c          	mov    %eax,0xc(%esp)
	a.exponent ^= 0x8000;           // 符号位取反。
   21ff6:	0f b7 44 24 0c       	movzwl 0xc(%esp),%eax
   21ffb:	66 35 00 80          	xor    $0x8000,%ax
   21fff:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
	fadd(&a,src2,&a);               // 两者相加（即相减）。
   22004:	83 ec 04             	sub    $0x4,%esp
   22007:	8d 44 24 08          	lea    0x8(%esp),%eax
   2200b:	50                   	push   %eax
   2200c:	ff 74 24 2c          	pushl  0x2c(%esp)
   22010:	8d 44 24 10          	lea    0x10(%esp),%eax
   22014:	50                   	push   %eax
   22015:	e8 e0 f7 ff ff       	call   217fa <fadd>
   2201a:	83 c4 10             	add    $0x10,%esp
	ftst(&a);                       // 测试结果并设置条件位。
   2201d:	83 ec 0c             	sub    $0xc,%esp
   22020:	8d 44 24 10          	lea    0x10(%esp),%eax
   22024:	50                   	push   %eax
   22025:	e8 10 ff ff ff       	call   21f3a <ftst>
   2202a:	83 c4 10             	add    $0x10,%esp
}
   2202d:	90                   	nop
   2202e:	83 c4 1c             	add    $0x1c,%esp
   22031:	c3                   	ret    

00022032 <fucom>:

// 仿真浮点指令FUCOM（无次序比较）。
// 用于操作数之一是NaN的比较。
void fucom(const temp_real * src1, const temp_real * src2)
{
   22032:	83 ec 0c             	sub    $0xc,%esp
	fcom(src1,src2);
   22035:	83 ec 08             	sub    $0x8,%esp
   22038:	ff 74 24 1c          	pushl  0x1c(%esp)
   2203c:	ff 74 24 1c          	pushl  0x1c(%esp)
   22040:	e8 96 ff ff ff       	call   21fdb <fcom>
   22045:	83 c4 10             	add    $0x10,%esp
}
   22048:	90                   	nop
   22049:	83 c4 0c             	add    $0xc,%esp
   2204c:	c3                   	ret    

0002204d <short_to_temp>:
// 短实数长度是32位，基有效数（尾数）长度是23位，指数是8位，还有1个符号位。
void short_to_temp(const short_real * a, temp_real * b)
{
// 首先处理被转换的短实数是0的情况。若为0,则设置对应临时实数b的有效数为0。然后根据短实数符号位设置临时实数的符号位，即exponent
// 的最高有效位。
	if (!(*a & 0x7fffffff)) {
   2204d:	8b 44 24 04          	mov    0x4(%esp),%eax
   22051:	8b 00                	mov    (%eax),%eax
   22053:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
   22058:	85 c0                	test   %eax,%eax
   2205a:	75 3a                	jne    22096 <short_to_temp+0x49>
		b->a = b->b = 0;                // 置临时实数的有效数 = 0。
   2205c:	8b 44 24 08          	mov    0x8(%esp),%eax
   22060:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   22067:	8b 44 24 08          	mov    0x8(%esp),%eax
   2206b:	8b 50 04             	mov    0x4(%eax),%edx
   2206e:	8b 44 24 08          	mov    0x8(%esp),%eax
   22072:	89 10                	mov    %edx,(%eax)
		if (*a)
   22074:	8b 44 24 04          	mov    0x4(%esp),%eax
   22078:	8b 00                	mov    (%eax),%eax
   2207a:	85 c0                	test   %eax,%eax
   2207c:	74 0c                	je     2208a <short_to_temp+0x3d>
			b->exponent = 0x8000;   // 设置符号位。
   2207e:	8b 44 24 08          	mov    0x8(%esp),%eax
   22082:	66 c7 40 08 00 80    	movw   $0x8000,0x8(%eax)
		else
			b->exponent = 0;
		return;
   22088:	eb 67                	jmp    220f1 <short_to_temp+0xa4>
	if (!(*a & 0x7fffffff)) {
		b->a = b->b = 0;                // 置临时实数的有效数 = 0。
		if (*a)
			b->exponent = 0x8000;   // 设置符号位。
		else
			b->exponent = 0;
   2208a:	8b 44 24 08          	mov    0x8(%esp),%eax
   2208e:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		return;
   22094:	eb 5b                	jmp    220f1 <short_to_temp+0xa4>
	}
// 对于一般短实数，先确定对应临时实数的指数值。这里需要用到整型数偏置表示方法的概念。短实数指数的偏置量是127，而临时实数指数的偏置
// 量是16383。因此在取出短实数中指数值后需要变更其中的偏置量为16383。此时就形成了临时实数格式的指数值exponent。另外，如果短实数
// 是负数，则需要设置临时实数的符号位（位79）。下一步设置尾数值。方法是把短实数左移8位，让23位尾数最高有效位处于临时实数的位62处。
// 而临时实数尾数位63处需要恒置一个1，即需要或上0x80000000。最后清掉临时实数低32位有效数。
	b->exponent = ((*a>>23) & 0xff)-127+16383;      // 取出短实数指数位，更换偏置量。
   22096:	8b 44 24 04          	mov    0x4(%esp),%eax
   2209a:	8b 00                	mov    (%eax),%eax
   2209c:	c1 f8 17             	sar    $0x17,%eax
   2209f:	0f b6 c0             	movzbl %al,%eax
   220a2:	66 05 80 3f          	add    $0x3f80,%ax
   220a6:	89 c2                	mov    %eax,%edx
   220a8:	8b 44 24 08          	mov    0x8(%esp),%eax
   220ac:	66 89 50 08          	mov    %dx,0x8(%eax)
	if (*a<0)
   220b0:	8b 44 24 04          	mov    0x4(%esp),%eax
   220b4:	8b 00                	mov    (%eax),%eax
   220b6:	85 c0                	test   %eax,%eax
   220b8:	79 16                	jns    220d0 <short_to_temp+0x83>
		b->exponent |= 0x8000;                  // 若为负数则设置符号位。
   220ba:	8b 44 24 08          	mov    0x8(%esp),%eax
   220be:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   220c2:	66 0d 00 80          	or     $0x8000,%ax
   220c6:	89 c2                	mov    %eax,%edx
   220c8:	8b 44 24 08          	mov    0x8(%esp),%eax
   220cc:	66 89 50 08          	mov    %dx,0x8(%eax)
	b->b = (*a<<8) | 0x80000000;                    // 放置尾数，添加固定1值。
   220d0:	8b 44 24 04          	mov    0x4(%esp),%eax
   220d4:	8b 00                	mov    (%eax),%eax
   220d6:	c1 e0 08             	shl    $0x8,%eax
   220d9:	0d 00 00 00 80       	or     $0x80000000,%eax
   220de:	89 c2                	mov    %eax,%edx
   220e0:	8b 44 24 08          	mov    0x8(%esp),%eax
   220e4:	89 50 04             	mov    %edx,0x4(%eax)
	b->a = 0;
   220e7:	8b 44 24 08          	mov    0x8(%esp),%eax
   220eb:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   220f1:	c3                   	ret    

000220f2 <long_to_temp>:

// 长实数转换成临时实数格式。
// 方法与short_to_temp()安全一样。不过长实数指数偏置量是1034。
void long_to_temp(const long_real * a, temp_real * b)
{
	if (!a->a && !(a->b & 0x7fffffff)) {
   220f2:	8b 44 24 04          	mov    0x4(%esp),%eax
   220f6:	8b 00                	mov    (%eax),%eax
   220f8:	85 c0                	test   %eax,%eax
   220fa:	75 4b                	jne    22147 <long_to_temp+0x55>
   220fc:	8b 44 24 04          	mov    0x4(%esp),%eax
   22100:	8b 40 04             	mov    0x4(%eax),%eax
   22103:	25 ff ff ff 7f       	and    $0x7fffffff,%eax
   22108:	85 c0                	test   %eax,%eax
   2210a:	75 3b                	jne    22147 <long_to_temp+0x55>
		b->a = b->b = 0;                // 置临时实数的有效数 = 0。
   2210c:	8b 44 24 08          	mov    0x8(%esp),%eax
   22110:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   22117:	8b 44 24 08          	mov    0x8(%esp),%eax
   2211b:	8b 50 04             	mov    0x4(%eax),%edx
   2211e:	8b 44 24 08          	mov    0x8(%esp),%eax
   22122:	89 10                	mov    %edx,(%eax)
		if (a->b)
   22124:	8b 44 24 04          	mov    0x4(%esp),%eax
   22128:	8b 40 04             	mov    0x4(%eax),%eax
   2212b:	85 c0                	test   %eax,%eax
   2212d:	74 0c                	je     2213b <long_to_temp+0x49>
			b->exponent = 0x8000;   // 设置符号位。
   2212f:	8b 44 24 08          	mov    0x8(%esp),%eax
   22133:	66 c7 40 08 00 80    	movw   $0x8000,0x8(%eax)
		else
			b->exponent = 0;
		return;
   22139:	eb 7f                	jmp    221ba <long_to_temp+0xc8>
	if (!a->a && !(a->b & 0x7fffffff)) {
		b->a = b->b = 0;                // 置临时实数的有效数 = 0。
		if (a->b)
			b->exponent = 0x8000;   // 设置符号位。
		else
			b->exponent = 0;
   2213b:	8b 44 24 08          	mov    0x8(%esp),%eax
   2213f:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		return;
   22145:	eb 73                	jmp    221ba <long_to_temp+0xc8>
	}
	b->exponent = ((a->b >> 20) & 0x7ff)-1023+16383;        // 取长实数指数，更换偏置量。
   22147:	8b 44 24 04          	mov    0x4(%esp),%eax
   2214b:	8b 40 04             	mov    0x4(%eax),%eax
   2214e:	c1 f8 14             	sar    $0x14,%eax
   22151:	66 25 ff 07          	and    $0x7ff,%ax
   22155:	66 05 00 3c          	add    $0x3c00,%ax
   22159:	89 c2                	mov    %eax,%edx
   2215b:	8b 44 24 08          	mov    0x8(%esp),%eax
   2215f:	66 89 50 08          	mov    %dx,0x8(%eax)
	if (a->b<0)
   22163:	8b 44 24 04          	mov    0x4(%esp),%eax
   22167:	8b 40 04             	mov    0x4(%eax),%eax
   2216a:	85 c0                	test   %eax,%eax
   2216c:	79 16                	jns    22184 <long_to_temp+0x92>
		b->exponent |= 0x8000;          // 若为负数则设置符号位。
   2216e:	8b 44 24 08          	mov    0x8(%esp),%eax
   22172:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   22176:	66 0d 00 80          	or     $0x8000,%ax
   2217a:	89 c2                	mov    %eax,%edx
   2217c:	8b 44 24 08          	mov    0x8(%esp),%eax
   22180:	66 89 50 08          	mov    %dx,0x8(%eax)
	b->b = 0x80000000 | (a->b<<11) | (((unsigned long)a->a)>>21);
   22184:	8b 44 24 04          	mov    0x4(%esp),%eax
   22188:	8b 40 04             	mov    0x4(%eax),%eax
   2218b:	c1 e0 0b             	shl    $0xb,%eax
   2218e:	89 c2                	mov    %eax,%edx
   22190:	8b 44 24 04          	mov    0x4(%esp),%eax
   22194:	8b 00                	mov    (%eax),%eax
   22196:	c1 e8 15             	shr    $0x15,%eax
   22199:	09 d0                	or     %edx,%eax
   2219b:	0d 00 00 00 80       	or     $0x80000000,%eax
   221a0:	89 c2                	mov    %eax,%edx
   221a2:	8b 44 24 08          	mov    0x8(%esp),%eax
   221a6:	89 50 04             	mov    %edx,0x4(%eax)
	b->a = a->a<<11;                        // 放置尾数，添1。
   221a9:	8b 44 24 04          	mov    0x4(%esp),%eax
   221ad:	8b 00                	mov    (%eax),%eax
   221af:	c1 e0 0b             	shl    $0xb,%eax
   221b2:	89 c2                	mov    %eax,%edx
   221b4:	8b 44 24 08          	mov    0x8(%esp),%eax
   221b8:	89 10                	mov    %edx,(%eax)
}
   221ba:	c3                   	ret    

000221bb <temp_to_short>:
// 临时实数转换成短实数格式。
// 过程与short_to_temp()相反，但需要处理精度和舍入问题。
void temp_to_short(const temp_real * a, short_real * b)
{
// 如果指数部分为0，则根据有无符号位设置短实数为-0或0。
	if (!(a->exponent & 0x7fff)) {
   221bb:	8b 44 24 04          	mov    0x4(%esp),%eax
   221bf:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   221c3:	98                   	cwtl   
   221c4:	25 ff 7f 00 00       	and    $0x7fff,%eax
   221c9:	85 c0                	test   %eax,%eax
   221cb:	75 24                	jne    221f1 <temp_to_short+0x36>
		*b = (a->exponent)?0x80000000:0;
   221cd:	8b 44 24 04          	mov    0x4(%esp),%eax
   221d1:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   221d5:	66 85 c0             	test   %ax,%ax
   221d8:	74 07                	je     221e1 <temp_to_short+0x26>
   221da:	ba 00 00 00 80       	mov    $0x80000000,%edx
   221df:	eb 05                	jmp    221e6 <temp_to_short+0x2b>
   221e1:	ba 00 00 00 00       	mov    $0x0,%edx
   221e6:	8b 44 24 08          	mov    0x8(%esp),%eax
   221ea:	89 10                	mov    %edx,(%eax)
		return;
   221ec:	e9 00 01 00 00       	jmp    222f1 <temp_to_short+0x136>
	}
// 先处理指数部分。即更换临时实数指数偏置量（16383）为短实数的偏置量127。
	*b = ((((long) a->exponent)-16383+127) << 23) & 0x7f800000;
   221f1:	8b 44 24 04          	mov    0x4(%esp),%eax
   221f5:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   221f9:	98                   	cwtl   
   221fa:	2d 80 3f 00 00       	sub    $0x3f80,%eax
   221ff:	c1 e0 17             	shl    $0x17,%eax
   22202:	25 00 00 80 7f       	and    $0x7f800000,%eax
   22207:	89 c2                	mov    %eax,%edx
   22209:	8b 44 24 08          	mov    0x8(%esp),%eax
   2220d:	89 10                	mov    %edx,(%eax)
	if (a->exponent < 0)                    // 若是负数则设置符号位。
   2220f:	8b 44 24 04          	mov    0x4(%esp),%eax
   22213:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   22217:	66 85 c0             	test   %ax,%ax
   2221a:	79 13                	jns    2222f <temp_to_short+0x74>
		*b |= 0x80000000;
   2221c:	8b 44 24 08          	mov    0x8(%esp),%eax
   22220:	8b 00                	mov    (%eax),%eax
   22222:	0d 00 00 00 80       	or     $0x80000000,%eax
   22227:	89 c2                	mov    %eax,%edx
   22229:	8b 44 24 08          	mov    0x8(%esp),%eax
   2222d:	89 10                	mov    %edx,(%eax)
	*b |= (a->b >> 8) & 0x007fffff;         // 取临时实数有效数高23位。
   2222f:	8b 44 24 08          	mov    0x8(%esp),%eax
   22233:	8b 10                	mov    (%eax),%edx
   22235:	8b 44 24 04          	mov    0x4(%esp),%eax
   22239:	8b 40 04             	mov    0x4(%eax),%eax
   2223c:	c1 f8 08             	sar    $0x8,%eax
   2223f:	25 ff ff 7f 00       	and    $0x7fffff,%eax
   22244:	09 c2                	or     %eax,%edx
   22246:	8b 44 24 08          	mov    0x8(%esp),%eax
   2224a:	89 10                	mov    %edx,(%eax)
// 根据控制字中的舍入设置执行舍入操作。
	switch (ROUNDING) {
   2224c:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   22251:	8b 80 18 04 00 00    	mov    0x418(%eax),%eax
   22257:	c1 f8 0a             	sar    $0xa,%eax
   2225a:	83 e0 03             	and    $0x3,%eax
   2225d:	83 f8 01             	cmp    $0x1,%eax
   22260:	74 2f                	je     22291 <temp_to_short+0xd6>
   22262:	83 f8 02             	cmp    $0x2,%eax
   22265:	74 56                	je     222bd <temp_to_short+0x102>
   22267:	85 c0                	test   %eax,%eax
   22269:	0f 85 82 00 00 00    	jne    222f1 <temp_to_short+0x136>
		case ROUND_NEAREST:
			if ((a->b & 0xff) > 0x80)
   2226f:	8b 44 24 04          	mov    0x4(%esp),%eax
   22273:	8b 40 04             	mov    0x4(%eax),%eax
   22276:	0f b6 c0             	movzbl %al,%eax
   22279:	3d 80 00 00 00       	cmp    $0x80,%eax
   2227e:	7e 6a                	jle    222ea <temp_to_short+0x12f>
				++*b;
   22280:	8b 44 24 08          	mov    0x8(%esp),%eax
   22284:	8b 00                	mov    (%eax),%eax
   22286:	8d 50 01             	lea    0x1(%eax),%edx
   22289:	8b 44 24 08          	mov    0x8(%esp),%eax
   2228d:	89 10                	mov    %edx,(%eax)
			break;
   2228f:	eb 59                	jmp    222ea <temp_to_short+0x12f>
		case ROUND_DOWN:
			if ((a->exponent & 0x8000) && (a->b & 0xff))
   22291:	8b 44 24 04          	mov    0x4(%esp),%eax
   22295:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   22299:	66 85 c0             	test   %ax,%ax
   2229c:	79 4f                	jns    222ed <temp_to_short+0x132>
   2229e:	8b 44 24 04          	mov    0x4(%esp),%eax
   222a2:	8b 40 04             	mov    0x4(%eax),%eax
   222a5:	0f b6 c0             	movzbl %al,%eax
   222a8:	85 c0                	test   %eax,%eax
   222aa:	74 41                	je     222ed <temp_to_short+0x132>
				++*b;
   222ac:	8b 44 24 08          	mov    0x8(%esp),%eax
   222b0:	8b 00                	mov    (%eax),%eax
   222b2:	8d 50 01             	lea    0x1(%eax),%edx
   222b5:	8b 44 24 08          	mov    0x8(%esp),%eax
   222b9:	89 10                	mov    %edx,(%eax)
			break;
   222bb:	eb 30                	jmp    222ed <temp_to_short+0x132>
		case ROUND_UP:
			if (!(a->exponent & 0x8000) && (a->b & 0xff))
   222bd:	8b 44 24 04          	mov    0x4(%esp),%eax
   222c1:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   222c5:	66 85 c0             	test   %ax,%ax
   222c8:	78 26                	js     222f0 <temp_to_short+0x135>
   222ca:	8b 44 24 04          	mov    0x4(%esp),%eax
   222ce:	8b 40 04             	mov    0x4(%eax),%eax
   222d1:	0f b6 c0             	movzbl %al,%eax
   222d4:	85 c0                	test   %eax,%eax
   222d6:	74 18                	je     222f0 <temp_to_short+0x135>
				++*b;
   222d8:	8b 44 24 08          	mov    0x8(%esp),%eax
   222dc:	8b 00                	mov    (%eax),%eax
   222de:	8d 50 01             	lea    0x1(%eax),%edx
   222e1:	8b 44 24 08          	mov    0x8(%esp),%eax
   222e5:	89 10                	mov    %edx,(%eax)
			break;
   222e7:	90                   	nop
   222e8:	eb 06                	jmp    222f0 <temp_to_short+0x135>
// 根据控制字中的舍入设置执行舍入操作。
	switch (ROUNDING) {
		case ROUND_NEAREST:
			if ((a->b & 0xff) > 0x80)
				++*b;
			break;
   222ea:	90                   	nop
   222eb:	eb 04                	jmp    222f1 <temp_to_short+0x136>
		case ROUND_DOWN:
			if ((a->exponent & 0x8000) && (a->b & 0xff))
				++*b;
			break;
   222ed:	90                   	nop
   222ee:	eb 01                	jmp    222f1 <temp_to_short+0x136>
		case ROUND_UP:
			if (!(a->exponent & 0x8000) && (a->b & 0xff))
				++*b;
			break;
   222f0:	90                   	nop
	}
}
   222f1:	c3                   	ret    

000222f2 <temp_to_long>:

// 临时实数转换成长实数。
void temp_to_long(const temp_real * a, long_real * b)
{
// 如果指数部分为0，则根据有无符号位设置长实数为-0或0。
	if (!(a->exponent & 0x7fff)) {
   222f2:	8b 44 24 04          	mov    0x4(%esp),%eax
   222f6:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   222fa:	98                   	cwtl   
   222fb:	25 ff 7f 00 00       	and    $0x7fff,%eax
   22300:	85 c0                	test   %eax,%eax
   22302:	75 2f                	jne    22333 <temp_to_long+0x41>
		b->a = 0;
   22304:	8b 44 24 08          	mov    0x8(%esp),%eax
   22308:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		b->b = (a->exponent)?0x80000000:0;
   2230e:	8b 44 24 04          	mov    0x4(%esp),%eax
   22312:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   22316:	66 85 c0             	test   %ax,%ax
   22319:	74 07                	je     22322 <temp_to_long+0x30>
   2231b:	ba 00 00 00 80       	mov    $0x80000000,%edx
   22320:	eb 05                	jmp    22327 <temp_to_long+0x35>
   22322:	ba 00 00 00 00       	mov    $0x0,%edx
   22327:	8b 44 24 08          	mov    0x8(%esp),%eax
   2232b:	89 50 04             	mov    %edx,0x4(%eax)
		return;
   2232e:	e9 6b 01 00 00       	jmp    2249e <temp_to_long+0x1ac>
	}
// 先处理指数部分。即更换临时实数指数偏置量（16383）为长实数的偏置量1023.
	b->b = (((0x7fff & (long) a->exponent)-16383+1023) << 20) & 0x7ff00000;
   22333:	8b 44 24 04          	mov    0x4(%esp),%eax
   22337:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   2233b:	98                   	cwtl   
   2233c:	25 ff 7f 00 00       	and    $0x7fff,%eax
   22341:	2d 00 3c 00 00       	sub    $0x3c00,%eax
   22346:	c1 e0 14             	shl    $0x14,%eax
   22349:	25 00 00 f0 7f       	and    $0x7ff00000,%eax
   2234e:	89 c2                	mov    %eax,%edx
   22350:	8b 44 24 08          	mov    0x8(%esp),%eax
   22354:	89 50 04             	mov    %edx,0x4(%eax)
	if (a->exponent < 0)            // 若是负数则设置符号位。
   22357:	8b 44 24 04          	mov    0x4(%esp),%eax
   2235b:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   2235f:	66 85 c0             	test   %ax,%ax
   22362:	79 15                	jns    22379 <temp_to_long+0x87>
		b->b |= 0x80000000;
   22364:	8b 44 24 08          	mov    0x8(%esp),%eax
   22368:	8b 40 04             	mov    0x4(%eax),%eax
   2236b:	0d 00 00 00 80       	or     $0x80000000,%eax
   22370:	89 c2                	mov    %eax,%edx
   22372:	8b 44 24 08          	mov    0x8(%esp),%eax
   22376:	89 50 04             	mov    %edx,0x4(%eax)
	b->b |= (a->b >> 11) & 0x000fffff;      // 取临时实数有效数高20位。
   22379:	8b 44 24 08          	mov    0x8(%esp),%eax
   2237d:	8b 50 04             	mov    0x4(%eax),%edx
   22380:	8b 44 24 04          	mov    0x4(%esp),%eax
   22384:	8b 40 04             	mov    0x4(%eax),%eax
   22387:	c1 f8 0b             	sar    $0xb,%eax
   2238a:	25 ff ff 0f 00       	and    $0xfffff,%eax
   2238f:	09 c2                	or     %eax,%edx
   22391:	8b 44 24 08          	mov    0x8(%esp),%eax
   22395:	89 50 04             	mov    %edx,0x4(%eax)
	b->a = a->b << 21;
   22398:	8b 44 24 04          	mov    0x4(%esp),%eax
   2239c:	8b 40 04             	mov    0x4(%eax),%eax
   2239f:	c1 e0 15             	shl    $0x15,%eax
   223a2:	89 c2                	mov    %eax,%edx
   223a4:	8b 44 24 08          	mov    0x8(%esp),%eax
   223a8:	89 10                	mov    %edx,(%eax)
	b->a |= (a->a >> 11) & 0x001fffff;
   223aa:	8b 44 24 08          	mov    0x8(%esp),%eax
   223ae:	8b 10                	mov    (%eax),%edx
   223b0:	8b 44 24 04          	mov    0x4(%esp),%eax
   223b4:	8b 00                	mov    (%eax),%eax
   223b6:	c1 e8 0b             	shr    $0xb,%eax
   223b9:	09 c2                	or     %eax,%edx
   223bb:	8b 44 24 08          	mov    0x8(%esp),%eax
   223bf:	89 10                	mov    %edx,(%eax)
// 根据控制字中的舍入设置执行舍入操作。
	switch (ROUNDING) {
   223c1:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   223c6:	8b 80 18 04 00 00    	mov    0x418(%eax),%eax
   223cc:	c1 f8 0a             	sar    $0xa,%eax
   223cf:	83 e0 03             	and    $0x3,%eax
   223d2:	83 f8 01             	cmp    $0x1,%eax
   223d5:	74 45                	je     2241c <temp_to_long+0x12a>
   223d7:	83 f8 02             	cmp    $0x2,%eax
   223da:	74 7d                	je     22459 <temp_to_long+0x167>
   223dc:	85 c0                	test   %eax,%eax
   223de:	0f 85 ba 00 00 00    	jne    2249e <temp_to_long+0x1ac>
		case ROUND_NEAREST:
			if ((a->a & 0x7ff) > 0x400)
   223e4:	8b 44 24 04          	mov    0x4(%esp),%eax
   223e8:	8b 00                	mov    (%eax),%eax
   223ea:	25 ff 07 00 00       	and    $0x7ff,%eax
   223ef:	3d 00 04 00 00       	cmp    $0x400,%eax
   223f4:	0f 8e 9d 00 00 00    	jle    22497 <temp_to_long+0x1a5>
				__asm__("addl $1,%0 ; adcl $0,%1"
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
   223fa:	8b 44 24 08          	mov    0x8(%esp),%eax
   223fe:	8b 10                	mov    (%eax),%edx
   22400:	8b 44 24 08          	mov    0x8(%esp),%eax
   22404:	8b 40 04             	mov    0x4(%eax),%eax
	b->a |= (a->a >> 11) & 0x001fffff;
// 根据控制字中的舍入设置执行舍入操作。
	switch (ROUNDING) {
		case ROUND_NEAREST:
			if ((a->a & 0x7ff) > 0x400)
				__asm__("addl $1,%0 ; adcl $0,%1"
   22407:	83 c2 01             	add    $0x1,%edx
   2240a:	83 d0 00             	adc    $0x0,%eax
   2240d:	8b 4c 24 08          	mov    0x8(%esp),%ecx
   22411:	89 11                	mov    %edx,(%ecx)
   22413:	8b 54 24 08          	mov    0x8(%esp),%edx
   22417:	89 42 04             	mov    %eax,0x4(%edx)
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
			break;
   2241a:	eb 7b                	jmp    22497 <temp_to_long+0x1a5>
		case ROUND_DOWN:
			if ((a->exponent & 0x8000) && (a->b & 0xff))
   2241c:	8b 44 24 04          	mov    0x4(%esp),%eax
   22420:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   22424:	66 85 c0             	test   %ax,%ax
   22427:	79 71                	jns    2249a <temp_to_long+0x1a8>
   22429:	8b 44 24 04          	mov    0x4(%esp),%eax
   2242d:	8b 40 04             	mov    0x4(%eax),%eax
   22430:	0f b6 c0             	movzbl %al,%eax
   22433:	85 c0                	test   %eax,%eax
   22435:	74 63                	je     2249a <temp_to_long+0x1a8>
				__asm__("addl $1,%0 ; adcl $0,%1"
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
   22437:	8b 44 24 08          	mov    0x8(%esp),%eax
   2243b:	8b 10                	mov    (%eax),%edx
   2243d:	8b 44 24 08          	mov    0x8(%esp),%eax
   22441:	8b 40 04             	mov    0x4(%eax),%eax
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
			break;
		case ROUND_DOWN:
			if ((a->exponent & 0x8000) && (a->b & 0xff))
				__asm__("addl $1,%0 ; adcl $0,%1"
   22444:	83 c2 01             	add    $0x1,%edx
   22447:	83 d0 00             	adc    $0x0,%eax
   2244a:	8b 4c 24 08          	mov    0x8(%esp),%ecx
   2244e:	89 11                	mov    %edx,(%ecx)
   22450:	8b 54 24 08          	mov    0x8(%esp),%edx
   22454:	89 42 04             	mov    %eax,0x4(%edx)
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
			break;
   22457:	eb 41                	jmp    2249a <temp_to_long+0x1a8>
		case ROUND_UP:
			if (!(a->exponent & 0x8000) && (a->b & 0xff))
   22459:	8b 44 24 04          	mov    0x4(%esp),%eax
   2245d:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   22461:	66 85 c0             	test   %ax,%ax
   22464:	78 37                	js     2249d <temp_to_long+0x1ab>
   22466:	8b 44 24 04          	mov    0x4(%esp),%eax
   2246a:	8b 40 04             	mov    0x4(%eax),%eax
   2246d:	0f b6 c0             	movzbl %al,%eax
   22470:	85 c0                	test   %eax,%eax
   22472:	74 29                	je     2249d <temp_to_long+0x1ab>
				__asm__("addl $1,%0 ; adcl $0,%1"
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
   22474:	8b 44 24 08          	mov    0x8(%esp),%eax
   22478:	8b 10                	mov    (%eax),%edx
   2247a:	8b 44 24 08          	mov    0x8(%esp),%eax
   2247e:	8b 40 04             	mov    0x4(%eax),%eax
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
			break;
		case ROUND_UP:
			if (!(a->exponent & 0x8000) && (a->b & 0xff))
				__asm__("addl $1,%0 ; adcl $0,%1"
   22481:	83 c2 01             	add    $0x1,%edx
   22484:	83 d0 00             	adc    $0x0,%eax
   22487:	8b 4c 24 08          	mov    0x8(%esp),%ecx
   2248b:	89 11                	mov    %edx,(%ecx)
   2248d:	8b 54 24 08          	mov    0x8(%esp),%edx
   22491:	89 42 04             	mov    %eax,0x4(%edx)
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
			break;
   22494:	90                   	nop
   22495:	eb 06                	jmp    2249d <temp_to_long+0x1ab>
		case ROUND_NEAREST:
			if ((a->a & 0x7ff) > 0x400)
				__asm__("addl $1,%0 ; adcl $0,%1"
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
			break;
   22497:	90                   	nop
   22498:	eb 04                	jmp    2249e <temp_to_long+0x1ac>
		case ROUND_DOWN:
			if ((a->exponent & 0x8000) && (a->b & 0xff))
				__asm__("addl $1,%0 ; adcl $0,%1"
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
			break;
   2249a:	90                   	nop
   2249b:	eb 01                	jmp    2249e <temp_to_long+0x1ac>
		case ROUND_UP:
			if (!(a->exponent & 0x8000) && (a->b & 0xff))
				__asm__("addl $1,%0 ; adcl $0,%1"
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
			break;
   2249d:	90                   	nop
	}
}
   2249e:	c3                   	ret    

0002249f <real_to_int>:

// 临时实数转换成临时整数格式。
// 临时整数也用10字节表示。其中低8字节是无符号整数值，高2字节表示指数值和符号位。如果高2字节最高有效位为1，则表示是负数；
// 若位0，表示是正数。
void real_to_int(const temp_real * a, temp_int * b)
{
   2249f:	53                   	push   %ebx
   224a0:	83 ec 10             	sub    $0x10,%esp
// 整数值最大值是2的63次方，加上临时实数偏置值16383,表示一个整数值转换为临时实数，临时实数指数最大值，减去临时实数指数，
// 得到指数差值（相当于与最大整数值的差值）。
	int shift =  16383 + 63 - (a->exponent & 0x7fff);
   224a3:	8b 44 24 18          	mov    0x18(%esp),%eax
   224a7:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   224ab:	98                   	cwtl   
   224ac:	25 ff 7f 00 00       	and    $0x7fff,%eax
   224b1:	ba 3e 40 00 00       	mov    $0x403e,%edx
   224b6:	29 c2                	sub    %eax,%edx
   224b8:	89 d0                	mov    %edx,%eax
   224ba:	89 44 24 0c          	mov    %eax,0xc(%esp)
	unsigned long underflow;

	b->a = b->b = underflow = 0;    // 初始化临时整数值为0。
   224be:	c7 44 24 08 00 00 00 	movl   $0x0,0x8(%esp)
   224c5:	00 
   224c6:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   224ca:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   224d1:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   224d5:	8b 50 04             	mov    0x4(%eax),%edx
   224d8:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   224dc:	89 10                	mov    %edx,(%eax)
	b->sign = (a->exponent < 0);    // 置临时整数符号与临时实数符号一致。
   224de:	8b 44 24 18          	mov    0x18(%esp),%eax
   224e2:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   224e6:	66 c1 e8 0f          	shr    $0xf,%ax
   224ea:	0f b6 d0             	movzbl %al,%edx
   224ed:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   224f1:	66 89 50 08          	mov    %dx,0x8(%eax)
	if (shift < 0) {                // 如果指数差值小于0，说明这个临时实数不能放入临时整数中，
   224f5:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   224fa:	79 1f                	jns    2251b <real_to_int+0x7c>
		set_OE();               // 置状态字溢出位。
   224fc:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   22501:	8b 15 a0 e1 02 00    	mov    0x2e1a0,%edx
   22507:	8b 92 1c 04 00 00    	mov    0x41c(%edx),%edx
   2250d:	83 ca 08             	or     $0x8,%edx
   22510:	89 90 1c 04 00 00    	mov    %edx,0x41c(%eax)
		return;
   22516:	e9 8b 01 00 00       	jmp    226a6 <real_to_int+0x207>
	}
// 如果两值差值小于2的32次方，直接把实数值放入整数值。
	if (shift < 32) {
   2251b:	83 7c 24 0c 1f       	cmpl   $0x1f,0xc(%esp)
   22520:	7f 1c                	jg     2253e <real_to_int+0x9f>
		b->b = a->b; b->a = a->a;
   22522:	8b 44 24 18          	mov    0x18(%esp),%eax
   22526:	8b 50 04             	mov    0x4(%eax),%edx
   22529:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   2252d:	89 50 04             	mov    %edx,0x4(%eax)
   22530:	8b 44 24 18          	mov    0x18(%esp),%eax
   22534:	8b 10                	mov    (%eax),%edx
   22536:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   2253a:	89 10                	mov    %edx,(%eax)
   2253c:	eb 40                	jmp    2257e <real_to_int+0xdf>
// 如果两值差值介于2的32次方与64次方之间，把实数高位a->b放入整数低位b->a，然后把实数低位放入下溢出变量underflow，指数差值
// shift-32。
	} else if (shift < 64) {
   2253e:	83 7c 24 0c 3f       	cmpl   $0x3f,0xc(%esp)
   22543:	7f 1e                	jg     22563 <real_to_int+0xc4>
		b->a = a->b; underflow = a->a;
   22545:	8b 44 24 18          	mov    0x18(%esp),%eax
   22549:	8b 50 04             	mov    0x4(%eax),%edx
   2254c:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   22550:	89 10                	mov    %edx,(%eax)
   22552:	8b 44 24 18          	mov    0x18(%esp),%eax
   22556:	8b 00                	mov    (%eax),%eax
   22558:	89 44 24 08          	mov    %eax,0x8(%esp)
		shift -= 32;
   2255c:	83 6c 24 0c 20       	subl   $0x20,0xc(%esp)
   22561:	eb 1b                	jmp    2257e <real_to_int+0xdf>
// 如果两值差值介于2的64次方与96次方之间，把实数高位a->b放入下溢出变量underflow，指数差值shift-64。
	} else if (shift < 96) {
   22563:	83 7c 24 0c 5f       	cmpl   $0x5f,0xc(%esp)
   22568:	0f 8f 31 01 00 00    	jg     2269f <real_to_int+0x200>
		underflow = a->b;
   2256e:	8b 44 24 18          	mov    0x18(%esp),%eax
   22572:	8b 40 04             	mov    0x4(%eax),%eax
   22575:	89 44 24 08          	mov    %eax,0x8(%esp)
		shift -= 64;
   22579:	83 6c 24 0c 40       	subl   $0x40,0xc(%esp)
	} else
		return;
// 接着再进行细致的调整，调整方法是把临时整数b的向下溢出变量underflow右移shift位。
	__asm__("shrdl %2,%1,%0"
		:"=r" (underflow),"=r" (b->a)
		:"c" ((char) shift),"0" (underflow),"1" (b->a));
   2257e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   22582:	89 c1                	mov    %eax,%ecx
		shift -= 64;
// 否则返回0。
	} else
		return;
// 接着再进行细致的调整，调整方法是把临时整数b的向下溢出变量underflow右移shift位。
	__asm__("shrdl %2,%1,%0"
   22584:	8b 54 24 08          	mov    0x8(%esp),%edx
		:"=r" (underflow),"=r" (b->a)
		:"c" ((char) shift),"0" (underflow),"1" (b->a));
   22588:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   2258c:	8b 00                	mov    (%eax),%eax
		shift -= 64;
// 否则返回0。
	} else
		return;
// 接着再进行细致的调整，调整方法是把临时整数b的向下溢出变量underflow右移shift位。
	__asm__("shrdl %2,%1,%0"
   2258e:	0f ad c2             	shrd   %cl,%eax,%edx
   22591:	89 54 24 08          	mov    %edx,0x8(%esp)
   22595:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   22599:	89 02                	mov    %eax,(%edx)
		:"=r" (underflow),"=r" (b->a)
		:"c" ((char) shift),"0" (underflow),"1" (b->a));
// 然后把临时整数b的尾数b->a右移shift位。
	__asm__("shrdl %2,%1,%0"
		:"=r" (b->a),"=r" (b->b)
		:"c" ((char) shift),"0" (b->a),"1" (b->b));
   2259b:	8b 44 24 0c          	mov    0xc(%esp),%eax
   2259f:	89 c1                	mov    %eax,%ecx
   225a1:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   225a5:	8b 10                	mov    (%eax),%edx
   225a7:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   225ab:	8b 40 04             	mov    0x4(%eax),%eax
// 接着再进行细致的调整，调整方法是把临时整数b的向下溢出变量underflow右移shift位。
	__asm__("shrdl %2,%1,%0"
		:"=r" (underflow),"=r" (b->a)
		:"c" ((char) shift),"0" (underflow),"1" (b->a));
// 然后把临时整数b的尾数b->a右移shift位。
	__asm__("shrdl %2,%1,%0"
   225ae:	0f ad c2             	shrd   %cl,%eax,%edx
   225b1:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
   225b5:	89 11                	mov    %edx,(%ecx)
   225b7:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   225bb:	89 42 04             	mov    %eax,0x4(%edx)
		:"=r" (b->a),"=r" (b->b)
		:"c" ((char) shift),"0" (b->a),"1" (b->b));
// 最后把临时整数b的尾数b->b右移shift位。
	__asm__("shrl %1,%0"
		:"=r" (b->b)
		:"c" ((char) shift),"0" (b->b));
   225be:	8b 44 24 0c          	mov    0xc(%esp),%eax
   225c2:	89 c2                	mov    %eax,%edx
   225c4:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   225c8:	8b 40 04             	mov    0x4(%eax),%eax
// 然后把临时整数b的尾数b->a右移shift位。
	__asm__("shrdl %2,%1,%0"
		:"=r" (b->a),"=r" (b->b)
		:"c" ((char) shift),"0" (b->a),"1" (b->b));
// 最后把临时整数b的尾数b->b右移shift位。
	__asm__("shrl %1,%0"
   225cb:	89 d1                	mov    %edx,%ecx
   225cd:	d3 e8                	shr    %cl,%eax
   225cf:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   225d3:	89 42 04             	mov    %eax,0x4(%edx)
		:"=r" (b->b)
		:"c" ((char) shift),"0" (b->b));
// 根据控制字中的舍入设置执行舍入操作。
	switch (ROUNDING) {
   225d6:	a1 a0 e1 02 00       	mov    0x2e1a0,%eax
   225db:	8b 80 18 04 00 00    	mov    0x418(%eax),%eax
   225e1:	c1 f8 0a             	sar    $0xa,%eax
   225e4:	83 e0 03             	and    $0x3,%eax
   225e7:	83 f8 01             	cmp    $0x1,%eax
   225ea:	74 7b                	je     22667 <real_to_int+0x1c8>
   225ec:	83 f8 02             	cmp    $0x2,%eax
   225ef:	74 3f                	je     22630 <real_to_int+0x191>
   225f1:	85 c0                	test   %eax,%eax
   225f3:	0f 85 ad 00 00 00    	jne    226a6 <real_to_int+0x207>
		case ROUND_NEAREST:
			__asm__("addl %4,%5 ; adcl $0,%0 ; adcl $0,%1"
				:"=r" (b->a),"=r" (b->b)
				:"0" (b->a),"1" (b->b)
   225f9:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   225fd:	8b 10                	mov    (%eax),%edx
   225ff:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   22603:	8b 58 04             	mov    0x4(%eax),%ebx
				,"r" (0x7fffffff + (b->a & 1))
   22606:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   2260a:	8b 00                	mov    (%eax),%eax
   2260c:	83 e0 01             	and    $0x1,%eax
   2260f:	8d 88 ff ff ff 7f    	lea    0x7fffffff(%eax),%ecx
		:"=r" (b->b)
		:"c" ((char) shift),"0" (b->b));
// 根据控制字中的舍入设置执行舍入操作。
	switch (ROUNDING) {
		case ROUND_NEAREST:
			__asm__("addl %4,%5 ; adcl $0,%0 ; adcl $0,%1"
   22615:	89 d8                	mov    %ebx,%eax
   22617:	01 4c 24 08          	add    %ecx,0x8(%esp)
   2261b:	83 d2 00             	adc    $0x0,%edx
   2261e:	83 d0 00             	adc    $0x0,%eax
   22621:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
   22625:	89 11                	mov    %edx,(%ecx)
   22627:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   2262b:	89 42 04             	mov    %eax,0x4(%edx)
				:"=r" (b->a),"=r" (b->b)
				:"0" (b->a),"1" (b->b)
				,"r" (0x7fffffff + (b->a & 1))
				,"m" (*&underflow));
			break;
   2262e:	eb 76                	jmp    226a6 <real_to_int+0x207>
		case ROUND_UP:
			if (!b->sign && underflow)
   22630:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   22634:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   22638:	66 85 c0             	test   %ax,%ax
   2263b:	75 65                	jne    226a2 <real_to_int+0x203>
   2263d:	8b 44 24 08          	mov    0x8(%esp),%eax
   22641:	85 c0                	test   %eax,%eax
   22643:	74 5d                	je     226a2 <real_to_int+0x203>
				__asm__("addl $1,%0 ; adcl $0,%1"
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
   22645:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   22649:	8b 10                	mov    (%eax),%edx
   2264b:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   2264f:	8b 40 04             	mov    0x4(%eax),%eax
				,"r" (0x7fffffff + (b->a & 1))
				,"m" (*&underflow));
			break;
		case ROUND_UP:
			if (!b->sign && underflow)
				__asm__("addl $1,%0 ; adcl $0,%1"
   22652:	83 c2 01             	add    $0x1,%edx
   22655:	83 d0 00             	adc    $0x0,%eax
   22658:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
   2265c:	89 11                	mov    %edx,(%ecx)
   2265e:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   22662:	89 42 04             	mov    %eax,0x4(%edx)
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
			break;
   22665:	eb 3b                	jmp    226a2 <real_to_int+0x203>
		case ROUND_DOWN:
			if (b->sign && underflow)
   22667:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   2266b:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   2266f:	66 85 c0             	test   %ax,%ax
   22672:	74 31                	je     226a5 <real_to_int+0x206>
   22674:	8b 44 24 08          	mov    0x8(%esp),%eax
   22678:	85 c0                	test   %eax,%eax
   2267a:	74 29                	je     226a5 <real_to_int+0x206>
				__asm__("addl $1,%0 ; adcl $0,%1"
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
   2267c:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   22680:	8b 10                	mov    (%eax),%edx
   22682:	8b 44 24 1c          	mov    0x1c(%esp),%eax
   22686:	8b 40 04             	mov    0x4(%eax),%eax
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
			break;
		case ROUND_DOWN:
			if (b->sign && underflow)
				__asm__("addl $1,%0 ; adcl $0,%1"
   22689:	83 c2 01             	add    $0x1,%edx
   2268c:	83 d0 00             	adc    $0x0,%eax
   2268f:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
   22693:	89 11                	mov    %edx,(%ecx)
   22695:	8b 54 24 1c          	mov    0x1c(%esp),%edx
   22699:	89 42 04             	mov    %eax,0x4(%edx)
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
			break;
   2269c:	90                   	nop
   2269d:	eb 06                	jmp    226a5 <real_to_int+0x206>
	} else if (shift < 96) {
		underflow = a->b;
		shift -= 64;
// 否则返回0。
	} else
		return;
   2269f:	90                   	nop
   226a0:	eb 04                	jmp    226a6 <real_to_int+0x207>
		case ROUND_UP:
			if (!b->sign && underflow)
				__asm__("addl $1,%0 ; adcl $0,%1"
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
			break;
   226a2:	90                   	nop
   226a3:	eb 01                	jmp    226a6 <real_to_int+0x207>
		case ROUND_DOWN:
			if (b->sign && underflow)
				__asm__("addl $1,%0 ; adcl $0,%1"
					:"=r" (b->a),"=r" (b->b)
					:"0" (b->a),"1" (b->b));
			break;
   226a5:	90                   	nop
	}
}
   226a6:	83 c4 10             	add    $0x10,%esp
   226a9:	5b                   	pop    %ebx
   226aa:	c3                   	ret    

000226ab <int_to_real>:

// 临时整数转换成临时实数格式。
void int_to_real(const temp_int * a, temp_real * b)
{
// 由于原值是整数，所以转换成临时实数时指数除了需要加上偏置量16383外，还要加上63。表示
	b->a = a->a;
   226ab:	8b 44 24 04          	mov    0x4(%esp),%eax
   226af:	8b 10                	mov    (%eax),%edx
   226b1:	8b 44 24 08          	mov    0x8(%esp),%eax
   226b5:	89 10                	mov    %edx,(%eax)
	b->b = a->b;
   226b7:	8b 44 24 04          	mov    0x4(%esp),%eax
   226bb:	8b 50 04             	mov    0x4(%eax),%edx
   226be:	8b 44 24 08          	mov    0x8(%esp),%eax
   226c2:	89 50 04             	mov    %edx,0x4(%eax)
	if (b->a || b->b)
   226c5:	8b 44 24 08          	mov    0x8(%esp),%eax
   226c9:	8b 00                	mov    (%eax),%eax
   226cb:	85 c0                	test   %eax,%eax
   226cd:	75 0b                	jne    226da <int_to_real+0x2f>
   226cf:	8b 44 24 08          	mov    0x8(%esp),%eax
   226d3:	8b 40 04             	mov    0x4(%eax),%eax
   226d6:	85 c0                	test   %eax,%eax
   226d8:	74 23                	je     226fd <int_to_real+0x52>
		b->exponent = 16383 + 63 + (a->sign? 0x8000:0);
   226da:	8b 44 24 04          	mov    0x4(%esp),%eax
   226de:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   226e2:	66 85 c0             	test   %ax,%ax
   226e5:	74 07                	je     226ee <int_to_real+0x43>
   226e7:	ba 3e c0 ff ff       	mov    $0xffffc03e,%edx
   226ec:	eb 05                	jmp    226f3 <int_to_real+0x48>
   226ee:	ba 3e 40 00 00       	mov    $0x403e,%edx
   226f3:	8b 44 24 08          	mov    0x8(%esp),%eax
   226f7:	66 89 50 08          	mov    %dx,0x8(%eax)
	else {
		b->exponent = 0;
		return;
	}
// 对格式转换后的临时实数进行规格化处理，即让有效数最高有效位不是0。
	while (b->b >= 0) {
   226fb:	eb 3f                	jmp    2273c <int_to_real+0x91>
	b->a = a->a;
	b->b = a->b;
	if (b->a || b->b)
		b->exponent = 16383 + 63 + (a->sign? 0x8000:0);
	else {
		b->exponent = 0;
   226fd:	8b 44 24 08          	mov    0x8(%esp),%eax
   22701:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		return;
   22707:	eb 3e                	jmp    22747 <int_to_real+0x9c>
	}
// 对格式转换后的临时实数进行规格化处理，即让有效数最高有效位不是0。
	while (b->b >= 0) {
		b->exponent--;
   22709:	8b 44 24 08          	mov    0x8(%esp),%eax
   2270d:	0f b7 40 08          	movzwl 0x8(%eax),%eax
   22711:	83 e8 01             	sub    $0x1,%eax
   22714:	89 c2                	mov    %eax,%edx
   22716:	8b 44 24 08          	mov    0x8(%esp),%eax
   2271a:	66 89 50 08          	mov    %dx,0x8(%eax)
		__asm__("addl %0,%0 ; adcl %1,%1"
			:"=r" (b->a),"=r" (b->b)
			:"0" (b->a),"1" (b->b));
   2271e:	8b 44 24 08          	mov    0x8(%esp),%eax
   22722:	8b 10                	mov    (%eax),%edx
   22724:	8b 44 24 08          	mov    0x8(%esp),%eax
   22728:	8b 40 04             	mov    0x4(%eax),%eax
		return;
	}
// 对格式转换后的临时实数进行规格化处理，即让有效数最高有效位不是0。
	while (b->b >= 0) {
		b->exponent--;
		__asm__("addl %0,%0 ; adcl %1,%1"
   2272b:	01 d2                	add    %edx,%edx
   2272d:	11 c0                	adc    %eax,%eax
   2272f:	8b 4c 24 08          	mov    0x8(%esp),%ecx
   22733:	89 11                	mov    %edx,(%ecx)
   22735:	8b 54 24 08          	mov    0x8(%esp),%edx
   22739:	89 42 04             	mov    %eax,0x4(%edx)
	else {
		b->exponent = 0;
		return;
	}
// 对格式转换后的临时实数进行规格化处理，即让有效数最高有效位不是0。
	while (b->b >= 0) {
   2273c:	8b 44 24 08          	mov    0x8(%esp),%eax
   22740:	8b 40 04             	mov    0x4(%eax),%eax
   22743:	85 c0                	test   %eax,%eax
   22745:	79 c2                	jns    22709 <int_to_real+0x5e>
		b->exponent--;
		__asm__("addl %0,%0 ; adcl %1,%1"
			:"=r" (b->a),"=r" (b->b)
			:"0" (b->a),"1" (b->b));
	}
}
   22747:	c3                   	ret    

00022748 <_exit>:
// 直接调用系统中断int 0x80,功能号__NR_exit.
// 参数:exit_code - 退出码.
// 函数名前的关键字volatile用于告诉编译器gcc该函数不会返回.这样可让gcc产生更好的代码,更重要的是使用这个关键字可以避免产生某些(未初始化变量的)
// 假警告信息.等同于gcc的函数属性说明:void do_exit(int error_code) __attribute__((noreturn));
void _exit(int exit_code)
{
   22748:	53                   	push   %ebx
	__asm__ __volatile__ ("int $0x80"::"a" (__NR_exit), "b" (exit_code));
   22749:	b8 01 00 00 00       	mov    $0x1,%eax
   2274e:	8b 54 24 08          	mov    0x8(%esp),%edx
   22752:	89 d3                	mov    %edx,%ebx
   22754:	cd 80                	int    $0x80
}
   22756:	90                   	nop
   22757:	5b                   	pop    %ebx
   22758:	c3                   	ret    

00022759 <open>:
// 打开文件函数
// 打开并有可能创建一个文件.
// 参数:filname - 文件名;flag - 文件打开标志;...
// 返回:文件描述符,若出错则置出错码,并返回-1.
int open(const char * filename, int flag, ...)
{
   22759:	53                   	push   %ebx
   2275a:	83 ec 10             	sub    $0x10,%esp

	// 利用va_start()宏函数,取得flag后面参数的指针,然后调用系统中断int 0x80,功能open进行.
	// 文件打开操作.
	// %0 - eax(返回的描述符或出错码); %1 - eax(系统中断调用功能号__NR_open);
	// %2 - ebx(文件名filename); %3 - ecx(打开文件标志flag); %4 - edx(后随参数文件属性mode).
	va_start(arg, flag);
   2275d:	8d 44 24 1c          	lea    0x1c(%esp),%eax
   22761:	83 c0 04             	add    $0x4,%eax
   22764:	89 44 24 0c          	mov    %eax,0xc(%esp)
	__asm__(
   22768:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
		"int $0x80"
		:"=a" (res)
		:"0" (__NR_open), "b" (filename), "c" (flag),
		"d" (va_arg(arg, int)));
   2276c:	83 44 24 0c 04       	addl   $0x4,0xc(%esp)
   22771:	8b 44 24 0c          	mov    0xc(%esp),%eax
   22775:	83 e8 04             	sub    $0x4,%eax
   22778:	8b 10                	mov    (%eax),%edx
	// 利用va_start()宏函数,取得flag后面参数的指针,然后调用系统中断int 0x80,功能open进行.
	// 文件打开操作.
	// %0 - eax(返回的描述符或出错码); %1 - eax(系统中断调用功能号__NR_open);
	// %2 - ebx(文件名filename); %3 - ecx(打开文件标志flag); %4 - edx(后随参数文件属性mode).
	va_start(arg, flag);
	__asm__(
   2277a:	b8 05 00 00 00       	mov    $0x5,%eax
   2277f:	8b 5c 24 18          	mov    0x18(%esp),%ebx
   22783:	cd 80                	int    $0x80
   22785:	89 c3                	mov    %eax,%ebx
		"int $0x80"
		:"=a" (res)
		:"0" (__NR_open), "b" (filename), "c" (flag),
		"d" (va_arg(arg, int)));
	// 系统中断调用返回值大于或等于0,表示是一个文件描述符,则直接返回之.
	if (res >= 0)
   22787:	85 db                	test   %ebx,%ebx
   22789:	78 04                	js     2278f <open+0x36>
		return res;
   2278b:	89 d8                	mov    %ebx,%eax
   2278d:	eb 0e                	jmp    2279d <open+0x44>
	// 否则说明返回值小于0,则代表一个出错码.设置该出错码并返回-1.
	errno = -res;
   2278f:	89 d8                	mov    %ebx,%eax
   22791:	f7 d8                	neg    %eax
   22793:	a3 24 58 04 00       	mov    %eax,0x45824
	return -1;
   22798:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   2279d:	83 c4 10             	add    $0x10,%esp
   227a0:	5b                   	pop    %ebx
   227a1:	c3                   	ret    

000227a2 <close>:
#define __LIBRARY__
#include <unistd.h>	                                // Linux标准头文件.定义了各种符号常数和类型,并声明了各种函数.

// 关闭文件函数
// 下面该调用宏函数对应:int close(int fd).直接调用了系统中断int 0x80,参数是__NR_close.其中fd是文件描述符.
_syscall1(int, close, int, fd)
   227a2:	53                   	push   %ebx
   227a3:	83 ec 10             	sub    $0x10,%esp
   227a6:	b8 06 00 00 00       	mov    $0x6,%eax
   227ab:	8b 54 24 18          	mov    0x18(%esp),%edx
   227af:	89 d3                	mov    %edx,%ebx
   227b1:	cd 80                	int    $0x80
   227b3:	89 44 24 0c          	mov    %eax,0xc(%esp)
   227b7:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   227bc:	78 06                	js     227c4 <close+0x22>
   227be:	8b 44 24 0c          	mov    0xc(%esp),%eax
   227c2:	eb 10                	jmp    227d4 <close+0x32>
   227c4:	8b 44 24 0c          	mov    0xc(%esp),%eax
   227c8:	f7 d8                	neg    %eax
   227ca:	a3 24 58 04 00       	mov    %eax,0x45824
   227cf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   227d4:	83 c4 10             	add    $0x10,%esp
   227d7:	5b                   	pop    %ebx
   227d8:	c3                   	ret    

000227d9 <write>:

// 写文件系统调用函函数.
// 该宏结构对应于函数:int write(int fd, const char * buf, off_t count)
// 参数:fd - 文件描述符;buf - 写缓冲指针; count - 写字节数.
// 返回:成功时返回写入的字节数(0表示写入0字节);出错时将返回-1,并且设置了出错号.
_syscall3(int, write, int, fd, const char *, buf, off_t, count)
   227d9:	53                   	push   %ebx
   227da:	83 ec 10             	sub    $0x10,%esp
   227dd:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
   227e1:	b8 04 00 00 00       	mov    $0x4,%eax
   227e6:	8b 5c 24 18          	mov    0x18(%esp),%ebx
   227ea:	8b 54 24 20          	mov    0x20(%esp),%edx
   227ee:	cd 80                	int    $0x80
   227f0:	89 44 24 0c          	mov    %eax,0xc(%esp)
   227f4:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   227f9:	78 06                	js     22801 <write+0x28>
   227fb:	8b 44 24 0c          	mov    0xc(%esp),%eax
   227ff:	eb 10                	jmp    22811 <write+0x38>
   22801:	8b 44 24 0c          	mov    0xc(%esp),%eax
   22805:	f7 d8                	neg    %eax
   22807:	a3 24 58 04 00       	mov    %eax,0x45824
   2280c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   22811:	83 c4 10             	add    $0x10,%esp
   22814:	5b                   	pop    %ebx
   22815:	c3                   	ret    

00022816 <dup>:
			                                    // 如定义了__LIBRARY__,则还含系统调用号和内嵌汇编_syscall0()等.

// 复制文件描述符函数.
// 下面该调用宏函数对应:int dup(int fd).直接调用了系统中断int 0x80,参数是__NR_dup.
// 其中fd是文件描述符.
_syscall1(int, dup, int, fd)
   22816:	53                   	push   %ebx
   22817:	83 ec 10             	sub    $0x10,%esp
   2281a:	b8 29 00 00 00       	mov    $0x29,%eax
   2281f:	8b 54 24 18          	mov    0x18(%esp),%edx
   22823:	89 d3                	mov    %edx,%ebx
   22825:	cd 80                	int    $0x80
   22827:	89 44 24 0c          	mov    %eax,0xc(%esp)
   2282b:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   22830:	78 06                	js     22838 <dup+0x22>
   22832:	8b 44 24 0c          	mov    0xc(%esp),%eax
   22836:	eb 10                	jmp    22848 <dup+0x32>
   22838:	8b 44 24 0c          	mov    0xc(%esp),%eax
   2283c:	f7 d8                	neg    %eax
   2283e:	a3 24 58 04 00       	mov    %eax,0x45824
   22843:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   22848:	83 c4 10             	add    $0x10,%esp
   2284b:	5b                   	pop    %ebx
   2284c:	c3                   	ret    

0002284d <setsid>:
#include <unistd.h>

// 创建一个会话并设置进程组号。
// 下面系统调用宏对应于函数：pid_t setsid()。
// 返回：调用进程的会话标识符（session ID）。
_syscall0(pid_t, setsid)
   2284d:	83 ec 10             	sub    $0x10,%esp
   22850:	b8 42 00 00 00       	mov    $0x42,%eax
   22855:	cd 80                	int    $0x80
   22857:	89 44 24 0c          	mov    %eax,0xc(%esp)
   2285b:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   22860:	78 06                	js     22868 <setsid+0x1b>
   22862:	8b 44 24 0c          	mov    0xc(%esp),%eax
   22866:	eb 10                	jmp    22878 <setsid+0x2b>
   22868:	8b 44 24 0c          	mov    0xc(%esp),%eax
   2286c:	f7 d8                	neg    %eax
   2286e:	a3 24 58 04 00       	mov    %eax,0x45824
   22873:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   22878:	83 c4 10             	add    $0x10,%esp
   2287b:	c3                   	ret    

0002287c <execve>:

// 加载并执行子进程(其他程序)函数.
// 下面该调用宏函数对应:int execve(const char * file,char ** argv, char ** envp).
// 参数:file - 被执行程序文件名;argv - 命令行参数指针数组;envp - 环境变量指针数组.
// 直接调用了系统中断int 0x80,参数是__NR_execve.参见include/unistd.h和fs/exec.c程序.
_syscall3(int, execve, const char *, file, char **, argv, char **, envp)
   2287c:	53                   	push   %ebx
   2287d:	83 ec 10             	sub    $0x10,%esp
   22880:	8b 5c 24 18          	mov    0x18(%esp),%ebx
   22884:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
   22888:	8b 54 24 20          	mov    0x20(%esp),%edx
   2288c:	b8 0b 00 00 00       	mov    $0xb,%eax
   22891:	cd 80                	int    $0x80
   22893:	89 44 24 0c          	mov    %eax,0xc(%esp)
   22897:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   2289c:	78 06                	js     228a4 <execve+0x28>
   2289e:	8b 44 24 0c          	mov    0xc(%esp),%eax
   228a2:	eb 10                	jmp    228b4 <execve+0x38>
   228a4:	8b 44 24 0c          	mov    0xc(%esp),%eax
   228a8:	f7 d8                	neg    %eax
   228aa:	a3 24 58 04 00       	mov    %eax,0x45824
   228af:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   228b4:	83 c4 10             	add    $0x10,%esp
   228b7:	5b                   	pop    %ebx
   228b8:	c3                   	ret    

000228b9 <waitpid>:

// 等待进程终止系统调用函数.
// 该下面宏结构对应于函数:pid_t waitpid(pid_t pid,int * wait_stat,int options)
//
// 参数:pid - 等待被终止进程的进程id,或者是用于指定特殊情况的其他特定数值;wait_stat - 用于存放状态信息;options - WNOHANG或WUNTRACED或是0.
_syscall3(pid_t, waitpid, pid_t, pid, int *, wait_stat, int, options)
   228b9:	53                   	push   %ebx
   228ba:	83 ec 10             	sub    $0x10,%esp
   228bd:	8b 4c 24 1c          	mov    0x1c(%esp),%ecx
   228c1:	b8 07 00 00 00       	mov    $0x7,%eax
   228c6:	8b 5c 24 18          	mov    0x18(%esp),%ebx
   228ca:	8b 54 24 20          	mov    0x20(%esp),%edx
   228ce:	cd 80                	int    $0x80
   228d0:	89 44 24 0c          	mov    %eax,0xc(%esp)
   228d4:	83 7c 24 0c 00       	cmpl   $0x0,0xc(%esp)
   228d9:	78 06                	js     228e1 <waitpid+0x28>
   228db:	8b 44 24 0c          	mov    0xc(%esp),%eax
   228df:	eb 10                	jmp    228f1 <waitpid+0x38>
   228e1:	8b 44 24 0c          	mov    0xc(%esp),%eax
   228e5:	f7 d8                	neg    %eax
   228e7:	a3 24 58 04 00       	mov    %eax,0x45824
   228ec:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   228f1:	83 c4 10             	add    $0x10,%esp
   228f4:	5b                   	pop    %ebx
   228f5:	c3                   	ret    

000228f6 <wait>:

// wait()系统调用.直接调用waitpid()函数.
pid_t wait(int * wait_stat)
{
	return waitpid(-1, wait_stat, 0);
   228f6:	6a 00                	push   $0x0
   228f8:	ff 74 24 08          	pushl  0x8(%esp)
   228fc:	6a ff                	push   $0xffffffff
   228fe:	e8 b6 ff ff ff       	call   228b9 <waitpid>
   22903:	83 c4 0c             	add    $0xc,%esp
}
   22906:	c3                   	ret    

00022907 <Log>:

static unsigned short cur_log_level = LOG_INFO_TYPE;

// linux0.12 kernel log function
void Log(unsigned short log_level, const char *fmt, ...)
{
   22907:	83 ec 2c             	sub    $0x2c,%esp
   2290a:	8b 44 24 30          	mov    0x30(%esp),%eax
   2290e:	66 89 44 24 0c       	mov    %ax,0xc(%esp)
    if (log_level >= cur_log_level) {
   22913:	0f b7 05 e0 f6 03 00 	movzwl 0x3f6e0,%eax
   2291a:	66 39 44 24 0c       	cmp    %ax,0xc(%esp)
   2291f:	72 34                	jb     22955 <Log+0x4e>
        va_list args;                           // va_list实际上是一个字符指针类型.

        // 运行参数处理开始函数.然后使用格式串fmt将参数列表args输出到buf中.返回值i等于输出字符串的长度.再运行参数处理结束函数.最后调用控制台显示
        // 函数并返回显示字符数.
        va_start(args, fmt);
   22921:	8d 44 24 34          	lea    0x34(%esp),%eax
   22925:	83 c0 04             	add    $0x4,%eax
   22928:	89 44 24 1c          	mov    %eax,0x1c(%esp)
        vsprintf(log_buf, fmt, args);
   2292c:	8b 44 24 34          	mov    0x34(%esp),%eax
   22930:	83 ec 04             	sub    $0x4,%esp
   22933:	ff 74 24 20          	pushl  0x20(%esp)
   22937:	50                   	push   %eax
   22938:	68 e0 f2 03 00       	push   $0x3f2e0
   2293d:	e8 43 66 fe ff       	call   8f85 <vsprintf>
   22942:	83 c4 10             	add    $0x10,%esp
        va_end(args);
        console_print(log_buf);                 // chr_drv/console.c
   22945:	83 ec 0c             	sub    $0xc,%esp
   22948:	68 e0 f2 03 00       	push   $0x3f2e0
   2294d:	e8 2a ab ff ff       	call   1d47c <console_print>
   22952:	83 c4 10             	add    $0x10,%esp
    }
}
   22955:	90                   	nop
   22956:	83 c4 2c             	add    $0x2c,%esp
   22959:	c3                   	ret    
